
USB_HOST_F107.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2ac  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800a49c  0800a49c  0001a49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a588  0800a588  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a588  0800a588  0001a588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a590  0800a590  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a590  0800a590  0001a590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a594  0800a594  0001a594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  0800a598  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b10  2000009c  0800a634  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bac  0800a634  00022bac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ceb7  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a6a  00000000  00000000  0003cf7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001890  00000000  00000000  000419e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b8  00000000  00000000  00043278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002400d  00000000  00000000  00044930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ce27  00000000  00000000  0006893d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7e37  00000000  00000000  00085764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014d59b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006840  00000000  00000000  0014d5ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	2000009c 	.word	0x2000009c
 800020c:	00000000 	.word	0x00000000
 8000210:	0800a484 	.word	0x0800a484

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000a0 	.word	0x200000a0
 800022c:	0800a484 	.word	0x0800a484

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b976 	b.w	8000534 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000296:	fbb8 f7f1 	udiv	r7, r8, r1
 800029a:	fa1f fe8c 	uxth.w	lr, ip
 800029e:	fb01 8817 	mls	r8, r1, r7, r8
 80002a2:	fb07 f00e 	mul.w	r0, r7, lr
 80002a6:	0c23      	lsrs	r3, r4, #16
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	4298      	cmp	r0, r3
 80002ae:	d90a      	bls.n	80002c6 <__udivmoddi4+0x66>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f107 35ff 	add.w	r5, r7, #4294967295
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4298      	cmp	r0, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	3f02      	subs	r7, #2
 80002c4:	4463      	add	r3, ip
 80002c6:	1a1b      	subs	r3, r3, r0
 80002c8:	fbb3 f0f1 	udiv	r0, r3, r1
 80002cc:	fb01 3310 	mls	r3, r1, r0, r3
 80002d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002da:	45a6      	cmp	lr, r4
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0404 	adds.w	r4, ip, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8109 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8106 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f0:	4464      	add	r4, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	2100      	movs	r1, #0
 80002f6:	eba4 040e 	sub.w	r4, r4, lr
 80002fa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	2300      	movs	r3, #0
 8000302:	40d4      	lsrs	r4, r2
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80fc 	bhi.w	800052c <__udivmoddi4+0x2cc>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 000c 	sub.w	r0, r1, ip
 800035a:	2101      	movs	r1, #1
 800035c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000360:	fa1f fe8c 	uxth.w	lr, ip
 8000364:	fbb0 f3f7 	udiv	r3, r0, r7
 8000368:	fb07 0013 	mls	r0, r7, r3, r0
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80ce 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000392:	fb07 5510 	mls	r5, r7, r0, r5
 8000396:	fb0e fe00 	mul.w	lr, lr, r0
 800039a:	b2a4      	uxth	r4, r4
 800039c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80b6 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa25 fa07 	lsr.w	sl, r5, r7
 80003d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d6:	fbba f8f9 	udiv	r8, sl, r9
 80003da:	fa20 f307 	lsr.w	r3, r0, r7
 80003de:	fb09 aa18 	mls	sl, r9, r8, sl
 80003e2:	408d      	lsls	r5, r1
 80003e4:	fa1f fe8c 	uxth.w	lr, ip
 80003e8:	431d      	orrs	r5, r3
 80003ea:	fa00 f301 	lsl.w	r3, r0, r1
 80003ee:	fb08 f00e 	mul.w	r0, r8, lr
 80003f2:	0c2c      	lsrs	r4, r5, #16
 80003f4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80003f8:	42a0      	cmp	r0, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a0      	cmp	r0, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1a24      	subs	r4, r4, r0
 800041a:	fbb4 f0f9 	udiv	r0, r4, r9
 800041e:	fb09 4410 	mls	r4, r9, r0, r4
 8000422:	fb00 fe0e 	mul.w	lr, r0, lr
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f100 35ff 	add.w	r5, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9502 	umull	r9, r5, r0, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2d0>
 800045c:	ebb3 0208 	subs.w	r2, r3, r8
 8000460:	eb64 040e 	sbc.w	r4, r4, lr
 8000464:	fa22 f301 	lsr.w	r3, r2, r1
 8000468:	fa04 f707 	lsl.w	r7, r4, r7
 800046c:	431f      	orrs	r7, r3
 800046e:	40cc      	lsrs	r4, r1
 8000470:	e9c6 7400 	strd	r7, r4, [r6]
 8000474:	2100      	movs	r1, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa8>
 8000478:	fa0c fc02 	lsl.w	ip, ip, r2
 800047c:	f1c2 0120 	rsb	r1, r2, #32
 8000480:	fa25 f301 	lsr.w	r3, r5, r1
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa20 f101 	lsr.w	r1, r0, r1
 800048c:	4095      	lsls	r5, r2
 800048e:	430d      	orrs	r5, r1
 8000490:	fbb3 f1f7 	udiv	r1, r3, r7
 8000494:	fb07 3311 	mls	r3, r7, r1, r3
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	0c28      	lsrs	r0, r5, #16
 800049e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004a2:	fb01 f30e 	mul.w	r3, r1, lr
 80004a6:	4283      	cmp	r3, r0
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0000 	adds.w	r0, ip, r0
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4283      	cmp	r3, r0
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4460      	add	r0, ip
 80004c0:	1ac0      	subs	r0, r0, r3
 80004c2:	fbb0 f3f7 	udiv	r3, r0, r7
 80004c6:	fb07 0013 	mls	r0, r7, r3, r0
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004d0:	fb03 f00e 	mul.w	r0, r3, lr
 80004d4:	42a8      	cmp	r0, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42a8      	cmp	r0, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1a28      	subs	r0, r5, r0
 80004ec:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	462f      	mov	r7, r5
 80004fa:	e6e4      	b.n	80002c6 <__udivmoddi4+0x66>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f9      	b.n	80002f4 <__udivmoddi4+0x94>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4643      	mov	r3, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4628      	mov	r0, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	4464      	add	r4, ip
 8000522:	3802      	subs	r0, #2
 8000524:	e747      	b.n	80003b6 <__udivmoddi4+0x156>
 8000526:	3b02      	subs	r3, #2
 8000528:	4465      	add	r5, ip
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x12c>
 800052c:	4608      	mov	r0, r1
 800052e:	e706      	b.n	800033e <__udivmoddi4+0xde>
 8000530:	4631      	mov	r1, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa8>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000538:	b480      	push	{r7}
 800053a:	b085      	sub	sp, #20
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	4a06      	ldr	r2, [pc, #24]	; (8000560 <vApplicationGetIdleTaskMemory+0x28>)
 8000548:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	4a05      	ldr	r2, [pc, #20]	; (8000564 <vApplicationGetIdleTaskMemory+0x2c>)
 800054e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2280      	movs	r2, #128	; 0x80
 8000554:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000556:	bf00      	nop
 8000558:	3714      	adds	r7, #20
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	200000b8 	.word	0x200000b8
 8000564:	2000010c 	.word	0x2000010c

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b5b0      	push	{r4, r5, r7, lr}
 800056a:	b092      	sub	sp, #72	; 0x48
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056e:	f000 fb35 	bl	8000bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000572:	f000 f85b 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000576:	f000 f8ed 	bl	8000754 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800057a:	f000 f8c1 	bl	8000700 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1000);
 800057e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000582:	f000 fb5d 	bl	8000c40 <HAL_Delay>
  HAL_UART_Transmit(&huart1,"start",5,100);
 8000586:	2364      	movs	r3, #100	; 0x64
 8000588:	2205      	movs	r2, #5
 800058a:	491f      	ldr	r1, [pc, #124]	; (8000608 <main+0xa0>)
 800058c:	481f      	ldr	r0, [pc, #124]	; (800060c <main+0xa4>)
 800058e:	f003 fd4c 	bl	800402a <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1,uart_tx_msg,1);
 8000592:	2201      	movs	r2, #1
 8000594:	491e      	ldr	r1, [pc, #120]	; (8000610 <main+0xa8>)
 8000596:	481d      	ldr	r0, [pc, #116]	; (800060c <main+0xa4>)
 8000598:	f003 fdd9 	bl	800414e <HAL_UART_Receive_IT>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of AppliEvent */
  osMessageQDef(AppliEvent, 10, uint16_t);
 800059c:	4b1d      	ldr	r3, [pc, #116]	; (8000614 <main+0xac>)
 800059e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  AppliEventHandle = osMessageCreate(osMessageQ(AppliEvent), NULL);
 80005a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f007 f9a5 	bl	80078fe <osMessageCreate>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a18      	ldr	r2, [pc, #96]	; (8000618 <main+0xb0>)
 80005b8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <main+0xb4>)
 80005bc:	f107 041c 	add.w	r4, r7, #28
 80005c0:	461d      	mov	r5, r3
 80005c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f007 f932 	bl	800783e <osThreadCreate>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a10      	ldr	r2, [pc, #64]	; (8000620 <main+0xb8>)
 80005de:	6013      	str	r3, [r2, #0]

  /* definition and creation of USB_t */
  osThreadDef(USB_t, USB_f, osPriorityNormal, 0, 256);
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <main+0xbc>)
 80005e2:	463c      	mov	r4, r7
 80005e4:	461d      	mov	r5, r3
 80005e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USB_tHandle = osThreadCreate(osThread(USB_t), NULL);
 80005f2:	463b      	mov	r3, r7
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f007 f921 	bl	800783e <osThreadCreate>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <main+0xc0>)
 8000600:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000602:	f007 f915 	bl	8007830 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000606:	e7fe      	b.n	8000606 <main+0x9e>
 8000608:	0800a4b0 	.word	0x0800a4b0
 800060c:	2000030c 	.word	0x2000030c
 8000610:	200024ac 	.word	0x200024ac
 8000614:	0800a4b8 	.word	0x0800a4b8
 8000618:	20000358 	.word	0x20000358
 800061c:	0800a4c8 	.word	0x0800a4c8
 8000620:	20000350 	.word	0x20000350
 8000624:	0800a4e4 	.word	0x0800a4e4
 8000628:	20000354 	.word	0x20000354

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b09c      	sub	sp, #112	; 0x70
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000636:	2238      	movs	r2, #56	; 0x38
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f009 fe20 	bl	800a280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2220      	movs	r2, #32
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f009 fe12 	bl	800a280 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000664:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000666:	2304      	movs	r3, #4
 8000668:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066a:	2301      	movs	r3, #1
 800066c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800066e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000678:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800067c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800067e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000682:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8000684:	2302      	movs	r3, #2
 8000686:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8000688:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800068c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV2;
 800068e:	2310      	movs	r3, #16
 8000690:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000696:	4618      	mov	r0, r3
 8000698:	f002 fb8e 	bl	8002db8 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006a2:	f000 f91b 	bl	80008dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c0:	2101      	movs	r1, #1
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fe8e 	bl	80033e4 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006ce:	f000 f905 	bl	80008dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80006d2:	2310      	movs	r3, #16
 80006d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV2;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006da:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 f8c8 	bl	8003874 <HAL_RCCEx_PeriphCLKConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ea:	f000 f8f7 	bl	80008dc <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80006ee:	4b03      	ldr	r3, [pc, #12]	; (80006fc <SystemClock_Config+0xd0>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	601a      	str	r2, [r3, #0]
}
 80006f4:	bf00      	nop
 80006f6:	3770      	adds	r7, #112	; 0x70
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	42420070 	.word	0x42420070

08000700 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_USART1_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000738:	f003 fc2a 	bl	8003f90 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 f8cb 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000030c 	.word	0x2000030c
 8000750:	40013800 	.word	0x40013800

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000768:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_GPIO_Init+0x8c>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <MX_GPIO_Init+0x8c>)
 800076e:	f043 0320 	orr.w	r3, r3, #32
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b1a      	ldr	r3, [pc, #104]	; (80007e0 <MX_GPIO_Init+0x8c>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f003 0320 	and.w	r3, r3, #32
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <MX_GPIO_Init+0x8c>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	4a16      	ldr	r2, [pc, #88]	; (80007e0 <MX_GPIO_Init+0x8c>)
 8000786:	f043 0308 	orr.w	r3, r3, #8
 800078a:	6193      	str	r3, [r2, #24]
 800078c:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <MX_GPIO_Init+0x8c>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	f003 0308 	and.w	r3, r3, #8
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <MX_GPIO_Init+0x8c>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a10      	ldr	r2, [pc, #64]	; (80007e0 <MX_GPIO_Init+0x8c>)
 800079e:	f043 0304 	orr.w	r3, r3, #4
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <MX_GPIO_Init+0x8c>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0304 	and.w	r3, r3, #4
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VBUS_FS_GPIO_Port, VBUS_FS_Pin, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2101      	movs	r1, #1
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <MX_GPIO_Init+0x90>)
 80007b6:	f000 fe0d 	bl	80013d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80007ba:	2301      	movs	r3, #1
 80007bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	4619      	mov	r1, r3
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_GPIO_Init+0x90>)
 80007d2:	f000 fc7b 	bl	80010cc <HAL_GPIO_Init>

}
 80007d6:	bf00      	nop
 80007d8:	3720      	adds	r7, #32
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40010c00 	.word	0x40010c00

080007e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	send_function();
 80007f0:	f009 f9ec 	bl	8009bcc <send_function>
	HAL_UART_Receive_IT(&huart1,uart_tx_msg,1);
 80007f4:	2201      	movs	r2, #1
 80007f6:	4904      	ldr	r1, [pc, #16]	; (8000808 <HAL_UART_RxCpltCallback+0x20>)
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <HAL_UART_RxCpltCallback+0x24>)
 80007fa:	f003 fca8 	bl	800414e <HAL_UART_Receive_IT>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200024ac 	.word	0x200024ac
 800080c:	2000030c 	.word	0x2000030c

08000810 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b086      	sub	sp, #24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000818:	f009 fa18 	bl	8009c4c <MX_USB_HOST_Init>

  osEvent event;
  /* Infinite loop */
  for(;;)
  {
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <StartDefaultTask+0x80>)
 800081e:	6819      	ldr	r1, [r3, #0]
 8000820:	f107 030c 	add.w	r3, r7, #12
 8000824:	f04f 32ff 	mov.w	r2, #4294967295
 8000828:	4618      	mov	r0, r3
 800082a:	f007 f8d1 	bl	80079d0 <osMessageGet>

	  if(event.status == osEventMessage)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	2b10      	cmp	r3, #16
 8000832:	d129      	bne.n	8000888 <StartDefaultTask+0x78>
	  {
		switch(event.value.v)
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	2b03      	cmp	r3, #3
 8000838:	d006      	beq.n	8000848 <StartDefaultTask+0x38>
 800083a:	2b03      	cmp	r3, #3
 800083c:	d826      	bhi.n	800088c <StartDefaultTask+0x7c>
 800083e:	2b01      	cmp	r3, #1
 8000840:	d018      	beq.n	8000874 <StartDefaultTask+0x64>
 8000842:	2b02      	cmp	r3, #2
 8000844:	d00a      	beq.n	800085c <StartDefaultTask+0x4c>
		   Appli_state = APPLICATION_START;
		   HAL_UART_Transmit(&huart1,"st",2,100);

		 break;
		 default:
		 break;
 8000846:	e021      	b.n	800088c <StartDefaultTask+0x7c>
		  Appli_state = APPLICATION_DISCONNECT;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <StartDefaultTask+0x84>)
 800084a:	2203      	movs	r2, #3
 800084c:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit(&huart1,"ds",2,100);
 800084e:	2364      	movs	r3, #100	; 0x64
 8000850:	2202      	movs	r2, #2
 8000852:	4911      	ldr	r1, [pc, #68]	; (8000898 <StartDefaultTask+0x88>)
 8000854:	4811      	ldr	r0, [pc, #68]	; (800089c <StartDefaultTask+0x8c>)
 8000856:	f003 fbe8 	bl	800402a <HAL_UART_Transmit>
		 break;
 800085a:	e018      	b.n	800088e <StartDefaultTask+0x7e>
		   Appli_state = APPLICATION_READY;
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <StartDefaultTask+0x84>)
 800085e:	2202      	movs	r2, #2
 8000860:	701a      	strb	r2, [r3, #0]
		   HAL_UART_Transmit(&huart1,"rd",2,100);
 8000862:	2364      	movs	r3, #100	; 0x64
 8000864:	2202      	movs	r2, #2
 8000866:	490e      	ldr	r1, [pc, #56]	; (80008a0 <StartDefaultTask+0x90>)
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <StartDefaultTask+0x8c>)
 800086a:	f003 fbde 	bl	800402a <HAL_UART_Transmit>
		   send_function();
 800086e:	f009 f9ad 	bl	8009bcc <send_function>
		 break;
 8000872:	e00c      	b.n	800088e <StartDefaultTask+0x7e>
		   Appli_state = APPLICATION_START;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <StartDefaultTask+0x84>)
 8000876:	2201      	movs	r2, #1
 8000878:	701a      	strb	r2, [r3, #0]
		   HAL_UART_Transmit(&huart1,"st",2,100);
 800087a:	2364      	movs	r3, #100	; 0x64
 800087c:	2202      	movs	r2, #2
 800087e:	4909      	ldr	r1, [pc, #36]	; (80008a4 <StartDefaultTask+0x94>)
 8000880:	4806      	ldr	r0, [pc, #24]	; (800089c <StartDefaultTask+0x8c>)
 8000882:	f003 fbd2 	bl	800402a <HAL_UART_Transmit>
		 break;
 8000886:	e002      	b.n	800088e <StartDefaultTask+0x7e>
		 }
	   }
 8000888:	bf00      	nop
 800088a:	e7c7      	b.n	800081c <StartDefaultTask+0xc>
		 break;
 800088c:	bf00      	nop
	  event = osMessageGet(AppliEventHandle, osWaitForever);
 800088e:	e7c5      	b.n	800081c <StartDefaultTask+0xc>
 8000890:	20000358 	.word	0x20000358
 8000894:	20002894 	.word	0x20002894
 8000898:	0800a500 	.word	0x0800a500
 800089c:	2000030c 	.word	0x2000030c
 80008a0:	0800a504 	.word	0x0800a504
 80008a4:	0800a508 	.word	0x0800a508

080008a8 <USB_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_USB_f */
void USB_f(void const * argument)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USB_f */
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f007 f810 	bl	80078d6 <osDelay>
 80008b6:	e7fb      	b.n	80008b0 <USB_f+0x8>

080008b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d101      	bne.n	80008ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ca:	f000 f99d 	bl	8000c08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40012c00 	.word	0x40012c00

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <HAL_MspInit+0x68>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	4a17      	ldr	r2, [pc, #92]	; (8000950 <HAL_MspInit+0x68>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6193      	str	r3, [r2, #24]
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <HAL_MspInit+0x68>)
 80008fc:	699b      	ldr	r3, [r3, #24]
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_MspInit+0x68>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	4a11      	ldr	r2, [pc, #68]	; (8000950 <HAL_MspInit+0x68>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	61d3      	str	r3, [r2, #28]
 8000912:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <HAL_MspInit+0x68>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	210f      	movs	r1, #15
 8000922:	f06f 0001 	mvn.w	r0, #1
 8000926:	f000 fa64 	bl	8000df2 <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <HAL_MspInit+0x6c>)
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <HAL_MspInit+0x6c>)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40021000 	.word	0x40021000
 8000954:	40010000 	.word	0x40010000

08000958 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a20      	ldr	r2, [pc, #128]	; (80009f4 <HAL_UART_MspInit+0x9c>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d139      	bne.n	80009ec <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <HAL_UART_MspInit+0xa0>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a1e      	ldr	r2, [pc, #120]	; (80009f8 <HAL_UART_MspInit+0xa0>)
 800097e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <HAL_UART_MspInit+0xa0>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <HAL_UART_MspInit+0xa0>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a18      	ldr	r2, [pc, #96]	; (80009f8 <HAL_UART_MspInit+0xa0>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <HAL_UART_MspInit+0xa0>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0304 	and.w	r3, r3, #4
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b2:	2303      	movs	r3, #3
 80009b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	4619      	mov	r1, r3
 80009bc:	480f      	ldr	r0, [pc, #60]	; (80009fc <HAL_UART_MspInit+0xa4>)
 80009be:	f000 fb85 	bl	80010cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 0310 	add.w	r3, r7, #16
 80009d4:	4619      	mov	r1, r3
 80009d6:	4809      	ldr	r0, [pc, #36]	; (80009fc <HAL_UART_MspInit+0xa4>)
 80009d8:	f000 fb78 	bl	80010cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80009dc:	2200      	movs	r2, #0
 80009de:	2105      	movs	r1, #5
 80009e0:	2025      	movs	r0, #37	; 0x25
 80009e2:	f000 fa06 	bl	8000df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009e6:	2025      	movs	r0, #37	; 0x25
 80009e8:	f000 fa1f 	bl	8000e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009ec:	bf00      	nop
 80009ee:	3720      	adds	r7, #32
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40013800 	.word	0x40013800
 80009f8:	40021000 	.word	0x40021000
 80009fc:	40010800 	.word	0x40010800

08000a00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08c      	sub	sp, #48	; 0x30
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000a10:	2200      	movs	r2, #0
 8000a12:	6879      	ldr	r1, [r7, #4]
 8000a14:	2019      	movs	r0, #25
 8000a16:	f000 f9ec 	bl	8000df2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a1a:	2019      	movs	r0, #25
 8000a1c:	f000 fa05 	bl	8000e2a <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a20:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <HAL_InitTick+0x9c>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a1d      	ldr	r2, [pc, #116]	; (8000a9c <HAL_InitTick+0x9c>)
 8000a26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <HAL_InitTick+0x9c>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a38:	f107 0210 	add.w	r2, r7, #16
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4611      	mov	r1, r2
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 fec8 	bl	80037d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a48:	f002 feb2 	bl	80037b0 <HAL_RCC_GetPCLK2Freq>
 8000a4c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a50:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <HAL_InitTick+0xa0>)
 8000a52:	fba2 2303 	umull	r2, r3, r2, r3
 8000a56:	0c9b      	lsrs	r3, r3, #18
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_InitTick+0xa4>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <HAL_InitTick+0xa8>)
 8000a60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_InitTick+0xa4>)
 8000a64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a68:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <HAL_InitTick+0xa4>)
 8000a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_InitTick+0xa4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <HAL_InitTick+0xa4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000a7c:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <HAL_InitTick+0xa4>)
 8000a7e:	f003 f82b 	bl	8003ad8 <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d104      	bne.n	8000a92 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000a88:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <HAL_InitTick+0xa4>)
 8000a8a:	f003 f87d 	bl	8003b88 <HAL_TIM_Base_Start_IT>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	e000      	b.n	8000a94 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3730      	adds	r7, #48	; 0x30
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	431bde83 	.word	0x431bde83
 8000aa4:	2000035c 	.word	0x2000035c
 8000aa8:	40012c00 	.word	0x40012c00

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <HardFault_Handler+0x4>

08000abe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <MemManage_Handler+0x4>

08000ac4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <BusFault_Handler+0x4>

08000aca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <UsageFault_Handler+0x4>

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bc80      	pop	{r7}
 8000ada:	4770      	bx	lr

08000adc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <TIM1_UP_IRQHandler+0x10>)
 8000ae2:	f003 f8ab 	bl	8003c3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000035c 	.word	0x2000035c

08000af0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <USART1_IRQHandler+0x10>)
 8000af6:	f003 fb5b 	bl	80041b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	2000030c 	.word	0x2000030c

08000b04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <OTG_FS_IRQHandler+0x10>)
 8000b0a:	f000 fee1 	bl	80018d0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20002898 	.word	0x20002898

08000b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b20:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <_sbrk+0x5c>)
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <_sbrk+0x60>)
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <_sbrk+0x64>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <_sbrk+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d207      	bcs.n	8000b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b48:	f009 fb52 	bl	800a1f0 <__errno>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	220c      	movs	r2, #12
 8000b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	e009      	b.n	8000b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <_sbrk+0x64>)
 8000b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20010000 	.word	0x20010000
 8000b78:	00000400 	.word	0x00000400
 8000b7c:	200003a4 	.word	0x200003a4
 8000b80:	20002bb0 	.word	0x20002bb0

08000b84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b90:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b92:	e003      	b.n	8000b9c <LoopCopyDataInit>

08000b94 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b96:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b98:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b9a:	3104      	adds	r1, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b9c:	480a      	ldr	r0, [pc, #40]	; (8000bc8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b9e:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ba0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ba2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ba4:	d3f6      	bcc.n	8000b94 <CopyDataInit>
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ba8:	e002      	b.n	8000bb0 <LoopFillZerobss>

08000baa <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bac:	f842 3b04 	str.w	r3, [r2], #4

08000bb0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bb2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bb4:	d3f9      	bcc.n	8000baa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bb6:	f7ff ffe5 	bl	8000b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bba:	f009 fb1f 	bl	800a1fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bbe:	f7ff fcd3 	bl	8000568 <main>
  bx lr
 8000bc2:	4770      	bx	lr
  ldr r3, =_sidata
 8000bc4:	0800a598 	.word	0x0800a598
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bcc:	2000009c 	.word	0x2000009c
  ldr r2, =_sbss
 8000bd0:	2000009c 	.word	0x2000009c
  ldr r3, = _ebss
 8000bd4:	20002bac 	.word	0x20002bac

08000bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_2_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_Init+0x28>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_Init+0x28>)
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f8f5 	bl	8000ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf2:	200f      	movs	r0, #15
 8000bf4:	f7ff ff04 	bl	8000a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fe76 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40022000 	.word	0x40022000

08000c08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_IncTick+0x1c>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	461a      	mov	r2, r3
 8000c12:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_IncTick+0x20>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4413      	add	r3, r2
 8000c18:	4a03      	ldr	r2, [pc, #12]	; (8000c28 <HAL_IncTick+0x20>)
 8000c1a:	6013      	str	r3, [r2, #0]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	20000008 	.word	0x20000008
 8000c28:	200003a8 	.word	0x200003a8

08000c2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c30:	4b02      	ldr	r3, [pc, #8]	; (8000c3c <HAL_GetTick+0x10>)
 8000c32:	681b      	ldr	r3, [r3, #0]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bc80      	pop	{r7}
 8000c3a:	4770      	bx	lr
 8000c3c:	200003a8 	.word	0x200003a8

08000c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c48:	f7ff fff0 	bl	8000c2c <HAL_GetTick>
 8000c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c58:	d005      	beq.n	8000c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_Delay+0x44>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4413      	add	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c66:	bf00      	nop
 8000c68:	f7ff ffe0 	bl	8000c2c <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d8f7      	bhi.n	8000c68 <HAL_Delay+0x28>
  {
  }
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008

08000c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	db0b      	blt.n	8000d16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 021f 	and.w	r2, r3, #31
 8000d04:	4906      	ldr	r1, [pc, #24]	; (8000d20 <__NVIC_EnableIRQ+0x34>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	095b      	lsrs	r3, r3, #5
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100

08000d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	6039      	str	r1, [r7, #0]
 8000d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db0a      	blt.n	8000d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	490c      	ldr	r1, [pc, #48]	; (8000d70 <__NVIC_SetPriority+0x4c>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	0112      	lsls	r2, r2, #4
 8000d44:	b2d2      	uxtb	r2, r2
 8000d46:	440b      	add	r3, r1
 8000d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d4c:	e00a      	b.n	8000d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	4908      	ldr	r1, [pc, #32]	; (8000d74 <__NVIC_SetPriority+0x50>)
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	f003 030f 	and.w	r3, r3, #15
 8000d5a:	3b04      	subs	r3, #4
 8000d5c:	0112      	lsls	r2, r2, #4
 8000d5e:	b2d2      	uxtb	r2, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	761a      	strb	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b089      	sub	sp, #36	; 0x24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	f1c3 0307 	rsb	r3, r3, #7
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	bf28      	it	cs
 8000d96:	2304      	movcs	r3, #4
 8000d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	2b06      	cmp	r3, #6
 8000da0:	d902      	bls.n	8000da8 <NVIC_EncodePriority+0x30>
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3b03      	subs	r3, #3
 8000da6:	e000      	b.n	8000daa <NVIC_EncodePriority+0x32>
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dac:	f04f 32ff 	mov.w	r2, #4294967295
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	401a      	ands	r2, r3
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dca:	43d9      	mvns	r1, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd0:	4313      	orrs	r3, r2
         );
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3724      	adds	r7, #36	; 0x24
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ff4f 	bl	8000c88 <__NVIC_SetPriorityGrouping>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e04:	f7ff ff64 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8000e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	6978      	ldr	r0, [r7, #20]
 8000e10:	f7ff ffb2 	bl	8000d78 <NVIC_EncodePriority>
 8000e14:	4602      	mov	r2, r0
 8000e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff81 	bl	8000d24 <__NVIC_SetPriority>
}
 8000e22:	bf00      	nop
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	4603      	mov	r3, r0
 8000e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff57 	bl	8000cec <__NVIC_EnableIRQ>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b085      	sub	sp, #20
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d008      	beq.n	8000e6e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2204      	movs	r2, #4
 8000e60:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e020      	b.n	8000eb0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 020e 	bic.w	r2, r2, #14
 8000e7c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f022 0201 	bic.w	r2, r2, #1
 8000e8c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e96:	2101      	movs	r1, #1
 8000e98:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
	...

08000ebc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d005      	beq.n	8000ede <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e0d6      	b.n	800108c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f022 020e 	bic.w	r2, r2, #14
 8000eec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0201 	bic.w	r2, r2, #1
 8000efc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	4b64      	ldr	r3, [pc, #400]	; (8001098 <HAL_DMA_Abort_IT+0x1dc>)
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d958      	bls.n	8000fbc <HAL_DMA_Abort_IT+0x100>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a63      	ldr	r2, [pc, #396]	; (800109c <HAL_DMA_Abort_IT+0x1e0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d04f      	beq.n	8000fb4 <HAL_DMA_Abort_IT+0xf8>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a61      	ldr	r2, [pc, #388]	; (80010a0 <HAL_DMA_Abort_IT+0x1e4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d048      	beq.n	8000fb0 <HAL_DMA_Abort_IT+0xf4>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a60      	ldr	r2, [pc, #384]	; (80010a4 <HAL_DMA_Abort_IT+0x1e8>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d040      	beq.n	8000faa <HAL_DMA_Abort_IT+0xee>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a5e      	ldr	r2, [pc, #376]	; (80010a8 <HAL_DMA_Abort_IT+0x1ec>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d038      	beq.n	8000fa4 <HAL_DMA_Abort_IT+0xe8>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a5d      	ldr	r2, [pc, #372]	; (80010ac <HAL_DMA_Abort_IT+0x1f0>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d030      	beq.n	8000f9e <HAL_DMA_Abort_IT+0xe2>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a5b      	ldr	r2, [pc, #364]	; (80010b0 <HAL_DMA_Abort_IT+0x1f4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d028      	beq.n	8000f98 <HAL_DMA_Abort_IT+0xdc>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a53      	ldr	r2, [pc, #332]	; (8001098 <HAL_DMA_Abort_IT+0x1dc>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d020      	beq.n	8000f92 <HAL_DMA_Abort_IT+0xd6>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a57      	ldr	r2, [pc, #348]	; (80010b4 <HAL_DMA_Abort_IT+0x1f8>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d019      	beq.n	8000f8e <HAL_DMA_Abort_IT+0xd2>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <HAL_DMA_Abort_IT+0x1fc>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d012      	beq.n	8000f8a <HAL_DMA_Abort_IT+0xce>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a54      	ldr	r2, [pc, #336]	; (80010bc <HAL_DMA_Abort_IT+0x200>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d00a      	beq.n	8000f84 <HAL_DMA_Abort_IT+0xc8>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a53      	ldr	r2, [pc, #332]	; (80010c0 <HAL_DMA_Abort_IT+0x204>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d102      	bne.n	8000f7e <HAL_DMA_Abort_IT+0xc2>
 8000f78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7c:	e01b      	b.n	8000fb6 <HAL_DMA_Abort_IT+0xfa>
 8000f7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f82:	e018      	b.n	8000fb6 <HAL_DMA_Abort_IT+0xfa>
 8000f84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f88:	e015      	b.n	8000fb6 <HAL_DMA_Abort_IT+0xfa>
 8000f8a:	2310      	movs	r3, #16
 8000f8c:	e013      	b.n	8000fb6 <HAL_DMA_Abort_IT+0xfa>
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e011      	b.n	8000fb6 <HAL_DMA_Abort_IT+0xfa>
 8000f92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f96:	e00e      	b.n	8000fb6 <HAL_DMA_Abort_IT+0xfa>
 8000f98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f9c:	e00b      	b.n	8000fb6 <HAL_DMA_Abort_IT+0xfa>
 8000f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa2:	e008      	b.n	8000fb6 <HAL_DMA_Abort_IT+0xfa>
 8000fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa8:	e005      	b.n	8000fb6 <HAL_DMA_Abort_IT+0xfa>
 8000faa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fae:	e002      	b.n	8000fb6 <HAL_DMA_Abort_IT+0xfa>
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	e000      	b.n	8000fb6 <HAL_DMA_Abort_IT+0xfa>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	4a43      	ldr	r2, [pc, #268]	; (80010c4 <HAL_DMA_Abort_IT+0x208>)
 8000fb8:	6053      	str	r3, [r2, #4]
 8000fba:	e057      	b.n	800106c <HAL_DMA_Abort_IT+0x1b0>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a36      	ldr	r2, [pc, #216]	; (800109c <HAL_DMA_Abort_IT+0x1e0>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d04f      	beq.n	8001066 <HAL_DMA_Abort_IT+0x1aa>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a35      	ldr	r2, [pc, #212]	; (80010a0 <HAL_DMA_Abort_IT+0x1e4>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d048      	beq.n	8001062 <HAL_DMA_Abort_IT+0x1a6>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a33      	ldr	r2, [pc, #204]	; (80010a4 <HAL_DMA_Abort_IT+0x1e8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d040      	beq.n	800105c <HAL_DMA_Abort_IT+0x1a0>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a32      	ldr	r2, [pc, #200]	; (80010a8 <HAL_DMA_Abort_IT+0x1ec>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d038      	beq.n	8001056 <HAL_DMA_Abort_IT+0x19a>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a30      	ldr	r2, [pc, #192]	; (80010ac <HAL_DMA_Abort_IT+0x1f0>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d030      	beq.n	8001050 <HAL_DMA_Abort_IT+0x194>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a2f      	ldr	r2, [pc, #188]	; (80010b0 <HAL_DMA_Abort_IT+0x1f4>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d028      	beq.n	800104a <HAL_DMA_Abort_IT+0x18e>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a26      	ldr	r2, [pc, #152]	; (8001098 <HAL_DMA_Abort_IT+0x1dc>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d020      	beq.n	8001044 <HAL_DMA_Abort_IT+0x188>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a2b      	ldr	r2, [pc, #172]	; (80010b4 <HAL_DMA_Abort_IT+0x1f8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d019      	beq.n	8001040 <HAL_DMA_Abort_IT+0x184>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <HAL_DMA_Abort_IT+0x1fc>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d012      	beq.n	800103c <HAL_DMA_Abort_IT+0x180>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a28      	ldr	r2, [pc, #160]	; (80010bc <HAL_DMA_Abort_IT+0x200>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d00a      	beq.n	8001036 <HAL_DMA_Abort_IT+0x17a>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a26      	ldr	r2, [pc, #152]	; (80010c0 <HAL_DMA_Abort_IT+0x204>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d102      	bne.n	8001030 <HAL_DMA_Abort_IT+0x174>
 800102a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102e:	e01b      	b.n	8001068 <HAL_DMA_Abort_IT+0x1ac>
 8001030:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001034:	e018      	b.n	8001068 <HAL_DMA_Abort_IT+0x1ac>
 8001036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800103a:	e015      	b.n	8001068 <HAL_DMA_Abort_IT+0x1ac>
 800103c:	2310      	movs	r3, #16
 800103e:	e013      	b.n	8001068 <HAL_DMA_Abort_IT+0x1ac>
 8001040:	2301      	movs	r3, #1
 8001042:	e011      	b.n	8001068 <HAL_DMA_Abort_IT+0x1ac>
 8001044:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001048:	e00e      	b.n	8001068 <HAL_DMA_Abort_IT+0x1ac>
 800104a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800104e:	e00b      	b.n	8001068 <HAL_DMA_Abort_IT+0x1ac>
 8001050:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001054:	e008      	b.n	8001068 <HAL_DMA_Abort_IT+0x1ac>
 8001056:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800105a:	e005      	b.n	8001068 <HAL_DMA_Abort_IT+0x1ac>
 800105c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001060:	e002      	b.n	8001068 <HAL_DMA_Abort_IT+0x1ac>
 8001062:	2310      	movs	r3, #16
 8001064:	e000      	b.n	8001068 <HAL_DMA_Abort_IT+0x1ac>
 8001066:	2301      	movs	r3, #1
 8001068:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <HAL_DMA_Abort_IT+0x20c>)
 800106a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	4798      	blx	r3
    } 
  }
  return status;
 800108c:	7bfb      	ldrb	r3, [r7, #15]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40020080 	.word	0x40020080
 800109c:	40020008 	.word	0x40020008
 80010a0:	4002001c 	.word	0x4002001c
 80010a4:	40020030 	.word	0x40020030
 80010a8:	40020044 	.word	0x40020044
 80010ac:	40020058 	.word	0x40020058
 80010b0:	4002006c 	.word	0x4002006c
 80010b4:	40020408 	.word	0x40020408
 80010b8:	4002041c 	.word	0x4002041c
 80010bc:	40020430 	.word	0x40020430
 80010c0:	40020444 	.word	0x40020444
 80010c4:	40020400 	.word	0x40020400
 80010c8:	40020000 	.word	0x40020000

080010cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b08b      	sub	sp, #44	; 0x2c
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010de:	e169      	b.n	80013b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010e0:	2201      	movs	r2, #1
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	69fa      	ldr	r2, [r7, #28]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	f040 8158 	bne.w	80013ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	4a9a      	ldr	r2, [pc, #616]	; (800136c <HAL_GPIO_Init+0x2a0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d05e      	beq.n	80011c6 <HAL_GPIO_Init+0xfa>
 8001108:	4a98      	ldr	r2, [pc, #608]	; (800136c <HAL_GPIO_Init+0x2a0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d875      	bhi.n	80011fa <HAL_GPIO_Init+0x12e>
 800110e:	4a98      	ldr	r2, [pc, #608]	; (8001370 <HAL_GPIO_Init+0x2a4>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d058      	beq.n	80011c6 <HAL_GPIO_Init+0xfa>
 8001114:	4a96      	ldr	r2, [pc, #600]	; (8001370 <HAL_GPIO_Init+0x2a4>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d86f      	bhi.n	80011fa <HAL_GPIO_Init+0x12e>
 800111a:	4a96      	ldr	r2, [pc, #600]	; (8001374 <HAL_GPIO_Init+0x2a8>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d052      	beq.n	80011c6 <HAL_GPIO_Init+0xfa>
 8001120:	4a94      	ldr	r2, [pc, #592]	; (8001374 <HAL_GPIO_Init+0x2a8>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d869      	bhi.n	80011fa <HAL_GPIO_Init+0x12e>
 8001126:	4a94      	ldr	r2, [pc, #592]	; (8001378 <HAL_GPIO_Init+0x2ac>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d04c      	beq.n	80011c6 <HAL_GPIO_Init+0xfa>
 800112c:	4a92      	ldr	r2, [pc, #584]	; (8001378 <HAL_GPIO_Init+0x2ac>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d863      	bhi.n	80011fa <HAL_GPIO_Init+0x12e>
 8001132:	4a92      	ldr	r2, [pc, #584]	; (800137c <HAL_GPIO_Init+0x2b0>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d046      	beq.n	80011c6 <HAL_GPIO_Init+0xfa>
 8001138:	4a90      	ldr	r2, [pc, #576]	; (800137c <HAL_GPIO_Init+0x2b0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d85d      	bhi.n	80011fa <HAL_GPIO_Init+0x12e>
 800113e:	2b12      	cmp	r3, #18
 8001140:	d82a      	bhi.n	8001198 <HAL_GPIO_Init+0xcc>
 8001142:	2b12      	cmp	r3, #18
 8001144:	d859      	bhi.n	80011fa <HAL_GPIO_Init+0x12e>
 8001146:	a201      	add	r2, pc, #4	; (adr r2, 800114c <HAL_GPIO_Init+0x80>)
 8001148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114c:	080011c7 	.word	0x080011c7
 8001150:	080011a1 	.word	0x080011a1
 8001154:	080011b3 	.word	0x080011b3
 8001158:	080011f5 	.word	0x080011f5
 800115c:	080011fb 	.word	0x080011fb
 8001160:	080011fb 	.word	0x080011fb
 8001164:	080011fb 	.word	0x080011fb
 8001168:	080011fb 	.word	0x080011fb
 800116c:	080011fb 	.word	0x080011fb
 8001170:	080011fb 	.word	0x080011fb
 8001174:	080011fb 	.word	0x080011fb
 8001178:	080011fb 	.word	0x080011fb
 800117c:	080011fb 	.word	0x080011fb
 8001180:	080011fb 	.word	0x080011fb
 8001184:	080011fb 	.word	0x080011fb
 8001188:	080011fb 	.word	0x080011fb
 800118c:	080011fb 	.word	0x080011fb
 8001190:	080011a9 	.word	0x080011a9
 8001194:	080011bd 	.word	0x080011bd
 8001198:	4a79      	ldr	r2, [pc, #484]	; (8001380 <HAL_GPIO_Init+0x2b4>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800119e:	e02c      	b.n	80011fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	623b      	str	r3, [r7, #32]
          break;
 80011a6:	e029      	b.n	80011fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	3304      	adds	r3, #4
 80011ae:	623b      	str	r3, [r7, #32]
          break;
 80011b0:	e024      	b.n	80011fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	3308      	adds	r3, #8
 80011b8:	623b      	str	r3, [r7, #32]
          break;
 80011ba:	e01f      	b.n	80011fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	330c      	adds	r3, #12
 80011c2:	623b      	str	r3, [r7, #32]
          break;
 80011c4:	e01a      	b.n	80011fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d102      	bne.n	80011d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011ce:	2304      	movs	r3, #4
 80011d0:	623b      	str	r3, [r7, #32]
          break;
 80011d2:	e013      	b.n	80011fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d105      	bne.n	80011e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011dc:	2308      	movs	r3, #8
 80011de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69fa      	ldr	r2, [r7, #28]
 80011e4:	611a      	str	r2, [r3, #16]
          break;
 80011e6:	e009      	b.n	80011fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e8:	2308      	movs	r3, #8
 80011ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	615a      	str	r2, [r3, #20]
          break;
 80011f2:	e003      	b.n	80011fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
          break;
 80011f8:	e000      	b.n	80011fc <HAL_GPIO_Init+0x130>
          break;
 80011fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	2bff      	cmp	r3, #255	; 0xff
 8001200:	d801      	bhi.n	8001206 <HAL_GPIO_Init+0x13a>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	e001      	b.n	800120a <HAL_GPIO_Init+0x13e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3304      	adds	r3, #4
 800120a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	2bff      	cmp	r3, #255	; 0xff
 8001210:	d802      	bhi.n	8001218 <HAL_GPIO_Init+0x14c>
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	e002      	b.n	800121e <HAL_GPIO_Init+0x152>
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	3b08      	subs	r3, #8
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	210f      	movs	r1, #15
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	fa01 f303 	lsl.w	r3, r1, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	401a      	ands	r2, r3
 8001230:	6a39      	ldr	r1, [r7, #32]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	431a      	orrs	r2, r3
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 80b1 	beq.w	80013ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800124c:	4b4d      	ldr	r3, [pc, #308]	; (8001384 <HAL_GPIO_Init+0x2b8>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a4c      	ldr	r2, [pc, #304]	; (8001384 <HAL_GPIO_Init+0x2b8>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b4a      	ldr	r3, [pc, #296]	; (8001384 <HAL_GPIO_Init+0x2b8>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001264:	4a48      	ldr	r2, [pc, #288]	; (8001388 <HAL_GPIO_Init+0x2bc>)
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	089b      	lsrs	r3, r3, #2
 800126a:	3302      	adds	r3, #2
 800126c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001270:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	220f      	movs	r2, #15
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	4013      	ands	r3, r2
 8001286:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a40      	ldr	r2, [pc, #256]	; (800138c <HAL_GPIO_Init+0x2c0>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d013      	beq.n	80012b8 <HAL_GPIO_Init+0x1ec>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a3f      	ldr	r2, [pc, #252]	; (8001390 <HAL_GPIO_Init+0x2c4>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d00d      	beq.n	80012b4 <HAL_GPIO_Init+0x1e8>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a3e      	ldr	r2, [pc, #248]	; (8001394 <HAL_GPIO_Init+0x2c8>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d007      	beq.n	80012b0 <HAL_GPIO_Init+0x1e4>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a3d      	ldr	r2, [pc, #244]	; (8001398 <HAL_GPIO_Init+0x2cc>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d101      	bne.n	80012ac <HAL_GPIO_Init+0x1e0>
 80012a8:	2303      	movs	r3, #3
 80012aa:	e006      	b.n	80012ba <HAL_GPIO_Init+0x1ee>
 80012ac:	2304      	movs	r3, #4
 80012ae:	e004      	b.n	80012ba <HAL_GPIO_Init+0x1ee>
 80012b0:	2302      	movs	r3, #2
 80012b2:	e002      	b.n	80012ba <HAL_GPIO_Init+0x1ee>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <HAL_GPIO_Init+0x1ee>
 80012b8:	2300      	movs	r3, #0
 80012ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012bc:	f002 0203 	and.w	r2, r2, #3
 80012c0:	0092      	lsls	r2, r2, #2
 80012c2:	4093      	lsls	r3, r2
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012ca:	492f      	ldr	r1, [pc, #188]	; (8001388 <HAL_GPIO_Init+0x2bc>)
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d006      	beq.n	80012f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012e4:	4b2d      	ldr	r3, [pc, #180]	; (800139c <HAL_GPIO_Init+0x2d0>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	492c      	ldr	r1, [pc, #176]	; (800139c <HAL_GPIO_Init+0x2d0>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	600b      	str	r3, [r1, #0]
 80012f0:	e006      	b.n	8001300 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012f2:	4b2a      	ldr	r3, [pc, #168]	; (800139c <HAL_GPIO_Init+0x2d0>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	4928      	ldr	r1, [pc, #160]	; (800139c <HAL_GPIO_Init+0x2d0>)
 80012fc:	4013      	ands	r3, r2
 80012fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d006      	beq.n	800131a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800130c:	4b23      	ldr	r3, [pc, #140]	; (800139c <HAL_GPIO_Init+0x2d0>)
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	4922      	ldr	r1, [pc, #136]	; (800139c <HAL_GPIO_Init+0x2d0>)
 8001312:	69bb      	ldr	r3, [r7, #24]
 8001314:	4313      	orrs	r3, r2
 8001316:	604b      	str	r3, [r1, #4]
 8001318:	e006      	b.n	8001328 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <HAL_GPIO_Init+0x2d0>)
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	43db      	mvns	r3, r3
 8001322:	491e      	ldr	r1, [pc, #120]	; (800139c <HAL_GPIO_Init+0x2d0>)
 8001324:	4013      	ands	r3, r2
 8001326:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d006      	beq.n	8001342 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <HAL_GPIO_Init+0x2d0>)
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	4918      	ldr	r1, [pc, #96]	; (800139c <HAL_GPIO_Init+0x2d0>)
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	608b      	str	r3, [r1, #8]
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <HAL_GPIO_Init+0x2d0>)
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	43db      	mvns	r3, r3
 800134a:	4914      	ldr	r1, [pc, #80]	; (800139c <HAL_GPIO_Init+0x2d0>)
 800134c:	4013      	ands	r3, r2
 800134e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d021      	beq.n	80013a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_GPIO_Init+0x2d0>)
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	490e      	ldr	r1, [pc, #56]	; (800139c <HAL_GPIO_Init+0x2d0>)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	60cb      	str	r3, [r1, #12]
 8001368:	e021      	b.n	80013ae <HAL_GPIO_Init+0x2e2>
 800136a:	bf00      	nop
 800136c:	10320000 	.word	0x10320000
 8001370:	10310000 	.word	0x10310000
 8001374:	10220000 	.word	0x10220000
 8001378:	10210000 	.word	0x10210000
 800137c:	10120000 	.word	0x10120000
 8001380:	10110000 	.word	0x10110000
 8001384:	40021000 	.word	0x40021000
 8001388:	40010000 	.word	0x40010000
 800138c:	40010800 	.word	0x40010800
 8001390:	40010c00 	.word	0x40010c00
 8001394:	40011000 	.word	0x40011000
 8001398:	40011400 	.word	0x40011400
 800139c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_GPIO_Init+0x304>)
 80013a2:	68da      	ldr	r2, [r3, #12]
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	4909      	ldr	r1, [pc, #36]	; (80013d0 <HAL_GPIO_Init+0x304>)
 80013aa:	4013      	ands	r3, r2
 80013ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	3301      	adds	r3, #1
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	fa22 f303 	lsr.w	r3, r2, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f47f ae8e 	bne.w	80010e0 <HAL_GPIO_Init+0x14>
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	372c      	adds	r7, #44	; 0x2c
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	40010400 	.word	0x40010400

080013d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	807b      	strh	r3, [r7, #2]
 80013e0:	4613      	mov	r3, r2
 80013e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013e4:	787b      	ldrb	r3, [r7, #1]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ea:	887a      	ldrh	r2, [r7, #2]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013f0:	e003      	b.n	80013fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013f2:	887b      	ldrh	r3, [r7, #2]
 80013f4:	041a      	lsls	r2, r3, #16
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	611a      	str	r2, [r3, #16]
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001406:	b08f      	sub	sp, #60	; 0x3c
 8001408:	af0a      	add	r7, sp, #40	; 0x28
 800140a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e054      	b.n	80014c0 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	d106      	bne.n	8001436 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f008 fc73 	bl	8009d1c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2203      	movs	r2, #3
 800143a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f003 fb05 	bl	8004a64 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	687e      	ldr	r6, [r7, #4]
 8001462:	466d      	mov	r5, sp
 8001464:	f106 0410 	add.w	r4, r6, #16
 8001468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800146e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001470:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001474:	e885 0003 	stmia.w	r5, {r0, r1}
 8001478:	1d33      	adds	r3, r6, #4
 800147a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800147c:	6838      	ldr	r0, [r7, #0]
 800147e:	f003 fabf 	bl	8004a00 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2101      	movs	r1, #1
 8001488:	4618      	mov	r0, r3
 800148a:	f003 fafb 	bl	8004a84 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	687e      	ldr	r6, [r7, #4]
 8001496:	466d      	mov	r5, sp
 8001498:	f106 0410 	add.w	r4, r6, #16
 800149c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800149e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80014a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80014ac:	1d33      	adds	r3, r6, #4
 80014ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014b0:	6838      	ldr	r0, [r7, #0]
 80014b2:	f003 fc59 	bl	8004d68 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80014be:	2300      	movs	r3, #0
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014c8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af04      	add	r7, sp, #16
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	4608      	mov	r0, r1
 80014d2:	4611      	mov	r1, r2
 80014d4:	461a      	mov	r2, r3
 80014d6:	4603      	mov	r3, r0
 80014d8:	70fb      	strb	r3, [r7, #3]
 80014da:	460b      	mov	r3, r1
 80014dc:	70bb      	strb	r3, [r7, #2]
 80014de:	4613      	mov	r3, r2
 80014e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <HAL_HCD_HC_Init+0x28>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e076      	b.n	80015de <HAL_HCD_HC_Init+0x116>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	212c      	movs	r1, #44	; 0x2c
 80014fe:	fb01 f303 	mul.w	r3, r1, r3
 8001502:	4413      	add	r3, r2
 8001504:	333d      	adds	r3, #61	; 0x3d
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800150a:	78fb      	ldrb	r3, [r7, #3]
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	212c      	movs	r1, #44	; 0x2c
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	4413      	add	r3, r2
 8001516:	3338      	adds	r3, #56	; 0x38
 8001518:	787a      	ldrb	r2, [r7, #1]
 800151a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800151c:	78fb      	ldrb	r3, [r7, #3]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	212c      	movs	r1, #44	; 0x2c
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	4413      	add	r3, r2
 8001528:	3340      	adds	r3, #64	; 0x40
 800152a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800152c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	212c      	movs	r1, #44	; 0x2c
 8001534:	fb01 f303 	mul.w	r3, r1, r3
 8001538:	4413      	add	r3, r2
 800153a:	3339      	adds	r3, #57	; 0x39
 800153c:	78fa      	ldrb	r2, [r7, #3]
 800153e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	212c      	movs	r1, #44	; 0x2c
 8001546:	fb01 f303 	mul.w	r3, r1, r3
 800154a:	4413      	add	r3, r2
 800154c:	333f      	adds	r3, #63	; 0x3f
 800154e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001552:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	78ba      	ldrb	r2, [r7, #2]
 8001558:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800155c:	b2d0      	uxtb	r0, r2
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	212c      	movs	r1, #44	; 0x2c
 8001562:	fb01 f303 	mul.w	r3, r1, r3
 8001566:	4413      	add	r3, r2
 8001568:	333a      	adds	r3, #58	; 0x3a
 800156a:	4602      	mov	r2, r0
 800156c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800156e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001572:	2b00      	cmp	r3, #0
 8001574:	da09      	bge.n	800158a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001576:	78fb      	ldrb	r3, [r7, #3]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	212c      	movs	r1, #44	; 0x2c
 800157c:	fb01 f303 	mul.w	r3, r1, r3
 8001580:	4413      	add	r3, r2
 8001582:	333b      	adds	r3, #59	; 0x3b
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
 8001588:	e008      	b.n	800159c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800158a:	78fb      	ldrb	r3, [r7, #3]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	212c      	movs	r1, #44	; 0x2c
 8001590:	fb01 f303 	mul.w	r3, r1, r3
 8001594:	4413      	add	r3, r2
 8001596:	333b      	adds	r3, #59	; 0x3b
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800159c:	78fb      	ldrb	r3, [r7, #3]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	212c      	movs	r1, #44	; 0x2c
 80015a2:	fb01 f303 	mul.w	r3, r1, r3
 80015a6:	4413      	add	r3, r2
 80015a8:	333c      	adds	r3, #60	; 0x3c
 80015aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015ae:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	787c      	ldrb	r4, [r7, #1]
 80015b6:	78ba      	ldrb	r2, [r7, #2]
 80015b8:	78f9      	ldrb	r1, [r7, #3]
 80015ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80015bc:	9302      	str	r3, [sp, #8]
 80015be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	4623      	mov	r3, r4
 80015cc:	f003 fd04 	bl	8004fd8 <USB_HC_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd90      	pop	{r4, r7, pc}

080015e6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b084      	sub	sp, #16
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	460b      	mov	r3, r1
 80015f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <HAL_HCD_HC_Halt+0x1e>
 8001600:	2302      	movs	r3, #2
 8001602:	e00f      	b.n	8001624 <HAL_HCD_HC_Halt+0x3e>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	78fa      	ldrb	r2, [r7, #3]
 8001612:	4611      	mov	r1, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f003 fedf 	bl	80053d8 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001622:	7bfb      	ldrb	r3, [r7, #15]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	4608      	mov	r0, r1
 8001636:	4611      	mov	r1, r2
 8001638:	461a      	mov	r2, r3
 800163a:	4603      	mov	r3, r0
 800163c:	70fb      	strb	r3, [r7, #3]
 800163e:	460b      	mov	r3, r1
 8001640:	70bb      	strb	r3, [r7, #2]
 8001642:	4613      	mov	r3, r2
 8001644:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	212c      	movs	r1, #44	; 0x2c
 800164c:	fb01 f303 	mul.w	r3, r1, r3
 8001650:	4413      	add	r3, r2
 8001652:	333b      	adds	r3, #59	; 0x3b
 8001654:	78ba      	ldrb	r2, [r7, #2]
 8001656:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001658:	78fb      	ldrb	r3, [r7, #3]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	212c      	movs	r1, #44	; 0x2c
 800165e:	fb01 f303 	mul.w	r3, r1, r3
 8001662:	4413      	add	r3, r2
 8001664:	333f      	adds	r3, #63	; 0x3f
 8001666:	787a      	ldrb	r2, [r7, #1]
 8001668:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800166a:	7c3b      	ldrb	r3, [r7, #16]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d112      	bne.n	8001696 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001670:	78fb      	ldrb	r3, [r7, #3]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	212c      	movs	r1, #44	; 0x2c
 8001676:	fb01 f303 	mul.w	r3, r1, r3
 800167a:	4413      	add	r3, r2
 800167c:	3342      	adds	r3, #66	; 0x42
 800167e:	2203      	movs	r2, #3
 8001680:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001682:	78fb      	ldrb	r3, [r7, #3]
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	212c      	movs	r1, #44	; 0x2c
 8001688:	fb01 f303 	mul.w	r3, r1, r3
 800168c:	4413      	add	r3, r2
 800168e:	333d      	adds	r3, #61	; 0x3d
 8001690:	7f3a      	ldrb	r2, [r7, #28]
 8001692:	701a      	strb	r2, [r3, #0]
 8001694:	e008      	b.n	80016a8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001696:	78fb      	ldrb	r3, [r7, #3]
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	212c      	movs	r1, #44	; 0x2c
 800169c:	fb01 f303 	mul.w	r3, r1, r3
 80016a0:	4413      	add	r3, r2
 80016a2:	3342      	adds	r3, #66	; 0x42
 80016a4:	2202      	movs	r2, #2
 80016a6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80016a8:	787b      	ldrb	r3, [r7, #1]
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	f200 80c6 	bhi.w	800183c <HAL_HCD_HC_SubmitRequest+0x210>
 80016b0:	a201      	add	r2, pc, #4	; (adr r2, 80016b8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80016b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b6:	bf00      	nop
 80016b8:	080016c9 	.word	0x080016c9
 80016bc:	08001829 	.word	0x08001829
 80016c0:	0800172d 	.word	0x0800172d
 80016c4:	080017ab 	.word	0x080017ab
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80016c8:	7c3b      	ldrb	r3, [r7, #16]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	f040 80b8 	bne.w	8001840 <HAL_HCD_HC_SubmitRequest+0x214>
 80016d0:	78bb      	ldrb	r3, [r7, #2]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 80b4 	bne.w	8001840 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80016d8:	8b3b      	ldrh	r3, [r7, #24]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d108      	bne.n	80016f0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80016de:	78fb      	ldrb	r3, [r7, #3]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	212c      	movs	r1, #44	; 0x2c
 80016e4:	fb01 f303 	mul.w	r3, r1, r3
 80016e8:	4413      	add	r3, r2
 80016ea:	3355      	adds	r3, #85	; 0x55
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	212c      	movs	r1, #44	; 0x2c
 80016f6:	fb01 f303 	mul.w	r3, r1, r3
 80016fa:	4413      	add	r3, r2
 80016fc:	3355      	adds	r3, #85	; 0x55
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d109      	bne.n	8001718 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	212c      	movs	r1, #44	; 0x2c
 800170a:	fb01 f303 	mul.w	r3, r1, r3
 800170e:	4413      	add	r3, r2
 8001710:	3342      	adds	r3, #66	; 0x42
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001716:	e093      	b.n	8001840 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001718:	78fb      	ldrb	r3, [r7, #3]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	212c      	movs	r1, #44	; 0x2c
 800171e:	fb01 f303 	mul.w	r3, r1, r3
 8001722:	4413      	add	r3, r2
 8001724:	3342      	adds	r3, #66	; 0x42
 8001726:	2202      	movs	r2, #2
 8001728:	701a      	strb	r2, [r3, #0]
      break;
 800172a:	e089      	b.n	8001840 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800172c:	78bb      	ldrb	r3, [r7, #2]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d11d      	bne.n	800176e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	212c      	movs	r1, #44	; 0x2c
 8001738:	fb01 f303 	mul.w	r3, r1, r3
 800173c:	4413      	add	r3, r2
 800173e:	3355      	adds	r3, #85	; 0x55
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d109      	bne.n	800175a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	212c      	movs	r1, #44	; 0x2c
 800174c:	fb01 f303 	mul.w	r3, r1, r3
 8001750:	4413      	add	r3, r2
 8001752:	3342      	adds	r3, #66	; 0x42
 8001754:	2200      	movs	r2, #0
 8001756:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001758:	e073      	b.n	8001842 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	212c      	movs	r1, #44	; 0x2c
 8001760:	fb01 f303 	mul.w	r3, r1, r3
 8001764:	4413      	add	r3, r2
 8001766:	3342      	adds	r3, #66	; 0x42
 8001768:	2202      	movs	r2, #2
 800176a:	701a      	strb	r2, [r3, #0]
      break;
 800176c:	e069      	b.n	8001842 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	212c      	movs	r1, #44	; 0x2c
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	4413      	add	r3, r2
 800177a:	3354      	adds	r3, #84	; 0x54
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	212c      	movs	r1, #44	; 0x2c
 8001788:	fb01 f303 	mul.w	r3, r1, r3
 800178c:	4413      	add	r3, r2
 800178e:	3342      	adds	r3, #66	; 0x42
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
      break;
 8001794:	e055      	b.n	8001842 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	212c      	movs	r1, #44	; 0x2c
 800179c:	fb01 f303 	mul.w	r3, r1, r3
 80017a0:	4413      	add	r3, r2
 80017a2:	3342      	adds	r3, #66	; 0x42
 80017a4:	2202      	movs	r2, #2
 80017a6:	701a      	strb	r2, [r3, #0]
      break;
 80017a8:	e04b      	b.n	8001842 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80017aa:	78bb      	ldrb	r3, [r7, #2]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d11d      	bne.n	80017ec <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017b0:	78fb      	ldrb	r3, [r7, #3]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	212c      	movs	r1, #44	; 0x2c
 80017b6:	fb01 f303 	mul.w	r3, r1, r3
 80017ba:	4413      	add	r3, r2
 80017bc:	3355      	adds	r3, #85	; 0x55
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d109      	bne.n	80017d8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	212c      	movs	r1, #44	; 0x2c
 80017ca:	fb01 f303 	mul.w	r3, r1, r3
 80017ce:	4413      	add	r3, r2
 80017d0:	3342      	adds	r3, #66	; 0x42
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80017d6:	e034      	b.n	8001842 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	212c      	movs	r1, #44	; 0x2c
 80017de:	fb01 f303 	mul.w	r3, r1, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	3342      	adds	r3, #66	; 0x42
 80017e6:	2202      	movs	r2, #2
 80017e8:	701a      	strb	r2, [r3, #0]
      break;
 80017ea:	e02a      	b.n	8001842 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017ec:	78fb      	ldrb	r3, [r7, #3]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	212c      	movs	r1, #44	; 0x2c
 80017f2:	fb01 f303 	mul.w	r3, r1, r3
 80017f6:	4413      	add	r3, r2
 80017f8:	3354      	adds	r3, #84	; 0x54
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d109      	bne.n	8001814 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001800:	78fb      	ldrb	r3, [r7, #3]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	212c      	movs	r1, #44	; 0x2c
 8001806:	fb01 f303 	mul.w	r3, r1, r3
 800180a:	4413      	add	r3, r2
 800180c:	3342      	adds	r3, #66	; 0x42
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
      break;
 8001812:	e016      	b.n	8001842 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	212c      	movs	r1, #44	; 0x2c
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	4413      	add	r3, r2
 8001820:	3342      	adds	r3, #66	; 0x42
 8001822:	2202      	movs	r2, #2
 8001824:	701a      	strb	r2, [r3, #0]
      break;
 8001826:	e00c      	b.n	8001842 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	212c      	movs	r1, #44	; 0x2c
 800182e:	fb01 f303 	mul.w	r3, r1, r3
 8001832:	4413      	add	r3, r2
 8001834:	3342      	adds	r3, #66	; 0x42
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
      break;
 800183a:	e002      	b.n	8001842 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800183c:	bf00      	nop
 800183e:	e000      	b.n	8001842 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001840:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001842:	78fb      	ldrb	r3, [r7, #3]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	212c      	movs	r1, #44	; 0x2c
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	3344      	adds	r3, #68	; 0x44
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001854:	78fb      	ldrb	r3, [r7, #3]
 8001856:	8b3a      	ldrh	r2, [r7, #24]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	202c      	movs	r0, #44	; 0x2c
 800185c:	fb00 f303 	mul.w	r3, r0, r3
 8001860:	440b      	add	r3, r1
 8001862:	334c      	adds	r3, #76	; 0x4c
 8001864:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	212c      	movs	r1, #44	; 0x2c
 800186c:	fb01 f303 	mul.w	r3, r1, r3
 8001870:	4413      	add	r3, r2
 8001872:	3360      	adds	r3, #96	; 0x60
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	212c      	movs	r1, #44	; 0x2c
 800187e:	fb01 f303 	mul.w	r3, r1, r3
 8001882:	4413      	add	r3, r2
 8001884:	3350      	adds	r3, #80	; 0x50
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	212c      	movs	r1, #44	; 0x2c
 8001890:	fb01 f303 	mul.w	r3, r1, r3
 8001894:	4413      	add	r3, r2
 8001896:	3339      	adds	r3, #57	; 0x39
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800189c:	78fb      	ldrb	r3, [r7, #3]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	212c      	movs	r1, #44	; 0x2c
 80018a2:	fb01 f303 	mul.w	r3, r1, r3
 80018a6:	4413      	add	r3, r2
 80018a8:	3361      	adds	r3, #97	; 0x61
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	78fb      	ldrb	r3, [r7, #3]
 80018b4:	222c      	movs	r2, #44	; 0x2c
 80018b6:	fb02 f303 	mul.w	r3, r2, r3
 80018ba:	3338      	adds	r3, #56	; 0x38
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	4413      	add	r3, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f003 fc81 	bl	80051c8 <USB_HC_StartXfer>
 80018c6:	4603      	mov	r3, r0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f003 f9fe 	bl	8004ce8 <USB_GetMode>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	f040 80ef 	bne.w	8001ad2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 f9e3 	bl	8004cc4 <USB_ReadInterrupts>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80e5 	beq.w	8001ad0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f003 f9da 	bl	8004cc4 <USB_ReadInterrupts>
 8001910:	4603      	mov	r3, r0
 8001912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001916:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800191a:	d104      	bne.n	8001926 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001924:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f003 f9ca 	bl	8004cc4 <USB_ReadInterrupts>
 8001930:	4603      	mov	r3, r0
 8001932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800193a:	d104      	bne.n	8001946 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001944:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f003 f9ba 	bl	8004cc4 <USB_ReadInterrupts>
 8001950:	4603      	mov	r3, r0
 8001952:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001956:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800195a:	d104      	bne.n	8001966 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001964:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f003 f9aa 	bl	8004cc4 <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b02      	cmp	r3, #2
 8001978:	d103      	bne.n	8001982 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2202      	movs	r2, #2
 8001980:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f003 f99c 	bl	8004cc4 <USB_ReadInterrupts>
 800198c:	4603      	mov	r3, r0
 800198e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001992:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001996:	d115      	bne.n	80019c4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019a0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d108      	bne.n	80019c4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f008 f9f2 	bl	8009d9c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2101      	movs	r1, #1
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 fa48 	bl	8004e54 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f003 f97b 	bl	8004cc4 <USB_ReadInterrupts>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019d8:	d102      	bne.n	80019e0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f001 f978 	bl	8002cd0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f003 f96d 	bl	8004cc4 <USB_ReadInterrupts>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d106      	bne.n	8001a02 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f008 f9b5 	bl	8009d64 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2208      	movs	r2, #8
 8001a00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f003 f95c 	bl	8004cc4 <USB_ReadInterrupts>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	2b10      	cmp	r3, #16
 8001a14:	d101      	bne.n	8001a1a <HAL_HCD_IRQHandler+0x14a>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <HAL_HCD_IRQHandler+0x14c>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d012      	beq.n	8001a46 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	699a      	ldr	r2, [r3, #24]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0210 	bic.w	r2, r2, #16
 8001a2e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f001 f87b 	bl	8002b2c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699a      	ldr	r2, [r3, #24]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 0210 	orr.w	r2, r2, #16
 8001a44:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f003 f93a 	bl	8004cc4 <USB_ReadInterrupts>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a5a:	d13a      	bne.n	8001ad2 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f003 fca9 	bl	80053b8 <USB_HC_ReadInterrupt>
 8001a66:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
 8001a6c:	e025      	b.n	8001aba <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	68ba      	ldr	r2, [r7, #8]
 8001a76:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d018      	beq.n	8001ab4 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	015a      	lsls	r2, r3, #5
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a98:	d106      	bne.n	8001aa8 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f8a9 	bl	8001bf8 <HCD_HC_IN_IRQHandler>
 8001aa6:	e005      	b.n	8001ab4 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	4619      	mov	r1, r3
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 fca2 	bl	80023f8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d3d4      	bcc.n	8001a6e <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001acc:	615a      	str	r2, [r3, #20]
 8001ace:	e000      	b.n	8001ad2 <HAL_HCD_IRQHandler+0x202>
      return;
 8001ad0:	bf00      	nop
    }
  }
}
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_HCD_Start+0x16>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e013      	b.n	8001b16 <HAL_HCD_Start+0x3e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2101      	movs	r1, #1
 8001afc:	4618      	mov	r0, r3
 8001afe:	f003 fa0c 	bl	8004f1a <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 ff9c 	bl	8004a44 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_HCD_Stop+0x16>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e00d      	b.n	8001b50 <HAL_HCD_Stop+0x32>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 fd64 	bl	800560e <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f003 f9ae 	bl	8004ec6 <USB_ResetPort>
 8001b6a:	4603      	mov	r3, r0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001b80:	78fb      	ldrb	r3, [r7, #3]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	212c      	movs	r1, #44	; 0x2c
 8001b86:	fb01 f303 	mul.w	r3, r1, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3360      	adds	r3, #96	; 0x60
 8001b8e:	781b      	ldrb	r3, [r3, #0]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b083      	sub	sp, #12
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	212c      	movs	r1, #44	; 0x2c
 8001bac:	fb01 f303 	mul.w	r3, r1, r3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3350      	adds	r3, #80	; 0x50
 8001bb4:	681b      	ldr	r3, [r3, #0]
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 f9f2 	bl	8004fb6 <USB_GetCurrentFrame>
 8001bd2:	4603      	mov	r3, r0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 f9ce 	bl	8004f8a <USB_GetHostSpeed>
 8001bee:	4603      	mov	r3, r0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	015a      	lsls	r2, r3, #5
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4413      	add	r3, r2
 8001c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	d119      	bne.n	8001c5c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	015a      	lsls	r2, r3, #5
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c34:	461a      	mov	r2, r3
 8001c36:	2304      	movs	r3, #4
 8001c38:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	015a      	lsls	r2, r3, #5
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	4413      	add	r3, r2
 8001c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	0151      	lsls	r1, r2, #5
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	440a      	add	r2, r1
 8001c50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c54:	f043 0302 	orr.w	r3, r3, #2
 8001c58:	60d3      	str	r3, [r2, #12]
 8001c5a:	e101      	b.n	8001e60 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	015a      	lsls	r2, r3, #5
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4413      	add	r3, r2
 8001c64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c72:	d12b      	bne.n	8001ccc <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	015a      	lsls	r2, r3, #5
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c80:	461a      	mov	r2, r3
 8001c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c86:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	212c      	movs	r1, #44	; 0x2c
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	3361      	adds	r3, #97	; 0x61
 8001c96:	2207      	movs	r2, #7
 8001c98:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	015a      	lsls	r2, r3, #5
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	0151      	lsls	r1, r2, #5
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	440a      	add	r2, r1
 8001cb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cb4:	f043 0302 	orr.w	r3, r3, #2
 8001cb8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f003 fb87 	bl	80053d8 <USB_HC_Halt>
 8001cca:	e0c9      	b.n	8001e60 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	015a      	lsls	r2, r3, #5
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 0320 	and.w	r3, r3, #32
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	d109      	bne.n	8001cf6 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cee:	461a      	mov	r2, r3
 8001cf0:	2320      	movs	r3, #32
 8001cf2:	6093      	str	r3, [r2, #8]
 8001cf4:	e0b4      	b.n	8001e60 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	015a      	lsls	r2, r3, #5
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d133      	bne.n	8001d74 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	015a      	lsls	r2, r3, #5
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	0151      	lsls	r1, r2, #5
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	440a      	add	r2, r1
 8001d22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d26:	f043 0302 	orr.w	r3, r3, #2
 8001d2a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	212c      	movs	r1, #44	; 0x2c
 8001d32:	fb01 f303 	mul.w	r3, r1, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	3361      	adds	r3, #97	; 0x61
 8001d3a:	2205      	movs	r2, #5
 8001d3c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	015a      	lsls	r2, r3, #5
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	4413      	add	r3, r2
 8001d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	2310      	movs	r3, #16
 8001d4e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	015a      	lsls	r2, r3, #5
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	4413      	add	r3, r2
 8001d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	2308      	movs	r3, #8
 8001d60:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 fb33 	bl	80053d8 <USB_HC_Halt>
 8001d72:	e075      	b.n	8001e60 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	015a      	lsls	r2, r3, #5
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d8a:	d134      	bne.n	8001df6 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	015a      	lsls	r2, r3, #5
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	0151      	lsls	r1, r2, #5
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	440a      	add	r2, r1
 8001da2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001da6:	f043 0302 	orr.w	r3, r3, #2
 8001daa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	212c      	movs	r1, #44	; 0x2c
 8001db2:	fb01 f303 	mul.w	r3, r1, r3
 8001db6:	4413      	add	r3, r2
 8001db8:	3361      	adds	r3, #97	; 0x61
 8001dba:	2208      	movs	r2, #8
 8001dbc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	015a      	lsls	r2, r3, #5
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dca:	461a      	mov	r2, r3
 8001dcc:	2310      	movs	r3, #16
 8001dce:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	015a      	lsls	r2, r3, #5
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ddc:	461a      	mov	r2, r3
 8001dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	4611      	mov	r1, r2
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 faf2 	bl	80053d8 <USB_HC_Halt>
 8001df4:	e034      	b.n	8001e60 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	015a      	lsls	r2, r3, #5
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e08:	2b80      	cmp	r3, #128	; 0x80
 8001e0a:	d129      	bne.n	8001e60 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	015a      	lsls	r2, r3, #5
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4413      	add	r3, r2
 8001e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	0151      	lsls	r1, r2, #5
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	440a      	add	r2, r1
 8001e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e26:	f043 0302 	orr.w	r3, r3, #2
 8001e2a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	212c      	movs	r1, #44	; 0x2c
 8001e32:	fb01 f303 	mul.w	r3, r1, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	3361      	adds	r3, #97	; 0x61
 8001e3a:	2206      	movs	r2, #6
 8001e3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 fac5 	bl	80053d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	015a      	lsls	r2, r3, #5
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4413      	add	r3, r2
 8001e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e76:	d122      	bne.n	8001ebe <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	0151      	lsls	r1, r2, #5
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	440a      	add	r2, r1
 8001e8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e92:	f043 0302 	orr.w	r3, r3, #2
 8001e96:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	4611      	mov	r1, r2
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f003 fa98 	bl	80053d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	015a      	lsls	r2, r3, #5
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4413      	add	r3, r2
 8001eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eba:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001ebc:	e298      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	015a      	lsls	r2, r3, #5
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	f040 80fd 	bne.w	80020d0 <HCD_HC_IN_IRQHandler+0x4d8>
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	212c      	movs	r1, #44	; 0x2c
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3361      	adds	r3, #97	; 0x61
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	212c      	movs	r1, #44	; 0x2c
 8001eee:	fb01 f303 	mul.w	r3, r1, r3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	335c      	adds	r3, #92	; 0x5c
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	015a      	lsls	r2, r3, #5
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4413      	add	r3, r2
 8001f02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f06:	461a      	mov	r2, r3
 8001f08:	2301      	movs	r3, #1
 8001f0a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	212c      	movs	r1, #44	; 0x2c
 8001f12:	fb01 f303 	mul.w	r3, r1, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	333f      	adds	r3, #63	; 0x3f
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d009      	beq.n	8001f34 <HCD_HC_IN_IRQHandler+0x33c>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	212c      	movs	r1, #44	; 0x2c
 8001f26:	fb01 f303 	mul.w	r3, r1, r3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	333f      	adds	r3, #63	; 0x3f
 8001f2e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d121      	bne.n	8001f78 <HCD_HC_IN_IRQHandler+0x380>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	015a      	lsls	r2, r3, #5
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	0151      	lsls	r1, r2, #5
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	440a      	add	r2, r1
 8001f4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f4e:	f043 0302 	orr.w	r3, r3, #2
 8001f52:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f003 fa3a 	bl	80053d8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f70:	461a      	mov	r2, r3
 8001f72:	2310      	movs	r3, #16
 8001f74:	6093      	str	r3, [r2, #8]
 8001f76:	e066      	b.n	8002046 <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	212c      	movs	r1, #44	; 0x2c
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	4413      	add	r3, r2
 8001f84:	333f      	adds	r3, #63	; 0x3f
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d127      	bne.n	8001fdc <HCD_HC_IN_IRQHandler+0x3e4>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	0151      	lsls	r1, r2, #5
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	440a      	add	r2, r1
 8001fa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001faa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	212c      	movs	r1, #44	; 0x2c
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	3360      	adds	r3, #96	; 0x60
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	b2d9      	uxtb	r1, r3
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	202c      	movs	r0, #44	; 0x2c
 8001fc8:	fb00 f303 	mul.w	r3, r0, r3
 8001fcc:	4413      	add	r3, r2
 8001fce:	3360      	adds	r3, #96	; 0x60
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f007 feef 	bl	8009db8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001fda:	e034      	b.n	8002046 <HCD_HC_IN_IRQHandler+0x44e>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	212c      	movs	r1, #44	; 0x2c
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	333f      	adds	r3, #63	; 0x3f
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d12a      	bne.n	8002046 <HCD_HC_IN_IRQHandler+0x44e>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	212c      	movs	r1, #44	; 0x2c
 8001ff6:	fb01 f303 	mul.w	r3, r1, r3
 8001ffa:	4413      	add	r3, r2
 8001ffc:	3360      	adds	r3, #96	; 0x60
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	212c      	movs	r1, #44	; 0x2c
 8002008:	fb01 f303 	mul.w	r3, r1, r3
 800200c:	4413      	add	r3, r2
 800200e:	3354      	adds	r3, #84	; 0x54
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	f083 0301 	eor.w	r3, r3, #1
 8002016:	b2d8      	uxtb	r0, r3
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	212c      	movs	r1, #44	; 0x2c
 800201e:	fb01 f303 	mul.w	r3, r1, r3
 8002022:	4413      	add	r3, r2
 8002024:	3354      	adds	r3, #84	; 0x54
 8002026:	4602      	mov	r2, r0
 8002028:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	b2d9      	uxtb	r1, r3
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	202c      	movs	r0, #44	; 0x2c
 8002034:	fb00 f303 	mul.w	r3, r0, r3
 8002038:	4413      	add	r3, r2
 800203a:	3360      	adds	r3, #96	; 0x60
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f007 feb9 	bl	8009db8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d12b      	bne.n	80020a6 <HCD_HC_IN_IRQHandler+0x4ae>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	212c      	movs	r1, #44	; 0x2c
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	3348      	adds	r3, #72	; 0x48
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	202c      	movs	r0, #44	; 0x2c
 8002064:	fb00 f202 	mul.w	r2, r0, r2
 8002068:	440a      	add	r2, r1
 800206a:	3240      	adds	r2, #64	; 0x40
 800206c:	8812      	ldrh	r2, [r2, #0]
 800206e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 81ba 	beq.w	80023f0 <HCD_HC_IN_IRQHandler+0x7f8>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	212c      	movs	r1, #44	; 0x2c
 8002082:	fb01 f303 	mul.w	r3, r1, r3
 8002086:	4413      	add	r3, r2
 8002088:	3354      	adds	r3, #84	; 0x54
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	f083 0301 	eor.w	r3, r3, #1
 8002090:	b2d8      	uxtb	r0, r3
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	212c      	movs	r1, #44	; 0x2c
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	3354      	adds	r3, #84	; 0x54
 80020a0:	4602      	mov	r2, r0
 80020a2:	701a      	strb	r2, [r3, #0]
}
 80020a4:	e1a4      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x7f8>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	212c      	movs	r1, #44	; 0x2c
 80020ac:	fb01 f303 	mul.w	r3, r1, r3
 80020b0:	4413      	add	r3, r2
 80020b2:	3354      	adds	r3, #84	; 0x54
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	f083 0301 	eor.w	r3, r3, #1
 80020ba:	b2d8      	uxtb	r0, r3
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	212c      	movs	r1, #44	; 0x2c
 80020c2:	fb01 f303 	mul.w	r3, r1, r3
 80020c6:	4413      	add	r3, r2
 80020c8:	3354      	adds	r3, #84	; 0x54
 80020ca:	4602      	mov	r2, r0
 80020cc:	701a      	strb	r2, [r3, #0]
}
 80020ce:	e18f      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	015a      	lsls	r2, r3, #5
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	f040 8106 	bne.w	80022f4 <HCD_HC_IN_IRQHandler+0x6fc>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	0151      	lsls	r1, r2, #5
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	440a      	add	r2, r1
 80020fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002102:	f023 0302 	bic.w	r3, r3, #2
 8002106:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	212c      	movs	r1, #44	; 0x2c
 800210e:	fb01 f303 	mul.w	r3, r1, r3
 8002112:	4413      	add	r3, r2
 8002114:	3361      	adds	r3, #97	; 0x61
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d109      	bne.n	8002130 <HCD_HC_IN_IRQHandler+0x538>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	212c      	movs	r1, #44	; 0x2c
 8002122:	fb01 f303 	mul.w	r3, r1, r3
 8002126:	4413      	add	r3, r2
 8002128:	3360      	adds	r3, #96	; 0x60
 800212a:	2201      	movs	r2, #1
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	e0c9      	b.n	80022c4 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	212c      	movs	r1, #44	; 0x2c
 8002136:	fb01 f303 	mul.w	r3, r1, r3
 800213a:	4413      	add	r3, r2
 800213c:	3361      	adds	r3, #97	; 0x61
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b05      	cmp	r3, #5
 8002142:	d109      	bne.n	8002158 <HCD_HC_IN_IRQHandler+0x560>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	212c      	movs	r1, #44	; 0x2c
 800214a:	fb01 f303 	mul.w	r3, r1, r3
 800214e:	4413      	add	r3, r2
 8002150:	3360      	adds	r3, #96	; 0x60
 8002152:	2205      	movs	r2, #5
 8002154:	701a      	strb	r2, [r3, #0]
 8002156:	e0b5      	b.n	80022c4 <HCD_HC_IN_IRQHandler+0x6cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	212c      	movs	r1, #44	; 0x2c
 800215e:	fb01 f303 	mul.w	r3, r1, r3
 8002162:	4413      	add	r3, r2
 8002164:	3361      	adds	r3, #97	; 0x61
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b06      	cmp	r3, #6
 800216a:	d009      	beq.n	8002180 <HCD_HC_IN_IRQHandler+0x588>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	212c      	movs	r1, #44	; 0x2c
 8002172:	fb01 f303 	mul.w	r3, r1, r3
 8002176:	4413      	add	r3, r2
 8002178:	3361      	adds	r3, #97	; 0x61
 800217a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800217c:	2b08      	cmp	r3, #8
 800217e:	d150      	bne.n	8002222 <HCD_HC_IN_IRQHandler+0x62a>
      hhcd->hc[ch_num].ErrCnt++;
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	212c      	movs	r1, #44	; 0x2c
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	335c      	adds	r3, #92	; 0x5c
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	202c      	movs	r0, #44	; 0x2c
 8002198:	fb00 f303 	mul.w	r3, r0, r3
 800219c:	440b      	add	r3, r1
 800219e:	335c      	adds	r3, #92	; 0x5c
 80021a0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	212c      	movs	r1, #44	; 0x2c
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	335c      	adds	r3, #92	; 0x5c
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d912      	bls.n	80021dc <HCD_HC_IN_IRQHandler+0x5e4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	212c      	movs	r1, #44	; 0x2c
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	335c      	adds	r3, #92	; 0x5c
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	3360      	adds	r3, #96	; 0x60
 80021d6:	2204      	movs	r2, #4
 80021d8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80021da:	e073      	b.n	80022c4 <HCD_HC_IN_IRQHandler+0x6cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	212c      	movs	r1, #44	; 0x2c
 80021e2:	fb01 f303 	mul.w	r3, r1, r3
 80021e6:	4413      	add	r3, r2
 80021e8:	3360      	adds	r3, #96	; 0x60
 80021ea:	2202      	movs	r2, #2
 80021ec:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002204:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800220c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4413      	add	r3, r2
 8002216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800221a:	461a      	mov	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002220:	e050      	b.n	80022c4 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	212c      	movs	r1, #44	; 0x2c
 8002228:	fb01 f303 	mul.w	r3, r1, r3
 800222c:	4413      	add	r3, r2
 800222e:	3361      	adds	r3, #97	; 0x61
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d122      	bne.n	800227c <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	212c      	movs	r1, #44	; 0x2c
 800223c:	fb01 f303 	mul.w	r3, r1, r3
 8002240:	4413      	add	r3, r2
 8002242:	3360      	adds	r3, #96	; 0x60
 8002244:	2202      	movs	r2, #2
 8002246:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800225e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002266:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002274:	461a      	mov	r2, r3
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e023      	b.n	80022c4 <HCD_HC_IN_IRQHandler+0x6cc>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	212c      	movs	r1, #44	; 0x2c
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	4413      	add	r3, r2
 8002288:	3361      	adds	r3, #97	; 0x61
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b07      	cmp	r3, #7
 800228e:	d119      	bne.n	80022c4 <HCD_HC_IN_IRQHandler+0x6cc>
      hhcd->hc[ch_num].ErrCnt++;
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	212c      	movs	r1, #44	; 0x2c
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	335c      	adds	r3, #92	; 0x5c
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	202c      	movs	r0, #44	; 0x2c
 80022a8:	fb00 f303 	mul.w	r3, r0, r3
 80022ac:	440b      	add	r3, r1
 80022ae:	335c      	adds	r3, #92	; 0x5c
 80022b0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	212c      	movs	r1, #44	; 0x2c
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	4413      	add	r3, r2
 80022be:	3360      	adds	r3, #96	; 0x60
 80022c0:	2204      	movs	r2, #4
 80022c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d0:	461a      	mov	r2, r3
 80022d2:	2302      	movs	r3, #2
 80022d4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	b2d9      	uxtb	r1, r3
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	202c      	movs	r0, #44	; 0x2c
 80022e0:	fb00 f303 	mul.w	r3, r0, r3
 80022e4:	4413      	add	r3, r2
 80022e6:	3360      	adds	r3, #96	; 0x60
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f007 fd63 	bl	8009db8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80022f2:	e07d      	b.n	80023f0 <HCD_HC_IN_IRQHandler+0x7f8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	015a      	lsls	r2, r3, #5
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4413      	add	r3, r2
 80022fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 0310 	and.w	r3, r3, #16
 8002306:	2b10      	cmp	r3, #16
 8002308:	d172      	bne.n	80023f0 <HCD_HC_IN_IRQHandler+0x7f8>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	212c      	movs	r1, #44	; 0x2c
 8002310:	fb01 f303 	mul.w	r3, r1, r3
 8002314:	4413      	add	r3, r2
 8002316:	333f      	adds	r3, #63	; 0x3f
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d121      	bne.n	8002362 <HCD_HC_IN_IRQHandler+0x76a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	212c      	movs	r1, #44	; 0x2c
 8002324:	fb01 f303 	mul.w	r3, r1, r3
 8002328:	4413      	add	r3, r2
 800232a:	335c      	adds	r3, #92	; 0x5c
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4413      	add	r3, r2
 8002338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	0151      	lsls	r1, r2, #5
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	440a      	add	r2, r1
 8002346:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800234a:	f043 0302 	orr.w	r3, r3, #2
 800234e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	4611      	mov	r1, r2
 800235a:	4618      	mov	r0, r3
 800235c:	f003 f83c 	bl	80053d8 <USB_HC_Halt>
 8002360:	e03d      	b.n	80023de <HCD_HC_IN_IRQHandler+0x7e6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	212c      	movs	r1, #44	; 0x2c
 8002368:	fb01 f303 	mul.w	r3, r1, r3
 800236c:	4413      	add	r3, r2
 800236e:	333f      	adds	r3, #63	; 0x3f
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <HCD_HC_IN_IRQHandler+0x792>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	212c      	movs	r1, #44	; 0x2c
 800237c:	fb01 f303 	mul.w	r3, r1, r3
 8002380:	4413      	add	r3, r2
 8002382:	333f      	adds	r3, #63	; 0x3f
 8002384:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002386:	2b02      	cmp	r3, #2
 8002388:	d129      	bne.n	80023de <HCD_HC_IN_IRQHandler+0x7e6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	212c      	movs	r1, #44	; 0x2c
 8002390:	fb01 f303 	mul.w	r3, r1, r3
 8002394:	4413      	add	r3, r2
 8002396:	335c      	adds	r3, #92	; 0x5c
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	212c      	movs	r1, #44	; 0x2c
 80023a2:	fb01 f303 	mul.w	r3, r1, r3
 80023a6:	4413      	add	r3, r2
 80023a8:	3361      	adds	r3, #97	; 0x61
 80023aa:	2203      	movs	r2, #3
 80023ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	0151      	lsls	r1, r2, #5
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	440a      	add	r2, r1
 80023c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 fffd 	bl	80053d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ea:	461a      	mov	r2, r3
 80023ec:	2310      	movs	r3, #16
 80023ee:	6093      	str	r3, [r2, #8]
}
 80023f0:	bf00      	nop
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b088      	sub	sp, #32
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	460b      	mov	r3, r1
 8002402:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	015a      	lsls	r2, r3, #5
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	4413      	add	r3, r2
 800241a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b04      	cmp	r3, #4
 8002426:	d119      	bne.n	800245c <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	4413      	add	r3, r2
 8002430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002434:	461a      	mov	r2, r3
 8002436:	2304      	movs	r3, #4
 8002438:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	4413      	add	r3, r2
 8002442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	0151      	lsls	r1, r2, #5
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	440a      	add	r2, r1
 8002450:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800245a:	e363      	b.n	8002b24 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	4413      	add	r3, r2
 8002464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 0320 	and.w	r3, r3, #32
 800246e:	2b20      	cmp	r3, #32
 8002470:	d13e      	bne.n	80024f0 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	4413      	add	r3, r2
 800247a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247e:	461a      	mov	r2, r3
 8002480:	2320      	movs	r3, #32
 8002482:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	212c      	movs	r1, #44	; 0x2c
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	4413      	add	r3, r2
 8002490:	333d      	adds	r3, #61	; 0x3d
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	f040 8345 	bne.w	8002b24 <HCD_HC_OUT_IRQHandler+0x72c>
      hhcd->hc[ch_num].do_ping = 0U;
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	212c      	movs	r1, #44	; 0x2c
 80024a0:	fb01 f303 	mul.w	r3, r1, r3
 80024a4:	4413      	add	r3, r2
 80024a6:	333d      	adds	r3, #61	; 0x3d
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	212c      	movs	r1, #44	; 0x2c
 80024b2:	fb01 f303 	mul.w	r3, r1, r3
 80024b6:	4413      	add	r3, r2
 80024b8:	3360      	adds	r3, #96	; 0x60
 80024ba:	2202      	movs	r2, #2
 80024bc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	0151      	lsls	r1, r2, #5
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	440a      	add	r2, r1
 80024d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024d8:	f043 0302 	orr.w	r3, r3, #2
 80024dc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	4611      	mov	r1, r2
 80024e8:	4618      	mov	r0, r3
 80024ea:	f002 ff75 	bl	80053d8 <USB_HC_Halt>
}
 80024ee:	e319      	b.n	8002b24 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002506:	d122      	bne.n	800254e <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	0151      	lsls	r1, r2, #5
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	440a      	add	r2, r1
 800251e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002522:	f043 0302 	orr.w	r3, r3, #2
 8002526:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	4611      	mov	r1, r2
 8002532:	4618      	mov	r0, r3
 8002534:	f002 ff50 	bl	80053d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	015a      	lsls	r2, r3, #5
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	4413      	add	r3, r2
 8002540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002544:	461a      	mov	r2, r3
 8002546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800254a:	6093      	str	r3, [r2, #8]
}
 800254c:	e2ea      	b.n	8002b24 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	015a      	lsls	r2, r3, #5
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	4413      	add	r3, r2
 8002556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b01      	cmp	r3, #1
 8002562:	d150      	bne.n	8002606 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	212c      	movs	r1, #44	; 0x2c
 800256a:	fb01 f303 	mul.w	r3, r1, r3
 800256e:	4413      	add	r3, r2
 8002570:	335c      	adds	r3, #92	; 0x5c
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	4413      	add	r3, r2
 800257e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002588:	2b40      	cmp	r3, #64	; 0x40
 800258a:	d111      	bne.n	80025b0 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	212c      	movs	r1, #44	; 0x2c
 8002592:	fb01 f303 	mul.w	r3, r1, r3
 8002596:	4413      	add	r3, r2
 8002598:	333d      	adds	r3, #61	; 0x3d
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	015a      	lsls	r2, r3, #5
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	4413      	add	r3, r2
 80025a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025aa:	461a      	mov	r2, r3
 80025ac:	2340      	movs	r3, #64	; 0x40
 80025ae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	0151      	lsls	r1, r2, #5
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	440a      	add	r2, r1
 80025c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025ca:	f043 0302 	orr.w	r3, r3, #2
 80025ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f002 fefc 	bl	80053d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ec:	461a      	mov	r2, r3
 80025ee:	2301      	movs	r3, #1
 80025f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	212c      	movs	r1, #44	; 0x2c
 80025f8:	fb01 f303 	mul.w	r3, r1, r3
 80025fc:	4413      	add	r3, r2
 80025fe:	3361      	adds	r3, #97	; 0x61
 8002600:	2201      	movs	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
}
 8002604:	e28e      	b.n	8002b24 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002618:	2b40      	cmp	r3, #64	; 0x40
 800261a:	d13c      	bne.n	8002696 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	212c      	movs	r1, #44	; 0x2c
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	4413      	add	r3, r2
 8002628:	3361      	adds	r3, #97	; 0x61
 800262a:	2204      	movs	r2, #4
 800262c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	212c      	movs	r1, #44	; 0x2c
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	333d      	adds	r3, #61	; 0x3d
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	212c      	movs	r1, #44	; 0x2c
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4413      	add	r3, r2
 800264c:	335c      	adds	r3, #92	; 0x5c
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	0151      	lsls	r1, r2, #5
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	440a      	add	r2, r1
 8002668:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f002 feab 	bl	80053d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	461a      	mov	r2, r3
 8002690:	2340      	movs	r3, #64	; 0x40
 8002692:	6093      	str	r3, [r2, #8]
}
 8002694:	e246      	b.n	8002b24 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	015a      	lsls	r2, r3, #5
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	4413      	add	r3, r2
 800269e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d12a      	bne.n	8002702 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b8:	461a      	mov	r2, r3
 80026ba:	2308      	movs	r3, #8
 80026bc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	0151      	lsls	r1, r2, #5
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	440a      	add	r2, r1
 80026d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026d8:	f043 0302 	orr.w	r3, r3, #2
 80026dc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f002 fe75 	bl	80053d8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	212c      	movs	r1, #44	; 0x2c
 80026f4:	fb01 f303 	mul.w	r3, r1, r3
 80026f8:	4413      	add	r3, r2
 80026fa:	3361      	adds	r3, #97	; 0x61
 80026fc:	2205      	movs	r2, #5
 80026fe:	701a      	strb	r2, [r3, #0]
}
 8002700:	e210      	b.n	8002b24 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	2b10      	cmp	r3, #16
 8002716:	d133      	bne.n	8002780 <HCD_HC_OUT_IRQHandler+0x388>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	212c      	movs	r1, #44	; 0x2c
 800271e:	fb01 f303 	mul.w	r3, r1, r3
 8002722:	4413      	add	r3, r2
 8002724:	335c      	adds	r3, #92	; 0x5c
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	212c      	movs	r1, #44	; 0x2c
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	4413      	add	r3, r2
 8002736:	3361      	adds	r3, #97	; 0x61
 8002738:	2203      	movs	r2, #3
 800273a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	4413      	add	r3, r2
 8002744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	0151      	lsls	r1, r2, #5
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	440a      	add	r2, r1
 8002752:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002756:	f043 0302 	orr.w	r3, r3, #2
 800275a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f002 fe36 	bl	80053d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	461a      	mov	r2, r3
 800277a:	2310      	movs	r3, #16
 800277c:	6093      	str	r3, [r2, #8]
}
 800277e:	e1d1      	b.n	8002b24 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002792:	2b80      	cmp	r3, #128	; 0x80
 8002794:	d12a      	bne.n	80027ec <HCD_HC_OUT_IRQHandler+0x3f4>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	212c      	movs	r1, #44	; 0x2c
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	4413      	add	r3, r2
 80027a2:	3361      	adds	r3, #97	; 0x61
 80027a4:	2206      	movs	r2, #6
 80027a6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	015a      	lsls	r2, r3, #5
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	4413      	add	r3, r2
 80027b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	0151      	lsls	r1, r2, #5
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	440a      	add	r2, r1
 80027be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027c2:	f043 0302 	orr.w	r3, r3, #2
 80027c6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f002 fe00 	bl	80053d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e4:	461a      	mov	r2, r3
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	6093      	str	r3, [r2, #8]
}
 80027ea:	e19b      	b.n	8002b24 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	015a      	lsls	r2, r3, #5
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	4413      	add	r3, r2
 80027f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002802:	d134      	bne.n	800286e <HCD_HC_OUT_IRQHandler+0x476>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	015a      	lsls	r2, r3, #5
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	4413      	add	r3, r2
 800280c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	0151      	lsls	r1, r2, #5
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	440a      	add	r2, r1
 800281a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800281e:	f043 0302 	orr.w	r3, r3, #2
 8002822:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	697a      	ldr	r2, [r7, #20]
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f002 fdd2 	bl	80053d8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	4413      	add	r3, r2
 800283c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002840:	461a      	mov	r2, r3
 8002842:	2310      	movs	r3, #16
 8002844:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	4413      	add	r3, r2
 800284e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002852:	461a      	mov	r2, r3
 8002854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002858:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	3361      	adds	r3, #97	; 0x61
 8002868:	2208      	movs	r2, #8
 800286a:	701a      	strb	r2, [r3, #0]
}
 800286c:	e15a      	b.n	8002b24 <HCD_HC_OUT_IRQHandler+0x72c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	4413      	add	r3, r2
 8002876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b02      	cmp	r3, #2
 8002882:	f040 814f 	bne.w	8002b24 <HCD_HC_OUT_IRQHandler+0x72c>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	4413      	add	r3, r2
 800288e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	0151      	lsls	r1, r2, #5
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	440a      	add	r2, r1
 800289c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028a0:	f023 0302 	bic.w	r3, r3, #2
 80028a4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	212c      	movs	r1, #44	; 0x2c
 80028ac:	fb01 f303 	mul.w	r3, r1, r3
 80028b0:	4413      	add	r3, r2
 80028b2:	3361      	adds	r3, #97	; 0x61
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d17d      	bne.n	80029b6 <HCD_HC_OUT_IRQHandler+0x5be>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	212c      	movs	r1, #44	; 0x2c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	3360      	adds	r3, #96	; 0x60
 80028c8:	2201      	movs	r2, #1
 80028ca:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	212c      	movs	r1, #44	; 0x2c
 80028d2:	fb01 f303 	mul.w	r3, r1, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	333f      	adds	r3, #63	; 0x3f
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d00a      	beq.n	80028f6 <HCD_HC_OUT_IRQHandler+0x4fe>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	212c      	movs	r1, #44	; 0x2c
 80028e6:	fb01 f303 	mul.w	r3, r1, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	333f      	adds	r3, #63	; 0x3f
 80028ee:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	f040 8100 	bne.w	8002af6 <HCD_HC_OUT_IRQHandler+0x6fe>
        if (hhcd->Init.dma_enable == 0U)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d113      	bne.n	8002926 <HCD_HC_OUT_IRQHandler+0x52e>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	3355      	adds	r3, #85	; 0x55
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	f083 0301 	eor.w	r3, r3, #1
 8002912:	b2d8      	uxtb	r0, r3
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	212c      	movs	r1, #44	; 0x2c
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	4413      	add	r3, r2
 8002920:	3355      	adds	r3, #85	; 0x55
 8002922:	4602      	mov	r2, r0
 8002924:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b01      	cmp	r3, #1
 800292c:	f040 80e3 	bne.w	8002af6 <HCD_HC_OUT_IRQHandler+0x6fe>
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	212c      	movs	r1, #44	; 0x2c
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	334c      	adds	r3, #76	; 0x4c
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80d8 	beq.w	8002af6 <HCD_HC_OUT_IRQHandler+0x6fe>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	212c      	movs	r1, #44	; 0x2c
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	4413      	add	r3, r2
 8002952:	334c      	adds	r3, #76	; 0x4c
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	202c      	movs	r0, #44	; 0x2c
 800295c:	fb00 f202 	mul.w	r2, r0, r2
 8002960:	440a      	add	r2, r1
 8002962:	3240      	adds	r2, #64	; 0x40
 8002964:	8812      	ldrh	r2, [r2, #0]
 8002966:	4413      	add	r3, r2
 8002968:	3b01      	subs	r3, #1
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	202c      	movs	r0, #44	; 0x2c
 8002970:	fb00 f202 	mul.w	r2, r0, r2
 8002974:	440a      	add	r2, r1
 8002976:	3240      	adds	r2, #64	; 0x40
 8002978:	8812      	ldrh	r2, [r2, #0]
 800297a:	fbb3 f3f2 	udiv	r3, r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80b5 	beq.w	8002af6 <HCD_HC_OUT_IRQHandler+0x6fe>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	212c      	movs	r1, #44	; 0x2c
 8002992:	fb01 f303 	mul.w	r3, r1, r3
 8002996:	4413      	add	r3, r2
 8002998:	3355      	adds	r3, #85	; 0x55
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	f083 0301 	eor.w	r3, r3, #1
 80029a0:	b2d8      	uxtb	r0, r3
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	3355      	adds	r3, #85	; 0x55
 80029b0:	4602      	mov	r2, r0
 80029b2:	701a      	strb	r2, [r3, #0]
 80029b4:	e09f      	b.n	8002af6 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	212c      	movs	r1, #44	; 0x2c
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	3361      	adds	r3, #97	; 0x61
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d109      	bne.n	80029de <HCD_HC_OUT_IRQHandler+0x5e6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	3360      	adds	r3, #96	; 0x60
 80029d8:	2202      	movs	r2, #2
 80029da:	701a      	strb	r2, [r3, #0]
 80029dc:	e08b      	b.n	8002af6 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	3361      	adds	r3, #97	; 0x61
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d109      	bne.n	8002a06 <HCD_HC_OUT_IRQHandler+0x60e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	3360      	adds	r3, #96	; 0x60
 8002a00:	2202      	movs	r2, #2
 8002a02:	701a      	strb	r2, [r3, #0]
 8002a04:	e077      	b.n	8002af6 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	212c      	movs	r1, #44	; 0x2c
 8002a0c:	fb01 f303 	mul.w	r3, r1, r3
 8002a10:	4413      	add	r3, r2
 8002a12:	3361      	adds	r3, #97	; 0x61
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b05      	cmp	r3, #5
 8002a18:	d109      	bne.n	8002a2e <HCD_HC_OUT_IRQHandler+0x636>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	212c      	movs	r1, #44	; 0x2c
 8002a20:	fb01 f303 	mul.w	r3, r1, r3
 8002a24:	4413      	add	r3, r2
 8002a26:	3360      	adds	r3, #96	; 0x60
 8002a28:	2205      	movs	r2, #5
 8002a2a:	701a      	strb	r2, [r3, #0]
 8002a2c:	e063      	b.n	8002af6 <HCD_HC_OUT_IRQHandler+0x6fe>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	212c      	movs	r1, #44	; 0x2c
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	4413      	add	r3, r2
 8002a3a:	3361      	adds	r3, #97	; 0x61
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b06      	cmp	r3, #6
 8002a40:	d009      	beq.n	8002a56 <HCD_HC_OUT_IRQHandler+0x65e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3361      	adds	r3, #97	; 0x61
 8002a50:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d14f      	bne.n	8002af6 <HCD_HC_OUT_IRQHandler+0x6fe>
      hhcd->hc[ch_num].ErrCnt++;
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	212c      	movs	r1, #44	; 0x2c
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	335c      	adds	r3, #92	; 0x5c
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	202c      	movs	r0, #44	; 0x2c
 8002a6e:	fb00 f303 	mul.w	r3, r0, r3
 8002a72:	440b      	add	r3, r1
 8002a74:	335c      	adds	r3, #92	; 0x5c
 8002a76:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	212c      	movs	r1, #44	; 0x2c
 8002a7e:	fb01 f303 	mul.w	r3, r1, r3
 8002a82:	4413      	add	r3, r2
 8002a84:	335c      	adds	r3, #92	; 0x5c
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d912      	bls.n	8002ab2 <HCD_HC_OUT_IRQHandler+0x6ba>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	212c      	movs	r1, #44	; 0x2c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4413      	add	r3, r2
 8002a98:	335c      	adds	r3, #92	; 0x5c
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	212c      	movs	r1, #44	; 0x2c
 8002aa4:	fb01 f303 	mul.w	r3, r1, r3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3360      	adds	r3, #96	; 0x60
 8002aac:	2204      	movs	r2, #4
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	e021      	b.n	8002af6 <HCD_HC_OUT_IRQHandler+0x6fe>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	212c      	movs	r1, #44	; 0x2c
 8002ab8:	fb01 f303 	mul.w	r3, r1, r3
 8002abc:	4413      	add	r3, r2
 8002abe:	3360      	adds	r3, #96	; 0x60
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ada:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ae2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002af0:	461a      	mov	r2, r3
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b02:	461a      	mov	r2, r3
 8002b04:	2302      	movs	r3, #2
 8002b06:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	b2d9      	uxtb	r1, r3
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	202c      	movs	r0, #44	; 0x2c
 8002b12:	fb00 f303 	mul.w	r3, r0, r3
 8002b16:	4413      	add	r3, r2
 8002b18:	3360      	adds	r3, #96	; 0x60
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f007 f94a 	bl	8009db8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b24:	bf00      	nop
 8002b26:	3720      	adds	r7, #32
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	0c5b      	lsrs	r3, r3, #17
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b60:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d004      	beq.n	8002b72 <HCD_RXQLVL_IRQHandler+0x46>
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2b05      	cmp	r3, #5
 8002b6c:	f000 80a9 	beq.w	8002cc2 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b70:	e0aa      	b.n	8002cc8 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80a6 	beq.w	8002cc6 <HCD_RXQLVL_IRQHandler+0x19a>
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	212c      	movs	r1, #44	; 0x2c
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	3344      	adds	r3, #68	; 0x44
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 809b 	beq.w	8002cc6 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3350      	adds	r3, #80	; 0x50
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	441a      	add	r2, r3
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	202c      	movs	r0, #44	; 0x2c
 8002baa:	fb00 f303 	mul.w	r3, r0, r3
 8002bae:	440b      	add	r3, r1
 8002bb0:	334c      	adds	r3, #76	; 0x4c
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d87a      	bhi.n	8002cae <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	212c      	movs	r1, #44	; 0x2c
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3344      	adds	r3, #68	; 0x44
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	b292      	uxth	r2, r2
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f002 f820 	bl	8004c16 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	212c      	movs	r1, #44	; 0x2c
 8002bdc:	fb01 f303 	mul.w	r3, r1, r3
 8002be0:	4413      	add	r3, r2
 8002be2:	3344      	adds	r3, #68	; 0x44
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	441a      	add	r2, r3
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	202c      	movs	r0, #44	; 0x2c
 8002bf0:	fb00 f303 	mul.w	r3, r0, r3
 8002bf4:	440b      	add	r3, r1
 8002bf6:	3344      	adds	r3, #68	; 0x44
 8002bf8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	212c      	movs	r1, #44	; 0x2c
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	4413      	add	r3, r2
 8002c06:	3350      	adds	r3, #80	; 0x50
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	441a      	add	r2, r3
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	202c      	movs	r0, #44	; 0x2c
 8002c14:	fb00 f303 	mul.w	r3, r0, r3
 8002c18:	440b      	add	r3, r1
 8002c1a:	3350      	adds	r3, #80	; 0x50
 8002c1c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	0cdb      	lsrs	r3, r3, #19
 8002c2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c32:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	212c      	movs	r1, #44	; 0x2c
 8002c3a:	fb01 f303 	mul.w	r3, r1, r3
 8002c3e:	4413      	add	r3, r2
 8002c40:	3340      	adds	r3, #64	; 0x40
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d13c      	bne.n	8002cc6 <HCD_RXQLVL_IRQHandler+0x19a>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d039      	beq.n	8002cc6 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	015a      	lsls	r2, r3, #5
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c68:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c70:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	212c      	movs	r1, #44	; 0x2c
 8002c8a:	fb01 f303 	mul.w	r3, r1, r3
 8002c8e:	4413      	add	r3, r2
 8002c90:	3354      	adds	r3, #84	; 0x54
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	f083 0301 	eor.w	r3, r3, #1
 8002c98:	b2d8      	uxtb	r0, r3
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3354      	adds	r3, #84	; 0x54
 8002ca8:	4602      	mov	r2, r0
 8002caa:	701a      	strb	r2, [r3, #0]
      break;
 8002cac:	e00b      	b.n	8002cc6 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3360      	adds	r3, #96	; 0x60
 8002cbc:	2204      	movs	r2, #4
 8002cbe:	701a      	strb	r2, [r3, #0]
      break;
 8002cc0:	e001      	b.n	8002cc6 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002cc2:	bf00      	nop
 8002cc4:	e000      	b.n	8002cc8 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002cc6:	bf00      	nop
  }
}
 8002cc8:	bf00      	nop
 8002cca:	3728      	adds	r7, #40	; 0x28
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002cfc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d10b      	bne.n	8002d20 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d102      	bne.n	8002d18 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f007 f834 	bl	8009d80 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	f043 0302 	orr.w	r3, r3, #2
 8002d1e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d132      	bne.n	8002d90 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f043 0308 	orr.w	r3, r3, #8
 8002d30:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d126      	bne.n	8002d8a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d113      	bne.n	8002d6c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002d4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d4e:	d106      	bne.n	8002d5e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2102      	movs	r1, #2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f002 f87c 	bl	8004e54 <USB_InitFSLSPClkSel>
 8002d5c:	e011      	b.n	8002d82 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2101      	movs	r1, #1
 8002d64:	4618      	mov	r0, r3
 8002d66:	f002 f875 	bl	8004e54 <USB_InitFSLSPClkSel>
 8002d6a:	e00a      	b.n	8002d82 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d106      	bne.n	8002d82 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002d80:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f007 f82a 	bl	8009ddc <HAL_HCD_PortEnabled_Callback>
 8002d88:	e002      	b.n	8002d90 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f007 f834 	bl	8009df8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	d103      	bne.n	8002da2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f043 0320 	orr.w	r3, r3, #32
 8002da0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002da8:	461a      	mov	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	6013      	str	r3, [r2, #0]
}
 8002dae:	bf00      	nop
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e304      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 8087 	beq.w	8002ee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dd8:	4b92      	ldr	r3, [pc, #584]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d00c      	beq.n	8002dfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002de4:	4b8f      	ldr	r3, [pc, #572]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 030c 	and.w	r3, r3, #12
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d112      	bne.n	8002e16 <HAL_RCC_OscConfig+0x5e>
 8002df0:	4b8c      	ldr	r3, [pc, #560]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfc:	d10b      	bne.n	8002e16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfe:	4b89      	ldr	r3, [pc, #548]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d06c      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x12c>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d168      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e2de      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1e:	d106      	bne.n	8002e2e <HAL_RCC_OscConfig+0x76>
 8002e20:	4b80      	ldr	r3, [pc, #512]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a7f      	ldr	r2, [pc, #508]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	e02e      	b.n	8002e8c <HAL_RCC_OscConfig+0xd4>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x98>
 8002e36:	4b7b      	ldr	r3, [pc, #492]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a7a      	ldr	r2, [pc, #488]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b78      	ldr	r3, [pc, #480]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a77      	ldr	r2, [pc, #476]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e01d      	b.n	8002e8c <HAL_RCC_OscConfig+0xd4>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCC_OscConfig+0xbc>
 8002e5a:	4b72      	ldr	r3, [pc, #456]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a71      	ldr	r2, [pc, #452]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	4b6f      	ldr	r3, [pc, #444]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a6e      	ldr	r2, [pc, #440]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	e00b      	b.n	8002e8c <HAL_RCC_OscConfig+0xd4>
 8002e74:	4b6b      	ldr	r3, [pc, #428]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a6a      	ldr	r2, [pc, #424]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	4b68      	ldr	r3, [pc, #416]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a67      	ldr	r2, [pc, #412]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d013      	beq.n	8002ebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7fd feca 	bl	8000c2c <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e9c:	f7fd fec6 	bl	8000c2c <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b64      	cmp	r3, #100	; 0x64
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e292      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eae:	4b5d      	ldr	r3, [pc, #372]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0xe4>
 8002eba:	e014      	b.n	8002ee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7fd feb6 	bl	8000c2c <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec4:	f7fd feb2 	bl	8000c2c <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b64      	cmp	r3, #100	; 0x64
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e27e      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed6:	4b53      	ldr	r3, [pc, #332]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x10c>
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d063      	beq.n	8002fba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ef2:	4b4c      	ldr	r3, [pc, #304]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00b      	beq.n	8002f16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002efe:	4b49      	ldr	r3, [pc, #292]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 030c 	and.w	r3, r3, #12
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d11c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x18c>
 8002f0a:	4b46      	ldr	r3, [pc, #280]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d116      	bne.n	8002f44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f16:	4b43      	ldr	r3, [pc, #268]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <HAL_RCC_OscConfig+0x176>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d001      	beq.n	8002f2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e252      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2e:	4b3d      	ldr	r3, [pc, #244]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4939      	ldr	r1, [pc, #228]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f42:	e03a      	b.n	8002fba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d020      	beq.n	8002f8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f4c:	4b36      	ldr	r3, [pc, #216]	; (8003028 <HAL_RCC_OscConfig+0x270>)
 8002f4e:	2201      	movs	r2, #1
 8002f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f52:	f7fd fe6b 	bl	8000c2c <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f5a:	f7fd fe67 	bl	8000c2c <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e233      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6c:	4b2d      	ldr	r3, [pc, #180]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f78:	4b2a      	ldr	r3, [pc, #168]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4927      	ldr	r1, [pc, #156]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	600b      	str	r3, [r1, #0]
 8002f8c:	e015      	b.n	8002fba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f8e:	4b26      	ldr	r3, [pc, #152]	; (8003028 <HAL_RCC_OscConfig+0x270>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f94:	f7fd fe4a 	bl	8000c2c <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f9c:	f7fd fe46 	bl	8000c2c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e212      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fae:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d03a      	beq.n	800303c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d019      	beq.n	8003002 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fce:	4b17      	ldr	r3, [pc, #92]	; (800302c <HAL_RCC_OscConfig+0x274>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fd4:	f7fd fe2a 	bl	8000c2c <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fdc:	f7fd fe26 	bl	8000c2c <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e1f2      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fee:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	f000 fc1c 	bl	8003838 <RCC_Delay>
 8003000:	e01c      	b.n	800303c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003002:	4b0a      	ldr	r3, [pc, #40]	; (800302c <HAL_RCC_OscConfig+0x274>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003008:	f7fd fe10 	bl	8000c2c <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800300e:	e00f      	b.n	8003030 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003010:	f7fd fe0c 	bl	8000c2c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d908      	bls.n	8003030 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e1d8      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000
 8003028:	42420000 	.word	0x42420000
 800302c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003030:	4b9b      	ldr	r3, [pc, #620]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e9      	bne.n	8003010 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0304 	and.w	r3, r3, #4
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80a6 	beq.w	8003196 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800304a:	2300      	movs	r3, #0
 800304c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800304e:	4b94      	ldr	r3, [pc, #592]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10d      	bne.n	8003076 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800305a:	4b91      	ldr	r3, [pc, #580]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	4a90      	ldr	r2, [pc, #576]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 8003060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003064:	61d3      	str	r3, [r2, #28]
 8003066:	4b8e      	ldr	r3, [pc, #568]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003072:	2301      	movs	r3, #1
 8003074:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003076:	4b8b      	ldr	r3, [pc, #556]	; (80032a4 <HAL_RCC_OscConfig+0x4ec>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307e:	2b00      	cmp	r3, #0
 8003080:	d118      	bne.n	80030b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003082:	4b88      	ldr	r3, [pc, #544]	; (80032a4 <HAL_RCC_OscConfig+0x4ec>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a87      	ldr	r2, [pc, #540]	; (80032a4 <HAL_RCC_OscConfig+0x4ec>)
 8003088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800308c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800308e:	f7fd fdcd 	bl	8000c2c <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003096:	f7fd fdc9 	bl	8000c2c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b64      	cmp	r3, #100	; 0x64
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e195      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a8:	4b7e      	ldr	r3, [pc, #504]	; (80032a4 <HAL_RCC_OscConfig+0x4ec>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d106      	bne.n	80030ca <HAL_RCC_OscConfig+0x312>
 80030bc:	4b78      	ldr	r3, [pc, #480]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	4a77      	ldr	r2, [pc, #476]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6213      	str	r3, [r2, #32]
 80030c8:	e02d      	b.n	8003126 <HAL_RCC_OscConfig+0x36e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10c      	bne.n	80030ec <HAL_RCC_OscConfig+0x334>
 80030d2:	4b73      	ldr	r3, [pc, #460]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	4a72      	ldr	r2, [pc, #456]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 80030d8:	f023 0301 	bic.w	r3, r3, #1
 80030dc:	6213      	str	r3, [r2, #32]
 80030de:	4b70      	ldr	r3, [pc, #448]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	4a6f      	ldr	r2, [pc, #444]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 80030e4:	f023 0304 	bic.w	r3, r3, #4
 80030e8:	6213      	str	r3, [r2, #32]
 80030ea:	e01c      	b.n	8003126 <HAL_RCC_OscConfig+0x36e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	2b05      	cmp	r3, #5
 80030f2:	d10c      	bne.n	800310e <HAL_RCC_OscConfig+0x356>
 80030f4:	4b6a      	ldr	r3, [pc, #424]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	4a69      	ldr	r2, [pc, #420]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 80030fa:	f043 0304 	orr.w	r3, r3, #4
 80030fe:	6213      	str	r3, [r2, #32]
 8003100:	4b67      	ldr	r3, [pc, #412]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	4a66      	ldr	r2, [pc, #408]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6213      	str	r3, [r2, #32]
 800310c:	e00b      	b.n	8003126 <HAL_RCC_OscConfig+0x36e>
 800310e:	4b64      	ldr	r3, [pc, #400]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	4a63      	ldr	r2, [pc, #396]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	6213      	str	r3, [r2, #32]
 800311a:	4b61      	ldr	r3, [pc, #388]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4a60      	ldr	r2, [pc, #384]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 8003120:	f023 0304 	bic.w	r3, r3, #4
 8003124:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d015      	beq.n	800315a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312e:	f7fd fd7d 	bl	8000c2c <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003134:	e00a      	b.n	800314c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003136:	f7fd fd79 	bl	8000c2c <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	f241 3288 	movw	r2, #5000	; 0x1388
 8003144:	4293      	cmp	r3, r2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e143      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314c:	4b54      	ldr	r3, [pc, #336]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0ee      	beq.n	8003136 <HAL_RCC_OscConfig+0x37e>
 8003158:	e014      	b.n	8003184 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800315a:	f7fd fd67 	bl	8000c2c <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003160:	e00a      	b.n	8003178 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003162:	f7fd fd63 	bl	8000c2c <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003170:	4293      	cmp	r3, r2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e12d      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003178:	4b49      	ldr	r3, [pc, #292]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 800317a:	6a1b      	ldr	r3, [r3, #32]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1ee      	bne.n	8003162 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003184:	7dfb      	ldrb	r3, [r7, #23]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d105      	bne.n	8003196 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800318a:	4b45      	ldr	r3, [pc, #276]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	4a44      	ldr	r2, [pc, #272]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 8003190:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003194:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 808c 	beq.w	80032b8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80031a0:	4b3f      	ldr	r3, [pc, #252]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ac:	d10e      	bne.n	80031cc <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80031ae:	4b3c      	ldr	r3, [pc, #240]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80031b6:	2b08      	cmp	r3, #8
 80031b8:	d108      	bne.n	80031cc <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80031ba:	4b39      	ldr	r3, [pc, #228]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80031c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c6:	d101      	bne.n	80031cc <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e103      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d14e      	bne.n	8003272 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80031d4:	4b32      	ldr	r3, [pc, #200]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80031e0:	4b2f      	ldr	r3, [pc, #188]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0ef      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80031f4:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <HAL_RCC_OscConfig+0x4f0>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fa:	f7fd fd17 	bl	8000c2c <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003200:	e008      	b.n	8003214 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003202:	f7fd fd13 	bl	8000c2c <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b64      	cmp	r3, #100	; 0x64
 800320e:	d901      	bls.n	8003214 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e0df      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8003214:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f0      	bne.n	8003202 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8003220:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322c:	491c      	ldr	r1, [pc, #112]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 800322e:	4313      	orrs	r3, r2
 8003230:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8003232:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	4918      	ldr	r1, [pc, #96]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 8003240:	4313      	orrs	r3, r2
 8003242:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8003244:	4b18      	ldr	r3, [pc, #96]	; (80032a8 <HAL_RCC_OscConfig+0x4f0>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324a:	f7fd fcef 	bl	8000c2c <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003252:	f7fd fceb 	bl	8000c2c <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b64      	cmp	r3, #100	; 0x64
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e0b7      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8003264:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0x49a>
 8003270:	e022      	b.n	80032b8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8003272:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <HAL_RCC_OscConfig+0x4e8>)
 8003278:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <HAL_RCC_OscConfig+0x4f0>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003284:	f7fd fcd2 	bl	8000c2c <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800328a:	e00f      	b.n	80032ac <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800328c:	f7fd fcce 	bl	8000c2c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b64      	cmp	r3, #100	; 0x64
 8003298:	d908      	bls.n	80032ac <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e09a      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40007000 	.word	0x40007000
 80032a8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80032ac:	4b4b      	ldr	r3, [pc, #300]	; (80033dc <HAL_RCC_OscConfig+0x624>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1e9      	bne.n	800328c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 8088 	beq.w	80033d2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c2:	4b46      	ldr	r3, [pc, #280]	; (80033dc <HAL_RCC_OscConfig+0x624>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b08      	cmp	r3, #8
 80032cc:	d068      	beq.n	80033a0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d14d      	bne.n	8003372 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d6:	4b42      	ldr	r3, [pc, #264]	; (80033e0 <HAL_RCC_OscConfig+0x628>)
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032dc:	f7fd fca6 	bl	8000c2c <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e4:	f7fd fca2 	bl	8000c2c <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e06e      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f6:	4b39      	ldr	r3, [pc, #228]	; (80033dc <HAL_RCC_OscConfig+0x624>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330a:	d10f      	bne.n	800332c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800330c:	4b33      	ldr	r3, [pc, #204]	; (80033dc <HAL_RCC_OscConfig+0x624>)
 800330e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	4931      	ldr	r1, [pc, #196]	; (80033dc <HAL_RCC_OscConfig+0x624>)
 8003316:	4313      	orrs	r3, r2
 8003318:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800331a:	4b30      	ldr	r3, [pc, #192]	; (80033dc <HAL_RCC_OscConfig+0x624>)
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	f023 020f 	bic.w	r2, r3, #15
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	492d      	ldr	r1, [pc, #180]	; (80033dc <HAL_RCC_OscConfig+0x624>)
 8003328:	4313      	orrs	r3, r2
 800332a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800332c:	4b2b      	ldr	r3, [pc, #172]	; (80033dc <HAL_RCC_OscConfig+0x624>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	430b      	orrs	r3, r1
 800333e:	4927      	ldr	r1, [pc, #156]	; (80033dc <HAL_RCC_OscConfig+0x624>)
 8003340:	4313      	orrs	r3, r2
 8003342:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003344:	4b26      	ldr	r3, [pc, #152]	; (80033e0 <HAL_RCC_OscConfig+0x628>)
 8003346:	2201      	movs	r2, #1
 8003348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334a:	f7fd fc6f 	bl	8000c2c <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003352:	f7fd fc6b 	bl	8000c2c <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e037      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003364:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <HAL_RCC_OscConfig+0x624>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x59a>
 8003370:	e02f      	b.n	80033d2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003372:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <HAL_RCC_OscConfig+0x628>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003378:	f7fd fc58 	bl	8000c2c <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003380:	f7fd fc54 	bl	8000c2c <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e020      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003392:	4b12      	ldr	r3, [pc, #72]	; (80033dc <HAL_RCC_OscConfig+0x624>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x5c8>
 800339e:	e018      	b.n	80033d2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e013      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033ac:	4b0b      	ldr	r3, [pc, #44]	; (80033dc <HAL_RCC_OscConfig+0x624>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	429a      	cmp	r2, r3
 80033be:	d106      	bne.n	80033ce <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d001      	beq.n	80033d2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40021000 	.word	0x40021000
 80033e0:	42420060 	.word	0x42420060

080033e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0d0      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033f8:	4b6a      	ldr	r3, [pc, #424]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d910      	bls.n	8003428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	4b67      	ldr	r3, [pc, #412]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 0207 	bic.w	r2, r3, #7
 800340e:	4965      	ldr	r1, [pc, #404]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003416:	4b63      	ldr	r3, [pc, #396]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d001      	beq.n	8003428 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0b8      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003440:	4b59      	ldr	r3, [pc, #356]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4a58      	ldr	r2, [pc, #352]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003446:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800344a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003458:	4b53      	ldr	r3, [pc, #332]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a52      	ldr	r2, [pc, #328]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003462:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003464:	4b50      	ldr	r3, [pc, #320]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	494d      	ldr	r1, [pc, #308]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	4313      	orrs	r3, r2
 8003474:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d040      	beq.n	8003504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	4b47      	ldr	r3, [pc, #284]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d115      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e07f      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d107      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a2:	4b41      	ldr	r3, [pc, #260]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e073      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b2:	4b3d      	ldr	r3, [pc, #244]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e06b      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034c2:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f023 0203 	bic.w	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	4936      	ldr	r1, [pc, #216]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034d4:	f7fd fbaa 	bl	8000c2c <HAL_GetTick>
 80034d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	e00a      	b.n	80034f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034dc:	f7fd fba6 	bl	8000c2c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e053      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f2:	4b2d      	ldr	r3, [pc, #180]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 020c 	and.w	r2, r3, #12
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	429a      	cmp	r2, r3
 8003502:	d1eb      	bne.n	80034dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003504:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d210      	bcs.n	8003534 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003512:	4b24      	ldr	r3, [pc, #144]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 0207 	bic.w	r2, r3, #7
 800351a:	4922      	ldr	r1, [pc, #136]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e032      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003540:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4916      	ldr	r1, [pc, #88]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800355e:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	490e      	ldr	r1, [pc, #56]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	4313      	orrs	r3, r2
 8003570:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003572:	f000 f821 	bl	80035b8 <HAL_RCC_GetSysClockFreq>
 8003576:	4602      	mov	r2, r0
 8003578:	4b0b      	ldr	r3, [pc, #44]	; (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	490a      	ldr	r1, [pc, #40]	; (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 8003584:	5ccb      	ldrb	r3, [r1, r3]
 8003586:	fa22 f303 	lsr.w	r3, r2, r3
 800358a:	4a09      	ldr	r2, [pc, #36]	; (80035b0 <HAL_RCC_ClockConfig+0x1cc>)
 800358c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd fa34 	bl	8000a00 <HAL_InitTick>

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40022000 	.word	0x40022000
 80035a8:	40021000 	.word	0x40021000
 80035ac:	0800a570 	.word	0x0800a570
 80035b0:	20000000 	.word	0x20000000
 80035b4:	20000004 	.word	0x20000004

080035b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035bc:	b099      	sub	sp, #100	; 0x64
 80035be:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80035c0:	4b66      	ldr	r3, [pc, #408]	; (800375c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035c2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80035c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035c8:	c407      	stmia	r4!, {r0, r1, r2}
 80035ca:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80035cc:	4b64      	ldr	r3, [pc, #400]	; (8003760 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80035ce:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80035d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	657b      	str	r3, [r7, #84]	; 0x54
 80035dc:	2300      	movs	r3, #0
 80035de:	653b      	str	r3, [r7, #80]	; 0x50
 80035e0:	2300      	movs	r3, #0
 80035e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035e4:	2300      	movs	r3, #0
 80035e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t sysclockfreq = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80035f0:	2300      	movs	r3, #0
 80035f2:	647b      	str	r3, [r7, #68]	; 0x44
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035f4:	4b5b      	ldr	r3, [pc, #364]	; (8003764 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b04      	cmp	r3, #4
 8003602:	d002      	beq.n	800360a <HAL_RCC_GetSysClockFreq+0x52>
 8003604:	2b08      	cmp	r3, #8
 8003606:	d003      	beq.n	8003610 <HAL_RCC_GetSysClockFreq+0x58>
 8003608:	e09f      	b.n	800374a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800360a:	4b57      	ldr	r3, [pc, #348]	; (8003768 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800360c:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 800360e:	e09f      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003612:	0c9b      	lsrs	r3, r3, #18
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	3340      	adds	r3, #64	; 0x40
 800361a:	f107 0220 	add.w	r2, r7, #32
 800361e:	4413      	add	r3, r2
 8003620:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8003624:	64fb      	str	r3, [r7, #76]	; 0x4c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8084 	beq.w	800373a <HAL_RCC_GetSysClockFreq+0x182>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003632:	4b4c      	ldr	r3, [pc, #304]	; (8003764 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	3340      	adds	r3, #64	; 0x40
 800363c:	f107 0220 	add.w	r2, r7, #32
 8003640:	4413      	add	r3, r2
 8003642:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8003646:	653b      	str	r3, [r7, #80]	; 0x50
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003648:	4b46      	ldr	r3, [pc, #280]	; (8003764 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d060      	beq.n	8003716 <HAL_RCC_GetSysClockFreq+0x15e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003654:	4b43      	ldr	r3, [pc, #268]	; (8003764 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	091b      	lsrs	r3, r3, #4
 800365a:	f003 030f 	and.w	r3, r3, #15
 800365e:	3301      	adds	r3, #1
 8003660:	64bb      	str	r3, [r7, #72]	; 0x48
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003662:	4b40      	ldr	r3, [pc, #256]	; (8003764 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	3302      	adds	r3, #2
 800366e:	647b      	str	r3, [r7, #68]	; 0x44
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003672:	2200      	movs	r2, #0
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	617a      	str	r2, [r7, #20]
 8003678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800367a:	2200      	movs	r2, #0
 800367c:	61bb      	str	r3, [r7, #24]
 800367e:	61fa      	str	r2, [r7, #28]
 8003680:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003684:	4622      	mov	r2, r4
 8003686:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800368a:	4684      	mov	ip, r0
 800368c:	fb0c f202 	mul.w	r2, ip, r2
 8003690:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003694:	468c      	mov	ip, r1
 8003696:	4618      	mov	r0, r3
 8003698:	4621      	mov	r1, r4
 800369a:	4603      	mov	r3, r0
 800369c:	fb03 f30c 	mul.w	r3, r3, ip
 80036a0:	4413      	add	r3, r2
 80036a2:	4602      	mov	r2, r0
 80036a4:	69b9      	ldr	r1, [r7, #24]
 80036a6:	fba2 8901 	umull	r8, r9, r2, r1
 80036aa:	444b      	add	r3, r9
 80036ac:	4699      	mov	r9, r3
 80036ae:	4b2e      	ldr	r3, [pc, #184]	; (8003768 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80036b0:	fb03 f209 	mul.w	r2, r3, r9
 80036b4:	2300      	movs	r3, #0
 80036b6:	fb03 f308 	mul.w	r3, r3, r8
 80036ba:	4413      	add	r3, r2
 80036bc:	4a2a      	ldr	r2, [pc, #168]	; (8003768 <HAL_RCC_GetSysClockFreq+0x1b0>)
 80036be:	fba8 ab02 	umull	sl, fp, r8, r2
 80036c2:	445b      	add	r3, fp
 80036c4:	469b      	mov	fp, r3
 80036c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c8:	2200      	movs	r2, #0
 80036ca:	60bb      	str	r3, [r7, #8]
 80036cc:	60fa      	str	r2, [r7, #12]
 80036ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036d0:	2200      	movs	r2, #0
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	607a      	str	r2, [r7, #4]
 80036d6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80036da:	4622      	mov	r2, r4
 80036dc:	e9d7 8900 	ldrd	r8, r9, [r7]
 80036e0:	4641      	mov	r1, r8
 80036e2:	fb01 f202 	mul.w	r2, r1, r2
 80036e6:	46cc      	mov	ip, r9
 80036e8:	4618      	mov	r0, r3
 80036ea:	4621      	mov	r1, r4
 80036ec:	4603      	mov	r3, r0
 80036ee:	fb03 f30c 	mul.w	r3, r3, ip
 80036f2:	4413      	add	r3, r2
 80036f4:	4602      	mov	r2, r0
 80036f6:	4641      	mov	r1, r8
 80036f8:	fba2 5601 	umull	r5, r6, r2, r1
 80036fc:	4433      	add	r3, r6
 80036fe:	461e      	mov	r6, r3
 8003700:	462a      	mov	r2, r5
 8003702:	4633      	mov	r3, r6
 8003704:	4650      	mov	r0, sl
 8003706:	4659      	mov	r1, fp
 8003708:	f7fc fd92 	bl	8000230 <__aeabi_uldivmod>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4613      	mov	r3, r2
 8003712:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003714:	e007      	b.n	8003726 <HAL_RCC_GetSysClockFreq+0x16e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8003716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003718:	4a13      	ldr	r2, [pc, #76]	; (8003768 <HAL_RCC_GetSysClockFreq+0x1b0>)
 800371a:	fb03 f202 	mul.w	r2, r3, r2
 800371e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003720:	fbb2 f3f3 	udiv	r3, r2, r3
 8003724:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8003726:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800372a:	461a      	mov	r2, r3
 800372c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800372e:	4293      	cmp	r3, r2
 8003730:	d108      	bne.n	8003744 <HAL_RCC_GetSysClockFreq+0x18c>
        {
          pllclk = pllclk / 2;
 8003732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003734:	085b      	lsrs	r3, r3, #1
 8003736:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003738:	e004      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x18c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800373a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800373c:	4a0b      	ldr	r2, [pc, #44]	; (800376c <HAL_RCC_GetSysClockFreq+0x1b4>)
 800373e:	fb02 f303 	mul.w	r3, r2, r3
 8003742:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      sysclockfreq = pllclk;
 8003744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003746:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8003748:	e002      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800374c:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 800374e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003750:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8003752:	4618      	mov	r0, r3
 8003754:	3764      	adds	r7, #100	; 0x64
 8003756:	46bd      	mov	sp, r7
 8003758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800375c:	0800a50c 	.word	0x0800a50c
 8003760:	0800a51c 	.word	0x0800a51c
 8003764:	40021000 	.word	0x40021000
 8003768:	00989680 	.word	0x00989680
 800376c:	003d0900 	.word	0x003d0900
 8003770:	007a1200 	.word	0x007a1200

08003774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003778:	4b02      	ldr	r3, [pc, #8]	; (8003784 <HAL_RCC_GetHCLKFreq+0x10>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr
 8003784:	20000000 	.word	0x20000000

08003788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800378c:	f7ff fff2 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 8003790:	4602      	mov	r2, r0
 8003792:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	4903      	ldr	r1, [pc, #12]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800379e:	5ccb      	ldrb	r3, [r1, r3]
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000
 80037ac:	0800a580 	.word	0x0800a580

080037b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037b4:	f7ff ffde 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	0adb      	lsrs	r3, r3, #11
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	4903      	ldr	r1, [pc, #12]	; (80037d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037c6:	5ccb      	ldrb	r3, [r1, r3]
 80037c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40021000 	.word	0x40021000
 80037d4:	0800a580 	.word	0x0800a580

080037d8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	220f      	movs	r2, #15
 80037e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037e8:	4b11      	ldr	r3, [pc, #68]	; (8003830 <HAL_RCC_GetClockConfig+0x58>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f003 0203 	and.w	r2, r3, #3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037f4:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <HAL_RCC_GetClockConfig+0x58>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <HAL_RCC_GetClockConfig+0x58>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800380c:	4b08      	ldr	r3, [pc, #32]	; (8003830 <HAL_RCC_GetClockConfig+0x58>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	08db      	lsrs	r3, r3, #3
 8003812:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <HAL_RCC_GetClockConfig+0x5c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0207 	and.w	r2, r3, #7
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr
 8003830:	40021000 	.word	0x40021000
 8003834:	40022000 	.word	0x40022000

08003838 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003840:	4b0a      	ldr	r3, [pc, #40]	; (800386c <RCC_Delay+0x34>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <RCC_Delay+0x38>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	0a5b      	lsrs	r3, r3, #9
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	fb02 f303 	mul.w	r3, r2, r3
 8003852:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003854:	bf00      	nop
  }
  while (Delay --);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	1e5a      	subs	r2, r3, #1
 800385a:	60fa      	str	r2, [r7, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f9      	bne.n	8003854 <RCC_Delay+0x1c>
}
 8003860:	bf00      	nop
 8003862:	bf00      	nop
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	20000000 	.word	0x20000000
 8003870:	10624dd3 	.word	0x10624dd3

08003874 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	2300      	movs	r3, #0
 8003882:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d07d      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    FlagStatus pwrclkchanged = RESET;
 8003894:	2300      	movs	r3, #0
 8003896:	76fb      	strb	r3, [r7, #27]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003898:	4b8b      	ldr	r3, [pc, #556]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10d      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a4:	4b88      	ldr	r3, [pc, #544]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	4a87      	ldr	r2, [pc, #540]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038ae:	61d3      	str	r3, [r2, #28]
 80038b0:	4b85      	ldr	r3, [pc, #532]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b8:	60fb      	str	r3, [r7, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038bc:	2301      	movs	r3, #1
 80038be:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c0:	4b82      	ldr	r3, [pc, #520]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d118      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038cc:	4b7f      	ldr	r3, [pc, #508]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a7e      	ldr	r2, [pc, #504]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038d8:	f7fd f9a8 	bl	8000c2c <HAL_GetTick>
 80038dc:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038de:	e008      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e0:	f7fd f9a4 	bl	8000c2c <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b64      	cmp	r3, #100	; 0x64
 80038ec:	d901      	bls.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e0e5      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f2:	4b76      	ldr	r3, [pc, #472]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0f0      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038fe:	4b72      	ldr	r3, [pc, #456]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003906:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d02e      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	429a      	cmp	r2, r3
 800391a:	d027      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800391c:	4b6a      	ldr	r3, [pc, #424]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003924:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003926:	4b6a      	ldr	r3, [pc, #424]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003928:	2201      	movs	r2, #1
 800392a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800392c:	4b68      	ldr	r3, [pc, #416]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003932:	4a65      	ldr	r2, [pc, #404]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d014      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003942:	f7fd f973 	bl	8000c2c <HAL_GetTick>
 8003946:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003948:	e00a      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394a:	f7fd f96f 	bl	8000c2c <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f241 3288 	movw	r2, #5000	; 0x1388
 8003958:	4293      	cmp	r3, r2
 800395a:	d901      	bls.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e0ae      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003960:	4b59      	ldr	r3, [pc, #356]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0ee      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800396c:	4b56      	ldr	r3, [pc, #344]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800396e:	6a1b      	ldr	r3, [r3, #32]
 8003970:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	4953      	ldr	r1, [pc, #332]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800397a:	4313      	orrs	r3, r2
 800397c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800397e:	7efb      	ldrb	r3, [r7, #27]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d105      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003984:	4b50      	ldr	r3, [pc, #320]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	4a4f      	ldr	r2, [pc, #316]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800398a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800399c:	4b4a      	ldr	r3, [pc, #296]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	4947      	ldr	r1, [pc, #284]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d008      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80039ba:	4b43      	ldr	r3, [pc, #268]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	4940      	ldr	r1, [pc, #256]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80039d8:	4b3b      	ldr	r3, [pc, #236]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	4938      	ldr	r1, [pc, #224]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 80039ea:	4b37      	ldr	r3, [pc, #220]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d105      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x18e>
 80039f6:	4b34      	ldr	r3, [pc, #208]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8003a02:	2301      	movs	r3, #1
 8003a04:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d148      	bne.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8003a0c:	4b2e      	ldr	r3, [pc, #184]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d138      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003a18:	4b2b      	ldr	r3, [pc, #172]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8003a24:	4b28      	ldr	r3, [pc, #160]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e042      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8003a38:	4b23      	ldr	r3, [pc, #140]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	4920      	ldr	r1, [pc, #128]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8003a4a:	4b1f      	ldr	r3, [pc, #124]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4e:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	491c      	ldr	r1, [pc, #112]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8003a5c:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a62:	f7fd f8e3 	bl	8000c2c <HAL_GetTick>
 8003a66:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a6a:	f7fd f8df 	bl	8000c2c <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b64      	cmp	r3, #100	; 0x64
 8003a76:	d901      	bls.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e020      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a7c:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003a88:	e009      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8003a8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d001      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e00f      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0310 	and.w	r3, r3, #16
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d008      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	4904      	ldr	r1, [pc, #16]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	40007000 	.word	0x40007000
 8003ad0:	42420440 	.word	0x42420440
 8003ad4:	42420070 	.word	0x42420070

08003ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e041      	b.n	8003b6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 f839 	bl	8003b76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3304      	adds	r3, #4
 8003b14:	4619      	mov	r1, r3
 8003b16:	4610      	mov	r0, r2
 8003b18:	f000 f9bc 	bl	8003e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}

08003b76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b083      	sub	sp, #12
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr

08003b88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d001      	beq.n	8003ba0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e03f      	b.n	8003c20 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a1b      	ldr	r2, [pc, #108]	; (8003c2c <HAL_TIM_Base_Start_IT+0xa4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d013      	beq.n	8003bea <HAL_TIM_Base_Start_IT+0x62>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bca:	d00e      	beq.n	8003bea <HAL_TIM_Base_Start_IT+0x62>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a17      	ldr	r2, [pc, #92]	; (8003c30 <HAL_TIM_Base_Start_IT+0xa8>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d009      	beq.n	8003bea <HAL_TIM_Base_Start_IT+0x62>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a16      	ldr	r2, [pc, #88]	; (8003c34 <HAL_TIM_Base_Start_IT+0xac>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d004      	beq.n	8003bea <HAL_TIM_Base_Start_IT+0x62>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a14      	ldr	r2, [pc, #80]	; (8003c38 <HAL_TIM_Base_Start_IT+0xb0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d111      	bne.n	8003c0e <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b06      	cmp	r3, #6
 8003bfa:	d010      	beq.n	8003c1e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0c:	e007      	b.n	8003c1e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0201 	orr.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40012c00 	.word	0x40012c00
 8003c30:	40000400 	.word	0x40000400
 8003c34:	40000800 	.word	0x40000800
 8003c38:	40000c00 	.word	0x40000c00

08003c3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d122      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d11b      	bne.n	8003c98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f06f 0202 	mvn.w	r2, #2
 8003c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f8ed 	bl	8003e5e <HAL_TIM_IC_CaptureCallback>
 8003c84:	e005      	b.n	8003c92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 f8e0 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f8ef 	bl	8003e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d122      	bne.n	8003cec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d11b      	bne.n	8003cec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0204 	mvn.w	r2, #4
 8003cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2202      	movs	r2, #2
 8003cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f8c3 	bl	8003e5e <HAL_TIM_IC_CaptureCallback>
 8003cd8:	e005      	b.n	8003ce6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f8b6 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f8c5 	bl	8003e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d122      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d11b      	bne.n	8003d40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0208 	mvn.w	r2, #8
 8003d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2204      	movs	r2, #4
 8003d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f899 	bl	8003e5e <HAL_TIM_IC_CaptureCallback>
 8003d2c:	e005      	b.n	8003d3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f88c 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f89b 	bl	8003e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b10      	cmp	r3, #16
 8003d4c:	d122      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b10      	cmp	r3, #16
 8003d5a:	d11b      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f06f 0210 	mvn.w	r2, #16
 8003d64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2208      	movs	r2, #8
 8003d6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f86f 	bl	8003e5e <HAL_TIM_IC_CaptureCallback>
 8003d80:	e005      	b.n	8003d8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f862 	bl	8003e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f871 	bl	8003e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d10e      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d107      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0201 	mvn.w	r2, #1
 8003db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fc fd7c 	bl	80008b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dca:	2b80      	cmp	r3, #128	; 0x80
 8003dcc:	d10e      	bne.n	8003dec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd8:	2b80      	cmp	r3, #128	; 0x80
 8003dda:	d107      	bne.n	8003dec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f8c9 	bl	8003f7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df6:	2b40      	cmp	r3, #64	; 0x40
 8003df8:	d10e      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b40      	cmp	r3, #64	; 0x40
 8003e06:	d107      	bne.n	8003e18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f835 	bl	8003e82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b20      	cmp	r3, #32
 8003e24:	d10e      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	f003 0320 	and.w	r3, r3, #32
 8003e30:	2b20      	cmp	r3, #32
 8003e32:	d107      	bne.n	8003e44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f06f 0220 	mvn.w	r2, #32
 8003e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f894 	bl	8003f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e44:	bf00      	nop
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr

08003e70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bc80      	pop	{r7}
 8003e80:	4770      	bx	lr

08003e82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b083      	sub	sp, #12
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bc80      	pop	{r7}
 8003e92:	4770      	bx	lr

08003e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a2d      	ldr	r2, [pc, #180]	; (8003f5c <TIM_Base_SetConfig+0xc8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00f      	beq.n	8003ecc <TIM_Base_SetConfig+0x38>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb2:	d00b      	beq.n	8003ecc <TIM_Base_SetConfig+0x38>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a2a      	ldr	r2, [pc, #168]	; (8003f60 <TIM_Base_SetConfig+0xcc>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d007      	beq.n	8003ecc <TIM_Base_SetConfig+0x38>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a29      	ldr	r2, [pc, #164]	; (8003f64 <TIM_Base_SetConfig+0xd0>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d003      	beq.n	8003ecc <TIM_Base_SetConfig+0x38>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a28      	ldr	r2, [pc, #160]	; (8003f68 <TIM_Base_SetConfig+0xd4>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d108      	bne.n	8003ede <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a1e      	ldr	r2, [pc, #120]	; (8003f5c <TIM_Base_SetConfig+0xc8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00f      	beq.n	8003f06 <TIM_Base_SetConfig+0x72>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eec:	d00b      	beq.n	8003f06 <TIM_Base_SetConfig+0x72>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a1b      	ldr	r2, [pc, #108]	; (8003f60 <TIM_Base_SetConfig+0xcc>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d007      	beq.n	8003f06 <TIM_Base_SetConfig+0x72>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a1a      	ldr	r2, [pc, #104]	; (8003f64 <TIM_Base_SetConfig+0xd0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d003      	beq.n	8003f06 <TIM_Base_SetConfig+0x72>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a19      	ldr	r2, [pc, #100]	; (8003f68 <TIM_Base_SetConfig+0xd4>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d108      	bne.n	8003f18 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a07      	ldr	r2, [pc, #28]	; (8003f5c <TIM_Base_SetConfig+0xc8>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d103      	bne.n	8003f4c <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	691a      	ldr	r2, [r3, #16]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	615a      	str	r2, [r3, #20]
}
 8003f52:	bf00      	nop
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bc80      	pop	{r7}
 8003f5a:	4770      	bx	lr
 8003f5c:	40012c00 	.word	0x40012c00
 8003f60:	40000400 	.word	0x40000400
 8003f64:	40000800 	.word	0x40000800
 8003f68:	40000c00 	.word	0x40000c00

08003f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr

08003f7e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bc80      	pop	{r7}
 8003f8e:	4770      	bx	lr

08003f90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e03f      	b.n	8004022 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fc fcce 	bl	8000958 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2224      	movs	r2, #36	; 0x24
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fc85 	bl	80048e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fe8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	695a      	ldr	r2, [r3, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ff8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68da      	ldr	r2, [r3, #12]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004008:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b08a      	sub	sp, #40	; 0x28
 800402e:	af02      	add	r7, sp, #8
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	603b      	str	r3, [r7, #0]
 8004036:	4613      	mov	r3, r2
 8004038:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800403a:	2300      	movs	r3, #0
 800403c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004044:	b2db      	uxtb	r3, r3
 8004046:	2b20      	cmp	r3, #32
 8004048:	d17c      	bne.n	8004144 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d002      	beq.n	8004056 <HAL_UART_Transmit+0x2c>
 8004050:	88fb      	ldrh	r3, [r7, #6]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e075      	b.n	8004146 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_UART_Transmit+0x3e>
 8004064:	2302      	movs	r3, #2
 8004066:	e06e      	b.n	8004146 <HAL_UART_Transmit+0x11c>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2221      	movs	r2, #33	; 0x21
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800407e:	f7fc fdd5 	bl	8000c2c <HAL_GetTick>
 8004082:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	88fa      	ldrh	r2, [r7, #6]
 8004088:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	88fa      	ldrh	r2, [r7, #6]
 800408e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004098:	d108      	bne.n	80040ac <HAL_UART_Transmit+0x82>
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d104      	bne.n	80040ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	e003      	b.n	80040b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80040bc:	e02a      	b.n	8004114 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	9300      	str	r3, [sp, #0]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2200      	movs	r2, #0
 80040c6:	2180      	movs	r1, #128	; 0x80
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 fa38 	bl	800453e <UART_WaitOnFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e036      	b.n	8004146 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10b      	bne.n	80040f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	3302      	adds	r3, #2
 80040f2:	61bb      	str	r3, [r7, #24]
 80040f4:	e007      	b.n	8004106 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	781a      	ldrb	r2, [r3, #0]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	3301      	adds	r3, #1
 8004104:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004118:	b29b      	uxth	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1cf      	bne.n	80040be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2200      	movs	r2, #0
 8004126:	2140      	movs	r1, #64	; 0x40
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 fa08 	bl	800453e <UART_WaitOnFlagUntilTimeout>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e006      	b.n	8004146 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2220      	movs	r2, #32
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	e000      	b.n	8004146 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004144:	2302      	movs	r3, #2
  }
}
 8004146:	4618      	mov	r0, r3
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	60b9      	str	r1, [r7, #8]
 8004158:	4613      	mov	r3, r2
 800415a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b20      	cmp	r3, #32
 8004166:	d11d      	bne.n	80041a4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <HAL_UART_Receive_IT+0x26>
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e016      	b.n	80041a6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_UART_Receive_IT+0x38>
 8004182:	2302      	movs	r3, #2
 8004184:	e00f      	b.n	80041a6 <HAL_UART_Receive_IT+0x58>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004194:	88fb      	ldrh	r3, [r7, #6]
 8004196:	461a      	mov	r2, r3
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 fa19 	bl	80045d2 <UART_Start_Receive_IT>
 80041a0:	4603      	mov	r3, r0
 80041a2:	e000      	b.n	80041a6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80041a4:	2302      	movs	r3, #2
  }
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08a      	sub	sp, #40	; 0x28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80041d4:	2300      	movs	r3, #0
 80041d6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	f003 030f 	and.w	r3, r3, #15
 80041de:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10d      	bne.n	8004202 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	f003 0320 	and.w	r3, r3, #32
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_UART_IRQHandler+0x52>
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fac9 	bl	8004792 <UART_Receive_IT>
      return;
 8004200:	e17b      	b.n	80044fa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 80b1 	beq.w	800436c <HAL_UART_IRQHandler+0x1bc>
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d105      	bne.n	8004220 <HAL_UART_IRQHandler+0x70>
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800421a:	2b00      	cmp	r3, #0
 800421c:	f000 80a6 	beq.w	800436c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <HAL_UART_IRQHandler+0x90>
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004230:	2b00      	cmp	r3, #0
 8004232:	d005      	beq.n	8004240 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004238:	f043 0201 	orr.w	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <HAL_UART_IRQHandler+0xb0>
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	f003 0301 	and.w	r3, r3, #1
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004258:	f043 0202 	orr.w	r2, r3, #2
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	f003 0302 	and.w	r3, r3, #2
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_UART_IRQHandler+0xd0>
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b00      	cmp	r3, #0
 8004272:	d005      	beq.n	8004280 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	f043 0204 	orr.w	r2, r3, #4
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00f      	beq.n	80042aa <HAL_UART_IRQHandler+0xfa>
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d104      	bne.n	800429e <HAL_UART_IRQHandler+0xee>
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a2:	f043 0208 	orr.w	r2, r3, #8
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 811e 	beq.w	80044f0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d007      	beq.n	80042ce <HAL_UART_IRQHandler+0x11e>
 80042be:	6a3b      	ldr	r3, [r7, #32]
 80042c0:	f003 0320 	and.w	r3, r3, #32
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fa62 	bl	8004792 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	bf14      	ite	ne
 80042dc:	2301      	movne	r3, #1
 80042de:	2300      	moveq	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d102      	bne.n	80042f6 <HAL_UART_IRQHandler+0x146>
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d031      	beq.n	800435a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f9a4 	bl	8004644 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004306:	2b00      	cmp	r3, #0
 8004308:	d023      	beq.n	8004352 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695a      	ldr	r2, [r3, #20]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004318:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	2b00      	cmp	r3, #0
 8004320:	d013      	beq.n	800434a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004326:	4a76      	ldr	r2, [pc, #472]	; (8004500 <HAL_UART_IRQHandler+0x350>)
 8004328:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	4618      	mov	r0, r3
 8004330:	f7fc fdc4 	bl	8000ebc <HAL_DMA_Abort_IT>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d016      	beq.n	8004368 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004344:	4610      	mov	r0, r2
 8004346:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004348:	e00e      	b.n	8004368 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f8e3 	bl	8004516 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004350:	e00a      	b.n	8004368 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 f8df 	bl	8004516 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004358:	e006      	b.n	8004368 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f8db 	bl	8004516 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004366:	e0c3      	b.n	80044f0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004368:	bf00      	nop
    return;
 800436a:	e0c1      	b.n	80044f0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	2b01      	cmp	r3, #1
 8004372:	f040 80a1 	bne.w	80044b8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 809b 	beq.w	80044b8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8095 	beq.w	80044b8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800438e:	2300      	movs	r3, #0
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d04e      	beq.n	8004450 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80043bc:	8a3b      	ldrh	r3, [r7, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 8098 	beq.w	80044f4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043c8:	8a3a      	ldrh	r2, [r7, #16]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	f080 8092 	bcs.w	80044f4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8a3a      	ldrh	r2, [r7, #16]
 80043d4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d02b      	beq.n	8004438 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043ee:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695a      	ldr	r2, [r3, #20]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 0201 	bic.w	r2, r2, #1
 80043fe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800440e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0210 	bic.w	r2, r2, #16
 800442c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	4618      	mov	r0, r3
 8004434:	f7fc fd07 	bl	8000e46 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004440:	b29b      	uxth	r3, r3
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	b29b      	uxth	r3, r3
 8004446:	4619      	mov	r1, r3
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f86d 	bl	8004528 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800444e:	e051      	b.n	80044f4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004458:	b29b      	uxth	r3, r3
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004462:	b29b      	uxth	r3, r3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d047      	beq.n	80044f8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004468:	8a7b      	ldrh	r3, [r7, #18]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d044      	beq.n	80044f8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800447c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695a      	ldr	r2, [r3, #20]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0201 	bic.w	r2, r2, #1
 800448c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0210 	bic.w	r2, r2, #16
 80044aa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044ac:	8a7b      	ldrh	r3, [r7, #18]
 80044ae:	4619      	mov	r1, r3
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 f839 	bl	8004528 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80044b6:	e01f      	b.n	80044f8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d008      	beq.n	80044d4 <HAL_UART_IRQHandler+0x324>
 80044c2:	6a3b      	ldr	r3, [r7, #32]
 80044c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 f8f9 	bl	80046c4 <UART_Transmit_IT>
    return;
 80044d2:	e012      	b.n	80044fa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00d      	beq.n	80044fa <HAL_UART_IRQHandler+0x34a>
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d008      	beq.n	80044fa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f93a 	bl	8004762 <UART_EndTransmit_IT>
    return;
 80044ee:	e004      	b.n	80044fa <HAL_UART_IRQHandler+0x34a>
    return;
 80044f0:	bf00      	nop
 80044f2:	e002      	b.n	80044fa <HAL_UART_IRQHandler+0x34a>
      return;
 80044f4:	bf00      	nop
 80044f6:	e000      	b.n	80044fa <HAL_UART_IRQHandler+0x34a>
      return;
 80044f8:	bf00      	nop
  }
}
 80044fa:	3728      	adds	r7, #40	; 0x28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	0800469d 	.word	0x0800469d

08004504 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr

08004516 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	460b      	mov	r3, r1
 8004532:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	bc80      	pop	{r7}
 800453c:	4770      	bx	lr

0800453e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	4613      	mov	r3, r2
 800454c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800454e:	e02c      	b.n	80045aa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004556:	d028      	beq.n	80045aa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d007      	beq.n	800456e <UART_WaitOnFlagUntilTimeout+0x30>
 800455e:	f7fc fb65 	bl	8000c2c <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	429a      	cmp	r2, r3
 800456c:	d21d      	bcs.n	80045aa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800457c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695a      	ldr	r2, [r3, #20]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0201 	bic.w	r2, r2, #1
 800458c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2220      	movs	r2, #32
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e00f      	b.n	80045ca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	4013      	ands	r3, r2
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	bf0c      	ite	eq
 80045ba:	2301      	moveq	r3, #1
 80045bc:	2300      	movne	r3, #0
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	461a      	mov	r2, r3
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d0c3      	beq.n	8004550 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b085      	sub	sp, #20
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	4613      	mov	r3, r2
 80045de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	88fa      	ldrh	r2, [r7, #6]
 80045ea:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	88fa      	ldrh	r2, [r7, #6]
 80045f0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2222      	movs	r2, #34	; 0x22
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004616:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695a      	ldr	r2, [r3, #20]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0220 	orr.w	r2, r2, #32
 8004636:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr

08004644 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800465a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695a      	ldr	r2, [r3, #20]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 0201 	bic.w	r2, r2, #1
 800466a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	2b01      	cmp	r3, #1
 8004672:	d107      	bne.n	8004684 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0210 	bic.w	r2, r2, #16
 8004682:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004692:	bf00      	nop
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr

0800469c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f7ff ff2d 	bl	8004516 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046bc:	bf00      	nop
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b21      	cmp	r3, #33	; 0x21
 80046d6:	d13e      	bne.n	8004756 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e0:	d114      	bne.n	800470c <UART_Transmit_IT+0x48>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d110      	bne.n	800470c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	1c9a      	adds	r2, r3, #2
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	621a      	str	r2, [r3, #32]
 800470a:	e008      	b.n	800471e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	1c59      	adds	r1, r3, #1
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	6211      	str	r1, [r2, #32]
 8004716:	781a      	ldrb	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29b      	uxth	r3, r3
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	4619      	mov	r1, r3
 800472c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10f      	bne.n	8004752 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68da      	ldr	r2, [r3, #12]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004740:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004750:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	e000      	b.n	8004758 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004756:	2302      	movs	r3, #2
  }
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr

08004762 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68da      	ldr	r2, [r3, #12]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004778:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2220      	movs	r2, #32
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff febe 	bl	8004504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b086      	sub	sp, #24
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b22      	cmp	r3, #34	; 0x22
 80047a4:	f040 8099 	bne.w	80048da <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b0:	d117      	bne.n	80047e2 <UART_Receive_IT+0x50>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d113      	bne.n	80047e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047da:	1c9a      	adds	r2, r3, #2
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	629a      	str	r2, [r3, #40]	; 0x28
 80047e0:	e026      	b.n	8004830 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80047e8:	2300      	movs	r3, #0
 80047ea:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047f4:	d007      	beq.n	8004806 <UART_Receive_IT+0x74>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <UART_Receive_IT+0x82>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d106      	bne.n	8004814 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	b2da      	uxtb	r2, r3
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	e008      	b.n	8004826 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	b2db      	uxtb	r3, r3
 800481c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004820:	b2da      	uxtb	r2, r3
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	1c5a      	adds	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004834:	b29b      	uxth	r3, r3
 8004836:	3b01      	subs	r3, #1
 8004838:	b29b      	uxth	r3, r3
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	4619      	mov	r1, r3
 800483e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004840:	2b00      	cmp	r3, #0
 8004842:	d148      	bne.n	80048d6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0220 	bic.w	r2, r2, #32
 8004852:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004862:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	695a      	ldr	r2, [r3, #20]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0201 	bic.w	r2, r2, #1
 8004872:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	2b01      	cmp	r3, #1
 8004882:	d123      	bne.n	80048cc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68da      	ldr	r2, [r3, #12]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 0210 	bic.w	r2, r2, #16
 8004898:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0310 	and.w	r3, r3, #16
 80048a4:	2b10      	cmp	r3, #16
 80048a6:	d10a      	bne.n	80048be <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048c2:	4619      	mov	r1, r3
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff fe2f 	bl	8004528 <HAL_UARTEx_RxEventCallback>
 80048ca:	e002      	b.n	80048d2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7fb ff8b 	bl	80007e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	e002      	b.n	80048dc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80048d6:	2300      	movs	r3, #0
 80048d8:	e000      	b.n	80048dc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80048da:	2302      	movs	r3, #2
  }
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	430a      	orrs	r2, r1
 8004900:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689a      	ldr	r2, [r3, #8]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800491e:	f023 030c 	bic.w	r3, r3, #12
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6812      	ldr	r2, [r2, #0]
 8004926:	68b9      	ldr	r1, [r7, #8]
 8004928:	430b      	orrs	r3, r1
 800492a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a2c      	ldr	r2, [pc, #176]	; (80049f8 <UART_SetConfig+0x114>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d103      	bne.n	8004954 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800494c:	f7fe ff30 	bl	80037b0 <HAL_RCC_GetPCLK2Freq>
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	e002      	b.n	800495a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004954:	f7fe ff18 	bl	8003788 <HAL_RCC_GetPCLK1Freq>
 8004958:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4613      	mov	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	009a      	lsls	r2, r3, #2
 8004964:	441a      	add	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	4a22      	ldr	r2, [pc, #136]	; (80049fc <UART_SetConfig+0x118>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	0119      	lsls	r1, r3, #4
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	009a      	lsls	r2, r3, #2
 8004984:	441a      	add	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004990:	4b1a      	ldr	r3, [pc, #104]	; (80049fc <UART_SetConfig+0x118>)
 8004992:	fba3 0302 	umull	r0, r3, r3, r2
 8004996:	095b      	lsrs	r3, r3, #5
 8004998:	2064      	movs	r0, #100	; 0x64
 800499a:	fb00 f303 	mul.w	r3, r0, r3
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	3332      	adds	r3, #50	; 0x32
 80049a4:	4a15      	ldr	r2, [pc, #84]	; (80049fc <UART_SetConfig+0x118>)
 80049a6:	fba2 2303 	umull	r2, r3, r2, r3
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049b0:	4419      	add	r1, r3
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4613      	mov	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	009a      	lsls	r2, r3, #2
 80049bc:	441a      	add	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <UART_SetConfig+0x118>)
 80049ca:	fba3 0302 	umull	r0, r3, r3, r2
 80049ce:	095b      	lsrs	r3, r3, #5
 80049d0:	2064      	movs	r0, #100	; 0x64
 80049d2:	fb00 f303 	mul.w	r3, r0, r3
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	011b      	lsls	r3, r3, #4
 80049da:	3332      	adds	r3, #50	; 0x32
 80049dc:	4a07      	ldr	r2, [pc, #28]	; (80049fc <UART_SetConfig+0x118>)
 80049de:	fba2 2303 	umull	r2, r3, r2, r3
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	f003 020f 	and.w	r2, r3, #15
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	440a      	add	r2, r1
 80049ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049f0:	bf00      	nop
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40013800 	.word	0x40013800
 80049fc:	51eb851f 	.word	0x51eb851f

08004a00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a00:	b084      	sub	sp, #16
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	f107 001c 	add.w	r0, r7, #28
 8004a0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;


  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f970 	bl	8004d04 <USB_CoreReset>
 8004a24:	4603      	mov	r3, r0
 8004a26:	73fb      	strb	r3, [r7, #15]

  /* Activate the USB Transceiver */
  USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38

  return ret;
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a40:	b004      	add	sp, #16
 8004a42:	4770      	bx	lr

08004a44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f043 0201 	orr.w	r2, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f023 0201 	bic.w	r2, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr

08004a84 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d115      	bne.n	8004ad2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ab2:	2001      	movs	r0, #1
 8004ab4:	f7fc f8c4 	bl	8000c40 <HAL_Delay>
      ms++;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3301      	adds	r3, #1
 8004abc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f912 	bl	8004ce8 <USB_GetMode>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d01e      	beq.n	8004b08 <USB_SetCurrentMode+0x84>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b31      	cmp	r3, #49	; 0x31
 8004ace:	d9f0      	bls.n	8004ab2 <USB_SetCurrentMode+0x2e>
 8004ad0:	e01a      	b.n	8004b08 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ad2:	78fb      	ldrb	r3, [r7, #3]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d115      	bne.n	8004b04 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	f7fc f8ab 	bl	8000c40 <HAL_Delay>
      ms++;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	3301      	adds	r3, #1
 8004aee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f8f9 	bl	8004ce8 <USB_GetMode>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d005      	beq.n	8004b08 <USB_SetCurrentMode+0x84>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b31      	cmp	r3, #49	; 0x31
 8004b00:	d9f0      	bls.n	8004ae4 <USB_SetCurrentMode+0x60>
 8004b02:	e001      	b.n	8004b08 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e005      	b.n	8004b14 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b32      	cmp	r3, #50	; 0x32
 8004b0c:	d101      	bne.n	8004b12 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004b26:	2300      	movs	r3, #0
 8004b28:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	019b      	lsls	r3, r3, #6
 8004b2e:	f043 0220 	orr.w	r2, r3, #32
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a08      	ldr	r2, [pc, #32]	; (8004b60 <USB_FlushTxFifo+0x44>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d901      	bls.n	8004b48 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e006      	b.n	8004b56 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	f003 0320 	and.w	r3, r3, #32
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d0f0      	beq.n	8004b36 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bc80      	pop	{r7}
 8004b5e:	4770      	bx	lr
 8004b60:	00030d40 	.word	0x00030d40

08004b64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2210      	movs	r2, #16
 8004b74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	60fb      	str	r3, [r7, #12]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <USB_FlushRxFifo+0x3c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d901      	bls.n	8004b88 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e006      	b.n	8004b96 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f003 0310 	and.w	r3, r3, #16
 8004b90:	2b10      	cmp	r3, #16
 8004b92:	d0f0      	beq.n	8004b76 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bc80      	pop	{r7}
 8004b9e:	4770      	bx	lr
 8004ba0:	00030d40 	.word	0x00030d40

08004ba4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b089      	sub	sp, #36	; 0x24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	4611      	mov	r1, r2
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	71fb      	strb	r3, [r7, #7]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004bc2:	88bb      	ldrh	r3, [r7, #4]
 8004bc4:	3303      	adds	r3, #3
 8004bc6:	089b      	lsrs	r3, r3, #2
 8004bc8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	e018      	b.n	8004c02 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004bd0:	79fb      	ldrb	r3, [r7, #7]
 8004bd2:	031a      	lsls	r2, r3, #12
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bdc:	461a      	mov	r2, r3
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	3301      	adds	r3, #1
 8004be8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	3301      	adds	r3, #1
 8004bee:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	61bb      	str	r3, [r7, #24]
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d3e2      	bcc.n	8004bd0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3724      	adds	r7, #36	; 0x24
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bc80      	pop	{r7}
 8004c14:	4770      	bx	lr

08004c16 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c16:	b480      	push	{r7}
 8004c18:	b08b      	sub	sp, #44	; 0x2c
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	4613      	mov	r3, r2
 8004c22:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c2c:	88fb      	ldrh	r3, [r7, #6]
 8004c2e:	089b      	lsrs	r3, r3, #2
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	623b      	str	r3, [r7, #32]
 8004c40:	e014      	b.n	8004c6c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	601a      	str	r2, [r3, #0]
    pDest++;
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	3301      	adds	r3, #1
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	3301      	adds	r3, #1
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	3301      	adds	r3, #1
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	623b      	str	r3, [r7, #32]
 8004c6c:	6a3a      	ldr	r2, [r7, #32]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d3e6      	bcc.n	8004c42 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004c74:	8bfb      	ldrh	r3, [r7, #30]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d01e      	beq.n	8004cb8 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c84:	461a      	mov	r2, r3
 8004c86:	f107 0310 	add.w	r3, r7, #16
 8004c8a:	6812      	ldr	r2, [r2, #0]
 8004c8c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	701a      	strb	r2, [r3, #0]
      i++;
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	3301      	adds	r3, #1
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004cac:	8bfb      	ldrh	r3, [r7, #30]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004cb2:	8bfb      	ldrh	r3, [r7, #30]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1ea      	bne.n	8004c8e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	372c      	adds	r7, #44	; 0x2c
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bc80      	pop	{r7}
 8004cc2:	4770      	bx	lr

08004cc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr

08004ce8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	f003 0301 	and.w	r3, r3, #1
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bc80      	pop	{r7}
 8004d00:	4770      	bx	lr
	...

08004d04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	3301      	adds	r3, #1
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4a12      	ldr	r2, [pc, #72]	; (8004d64 <USB_CoreReset+0x60>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e01b      	b.n	8004d5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	daf2      	bge.n	8004d10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f043 0201 	orr.w	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4a08      	ldr	r2, [pc, #32]	; (8004d64 <USB_CoreReset+0x60>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d901      	bls.n	8004d4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e006      	b.n	8004d5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d0f0      	beq.n	8004d3a <USB_CoreReset+0x36>

  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bc80      	pop	{r7}
 8004d62:	4770      	bx	lr
 8004d64:	00030d40 	.word	0x00030d40

08004d68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d68:	b084      	sub	sp, #16
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	f107 001c 	add.w	r0, r7, #28
 8004d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d84:	461a      	mov	r2, r3
 8004d86:	2300      	movs	r3, #0
 8004d88:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004db0:	f023 0304 	bic.w	r3, r3, #4
 8004db4:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004db6:	2110      	movs	r1, #16
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f7ff feaf 	bl	8004b1c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fed0 	bl	8004b64 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e015      	b.n	8004df6 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ddc:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dea:	461a      	mov	r2, r3
 8004dec:	2300      	movs	r3, #0
 8004dee:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3301      	adds	r3, #1
 8004df4:	60fb      	str	r3, [r7, #12]
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d3e5      	bcc.n	8004dca <USB_HostInit+0x62>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0a:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2280      	movs	r2, #128	; 0x80
 8004e10:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a0c      	ldr	r2, [pc, #48]	; (8004e48 <USB_HostInit+0xe0>)
 8004e16:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a0c      	ldr	r2, [pc, #48]	; (8004e4c <USB_HostInit+0xe4>)
 8004e1c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	f043 0210 	orr.w	r2, r3, #16
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	699a      	ldr	r2, [r3, #24]
 8004e30:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <USB_HostInit+0xe8>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e44:	b004      	add	sp, #16
 8004e46:	4770      	bx	lr
 8004e48:	00600080 	.word	0x00600080
 8004e4c:	004000e0 	.word	0x004000e0
 8004e50:	a3200008 	.word	0xa3200008

08004e54 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	460b      	mov	r3, r1
 8004e5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e72:	f023 0303 	bic.w	r3, r3, #3
 8004e76:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	68f9      	ldr	r1, [r7, #12]
 8004e88:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004e90:	78fb      	ldrb	r3, [r7, #3]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d107      	bne.n	8004ea6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004ea2:	6053      	str	r3, [r2, #4]
 8004ea4:	e009      	b.n	8004eba <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d106      	bne.n	8004eba <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f241 7370 	movw	r3, #6000	; 0x1770
 8004eb8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr

08004ec6 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b084      	sub	sp, #16
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ee6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004ef6:	2064      	movs	r0, #100	; 0x64
 8004ef8:	f7fb fea2 	bl	8000c40 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f08:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004f0a:	200a      	movs	r0, #10
 8004f0c:	f7fb fe98 	bl	8000c40 <HAL_Delay>

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b085      	sub	sp, #20
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
 8004f22:	460b      	mov	r3, r1
 8004f24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f3e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d109      	bne.n	8004f5e <USB_DriveVbus+0x44>
 8004f4a:	78fb      	ldrb	r3, [r7, #3]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d106      	bne.n	8004f5e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f5c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f68:	d109      	bne.n	8004f7e <USB_DriveVbus+0x64>
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d106      	bne.n	8004f7e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f7c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3714      	adds	r7, #20
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bc80      	pop	{r7}
 8004f88:	4770      	bx	lr

08004f8a <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b085      	sub	sp, #20
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	0c5b      	lsrs	r3, r3, #17
 8004fa8:	f003 0303 	and.w	r3, r3, #3
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr

08004fb6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	b29b      	uxth	r3, r3
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr
	...

08004fd8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	70fb      	strb	r3, [r7, #3]
 8004fea:	460b      	mov	r3, r1
 8004fec:	70bb      	strb	r3, [r7, #2]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4413      	add	r3, r2
 8005002:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005006:	461a      	mov	r2, r3
 8005008:	f04f 33ff 	mov.w	r3, #4294967295
 800500c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800500e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005012:	2b03      	cmp	r3, #3
 8005014:	d867      	bhi.n	80050e6 <USB_HC_Init+0x10e>
 8005016:	a201      	add	r2, pc, #4	; (adr r2, 800501c <USB_HC_Init+0x44>)
 8005018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800501c:	0800502d 	.word	0x0800502d
 8005020:	080050a9 	.word	0x080050a9
 8005024:	0800502d 	.word	0x0800502d
 8005028:	0800506b 	.word	0x0800506b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	4413      	add	r3, r2
 8005034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005038:	461a      	mov	r2, r3
 800503a:	f240 439d 	movw	r3, #1181	; 0x49d
 800503e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005040:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005044:	2b00      	cmp	r3, #0
 8005046:	da51      	bge.n	80050ec <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	4413      	add	r3, r2
 8005050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	78fa      	ldrb	r2, [r7, #3]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	440a      	add	r2, r1
 800505e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005066:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005068:	e040      	b.n	80050ec <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800506a:	78fb      	ldrb	r3, [r7, #3]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	4413      	add	r3, r2
 8005072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005076:	461a      	mov	r2, r3
 8005078:	f240 639d 	movw	r3, #1693	; 0x69d
 800507c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800507e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005082:	2b00      	cmp	r3, #0
 8005084:	da34      	bge.n	80050f0 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005086:	78fb      	ldrb	r3, [r7, #3]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	4413      	add	r3, r2
 800508e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	78fa      	ldrb	r2, [r7, #3]
 8005096:	0151      	lsls	r1, r2, #5
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	440a      	add	r2, r1
 800509c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050a4:	60d3      	str	r3, [r2, #12]
      }

      break;
 80050a6:	e023      	b.n	80050f0 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	015a      	lsls	r2, r3, #5
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	4413      	add	r3, r2
 80050b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b4:	461a      	mov	r2, r3
 80050b6:	f240 2325 	movw	r3, #549	; 0x225
 80050ba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80050bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	da17      	bge.n	80050f4 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80050c4:	78fb      	ldrb	r3, [r7, #3]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	78fa      	ldrb	r2, [r7, #3]
 80050d4:	0151      	lsls	r1, r2, #5
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	440a      	add	r2, r1
 80050da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050de:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80050e2:	60d3      	str	r3, [r2, #12]
      }
      break;
 80050e4:	e006      	b.n	80050f4 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	77fb      	strb	r3, [r7, #31]
      break;
 80050ea:	e004      	b.n	80050f6 <USB_HC_Init+0x11e>
      break;
 80050ec:	bf00      	nop
 80050ee:	e002      	b.n	80050f6 <USB_HC_Init+0x11e>
      break;
 80050f0:	bf00      	nop
 80050f2:	e000      	b.n	80050f6 <USB_HC_Init+0x11e>
      break;
 80050f4:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	2101      	movs	r1, #1
 8005106:	fa01 f303 	lsl.w	r3, r1, r3
 800510a:	6939      	ldr	r1, [r7, #16]
 800510c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005110:	4313      	orrs	r3, r2
 8005112:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005120:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005124:	2b00      	cmp	r3, #0
 8005126:	da03      	bge.n	8005130 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	e001      	b.n	8005134 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7ff ff28 	bl	8004f8a <USB_GetHostSpeed>
 800513a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800513c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005140:	2b02      	cmp	r3, #2
 8005142:	d106      	bne.n	8005152 <USB_HC_Init+0x17a>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d003      	beq.n	8005152 <USB_HC_Init+0x17a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800514a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	e001      	b.n	8005156 <USB_HC_Init+0x17e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005156:	787b      	ldrb	r3, [r7, #1]
 8005158:	059b      	lsls	r3, r3, #22
 800515a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800515e:	78bb      	ldrb	r3, [r7, #2]
 8005160:	02db      	lsls	r3, r3, #11
 8005162:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005166:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005168:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800516c:	049b      	lsls	r3, r3, #18
 800516e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005172:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005174:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005176:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800517a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005180:	78fb      	ldrb	r3, [r7, #3]
 8005182:	0159      	lsls	r1, r3, #5
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	440b      	add	r3, r1
 8005188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005192:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005194:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005198:	2b03      	cmp	r3, #3
 800519a:	d10f      	bne.n	80051bc <USB_HC_Init+0x1e4>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800519c:	78fb      	ldrb	r3, [r7, #3]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	78fa      	ldrb	r2, [r7, #3]
 80051ac:	0151      	lsls	r1, r2, #5
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	440a      	add	r2, r1
 80051b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051ba:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80051bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3720      	adds	r7, #32
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop

080051c8 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b088      	sub	sp, #32
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	785b      	ldrb	r3, [r3, #1]
 80051da:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80051dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051e0:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d018      	beq.n	800521c <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	8912      	ldrh	r2, [r2, #8]
 80051f2:	4413      	add	r3, r2
 80051f4:	3b01      	subs	r3, #1
 80051f6:	683a      	ldr	r2, [r7, #0]
 80051f8:	8912      	ldrh	r2, [r2, #8]
 80051fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80051fe:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8005200:	8bfa      	ldrh	r2, [r7, #30]
 8005202:	8a7b      	ldrh	r3, [r7, #18]
 8005204:	429a      	cmp	r2, r3
 8005206:	d90b      	bls.n	8005220 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8005208:	8a7b      	ldrh	r3, [r7, #18]
 800520a:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800520c:	8bfb      	ldrh	r3, [r7, #30]
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	8912      	ldrh	r2, [r2, #8]
 8005212:	fb03 f202 	mul.w	r2, r3, r2
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	611a      	str	r2, [r3, #16]
 800521a:	e001      	b.n	8005220 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 800521c:	2301      	movs	r3, #1
 800521e:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	78db      	ldrb	r3, [r3, #3]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d007      	beq.n	8005238 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005228:	8bfb      	ldrh	r3, [r7, #30]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	8912      	ldrh	r2, [r2, #8]
 800522e:	fb03 f202 	mul.w	r2, r3, r2
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	611a      	str	r2, [r3, #16]
 8005236:	e003      	b.n	8005240 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	695a      	ldr	r2, [r3, #20]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005248:	8bfb      	ldrh	r3, [r7, #30]
 800524a:	04d9      	lsls	r1, r3, #19
 800524c:	4b59      	ldr	r3, [pc, #356]	; (80053b4 <USB_HC_StartXfer+0x1ec>)
 800524e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005250:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	7a9b      	ldrb	r3, [r3, #10]
 8005256:	075b      	lsls	r3, r3, #29
 8005258:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800525c:	6979      	ldr	r1, [r7, #20]
 800525e:	0148      	lsls	r0, r1, #5
 8005260:	69b9      	ldr	r1, [r7, #24]
 8005262:	4401      	add	r1, r0
 8005264:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005268:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800526a:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	bf0c      	ite	eq
 800527c:	2301      	moveq	r3, #1
 800527e:	2300      	movne	r3, #0
 8005280:	b2db      	uxtb	r3, r3
 8005282:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	4413      	add	r3, r2
 800528c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	0151      	lsls	r1, r2, #5
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	440a      	add	r2, r1
 800529a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800529e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80052a2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	7c7b      	ldrb	r3, [r7, #17]
 80052b4:	075b      	lsls	r3, r3, #29
 80052b6:	6979      	ldr	r1, [r7, #20]
 80052b8:	0148      	lsls	r0, r1, #5
 80052ba:	69b9      	ldr	r1, [r7, #24]
 80052bc:	4401      	add	r1, r0
 80052be:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80052c2:	4313      	orrs	r3, r2
 80052c4:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052dc:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	78db      	ldrb	r3, [r3, #3]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d004      	beq.n	80052f0 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ec:	60bb      	str	r3, [r7, #8]
 80052ee:	e003      	b.n	80052f8 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052f6:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052fe:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	4413      	add	r3, r2
 8005308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530c:	461a      	mov	r2, r3
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	78db      	ldrb	r3, [r3, #3]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d147      	bne.n	80053aa <USB_HC_StartXfer+0x1e2>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d043      	beq.n	80053aa <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	79db      	ldrb	r3, [r3, #7]
 8005326:	2b03      	cmp	r3, #3
 8005328:	d830      	bhi.n	800538c <USB_HC_StartXfer+0x1c4>
 800532a:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <USB_HC_StartXfer+0x168>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005341 	.word	0x08005341
 8005334:	08005365 	.word	0x08005365
 8005338:	08005341 	.word	0x08005341
 800533c:	08005365 	.word	0x08005365
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	3303      	adds	r3, #3
 8005346:	089b      	lsrs	r3, r3, #2
 8005348:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800534a:	89fa      	ldrh	r2, [r7, #14]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005350:	b29b      	uxth	r3, r3
 8005352:	429a      	cmp	r2, r3
 8005354:	d91c      	bls.n	8005390 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	f043 0220 	orr.w	r2, r3, #32
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	619a      	str	r2, [r3, #24]
        }
        break;
 8005362:	e015      	b.n	8005390 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	695b      	ldr	r3, [r3, #20]
 8005368:	3303      	adds	r3, #3
 800536a:	089b      	lsrs	r3, r3, #2
 800536c:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800536e:	89fa      	ldrh	r2, [r7, #14]
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	b29b      	uxth	r3, r3
 800537a:	429a      	cmp	r2, r3
 800537c:	d90a      	bls.n	8005394 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	619a      	str	r2, [r3, #24]
        }
        break;
 800538a:	e003      	b.n	8005394 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 800538c:	bf00      	nop
 800538e:	e002      	b.n	8005396 <USB_HC_StartXfer+0x1ce>
        break;
 8005390:	bf00      	nop
 8005392:	e000      	b.n	8005396 <USB_HC_StartXfer+0x1ce>
        break;
 8005394:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68d9      	ldr	r1, [r3, #12]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	785a      	ldrb	r2, [r3, #1]
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff fbfd 	bl	8004ba4 <USB_WritePacket>
  }

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3720      	adds	r7, #32
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	1ff80000 	.word	0x1ff80000

080053b8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	b29b      	uxth	r3, r3
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr

080053d8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80053d8:	b480      	push	{r7}
 80053da:	b089      	sub	sp, #36	; 0x24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80053e8:	78fb      	ldrb	r3, [r7, #3]
 80053ea:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	0c9b      	lsrs	r3, r3, #18
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	015a      	lsls	r2, r3, #5
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	4413      	add	r3, r2
 800540e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	0fdb      	lsrs	r3, r3, #31
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b20      	cmp	r3, #32
 8005426:	d104      	bne.n	8005432 <USB_HC_Halt+0x5a>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	e0e8      	b.n	8005604 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <USB_HC_Halt+0x66>
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d173      	bne.n	8005526 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	4413      	add	r3, r2
 8005446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	0151      	lsls	r1, r2, #5
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	440a      	add	r2, r1
 8005454:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005458:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800545c:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 0320 	and.w	r3, r3, #32
 8005466:	2b00      	cmp	r3, #0
 8005468:	f040 80cb 	bne.w	8005602 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d143      	bne.n	8005500 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	4413      	add	r3, r2
 8005480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	0151      	lsls	r1, r2, #5
 800548a:	69ba      	ldr	r2, [r7, #24]
 800548c:	440a      	add	r2, r1
 800548e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005492:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005496:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	0151      	lsls	r1, r2, #5
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	440a      	add	r2, r1
 80054ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054b6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	015a      	lsls	r2, r3, #5
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	4413      	add	r3, r2
 80054c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	0151      	lsls	r1, r2, #5
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	440a      	add	r2, r1
 80054ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054d6:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	3301      	adds	r3, #1
 80054dc:	61fb      	str	r3, [r7, #28]
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054e4:	d81d      	bhi.n	8005522 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054fc:	d0ec      	beq.n	80054d8 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054fe:	e080      	b.n	8005602 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	4413      	add	r3, r2
 8005508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	0151      	lsls	r1, r2, #5
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	440a      	add	r2, r1
 8005516:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800551a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800551e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005520:	e06f      	b.n	8005602 <USB_HC_Halt+0x22a>
            break;
 8005522:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005524:	e06d      	b.n	8005602 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	4413      	add	r3, r2
 800552e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	0151      	lsls	r1, r2, #5
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	440a      	add	r2, r1
 800553c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005540:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005544:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d143      	bne.n	80055de <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	4413      	add	r3, r2
 800555e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	0151      	lsls	r1, r2, #5
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	440a      	add	r2, r1
 800556c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005574:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	4413      	add	r3, r2
 800557e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	0151      	lsls	r1, r2, #5
 8005588:	69ba      	ldr	r2, [r7, #24]
 800558a:	440a      	add	r2, r1
 800558c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005594:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	015a      	lsls	r2, r3, #5
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	4413      	add	r3, r2
 800559e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	697a      	ldr	r2, [r7, #20]
 80055a6:	0151      	lsls	r1, r2, #5
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	440a      	add	r2, r1
 80055ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055b4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	3301      	adds	r3, #1
 80055ba:	61fb      	str	r3, [r7, #28]
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055c2:	d81d      	bhi.n	8005600 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	015a      	lsls	r2, r3, #5
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	4413      	add	r3, r2
 80055cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055da:	d0ec      	beq.n	80055b6 <USB_HC_Halt+0x1de>
 80055dc:	e011      	b.n	8005602 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	0151      	lsls	r1, r2, #5
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	440a      	add	r2, r1
 80055f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	e000      	b.n	8005602 <USB_HC_Halt+0x22a>
          break;
 8005600:	bf00      	nop
    }
  }

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3724      	adds	r7, #36	; 0x24
 8005608:	46bd      	mov	sp, r7
 800560a:	bc80      	pop	{r7}
 800560c:	4770      	bx	lr

0800560e <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b086      	sub	sp, #24
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800561a:	2300      	movs	r3, #0
 800561c:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff fa20 	bl	8004a64 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005624:	2110      	movs	r1, #16
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff fa78 	bl	8004b1c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff fa99 	bl	8004b64 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005632:	2300      	movs	r3, #0
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	e01f      	b.n	8005678 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800564e:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005656:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800565e:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	015a      	lsls	r2, r3, #5
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	4413      	add	r3, r2
 8005668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800566c:	461a      	mov	r2, r3
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	3301      	adds	r3, #1
 8005676:	613b      	str	r3, [r7, #16]
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	2b0f      	cmp	r3, #15
 800567c:	d9dc      	bls.n	8005638 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800567e:	2300      	movs	r3, #0
 8005680:	613b      	str	r3, [r7, #16]
 8005682:	e034      	b.n	80056ee <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800569a:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056a2:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056aa:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b8:	461a      	mov	r2, r3
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	3301      	adds	r3, #1
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056ca:	d80c      	bhi.n	80056e6 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056e2:	d0ec      	beq.n	80056be <USB_StopHost+0xb0>
 80056e4:	e000      	b.n	80056e8 <USB_StopHost+0xda>
        break;
 80056e6:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	3301      	adds	r3, #1
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	2b0f      	cmp	r3, #15
 80056f2:	d9c7      	bls.n	8005684 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056fa:	461a      	mov	r2, r3
 80056fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005700:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f04f 32ff 	mov.w	r2, #4294967295
 8005708:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3718      	adds	r7, #24
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005714:	b590      	push	{r4, r7, lr}
 8005716:	b089      	sub	sp, #36	; 0x24
 8005718:	af04      	add	r7, sp, #16
 800571a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800571c:	2301      	movs	r3, #1
 800571e:	2202      	movs	r2, #2
 8005720:	2102      	movs	r1, #2
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 fd0e 	bl	8006144 <USBH_FindInterface>
 8005728:	4603      	mov	r3, r0
 800572a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800572c:	7bfb      	ldrb	r3, [r7, #15]
 800572e:	2bff      	cmp	r3, #255	; 0xff
 8005730:	d002      	beq.n	8005738 <USBH_CDC_InterfaceInit+0x24>
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d901      	bls.n	800573c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005738:	2302      	movs	r3, #2
 800573a:	e13d      	b.n	80059b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	4619      	mov	r1, r3
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fce4 	bl	800610e <USBH_SelectInterface>
 8005746:	4603      	mov	r3, r0
 8005748:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800574a:	7bbb      	ldrb	r3, [r7, #14]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005750:	2302      	movs	r3, #2
 8005752:	e131      	b.n	80059b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800575a:	2050      	movs	r0, #80	; 0x50
 800575c:	f004 fd72 	bl	800a244 <malloc>
 8005760:	4603      	mov	r3, r0
 8005762:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d101      	bne.n	8005778 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005774:	2302      	movs	r3, #2
 8005776:	e11f      	b.n	80059b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005778:	2250      	movs	r2, #80	; 0x50
 800577a:	2100      	movs	r1, #0
 800577c:	68b8      	ldr	r0, [r7, #8]
 800577e:	f004 fd7f 	bl	800a280 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	211a      	movs	r1, #26
 8005788:	fb01 f303 	mul.w	r3, r1, r3
 800578c:	4413      	add	r3, r2
 800578e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	b25b      	sxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	da15      	bge.n	80057c6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	211a      	movs	r1, #26
 80057a0:	fb01 f303 	mul.w	r3, r1, r3
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80057aa:	781a      	ldrb	r2, [r3, #0]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80057b0:	7bfb      	ldrb	r3, [r7, #15]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	211a      	movs	r1, #26
 80057b6:	fb01 f303 	mul.w	r3, r1, r3
 80057ba:	4413      	add	r3, r2
 80057bc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80057c0:	881a      	ldrh	r2, [r3, #0]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	785b      	ldrb	r3, [r3, #1]
 80057ca:	4619      	mov	r1, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f001 ffa6 	bl	800771e <USBH_AllocPipe>
 80057d2:	4603      	mov	r3, r0
 80057d4:	461a      	mov	r2, r3
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	7819      	ldrb	r1, [r3, #0]
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	7858      	ldrb	r0, [r3, #1]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	8952      	ldrh	r2, [r2, #10]
 80057f2:	9202      	str	r2, [sp, #8]
 80057f4:	2203      	movs	r2, #3
 80057f6:	9201      	str	r2, [sp, #4]
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	4623      	mov	r3, r4
 80057fc:	4602      	mov	r2, r0
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 ff5e 	bl	80076c0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2200      	movs	r2, #0
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f004 fc6d 	bl	800a0ec <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005812:	2300      	movs	r3, #0
 8005814:	2200      	movs	r2, #0
 8005816:	210a      	movs	r1, #10
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fc93 	bl	8006144 <USBH_FindInterface>
 800581e:	4603      	mov	r3, r0
 8005820:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005822:	7bfb      	ldrb	r3, [r7, #15]
 8005824:	2bff      	cmp	r3, #255	; 0xff
 8005826:	d002      	beq.n	800582e <USBH_CDC_InterfaceInit+0x11a>
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d901      	bls.n	8005832 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800582e:	2302      	movs	r3, #2
 8005830:	e0c2      	b.n	80059b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005832:	7bfb      	ldrb	r3, [r7, #15]
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	211a      	movs	r1, #26
 8005838:	fb01 f303 	mul.w	r3, r1, r3
 800583c:	4413      	add	r3, r2
 800583e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	b25b      	sxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	da16      	bge.n	8005878 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	211a      	movs	r1, #26
 8005850:	fb01 f303 	mul.w	r3, r1, r3
 8005854:	4413      	add	r3, r2
 8005856:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800585a:	781a      	ldrb	r2, [r3, #0]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	211a      	movs	r1, #26
 8005866:	fb01 f303 	mul.w	r3, r1, r3
 800586a:	4413      	add	r3, r2
 800586c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005870:	881a      	ldrh	r2, [r3, #0]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	835a      	strh	r2, [r3, #26]
 8005876:	e015      	b.n	80058a4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	211a      	movs	r1, #26
 800587e:	fb01 f303 	mul.w	r3, r1, r3
 8005882:	4413      	add	r3, r2
 8005884:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005888:	781a      	ldrb	r2, [r3, #0]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800588e:	7bfb      	ldrb	r3, [r7, #15]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	211a      	movs	r1, #26
 8005894:	fb01 f303 	mul.w	r3, r1, r3
 8005898:	4413      	add	r3, r2
 800589a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800589e:	881a      	ldrh	r2, [r3, #0]
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	211a      	movs	r1, #26
 80058aa:	fb01 f303 	mul.w	r3, r1, r3
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	b25b      	sxtb	r3, r3
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	da16      	bge.n	80058ea <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80058bc:	7bfb      	ldrb	r3, [r7, #15]
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	211a      	movs	r1, #26
 80058c2:	fb01 f303 	mul.w	r3, r1, r3
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80058cc:	781a      	ldrb	r2, [r3, #0]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	211a      	movs	r1, #26
 80058d8:	fb01 f303 	mul.w	r3, r1, r3
 80058dc:	4413      	add	r3, r2
 80058de:	f203 3356 	addw	r3, r3, #854	; 0x356
 80058e2:	881a      	ldrh	r2, [r3, #0]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	835a      	strh	r2, [r3, #26]
 80058e8:	e015      	b.n	8005916 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	211a      	movs	r1, #26
 80058f0:	fb01 f303 	mul.w	r3, r1, r3
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80058fa:	781a      	ldrb	r2, [r3, #0]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	211a      	movs	r1, #26
 8005906:	fb01 f303 	mul.w	r3, r1, r3
 800590a:	4413      	add	r3, r2
 800590c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005910:	881a      	ldrh	r2, [r3, #0]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	7b9b      	ldrb	r3, [r3, #14]
 800591a:	4619      	mov	r1, r3
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f001 fefe 	bl	800771e <USBH_AllocPipe>
 8005922:	4603      	mov	r3, r0
 8005924:	461a      	mov	r2, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	7bdb      	ldrb	r3, [r3, #15]
 800592e:	4619      	mov	r1, r3
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f001 fef4 	bl	800771e <USBH_AllocPipe>
 8005936:	4603      	mov	r3, r0
 8005938:	461a      	mov	r2, r3
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	7b59      	ldrb	r1, [r3, #13]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	7b98      	ldrb	r0, [r3, #14]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	8b12      	ldrh	r2, [r2, #24]
 8005956:	9202      	str	r2, [sp, #8]
 8005958:	2202      	movs	r2, #2
 800595a:	9201      	str	r2, [sp, #4]
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	4623      	mov	r3, r4
 8005960:	4602      	mov	r2, r0
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f001 feac 	bl	80076c0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	7b19      	ldrb	r1, [r3, #12]
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	7bd8      	ldrb	r0, [r3, #15]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	8b52      	ldrh	r2, [r2, #26]
 8005980:	9202      	str	r2, [sp, #8]
 8005982:	2202      	movs	r2, #2
 8005984:	9201      	str	r2, [sp, #4]
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	4623      	mov	r3, r4
 800598a:	4602      	mov	r2, r0
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f001 fe97 	bl	80076c0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	7b5b      	ldrb	r3, [r3, #13]
 800599e:	2200      	movs	r2, #0
 80059a0:	4619      	mov	r1, r3
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f004 fba2 	bl	800a0ec <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	7b1b      	ldrb	r3, [r3, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	4619      	mov	r1, r3
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f004 fb9b 	bl	800a0ec <USBH_LL_SetToggle>

  return USBH_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd90      	pop	{r4, r7, pc}

080059c0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00e      	beq.n	80059f8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	4619      	mov	r1, r3
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f001 fe8c 	bl	80076fe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f001 feb7 	bl	8007760 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	7b1b      	ldrb	r3, [r3, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00e      	beq.n	8005a1e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	7b1b      	ldrb	r3, [r3, #12]
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f001 fe79 	bl	80076fe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	7b1b      	ldrb	r3, [r3, #12]
 8005a10:	4619      	mov	r1, r3
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f001 fea4 	bl	8007760 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	7b5b      	ldrb	r3, [r3, #13]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00e      	beq.n	8005a44 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	7b5b      	ldrb	r3, [r3, #13]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f001 fe66 	bl	80076fe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	7b5b      	ldrb	r3, [r3, #13]
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f001 fe91 	bl	8007760 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00b      	beq.n	8005a68 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f004 fbfb 	bl	800a254 <free>
    phost->pActiveClass->pData = 0U;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a64:	2200      	movs	r2, #0
 8005a66:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b084      	sub	sp, #16
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a84:	69db      	ldr	r3, [r3, #28]
 8005a86:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	3340      	adds	r3, #64	; 0x40
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f8b0 	bl	8005bf4 <GetLineCoding>
 8005a94:	4603      	mov	r3, r0
 8005a96:	73fb      	strb	r3, [r7, #15]
  if (status == USBH_OK)
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d105      	bne.n	8005aaa <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005aa4:	2102      	movs	r1, #2
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	4798      	blx	r3
  }
  return status;
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005abc:	2301      	movs	r3, #1
 8005abe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d877      	bhi.n	8005bc8 <USBH_CDC_Process+0x114>
 8005ad8:	a201      	add	r2, pc, #4	; (adr r2, 8005ae0 <USBH_CDC_Process+0x2c>)
 8005ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ade:	bf00      	nop
 8005ae0:	08005af5 	.word	0x08005af5
 8005ae4:	08005afb 	.word	0x08005afb
 8005ae8:	08005b2b 	.word	0x08005b2b
 8005aec:	08005b9f 	.word	0x08005b9f
 8005af0:	08005bad 	.word	0x08005bad
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005af4:	2300      	movs	r3, #0
 8005af6:	73fb      	strb	r3, [r7, #15]
      break;
 8005af8:	e06d      	b.n	8005bd6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f896 	bl	8005c32 <SetLineCoding>
 8005b06:	4603      	mov	r3, r0
 8005b08:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005b0a:	7bbb      	ldrb	r3, [r7, #14]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d104      	bne.n	8005b1a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005b18:	e058      	b.n	8005bcc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005b1a:	7bbb      	ldrb	r3, [r7, #14]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d055      	beq.n	8005bcc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2204      	movs	r2, #4
 8005b24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005b28:	e050      	b.n	8005bcc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	3340      	adds	r3, #64	; 0x40
 8005b2e:	4619      	mov	r1, r3
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f85f 	bl	8005bf4 <GetLineCoding>
 8005b36:	4603      	mov	r3, r0
 8005b38:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005b3a:	7bbb      	ldrb	r3, [r7, #14]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d126      	bne.n	8005b8e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b52:	791b      	ldrb	r3, [r3, #4]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d13b      	bne.n	8005bd0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b62:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d133      	bne.n	8005bd0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b72:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d12b      	bne.n	8005bd0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b80:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d124      	bne.n	8005bd0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f9e1 	bl	8005f4e <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005b8c:	e020      	b.n	8005bd0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005b8e:	7bbb      	ldrb	r3, [r7, #14]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d01d      	beq.n	8005bd0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2204      	movs	r2, #4
 8005b98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005b9c:	e018      	b.n	8005bd0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f8da 	bl	8005d58 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f969 	bl	8005e7c <CDC_ProcessReception>
      break;
 8005baa:	e014      	b.n	8005bd6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005bac:	2100      	movs	r1, #0
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f001 f877 	bl	8006ca2 <USBH_ClrFeature>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005bb8:	7bbb      	ldrb	r3, [r7, #14]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE ;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005bc6:	e005      	b.n	8005bd4 <USBH_CDC_Process+0x120>

    default:
      break;
 8005bc8:	bf00      	nop
 8005bca:	e004      	b.n	8005bd6 <USBH_CDC_Process+0x122>
      break;
 8005bcc:	bf00      	nop
 8005bce:	e002      	b.n	8005bd6 <USBH_CDC_Process+0x122>
      break;
 8005bd0:	bf00      	nop
 8005bd2:	e000      	b.n	8005bd6 <USBH_CDC_Process+0x122>
      break;
 8005bd4:	bf00      	nop

  }

  return status;
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bc80      	pop	{r7}
 8005bf2:	4770      	bx	lr

08005bf4 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	22a1      	movs	r2, #161	; 0xa1
 8005c02:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2221      	movs	r2, #33	; 0x21
 8005c08:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2207      	movs	r2, #7
 8005c1a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2207      	movs	r2, #7
 8005c20:	4619      	mov	r1, r3
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f001 fa18 	bl	8007058 <USBH_CtlReq>
 8005c28:	4603      	mov	r3, r0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b082      	sub	sp, #8
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2221      	movs	r2, #33	; 0x21
 8005c40:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2207      	movs	r2, #7
 8005c58:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2207      	movs	r2, #7
 8005c5e:	4619      	mov	r1, r3
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f001 f9f9 	bl	8007058 <USBH_CtlReq>
 8005c66:	4603      	mov	r3, r0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c86:	69db      	ldr	r3, [r3, #28]
 8005c88:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d004      	beq.n	8005c9e <USBH_CDC_Transmit+0x2e>
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005c9a:	2b03      	cmp	r3, #3
 8005c9c:	d11d      	bne.n	8005cda <USBH_CDC_Transmit+0x6a>
  {
    CDC_Handle->pTxData = pbuff;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	68ba      	ldr	r2, [r7, #8]
 8005ca2:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	2203      	movs	r2, #3
 8005cae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2204      	movs	r2, #4
 8005cc2:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	f001 fe3b 	bl	8007950 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 8005cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <USBH_CDC_Receive>:
* @brief  This function prepares the state before issuing the class specific commands
* @param  None
* @retval None
*/
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b086      	sub	sp, #24
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d004      	beq.n	8005d12 <USBH_CDC_Receive+0x2e>
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d11d      	bne.n	8005d4e <USBH_CDC_Receive+0x6a>
  {
    CDC_Handle->pRxData = pbuff;
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	2203      	movs	r2, #3
 8005d22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	2203      	movs	r2, #3
 8005d2a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	75fb      	strb	r3, [r7, #23]

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2204      	movs	r2, #4
 8005d36:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8005d46:	2200      	movs	r2, #0
 8005d48:	4619      	mov	r1, r3
 8005d4a:	f001 fe01 	bl	8007950 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 8005d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3718      	adds	r7, #24
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af02      	add	r7, sp, #8
 8005d5e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d66:	69db      	ldr	r3, [r3, #28]
 8005d68:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d002      	beq.n	8005d7e <CDC_ProcessTransmission+0x26>
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d023      	beq.n	8005dc4 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005d7c:	e07a      	b.n	8005e74 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	8b12      	ldrh	r2, [r2, #24]
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d90b      	bls.n	8005da2 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	69d9      	ldr	r1, [r3, #28]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8b1a      	ldrh	r2, [r3, #24]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	7b5b      	ldrb	r3, [r3, #13]
 8005d96:	2001      	movs	r0, #1
 8005d98:	9000      	str	r0, [sp, #0]
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f001 fc4d 	bl	800763a <USBH_BulkSendData>
 8005da0:	e00b      	b.n	8005dba <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005daa:	b29a      	uxth	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	7b5b      	ldrb	r3, [r3, #13]
 8005db0:	2001      	movs	r0, #1
 8005db2:	9000      	str	r0, [sp, #0]
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f001 fc40 	bl	800763a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005dc2:	e057      	b.n	8005e74 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	7b5b      	ldrb	r3, [r3, #13]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f004 f964 	bl	800a098 <USBH_LL_GetURBState>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005dd4:	7afb      	ldrb	r3, [r7, #11]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d136      	bne.n	8005e48 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	8b12      	ldrh	r2, [r2, #24]
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d90e      	bls.n	8005e04 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	8b12      	ldrh	r2, [r2, #24]
 8005dee:	1a9a      	subs	r2, r3, r2
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	8b12      	ldrh	r2, [r2, #24]
 8005dfc:	441a      	add	r2, r3
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	61da      	str	r2, [r3, #28]
 8005e02:	e002      	b.n	8005e0a <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d004      	beq.n	8005e1c <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8005e1a:	e006      	b.n	8005e2a <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f003 fee5 	bl	8009bf4 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2204      	movs	r2, #4
 8005e2e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8005e3e:	2200      	movs	r2, #0
 8005e40:	4619      	mov	r1, r3
 8005e42:	f001 fd85 	bl	8007950 <osMessagePut>
      break;
 8005e46:	e014      	b.n	8005e72 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8005e48:	7afb      	ldrb	r3, [r7, #11]
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d111      	bne.n	8005e72 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2204      	movs	r2, #4
 8005e5a:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	f001 fd6f 	bl	8007950 <osMessagePut>
      break;
 8005e72:	bf00      	nop
  }
}
 8005e74:	bf00      	nop
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005e98:	2b03      	cmp	r3, #3
 8005e9a:	d002      	beq.n	8005ea2 <CDC_ProcessReception+0x26>
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d00e      	beq.n	8005ebe <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8005ea0:	e051      	b.n	8005f46 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	6a19      	ldr	r1, [r3, #32]
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	8b5a      	ldrh	r2, [r3, #26]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	7b1b      	ldrb	r3, [r3, #12]
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f001 fbe8 	bl	8007684 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2204      	movs	r2, #4
 8005eb8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005ebc:	e043      	b.n	8005f46 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	7b1b      	ldrb	r3, [r3, #12]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f004 f8e7 	bl	800a098 <USBH_LL_GetURBState>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8005ece:	7cfb      	ldrb	r3, [r7, #19]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d137      	bne.n	8005f44 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	7b1b      	ldrb	r3, [r3, #12]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f004 f84a 	bl	8009f74 <USBH_LL_GetLastXferSize>
 8005ee0:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d016      	beq.n	8005f1a <CDC_ProcessReception+0x9e>
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	8b5b      	ldrh	r3, [r3, #26]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d910      	bls.n	8005f1a <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	1ad2      	subs	r2, r2, r3
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	6a1a      	ldr	r2, [r3, #32]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	441a      	add	r2, r3
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	2203      	movs	r2, #3
 8005f14:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8005f18:	e006      	b.n	8005f28 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f003 fe76 	bl	8009c14 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2204      	movs	r2, #4
 8005f2c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	4619      	mov	r1, r3
 8005f40:	f001 fd06 	bl	8007950 <osMessagePut>
      break;
 8005f44:	bf00      	nop
  }
}
 8005f46:	bf00      	nop
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005f4e:	b480      	push	{r7}
 8005f50:	b083      	sub	sp, #12
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bc80      	pop	{r7}
 8005f5e:	4770      	bx	lr

08005f60 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8005f60:	b5b0      	push	{r4, r5, r7, lr}
 8005f62:	b090      	sub	sp, #64	; 0x40
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005f74:	2302      	movs	r3, #2
 8005f76:	e04d      	b.n	8006014 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	79fa      	ldrb	r2, [r7, #7]
 8005f7c:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 f847 	bl	8006024 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8005fc4:	4b15      	ldr	r3, [pc, #84]	; (800601c <USBH_Init+0xbc>)
 8005fc6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8005fca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005fcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8005fd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f001 fc91 	bl	80078fe <osMessageCreate>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8005fe4:	4b0e      	ldr	r3, [pc, #56]	; (8006020 <USBH_Init+0xc0>)
 8005fe6:	f107 0414 	add.w	r4, r7, #20
 8005fea:	461d      	mov	r5, r3
 8005fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ff0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005ff4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8005ff8:	f107 0314 	add.w	r3, r7, #20
 8005ffc:	68f9      	ldr	r1, [r7, #12]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f001 fc1d 	bl	800783e <osThreadCreate>
 8006004:	4602      	mov	r2, r0
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f003 ff01 	bl	8009e14 <USBH_LL_Init>

  return USBH_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3740      	adds	r7, #64	; 0x40
 8006018:	46bd      	mov	sp, r7
 800601a:	bdb0      	pop	{r4, r5, r7, pc}
 800601c:	0800a53c 	.word	0x0800a53c
 8006020:	0800a54c 	.word	0x0800a54c

08006024 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006030:	2300      	movs	r3, #0
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	e009      	b.n	800604a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	33e0      	adds	r3, #224	; 0xe0
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	2200      	movs	r2, #0
 8006042:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3301      	adds	r3, #1
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2b0e      	cmp	r3, #14
 800604e:	d9f2      	bls.n	8006036 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006050:	2300      	movs	r3, #0
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	e009      	b.n	800606a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006060:	2200      	movs	r2, #0
 8006062:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	3301      	adds	r3, #1
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006070:	d3f1      	bcc.n	8006056 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2240      	movs	r2, #64	; 0x40
 8006096:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3714      	adds	r7, #20
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bc80      	pop	{r7}
 80060b8:	4770      	bx	lr

080060ba <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b085      	sub	sp, #20
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d017      	beq.n	80060fe <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d80f      	bhi.n	80060f8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80060de:	1c59      	adds	r1, r3, #1
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	33dc      	adds	r3, #220	; 0xdc
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73fb      	strb	r3, [r7, #15]
 80060f6:	e004      	b.n	8006102 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80060f8:	2302      	movs	r3, #2
 80060fa:	73fb      	strb	r3, [r7, #15]
 80060fc:	e001      	b.n	8006102 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80060fe:	2302      	movs	r3, #2
 8006100:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006102:	7bfb      	ldrb	r3, [r7, #15]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	bc80      	pop	{r7}
 800610c:	4770      	bx	lr

0800610e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 8006124:	78fa      	ldrb	r2, [r7, #3]
 8006126:	429a      	cmp	r2, r3
 8006128:	d204      	bcs.n	8006134 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	78fa      	ldrb	r2, [r7, #3]
 800612e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 8006132:	e001      	b.n	8006138 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006134:	2302      	movs	r3, #2
 8006136:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006138:	7bfb      	ldrb	r3, [r7, #15]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3714      	adds	r7, #20
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr

08006144 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	4608      	mov	r0, r1
 800614e:	4611      	mov	r1, r2
 8006150:	461a      	mov	r2, r3
 8006152:	4603      	mov	r3, r0
 8006154:	70fb      	strb	r3, [r7, #3]
 8006156:	460b      	mov	r3, r1
 8006158:	70bb      	strb	r3, [r7, #2]
 800615a:	4613      	mov	r3, r2
 800615c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006162:	2300      	movs	r3, #0
 8006164:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f203 3336 	addw	r3, r3, #822	; 0x336
 800616c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800616e:	e025      	b.n	80061bc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006170:	7dfb      	ldrb	r3, [r7, #23]
 8006172:	221a      	movs	r2, #26
 8006174:	fb02 f303 	mul.w	r3, r2, r3
 8006178:	3308      	adds	r3, #8
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	4413      	add	r3, r2
 800617e:	3302      	adds	r3, #2
 8006180:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	795b      	ldrb	r3, [r3, #5]
 8006186:	78fa      	ldrb	r2, [r7, #3]
 8006188:	429a      	cmp	r2, r3
 800618a:	d002      	beq.n	8006192 <USBH_FindInterface+0x4e>
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	2bff      	cmp	r3, #255	; 0xff
 8006190:	d111      	bne.n	80061b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006196:	78ba      	ldrb	r2, [r7, #2]
 8006198:	429a      	cmp	r2, r3
 800619a:	d002      	beq.n	80061a2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800619c:	78bb      	ldrb	r3, [r7, #2]
 800619e:	2bff      	cmp	r3, #255	; 0xff
 80061a0:	d109      	bne.n	80061b6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80061a6:	787a      	ldrb	r2, [r7, #1]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d002      	beq.n	80061b2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80061ac:	787b      	ldrb	r3, [r7, #1]
 80061ae:	2bff      	cmp	r3, #255	; 0xff
 80061b0:	d101      	bne.n	80061b6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
 80061b4:	e006      	b.n	80061c4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80061b6:	7dfb      	ldrb	r3, [r7, #23]
 80061b8:	3301      	adds	r3, #1
 80061ba:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80061bc:	7dfb      	ldrb	r3, [r7, #23]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d9d6      	bls.n	8006170 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80061c2:	23ff      	movs	r3, #255	; 0xff
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	371c      	adds	r7, #28
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bc80      	pop	{r7}
 80061cc:	4770      	bx	lr

080061ce <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b082      	sub	sp, #8
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f003 fe54 	bl	8009e84 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80061dc:	2101      	movs	r1, #1
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f003 ff6d 	bl	800a0be <USBH_LL_DriverVBUS>

  return USBH_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af04      	add	r7, sp, #16
 80061f6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80061f8:	2302      	movs	r3, #2
 80061fa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80061fc:	2300      	movs	r3, #0
 80061fe:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b01      	cmp	r3, #1
 800620a:	d102      	bne.n	8006212 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2203      	movs	r2, #3
 8006210:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b0b      	cmp	r3, #11
 800621a:	f200 81e4 	bhi.w	80065e6 <USBH_Process+0x3f6>
 800621e:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <USBH_Process+0x34>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	08006255 	.word	0x08006255
 8006228:	08006293 	.word	0x08006293
 800622c:	080062a7 	.word	0x080062a7
 8006230:	08006565 	.word	0x08006565
 8006234:	080065e7 	.word	0x080065e7
 8006238:	08006367 	.word	0x08006367
 800623c:	080064ff 	.word	0x080064ff
 8006240:	08006397 	.word	0x08006397
 8006244:	080063d3 	.word	0x080063d3
 8006248:	0800640d 	.word	0x0800640d
 800624c:	08006455 	.word	0x08006455
 8006250:	0800654d 	.word	0x0800654d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 81c4 	beq.w	80065ea <USBH_Process+0x3fa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006268:	20c8      	movs	r0, #200	; 0xc8
 800626a:	f003 ff6e 	bl	800a14a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f003 fe65 	bl	8009f3e <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006288:	2200      	movs	r2, #0
 800628a:	4619      	mov	r1, r3
 800628c:	f001 fb60 	bl	8007950 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006290:	e1ab      	b.n	80065ea <USBH_Process+0x3fa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8006298:	2b01      	cmp	r3, #1
 800629a:	f040 81a8 	bne.w	80065ee <USBH_Process+0x3fe>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2202      	movs	r2, #2
 80062a2:	701a      	strb	r2, [r3, #0]
      }
      break;
 80062a4:	e1a3      	b.n	80065ee <USBH_Process+0x3fe>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <USBH_Process+0xcc>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80062b6:	2104      	movs	r1, #4
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80062bc:	2064      	movs	r0, #100	; 0x64
 80062be:	f003 ff44 	bl	800a14a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f003 fe14 	bl	8009ef0 <USBH_LL_GetSpeed>
 80062c8:	4603      	mov	r3, r0
 80062ca:	461a      	mov	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2205      	movs	r2, #5
 80062d6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80062d8:	2100      	movs	r1, #0
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f001 fa1f 	bl	800771e <USBH_AllocPipe>
 80062e0:	4603      	mov	r3, r0
 80062e2:	461a      	mov	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80062e8:	2180      	movs	r1, #128	; 0x80
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f001 fa17 	bl	800771e <USBH_AllocPipe>
 80062f0:	4603      	mov	r3, r0
 80062f2:	461a      	mov	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	7919      	ldrb	r1, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 800630c:	b292      	uxth	r2, r2
 800630e:	9202      	str	r2, [sp, #8]
 8006310:	2200      	movs	r2, #0
 8006312:	9201      	str	r2, [sp, #4]
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	4603      	mov	r3, r0
 8006318:	2280      	movs	r2, #128	; 0x80
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f001 f9d0 	bl	80076c0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	7959      	ldrb	r1, [r3, #5]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 8006334:	b292      	uxth	r2, r2
 8006336:	9202      	str	r2, [sp, #8]
 8006338:	2200      	movs	r2, #0
 800633a:	9201      	str	r2, [sp, #4]
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	4603      	mov	r3, r0
 8006340:	2200      	movs	r2, #0
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f001 f9bc 	bl	80076c0 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800635c:	2200      	movs	r2, #0
 800635e:	4619      	mov	r1, r3
 8006360:	f001 faf6 	bl	8007950 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006364:	e14c      	b.n	8006600 <USBH_Process+0x410>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f950 	bl	800660c <USBH_HandleEnum>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	f040 813f 	bne.w	80065f2 <USBH_Process+0x402>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006382:	2b01      	cmp	r3, #1
 8006384:	d103      	bne.n	800638e <USBH_Process+0x19e>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2208      	movs	r2, #8
 800638a:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 800638c:	e131      	b.n	80065f2 <USBH_Process+0x402>
          phost->gState = HOST_INPUT;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2207      	movs	r2, #7
 8006392:	701a      	strb	r2, [r3, #0]
      break;
 8006394:	e12d      	b.n	80065f2 <USBH_Process+0x402>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 812a 	beq.w	80065f6 <USBH_Process+0x406>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80063a8:	2101      	movs	r1, #1
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2208      	movs	r2, #8
 80063b2:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2205      	movs	r2, #5
 80063b8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80063c8:	2200      	movs	r2, #0
 80063ca:	4619      	mov	r1, r3
 80063cc:	f001 fac0 	bl	8007950 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80063d0:	e111      	b.n	80065f6 <USBH_Process+0x406>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 80063d8:	b29b      	uxth	r3, r3
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f000 fc19 	bl	8006c14 <USBH_SetCfg>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d102      	bne.n	80063ee <USBH_Process+0x1fe>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2209      	movs	r2, #9
 80063ec:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006402:	2200      	movs	r2, #0
 8006404:	4619      	mov	r1, r3
 8006406:	f001 faa3 	bl	8007950 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800640a:	e0f9      	b.n	8006600 <USBH_Process+0x410>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006412:	f003 0320 	and.w	r3, r3, #32
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00a      	beq.n	8006430 <USBH_Process+0x240>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800641a:	2101      	movs	r1, #1
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fc1c 	bl	8006c5a <USBH_SetFeature>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d106      	bne.n	8006436 <USBH_Process+0x246>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	220a      	movs	r2, #10
 800642c:	701a      	strb	r2, [r3, #0]
 800642e:	e002      	b.n	8006436 <USBH_Process+0x246>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	220a      	movs	r2, #10
 8006434:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800644a:	2200      	movs	r2, #0
 800644c:	4619      	mov	r1, r3
 800644e:	f001 fa7f 	bl	8007950 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8006452:	e0d5      	b.n	8006600 <USBH_Process+0x410>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800645a:	2b00      	cmp	r3, #0
 800645c:	d040      	beq.n	80064e0 <USBH_Process+0x2f0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006466:	2300      	movs	r3, #0
 8006468:	73fb      	strb	r3, [r7, #15]
 800646a:	e017      	b.n	800649c <USBH_Process+0x2ac>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800646c:	7bfb      	ldrb	r3, [r7, #15]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	33dc      	adds	r3, #220	; 0xdc
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	791a      	ldrb	r2, [r3, #4]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 8006480:	429a      	cmp	r2, r3
 8006482:	d108      	bne.n	8006496 <USBH_Process+0x2a6>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006484:	7bfb      	ldrb	r3, [r7, #15]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	33dc      	adds	r3, #220	; 0xdc
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006496:	7bfb      	ldrb	r3, [r7, #15]
 8006498:	3301      	adds	r3, #1
 800649a:	73fb      	strb	r3, [r7, #15]
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d9e4      	bls.n	800646c <USBH_Process+0x27c>
          }
        }

        if (phost->pActiveClass != NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d016      	beq.n	80064da <USBH_Process+0x2ea>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	4798      	blx	r3
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d109      	bne.n	80064d2 <USBH_Process+0x2e2>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2206      	movs	r2, #6
 80064c2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80064ca:	2103      	movs	r1, #3
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	4798      	blx	r3
 80064d0:	e006      	b.n	80064e0 <USBH_Process+0x2f0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	220d      	movs	r2, #13
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	e002      	b.n	80064e0 <USBH_Process+0x2f0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	220d      	movs	r2, #13
 80064de:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2205      	movs	r2, #5
 80064e4:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80064f4:	2200      	movs	r2, #0
 80064f6:	4619      	mov	r1, r3
 80064f8:	f001 fa2a 	bl	8007950 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80064fc:	e080      	b.n	8006600 <USBH_Process+0x410>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00f      	beq.n	8006528 <USBH_Process+0x338>
      {
        status = phost->pActiveClass->Requests(phost);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	4798      	blx	r3
 8006514:	4603      	mov	r3, r0
 8006516:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006518:	7bbb      	ldrb	r3, [r7, #14]
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b00      	cmp	r3, #0
 800651e:	d16c      	bne.n	80065fa <USBH_Process+0x40a>
        {
          phost->gState = HOST_CLASS;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	220b      	movs	r2, #11
 8006524:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006526:	e068      	b.n	80065fa <USBH_Process+0x40a>
        phost->gState = HOST_ABORT_STATE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	220d      	movs	r2, #13
 800652c:	701a      	strb	r2, [r3, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2205      	movs	r2, #5
 8006532:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006542:	2200      	movs	r2, #0
 8006544:	4619      	mov	r1, r3
 8006546:	f001 fa03 	bl	8007950 <osMessagePut>
      break;
 800654a:	e056      	b.n	80065fa <USBH_Process+0x40a>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006552:	2b00      	cmp	r3, #0
 8006554:	d053      	beq.n	80065fe <USBH_Process+0x40e>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	4798      	blx	r3
      }
      break;
 8006562:	e04c      	b.n	80065fe <USBH_Process+0x40e>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7ff fd59 	bl	8006024 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006578:	2b00      	cmp	r3, #0
 800657a:	d009      	beq.n	8006590 <USBH_Process+0x3a0>
      {
        phost->pActiveClass->DeInit(phost);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d005      	beq.n	80065a6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80065a0:	2105      	movs	r1, #5
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d107      	bne.n	80065c2 <USBH_Process+0x3d2>
      {
        phost->device.is_ReEnumerated = 0U;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff fe07 	bl	80061ce <USBH_Start>
 80065c0:	e002      	b.n	80065c8 <USBH_Process+0x3d8>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f003 fc5e 	bl	8009e84 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80065dc:	2200      	movs	r2, #0
 80065de:	4619      	mov	r1, r3
 80065e0:	f001 f9b6 	bl	8007950 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80065e4:	e00c      	b.n	8006600 <USBH_Process+0x410>

    case HOST_ABORT_STATE:
    default :
      break;
 80065e6:	bf00      	nop
 80065e8:	e00a      	b.n	8006600 <USBH_Process+0x410>
      break;
 80065ea:	bf00      	nop
 80065ec:	e008      	b.n	8006600 <USBH_Process+0x410>
      break;
 80065ee:	bf00      	nop
 80065f0:	e006      	b.n	8006600 <USBH_Process+0x410>
      break;
 80065f2:	bf00      	nop
 80065f4:	e004      	b.n	8006600 <USBH_Process+0x410>
    break;
 80065f6:	bf00      	nop
 80065f8:	e002      	b.n	8006600 <USBH_Process+0x410>
      break;
 80065fa:	bf00      	nop
 80065fc:	e000      	b.n	8006600 <USBH_Process+0x410>
      break;
 80065fe:	bf00      	nop
  }
  return USBH_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop

0800660c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b088      	sub	sp, #32
 8006610:	af04      	add	r7, sp, #16
 8006612:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006614:	2301      	movs	r3, #1
 8006616:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	785b      	ldrb	r3, [r3, #1]
 800661c:	2b07      	cmp	r3, #7
 800661e:	f200 8132 	bhi.w	8006886 <USBH_HandleEnum+0x27a>
 8006622:	a201      	add	r2, pc, #4	; (adr r2, 8006628 <USBH_HandleEnum+0x1c>)
 8006624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006628:	08006649 	.word	0x08006649
 800662c:	080066bb 	.word	0x080066bb
 8006630:	080066d3 	.word	0x080066d3
 8006634:	08006749 	.word	0x08006749
 8006638:	08006761 	.word	0x08006761
 800663c:	0800677f 	.word	0x0800677f
 8006640:	080067eb 	.word	0x080067eb
 8006644:	0800683b 	.word	0x0800683b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8006648:	2108      	movs	r1, #8
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fa12 	bl	8006a74 <USBH_Get_DevDesc>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	f040 8119 	bne.w	800688a <USBH_HandleEnum+0x27e>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2201      	movs	r2, #1
 8006666:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	7919      	ldrb	r1, [r3, #4]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800667c:	b292      	uxth	r2, r2
 800667e:	9202      	str	r2, [sp, #8]
 8006680:	2200      	movs	r2, #0
 8006682:	9201      	str	r2, [sp, #4]
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	4603      	mov	r3, r0
 8006688:	2280      	movs	r2, #128	; 0x80
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f001 f818 	bl	80076c0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	7959      	ldrb	r1, [r3, #5]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 80066a4:	b292      	uxth	r2, r2
 80066a6:	9202      	str	r2, [sp, #8]
 80066a8:	2200      	movs	r2, #0
 80066aa:	9201      	str	r2, [sp, #4]
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	4603      	mov	r3, r0
 80066b0:	2200      	movs	r2, #0
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 f804 	bl	80076c0 <USBH_OpenPipe>
      }
      break;
 80066b8:	e0e7      	b.n	800688a <USBH_HandleEnum+0x27e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 80066ba:	2112      	movs	r1, #18
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 f9d9 	bl	8006a74 <USBH_Get_DevDesc>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f040 80e2 	bne.w	800688e <USBH_HandleEnum+0x282>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2202      	movs	r2, #2
 80066ce:	705a      	strb	r2, [r3, #1]

      }
      break;
 80066d0:	e0dd      	b.n	800688e <USBH_HandleEnum+0x282>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80066d2:	2101      	movs	r1, #1
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fa79 	bl	8006bcc <USBH_SetAddress>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f040 80d8 	bne.w	8006892 <USBH_HandleEnum+0x286>
      {
        USBH_Delay(2U);
 80066e2:	2002      	movs	r0, #2
 80066e4:	f003 fd31 	bl	800a14a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2201      	movs	r2, #1
 80066ec:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2203      	movs	r2, #3
 80066f4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	7919      	ldrb	r1, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 800670a:	b292      	uxth	r2, r2
 800670c:	9202      	str	r2, [sp, #8]
 800670e:	2200      	movs	r2, #0
 8006710:	9201      	str	r2, [sp, #4]
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	4603      	mov	r3, r0
 8006716:	2280      	movs	r2, #128	; 0x80
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 ffd1 	bl	80076c0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	7959      	ldrb	r1, [r3, #5]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8006732:	b292      	uxth	r2, r2
 8006734:	9202      	str	r2, [sp, #8]
 8006736:	2200      	movs	r2, #0
 8006738:	9201      	str	r2, [sp, #4]
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	4603      	mov	r3, r0
 800673e:	2200      	movs	r2, #0
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 ffbd 	bl	80076c0 <USBH_OpenPipe>
      }
      break;
 8006746:	e0a4      	b.n	8006892 <USBH_HandleEnum+0x286>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 8006748:	2109      	movs	r1, #9
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f9ba 	bl	8006ac4 <USBH_Get_CfgDesc>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	f040 809f 	bne.w	8006896 <USBH_HandleEnum+0x28a>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2204      	movs	r2, #4
 800675c:	705a      	strb	r2, [r3, #1]
      }
      break;
 800675e:	e09a      	b.n	8006896 <USBH_HandleEnum+0x28a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 8006766:	4619      	mov	r1, r3
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f9ab 	bl	8006ac4 <USBH_Get_CfgDesc>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	f040 8092 	bne.w	800689a <USBH_HandleEnum+0x28e>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2205      	movs	r2, #5
 800677a:	705a      	strb	r2, [r3, #1]
      }
      break;
 800677c:	e08d      	b.n	800689a <USBH_HandleEnum+0x28e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01e      	beq.n	80067c6 <USBH_HandleEnum+0x1ba>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8006794:	23ff      	movs	r3, #255	; 0xff
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f9b8 	bl	8006b0c <USBH_Get_StringDesc>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d17d      	bne.n	800689e <USBH_HandleEnum+0x292>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2206      	movs	r2, #6
 80067a6:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2205      	movs	r2, #5
 80067ac:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80067bc:	2200      	movs	r2, #0
 80067be:	4619      	mov	r1, r3
 80067c0:	f001 f8c6 	bl	8007950 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80067c4:	e06b      	b.n	800689e <USBH_HandleEnum+0x292>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2206      	movs	r2, #6
 80067ca:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2205      	movs	r2, #5
 80067d0:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80067e0:	2200      	movs	r2, #0
 80067e2:	4619      	mov	r1, r3
 80067e4:	f001 f8b4 	bl	8007950 <osMessagePut>
      break;
 80067e8:	e059      	b.n	800689e <USBH_HandleEnum+0x292>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d010      	beq.n	8006816 <USBH_HandleEnum+0x20a>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8006800:	23ff      	movs	r3, #255	; 0xff
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f982 	bl	8006b0c <USBH_Get_StringDesc>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d149      	bne.n	80068a2 <USBH_HandleEnum+0x296>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2207      	movs	r2, #7
 8006812:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006814:	e045      	b.n	80068a2 <USBH_HandleEnum+0x296>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2207      	movs	r2, #7
 800681a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2205      	movs	r2, #5
 8006820:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006830:	2200      	movs	r2, #0
 8006832:	4619      	mov	r1, r3
 8006834:	f001 f88c 	bl	8007950 <osMessagePut>
      break;
 8006838:	e033      	b.n	80068a2 <USBH_HandleEnum+0x296>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006840:	2b00      	cmp	r3, #0
 8006842:	d00f      	beq.n	8006864 <USBH_HandleEnum+0x258>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8006850:	23ff      	movs	r3, #255	; 0xff
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f95a 	bl	8006b0c <USBH_Get_StringDesc>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d123      	bne.n	80068a6 <USBH_HandleEnum+0x29a>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800685e:	2300      	movs	r3, #0
 8006860:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8006862:	e020      	b.n	80068a6 <USBH_HandleEnum+0x29a>
        Status = USBH_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2205      	movs	r2, #5
 800686c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800687c:	2200      	movs	r2, #0
 800687e:	4619      	mov	r1, r3
 8006880:	f001 f866 	bl	8007950 <osMessagePut>
      break;
 8006884:	e00f      	b.n	80068a6 <USBH_HandleEnum+0x29a>

    default:
      break;
 8006886:	bf00      	nop
 8006888:	e00e      	b.n	80068a8 <USBH_HandleEnum+0x29c>
      break;
 800688a:	bf00      	nop
 800688c:	e00c      	b.n	80068a8 <USBH_HandleEnum+0x29c>
      break;
 800688e:	bf00      	nop
 8006890:	e00a      	b.n	80068a8 <USBH_HandleEnum+0x29c>
      break;
 8006892:	bf00      	nop
 8006894:	e008      	b.n	80068a8 <USBH_HandleEnum+0x29c>
      break;
 8006896:	bf00      	nop
 8006898:	e006      	b.n	80068a8 <USBH_HandleEnum+0x29c>
      break;
 800689a:	bf00      	nop
 800689c:	e004      	b.n	80068a8 <USBH_HandleEnum+0x29c>
      break;
 800689e:	bf00      	nop
 80068a0:	e002      	b.n	80068a8 <USBH_HandleEnum+0x29c>
      break;
 80068a2:	bf00      	nop
 80068a4:	e000      	b.n	80068a8 <USBH_HandleEnum+0x29c>
      break;
 80068a6:	bf00      	nop
  }
  return Status;
 80068a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3710      	adds	r7, #16
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop

080068b4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bc80      	pop	{r7}
 80068ce:	4770      	bx	lr

080068d0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80068de:	1c5a      	adds	r2, r3, #1
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 f804 	bl	80068f4 <USBH_HandleSof>
}
 80068ec:	bf00      	nop
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b0b      	cmp	r3, #11
 8006904:	d10a      	bne.n	800691c <USBH_HandleSof+0x28>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800690c:	2b00      	cmp	r3, #0
 800690e:	d005      	beq.n	800691c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	4798      	blx	r3
  }
}
 800691c:	bf00      	nop
 800691e:	3708      	adds	r7, #8
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006948:	2200      	movs	r2, #0
 800694a:	4619      	mov	r1, r3
 800694c:	f001 f800 	bl	8007950 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8006950:	bf00      	nop
}
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 8006968:	bf00      	nop
}
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	bc80      	pop	{r7}
 8006970:	4770      	bx	lr

08006972 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006972:	b580      	push	{r7, lr}
 8006974:	b082      	sub	sp, #8
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80069a6:	2200      	movs	r2, #0
 80069a8:	4619      	mov	r1, r3
 80069aa:	f000 ffd1 	bl	8007950 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f003 fa6e 	bl	8009eba <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	791b      	ldrb	r3, [r3, #4]
 80069e2:	4619      	mov	r1, r3
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 febb 	bl	8007760 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	795b      	ldrb	r3, [r3, #5]
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 feb5 	bl	8007760 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	f000 ff9f 	bl	8007950 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 13d4 	ldr.w	r1, [r3, #980]	; 0x3d4
 8006a2a:	f107 030c 	add.w	r3, r7, #12
 8006a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 ffcc 	bl	80079d0 <osMessageGet>
    if (event.status == osEventMessage)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2b10      	cmp	r3, #16
 8006a3c:	d1f2      	bne.n	8006a24 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff fbd6 	bl	80061f0 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8006a44:	e7ee      	b.n	8006a24 <USBH_Process_OS+0x8>

08006a46 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8006a62:	2200      	movs	r2, #0
 8006a64:	4619      	mov	r1, r3
 8006a66:	f000 ff73 	bl	8007950 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8006a6a:	2300      	movs	r3, #0
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af02      	add	r7, sp, #8
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006a86:	78fb      	ldrb	r3, [r7, #3]
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a92:	2100      	movs	r1, #0
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f864 	bl	8006b62 <USBH_GetDescriptor>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	73fb      	strb	r3, [r7, #15]
 8006a9e:	7bfb      	ldrb	r3, [r7, #15]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10a      	bne.n	8006aba <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ab0:	78fa      	ldrb	r2, [r7, #3]
 8006ab2:	b292      	uxth	r2, r2
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	f000 f918 	bl	8006cea <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3710      	adds	r7, #16
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af02      	add	r7, sp, #8
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	460b      	mov	r3, r1
 8006ace:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	331c      	adds	r3, #28
 8006ad4:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8006ad6:	887b      	ldrh	r3, [r7, #2]
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f83d 	bl	8006b62 <USBH_GetDescriptor>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	72fb      	strb	r3, [r7, #11]
 8006aec:	7afb      	ldrb	r3, [r7, #11]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d107      	bne.n	8006b02 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f203 3336 	addw	r3, r3, #822	; 0x336
 8006af8:	887a      	ldrh	r2, [r7, #2]
 8006afa:	68f9      	ldr	r1, [r7, #12]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f000 f963 	bl	8006dc8 <USBH_ParseCfgDesc>
  }

  return status;
 8006b02:	7afb      	ldrb	r3, [r7, #11]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b088      	sub	sp, #32
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	607a      	str	r2, [r7, #4]
 8006b16:	461a      	mov	r2, r3
 8006b18:	460b      	mov	r3, r1
 8006b1a:	72fb      	strb	r3, [r7, #11]
 8006b1c:	4613      	mov	r3, r2
 8006b1e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8006b20:	7afb      	ldrb	r3, [r7, #11]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006b28:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8006b30:	893b      	ldrh	r3, [r7, #8]
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	460b      	mov	r3, r1
 8006b36:	2100      	movs	r1, #0
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f812 	bl	8006b62 <USBH_GetDescriptor>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	75fb      	strb	r3, [r7, #23]
 8006b42:	7dfb      	ldrb	r3, [r7, #23]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d107      	bne.n	8006b58 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006b4e:	893a      	ldrh	r2, [r7, #8]
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fa34 	bl	8006fc0 <USBH_ParseStringDesc>
  }

  return status;
 8006b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3718      	adds	r7, #24
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	607b      	str	r3, [r7, #4]
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	72fb      	strb	r3, [r7, #11]
 8006b70:	4613      	mov	r3, r2
 8006b72:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	789b      	ldrb	r3, [r3, #2]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d11c      	bne.n	8006bb6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006b7c:	7afb      	ldrb	r3, [r7, #11]
 8006b7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2206      	movs	r2, #6
 8006b8c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	893a      	ldrh	r2, [r7, #8]
 8006b92:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8006b94:	893b      	ldrh	r3, [r7, #8]
 8006b96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b9e:	d104      	bne.n	8006baa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f240 4209 	movw	r2, #1033	; 0x409
 8006ba6:	829a      	strh	r2, [r3, #20]
 8006ba8:	e002      	b.n	8006bb0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	8b3a      	ldrh	r2, [r7, #24]
 8006bb4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8006bb6:	8b3b      	ldrh	r3, [r7, #24]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	6879      	ldr	r1, [r7, #4]
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 fa4b 	bl	8007058 <USBH_CtlReq>
 8006bc2:	4603      	mov	r3, r0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	789b      	ldrb	r3, [r3, #2]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d10f      	bne.n	8006c00 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2205      	movs	r2, #5
 8006bea:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8006bec:	78fb      	ldrb	r3, [r7, #3]
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006c00:	2200      	movs	r2, #0
 8006c02:	2100      	movs	r1, #0
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fa27 	bl	8007058 <USBH_CtlReq>
 8006c0a:	4603      	mov	r3, r0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	789b      	ldrb	r3, [r3, #2]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d10e      	bne.n	8006c46 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2209      	movs	r2, #9
 8006c32:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	887a      	ldrh	r2, [r7, #2]
 8006c38:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006c46:	2200      	movs	r2, #0
 8006c48:	2100      	movs	r1, #0
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fa04 	bl	8007058 <USBH_CtlReq>
 8006c50:	4603      	mov	r3, r0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3708      	adds	r7, #8
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b082      	sub	sp, #8
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
 8006c62:	460b      	mov	r3, r1
 8006c64:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	789b      	ldrb	r3, [r3, #2]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d10f      	bne.n	8006c8e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2203      	movs	r2, #3
 8006c78:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006c7a:	78fb      	ldrb	r3, [r7, #3]
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006c8e:	2200      	movs	r2, #0
 8006c90:	2100      	movs	r1, #0
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f9e0 	bl	8007058 <USBH_CtlReq>
 8006c98:	4603      	mov	r3, r0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b082      	sub	sp, #8
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	789b      	ldrb	r3, [r3, #2]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d10f      	bne.n	8006cd6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2202      	movs	r2, #2
 8006cba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006cc8:	78fb      	ldrb	r3, [r7, #3]
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	2100      	movs	r1, #0
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f9bc 	bl	8007058 <USBH_CtlReq>
 8006ce0:	4603      	mov	r3, r0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b085      	sub	sp, #20
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	60f8      	str	r0, [r7, #12]
 8006cf2:	60b9      	str	r1, [r7, #8]
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	781a      	ldrb	r2, [r3, #0]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	785a      	ldrb	r2, [r3, #1]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	3302      	adds	r3, #2
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	3303      	adds	r3, #3
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	021b      	lsls	r3, r3, #8
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	b29a      	uxth	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	791a      	ldrb	r2, [r3, #4]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	795a      	ldrb	r2, [r3, #5]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	799a      	ldrb	r2, [r3, #6]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	79da      	ldrb	r2, [r3, #7]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006d44:	88fb      	ldrh	r3, [r7, #6]
 8006d46:	2b08      	cmp	r3, #8
 8006d48:	d939      	bls.n	8006dbe <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	3308      	adds	r3, #8
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	3309      	adds	r3, #9
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	021b      	lsls	r3, r3, #8
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	330a      	adds	r3, #10
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	330b      	adds	r3, #11
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	021b      	lsls	r3, r3, #8
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	330c      	adds	r3, #12
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	b29a      	uxth	r2, r3
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	330d      	adds	r3, #13
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	021b      	lsls	r3, r3, #8
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	4313      	orrs	r3, r2
 8006d98:	b29a      	uxth	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	7b9a      	ldrb	r2, [r3, #14]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	7bda      	ldrb	r2, [r3, #15]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	7c1a      	ldrb	r2, [r3, #16]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	7c5a      	ldrb	r2, [r3, #17]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	745a      	strb	r2, [r3, #17]
  }
}
 8006dbe:	bf00      	nop
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bc80      	pop	{r7}
 8006dc6:	4770      	bx	lr

08006dc8 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08a      	sub	sp, #40	; 0x28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006de0:	2300      	movs	r3, #0
 8006de2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	781a      	ldrb	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	785a      	ldrb	r2, [r3, #1]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	3302      	adds	r3, #2
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	3303      	adds	r3, #3
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	021b      	lsls	r3, r3, #8
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	791a      	ldrb	r2, [r3, #4]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	795a      	ldrb	r2, [r3, #5]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	799a      	ldrb	r2, [r3, #6]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	79da      	ldrb	r2, [r3, #7]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	7a1a      	ldrb	r2, [r3, #8]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006e3e:	88fb      	ldrh	r3, [r7, #6]
 8006e40:	2b09      	cmp	r3, #9
 8006e42:	d95f      	bls.n	8006f04 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006e44:	2309      	movs	r3, #9
 8006e46:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006e4c:	e051      	b.n	8006ef2 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006e4e:	f107 0316 	add.w	r3, r7, #22
 8006e52:	4619      	mov	r1, r3
 8006e54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e56:	f000 f8e5 	bl	8007024 <USBH_GetNextDesc>
 8006e5a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	785b      	ldrb	r3, [r3, #1]
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	d146      	bne.n	8006ef2 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006e64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006e68:	221a      	movs	r2, #26
 8006e6a:	fb02 f303 	mul.w	r3, r2, r3
 8006e6e:	3308      	adds	r3, #8
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	4413      	add	r3, r2
 8006e74:	3302      	adds	r3, #2
 8006e76:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006e78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e7a:	69f8      	ldr	r0, [r7, #28]
 8006e7c:	f000 f846 	bl	8006f0c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006e80:	2300      	movs	r3, #0
 8006e82:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006e8a:	e022      	b.n	8006ed2 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006e8c:	f107 0316 	add.w	r3, r7, #22
 8006e90:	4619      	mov	r1, r3
 8006e92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e94:	f000 f8c6 	bl	8007024 <USBH_GetNextDesc>
 8006e98:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9c:	785b      	ldrb	r3, [r3, #1]
 8006e9e:	2b05      	cmp	r3, #5
 8006ea0:	d117      	bne.n	8006ed2 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006ea2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ea6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006eaa:	3201      	adds	r2, #1
 8006eac:	00d2      	lsls	r2, r2, #3
 8006eae:	211a      	movs	r1, #26
 8006eb0:	fb01 f303 	mul.w	r3, r1, r3
 8006eb4:	4413      	add	r3, r2
 8006eb6:	3308      	adds	r3, #8
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006ec0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ec2:	69b8      	ldr	r0, [r7, #24]
 8006ec4:	f000 f850 	bl	8006f68 <USBH_ParseEPDesc>
            ep_ix++;
 8006ec8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006ecc:	3301      	adds	r3, #1
 8006ece:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	791b      	ldrb	r3, [r3, #4]
 8006ed6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d204      	bcs.n	8006ee8 <USBH_ParseCfgDesc+0x120>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	885a      	ldrh	r2, [r3, #2]
 8006ee2:	8afb      	ldrh	r3, [r7, #22]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d8d1      	bhi.n	8006e8c <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006eec:	3301      	adds	r3, #1
 8006eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006ef2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d804      	bhi.n	8006f04 <USBH_ParseCfgDesc+0x13c>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	885a      	ldrh	r2, [r3, #2]
 8006efe:	8afb      	ldrh	r3, [r7, #22]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d8a4      	bhi.n	8006e4e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006f04:	bf00      	nop
 8006f06:	3728      	adds	r7, #40	; 0x28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	781a      	ldrb	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	785a      	ldrb	r2, [r3, #1]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	789a      	ldrb	r2, [r3, #2]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	78da      	ldrb	r2, [r3, #3]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	791a      	ldrb	r2, [r3, #4]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	795a      	ldrb	r2, [r3, #5]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	799a      	ldrb	r2, [r3, #6]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	79da      	ldrb	r2, [r3, #7]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	7a1a      	ldrb	r2, [r3, #8]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	721a      	strb	r2, [r3, #8]
}
 8006f5e:	bf00      	nop
 8006f60:	370c      	adds	r7, #12
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bc80      	pop	{r7}
 8006f66:	4770      	bx	lr

08006f68 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781a      	ldrb	r2, [r3, #0]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	785a      	ldrb	r2, [r3, #1]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	789a      	ldrb	r2, [r3, #2]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	78da      	ldrb	r2, [r3, #3]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	3304      	adds	r3, #4
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	3305      	adds	r3, #5
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	021b      	lsls	r3, r3, #8
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	799a      	ldrb	r2, [r3, #6]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	719a      	strb	r2, [r3, #6]
}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bc80      	pop	{r7}
 8006fbe:	4770      	bx	lr

08006fc0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d120      	bne.n	800701a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	1e9a      	subs	r2, r3, #2
 8006fde:	88fb      	ldrh	r3, [r7, #6]
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	bf28      	it	cs
 8006fe4:	4613      	movcs	r3, r2
 8006fe6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	3302      	adds	r3, #2
 8006fec:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006fee:	2300      	movs	r3, #0
 8006ff0:	82fb      	strh	r3, [r7, #22]
 8006ff2:	e00b      	b.n	800700c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006ff4:	8afb      	ldrh	r3, [r7, #22]
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	781a      	ldrb	r2, [r3, #0]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	3301      	adds	r3, #1
 8007004:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007006:	8afb      	ldrh	r3, [r7, #22]
 8007008:	3302      	adds	r3, #2
 800700a:	82fb      	strh	r3, [r7, #22]
 800700c:	8afa      	ldrh	r2, [r7, #22]
 800700e:	8abb      	ldrh	r3, [r7, #20]
 8007010:	429a      	cmp	r2, r3
 8007012:	d3ef      	bcc.n	8006ff4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2200      	movs	r2, #0
 8007018:	701a      	strb	r2, [r3, #0]
  }
}
 800701a:	bf00      	nop
 800701c:	371c      	adds	r7, #28
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr

08007024 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	881a      	ldrh	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	b29b      	uxth	r3, r3
 8007038:	4413      	add	r3, r2
 800703a:	b29a      	uxth	r2, r3
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4413      	add	r3, r2
 800704a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800704c:	68fb      	ldr	r3, [r7, #12]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3714      	adds	r7, #20
 8007052:	46bd      	mov	sp, r7
 8007054:	bc80      	pop	{r7}
 8007056:	4770      	bx	lr

08007058 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	4613      	mov	r3, r2
 8007064:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007066:	2301      	movs	r3, #1
 8007068:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	789b      	ldrb	r3, [r3, #2]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d002      	beq.n	8007078 <USBH_CtlReq+0x20>
 8007072:	2b02      	cmp	r3, #2
 8007074:	d01d      	beq.n	80070b2 <USBH_CtlReq+0x5a>
        }
      }
      break;

    default:
      break;
 8007076:	e042      	b.n	80070fe <USBH_CtlReq+0xa6>
      phost->Control.buff = buff;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	68ba      	ldr	r2, [r7, #8]
 800707c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	88fa      	ldrh	r2, [r7, #6]
 8007082:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2201      	movs	r2, #1
 8007088:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2202      	movs	r2, #2
 800708e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007090:	2301      	movs	r3, #1
 8007092:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2203      	movs	r2, #3
 8007098:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80070a8:	2200      	movs	r2, #0
 80070aa:	4619      	mov	r1, r3
 80070ac:	f000 fc50 	bl	8007950 <osMessagePut>
      break;
 80070b0:	e025      	b.n	80070fe <USBH_CtlReq+0xa6>
      status = USBH_HandleControl(phost);
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f000 f828 	bl	8007108 <USBH_HandleControl>
 80070b8:	4603      	mov	r3, r0
 80070ba:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80070bc:	7dfb      	ldrb	r3, [r7, #23]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d108      	bne.n	80070d4 <USBH_CtlReq+0x7c>
        phost->RequestState = CMD_SEND;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2201      	movs	r2, #1
 80070c6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	75fb      	strb	r3, [r7, #23]
      break;
 80070d2:	e013      	b.n	80070fc <USBH_CtlReq+0xa4>
      else if (status == USBH_NOT_SUPPORTED)
 80070d4:	7dfb      	ldrb	r3, [r7, #23]
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d108      	bne.n	80070ec <USBH_CtlReq+0x94>
        phost->RequestState = CMD_SEND;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80070e6:	2303      	movs	r3, #3
 80070e8:	75fb      	strb	r3, [r7, #23]
      break;
 80070ea:	e007      	b.n	80070fc <USBH_CtlReq+0xa4>
        if (status == USBH_FAIL)
 80070ec:	7dfb      	ldrb	r3, [r7, #23]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d104      	bne.n	80070fc <USBH_CtlReq+0xa4>
          phost->RequestState = CMD_SEND;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2201      	movs	r2, #1
 80070f6:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 80070f8:	2302      	movs	r3, #2
 80070fa:	75fb      	strb	r3, [r7, #23]
      break;
 80070fc:	bf00      	nop
  }
  return status;
 80070fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af02      	add	r7, sp, #8
 800710e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007110:	2301      	movs	r3, #1
 8007112:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007114:	2300      	movs	r3, #0
 8007116:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	7e1b      	ldrb	r3, [r3, #24]
 800711c:	3b01      	subs	r3, #1
 800711e:	2b0a      	cmp	r3, #10
 8007120:	f200 821d 	bhi.w	800755e <USBH_HandleControl+0x456>
 8007124:	a201      	add	r2, pc, #4	; (adr r2, 800712c <USBH_HandleControl+0x24>)
 8007126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712a:	bf00      	nop
 800712c:	08007159 	.word	0x08007159
 8007130:	08007173 	.word	0x08007173
 8007134:	08007215 	.word	0x08007215
 8007138:	0800723b 	.word	0x0800723b
 800713c:	080072c7 	.word	0x080072c7
 8007140:	080072f1 	.word	0x080072f1
 8007144:	080073b3 	.word	0x080073b3
 8007148:	080073d5 	.word	0x080073d5
 800714c:	08007467 	.word	0x08007467
 8007150:	0800748d 	.word	0x0800748d
 8007154:	0800751f 	.word	0x0800751f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f103 0110 	add.w	r1, r3, #16
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	795b      	ldrb	r3, [r3, #5]
 8007162:	461a      	mov	r2, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fa0b 	bl	8007580 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2202      	movs	r2, #2
 800716e:	761a      	strb	r2, [r3, #24]
      break;
 8007170:	e200      	b.n	8007574 <USBH_HandleControl+0x46c>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	795b      	ldrb	r3, [r3, #5]
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f002 ff8d 	bl	800a098 <USBH_LL_GetURBState>
 800717e:	4603      	mov	r3, r0
 8007180:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d12c      	bne.n	80071e2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	7c1b      	ldrb	r3, [r3, #16]
 800718c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007190:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	8adb      	ldrh	r3, [r3, #22]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800719a:	7b7b      	ldrb	r3, [r7, #13]
 800719c:	2b80      	cmp	r3, #128	; 0x80
 800719e:	d103      	bne.n	80071a8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2203      	movs	r2, #3
 80071a4:	761a      	strb	r2, [r3, #24]
 80071a6:	e00d      	b.n	80071c4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2205      	movs	r2, #5
 80071ac:	761a      	strb	r2, [r3, #24]
 80071ae:	e009      	b.n	80071c4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80071b0:	7b7b      	ldrb	r3, [r7, #13]
 80071b2:	2b80      	cmp	r3, #128	; 0x80
 80071b4:	d103      	bne.n	80071be <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2209      	movs	r2, #9
 80071ba:	761a      	strb	r2, [r3, #24]
 80071bc:	e002      	b.n	80071c4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2207      	movs	r2, #7
 80071c2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2203      	movs	r2, #3
 80071c8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80071d8:	2200      	movs	r2, #0
 80071da:	4619      	mov	r1, r3
 80071dc:	f000 fbb8 	bl	8007950 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80071e0:	e1bf      	b.n	8007562 <USBH_HandleControl+0x45a>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d003      	beq.n	80071f0 <USBH_HandleControl+0xe8>
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	2b02      	cmp	r3, #2
 80071ec:	f040 81b9 	bne.w	8007562 <USBH_HandleControl+0x45a>
          phost->Control.state = CTRL_ERROR;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	220b      	movs	r2, #11
 80071f4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2203      	movs	r2, #3
 80071fa:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800720a:	2200      	movs	r2, #0
 800720c:	4619      	mov	r1, r3
 800720e:	f000 fb9f 	bl	8007950 <osMessagePut>
      break;
 8007212:	e1a6      	b.n	8007562 <USBH_HandleControl+0x45a>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800721a:	b29a      	uxth	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6899      	ldr	r1, [r3, #8]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	899a      	ldrh	r2, [r3, #12]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	791b      	ldrb	r3, [r3, #4]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f9e6 	bl	80075fe <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2204      	movs	r2, #4
 8007236:	761a      	strb	r2, [r3, #24]
      break;
 8007238:	e19c      	b.n	8007574 <USBH_HandleControl+0x46c>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	791b      	ldrb	r3, [r3, #4]
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f002 ff29 	bl	800a098 <USBH_LL_GetURBState>
 8007246:	4603      	mov	r3, r0
 8007248:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d110      	bne.n	8007272 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2209      	movs	r2, #9
 8007254:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2203      	movs	r2, #3
 800725a:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800726a:	2200      	movs	r2, #0
 800726c:	4619      	mov	r1, r3
 800726e:	f000 fb6f 	bl	8007950 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007272:	7bbb      	ldrb	r3, [r7, #14]
 8007274:	2b05      	cmp	r3, #5
 8007276:	d110      	bne.n	800729a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007278:	2303      	movs	r3, #3
 800727a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2203      	movs	r2, #3
 8007280:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007290:	2200      	movs	r2, #0
 8007292:	4619      	mov	r1, r3
 8007294:	f000 fb5c 	bl	8007950 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007298:	e165      	b.n	8007566 <USBH_HandleControl+0x45e>
        if (URB_Status == USBH_URB_ERROR)
 800729a:	7bbb      	ldrb	r3, [r7, #14]
 800729c:	2b04      	cmp	r3, #4
 800729e:	f040 8162 	bne.w	8007566 <USBH_HandleControl+0x45e>
          phost->Control.state = CTRL_ERROR;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	220b      	movs	r2, #11
 80072a6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2203      	movs	r2, #3
 80072ac:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80072bc:	2200      	movs	r2, #0
 80072be:	4619      	mov	r1, r3
 80072c0:	f000 fb46 	bl	8007950 <osMessagePut>
      break;
 80072c4:	e14f      	b.n	8007566 <USBH_HandleControl+0x45e>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6899      	ldr	r1, [r3, #8]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	899a      	ldrh	r2, [r3, #12]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	795b      	ldrb	r3, [r3, #5]
 80072d2:	2001      	movs	r0, #1
 80072d4:	9000      	str	r0, [sp, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f96c 	bl	80075b4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2206      	movs	r2, #6
 80072ec:	761a      	strb	r2, [r3, #24]
      break;
 80072ee:	e141      	b.n	8007574 <USBH_HandleControl+0x46c>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	795b      	ldrb	r3, [r3, #5]
 80072f4:	4619      	mov	r1, r3
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f002 fece 	bl	800a098 <USBH_LL_GetURBState>
 80072fc:	4603      	mov	r3, r0
 80072fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d111      	bne.n	800732a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2207      	movs	r2, #7
 800730a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2203      	movs	r2, #3
 8007310:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007320:	2200      	movs	r2, #0
 8007322:	4619      	mov	r1, r3
 8007324:	f000 fb14 	bl	8007950 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007328:	e11f      	b.n	800756a <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_STALL)
 800732a:	7bbb      	ldrb	r3, [r7, #14]
 800732c:	2b05      	cmp	r3, #5
 800732e:	d113      	bne.n	8007358 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	220c      	movs	r2, #12
 8007334:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007336:	2303      	movs	r3, #3
 8007338:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2203      	movs	r2, #3
 800733e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800734e:	2200      	movs	r2, #0
 8007350:	4619      	mov	r1, r3
 8007352:	f000 fafd 	bl	8007950 <osMessagePut>
      break;
 8007356:	e108      	b.n	800756a <USBH_HandleControl+0x462>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007358:	7bbb      	ldrb	r3, [r7, #14]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d111      	bne.n	8007382 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2205      	movs	r2, #5
 8007362:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2203      	movs	r2, #3
 8007368:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007378:	2200      	movs	r2, #0
 800737a:	4619      	mov	r1, r3
 800737c:	f000 fae8 	bl	8007950 <osMessagePut>
      break;
 8007380:	e0f3      	b.n	800756a <USBH_HandleControl+0x462>
        if (URB_Status == USBH_URB_ERROR)
 8007382:	7bbb      	ldrb	r3, [r7, #14]
 8007384:	2b04      	cmp	r3, #4
 8007386:	f040 80f0 	bne.w	800756a <USBH_HandleControl+0x462>
          phost->Control.state = CTRL_ERROR;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	220b      	movs	r2, #11
 800738e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007390:	2302      	movs	r3, #2
 8007392:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2203      	movs	r2, #3
 8007398:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80073a8:	2200      	movs	r2, #0
 80073aa:	4619      	mov	r1, r3
 80073ac:	f000 fad0 	bl	8007950 <osMessagePut>
      break;
 80073b0:	e0db      	b.n	800756a <USBH_HandleControl+0x462>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	791b      	ldrb	r3, [r3, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	2100      	movs	r1, #0
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f91f 	bl	80075fe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2208      	movs	r2, #8
 80073d0:	761a      	strb	r2, [r3, #24]

      break;
 80073d2:	e0cf      	b.n	8007574 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	791b      	ldrb	r3, [r3, #4]
 80073d8:	4619      	mov	r1, r3
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f002 fe5c 	bl	800a098 <USBH_LL_GetURBState>
 80073e0:	4603      	mov	r3, r0
 80073e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80073e4:	7bbb      	ldrb	r3, [r7, #14]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d113      	bne.n	8007412 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	220d      	movs	r2, #13
 80073ee:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2203      	movs	r2, #3
 80073f8:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007408:	2200      	movs	r2, #0
 800740a:	4619      	mov	r1, r3
 800740c:	f000 faa0 	bl	8007950 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007410:	e0ad      	b.n	800756e <USBH_HandleControl+0x466>
      else if (URB_Status == USBH_URB_ERROR)
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	2b04      	cmp	r3, #4
 8007416:	d111      	bne.n	800743c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	220b      	movs	r2, #11
 800741c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2203      	movs	r2, #3
 8007422:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007432:	2200      	movs	r2, #0
 8007434:	4619      	mov	r1, r3
 8007436:	f000 fa8b 	bl	8007950 <osMessagePut>
      break;
 800743a:	e098      	b.n	800756e <USBH_HandleControl+0x466>
        if (URB_Status == USBH_URB_STALL)
 800743c:	7bbb      	ldrb	r3, [r7, #14]
 800743e:	2b05      	cmp	r3, #5
 8007440:	f040 8095 	bne.w	800756e <USBH_HandleControl+0x466>
          status = USBH_NOT_SUPPORTED;
 8007444:	2303      	movs	r3, #3
 8007446:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2203      	movs	r2, #3
 800744c:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800745c:	2200      	movs	r2, #0
 800745e:	4619      	mov	r1, r3
 8007460:	f000 fa76 	bl	8007950 <osMessagePut>
      break;
 8007464:	e083      	b.n	800756e <USBH_HandleControl+0x466>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	795b      	ldrb	r3, [r3, #5]
 800746a:	2201      	movs	r2, #1
 800746c:	9200      	str	r2, [sp, #0]
 800746e:	2200      	movs	r2, #0
 8007470:	2100      	movs	r1, #0
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f89e 	bl	80075b4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800747e:	b29a      	uxth	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	220a      	movs	r2, #10
 8007488:	761a      	strb	r2, [r3, #24]
      break;
 800748a:	e073      	b.n	8007574 <USBH_HandleControl+0x46c>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	795b      	ldrb	r3, [r3, #5]
 8007490:	4619      	mov	r1, r3
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f002 fe00 	bl	800a098 <USBH_LL_GetURBState>
 8007498:	4603      	mov	r3, r0
 800749a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800749c:	7bbb      	ldrb	r3, [r7, #14]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d113      	bne.n	80074ca <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	220d      	movs	r2, #13
 80074aa:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2203      	movs	r2, #3
 80074b0:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80074c0:	2200      	movs	r2, #0
 80074c2:	4619      	mov	r1, r3
 80074c4:	f000 fa44 	bl	8007950 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80074c8:	e053      	b.n	8007572 <USBH_HandleControl+0x46a>
      else if (URB_Status == USBH_URB_NOTREADY)
 80074ca:	7bbb      	ldrb	r3, [r7, #14]
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d111      	bne.n	80074f4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2209      	movs	r2, #9
 80074d4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2203      	movs	r2, #3
 80074da:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 80074ea:	2200      	movs	r2, #0
 80074ec:	4619      	mov	r1, r3
 80074ee:	f000 fa2f 	bl	8007950 <osMessagePut>
      break;
 80074f2:	e03e      	b.n	8007572 <USBH_HandleControl+0x46a>
        if (URB_Status == USBH_URB_ERROR)
 80074f4:	7bbb      	ldrb	r3, [r7, #14]
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	d13b      	bne.n	8007572 <USBH_HandleControl+0x46a>
          phost->Control.state = CTRL_ERROR;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	220b      	movs	r2, #11
 80074fe:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2203      	movs	r2, #3
 8007504:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 03d4 	ldr.w	r0, [r3, #980]	; 0x3d4
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8007514:	2200      	movs	r2, #0
 8007516:	4619      	mov	r1, r3
 8007518:	f000 fa1a 	bl	8007950 <osMessagePut>
      break;
 800751c:	e029      	b.n	8007572 <USBH_HandleControl+0x46a>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	7e5b      	ldrb	r3, [r3, #25]
 8007522:	3301      	adds	r3, #1
 8007524:	b2da      	uxtb	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	765a      	strb	r2, [r3, #25]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	7e5b      	ldrb	r3, [r3, #25]
 800752e:	2b02      	cmp	r3, #2
 8007530:	d806      	bhi.n	8007540 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2201      	movs	r2, #1
 800753c:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800753e:	e019      	b.n	8007574 <USBH_HandleControl+0x46c>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007546:	2106      	movs	r1, #6
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007558:	2302      	movs	r3, #2
 800755a:	73fb      	strb	r3, [r7, #15]
      break;
 800755c:	e00a      	b.n	8007574 <USBH_HandleControl+0x46c>

    default:
      break;
 800755e:	bf00      	nop
 8007560:	e008      	b.n	8007574 <USBH_HandleControl+0x46c>
      break;
 8007562:	bf00      	nop
 8007564:	e006      	b.n	8007574 <USBH_HandleControl+0x46c>
      break;
 8007566:	bf00      	nop
 8007568:	e004      	b.n	8007574 <USBH_HandleControl+0x46c>
      break;
 800756a:	bf00      	nop
 800756c:	e002      	b.n	8007574 <USBH_HandleControl+0x46c>
      break;
 800756e:	bf00      	nop
 8007570:	e000      	b.n	8007574 <USBH_HandleControl+0x46c>
      break;
 8007572:	bf00      	nop
  }

  return status;
 8007574:	7bfb      	ldrb	r3, [r7, #15]
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop

08007580 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b088      	sub	sp, #32
 8007584:	af04      	add	r7, sp, #16
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	4613      	mov	r3, r2
 800758c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800758e:	79f9      	ldrb	r1, [r7, #7]
 8007590:	2300      	movs	r3, #0
 8007592:	9303      	str	r3, [sp, #12]
 8007594:	2308      	movs	r3, #8
 8007596:	9302      	str	r3, [sp, #8]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	9301      	str	r3, [sp, #4]
 800759c:	2300      	movs	r3, #0
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	2300      	movs	r3, #0
 80075a2:	2200      	movs	r2, #0
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f002 fd46 	bl	800a036 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b088      	sub	sp, #32
 80075b8:	af04      	add	r7, sp, #16
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	4611      	mov	r1, r2
 80075c0:	461a      	mov	r2, r3
 80075c2:	460b      	mov	r3, r1
 80075c4:	80fb      	strh	r3, [r7, #6]
 80075c6:	4613      	mov	r3, r2
 80075c8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d001      	beq.n	80075d8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80075d8:	7979      	ldrb	r1, [r7, #5]
 80075da:	7e3b      	ldrb	r3, [r7, #24]
 80075dc:	9303      	str	r3, [sp, #12]
 80075de:	88fb      	ldrh	r3, [r7, #6]
 80075e0:	9302      	str	r3, [sp, #8]
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	2301      	movs	r3, #1
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	2300      	movs	r3, #0
 80075ec:	2200      	movs	r2, #0
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f002 fd21 	bl	800a036 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b088      	sub	sp, #32
 8007602:	af04      	add	r7, sp, #16
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	60b9      	str	r1, [r7, #8]
 8007608:	4611      	mov	r1, r2
 800760a:	461a      	mov	r2, r3
 800760c:	460b      	mov	r3, r1
 800760e:	80fb      	strh	r3, [r7, #6]
 8007610:	4613      	mov	r3, r2
 8007612:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8007614:	7979      	ldrb	r1, [r7, #5]
 8007616:	2300      	movs	r3, #0
 8007618:	9303      	str	r3, [sp, #12]
 800761a:	88fb      	ldrh	r3, [r7, #6]
 800761c:	9302      	str	r3, [sp, #8]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	9301      	str	r3, [sp, #4]
 8007622:	2301      	movs	r3, #1
 8007624:	9300      	str	r3, [sp, #0]
 8007626:	2300      	movs	r3, #0
 8007628:	2201      	movs	r2, #1
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f002 fd03 	bl	800a036 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8007630:	2300      	movs	r3, #0

}
 8007632:	4618      	mov	r0, r3
 8007634:	3710      	adds	r7, #16
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b088      	sub	sp, #32
 800763e:	af04      	add	r7, sp, #16
 8007640:	60f8      	str	r0, [r7, #12]
 8007642:	60b9      	str	r1, [r7, #8]
 8007644:	4611      	mov	r1, r2
 8007646:	461a      	mov	r2, r3
 8007648:	460b      	mov	r3, r1
 800764a:	80fb      	strh	r3, [r7, #6]
 800764c:	4613      	mov	r3, r2
 800764e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007656:	2b00      	cmp	r3, #0
 8007658:	d001      	beq.n	800765e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800765e:	7979      	ldrb	r1, [r7, #5]
 8007660:	7e3b      	ldrb	r3, [r7, #24]
 8007662:	9303      	str	r3, [sp, #12]
 8007664:	88fb      	ldrh	r3, [r7, #6]
 8007666:	9302      	str	r3, [sp, #8]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	9301      	str	r3, [sp, #4]
 800766c:	2301      	movs	r3, #1
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	2302      	movs	r3, #2
 8007672:	2200      	movs	r2, #0
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f002 fcde 	bl	800a036 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af04      	add	r7, sp, #16
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	4611      	mov	r1, r2
 8007690:	461a      	mov	r2, r3
 8007692:	460b      	mov	r3, r1
 8007694:	80fb      	strh	r3, [r7, #6]
 8007696:	4613      	mov	r3, r2
 8007698:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800769a:	7979      	ldrb	r1, [r7, #5]
 800769c:	2300      	movs	r3, #0
 800769e:	9303      	str	r3, [sp, #12]
 80076a0:	88fb      	ldrh	r3, [r7, #6]
 80076a2:	9302      	str	r3, [sp, #8]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	9301      	str	r3, [sp, #4]
 80076a8:	2301      	movs	r3, #1
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	2302      	movs	r3, #2
 80076ae:	2201      	movs	r2, #1
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f002 fcc0 	bl	800a036 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af04      	add	r7, sp, #16
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	4608      	mov	r0, r1
 80076ca:	4611      	mov	r1, r2
 80076cc:	461a      	mov	r2, r3
 80076ce:	4603      	mov	r3, r0
 80076d0:	70fb      	strb	r3, [r7, #3]
 80076d2:	460b      	mov	r3, r1
 80076d4:	70bb      	strb	r3, [r7, #2]
 80076d6:	4613      	mov	r3, r2
 80076d8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80076da:	7878      	ldrb	r0, [r7, #1]
 80076dc:	78ba      	ldrb	r2, [r7, #2]
 80076de:	78f9      	ldrb	r1, [r7, #3]
 80076e0:	8b3b      	ldrh	r3, [r7, #24]
 80076e2:	9302      	str	r3, [sp, #8]
 80076e4:	7d3b      	ldrb	r3, [r7, #20]
 80076e6:	9301      	str	r3, [sp, #4]
 80076e8:	7c3b      	ldrb	r3, [r7, #16]
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	4603      	mov	r3, r0
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f002 fc53 	bl	8009f9a <USBH_LL_OpenPipe>

  return USBH_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	460b      	mov	r3, r1
 8007708:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800770a:	78fb      	ldrb	r3, [r7, #3]
 800770c:	4619      	mov	r1, r3
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f002 fc72 	bl	8009ff8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b084      	sub	sp, #16
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	460b      	mov	r3, r1
 8007728:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f835 	bl	800779a <USBH_GetFreePipe>
 8007730:	4603      	mov	r3, r0
 8007732:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007734:	89fb      	ldrh	r3, [r7, #14]
 8007736:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800773a:	4293      	cmp	r3, r2
 800773c:	d00a      	beq.n	8007754 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800773e:	78fa      	ldrb	r2, [r7, #3]
 8007740:	89fb      	ldrh	r3, [r7, #14]
 8007742:	f003 030f 	and.w	r3, r3, #15
 8007746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800774a:	6879      	ldr	r1, [r7, #4]
 800774c:	33e0      	adds	r3, #224	; 0xe0
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	440b      	add	r3, r1
 8007752:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007754:	89fb      	ldrh	r3, [r7, #14]
 8007756:	b2db      	uxtb	r3, r3
}
 8007758:	4618      	mov	r0, r3
 800775a:	3710      	adds	r7, #16
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}

08007760 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	460b      	mov	r3, r1
 800776a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	2b0a      	cmp	r3, #10
 8007770:	d80d      	bhi.n	800778e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007772:	78fb      	ldrb	r3, [r7, #3]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	33e0      	adds	r3, #224	; 0xe0
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	78fb      	ldrb	r3, [r7, #3]
 8007780:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007784:	6879      	ldr	r1, [r7, #4]
 8007786:	33e0      	adds	r3, #224	; 0xe0
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	440b      	add	r3, r1
 800778c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	bc80      	pop	{r7}
 8007798:	4770      	bx	lr

0800779a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800779a:	b480      	push	{r7}
 800779c:	b085      	sub	sp, #20
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80077a6:	2300      	movs	r3, #0
 80077a8:	73fb      	strb	r3, [r7, #15]
 80077aa:	e00f      	b.n	80077cc <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	33e0      	adds	r3, #224	; 0xe0
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d102      	bne.n	80077c6 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	e007      	b.n	80077d6 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
 80077c8:	3301      	adds	r3, #1
 80077ca:	73fb      	strb	r3, [r7, #15]
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
 80077ce:	2b0a      	cmp	r3, #10
 80077d0:	d9ec      	bls.n	80077ac <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80077d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3714      	adds	r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	bc80      	pop	{r7}
 80077de:	4770      	bx	lr

080077e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	4603      	mov	r3, r0
 80077e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80077ea:	2300      	movs	r3, #0
 80077ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80077ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077f2:	2b84      	cmp	r3, #132	; 0x84
 80077f4:	d005      	beq.n	8007802 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80077f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	4413      	add	r3, r2
 80077fe:	3303      	adds	r3, #3
 8007800:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007802:	68fb      	ldr	r3, [r7, #12]
}
 8007804:	4618      	mov	r0, r3
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	bc80      	pop	{r7}
 800780c:	4770      	bx	lr

0800780e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800780e:	b480      	push	{r7}
 8007810:	b083      	sub	sp, #12
 8007812:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007814:	f3ef 8305 	mrs	r3, IPSR
 8007818:	607b      	str	r3, [r7, #4]
  return(result);
 800781a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800781c:	2b00      	cmp	r3, #0
 800781e:	bf14      	ite	ne
 8007820:	2301      	movne	r3, #1
 8007822:	2300      	moveq	r3, #0
 8007824:	b2db      	uxtb	r3, r3
}
 8007826:	4618      	mov	r0, r3
 8007828:	370c      	adds	r7, #12
 800782a:	46bd      	mov	sp, r7
 800782c:	bc80      	pop	{r7}
 800782e:	4770      	bx	lr

08007830 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007834:	f001 f8f0 	bl	8008a18 <vTaskStartScheduler>
  
  return osOK;
 8007838:	2300      	movs	r3, #0
}
 800783a:	4618      	mov	r0, r3
 800783c:	bd80      	pop	{r7, pc}

0800783e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800783e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007840:	b089      	sub	sp, #36	; 0x24
 8007842:	af04      	add	r7, sp, #16
 8007844:	6078      	str	r0, [r7, #4]
 8007846:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d020      	beq.n	8007892 <osThreadCreate+0x54>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d01c      	beq.n	8007892 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	685c      	ldr	r4, [r3, #4]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681d      	ldr	r5, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	691e      	ldr	r6, [r3, #16]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800786a:	4618      	mov	r0, r3
 800786c:	f7ff ffb8 	bl	80077e0 <makeFreeRtosPriority>
 8007870:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800787a:	9202      	str	r2, [sp, #8]
 800787c:	9301      	str	r3, [sp, #4]
 800787e:	9100      	str	r1, [sp, #0]
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	4632      	mov	r2, r6
 8007884:	4629      	mov	r1, r5
 8007886:	4620      	mov	r0, r4
 8007888:	f000 ff08 	bl	800869c <xTaskCreateStatic>
 800788c:	4603      	mov	r3, r0
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	e01c      	b.n	80078cc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	685c      	ldr	r4, [r3, #4]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800789e:	b29e      	uxth	r6, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff ff9a 	bl	80077e0 <makeFreeRtosPriority>
 80078ac:	4602      	mov	r2, r0
 80078ae:	f107 030c 	add.w	r3, r7, #12
 80078b2:	9301      	str	r3, [sp, #4]
 80078b4:	9200      	str	r2, [sp, #0]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	4632      	mov	r2, r6
 80078ba:	4629      	mov	r1, r5
 80078bc:	4620      	mov	r0, r4
 80078be:	f000 ff49 	bl	8008754 <xTaskCreate>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d001      	beq.n	80078cc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80078c8:	2300      	movs	r3, #0
 80078ca:	e000      	b.n	80078ce <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80078cc:	68fb      	ldr	r3, [r7, #12]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3714      	adds	r7, #20
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078d6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <osDelay+0x16>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	e000      	b.n	80078ee <osDelay+0x18>
 80078ec:	2301      	movs	r3, #1
 80078ee:	4618      	mov	r0, r3
 80078f0:	f001 f85e 	bl	80089b0 <vTaskDelay>
  
  return osOK;
 80078f4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80078fe:	b590      	push	{r4, r7, lr}
 8007900:	b085      	sub	sp, #20
 8007902:	af02      	add	r7, sp, #8
 8007904:	6078      	str	r0, [r7, #4]
 8007906:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d011      	beq.n	8007934 <osMessageCreate+0x36>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00d      	beq.n	8007934 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6818      	ldr	r0, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6859      	ldr	r1, [r3, #4]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689a      	ldr	r2, [r3, #8]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	2400      	movs	r4, #0
 800792a:	9400      	str	r4, [sp, #0]
 800792c:	f000 f9dc 	bl	8007ce8 <xQueueGenericCreateStatic>
 8007930:	4603      	mov	r3, r0
 8007932:	e008      	b.n	8007946 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6818      	ldr	r0, [r3, #0]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	4619      	mov	r1, r3
 8007940:	f000 fa49 	bl	8007dd6 <xQueueGenericCreate>
 8007944:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007946:	4618      	mov	r0, r3
 8007948:	370c      	adds	r7, #12
 800794a:	46bd      	mov	sp, r7
 800794c:	bd90      	pop	{r4, r7, pc}
	...

08007950 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800795c:	2300      	movs	r3, #0
 800795e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d101      	bne.n	800796e <osMessagePut+0x1e>
    ticks = 1;
 800796a:	2301      	movs	r3, #1
 800796c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800796e:	f7ff ff4e 	bl	800780e <inHandlerMode>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d018      	beq.n	80079aa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007978:	f107 0210 	add.w	r2, r7, #16
 800797c:	f107 0108 	add.w	r1, r7, #8
 8007980:	2300      	movs	r3, #0
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 fb82 	bl	800808c <xQueueGenericSendFromISR>
 8007988:	4603      	mov	r3, r0
 800798a:	2b01      	cmp	r3, #1
 800798c:	d001      	beq.n	8007992 <osMessagePut+0x42>
      return osErrorOS;
 800798e:	23ff      	movs	r3, #255	; 0xff
 8007990:	e018      	b.n	80079c4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d014      	beq.n	80079c2 <osMessagePut+0x72>
 8007998:	4b0c      	ldr	r3, [pc, #48]	; (80079cc <osMessagePut+0x7c>)
 800799a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	e00b      	b.n	80079c2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80079aa:	f107 0108 	add.w	r1, r7, #8
 80079ae:	2300      	movs	r3, #0
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 fa6c 	bl	8007e90 <xQueueGenericSend>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d001      	beq.n	80079c2 <osMessagePut+0x72>
      return osErrorOS;
 80079be:	23ff      	movs	r3, #255	; 0xff
 80079c0:	e000      	b.n	80079c4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	e000ed04 	.word	0xe000ed04

080079d0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80079d0:	b590      	push	{r4, r7, lr}
 80079d2:	b08b      	sub	sp, #44	; 0x2c
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80079e0:	2300      	movs	r3, #0
 80079e2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10a      	bne.n	8007a00 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80079ea:	2380      	movs	r3, #128	; 0x80
 80079ec:	617b      	str	r3, [r7, #20]
    return event;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	461c      	mov	r4, r3
 80079f2:	f107 0314 	add.w	r3, r7, #20
 80079f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80079fe:	e054      	b.n	8007aaa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007a00:	2300      	movs	r3, #0
 8007a02:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007a04:	2300      	movs	r3, #0
 8007a06:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0e:	d103      	bne.n	8007a18 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007a10:	f04f 33ff 	mov.w	r3, #4294967295
 8007a14:	627b      	str	r3, [r7, #36]	; 0x24
 8007a16:	e009      	b.n	8007a2c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d006      	beq.n	8007a2c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <osMessageGet+0x5c>
      ticks = 1;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007a2c:	f7ff feef 	bl	800780e <inHandlerMode>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d01c      	beq.n	8007a70 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007a36:	f107 0220 	add.w	r2, r7, #32
 8007a3a:	f107 0314 	add.w	r3, r7, #20
 8007a3e:	3304      	adds	r3, #4
 8007a40:	4619      	mov	r1, r3
 8007a42:	68b8      	ldr	r0, [r7, #8]
 8007a44:	f000 fc9a 	bl	800837c <xQueueReceiveFromISR>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d102      	bne.n	8007a54 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007a4e:	2310      	movs	r3, #16
 8007a50:	617b      	str	r3, [r7, #20]
 8007a52:	e001      	b.n	8007a58 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007a54:	2300      	movs	r3, #0
 8007a56:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007a58:	6a3b      	ldr	r3, [r7, #32]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d01d      	beq.n	8007a9a <osMessageGet+0xca>
 8007a5e:	4b15      	ldr	r3, [pc, #84]	; (8007ab4 <osMessageGet+0xe4>)
 8007a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	e014      	b.n	8007a9a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007a70:	f107 0314 	add.w	r3, r7, #20
 8007a74:	3304      	adds	r3, #4
 8007a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a78:	4619      	mov	r1, r3
 8007a7a:	68b8      	ldr	r0, [r7, #8]
 8007a7c:	f000 fb9e 	bl	80081bc <xQueueReceive>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d102      	bne.n	8007a8c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007a86:	2310      	movs	r3, #16
 8007a88:	617b      	str	r3, [r7, #20]
 8007a8a:	e006      	b.n	8007a9a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <osMessageGet+0xc6>
 8007a92:	2300      	movs	r3, #0
 8007a94:	e000      	b.n	8007a98 <osMessageGet+0xc8>
 8007a96:	2340      	movs	r3, #64	; 0x40
 8007a98:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	461c      	mov	r4, r3
 8007a9e:	f107 0314 	add.w	r3, r7, #20
 8007aa2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007aa6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	372c      	adds	r7, #44	; 0x2c
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd90      	pop	{r4, r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	e000ed04 	.word	0xe000ed04

08007ab8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f103 0208 	add.w	r2, r3, #8
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f04f 32ff 	mov.w	r2, #4294967295
 8007ad0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f103 0208 	add.w	r2, r3, #8
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f103 0208 	add.w	r2, r3, #8
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bc80      	pop	{r7}
 8007af4:	4770      	bx	lr

08007af6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007af6:	b480      	push	{r7}
 8007af8:	b083      	sub	sp, #12
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2200      	movs	r2, #0
 8007b02:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b04:	bf00      	nop
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bc80      	pop	{r7}
 8007b0c:	4770      	bx	lr

08007b0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b085      	sub	sp, #20
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	689a      	ldr	r2, [r3, #8]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	683a      	ldr	r2, [r7, #0]
 8007b32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	1c5a      	adds	r2, r3, #1
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	601a      	str	r2, [r3, #0]
}
 8007b4a:	bf00      	nop
 8007b4c:	3714      	adds	r7, #20
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bc80      	pop	{r7}
 8007b52:	4770      	bx	lr

08007b54 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6a:	d103      	bne.n	8007b74 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	60fb      	str	r3, [r7, #12]
 8007b72:	e00c      	b.n	8007b8e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	3308      	adds	r3, #8
 8007b78:	60fb      	str	r3, [r7, #12]
 8007b7a:	e002      	b.n	8007b82 <vListInsert+0x2e>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	60fb      	str	r3, [r7, #12]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d2f6      	bcs.n	8007b7c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	685a      	ldr	r2, [r3, #4]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	685b      	ldr	r3, [r3, #4]
 8007b9a:	683a      	ldr	r2, [r7, #0]
 8007b9c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	601a      	str	r2, [r3, #0]
}
 8007bba:	bf00      	nop
 8007bbc:	3714      	adds	r7, #20
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bc80      	pop	{r7}
 8007bc2:	4770      	bx	lr

08007bc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	6892      	ldr	r2, [r2, #8]
 8007bda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	6852      	ldr	r2, [r2, #4]
 8007be4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d103      	bne.n	8007bf8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	689a      	ldr	r2, [r3, #8]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	1e5a      	subs	r2, r3, #1
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bc80      	pop	{r7}
 8007c14:	4770      	bx	lr
	...

08007c18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d10a      	bne.n	8007c42 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c30:	f383 8811 	msr	BASEPRI, r3
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007c3e:	bf00      	nop
 8007c40:	e7fe      	b.n	8007c40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007c42:	f001 fceb 	bl	800961c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681a      	ldr	r2, [r3, #0]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c4e:	68f9      	ldr	r1, [r7, #12]
 8007c50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c52:	fb01 f303 	mul.w	r3, r1, r3
 8007c56:	441a      	add	r2, r3
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c72:	3b01      	subs	r3, #1
 8007c74:	68f9      	ldr	r1, [r7, #12]
 8007c76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c78:	fb01 f303 	mul.w	r3, r1, r3
 8007c7c:	441a      	add	r2, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	22ff      	movs	r2, #255	; 0xff
 8007c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	22ff      	movs	r2, #255	; 0xff
 8007c8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d114      	bne.n	8007cc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d01a      	beq.n	8007cd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3310      	adds	r3, #16
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f001 f8fd 	bl	8008ea4 <xTaskRemoveFromEventList>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d012      	beq.n	8007cd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007cb0:	4b0c      	ldr	r3, [pc, #48]	; (8007ce4 <xQueueGenericReset+0xcc>)
 8007cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	f3bf 8f4f 	dsb	sy
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	e009      	b.n	8007cd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	3310      	adds	r3, #16
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7ff fef6 	bl	8007ab8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	3324      	adds	r3, #36	; 0x24
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7ff fef1 	bl	8007ab8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007cd6:	f001 fcd1 	bl	800967c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007cda:	2301      	movs	r3, #1
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	e000ed04 	.word	0xe000ed04

08007ce8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08e      	sub	sp, #56	; 0x38
 8007cec:	af02      	add	r7, sp, #8
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
 8007cf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10a      	bne.n	8007d12 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d0e:	bf00      	nop
 8007d10:	e7fe      	b.n	8007d10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10a      	bne.n	8007d2e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d2a:	bf00      	nop
 8007d2c:	e7fe      	b.n	8007d2c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <xQueueGenericCreateStatic+0x52>
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <xQueueGenericCreateStatic+0x56>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e000      	b.n	8007d40 <xQueueGenericCreateStatic+0x58>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10a      	bne.n	8007d5a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	623b      	str	r3, [r7, #32]
}
 8007d56:	bf00      	nop
 8007d58:	e7fe      	b.n	8007d58 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d102      	bne.n	8007d66 <xQueueGenericCreateStatic+0x7e>
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <xQueueGenericCreateStatic+0x82>
 8007d66:	2301      	movs	r3, #1
 8007d68:	e000      	b.n	8007d6c <xQueueGenericCreateStatic+0x84>
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10a      	bne.n	8007d86 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	61fb      	str	r3, [r7, #28]
}
 8007d82:	bf00      	nop
 8007d84:	e7fe      	b.n	8007d84 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007d86:	2348      	movs	r3, #72	; 0x48
 8007d88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	2b48      	cmp	r3, #72	; 0x48
 8007d8e:	d00a      	beq.n	8007da6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	61bb      	str	r3, [r7, #24]
}
 8007da2:	bf00      	nop
 8007da4:	e7fe      	b.n	8007da4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00d      	beq.n	8007dcc <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007db8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	68b9      	ldr	r1, [r7, #8]
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f000 f843 	bl	8007e52 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3730      	adds	r7, #48	; 0x30
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b08a      	sub	sp, #40	; 0x28
 8007dda:	af02      	add	r7, sp, #8
 8007ddc:	60f8      	str	r0, [r7, #12]
 8007dde:	60b9      	str	r1, [r7, #8]
 8007de0:	4613      	mov	r3, r2
 8007de2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10a      	bne.n	8007e00 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	613b      	str	r3, [r7, #16]
}
 8007dfc:	bf00      	nop
 8007dfe:	e7fe      	b.n	8007dfe <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d102      	bne.n	8007e0c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	61fb      	str	r3, [r7, #28]
 8007e0a:	e004      	b.n	8007e16 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	fb02 f303 	mul.w	r3, r2, r3
 8007e14:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	3348      	adds	r3, #72	; 0x48
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f001 fcfe 	bl	800981c <pvPortMalloc>
 8007e20:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00f      	beq.n	8007e48 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	3348      	adds	r3, #72	; 0x48
 8007e2c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e36:	79fa      	ldrb	r2, [r7, #7]
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	68b9      	ldr	r1, [r7, #8]
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f000 f805 	bl	8007e52 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007e48:	69bb      	ldr	r3, [r7, #24]
	}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3720      	adds	r7, #32
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	607a      	str	r2, [r7, #4]
 8007e5e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d103      	bne.n	8007e6e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	e002      	b.n	8007e74 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	687a      	ldr	r2, [r7, #4]
 8007e72:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e7a:	69bb      	ldr	r3, [r7, #24]
 8007e7c:	68ba      	ldr	r2, [r7, #8]
 8007e7e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e80:	2101      	movs	r1, #1
 8007e82:	69b8      	ldr	r0, [r7, #24]
 8007e84:	f7ff fec8 	bl	8007c18 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e88:	bf00      	nop
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b08e      	sub	sp, #56	; 0x38
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10a      	bne.n	8007ec2 <xQueueGenericSend+0x32>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ebe:	bf00      	nop
 8007ec0:	e7fe      	b.n	8007ec0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d103      	bne.n	8007ed0 <xQueueGenericSend+0x40>
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d101      	bne.n	8007ed4 <xQueueGenericSend+0x44>
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e000      	b.n	8007ed6 <xQueueGenericSend+0x46>
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d10a      	bne.n	8007ef0 <xQueueGenericSend+0x60>
	__asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007eec:	bf00      	nop
 8007eee:	e7fe      	b.n	8007eee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d103      	bne.n	8007efe <xQueueGenericSend+0x6e>
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d101      	bne.n	8007f02 <xQueueGenericSend+0x72>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e000      	b.n	8007f04 <xQueueGenericSend+0x74>
 8007f02:	2300      	movs	r3, #0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d10a      	bne.n	8007f1e <xQueueGenericSend+0x8e>
	__asm volatile
 8007f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	623b      	str	r3, [r7, #32]
}
 8007f1a:	bf00      	nop
 8007f1c:	e7fe      	b.n	8007f1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f1e:	f001 f981 	bl	8009224 <xTaskGetSchedulerState>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d102      	bne.n	8007f2e <xQueueGenericSend+0x9e>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <xQueueGenericSend+0xa2>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e000      	b.n	8007f34 <xQueueGenericSend+0xa4>
 8007f32:	2300      	movs	r3, #0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10a      	bne.n	8007f4e <xQueueGenericSend+0xbe>
	__asm volatile
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	61fb      	str	r3, [r7, #28]
}
 8007f4a:	bf00      	nop
 8007f4c:	e7fe      	b.n	8007f4c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f4e:	f001 fb65 	bl	800961c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d302      	bcc.n	8007f64 <xQueueGenericSend+0xd4>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	2b02      	cmp	r3, #2
 8007f62:	d129      	bne.n	8007fb8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f64:	683a      	ldr	r2, [r7, #0]
 8007f66:	68b9      	ldr	r1, [r7, #8]
 8007f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f6a:	f000 fa87 	bl	800847c <prvCopyDataToQueue>
 8007f6e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d010      	beq.n	8007f9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7a:	3324      	adds	r3, #36	; 0x24
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 ff91 	bl	8008ea4 <xTaskRemoveFromEventList>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d013      	beq.n	8007fb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007f88:	4b3f      	ldr	r3, [pc, #252]	; (8008088 <xQueueGenericSend+0x1f8>)
 8007f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	e00a      	b.n	8007fb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d007      	beq.n	8007fb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007fa0:	4b39      	ldr	r3, [pc, #228]	; (8008088 <xQueueGenericSend+0x1f8>)
 8007fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007fb0:	f001 fb64 	bl	800967c <vPortExitCritical>
				return pdPASS;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e063      	b.n	8008080 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d103      	bne.n	8007fc6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fbe:	f001 fb5d 	bl	800967c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	e05c      	b.n	8008080 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d106      	bne.n	8007fda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fcc:	f107 0314 	add.w	r3, r7, #20
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f000 ffc9 	bl	8008f68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fda:	f001 fb4f 	bl	800967c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fde:	f000 fd7b 	bl	8008ad8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fe2:	f001 fb1b 	bl	800961c <vPortEnterCritical>
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fec:	b25b      	sxtb	r3, r3
 8007fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ff2:	d103      	bne.n	8007ffc <xQueueGenericSend+0x16c>
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008002:	b25b      	sxtb	r3, r3
 8008004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008008:	d103      	bne.n	8008012 <xQueueGenericSend+0x182>
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008012:	f001 fb33 	bl	800967c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008016:	1d3a      	adds	r2, r7, #4
 8008018:	f107 0314 	add.w	r3, r7, #20
 800801c:	4611      	mov	r1, r2
 800801e:	4618      	mov	r0, r3
 8008020:	f000 ffb8 	bl	8008f94 <xTaskCheckForTimeOut>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d124      	bne.n	8008074 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800802a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800802c:	f000 fb1e 	bl	800866c <prvIsQueueFull>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d018      	beq.n	8008068 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008038:	3310      	adds	r3, #16
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	4611      	mov	r1, r2
 800803e:	4618      	mov	r0, r3
 8008040:	f000 ff0c 	bl	8008e5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008046:	f000 faa9 	bl	800859c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800804a:	f000 fd53 	bl	8008af4 <xTaskResumeAll>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	f47f af7c 	bne.w	8007f4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008056:	4b0c      	ldr	r3, [pc, #48]	; (8008088 <xQueueGenericSend+0x1f8>)
 8008058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800805c:	601a      	str	r2, [r3, #0]
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	e772      	b.n	8007f4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800806a:	f000 fa97 	bl	800859c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800806e:	f000 fd41 	bl	8008af4 <xTaskResumeAll>
 8008072:	e76c      	b.n	8007f4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008076:	f000 fa91 	bl	800859c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800807a:	f000 fd3b 	bl	8008af4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800807e:	2300      	movs	r3, #0
		}
	}
}
 8008080:	4618      	mov	r0, r3
 8008082:	3738      	adds	r7, #56	; 0x38
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	e000ed04 	.word	0xe000ed04

0800808c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08e      	sub	sp, #56	; 0x38
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800809e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10a      	bne.n	80080ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80080a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a8:	f383 8811 	msr	BASEPRI, r3
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	f3bf 8f4f 	dsb	sy
 80080b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080b6:	bf00      	nop
 80080b8:	e7fe      	b.n	80080b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d103      	bne.n	80080c8 <xQueueGenericSendFromISR+0x3c>
 80080c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <xQueueGenericSendFromISR+0x40>
 80080c8:	2301      	movs	r3, #1
 80080ca:	e000      	b.n	80080ce <xQueueGenericSendFromISR+0x42>
 80080cc:	2300      	movs	r3, #0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10a      	bne.n	80080e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	623b      	str	r3, [r7, #32]
}
 80080e4:	bf00      	nop
 80080e6:	e7fe      	b.n	80080e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d103      	bne.n	80080f6 <xQueueGenericSendFromISR+0x6a>
 80080ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d101      	bne.n	80080fa <xQueueGenericSendFromISR+0x6e>
 80080f6:	2301      	movs	r3, #1
 80080f8:	e000      	b.n	80080fc <xQueueGenericSendFromISR+0x70>
 80080fa:	2300      	movs	r3, #0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10a      	bne.n	8008116 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	61fb      	str	r3, [r7, #28]
}
 8008112:	bf00      	nop
 8008114:	e7fe      	b.n	8008114 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008116:	f001 fb43 	bl	80097a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800811a:	f3ef 8211 	mrs	r2, BASEPRI
 800811e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	61ba      	str	r2, [r7, #24]
 8008130:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008132:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008134:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800813e:	429a      	cmp	r2, r3
 8008140:	d302      	bcc.n	8008148 <xQueueGenericSendFromISR+0xbc>
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	2b02      	cmp	r3, #2
 8008146:	d12c      	bne.n	80081a2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800814e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	68b9      	ldr	r1, [r7, #8]
 8008156:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008158:	f000 f990 	bl	800847c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800815c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008164:	d112      	bne.n	800818c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	2b00      	cmp	r3, #0
 800816c:	d016      	beq.n	800819c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800816e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008170:	3324      	adds	r3, #36	; 0x24
 8008172:	4618      	mov	r0, r3
 8008174:	f000 fe96 	bl	8008ea4 <xTaskRemoveFromEventList>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00e      	beq.n	800819c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00b      	beq.n	800819c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	e007      	b.n	800819c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800818c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008190:	3301      	adds	r3, #1
 8008192:	b2db      	uxtb	r3, r3
 8008194:	b25a      	sxtb	r2, r3
 8008196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800819c:	2301      	movs	r3, #1
 800819e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80081a0:	e001      	b.n	80081a6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	637b      	str	r3, [r7, #52]	; 0x34
 80081a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80081b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3738      	adds	r7, #56	; 0x38
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b08c      	sub	sp, #48	; 0x30
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80081c8:	2300      	movs	r3, #0
 80081ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d10a      	bne.n	80081ec <xQueueReceive+0x30>
	__asm volatile
 80081d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	623b      	str	r3, [r7, #32]
}
 80081e8:	bf00      	nop
 80081ea:	e7fe      	b.n	80081ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d103      	bne.n	80081fa <xQueueReceive+0x3e>
 80081f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <xQueueReceive+0x42>
 80081fa:	2301      	movs	r3, #1
 80081fc:	e000      	b.n	8008200 <xQueueReceive+0x44>
 80081fe:	2300      	movs	r3, #0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <xQueueReceive+0x5e>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	61fb      	str	r3, [r7, #28]
}
 8008216:	bf00      	nop
 8008218:	e7fe      	b.n	8008218 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800821a:	f001 f803 	bl	8009224 <xTaskGetSchedulerState>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d102      	bne.n	800822a <xQueueReceive+0x6e>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <xQueueReceive+0x72>
 800822a:	2301      	movs	r3, #1
 800822c:	e000      	b.n	8008230 <xQueueReceive+0x74>
 800822e:	2300      	movs	r3, #0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10a      	bne.n	800824a <xQueueReceive+0x8e>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	61bb      	str	r3, [r7, #24]
}
 8008246:	bf00      	nop
 8008248:	e7fe      	b.n	8008248 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800824a:	f001 f9e7 	bl	800961c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800824e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008252:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008256:	2b00      	cmp	r3, #0
 8008258:	d01f      	beq.n	800829a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800825a:	68b9      	ldr	r1, [r7, #8]
 800825c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800825e:	f000 f977 	bl	8008550 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	1e5a      	subs	r2, r3, #1
 8008266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008268:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00f      	beq.n	8008292 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008274:	3310      	adds	r3, #16
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fe14 	bl	8008ea4 <xTaskRemoveFromEventList>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d007      	beq.n	8008292 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008282:	4b3d      	ldr	r3, [pc, #244]	; (8008378 <xQueueReceive+0x1bc>)
 8008284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008288:	601a      	str	r2, [r3, #0]
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008292:	f001 f9f3 	bl	800967c <vPortExitCritical>
				return pdPASS;
 8008296:	2301      	movs	r3, #1
 8008298:	e069      	b.n	800836e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d103      	bne.n	80082a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082a0:	f001 f9ec 	bl	800967c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082a4:	2300      	movs	r3, #0
 80082a6:	e062      	b.n	800836e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d106      	bne.n	80082bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082ae:	f107 0310 	add.w	r3, r7, #16
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 fe58 	bl	8008f68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082b8:	2301      	movs	r3, #1
 80082ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082bc:	f001 f9de 	bl	800967c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082c0:	f000 fc0a 	bl	8008ad8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082c4:	f001 f9aa 	bl	800961c <vPortEnterCritical>
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082ce:	b25b      	sxtb	r3, r3
 80082d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d4:	d103      	bne.n	80082de <xQueueReceive+0x122>
 80082d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082e4:	b25b      	sxtb	r3, r3
 80082e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ea:	d103      	bne.n	80082f4 <xQueueReceive+0x138>
 80082ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082f4:	f001 f9c2 	bl	800967c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082f8:	1d3a      	adds	r2, r7, #4
 80082fa:	f107 0310 	add.w	r3, r7, #16
 80082fe:	4611      	mov	r1, r2
 8008300:	4618      	mov	r0, r3
 8008302:	f000 fe47 	bl	8008f94 <xTaskCheckForTimeOut>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d123      	bne.n	8008354 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800830c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800830e:	f000 f997 	bl	8008640 <prvIsQueueEmpty>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d017      	beq.n	8008348 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800831a:	3324      	adds	r3, #36	; 0x24
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	4611      	mov	r1, r2
 8008320:	4618      	mov	r0, r3
 8008322:	f000 fd9b 	bl	8008e5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008328:	f000 f938 	bl	800859c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800832c:	f000 fbe2 	bl	8008af4 <xTaskResumeAll>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d189      	bne.n	800824a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008336:	4b10      	ldr	r3, [pc, #64]	; (8008378 <xQueueReceive+0x1bc>)
 8008338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	f3bf 8f4f 	dsb	sy
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	e780      	b.n	800824a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800834a:	f000 f927 	bl	800859c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800834e:	f000 fbd1 	bl	8008af4 <xTaskResumeAll>
 8008352:	e77a      	b.n	800824a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008356:	f000 f921 	bl	800859c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800835a:	f000 fbcb 	bl	8008af4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800835e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008360:	f000 f96e 	bl	8008640 <prvIsQueueEmpty>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	f43f af6f 	beq.w	800824a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800836c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800836e:	4618      	mov	r0, r3
 8008370:	3730      	adds	r7, #48	; 0x30
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	e000ed04 	.word	0xe000ed04

0800837c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b08e      	sub	sp, #56	; 0x38
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800838c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10a      	bne.n	80083a8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	623b      	str	r3, [r7, #32]
}
 80083a4:	bf00      	nop
 80083a6:	e7fe      	b.n	80083a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d103      	bne.n	80083b6 <xQueueReceiveFromISR+0x3a>
 80083ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <xQueueReceiveFromISR+0x3e>
 80083b6:	2301      	movs	r3, #1
 80083b8:	e000      	b.n	80083bc <xQueueReceiveFromISR+0x40>
 80083ba:	2300      	movs	r3, #0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10a      	bne.n	80083d6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	61fb      	str	r3, [r7, #28]
}
 80083d2:	bf00      	nop
 80083d4:	e7fe      	b.n	80083d4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083d6:	f001 f9e3 	bl	80097a0 <vPortValidateInterruptPriority>
	__asm volatile
 80083da:	f3ef 8211 	mrs	r2, BASEPRI
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	61ba      	str	r2, [r7, #24]
 80083f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80083f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d02f      	beq.n	8008462 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008404:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800840c:	68b9      	ldr	r1, [r7, #8]
 800840e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008410:	f000 f89e 	bl	8008550 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008416:	1e5a      	subs	r2, r3, #1
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800841c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008424:	d112      	bne.n	800844c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d016      	beq.n	800845c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800842e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008430:	3310      	adds	r3, #16
 8008432:	4618      	mov	r0, r3
 8008434:	f000 fd36 	bl	8008ea4 <xTaskRemoveFromEventList>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00e      	beq.n	800845c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00b      	beq.n	800845c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	601a      	str	r2, [r3, #0]
 800844a:	e007      	b.n	800845c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800844c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008450:	3301      	adds	r3, #1
 8008452:	b2db      	uxtb	r3, r3
 8008454:	b25a      	sxtb	r2, r3
 8008456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800845c:	2301      	movs	r3, #1
 800845e:	637b      	str	r3, [r7, #52]	; 0x34
 8008460:	e001      	b.n	8008466 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008462:	2300      	movs	r3, #0
 8008464:	637b      	str	r3, [r7, #52]	; 0x34
 8008466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008468:	613b      	str	r3, [r7, #16]
	__asm volatile
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	f383 8811 	msr	BASEPRI, r3
}
 8008470:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008474:	4618      	mov	r0, r3
 8008476:	3738      	adds	r7, #56	; 0x38
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008488:	2300      	movs	r3, #0
 800848a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008490:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008496:	2b00      	cmp	r3, #0
 8008498:	d10d      	bne.n	80084b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d14d      	bne.n	800853e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 feda 	bl	8009260 <xTaskPriorityDisinherit>
 80084ac:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	605a      	str	r2, [r3, #4]
 80084b4:	e043      	b.n	800853e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d119      	bne.n	80084f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6898      	ldr	r0, [r3, #8]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c4:	461a      	mov	r2, r3
 80084c6:	68b9      	ldr	r1, [r7, #8]
 80084c8:	f001 fecc 	bl	800a264 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	689a      	ldr	r2, [r3, #8]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d4:	441a      	add	r2, r3
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	689a      	ldr	r2, [r3, #8]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d32b      	bcc.n	800853e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	609a      	str	r2, [r3, #8]
 80084ee:	e026      	b.n	800853e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	68d8      	ldr	r0, [r3, #12]
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f8:	461a      	mov	r2, r3
 80084fa:	68b9      	ldr	r1, [r7, #8]
 80084fc:	f001 feb2 	bl	800a264 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	68da      	ldr	r2, [r3, #12]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008508:	425b      	negs	r3, r3
 800850a:	441a      	add	r2, r3
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	68da      	ldr	r2, [r3, #12]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	429a      	cmp	r2, r3
 800851a:	d207      	bcs.n	800852c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	685a      	ldr	r2, [r3, #4]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008524:	425b      	negs	r3, r3
 8008526:	441a      	add	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b02      	cmp	r3, #2
 8008530:	d105      	bne.n	800853e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	3b01      	subs	r3, #1
 800853c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	1c5a      	adds	r2, r3, #1
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008546:	697b      	ldr	r3, [r7, #20]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3718      	adds	r7, #24
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855e:	2b00      	cmp	r3, #0
 8008560:	d018      	beq.n	8008594 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	68da      	ldr	r2, [r3, #12]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856a:	441a      	add	r2, r3
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68da      	ldr	r2, [r3, #12]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	429a      	cmp	r2, r3
 800857a:	d303      	bcc.n	8008584 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	68d9      	ldr	r1, [r3, #12]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858c:	461a      	mov	r2, r3
 800858e:	6838      	ldr	r0, [r7, #0]
 8008590:	f001 fe68 	bl	800a264 <memcpy>
	}
}
 8008594:	bf00      	nop
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085a4:	f001 f83a 	bl	800961c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085b0:	e011      	b.n	80085d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d012      	beq.n	80085e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	3324      	adds	r3, #36	; 0x24
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fc70 	bl	8008ea4 <xTaskRemoveFromEventList>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80085ca:	f000 fd45 	bl	8009058 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80085ce:	7bfb      	ldrb	r3, [r7, #15]
 80085d0:	3b01      	subs	r3, #1
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	dce9      	bgt.n	80085b2 <prvUnlockQueue+0x16>
 80085de:	e000      	b.n	80085e2 <prvUnlockQueue+0x46>
					break;
 80085e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	22ff      	movs	r2, #255	; 0xff
 80085e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80085ea:	f001 f847 	bl	800967c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80085ee:	f001 f815 	bl	800961c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085fa:	e011      	b.n	8008620 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d012      	beq.n	800862a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	3310      	adds	r3, #16
 8008608:	4618      	mov	r0, r3
 800860a:	f000 fc4b 	bl	8008ea4 <xTaskRemoveFromEventList>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008614:	f000 fd20 	bl	8009058 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008618:	7bbb      	ldrb	r3, [r7, #14]
 800861a:	3b01      	subs	r3, #1
 800861c:	b2db      	uxtb	r3, r3
 800861e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008620:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008624:	2b00      	cmp	r3, #0
 8008626:	dce9      	bgt.n	80085fc <prvUnlockQueue+0x60>
 8008628:	e000      	b.n	800862c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800862a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	22ff      	movs	r2, #255	; 0xff
 8008630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008634:	f001 f822 	bl	800967c <vPortExitCritical>
}
 8008638:	bf00      	nop
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008648:	f000 ffe8 	bl	800961c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008650:	2b00      	cmp	r3, #0
 8008652:	d102      	bne.n	800865a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008654:	2301      	movs	r3, #1
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	e001      	b.n	800865e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800865a:	2300      	movs	r3, #0
 800865c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800865e:	f001 f80d 	bl	800967c <vPortExitCritical>

	return xReturn;
 8008662:	68fb      	ldr	r3, [r7, #12]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008674:	f000 ffd2 	bl	800961c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008680:	429a      	cmp	r2, r3
 8008682:	d102      	bne.n	800868a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008684:	2301      	movs	r3, #1
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	e001      	b.n	800868e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800868a:	2300      	movs	r3, #0
 800868c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800868e:	f000 fff5 	bl	800967c <vPortExitCritical>

	return xReturn;
 8008692:	68fb      	ldr	r3, [r7, #12]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800869c:	b580      	push	{r7, lr}
 800869e:	b08e      	sub	sp, #56	; 0x38
 80086a0:	af04      	add	r7, sp, #16
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	607a      	str	r2, [r7, #4]
 80086a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10a      	bne.n	80086c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	623b      	str	r3, [r7, #32]
}
 80086c2:	bf00      	nop
 80086c4:	e7fe      	b.n	80086c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10a      	bne.n	80086e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80086cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d0:	f383 8811 	msr	BASEPRI, r3
 80086d4:	f3bf 8f6f 	isb	sy
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	61fb      	str	r3, [r7, #28]
}
 80086de:	bf00      	nop
 80086e0:	e7fe      	b.n	80086e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086e2:	2354      	movs	r3, #84	; 0x54
 80086e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	2b54      	cmp	r3, #84	; 0x54
 80086ea:	d00a      	beq.n	8008702 <xTaskCreateStatic+0x66>
	__asm volatile
 80086ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f0:	f383 8811 	msr	BASEPRI, r3
 80086f4:	f3bf 8f6f 	isb	sy
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	61bb      	str	r3, [r7, #24]
}
 80086fe:	bf00      	nop
 8008700:	e7fe      	b.n	8008700 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008704:	2b00      	cmp	r3, #0
 8008706:	d01e      	beq.n	8008746 <xTaskCreateStatic+0xaa>
 8008708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870a:	2b00      	cmp	r3, #0
 800870c:	d01b      	beq.n	8008746 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800870e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008710:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008714:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008716:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871a:	2202      	movs	r2, #2
 800871c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008720:	2300      	movs	r3, #0
 8008722:	9303      	str	r3, [sp, #12]
 8008724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008726:	9302      	str	r3, [sp, #8]
 8008728:	f107 0314 	add.w	r3, r7, #20
 800872c:	9301      	str	r3, [sp, #4]
 800872e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	68b9      	ldr	r1, [r7, #8]
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f000 f850 	bl	80087de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800873e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008740:	f000 f8cc 	bl	80088dc <prvAddNewTaskToReadyList>
 8008744:	e001      	b.n	800874a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008746:	2300      	movs	r3, #0
 8008748:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800874a:	697b      	ldr	r3, [r7, #20]
	}
 800874c:	4618      	mov	r0, r3
 800874e:	3728      	adds	r7, #40	; 0x28
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008754:	b580      	push	{r7, lr}
 8008756:	b08c      	sub	sp, #48	; 0x30
 8008758:	af04      	add	r7, sp, #16
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	603b      	str	r3, [r7, #0]
 8008760:	4613      	mov	r3, r2
 8008762:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008764:	88fb      	ldrh	r3, [r7, #6]
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4618      	mov	r0, r3
 800876a:	f001 f857 	bl	800981c <pvPortMalloc>
 800876e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00e      	beq.n	8008794 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008776:	2054      	movs	r0, #84	; 0x54
 8008778:	f001 f850 	bl	800981c <pvPortMalloc>
 800877c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d003      	beq.n	800878c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	697a      	ldr	r2, [r7, #20]
 8008788:	631a      	str	r2, [r3, #48]	; 0x30
 800878a:	e005      	b.n	8008798 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800878c:	6978      	ldr	r0, [r7, #20]
 800878e:	f001 f909 	bl	80099a4 <vPortFree>
 8008792:	e001      	b.n	8008798 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008794:	2300      	movs	r3, #0
 8008796:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d017      	beq.n	80087ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087a6:	88fa      	ldrh	r2, [r7, #6]
 80087a8:	2300      	movs	r3, #0
 80087aa:	9303      	str	r3, [sp, #12]
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	9302      	str	r3, [sp, #8]
 80087b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b2:	9301      	str	r3, [sp, #4]
 80087b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	68b9      	ldr	r1, [r7, #8]
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f000 f80e 	bl	80087de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087c2:	69f8      	ldr	r0, [r7, #28]
 80087c4:	f000 f88a 	bl	80088dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087c8:	2301      	movs	r3, #1
 80087ca:	61bb      	str	r3, [r7, #24]
 80087cc:	e002      	b.n	80087d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087ce:	f04f 33ff 	mov.w	r3, #4294967295
 80087d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087d4:	69bb      	ldr	r3, [r7, #24]
	}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3720      	adds	r7, #32
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}

080087de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087de:	b580      	push	{r7, lr}
 80087e0:	b088      	sub	sp, #32
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	60f8      	str	r0, [r7, #12]
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	607a      	str	r2, [r7, #4]
 80087ea:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80087ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80087f6:	3b01      	subs	r3, #1
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4413      	add	r3, r2
 80087fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	f023 0307 	bic.w	r3, r3, #7
 8008804:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	f003 0307 	and.w	r3, r3, #7
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00a      	beq.n	8008826 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	617b      	str	r3, [r7, #20]
}
 8008822:	bf00      	nop
 8008824:	e7fe      	b.n	8008824 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008826:	2300      	movs	r3, #0
 8008828:	61fb      	str	r3, [r7, #28]
 800882a:	e012      	b.n	8008852 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800882c:	68ba      	ldr	r2, [r7, #8]
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	4413      	add	r3, r2
 8008832:	7819      	ldrb	r1, [r3, #0]
 8008834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	4413      	add	r3, r2
 800883a:	3334      	adds	r3, #52	; 0x34
 800883c:	460a      	mov	r2, r1
 800883e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	4413      	add	r3, r2
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d006      	beq.n	800885a <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	3301      	adds	r3, #1
 8008850:	61fb      	str	r3, [r7, #28]
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	2b0f      	cmp	r3, #15
 8008856:	d9e9      	bls.n	800882c <prvInitialiseNewTask+0x4e>
 8008858:	e000      	b.n	800885c <prvInitialiseNewTask+0x7e>
		{
			break;
 800885a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800885c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885e:	2200      	movs	r2, #0
 8008860:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008866:	2b06      	cmp	r3, #6
 8008868:	d901      	bls.n	800886e <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800886a:	2306      	movs	r3, #6
 800886c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800886e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008872:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008878:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887c:	2200      	movs	r2, #0
 800887e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008882:	3304      	adds	r3, #4
 8008884:	4618      	mov	r0, r3
 8008886:	f7ff f936 	bl	8007af6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800888a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888c:	3318      	adds	r3, #24
 800888e:	4618      	mov	r0, r3
 8008890:	f7ff f931 	bl	8007af6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008898:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800889a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889c:	f1c3 0207 	rsb	r2, r3, #7
 80088a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088a8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	2200      	movs	r2, #0
 80088ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088b8:	683a      	ldr	r2, [r7, #0]
 80088ba:	68f9      	ldr	r1, [r7, #12]
 80088bc:	69b8      	ldr	r0, [r7, #24]
 80088be:	f000 fdbb 	bl	8009438 <pxPortInitialiseStack>
 80088c2:	4602      	mov	r2, r0
 80088c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80088c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d002      	beq.n	80088d4 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088d2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088d4:	bf00      	nop
 80088d6:	3720      	adds	r7, #32
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80088e4:	f000 fe9a 	bl	800961c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80088e8:	4b2a      	ldr	r3, [pc, #168]	; (8008994 <prvAddNewTaskToReadyList+0xb8>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3301      	adds	r3, #1
 80088ee:	4a29      	ldr	r2, [pc, #164]	; (8008994 <prvAddNewTaskToReadyList+0xb8>)
 80088f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80088f2:	4b29      	ldr	r3, [pc, #164]	; (8008998 <prvAddNewTaskToReadyList+0xbc>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d109      	bne.n	800890e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088fa:	4a27      	ldr	r2, [pc, #156]	; (8008998 <prvAddNewTaskToReadyList+0xbc>)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008900:	4b24      	ldr	r3, [pc, #144]	; (8008994 <prvAddNewTaskToReadyList+0xb8>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d110      	bne.n	800892a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008908:	f000 fbca 	bl	80090a0 <prvInitialiseTaskLists>
 800890c:	e00d      	b.n	800892a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800890e:	4b23      	ldr	r3, [pc, #140]	; (800899c <prvAddNewTaskToReadyList+0xc0>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d109      	bne.n	800892a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008916:	4b20      	ldr	r3, [pc, #128]	; (8008998 <prvAddNewTaskToReadyList+0xbc>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008920:	429a      	cmp	r2, r3
 8008922:	d802      	bhi.n	800892a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008924:	4a1c      	ldr	r2, [pc, #112]	; (8008998 <prvAddNewTaskToReadyList+0xbc>)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800892a:	4b1d      	ldr	r3, [pc, #116]	; (80089a0 <prvAddNewTaskToReadyList+0xc4>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	3301      	adds	r3, #1
 8008930:	4a1b      	ldr	r2, [pc, #108]	; (80089a0 <prvAddNewTaskToReadyList+0xc4>)
 8008932:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008938:	2201      	movs	r2, #1
 800893a:	409a      	lsls	r2, r3
 800893c:	4b19      	ldr	r3, [pc, #100]	; (80089a4 <prvAddNewTaskToReadyList+0xc8>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4313      	orrs	r3, r2
 8008942:	4a18      	ldr	r2, [pc, #96]	; (80089a4 <prvAddNewTaskToReadyList+0xc8>)
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800894a:	4613      	mov	r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	4413      	add	r3, r2
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4a15      	ldr	r2, [pc, #84]	; (80089a8 <prvAddNewTaskToReadyList+0xcc>)
 8008954:	441a      	add	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	3304      	adds	r3, #4
 800895a:	4619      	mov	r1, r3
 800895c:	4610      	mov	r0, r2
 800895e:	f7ff f8d6 	bl	8007b0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008962:	f000 fe8b 	bl	800967c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008966:	4b0d      	ldr	r3, [pc, #52]	; (800899c <prvAddNewTaskToReadyList+0xc0>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00e      	beq.n	800898c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800896e:	4b0a      	ldr	r3, [pc, #40]	; (8008998 <prvAddNewTaskToReadyList+0xbc>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008978:	429a      	cmp	r2, r3
 800897a:	d207      	bcs.n	800898c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800897c:	4b0b      	ldr	r3, [pc, #44]	; (80089ac <prvAddNewTaskToReadyList+0xd0>)
 800897e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008982:	601a      	str	r2, [r3, #0]
 8008984:	f3bf 8f4f 	dsb	sy
 8008988:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800898c:	bf00      	nop
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	200004ac 	.word	0x200004ac
 8008998:	200003ac 	.word	0x200003ac
 800899c:	200004b8 	.word	0x200004b8
 80089a0:	200004c8 	.word	0x200004c8
 80089a4:	200004b4 	.word	0x200004b4
 80089a8:	200003b0 	.word	0x200003b0
 80089ac:	e000ed04 	.word	0xe000ed04

080089b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089b8:	2300      	movs	r3, #0
 80089ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d017      	beq.n	80089f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089c2:	4b13      	ldr	r3, [pc, #76]	; (8008a10 <vTaskDelay+0x60>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00a      	beq.n	80089e0 <vTaskDelay+0x30>
	__asm volatile
 80089ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ce:	f383 8811 	msr	BASEPRI, r3
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	60bb      	str	r3, [r7, #8]
}
 80089dc:	bf00      	nop
 80089de:	e7fe      	b.n	80089de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80089e0:	f000 f87a 	bl	8008ad8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80089e4:	2100      	movs	r1, #0
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fcc0 	bl	800936c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80089ec:	f000 f882 	bl	8008af4 <xTaskResumeAll>
 80089f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d107      	bne.n	8008a08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80089f8:	4b06      	ldr	r3, [pc, #24]	; (8008a14 <vTaskDelay+0x64>)
 80089fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a08:	bf00      	nop
 8008a0a:	3710      	adds	r7, #16
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	200004d4 	.word	0x200004d4
 8008a14:	e000ed04 	.word	0xe000ed04

08008a18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b08a      	sub	sp, #40	; 0x28
 8008a1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a26:	463a      	mov	r2, r7
 8008a28:	1d39      	adds	r1, r7, #4
 8008a2a:	f107 0308 	add.w	r3, r7, #8
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f7f7 fd82 	bl	8000538 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	9202      	str	r2, [sp, #8]
 8008a3c:	9301      	str	r3, [sp, #4]
 8008a3e:	2300      	movs	r3, #0
 8008a40:	9300      	str	r3, [sp, #0]
 8008a42:	2300      	movs	r3, #0
 8008a44:	460a      	mov	r2, r1
 8008a46:	491e      	ldr	r1, [pc, #120]	; (8008ac0 <vTaskStartScheduler+0xa8>)
 8008a48:	481e      	ldr	r0, [pc, #120]	; (8008ac4 <vTaskStartScheduler+0xac>)
 8008a4a:	f7ff fe27 	bl	800869c <xTaskCreateStatic>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	4a1d      	ldr	r2, [pc, #116]	; (8008ac8 <vTaskStartScheduler+0xb0>)
 8008a52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a54:	4b1c      	ldr	r3, [pc, #112]	; (8008ac8 <vTaskStartScheduler+0xb0>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	617b      	str	r3, [r7, #20]
 8008a60:	e001      	b.n	8008a66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d116      	bne.n	8008a9a <vTaskStartScheduler+0x82>
	__asm volatile
 8008a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a70:	f383 8811 	msr	BASEPRI, r3
 8008a74:	f3bf 8f6f 	isb	sy
 8008a78:	f3bf 8f4f 	dsb	sy
 8008a7c:	613b      	str	r3, [r7, #16]
}
 8008a7e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a80:	4b12      	ldr	r3, [pc, #72]	; (8008acc <vTaskStartScheduler+0xb4>)
 8008a82:	f04f 32ff 	mov.w	r2, #4294967295
 8008a86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a88:	4b11      	ldr	r3, [pc, #68]	; (8008ad0 <vTaskStartScheduler+0xb8>)
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008a8e:	4b11      	ldr	r3, [pc, #68]	; (8008ad4 <vTaskStartScheduler+0xbc>)
 8008a90:	2200      	movs	r2, #0
 8008a92:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a94:	f000 fd50 	bl	8009538 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a98:	e00e      	b.n	8008ab8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa0:	d10a      	bne.n	8008ab8 <vTaskStartScheduler+0xa0>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	60fb      	str	r3, [r7, #12]
}
 8008ab4:	bf00      	nop
 8008ab6:	e7fe      	b.n	8008ab6 <vTaskStartScheduler+0x9e>
}
 8008ab8:	bf00      	nop
 8008aba:	3718      	adds	r7, #24
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	0800a568 	.word	0x0800a568
 8008ac4:	08009071 	.word	0x08009071
 8008ac8:	200004d0 	.word	0x200004d0
 8008acc:	200004cc 	.word	0x200004cc
 8008ad0:	200004b8 	.word	0x200004b8
 8008ad4:	200004b0 	.word	0x200004b0

08008ad8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008ad8:	b480      	push	{r7}
 8008ada:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008adc:	4b04      	ldr	r3, [pc, #16]	; (8008af0 <vTaskSuspendAll+0x18>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	4a03      	ldr	r2, [pc, #12]	; (8008af0 <vTaskSuspendAll+0x18>)
 8008ae4:	6013      	str	r3, [r2, #0]
}
 8008ae6:	bf00      	nop
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bc80      	pop	{r7}
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	200004d4 	.word	0x200004d4

08008af4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008afa:	2300      	movs	r3, #0
 8008afc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008afe:	2300      	movs	r3, #0
 8008b00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b02:	4b41      	ldr	r3, [pc, #260]	; (8008c08 <xTaskResumeAll+0x114>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10a      	bne.n	8008b20 <xTaskResumeAll+0x2c>
	__asm volatile
 8008b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	603b      	str	r3, [r7, #0]
}
 8008b1c:	bf00      	nop
 8008b1e:	e7fe      	b.n	8008b1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b20:	f000 fd7c 	bl	800961c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b24:	4b38      	ldr	r3, [pc, #224]	; (8008c08 <xTaskResumeAll+0x114>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	3b01      	subs	r3, #1
 8008b2a:	4a37      	ldr	r2, [pc, #220]	; (8008c08 <xTaskResumeAll+0x114>)
 8008b2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b2e:	4b36      	ldr	r3, [pc, #216]	; (8008c08 <xTaskResumeAll+0x114>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d161      	bne.n	8008bfa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b36:	4b35      	ldr	r3, [pc, #212]	; (8008c0c <xTaskResumeAll+0x118>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d05d      	beq.n	8008bfa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b3e:	e02e      	b.n	8008b9e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008b40:	4b33      	ldr	r3, [pc, #204]	; (8008c10 <xTaskResumeAll+0x11c>)
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	3318      	adds	r3, #24
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7ff f839 	bl	8007bc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	3304      	adds	r3, #4
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7ff f834 	bl	8007bc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b60:	2201      	movs	r2, #1
 8008b62:	409a      	lsls	r2, r3
 8008b64:	4b2b      	ldr	r3, [pc, #172]	; (8008c14 <xTaskResumeAll+0x120>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	4a2a      	ldr	r2, [pc, #168]	; (8008c14 <xTaskResumeAll+0x120>)
 8008b6c:	6013      	str	r3, [r2, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b72:	4613      	mov	r3, r2
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	4413      	add	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4a27      	ldr	r2, [pc, #156]	; (8008c18 <xTaskResumeAll+0x124>)
 8008b7c:	441a      	add	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3304      	adds	r3, #4
 8008b82:	4619      	mov	r1, r3
 8008b84:	4610      	mov	r0, r2
 8008b86:	f7fe ffc2 	bl	8007b0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8e:	4b23      	ldr	r3, [pc, #140]	; (8008c1c <xTaskResumeAll+0x128>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d302      	bcc.n	8008b9e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008b98:	4b21      	ldr	r3, [pc, #132]	; (8008c20 <xTaskResumeAll+0x12c>)
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b9e:	4b1c      	ldr	r3, [pc, #112]	; (8008c10 <xTaskResumeAll+0x11c>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1cc      	bne.n	8008b40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008bac:	f000 fb16 	bl	80091dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008bb0:	4b1c      	ldr	r3, [pc, #112]	; (8008c24 <xTaskResumeAll+0x130>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d010      	beq.n	8008bde <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008bbc:	f000 f836 	bl	8008c2c <xTaskIncrementTick>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d002      	beq.n	8008bcc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008bc6:	4b16      	ldr	r3, [pc, #88]	; (8008c20 <xTaskResumeAll+0x12c>)
 8008bc8:	2201      	movs	r2, #1
 8008bca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1f1      	bne.n	8008bbc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8008bd8:	4b12      	ldr	r3, [pc, #72]	; (8008c24 <xTaskResumeAll+0x130>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008bde:	4b10      	ldr	r3, [pc, #64]	; (8008c20 <xTaskResumeAll+0x12c>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d009      	beq.n	8008bfa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008be6:	2301      	movs	r3, #1
 8008be8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008bea:	4b0f      	ldr	r3, [pc, #60]	; (8008c28 <xTaskResumeAll+0x134>)
 8008bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bf0:	601a      	str	r2, [r3, #0]
 8008bf2:	f3bf 8f4f 	dsb	sy
 8008bf6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bfa:	f000 fd3f 	bl	800967c <vPortExitCritical>

	return xAlreadyYielded;
 8008bfe:	68bb      	ldr	r3, [r7, #8]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}
 8008c08:	200004d4 	.word	0x200004d4
 8008c0c:	200004ac 	.word	0x200004ac
 8008c10:	2000046c 	.word	0x2000046c
 8008c14:	200004b4 	.word	0x200004b4
 8008c18:	200003b0 	.word	0x200003b0
 8008c1c:	200003ac 	.word	0x200003ac
 8008c20:	200004c0 	.word	0x200004c0
 8008c24:	200004bc 	.word	0x200004bc
 8008c28:	e000ed04 	.word	0xe000ed04

08008c2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b086      	sub	sp, #24
 8008c30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c32:	2300      	movs	r3, #0
 8008c34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c36:	4b51      	ldr	r3, [pc, #324]	; (8008d7c <xTaskIncrementTick+0x150>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f040 808d 	bne.w	8008d5a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c40:	4b4f      	ldr	r3, [pc, #316]	; (8008d80 <xTaskIncrementTick+0x154>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3301      	adds	r3, #1
 8008c46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c48:	4a4d      	ldr	r2, [pc, #308]	; (8008d80 <xTaskIncrementTick+0x154>)
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d120      	bne.n	8008c96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c54:	4b4b      	ldr	r3, [pc, #300]	; (8008d84 <xTaskIncrementTick+0x158>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00a      	beq.n	8008c74 <xTaskIncrementTick+0x48>
	__asm volatile
 8008c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	603b      	str	r3, [r7, #0]
}
 8008c70:	bf00      	nop
 8008c72:	e7fe      	b.n	8008c72 <xTaskIncrementTick+0x46>
 8008c74:	4b43      	ldr	r3, [pc, #268]	; (8008d84 <xTaskIncrementTick+0x158>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	60fb      	str	r3, [r7, #12]
 8008c7a:	4b43      	ldr	r3, [pc, #268]	; (8008d88 <xTaskIncrementTick+0x15c>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a41      	ldr	r2, [pc, #260]	; (8008d84 <xTaskIncrementTick+0x158>)
 8008c80:	6013      	str	r3, [r2, #0]
 8008c82:	4a41      	ldr	r2, [pc, #260]	; (8008d88 <xTaskIncrementTick+0x15c>)
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6013      	str	r3, [r2, #0]
 8008c88:	4b40      	ldr	r3, [pc, #256]	; (8008d8c <xTaskIncrementTick+0x160>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	4a3f      	ldr	r2, [pc, #252]	; (8008d8c <xTaskIncrementTick+0x160>)
 8008c90:	6013      	str	r3, [r2, #0]
 8008c92:	f000 faa3 	bl	80091dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c96:	4b3e      	ldr	r3, [pc, #248]	; (8008d90 <xTaskIncrementTick+0x164>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	693a      	ldr	r2, [r7, #16]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d34d      	bcc.n	8008d3c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ca0:	4b38      	ldr	r3, [pc, #224]	; (8008d84 <xTaskIncrementTick+0x158>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d101      	bne.n	8008cae <xTaskIncrementTick+0x82>
 8008caa:	2301      	movs	r3, #1
 8008cac:	e000      	b.n	8008cb0 <xTaskIncrementTick+0x84>
 8008cae:	2300      	movs	r3, #0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d004      	beq.n	8008cbe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cb4:	4b36      	ldr	r3, [pc, #216]	; (8008d90 <xTaskIncrementTick+0x164>)
 8008cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cba:	601a      	str	r2, [r3, #0]
					break;
 8008cbc:	e03e      	b.n	8008d3c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008cbe:	4b31      	ldr	r3, [pc, #196]	; (8008d84 <xTaskIncrementTick+0x158>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d203      	bcs.n	8008cde <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008cd6:	4a2e      	ldr	r2, [pc, #184]	; (8008d90 <xTaskIncrementTick+0x164>)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6013      	str	r3, [r2, #0]
						break;
 8008cdc:	e02e      	b.n	8008d3c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fe ff6e 	bl	8007bc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d004      	beq.n	8008cfa <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	3318      	adds	r3, #24
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fe ff65 	bl	8007bc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cfe:	2201      	movs	r2, #1
 8008d00:	409a      	lsls	r2, r3
 8008d02:	4b24      	ldr	r3, [pc, #144]	; (8008d94 <xTaskIncrementTick+0x168>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	4a22      	ldr	r2, [pc, #136]	; (8008d94 <xTaskIncrementTick+0x168>)
 8008d0a:	6013      	str	r3, [r2, #0]
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d10:	4613      	mov	r3, r2
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4413      	add	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4a1f      	ldr	r2, [pc, #124]	; (8008d98 <xTaskIncrementTick+0x16c>)
 8008d1a:	441a      	add	r2, r3
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	3304      	adds	r3, #4
 8008d20:	4619      	mov	r1, r3
 8008d22:	4610      	mov	r0, r2
 8008d24:	f7fe fef3 	bl	8007b0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d2c:	4b1b      	ldr	r3, [pc, #108]	; (8008d9c <xTaskIncrementTick+0x170>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d3b4      	bcc.n	8008ca0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008d36:	2301      	movs	r3, #1
 8008d38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d3a:	e7b1      	b.n	8008ca0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d3c:	4b17      	ldr	r3, [pc, #92]	; (8008d9c <xTaskIncrementTick+0x170>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d42:	4915      	ldr	r1, [pc, #84]	; (8008d98 <xTaskIncrementTick+0x16c>)
 8008d44:	4613      	mov	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	440b      	add	r3, r1
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d907      	bls.n	8008d64 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8008d54:	2301      	movs	r3, #1
 8008d56:	617b      	str	r3, [r7, #20]
 8008d58:	e004      	b.n	8008d64 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008d5a:	4b11      	ldr	r3, [pc, #68]	; (8008da0 <xTaskIncrementTick+0x174>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	4a0f      	ldr	r2, [pc, #60]	; (8008da0 <xTaskIncrementTick+0x174>)
 8008d62:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008d64:	4b0f      	ldr	r3, [pc, #60]	; (8008da4 <xTaskIncrementTick+0x178>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008d70:	697b      	ldr	r3, [r7, #20]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3718      	adds	r7, #24
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	200004d4 	.word	0x200004d4
 8008d80:	200004b0 	.word	0x200004b0
 8008d84:	20000464 	.word	0x20000464
 8008d88:	20000468 	.word	0x20000468
 8008d8c:	200004c4 	.word	0x200004c4
 8008d90:	200004cc 	.word	0x200004cc
 8008d94:	200004b4 	.word	0x200004b4
 8008d98:	200003b0 	.word	0x200003b0
 8008d9c:	200003ac 	.word	0x200003ac
 8008da0:	200004bc 	.word	0x200004bc
 8008da4:	200004c0 	.word	0x200004c0

08008da8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008da8:	b480      	push	{r7}
 8008daa:	b087      	sub	sp, #28
 8008dac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008dae:	4b26      	ldr	r3, [pc, #152]	; (8008e48 <vTaskSwitchContext+0xa0>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008db6:	4b25      	ldr	r3, [pc, #148]	; (8008e4c <vTaskSwitchContext+0xa4>)
 8008db8:	2201      	movs	r2, #1
 8008dba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008dbc:	e03f      	b.n	8008e3e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008dbe:	4b23      	ldr	r3, [pc, #140]	; (8008e4c <vTaskSwitchContext+0xa4>)
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008dc4:	4b22      	ldr	r3, [pc, #136]	; (8008e50 <vTaskSwitchContext+0xa8>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	fab3 f383 	clz	r3, r3
 8008dd0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008dd2:	7afb      	ldrb	r3, [r7, #11]
 8008dd4:	f1c3 031f 	rsb	r3, r3, #31
 8008dd8:	617b      	str	r3, [r7, #20]
 8008dda:	491e      	ldr	r1, [pc, #120]	; (8008e54 <vTaskSwitchContext+0xac>)
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	4613      	mov	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	440b      	add	r3, r1
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d10a      	bne.n	8008e04 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	607b      	str	r3, [r7, #4]
}
 8008e00:	bf00      	nop
 8008e02:	e7fe      	b.n	8008e02 <vTaskSwitchContext+0x5a>
 8008e04:	697a      	ldr	r2, [r7, #20]
 8008e06:	4613      	mov	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4a11      	ldr	r2, [pc, #68]	; (8008e54 <vTaskSwitchContext+0xac>)
 8008e10:	4413      	add	r3, r2
 8008e12:	613b      	str	r3, [r7, #16]
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	685a      	ldr	r2, [r3, #4]
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	605a      	str	r2, [r3, #4]
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	3308      	adds	r3, #8
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d104      	bne.n	8008e34 <vTaskSwitchContext+0x8c>
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	605a      	str	r2, [r3, #4]
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	4a07      	ldr	r2, [pc, #28]	; (8008e58 <vTaskSwitchContext+0xb0>)
 8008e3c:	6013      	str	r3, [r2, #0]
}
 8008e3e:	bf00      	nop
 8008e40:	371c      	adds	r7, #28
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bc80      	pop	{r7}
 8008e46:	4770      	bx	lr
 8008e48:	200004d4 	.word	0x200004d4
 8008e4c:	200004c0 	.word	0x200004c0
 8008e50:	200004b4 	.word	0x200004b4
 8008e54:	200003b0 	.word	0x200003b0
 8008e58:	200003ac 	.word	0x200003ac

08008e5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10a      	bne.n	8008e82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	60fb      	str	r3, [r7, #12]
}
 8008e7e:	bf00      	nop
 8008e80:	e7fe      	b.n	8008e80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e82:	4b07      	ldr	r3, [pc, #28]	; (8008ea0 <vTaskPlaceOnEventList+0x44>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3318      	adds	r3, #24
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f7fe fe62 	bl	8007b54 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e90:	2101      	movs	r1, #1
 8008e92:	6838      	ldr	r0, [r7, #0]
 8008e94:	f000 fa6a 	bl	800936c <prvAddCurrentTaskToDelayedList>
}
 8008e98:	bf00      	nop
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	200003ac 	.word	0x200003ac

08008ea4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b086      	sub	sp, #24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10a      	bne.n	8008ed0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebe:	f383 8811 	msr	BASEPRI, r3
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	f3bf 8f4f 	dsb	sy
 8008eca:	60fb      	str	r3, [r7, #12]
}
 8008ecc:	bf00      	nop
 8008ece:	e7fe      	b.n	8008ece <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	3318      	adds	r3, #24
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fe fe75 	bl	8007bc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eda:	4b1d      	ldr	r3, [pc, #116]	; (8008f50 <xTaskRemoveFromEventList+0xac>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d11c      	bne.n	8008f1c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fe fe6c 	bl	8007bc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	409a      	lsls	r2, r3
 8008ef4:	4b17      	ldr	r3, [pc, #92]	; (8008f54 <xTaskRemoveFromEventList+0xb0>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	4a16      	ldr	r2, [pc, #88]	; (8008f54 <xTaskRemoveFromEventList+0xb0>)
 8008efc:	6013      	str	r3, [r2, #0]
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f02:	4613      	mov	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	4413      	add	r3, r2
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4a13      	ldr	r2, [pc, #76]	; (8008f58 <xTaskRemoveFromEventList+0xb4>)
 8008f0c:	441a      	add	r2, r3
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	3304      	adds	r3, #4
 8008f12:	4619      	mov	r1, r3
 8008f14:	4610      	mov	r0, r2
 8008f16:	f7fe fdfa 	bl	8007b0e <vListInsertEnd>
 8008f1a:	e005      	b.n	8008f28 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	3318      	adds	r3, #24
 8008f20:	4619      	mov	r1, r3
 8008f22:	480e      	ldr	r0, [pc, #56]	; (8008f5c <xTaskRemoveFromEventList+0xb8>)
 8008f24:	f7fe fdf3 	bl	8007b0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f2c:	4b0c      	ldr	r3, [pc, #48]	; (8008f60 <xTaskRemoveFromEventList+0xbc>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f32:	429a      	cmp	r2, r3
 8008f34:	d905      	bls.n	8008f42 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f36:	2301      	movs	r3, #1
 8008f38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f3a:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <xTaskRemoveFromEventList+0xc0>)
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	601a      	str	r2, [r3, #0]
 8008f40:	e001      	b.n	8008f46 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008f42:	2300      	movs	r3, #0
 8008f44:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008f46:	697b      	ldr	r3, [r7, #20]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3718      	adds	r7, #24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	200004d4 	.word	0x200004d4
 8008f54:	200004b4 	.word	0x200004b4
 8008f58:	200003b0 	.word	0x200003b0
 8008f5c:	2000046c 	.word	0x2000046c
 8008f60:	200003ac 	.word	0x200003ac
 8008f64:	200004c0 	.word	0x200004c0

08008f68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f70:	4b06      	ldr	r3, [pc, #24]	; (8008f8c <vTaskInternalSetTimeOutState+0x24>)
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f78:	4b05      	ldr	r3, [pc, #20]	; (8008f90 <vTaskInternalSetTimeOutState+0x28>)
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	605a      	str	r2, [r3, #4]
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bc80      	pop	{r7}
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	200004c4 	.word	0x200004c4
 8008f90:	200004b0 	.word	0x200004b0

08008f94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b088      	sub	sp, #32
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10a      	bne.n	8008fba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	613b      	str	r3, [r7, #16]
}
 8008fb6:	bf00      	nop
 8008fb8:	e7fe      	b.n	8008fb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10a      	bne.n	8008fd6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc4:	f383 8811 	msr	BASEPRI, r3
 8008fc8:	f3bf 8f6f 	isb	sy
 8008fcc:	f3bf 8f4f 	dsb	sy
 8008fd0:	60fb      	str	r3, [r7, #12]
}
 8008fd2:	bf00      	nop
 8008fd4:	e7fe      	b.n	8008fd4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008fd6:	f000 fb21 	bl	800961c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008fda:	4b1d      	ldr	r3, [pc, #116]	; (8009050 <xTaskCheckForTimeOut+0xbc>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	69ba      	ldr	r2, [r7, #24]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff2:	d102      	bne.n	8008ffa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	61fb      	str	r3, [r7, #28]
 8008ff8:	e023      	b.n	8009042 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	4b15      	ldr	r3, [pc, #84]	; (8009054 <xTaskCheckForTimeOut+0xc0>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	429a      	cmp	r2, r3
 8009004:	d007      	beq.n	8009016 <xTaskCheckForTimeOut+0x82>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	69ba      	ldr	r2, [r7, #24]
 800900c:	429a      	cmp	r2, r3
 800900e:	d302      	bcc.n	8009016 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009010:	2301      	movs	r3, #1
 8009012:	61fb      	str	r3, [r7, #28]
 8009014:	e015      	b.n	8009042 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	697a      	ldr	r2, [r7, #20]
 800901c:	429a      	cmp	r2, r3
 800901e:	d20b      	bcs.n	8009038 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	1ad2      	subs	r2, r2, r3
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f7ff ff9b 	bl	8008f68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009032:	2300      	movs	r3, #0
 8009034:	61fb      	str	r3, [r7, #28]
 8009036:	e004      	b.n	8009042 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2200      	movs	r2, #0
 800903c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800903e:	2301      	movs	r3, #1
 8009040:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009042:	f000 fb1b 	bl	800967c <vPortExitCritical>

	return xReturn;
 8009046:	69fb      	ldr	r3, [r7, #28]
}
 8009048:	4618      	mov	r0, r3
 800904a:	3720      	adds	r7, #32
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	200004b0 	.word	0x200004b0
 8009054:	200004c4 	.word	0x200004c4

08009058 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009058:	b480      	push	{r7}
 800905a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800905c:	4b03      	ldr	r3, [pc, #12]	; (800906c <vTaskMissedYield+0x14>)
 800905e:	2201      	movs	r2, #1
 8009060:	601a      	str	r2, [r3, #0]
}
 8009062:	bf00      	nop
 8009064:	46bd      	mov	sp, r7
 8009066:	bc80      	pop	{r7}
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop
 800906c:	200004c0 	.word	0x200004c0

08009070 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009078:	f000 f852 	bl	8009120 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800907c:	4b06      	ldr	r3, [pc, #24]	; (8009098 <prvIdleTask+0x28>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	2b01      	cmp	r3, #1
 8009082:	d9f9      	bls.n	8009078 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009084:	4b05      	ldr	r3, [pc, #20]	; (800909c <prvIdleTask+0x2c>)
 8009086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800908a:	601a      	str	r2, [r3, #0]
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009094:	e7f0      	b.n	8009078 <prvIdleTask+0x8>
 8009096:	bf00      	nop
 8009098:	200003b0 	.word	0x200003b0
 800909c:	e000ed04 	.word	0xe000ed04

080090a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090a6:	2300      	movs	r3, #0
 80090a8:	607b      	str	r3, [r7, #4]
 80090aa:	e00c      	b.n	80090c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	4613      	mov	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4413      	add	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4a12      	ldr	r2, [pc, #72]	; (8009100 <prvInitialiseTaskLists+0x60>)
 80090b8:	4413      	add	r3, r2
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fe fcfc 	bl	8007ab8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3301      	adds	r3, #1
 80090c4:	607b      	str	r3, [r7, #4]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2b06      	cmp	r3, #6
 80090ca:	d9ef      	bls.n	80090ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090cc:	480d      	ldr	r0, [pc, #52]	; (8009104 <prvInitialiseTaskLists+0x64>)
 80090ce:	f7fe fcf3 	bl	8007ab8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090d2:	480d      	ldr	r0, [pc, #52]	; (8009108 <prvInitialiseTaskLists+0x68>)
 80090d4:	f7fe fcf0 	bl	8007ab8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090d8:	480c      	ldr	r0, [pc, #48]	; (800910c <prvInitialiseTaskLists+0x6c>)
 80090da:	f7fe fced 	bl	8007ab8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090de:	480c      	ldr	r0, [pc, #48]	; (8009110 <prvInitialiseTaskLists+0x70>)
 80090e0:	f7fe fcea 	bl	8007ab8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090e4:	480b      	ldr	r0, [pc, #44]	; (8009114 <prvInitialiseTaskLists+0x74>)
 80090e6:	f7fe fce7 	bl	8007ab8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090ea:	4b0b      	ldr	r3, [pc, #44]	; (8009118 <prvInitialiseTaskLists+0x78>)
 80090ec:	4a05      	ldr	r2, [pc, #20]	; (8009104 <prvInitialiseTaskLists+0x64>)
 80090ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090f0:	4b0a      	ldr	r3, [pc, #40]	; (800911c <prvInitialiseTaskLists+0x7c>)
 80090f2:	4a05      	ldr	r2, [pc, #20]	; (8009108 <prvInitialiseTaskLists+0x68>)
 80090f4:	601a      	str	r2, [r3, #0]
}
 80090f6:	bf00      	nop
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	200003b0 	.word	0x200003b0
 8009104:	2000043c 	.word	0x2000043c
 8009108:	20000450 	.word	0x20000450
 800910c:	2000046c 	.word	0x2000046c
 8009110:	20000480 	.word	0x20000480
 8009114:	20000498 	.word	0x20000498
 8009118:	20000464 	.word	0x20000464
 800911c:	20000468 	.word	0x20000468

08009120 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009126:	e019      	b.n	800915c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009128:	f000 fa78 	bl	800961c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800912c:	4b10      	ldr	r3, [pc, #64]	; (8009170 <prvCheckTasksWaitingTermination+0x50>)
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	3304      	adds	r3, #4
 8009138:	4618      	mov	r0, r3
 800913a:	f7fe fd43 	bl	8007bc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800913e:	4b0d      	ldr	r3, [pc, #52]	; (8009174 <prvCheckTasksWaitingTermination+0x54>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3b01      	subs	r3, #1
 8009144:	4a0b      	ldr	r2, [pc, #44]	; (8009174 <prvCheckTasksWaitingTermination+0x54>)
 8009146:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009148:	4b0b      	ldr	r3, [pc, #44]	; (8009178 <prvCheckTasksWaitingTermination+0x58>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	3b01      	subs	r3, #1
 800914e:	4a0a      	ldr	r2, [pc, #40]	; (8009178 <prvCheckTasksWaitingTermination+0x58>)
 8009150:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009152:	f000 fa93 	bl	800967c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f810 	bl	800917c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800915c:	4b06      	ldr	r3, [pc, #24]	; (8009178 <prvCheckTasksWaitingTermination+0x58>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1e1      	bne.n	8009128 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop
 8009170:	20000480 	.word	0x20000480
 8009174:	200004ac 	.word	0x200004ac
 8009178:	20000494 	.word	0x20000494

0800917c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800918a:	2b00      	cmp	r3, #0
 800918c:	d108      	bne.n	80091a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009192:	4618      	mov	r0, r3
 8009194:	f000 fc06 	bl	80099a4 <vPortFree>
				vPortFree( pxTCB );
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fc03 	bl	80099a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800919e:	e018      	b.n	80091d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d103      	bne.n	80091b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fbfa 	bl	80099a4 <vPortFree>
	}
 80091b0:	e00f      	b.n	80091d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80091b8:	2b02      	cmp	r3, #2
 80091ba:	d00a      	beq.n	80091d2 <prvDeleteTCB+0x56>
	__asm volatile
 80091bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	60fb      	str	r3, [r7, #12]
}
 80091ce:	bf00      	nop
 80091d0:	e7fe      	b.n	80091d0 <prvDeleteTCB+0x54>
	}
 80091d2:	bf00      	nop
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
	...

080091dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091e2:	4b0e      	ldr	r3, [pc, #56]	; (800921c <prvResetNextTaskUnblockTime+0x40>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d101      	bne.n	80091f0 <prvResetNextTaskUnblockTime+0x14>
 80091ec:	2301      	movs	r3, #1
 80091ee:	e000      	b.n	80091f2 <prvResetNextTaskUnblockTime+0x16>
 80091f0:	2300      	movs	r3, #0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d004      	beq.n	8009200 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091f6:	4b0a      	ldr	r3, [pc, #40]	; (8009220 <prvResetNextTaskUnblockTime+0x44>)
 80091f8:	f04f 32ff 	mov.w	r2, #4294967295
 80091fc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80091fe:	e008      	b.n	8009212 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009200:	4b06      	ldr	r3, [pc, #24]	; (800921c <prvResetNextTaskUnblockTime+0x40>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	4a04      	ldr	r2, [pc, #16]	; (8009220 <prvResetNextTaskUnblockTime+0x44>)
 8009210:	6013      	str	r3, [r2, #0]
}
 8009212:	bf00      	nop
 8009214:	370c      	adds	r7, #12
 8009216:	46bd      	mov	sp, r7
 8009218:	bc80      	pop	{r7}
 800921a:	4770      	bx	lr
 800921c:	20000464 	.word	0x20000464
 8009220:	200004cc 	.word	0x200004cc

08009224 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009224:	b480      	push	{r7}
 8009226:	b083      	sub	sp, #12
 8009228:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800922a:	4b0b      	ldr	r3, [pc, #44]	; (8009258 <xTaskGetSchedulerState+0x34>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d102      	bne.n	8009238 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009232:	2301      	movs	r3, #1
 8009234:	607b      	str	r3, [r7, #4]
 8009236:	e008      	b.n	800924a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009238:	4b08      	ldr	r3, [pc, #32]	; (800925c <xTaskGetSchedulerState+0x38>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d102      	bne.n	8009246 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009240:	2302      	movs	r3, #2
 8009242:	607b      	str	r3, [r7, #4]
 8009244:	e001      	b.n	800924a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009246:	2300      	movs	r3, #0
 8009248:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800924a:	687b      	ldr	r3, [r7, #4]
	}
 800924c:	4618      	mov	r0, r3
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	bc80      	pop	{r7}
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	200004b8 	.word	0x200004b8
 800925c:	200004d4 	.word	0x200004d4

08009260 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800926c:	2300      	movs	r3, #0
 800926e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d06e      	beq.n	8009354 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009276:	4b3a      	ldr	r3, [pc, #232]	; (8009360 <xTaskPriorityDisinherit+0x100>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	429a      	cmp	r2, r3
 800927e:	d00a      	beq.n	8009296 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009284:	f383 8811 	msr	BASEPRI, r3
 8009288:	f3bf 8f6f 	isb	sy
 800928c:	f3bf 8f4f 	dsb	sy
 8009290:	60fb      	str	r3, [r7, #12]
}
 8009292:	bf00      	nop
 8009294:	e7fe      	b.n	8009294 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10a      	bne.n	80092b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800929e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a2:	f383 8811 	msr	BASEPRI, r3
 80092a6:	f3bf 8f6f 	isb	sy
 80092aa:	f3bf 8f4f 	dsb	sy
 80092ae:	60bb      	str	r3, [r7, #8]
}
 80092b0:	bf00      	nop
 80092b2:	e7fe      	b.n	80092b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092b8:	1e5a      	subs	r2, r3, #1
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d044      	beq.n	8009354 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d140      	bne.n	8009354 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	3304      	adds	r3, #4
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7fe fc74 	bl	8007bc4 <uxListRemove>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d115      	bne.n	800930e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e6:	491f      	ldr	r1, [pc, #124]	; (8009364 <xTaskPriorityDisinherit+0x104>)
 80092e8:	4613      	mov	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	4413      	add	r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	440b      	add	r3, r1
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10a      	bne.n	800930e <xTaskPriorityDisinherit+0xae>
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fc:	2201      	movs	r2, #1
 80092fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009302:	43da      	mvns	r2, r3
 8009304:	4b18      	ldr	r3, [pc, #96]	; (8009368 <xTaskPriorityDisinherit+0x108>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4013      	ands	r3, r2
 800930a:	4a17      	ldr	r2, [pc, #92]	; (8009368 <xTaskPriorityDisinherit+0x108>)
 800930c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931a:	f1c3 0207 	rsb	r2, r3, #7
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009326:	2201      	movs	r2, #1
 8009328:	409a      	lsls	r2, r3
 800932a:	4b0f      	ldr	r3, [pc, #60]	; (8009368 <xTaskPriorityDisinherit+0x108>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4313      	orrs	r3, r2
 8009330:	4a0d      	ldr	r2, [pc, #52]	; (8009368 <xTaskPriorityDisinherit+0x108>)
 8009332:	6013      	str	r3, [r2, #0]
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009338:	4613      	mov	r3, r2
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	4413      	add	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4a08      	ldr	r2, [pc, #32]	; (8009364 <xTaskPriorityDisinherit+0x104>)
 8009342:	441a      	add	r2, r3
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	3304      	adds	r3, #4
 8009348:	4619      	mov	r1, r3
 800934a:	4610      	mov	r0, r2
 800934c:	f7fe fbdf 	bl	8007b0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009350:	2301      	movs	r3, #1
 8009352:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009354:	697b      	ldr	r3, [r7, #20]
	}
 8009356:	4618      	mov	r0, r3
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	200003ac 	.word	0x200003ac
 8009364:	200003b0 	.word	0x200003b0
 8009368:	200004b4 	.word	0x200004b4

0800936c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009376:	4b29      	ldr	r3, [pc, #164]	; (800941c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800937c:	4b28      	ldr	r3, [pc, #160]	; (8009420 <prvAddCurrentTaskToDelayedList+0xb4>)
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	3304      	adds	r3, #4
 8009382:	4618      	mov	r0, r3
 8009384:	f7fe fc1e 	bl	8007bc4 <uxListRemove>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10b      	bne.n	80093a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800938e:	4b24      	ldr	r3, [pc, #144]	; (8009420 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009394:	2201      	movs	r2, #1
 8009396:	fa02 f303 	lsl.w	r3, r2, r3
 800939a:	43da      	mvns	r2, r3
 800939c:	4b21      	ldr	r3, [pc, #132]	; (8009424 <prvAddCurrentTaskToDelayedList+0xb8>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4013      	ands	r3, r2
 80093a2:	4a20      	ldr	r2, [pc, #128]	; (8009424 <prvAddCurrentTaskToDelayedList+0xb8>)
 80093a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ac:	d10a      	bne.n	80093c4 <prvAddCurrentTaskToDelayedList+0x58>
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d007      	beq.n	80093c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093b4:	4b1a      	ldr	r3, [pc, #104]	; (8009420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	3304      	adds	r3, #4
 80093ba:	4619      	mov	r1, r3
 80093bc:	481a      	ldr	r0, [pc, #104]	; (8009428 <prvAddCurrentTaskToDelayedList+0xbc>)
 80093be:	f7fe fba6 	bl	8007b0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80093c2:	e026      	b.n	8009412 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4413      	add	r3, r2
 80093ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80093cc:	4b14      	ldr	r3, [pc, #80]	; (8009420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	429a      	cmp	r2, r3
 80093da:	d209      	bcs.n	80093f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093dc:	4b13      	ldr	r3, [pc, #76]	; (800942c <prvAddCurrentTaskToDelayedList+0xc0>)
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	4b0f      	ldr	r3, [pc, #60]	; (8009420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3304      	adds	r3, #4
 80093e6:	4619      	mov	r1, r3
 80093e8:	4610      	mov	r0, r2
 80093ea:	f7fe fbb3 	bl	8007b54 <vListInsert>
}
 80093ee:	e010      	b.n	8009412 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093f0:	4b0f      	ldr	r3, [pc, #60]	; (8009430 <prvAddCurrentTaskToDelayedList+0xc4>)
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	4b0a      	ldr	r3, [pc, #40]	; (8009420 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3304      	adds	r3, #4
 80093fa:	4619      	mov	r1, r3
 80093fc:	4610      	mov	r0, r2
 80093fe:	f7fe fba9 	bl	8007b54 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009402:	4b0c      	ldr	r3, [pc, #48]	; (8009434 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68ba      	ldr	r2, [r7, #8]
 8009408:	429a      	cmp	r2, r3
 800940a:	d202      	bcs.n	8009412 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800940c:	4a09      	ldr	r2, [pc, #36]	; (8009434 <prvAddCurrentTaskToDelayedList+0xc8>)
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	6013      	str	r3, [r2, #0]
}
 8009412:	bf00      	nop
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	200004b0 	.word	0x200004b0
 8009420:	200003ac 	.word	0x200003ac
 8009424:	200004b4 	.word	0x200004b4
 8009428:	20000498 	.word	0x20000498
 800942c:	20000468 	.word	0x20000468
 8009430:	20000464 	.word	0x20000464
 8009434:	200004cc 	.word	0x200004cc

08009438 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009438:	b480      	push	{r7}
 800943a:	b085      	sub	sp, #20
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	3b04      	subs	r3, #4
 8009448:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009450:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	3b04      	subs	r3, #4
 8009456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	f023 0201 	bic.w	r2, r3, #1
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	3b04      	subs	r3, #4
 8009466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009468:	4a08      	ldr	r2, [pc, #32]	; (800948c <pxPortInitialiseStack+0x54>)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	3b14      	subs	r3, #20
 8009472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	3b20      	subs	r3, #32
 800947e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009480:	68fb      	ldr	r3, [r7, #12]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	bc80      	pop	{r7}
 800948a:	4770      	bx	lr
 800948c:	08009491 	.word	0x08009491

08009490 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009496:	2300      	movs	r3, #0
 8009498:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800949a:	4b12      	ldr	r3, [pc, #72]	; (80094e4 <prvTaskExitError+0x54>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a2:	d00a      	beq.n	80094ba <prvTaskExitError+0x2a>
	__asm volatile
 80094a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a8:	f383 8811 	msr	BASEPRI, r3
 80094ac:	f3bf 8f6f 	isb	sy
 80094b0:	f3bf 8f4f 	dsb	sy
 80094b4:	60fb      	str	r3, [r7, #12]
}
 80094b6:	bf00      	nop
 80094b8:	e7fe      	b.n	80094b8 <prvTaskExitError+0x28>
	__asm volatile
 80094ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094be:	f383 8811 	msr	BASEPRI, r3
 80094c2:	f3bf 8f6f 	isb	sy
 80094c6:	f3bf 8f4f 	dsb	sy
 80094ca:	60bb      	str	r3, [r7, #8]
}
 80094cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094ce:	bf00      	nop
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d0fc      	beq.n	80094d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094d6:	bf00      	nop
 80094d8:	bf00      	nop
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	bc80      	pop	{r7}
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	2000002c 	.word	0x2000002c
	...

080094f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094f0:	4b07      	ldr	r3, [pc, #28]	; (8009510 <pxCurrentTCBConst2>)
 80094f2:	6819      	ldr	r1, [r3, #0]
 80094f4:	6808      	ldr	r0, [r1, #0]
 80094f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80094fa:	f380 8809 	msr	PSP, r0
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f04f 0000 	mov.w	r0, #0
 8009506:	f380 8811 	msr	BASEPRI, r0
 800950a:	f04e 0e0d 	orr.w	lr, lr, #13
 800950e:	4770      	bx	lr

08009510 <pxCurrentTCBConst2>:
 8009510:	200003ac 	.word	0x200003ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009514:	bf00      	nop
 8009516:	bf00      	nop

08009518 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009518:	4806      	ldr	r0, [pc, #24]	; (8009534 <prvPortStartFirstTask+0x1c>)
 800951a:	6800      	ldr	r0, [r0, #0]
 800951c:	6800      	ldr	r0, [r0, #0]
 800951e:	f380 8808 	msr	MSP, r0
 8009522:	b662      	cpsie	i
 8009524:	b661      	cpsie	f
 8009526:	f3bf 8f4f 	dsb	sy
 800952a:	f3bf 8f6f 	isb	sy
 800952e:	df00      	svc	0
 8009530:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009532:	bf00      	nop
 8009534:	e000ed08 	.word	0xe000ed08

08009538 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800953e:	4b32      	ldr	r3, [pc, #200]	; (8009608 <xPortStartScheduler+0xd0>)
 8009540:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	b2db      	uxtb	r3, r3
 8009548:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	22ff      	movs	r2, #255	; 0xff
 800954e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	b2db      	uxtb	r3, r3
 8009556:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009558:	78fb      	ldrb	r3, [r7, #3]
 800955a:	b2db      	uxtb	r3, r3
 800955c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009560:	b2da      	uxtb	r2, r3
 8009562:	4b2a      	ldr	r3, [pc, #168]	; (800960c <xPortStartScheduler+0xd4>)
 8009564:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009566:	4b2a      	ldr	r3, [pc, #168]	; (8009610 <xPortStartScheduler+0xd8>)
 8009568:	2207      	movs	r2, #7
 800956a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800956c:	e009      	b.n	8009582 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800956e:	4b28      	ldr	r3, [pc, #160]	; (8009610 <xPortStartScheduler+0xd8>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3b01      	subs	r3, #1
 8009574:	4a26      	ldr	r2, [pc, #152]	; (8009610 <xPortStartScheduler+0xd8>)
 8009576:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009578:	78fb      	ldrb	r3, [r7, #3]
 800957a:	b2db      	uxtb	r3, r3
 800957c:	005b      	lsls	r3, r3, #1
 800957e:	b2db      	uxtb	r3, r3
 8009580:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009582:	78fb      	ldrb	r3, [r7, #3]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800958a:	2b80      	cmp	r3, #128	; 0x80
 800958c:	d0ef      	beq.n	800956e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800958e:	4b20      	ldr	r3, [pc, #128]	; (8009610 <xPortStartScheduler+0xd8>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f1c3 0307 	rsb	r3, r3, #7
 8009596:	2b04      	cmp	r3, #4
 8009598:	d00a      	beq.n	80095b0 <xPortStartScheduler+0x78>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	60bb      	str	r3, [r7, #8]
}
 80095ac:	bf00      	nop
 80095ae:	e7fe      	b.n	80095ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095b0:	4b17      	ldr	r3, [pc, #92]	; (8009610 <xPortStartScheduler+0xd8>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	021b      	lsls	r3, r3, #8
 80095b6:	4a16      	ldr	r2, [pc, #88]	; (8009610 <xPortStartScheduler+0xd8>)
 80095b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095ba:	4b15      	ldr	r3, [pc, #84]	; (8009610 <xPortStartScheduler+0xd8>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095c2:	4a13      	ldr	r2, [pc, #76]	; (8009610 <xPortStartScheduler+0xd8>)
 80095c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80095ce:	4b11      	ldr	r3, [pc, #68]	; (8009614 <xPortStartScheduler+0xdc>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	4a10      	ldr	r2, [pc, #64]	; (8009614 <xPortStartScheduler+0xdc>)
 80095d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80095da:	4b0e      	ldr	r3, [pc, #56]	; (8009614 <xPortStartScheduler+0xdc>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a0d      	ldr	r2, [pc, #52]	; (8009614 <xPortStartScheduler+0xdc>)
 80095e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80095e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80095e6:	f000 f8b9 	bl	800975c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80095ea:	4b0b      	ldr	r3, [pc, #44]	; (8009618 <xPortStartScheduler+0xe0>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80095f0:	f7ff ff92 	bl	8009518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80095f4:	f7ff fbd8 	bl	8008da8 <vTaskSwitchContext>
	prvTaskExitError();
 80095f8:	f7ff ff4a 	bl	8009490 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3710      	adds	r7, #16
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	e000e400 	.word	0xe000e400
 800960c:	200004d8 	.word	0x200004d8
 8009610:	200004dc 	.word	0x200004dc
 8009614:	e000ed20 	.word	0xe000ed20
 8009618:	2000002c 	.word	0x2000002c

0800961c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
	__asm volatile
 8009622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009626:	f383 8811 	msr	BASEPRI, r3
 800962a:	f3bf 8f6f 	isb	sy
 800962e:	f3bf 8f4f 	dsb	sy
 8009632:	607b      	str	r3, [r7, #4]
}
 8009634:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009636:	4b0f      	ldr	r3, [pc, #60]	; (8009674 <vPortEnterCritical+0x58>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3301      	adds	r3, #1
 800963c:	4a0d      	ldr	r2, [pc, #52]	; (8009674 <vPortEnterCritical+0x58>)
 800963e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009640:	4b0c      	ldr	r3, [pc, #48]	; (8009674 <vPortEnterCritical+0x58>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d10f      	bne.n	8009668 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009648:	4b0b      	ldr	r3, [pc, #44]	; (8009678 <vPortEnterCritical+0x5c>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	b2db      	uxtb	r3, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00a      	beq.n	8009668 <vPortEnterCritical+0x4c>
	__asm volatile
 8009652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009656:	f383 8811 	msr	BASEPRI, r3
 800965a:	f3bf 8f6f 	isb	sy
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	603b      	str	r3, [r7, #0]
}
 8009664:	bf00      	nop
 8009666:	e7fe      	b.n	8009666 <vPortEnterCritical+0x4a>
	}
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	bc80      	pop	{r7}
 8009670:	4770      	bx	lr
 8009672:	bf00      	nop
 8009674:	2000002c 	.word	0x2000002c
 8009678:	e000ed04 	.word	0xe000ed04

0800967c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009682:	4b11      	ldr	r3, [pc, #68]	; (80096c8 <vPortExitCritical+0x4c>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d10a      	bne.n	80096a0 <vPortExitCritical+0x24>
	__asm volatile
 800968a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968e:	f383 8811 	msr	BASEPRI, r3
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	607b      	str	r3, [r7, #4]
}
 800969c:	bf00      	nop
 800969e:	e7fe      	b.n	800969e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80096a0:	4b09      	ldr	r3, [pc, #36]	; (80096c8 <vPortExitCritical+0x4c>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3b01      	subs	r3, #1
 80096a6:	4a08      	ldr	r2, [pc, #32]	; (80096c8 <vPortExitCritical+0x4c>)
 80096a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096aa:	4b07      	ldr	r3, [pc, #28]	; (80096c8 <vPortExitCritical+0x4c>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d105      	bne.n	80096be <vPortExitCritical+0x42>
 80096b2:	2300      	movs	r3, #0
 80096b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	f383 8811 	msr	BASEPRI, r3
}
 80096bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80096be:	bf00      	nop
 80096c0:	370c      	adds	r7, #12
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bc80      	pop	{r7}
 80096c6:	4770      	bx	lr
 80096c8:	2000002c 	.word	0x2000002c
 80096cc:	00000000 	.word	0x00000000

080096d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80096d0:	f3ef 8009 	mrs	r0, PSP
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	4b0d      	ldr	r3, [pc, #52]	; (8009710 <pxCurrentTCBConst>)
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80096e0:	6010      	str	r0, [r2, #0]
 80096e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80096e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80096ea:	f380 8811 	msr	BASEPRI, r0
 80096ee:	f7ff fb5b 	bl	8008da8 <vTaskSwitchContext>
 80096f2:	f04f 0000 	mov.w	r0, #0
 80096f6:	f380 8811 	msr	BASEPRI, r0
 80096fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80096fe:	6819      	ldr	r1, [r3, #0]
 8009700:	6808      	ldr	r0, [r1, #0]
 8009702:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009706:	f380 8809 	msr	PSP, r0
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	4770      	bx	lr

08009710 <pxCurrentTCBConst>:
 8009710:	200003ac 	.word	0x200003ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009714:	bf00      	nop
 8009716:	bf00      	nop

08009718 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	607b      	str	r3, [r7, #4]
}
 8009730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009732:	f7ff fa7b 	bl	8008c2c <xTaskIncrementTick>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d003      	beq.n	8009744 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800973c:	4b06      	ldr	r3, [pc, #24]	; (8009758 <SysTick_Handler+0x40>)
 800973e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009742:	601a      	str	r2, [r3, #0]
 8009744:	2300      	movs	r3, #0
 8009746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	f383 8811 	msr	BASEPRI, r3
}
 800974e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009750:	bf00      	nop
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	e000ed04 	.word	0xe000ed04

0800975c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800975c:	b480      	push	{r7}
 800975e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009760:	4b0a      	ldr	r3, [pc, #40]	; (800978c <vPortSetupTimerInterrupt+0x30>)
 8009762:	2200      	movs	r2, #0
 8009764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009766:	4b0a      	ldr	r3, [pc, #40]	; (8009790 <vPortSetupTimerInterrupt+0x34>)
 8009768:	2200      	movs	r2, #0
 800976a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800976c:	4b09      	ldr	r3, [pc, #36]	; (8009794 <vPortSetupTimerInterrupt+0x38>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4a09      	ldr	r2, [pc, #36]	; (8009798 <vPortSetupTimerInterrupt+0x3c>)
 8009772:	fba2 2303 	umull	r2, r3, r2, r3
 8009776:	099b      	lsrs	r3, r3, #6
 8009778:	4a08      	ldr	r2, [pc, #32]	; (800979c <vPortSetupTimerInterrupt+0x40>)
 800977a:	3b01      	subs	r3, #1
 800977c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800977e:	4b03      	ldr	r3, [pc, #12]	; (800978c <vPortSetupTimerInterrupt+0x30>)
 8009780:	2207      	movs	r2, #7
 8009782:	601a      	str	r2, [r3, #0]
}
 8009784:	bf00      	nop
 8009786:	46bd      	mov	sp, r7
 8009788:	bc80      	pop	{r7}
 800978a:	4770      	bx	lr
 800978c:	e000e010 	.word	0xe000e010
 8009790:	e000e018 	.word	0xe000e018
 8009794:	20000000 	.word	0x20000000
 8009798:	10624dd3 	.word	0x10624dd3
 800979c:	e000e014 	.word	0xe000e014

080097a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80097a0:	b480      	push	{r7}
 80097a2:	b085      	sub	sp, #20
 80097a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80097a6:	f3ef 8305 	mrs	r3, IPSR
 80097aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2b0f      	cmp	r3, #15
 80097b0:	d914      	bls.n	80097dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80097b2:	4a16      	ldr	r2, [pc, #88]	; (800980c <vPortValidateInterruptPriority+0x6c>)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4413      	add	r3, r2
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80097bc:	4b14      	ldr	r3, [pc, #80]	; (8009810 <vPortValidateInterruptPriority+0x70>)
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	7afa      	ldrb	r2, [r7, #11]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d20a      	bcs.n	80097dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80097c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ca:	f383 8811 	msr	BASEPRI, r3
 80097ce:	f3bf 8f6f 	isb	sy
 80097d2:	f3bf 8f4f 	dsb	sy
 80097d6:	607b      	str	r3, [r7, #4]
}
 80097d8:	bf00      	nop
 80097da:	e7fe      	b.n	80097da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80097dc:	4b0d      	ldr	r3, [pc, #52]	; (8009814 <vPortValidateInterruptPriority+0x74>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80097e4:	4b0c      	ldr	r3, [pc, #48]	; (8009818 <vPortValidateInterruptPriority+0x78>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d90a      	bls.n	8009802 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80097ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	603b      	str	r3, [r7, #0]
}
 80097fe:	bf00      	nop
 8009800:	e7fe      	b.n	8009800 <vPortValidateInterruptPriority+0x60>
	}
 8009802:	bf00      	nop
 8009804:	3714      	adds	r7, #20
 8009806:	46bd      	mov	sp, r7
 8009808:	bc80      	pop	{r7}
 800980a:	4770      	bx	lr
 800980c:	e000e3f0 	.word	0xe000e3f0
 8009810:	200004d8 	.word	0x200004d8
 8009814:	e000ed0c 	.word	0xe000ed0c
 8009818:	200004dc 	.word	0x200004dc

0800981c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08a      	sub	sp, #40	; 0x28
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009824:	2300      	movs	r3, #0
 8009826:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009828:	f7ff f956 	bl	8008ad8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800982c:	4b58      	ldr	r3, [pc, #352]	; (8009990 <pvPortMalloc+0x174>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d101      	bne.n	8009838 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009834:	f000 f910 	bl	8009a58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009838:	4b56      	ldr	r3, [pc, #344]	; (8009994 <pvPortMalloc+0x178>)
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4013      	ands	r3, r2
 8009840:	2b00      	cmp	r3, #0
 8009842:	f040 808e 	bne.w	8009962 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d01d      	beq.n	8009888 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800984c:	2208      	movs	r2, #8
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4413      	add	r3, r2
 8009852:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f003 0307 	and.w	r3, r3, #7
 800985a:	2b00      	cmp	r3, #0
 800985c:	d014      	beq.n	8009888 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f023 0307 	bic.w	r3, r3, #7
 8009864:	3308      	adds	r3, #8
 8009866:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f003 0307 	and.w	r3, r3, #7
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00a      	beq.n	8009888 <pvPortMalloc+0x6c>
	__asm volatile
 8009872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	617b      	str	r3, [r7, #20]
}
 8009884:	bf00      	nop
 8009886:	e7fe      	b.n	8009886 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d069      	beq.n	8009962 <pvPortMalloc+0x146>
 800988e:	4b42      	ldr	r3, [pc, #264]	; (8009998 <pvPortMalloc+0x17c>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	429a      	cmp	r2, r3
 8009896:	d864      	bhi.n	8009962 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009898:	4b40      	ldr	r3, [pc, #256]	; (800999c <pvPortMalloc+0x180>)
 800989a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800989c:	4b3f      	ldr	r3, [pc, #252]	; (800999c <pvPortMalloc+0x180>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098a2:	e004      	b.n	80098ae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80098a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80098a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d903      	bls.n	80098c0 <pvPortMalloc+0xa4>
 80098b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1f1      	bne.n	80098a4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80098c0:	4b33      	ldr	r3, [pc, #204]	; (8009990 <pvPortMalloc+0x174>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d04b      	beq.n	8009962 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80098ca:	6a3b      	ldr	r3, [r7, #32]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2208      	movs	r2, #8
 80098d0:	4413      	add	r3, r2
 80098d2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80098dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098de:	685a      	ldr	r2, [r3, #4]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	1ad2      	subs	r2, r2, r3
 80098e4:	2308      	movs	r3, #8
 80098e6:	005b      	lsls	r3, r3, #1
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d91f      	bls.n	800992c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80098ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4413      	add	r3, r2
 80098f2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	f003 0307 	and.w	r3, r3, #7
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00a      	beq.n	8009914 <pvPortMalloc+0xf8>
	__asm volatile
 80098fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009902:	f383 8811 	msr	BASEPRI, r3
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	613b      	str	r3, [r7, #16]
}
 8009910:	bf00      	nop
 8009912:	e7fe      	b.n	8009912 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	685a      	ldr	r2, [r3, #4]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	1ad2      	subs	r2, r2, r3
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009926:	69b8      	ldr	r0, [r7, #24]
 8009928:	f000 f8f8 	bl	8009b1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800992c:	4b1a      	ldr	r3, [pc, #104]	; (8009998 <pvPortMalloc+0x17c>)
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	1ad3      	subs	r3, r2, r3
 8009936:	4a18      	ldr	r2, [pc, #96]	; (8009998 <pvPortMalloc+0x17c>)
 8009938:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800993a:	4b17      	ldr	r3, [pc, #92]	; (8009998 <pvPortMalloc+0x17c>)
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	4b18      	ldr	r3, [pc, #96]	; (80099a0 <pvPortMalloc+0x184>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	429a      	cmp	r2, r3
 8009944:	d203      	bcs.n	800994e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009946:	4b14      	ldr	r3, [pc, #80]	; (8009998 <pvPortMalloc+0x17c>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a15      	ldr	r2, [pc, #84]	; (80099a0 <pvPortMalloc+0x184>)
 800994c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800994e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009950:	685a      	ldr	r2, [r3, #4]
 8009952:	4b10      	ldr	r3, [pc, #64]	; (8009994 <pvPortMalloc+0x178>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	431a      	orrs	r2, r3
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800995c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995e:	2200      	movs	r2, #0
 8009960:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009962:	f7ff f8c7 	bl	8008af4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	f003 0307 	and.w	r3, r3, #7
 800996c:	2b00      	cmp	r3, #0
 800996e:	d00a      	beq.n	8009986 <pvPortMalloc+0x16a>
	__asm volatile
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	60fb      	str	r3, [r7, #12]
}
 8009982:	bf00      	nop
 8009984:	e7fe      	b.n	8009984 <pvPortMalloc+0x168>
	return pvReturn;
 8009986:	69fb      	ldr	r3, [r7, #28]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3728      	adds	r7, #40	; 0x28
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	20002488 	.word	0x20002488
 8009994:	20002494 	.word	0x20002494
 8009998:	2000248c 	.word	0x2000248c
 800999c:	20002480 	.word	0x20002480
 80099a0:	20002490 	.word	0x20002490

080099a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d048      	beq.n	8009a48 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80099b6:	2308      	movs	r3, #8
 80099b8:	425b      	negs	r3, r3
 80099ba:	697a      	ldr	r2, [r7, #20]
 80099bc:	4413      	add	r3, r2
 80099be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	685a      	ldr	r2, [r3, #4]
 80099c8:	4b21      	ldr	r3, [pc, #132]	; (8009a50 <vPortFree+0xac>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4013      	ands	r3, r2
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d10a      	bne.n	80099e8 <vPortFree+0x44>
	__asm volatile
 80099d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d6:	f383 8811 	msr	BASEPRI, r3
 80099da:	f3bf 8f6f 	isb	sy
 80099de:	f3bf 8f4f 	dsb	sy
 80099e2:	60fb      	str	r3, [r7, #12]
}
 80099e4:	bf00      	nop
 80099e6:	e7fe      	b.n	80099e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00a      	beq.n	8009a06 <vPortFree+0x62>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	60bb      	str	r3, [r7, #8]
}
 8009a02:	bf00      	nop
 8009a04:	e7fe      	b.n	8009a04 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	685a      	ldr	r2, [r3, #4]
 8009a0a:	4b11      	ldr	r3, [pc, #68]	; (8009a50 <vPortFree+0xac>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4013      	ands	r3, r2
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d019      	beq.n	8009a48 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d115      	bne.n	8009a48 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	685a      	ldr	r2, [r3, #4]
 8009a20:	4b0b      	ldr	r3, [pc, #44]	; (8009a50 <vPortFree+0xac>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	43db      	mvns	r3, r3
 8009a26:	401a      	ands	r2, r3
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009a2c:	f7ff f854 	bl	8008ad8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	685a      	ldr	r2, [r3, #4]
 8009a34:	4b07      	ldr	r3, [pc, #28]	; (8009a54 <vPortFree+0xb0>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4413      	add	r3, r2
 8009a3a:	4a06      	ldr	r2, [pc, #24]	; (8009a54 <vPortFree+0xb0>)
 8009a3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a3e:	6938      	ldr	r0, [r7, #16]
 8009a40:	f000 f86c 	bl	8009b1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009a44:	f7ff f856 	bl	8008af4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009a48:	bf00      	nop
 8009a4a:	3718      	adds	r7, #24
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	20002494 	.word	0x20002494
 8009a54:	2000248c 	.word	0x2000248c

08009a58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b085      	sub	sp, #20
 8009a5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a5e:	f44f 53fd 	mov.w	r3, #8096	; 0x1fa0
 8009a62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a64:	4b27      	ldr	r3, [pc, #156]	; (8009b04 <prvHeapInit+0xac>)
 8009a66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f003 0307 	and.w	r3, r3, #7
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00c      	beq.n	8009a8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	3307      	adds	r3, #7
 8009a76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f023 0307 	bic.w	r3, r3, #7
 8009a7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	4a1f      	ldr	r2, [pc, #124]	; (8009b04 <prvHeapInit+0xac>)
 8009a88:	4413      	add	r3, r2
 8009a8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a90:	4a1d      	ldr	r2, [pc, #116]	; (8009b08 <prvHeapInit+0xb0>)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a96:	4b1c      	ldr	r3, [pc, #112]	; (8009b08 <prvHeapInit+0xb0>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009aa4:	2208      	movs	r2, #8
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	1a9b      	subs	r3, r3, r2
 8009aaa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f023 0307 	bic.w	r3, r3, #7
 8009ab2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	4a15      	ldr	r2, [pc, #84]	; (8009b0c <prvHeapInit+0xb4>)
 8009ab8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009aba:	4b14      	ldr	r3, [pc, #80]	; (8009b0c <prvHeapInit+0xb4>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009ac2:	4b12      	ldr	r3, [pc, #72]	; (8009b0c <prvHeapInit+0xb4>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	1ad2      	subs	r2, r2, r3
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ad8:	4b0c      	ldr	r3, [pc, #48]	; (8009b0c <prvHeapInit+0xb4>)
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	4a0a      	ldr	r2, [pc, #40]	; (8009b10 <prvHeapInit+0xb8>)
 8009ae6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	4a09      	ldr	r2, [pc, #36]	; (8009b14 <prvHeapInit+0xbc>)
 8009aee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009af0:	4b09      	ldr	r3, [pc, #36]	; (8009b18 <prvHeapInit+0xc0>)
 8009af2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009af6:	601a      	str	r2, [r3, #0]
}
 8009af8:	bf00      	nop
 8009afa:	3714      	adds	r7, #20
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bc80      	pop	{r7}
 8009b00:	4770      	bx	lr
 8009b02:	bf00      	nop
 8009b04:	200004e0 	.word	0x200004e0
 8009b08:	20002480 	.word	0x20002480
 8009b0c:	20002488 	.word	0x20002488
 8009b10:	20002490 	.word	0x20002490
 8009b14:	2000248c 	.word	0x2000248c
 8009b18:	20002494 	.word	0x20002494

08009b1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b085      	sub	sp, #20
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009b24:	4b27      	ldr	r3, [pc, #156]	; (8009bc4 <prvInsertBlockIntoFreeList+0xa8>)
 8009b26:	60fb      	str	r3, [r7, #12]
 8009b28:	e002      	b.n	8009b30 <prvInsertBlockIntoFreeList+0x14>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	60fb      	str	r3, [r7, #12]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d8f7      	bhi.n	8009b2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	68ba      	ldr	r2, [r7, #8]
 8009b44:	4413      	add	r3, r2
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d108      	bne.n	8009b5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	685a      	ldr	r2, [r3, #4]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	441a      	add	r2, r3
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	441a      	add	r2, r3
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d118      	bne.n	8009ba4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	4b14      	ldr	r3, [pc, #80]	; (8009bc8 <prvInsertBlockIntoFreeList+0xac>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d00d      	beq.n	8009b9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	685a      	ldr	r2, [r3, #4]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	441a      	add	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	601a      	str	r2, [r3, #0]
 8009b98:	e008      	b.n	8009bac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b9a:	4b0b      	ldr	r3, [pc, #44]	; (8009bc8 <prvInsertBlockIntoFreeList+0xac>)
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	e003      	b.n	8009bac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681a      	ldr	r2, [r3, #0]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d002      	beq.n	8009bba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bba:	bf00      	nop
 8009bbc:	3714      	adds	r7, #20
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bc80      	pop	{r7}
 8009bc2:	4770      	bx	lr
 8009bc4:	20002480 	.word	0x20002480
 8009bc8:	20002488 	.word	0x20002488

08009bcc <send_function>:
/*
 * -- Insert your variables declaration here --
 */
/* USER CODE BEGIN 0 */

void send_function(){
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	af00      	add	r7, sp, #0
	 if(Appli_state == APPLICATION_READY ){
 8009bd0:	4b05      	ldr	r3, [pc, #20]	; (8009be8 <send_function+0x1c>)
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d104      	bne.n	8009be2 <send_function+0x16>
		USBH_CDC_Transmit(&hUsbHostFS,read_info,6);
 8009bd8:	2206      	movs	r2, #6
 8009bda:	4904      	ldr	r1, [pc, #16]	; (8009bec <send_function+0x20>)
 8009bdc:	4804      	ldr	r0, [pc, #16]	; (8009bf0 <send_function+0x24>)
 8009bde:	f7fc f847 	bl	8005c70 <USBH_CDC_Transmit>
	  }
}
 8009be2:	bf00      	nop
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	20002894 	.word	0x20002894
 8009bec:	20000030 	.word	0x20000030
 8009bf0:	200024b4 	.word	0x200024b4

08009bf4 <USBH_CDC_TransmitCallback>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  USBH_CDC_Receive(phost,usb_rx_buf,20);
 8009bfc:	2214      	movs	r2, #20
 8009bfe:	4904      	ldr	r1, [pc, #16]	; (8009c10 <USBH_CDC_TransmitCallback+0x1c>)
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f7fc f86f 	bl	8005ce4 <USBH_CDC_Receive>
}
 8009c06:	bf00      	nop
 8009c08:	3708      	adds	r7, #8
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	20002498 	.word	0x20002498

08009c14 <USBH_CDC_ReceiveCallback>:

void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart1,usb_rx_buf,20,100);
 8009c1c:	2364      	movs	r3, #100	; 0x64
 8009c1e:	2214      	movs	r2, #20
 8009c20:	4906      	ldr	r1, [pc, #24]	; (8009c3c <USBH_CDC_ReceiveCallback+0x28>)
 8009c22:	4807      	ldr	r0, [pc, #28]	; (8009c40 <USBH_CDC_ReceiveCallback+0x2c>)
 8009c24:	f7fa fa01 	bl	800402a <HAL_UART_Transmit>
  USBH_CDC_Transmit(&hUsbHostFS,read_info,6);
 8009c28:	2206      	movs	r2, #6
 8009c2a:	4906      	ldr	r1, [pc, #24]	; (8009c44 <USBH_CDC_ReceiveCallback+0x30>)
 8009c2c:	4806      	ldr	r0, [pc, #24]	; (8009c48 <USBH_CDC_ReceiveCallback+0x34>)
 8009c2e:	f7fc f81f 	bl	8005c70 <USBH_CDC_Transmit>
}
 8009c32:	bf00      	nop
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
 8009c3a:	bf00      	nop
 8009c3c:	20002498 	.word	0x20002498
 8009c40:	2000030c 	.word	0x2000030c
 8009c44:	20000030 	.word	0x20000030
 8009c48:	200024b4 	.word	0x200024b4

08009c4c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009c50:	2201      	movs	r2, #1
 8009c52:	490e      	ldr	r1, [pc, #56]	; (8009c8c <MX_USB_HOST_Init+0x40>)
 8009c54:	480e      	ldr	r0, [pc, #56]	; (8009c90 <MX_USB_HOST_Init+0x44>)
 8009c56:	f7fc f983 	bl	8005f60 <USBH_Init>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d001      	beq.n	8009c64 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009c60:	f7f6 fe3c 	bl	80008dc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009c64:	490b      	ldr	r1, [pc, #44]	; (8009c94 <MX_USB_HOST_Init+0x48>)
 8009c66:	480a      	ldr	r0, [pc, #40]	; (8009c90 <MX_USB_HOST_Init+0x44>)
 8009c68:	f7fc fa27 	bl	80060ba <USBH_RegisterClass>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d001      	beq.n	8009c76 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009c72:	f7f6 fe33 	bl	80008dc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009c76:	4806      	ldr	r0, [pc, #24]	; (8009c90 <MX_USB_HOST_Init+0x44>)
 8009c78:	f7fc faa9 	bl	80061ce <USBH_Start>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009c82:	f7f6 fe2b 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009c86:	bf00      	nop
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	08009c99 	.word	0x08009c99
 8009c90:	200024b4 	.word	0x200024b4
 8009c94:	2000000c 	.word	0x2000000c

08009c98 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009ca4:	78fb      	ldrb	r3, [r7, #3]
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	2b04      	cmp	r3, #4
 8009caa:	d82e      	bhi.n	8009d0a <USBH_UserProcess+0x72>
 8009cac:	a201      	add	r2, pc, #4	; (adr r2, 8009cb4 <USBH_UserProcess+0x1c>)
 8009cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb2:	bf00      	nop
 8009cb4:	08009d0b 	.word	0x08009d0b
 8009cb8:	08009cdf 	.word	0x08009cdf
 8009cbc:	08009d0b 	.word	0x08009d0b
 8009cc0:	08009cf5 	.word	0x08009cf5
 8009cc4:	08009cc9 	.word	0x08009cc9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009cc8:	4b12      	ldr	r3, [pc, #72]	; (8009d14 <USBH_UserProcess+0x7c>)
 8009cca:	2203      	movs	r2, #3
 8009ccc:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_DISCONNECT, 0);
 8009cce:	4b12      	ldr	r3, [pc, #72]	; (8009d18 <USBH_UserProcess+0x80>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	2103      	movs	r1, #3
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7fd fe3a 	bl	8007950 <osMessagePut>
  break;
 8009cdc:	e016      	b.n	8009d0c <USBH_UserProcess+0x74>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009cde:	4b0d      	ldr	r3, [pc, #52]	; (8009d14 <USBH_UserProcess+0x7c>)
 8009ce0:	2202      	movs	r2, #2
 8009ce2:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_READY, 0);
 8009ce4:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <USBH_UserProcess+0x80>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	2102      	movs	r1, #2
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7fd fe2f 	bl	8007950 <osMessagePut>
  break;
 8009cf2:	e00b      	b.n	8009d0c <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009cf4:	4b07      	ldr	r3, [pc, #28]	; (8009d14 <USBH_UserProcess+0x7c>)
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	701a      	strb	r2, [r3, #0]
  osMessagePut(AppliEventHandle, APPLICATION_START, 0);
 8009cfa:	4b07      	ldr	r3, [pc, #28]	; (8009d18 <USBH_UserProcess+0x80>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	2101      	movs	r1, #1
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fd fe24 	bl	8007950 <osMessagePut>
  break;
 8009d08:	e000      	b.n	8009d0c <USBH_UserProcess+0x74>

  default:
  break;
 8009d0a:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009d0c:	bf00      	nop
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	20002894 	.word	0x20002894
 8009d18:	20000358 	.word	0x20000358

08009d1c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d2c:	d113      	bne.n	8009d56 <HAL_HCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009d2e:	4b0c      	ldr	r3, [pc, #48]	; (8009d60 <HAL_HCD_MspInit+0x44>)
 8009d30:	695b      	ldr	r3, [r3, #20]
 8009d32:	4a0b      	ldr	r2, [pc, #44]	; (8009d60 <HAL_HCD_MspInit+0x44>)
 8009d34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d38:	6153      	str	r3, [r2, #20]
 8009d3a:	4b09      	ldr	r3, [pc, #36]	; (8009d60 <HAL_HCD_MspInit+0x44>)
 8009d3c:	695b      	ldr	r3, [r3, #20]
 8009d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009d42:	60fb      	str	r3, [r7, #12]
 8009d44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009d46:	2200      	movs	r2, #0
 8009d48:	2105      	movs	r1, #5
 8009d4a:	2043      	movs	r0, #67	; 0x43
 8009d4c:	f7f7 f851 	bl	8000df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009d50:	2043      	movs	r0, #67	; 0x43
 8009d52:	f7f7 f86a 	bl	8000e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009d56:	bf00      	nop
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	40021000 	.word	0x40021000

08009d64 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b082      	sub	sp, #8
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fc fdac 	bl	80068d0 <USBH_LL_IncTimer>
}
 8009d78:	bf00      	nop
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7fc fdef 	bl	8006972 <USBH_LL_Connect>
}
 8009d94:	bf00      	nop
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fc fe04 	bl	80069b8 <USBH_LL_Disconnect>
}
 8009db0:	bf00      	nop
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	70fb      	strb	r3, [r7, #3]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7fc fe39 	bl	8006a46 <USBH_LL_NotifyURBChange>
#endif
}
 8009dd4:	bf00      	nop
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b082      	sub	sp, #8
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fc fd9a 	bl	8006924 <USBH_LL_PortEnabled>
}
 8009df0:	bf00      	nop
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b082      	sub	sp, #8
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7fc fda6 	bl	8006958 <USBH_LL_PortDisabled>
}
 8009e0c:	bf00      	nop
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d127      	bne.n	8009e76 <USBH_LL_Init+0x62>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009e26:	4a16      	ldr	r2, [pc, #88]	; (8009e80 <USBH_LL_Init+0x6c>)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	4a13      	ldr	r2, [pc, #76]	; (8009e80 <USBH_LL_Init+0x6c>)
 8009e32:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009e36:	4b12      	ldr	r3, [pc, #72]	; (8009e80 <USBH_LL_Init+0x6c>)
 8009e38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009e3c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009e3e:	4b10      	ldr	r3, [pc, #64]	; (8009e80 <USBH_LL_Init+0x6c>)
 8009e40:	2208      	movs	r2, #8
 8009e42:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009e44:	4b0e      	ldr	r3, [pc, #56]	; (8009e80 <USBH_LL_Init+0x6c>)
 8009e46:	2201      	movs	r2, #1
 8009e48:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009e4a:	4b0d      	ldr	r3, [pc, #52]	; (8009e80 <USBH_LL_Init+0x6c>)
 8009e4c:	2202      	movs	r2, #2
 8009e4e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8009e50:	4b0b      	ldr	r3, [pc, #44]	; (8009e80 <USBH_LL_Init+0x6c>)
 8009e52:	2201      	movs	r2, #1
 8009e54:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009e56:	480a      	ldr	r0, [pc, #40]	; (8009e80 <USBH_LL_Init+0x6c>)
 8009e58:	f7f7 fad4 	bl	8001404 <HAL_HCD_Init>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <USBH_LL_Init+0x52>
  {
    Error_Handler( );
 8009e62:	f7f6 fd3b 	bl	80008dc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009e66:	4806      	ldr	r0, [pc, #24]	; (8009e80 <USBH_LL_Init+0x6c>)
 8009e68:	f7f7 feaa 	bl	8001bc0 <HAL_HCD_GetCurrentFrame>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	4619      	mov	r1, r3
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f7fc fd1f 	bl	80068b4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	20002898 	.word	0x20002898

08009e84 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7f7 fe1c 	bl	8001ad8 <HAL_HCD_Start>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ea4:	7bfb      	ldrb	r3, [r7, #15]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 f95a 	bl	800a160 <USBH_Get_USB_Status>
 8009eac:	4603      	mov	r3, r0
 8009eae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3710      	adds	r7, #16
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b084      	sub	sp, #16
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7f7 fe24 	bl	8001b1e <HAL_HCD_Stop>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009eda:	7bfb      	ldrb	r3, [r7, #15]
 8009edc:	4618      	mov	r0, r3
 8009ede:	f000 f93f 	bl	800a160 <USBH_Get_USB_Status>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ee6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3710      	adds	r7, #16
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8009f02:	4618      	mov	r0, r3
 8009f04:	f7f7 fe6a 	bl	8001bdc <HAL_HCD_GetCurrentSpeed>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d00c      	beq.n	8009f28 <USBH_LL_GetSpeed+0x38>
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d80d      	bhi.n	8009f2e <USBH_LL_GetSpeed+0x3e>
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d002      	beq.n	8009f1c <USBH_LL_GetSpeed+0x2c>
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d003      	beq.n	8009f22 <USBH_LL_GetSpeed+0x32>
 8009f1a:	e008      	b.n	8009f2e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f20:	e008      	b.n	8009f34 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009f22:	2301      	movs	r3, #1
 8009f24:	73fb      	strb	r3, [r7, #15]
    break;
 8009f26:	e005      	b.n	8009f34 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009f28:	2302      	movs	r3, #2
 8009f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f2c:	e002      	b.n	8009f34 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	73fb      	strb	r3, [r7, #15]
    break;
 8009f32:	bf00      	nop
  }
  return  speed;
 8009f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b084      	sub	sp, #16
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f46:	2300      	movs	r3, #0
 8009f48:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7f7 fdff 	bl	8001b58 <HAL_HCD_ResetPort>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009f5e:	7bfb      	ldrb	r3, [r7, #15]
 8009f60:	4618      	mov	r0, r3
 8009f62:	f000 f8fd 	bl	800a160 <USBH_Get_USB_Status>
 8009f66:	4603      	mov	r3, r0
 8009f68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3710      	adds	r7, #16
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8009f86:	78fa      	ldrb	r2, [r7, #3]
 8009f88:	4611      	mov	r1, r2
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7f7 fe05 	bl	8001b9a <HAL_HCD_HC_GetXferCount>
 8009f90:	4603      	mov	r3, r0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}

08009f9a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009f9a:	b590      	push	{r4, r7, lr}
 8009f9c:	b089      	sub	sp, #36	; 0x24
 8009f9e:	af04      	add	r7, sp, #16
 8009fa0:	6078      	str	r0, [r7, #4]
 8009fa2:	4608      	mov	r0, r1
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	4603      	mov	r3, r0
 8009faa:	70fb      	strb	r3, [r7, #3]
 8009fac:	460b      	mov	r3, r1
 8009fae:	70bb      	strb	r3, [r7, #2]
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8009fc2:	787c      	ldrb	r4, [r7, #1]
 8009fc4:	78ba      	ldrb	r2, [r7, #2]
 8009fc6:	78f9      	ldrb	r1, [r7, #3]
 8009fc8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009fca:	9302      	str	r3, [sp, #8]
 8009fcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009fd0:	9301      	str	r3, [sp, #4]
 8009fd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	4623      	mov	r3, r4
 8009fda:	f7f7 fa75 	bl	80014c8 <HAL_HCD_HC_Init>
 8009fde:	4603      	mov	r3, r0
 8009fe0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009fe2:	7bfb      	ldrb	r3, [r7, #15]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f000 f8bb 	bl	800a160 <USBH_Get_USB_Status>
 8009fea:	4603      	mov	r3, r0
 8009fec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fee:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd90      	pop	{r4, r7, pc}

08009ff8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	460b      	mov	r3, r1
 800a002:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a004:	2300      	movs	r3, #0
 800a006:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a008:	2300      	movs	r3, #0
 800a00a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a012:	78fa      	ldrb	r2, [r7, #3]
 800a014:	4611      	mov	r1, r2
 800a016:	4618      	mov	r0, r3
 800a018:	f7f7 fae5 	bl	80015e6 <HAL_HCD_HC_Halt>
 800a01c:	4603      	mov	r3, r0
 800a01e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a020:	7bfb      	ldrb	r3, [r7, #15]
 800a022:	4618      	mov	r0, r3
 800a024:	f000 f89c 	bl	800a160 <USBH_Get_USB_Status>
 800a028:	4603      	mov	r3, r0
 800a02a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a02c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a036:	b590      	push	{r4, r7, lr}
 800a038:	b089      	sub	sp, #36	; 0x24
 800a03a:	af04      	add	r7, sp, #16
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	4608      	mov	r0, r1
 800a040:	4611      	mov	r1, r2
 800a042:	461a      	mov	r2, r3
 800a044:	4603      	mov	r3, r0
 800a046:	70fb      	strb	r3, [r7, #3]
 800a048:	460b      	mov	r3, r1
 800a04a:	70bb      	strb	r3, [r7, #2]
 800a04c:	4613      	mov	r3, r2
 800a04e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a050:	2300      	movs	r3, #0
 800a052:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a054:	2300      	movs	r3, #0
 800a056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800a05e:	787c      	ldrb	r4, [r7, #1]
 800a060:	78ba      	ldrb	r2, [r7, #2]
 800a062:	78f9      	ldrb	r1, [r7, #3]
 800a064:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a068:	9303      	str	r3, [sp, #12]
 800a06a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a06c:	9302      	str	r3, [sp, #8]
 800a06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a070:	9301      	str	r3, [sp, #4]
 800a072:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	4623      	mov	r3, r4
 800a07a:	f7f7 fad7 	bl	800162c <HAL_HCD_HC_SubmitRequest>
 800a07e:	4603      	mov	r3, r0
 800a080:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a082:	7bfb      	ldrb	r3, [r7, #15]
 800a084:	4618      	mov	r0, r3
 800a086:	f000 f86b 	bl	800a160 <USBH_Get_USB_Status>
 800a08a:	4603      	mov	r3, r0
 800a08c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a08e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a090:	4618      	mov	r0, r3
 800a092:	3714      	adds	r7, #20
 800a094:	46bd      	mov	sp, r7
 800a096:	bd90      	pop	{r4, r7, pc}

0800a098 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a0aa:	78fa      	ldrb	r2, [r7, #3]
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7f7 fd60 	bl	8001b74 <HAL_HCD_HC_GetURBState>
 800a0b4:	4603      	mov	r3, r0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}

0800a0be <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a0be:	b580      	push	{r7, lr}
 800a0c0:	b082      	sub	sp, #8
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d103      	bne.n	800a0dc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a0d4:	78fb      	ldrb	r3, [r7, #3]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f000 f86e 	bl	800a1b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a0dc:	20c8      	movs	r0, #200	; 0xc8
 800a0de:	f7f6 fdaf 	bl	8000c40 <HAL_Delay>
  return USBH_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	70fb      	strb	r3, [r7, #3]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 800a102:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a104:	78fb      	ldrb	r3, [r7, #3]
 800a106:	68fa      	ldr	r2, [r7, #12]
 800a108:	212c      	movs	r1, #44	; 0x2c
 800a10a:	fb01 f303 	mul.w	r3, r1, r3
 800a10e:	4413      	add	r3, r2
 800a110:	333b      	adds	r3, #59	; 0x3b
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d009      	beq.n	800a12c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a118:	78fb      	ldrb	r3, [r7, #3]
 800a11a:	68fa      	ldr	r2, [r7, #12]
 800a11c:	212c      	movs	r1, #44	; 0x2c
 800a11e:	fb01 f303 	mul.w	r3, r1, r3
 800a122:	4413      	add	r3, r2
 800a124:	3354      	adds	r3, #84	; 0x54
 800a126:	78ba      	ldrb	r2, [r7, #2]
 800a128:	701a      	strb	r2, [r3, #0]
 800a12a:	e008      	b.n	800a13e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a12c:	78fb      	ldrb	r3, [r7, #3]
 800a12e:	68fa      	ldr	r2, [r7, #12]
 800a130:	212c      	movs	r1, #44	; 0x2c
 800a132:	fb01 f303 	mul.w	r3, r1, r3
 800a136:	4413      	add	r3, r2
 800a138:	3355      	adds	r3, #85	; 0x55
 800a13a:	78ba      	ldrb	r2, [r7, #2]
 800a13c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	bc80      	pop	{r7}
 800a148:	4770      	bx	lr

0800a14a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b082      	sub	sp, #8
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7f6 fd74 	bl	8000c40 <HAL_Delay>
}
 800a158:	bf00      	nop
 800a15a:	3708      	adds	r7, #8
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	4603      	mov	r3, r0
 800a168:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a16e:	79fb      	ldrb	r3, [r7, #7]
 800a170:	2b03      	cmp	r3, #3
 800a172:	d817      	bhi.n	800a1a4 <USBH_Get_USB_Status+0x44>
 800a174:	a201      	add	r2, pc, #4	; (adr r2, 800a17c <USBH_Get_USB_Status+0x1c>)
 800a176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17a:	bf00      	nop
 800a17c:	0800a18d 	.word	0x0800a18d
 800a180:	0800a193 	.word	0x0800a193
 800a184:	0800a199 	.word	0x0800a199
 800a188:	0800a19f 	.word	0x0800a19f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	73fb      	strb	r3, [r7, #15]
    break;
 800a190:	e00b      	b.n	800a1aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a192:	2302      	movs	r3, #2
 800a194:	73fb      	strb	r3, [r7, #15]
    break;
 800a196:	e008      	b.n	800a1aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a198:	2301      	movs	r3, #1
 800a19a:	73fb      	strb	r3, [r7, #15]
    break;
 800a19c:	e005      	b.n	800a1aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a19e:	2302      	movs	r3, #2
 800a1a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a1a2:	e002      	b.n	800a1aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a1a4:	2302      	movs	r3, #2
 800a1a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a1a8:	bf00      	nop
  }
  return usb_status;
 800a1aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3714      	adds	r7, #20
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bc80      	pop	{r7}
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop

0800a1b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	4603      	mov	r3, r0
 800a1c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a1c2:	79fb      	ldrb	r3, [r7, #7]
 800a1c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a1c6:	79fb      	ldrb	r3, [r7, #7]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d102      	bne.n	800a1d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	73fb      	strb	r3, [r7, #15]
 800a1d0:	e001      	b.n	800a1d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,(GPIO_PinState)data);
 800a1d6:	7bfb      	ldrb	r3, [r7, #15]
 800a1d8:	461a      	mov	r2, r3
 800a1da:	2101      	movs	r1, #1
 800a1dc:	4803      	ldr	r0, [pc, #12]	; (800a1ec <MX_DriverVbusFS+0x34>)
 800a1de:	f7f7 f8f9 	bl	80013d4 <HAL_GPIO_WritePin>
}
 800a1e2:	bf00      	nop
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}
 800a1ea:	bf00      	nop
 800a1ec:	40010c00 	.word	0x40010c00

0800a1f0 <__errno>:
 800a1f0:	4b01      	ldr	r3, [pc, #4]	; (800a1f8 <__errno+0x8>)
 800a1f2:	6818      	ldr	r0, [r3, #0]
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	20000038 	.word	0x20000038

0800a1fc <__libc_init_array>:
 800a1fc:	b570      	push	{r4, r5, r6, lr}
 800a1fe:	2600      	movs	r6, #0
 800a200:	4d0c      	ldr	r5, [pc, #48]	; (800a234 <__libc_init_array+0x38>)
 800a202:	4c0d      	ldr	r4, [pc, #52]	; (800a238 <__libc_init_array+0x3c>)
 800a204:	1b64      	subs	r4, r4, r5
 800a206:	10a4      	asrs	r4, r4, #2
 800a208:	42a6      	cmp	r6, r4
 800a20a:	d109      	bne.n	800a220 <__libc_init_array+0x24>
 800a20c:	f000 f93a 	bl	800a484 <_init>
 800a210:	2600      	movs	r6, #0
 800a212:	4d0a      	ldr	r5, [pc, #40]	; (800a23c <__libc_init_array+0x40>)
 800a214:	4c0a      	ldr	r4, [pc, #40]	; (800a240 <__libc_init_array+0x44>)
 800a216:	1b64      	subs	r4, r4, r5
 800a218:	10a4      	asrs	r4, r4, #2
 800a21a:	42a6      	cmp	r6, r4
 800a21c:	d105      	bne.n	800a22a <__libc_init_array+0x2e>
 800a21e:	bd70      	pop	{r4, r5, r6, pc}
 800a220:	f855 3b04 	ldr.w	r3, [r5], #4
 800a224:	4798      	blx	r3
 800a226:	3601      	adds	r6, #1
 800a228:	e7ee      	b.n	800a208 <__libc_init_array+0xc>
 800a22a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a22e:	4798      	blx	r3
 800a230:	3601      	adds	r6, #1
 800a232:	e7f2      	b.n	800a21a <__libc_init_array+0x1e>
 800a234:	0800a590 	.word	0x0800a590
 800a238:	0800a590 	.word	0x0800a590
 800a23c:	0800a590 	.word	0x0800a590
 800a240:	0800a594 	.word	0x0800a594

0800a244 <malloc>:
 800a244:	4b02      	ldr	r3, [pc, #8]	; (800a250 <malloc+0xc>)
 800a246:	4601      	mov	r1, r0
 800a248:	6818      	ldr	r0, [r3, #0]
 800a24a:	f000 b889 	b.w	800a360 <_malloc_r>
 800a24e:	bf00      	nop
 800a250:	20000038 	.word	0x20000038

0800a254 <free>:
 800a254:	4b02      	ldr	r3, [pc, #8]	; (800a260 <free+0xc>)
 800a256:	4601      	mov	r1, r0
 800a258:	6818      	ldr	r0, [r3, #0]
 800a25a:	f000 b819 	b.w	800a290 <_free_r>
 800a25e:	bf00      	nop
 800a260:	20000038 	.word	0x20000038

0800a264 <memcpy>:
 800a264:	440a      	add	r2, r1
 800a266:	4291      	cmp	r1, r2
 800a268:	f100 33ff 	add.w	r3, r0, #4294967295
 800a26c:	d100      	bne.n	800a270 <memcpy+0xc>
 800a26e:	4770      	bx	lr
 800a270:	b510      	push	{r4, lr}
 800a272:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a276:	4291      	cmp	r1, r2
 800a278:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a27c:	d1f9      	bne.n	800a272 <memcpy+0xe>
 800a27e:	bd10      	pop	{r4, pc}

0800a280 <memset>:
 800a280:	4603      	mov	r3, r0
 800a282:	4402      	add	r2, r0
 800a284:	4293      	cmp	r3, r2
 800a286:	d100      	bne.n	800a28a <memset+0xa>
 800a288:	4770      	bx	lr
 800a28a:	f803 1b01 	strb.w	r1, [r3], #1
 800a28e:	e7f9      	b.n	800a284 <memset+0x4>

0800a290 <_free_r>:
 800a290:	b538      	push	{r3, r4, r5, lr}
 800a292:	4605      	mov	r5, r0
 800a294:	2900      	cmp	r1, #0
 800a296:	d040      	beq.n	800a31a <_free_r+0x8a>
 800a298:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a29c:	1f0c      	subs	r4, r1, #4
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	bfb8      	it	lt
 800a2a2:	18e4      	addlt	r4, r4, r3
 800a2a4:	f000 f8e0 	bl	800a468 <__malloc_lock>
 800a2a8:	4a1c      	ldr	r2, [pc, #112]	; (800a31c <_free_r+0x8c>)
 800a2aa:	6813      	ldr	r3, [r2, #0]
 800a2ac:	b933      	cbnz	r3, 800a2bc <_free_r+0x2c>
 800a2ae:	6063      	str	r3, [r4, #4]
 800a2b0:	6014      	str	r4, [r2, #0]
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2b8:	f000 b8dc 	b.w	800a474 <__malloc_unlock>
 800a2bc:	42a3      	cmp	r3, r4
 800a2be:	d908      	bls.n	800a2d2 <_free_r+0x42>
 800a2c0:	6820      	ldr	r0, [r4, #0]
 800a2c2:	1821      	adds	r1, r4, r0
 800a2c4:	428b      	cmp	r3, r1
 800a2c6:	bf01      	itttt	eq
 800a2c8:	6819      	ldreq	r1, [r3, #0]
 800a2ca:	685b      	ldreq	r3, [r3, #4]
 800a2cc:	1809      	addeq	r1, r1, r0
 800a2ce:	6021      	streq	r1, [r4, #0]
 800a2d0:	e7ed      	b.n	800a2ae <_free_r+0x1e>
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	685b      	ldr	r3, [r3, #4]
 800a2d6:	b10b      	cbz	r3, 800a2dc <_free_r+0x4c>
 800a2d8:	42a3      	cmp	r3, r4
 800a2da:	d9fa      	bls.n	800a2d2 <_free_r+0x42>
 800a2dc:	6811      	ldr	r1, [r2, #0]
 800a2de:	1850      	adds	r0, r2, r1
 800a2e0:	42a0      	cmp	r0, r4
 800a2e2:	d10b      	bne.n	800a2fc <_free_r+0x6c>
 800a2e4:	6820      	ldr	r0, [r4, #0]
 800a2e6:	4401      	add	r1, r0
 800a2e8:	1850      	adds	r0, r2, r1
 800a2ea:	4283      	cmp	r3, r0
 800a2ec:	6011      	str	r1, [r2, #0]
 800a2ee:	d1e0      	bne.n	800a2b2 <_free_r+0x22>
 800a2f0:	6818      	ldr	r0, [r3, #0]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	4401      	add	r1, r0
 800a2f6:	6011      	str	r1, [r2, #0]
 800a2f8:	6053      	str	r3, [r2, #4]
 800a2fa:	e7da      	b.n	800a2b2 <_free_r+0x22>
 800a2fc:	d902      	bls.n	800a304 <_free_r+0x74>
 800a2fe:	230c      	movs	r3, #12
 800a300:	602b      	str	r3, [r5, #0]
 800a302:	e7d6      	b.n	800a2b2 <_free_r+0x22>
 800a304:	6820      	ldr	r0, [r4, #0]
 800a306:	1821      	adds	r1, r4, r0
 800a308:	428b      	cmp	r3, r1
 800a30a:	bf01      	itttt	eq
 800a30c:	6819      	ldreq	r1, [r3, #0]
 800a30e:	685b      	ldreq	r3, [r3, #4]
 800a310:	1809      	addeq	r1, r1, r0
 800a312:	6021      	streq	r1, [r4, #0]
 800a314:	6063      	str	r3, [r4, #4]
 800a316:	6054      	str	r4, [r2, #4]
 800a318:	e7cb      	b.n	800a2b2 <_free_r+0x22>
 800a31a:	bd38      	pop	{r3, r4, r5, pc}
 800a31c:	20002b9c 	.word	0x20002b9c

0800a320 <sbrk_aligned>:
 800a320:	b570      	push	{r4, r5, r6, lr}
 800a322:	4e0e      	ldr	r6, [pc, #56]	; (800a35c <sbrk_aligned+0x3c>)
 800a324:	460c      	mov	r4, r1
 800a326:	6831      	ldr	r1, [r6, #0]
 800a328:	4605      	mov	r5, r0
 800a32a:	b911      	cbnz	r1, 800a332 <sbrk_aligned+0x12>
 800a32c:	f000 f88c 	bl	800a448 <_sbrk_r>
 800a330:	6030      	str	r0, [r6, #0]
 800a332:	4621      	mov	r1, r4
 800a334:	4628      	mov	r0, r5
 800a336:	f000 f887 	bl	800a448 <_sbrk_r>
 800a33a:	1c43      	adds	r3, r0, #1
 800a33c:	d00a      	beq.n	800a354 <sbrk_aligned+0x34>
 800a33e:	1cc4      	adds	r4, r0, #3
 800a340:	f024 0403 	bic.w	r4, r4, #3
 800a344:	42a0      	cmp	r0, r4
 800a346:	d007      	beq.n	800a358 <sbrk_aligned+0x38>
 800a348:	1a21      	subs	r1, r4, r0
 800a34a:	4628      	mov	r0, r5
 800a34c:	f000 f87c 	bl	800a448 <_sbrk_r>
 800a350:	3001      	adds	r0, #1
 800a352:	d101      	bne.n	800a358 <sbrk_aligned+0x38>
 800a354:	f04f 34ff 	mov.w	r4, #4294967295
 800a358:	4620      	mov	r0, r4
 800a35a:	bd70      	pop	{r4, r5, r6, pc}
 800a35c:	20002ba0 	.word	0x20002ba0

0800a360 <_malloc_r>:
 800a360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a364:	1ccd      	adds	r5, r1, #3
 800a366:	f025 0503 	bic.w	r5, r5, #3
 800a36a:	3508      	adds	r5, #8
 800a36c:	2d0c      	cmp	r5, #12
 800a36e:	bf38      	it	cc
 800a370:	250c      	movcc	r5, #12
 800a372:	2d00      	cmp	r5, #0
 800a374:	4607      	mov	r7, r0
 800a376:	db01      	blt.n	800a37c <_malloc_r+0x1c>
 800a378:	42a9      	cmp	r1, r5
 800a37a:	d905      	bls.n	800a388 <_malloc_r+0x28>
 800a37c:	230c      	movs	r3, #12
 800a37e:	2600      	movs	r6, #0
 800a380:	603b      	str	r3, [r7, #0]
 800a382:	4630      	mov	r0, r6
 800a384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a388:	4e2e      	ldr	r6, [pc, #184]	; (800a444 <_malloc_r+0xe4>)
 800a38a:	f000 f86d 	bl	800a468 <__malloc_lock>
 800a38e:	6833      	ldr	r3, [r6, #0]
 800a390:	461c      	mov	r4, r3
 800a392:	bb34      	cbnz	r4, 800a3e2 <_malloc_r+0x82>
 800a394:	4629      	mov	r1, r5
 800a396:	4638      	mov	r0, r7
 800a398:	f7ff ffc2 	bl	800a320 <sbrk_aligned>
 800a39c:	1c43      	adds	r3, r0, #1
 800a39e:	4604      	mov	r4, r0
 800a3a0:	d14d      	bne.n	800a43e <_malloc_r+0xde>
 800a3a2:	6834      	ldr	r4, [r6, #0]
 800a3a4:	4626      	mov	r6, r4
 800a3a6:	2e00      	cmp	r6, #0
 800a3a8:	d140      	bne.n	800a42c <_malloc_r+0xcc>
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	4631      	mov	r1, r6
 800a3ae:	4638      	mov	r0, r7
 800a3b0:	eb04 0803 	add.w	r8, r4, r3
 800a3b4:	f000 f848 	bl	800a448 <_sbrk_r>
 800a3b8:	4580      	cmp	r8, r0
 800a3ba:	d13a      	bne.n	800a432 <_malloc_r+0xd2>
 800a3bc:	6821      	ldr	r1, [r4, #0]
 800a3be:	3503      	adds	r5, #3
 800a3c0:	1a6d      	subs	r5, r5, r1
 800a3c2:	f025 0503 	bic.w	r5, r5, #3
 800a3c6:	3508      	adds	r5, #8
 800a3c8:	2d0c      	cmp	r5, #12
 800a3ca:	bf38      	it	cc
 800a3cc:	250c      	movcc	r5, #12
 800a3ce:	4638      	mov	r0, r7
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	f7ff ffa5 	bl	800a320 <sbrk_aligned>
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	d02b      	beq.n	800a432 <_malloc_r+0xd2>
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	442b      	add	r3, r5
 800a3de:	6023      	str	r3, [r4, #0]
 800a3e0:	e00e      	b.n	800a400 <_malloc_r+0xa0>
 800a3e2:	6822      	ldr	r2, [r4, #0]
 800a3e4:	1b52      	subs	r2, r2, r5
 800a3e6:	d41e      	bmi.n	800a426 <_malloc_r+0xc6>
 800a3e8:	2a0b      	cmp	r2, #11
 800a3ea:	d916      	bls.n	800a41a <_malloc_r+0xba>
 800a3ec:	1961      	adds	r1, r4, r5
 800a3ee:	42a3      	cmp	r3, r4
 800a3f0:	6025      	str	r5, [r4, #0]
 800a3f2:	bf18      	it	ne
 800a3f4:	6059      	strne	r1, [r3, #4]
 800a3f6:	6863      	ldr	r3, [r4, #4]
 800a3f8:	bf08      	it	eq
 800a3fa:	6031      	streq	r1, [r6, #0]
 800a3fc:	5162      	str	r2, [r4, r5]
 800a3fe:	604b      	str	r3, [r1, #4]
 800a400:	4638      	mov	r0, r7
 800a402:	f104 060b 	add.w	r6, r4, #11
 800a406:	f000 f835 	bl	800a474 <__malloc_unlock>
 800a40a:	f026 0607 	bic.w	r6, r6, #7
 800a40e:	1d23      	adds	r3, r4, #4
 800a410:	1af2      	subs	r2, r6, r3
 800a412:	d0b6      	beq.n	800a382 <_malloc_r+0x22>
 800a414:	1b9b      	subs	r3, r3, r6
 800a416:	50a3      	str	r3, [r4, r2]
 800a418:	e7b3      	b.n	800a382 <_malloc_r+0x22>
 800a41a:	6862      	ldr	r2, [r4, #4]
 800a41c:	42a3      	cmp	r3, r4
 800a41e:	bf0c      	ite	eq
 800a420:	6032      	streq	r2, [r6, #0]
 800a422:	605a      	strne	r2, [r3, #4]
 800a424:	e7ec      	b.n	800a400 <_malloc_r+0xa0>
 800a426:	4623      	mov	r3, r4
 800a428:	6864      	ldr	r4, [r4, #4]
 800a42a:	e7b2      	b.n	800a392 <_malloc_r+0x32>
 800a42c:	4634      	mov	r4, r6
 800a42e:	6876      	ldr	r6, [r6, #4]
 800a430:	e7b9      	b.n	800a3a6 <_malloc_r+0x46>
 800a432:	230c      	movs	r3, #12
 800a434:	4638      	mov	r0, r7
 800a436:	603b      	str	r3, [r7, #0]
 800a438:	f000 f81c 	bl	800a474 <__malloc_unlock>
 800a43c:	e7a1      	b.n	800a382 <_malloc_r+0x22>
 800a43e:	6025      	str	r5, [r4, #0]
 800a440:	e7de      	b.n	800a400 <_malloc_r+0xa0>
 800a442:	bf00      	nop
 800a444:	20002b9c 	.word	0x20002b9c

0800a448 <_sbrk_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	2300      	movs	r3, #0
 800a44c:	4d05      	ldr	r5, [pc, #20]	; (800a464 <_sbrk_r+0x1c>)
 800a44e:	4604      	mov	r4, r0
 800a450:	4608      	mov	r0, r1
 800a452:	602b      	str	r3, [r5, #0]
 800a454:	f7f6 fb60 	bl	8000b18 <_sbrk>
 800a458:	1c43      	adds	r3, r0, #1
 800a45a:	d102      	bne.n	800a462 <_sbrk_r+0x1a>
 800a45c:	682b      	ldr	r3, [r5, #0]
 800a45e:	b103      	cbz	r3, 800a462 <_sbrk_r+0x1a>
 800a460:	6023      	str	r3, [r4, #0]
 800a462:	bd38      	pop	{r3, r4, r5, pc}
 800a464:	20002ba4 	.word	0x20002ba4

0800a468 <__malloc_lock>:
 800a468:	4801      	ldr	r0, [pc, #4]	; (800a470 <__malloc_lock+0x8>)
 800a46a:	f000 b809 	b.w	800a480 <__retarget_lock_acquire_recursive>
 800a46e:	bf00      	nop
 800a470:	20002ba8 	.word	0x20002ba8

0800a474 <__malloc_unlock>:
 800a474:	4801      	ldr	r0, [pc, #4]	; (800a47c <__malloc_unlock+0x8>)
 800a476:	f000 b804 	b.w	800a482 <__retarget_lock_release_recursive>
 800a47a:	bf00      	nop
 800a47c:	20002ba8 	.word	0x20002ba8

0800a480 <__retarget_lock_acquire_recursive>:
 800a480:	4770      	bx	lr

0800a482 <__retarget_lock_release_recursive>:
 800a482:	4770      	bx	lr

0800a484 <_init>:
 800a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a486:	bf00      	nop
 800a488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a48a:	bc08      	pop	{r3}
 800a48c:	469e      	mov	lr, r3
 800a48e:	4770      	bx	lr

0800a490 <_fini>:
 800a490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a492:	bf00      	nop
 800a494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a496:	bc08      	pop	{r3}
 800a498:	469e      	mov	lr, r3
 800a49a:	4770      	bx	lr
