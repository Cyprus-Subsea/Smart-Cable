
RS232_GLIDERF107.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002340  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002524  08002524  00012524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002560  08002560  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002560  08002560  00012560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002568  08002568  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002568  08002568  00012568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800256c  0800256c  0001256c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002570  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  0800257c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  0800257c  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000608b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001463  00000000  00000000  000260c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000670  00000000  00000000  00027528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  00027b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df7d  00000000  00000000  00028190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007403  00000000  00000000  0004610d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae3d3  00000000  00000000  0004d510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb8e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001934  00000000  00000000  000fb938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	0800250c 	.word	0x0800250c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	0800250c 	.word	0x0800250c

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b96e 	b.w	8000518 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	468e      	mov	lr, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	f040 8083 	bne.w	800036c <__udivmoddi4+0x118>
 8000266:	428a      	cmp	r2, r1
 8000268:	4617      	mov	r7, r2
 800026a:	d947      	bls.n	80002fc <__udivmoddi4+0xa8>
 800026c:	fab2 f382 	clz	r3, r2
 8000270:	b14b      	cbz	r3, 8000286 <__udivmoddi4+0x32>
 8000272:	f1c3 0120 	rsb	r1, r3, #32
 8000276:	fa05 fe03 	lsl.w	lr, r5, r3
 800027a:	fa20 f101 	lsr.w	r1, r0, r1
 800027e:	409f      	lsls	r7, r3
 8000280:	ea41 0e0e 	orr.w	lr, r1, lr
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800028a:	fbbe fcf8 	udiv	ip, lr, r8
 800028e:	fa1f f987 	uxth.w	r9, r7
 8000292:	fb08 e21c 	mls	r2, r8, ip, lr
 8000296:	fb0c f009 	mul.w	r0, ip, r9
 800029a:	0c21      	lsrs	r1, r4, #16
 800029c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	18ba      	adds	r2, r7, r2
 80002a6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80002aa:	f080 8118 	bcs.w	80004de <__udivmoddi4+0x28a>
 80002ae:	4290      	cmp	r0, r2
 80002b0:	f240 8115 	bls.w	80004de <__udivmoddi4+0x28a>
 80002b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80002b8:	443a      	add	r2, r7
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	fbb2 f0f8 	udiv	r0, r2, r8
 80002c0:	fb08 2210 	mls	r2, r8, r0, r2
 80002c4:	fb00 f109 	mul.w	r1, r0, r9
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	42a1      	cmp	r1, r4
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0x92>
 80002d2:	193c      	adds	r4, r7, r4
 80002d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d8:	f080 8103 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002dc:	42a1      	cmp	r1, r4
 80002de:	f240 8100 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002e2:	3802      	subs	r0, #2
 80002e4:	443c      	add	r4, r7
 80002e6:	1a64      	subs	r4, r4, r1
 80002e8:	2100      	movs	r1, #0
 80002ea:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa4>
 80002f0:	2200      	movs	r2, #0
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	e9c6 4200 	strd	r4, r2, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xac>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f382 	clz	r3, r2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d14f      	bne.n	80003a8 <__udivmoddi4+0x154>
 8000308:	1a8d      	subs	r5, r1, r2
 800030a:	2101      	movs	r1, #1
 800030c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000310:	fa1f f882 	uxth.w	r8, r2
 8000314:	fbb5 fcfe 	udiv	ip, r5, lr
 8000318:	fb0e 551c 	mls	r5, lr, ip, r5
 800031c:	fb08 f00c 	mul.w	r0, r8, ip
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000326:	42a8      	cmp	r0, r5
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0xe6>
 800032a:	197d      	adds	r5, r7, r5
 800032c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0xe4>
 8000332:	42a8      	cmp	r0, r5
 8000334:	f200 80e9 	bhi.w	800050a <__udivmoddi4+0x2b6>
 8000338:	4694      	mov	ip, r2
 800033a:	1a2d      	subs	r5, r5, r0
 800033c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000340:	fb0e 5510 	mls	r5, lr, r0, r5
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	b2a4      	uxth	r4, r4
 800034a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034e:	45a0      	cmp	r8, r4
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x10e>
 8000352:	193c      	adds	r4, r7, r4
 8000354:	f100 32ff 	add.w	r2, r0, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x10c>
 800035a:	45a0      	cmp	r8, r4
 800035c:	f200 80d9 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000360:	4610      	mov	r0, r2
 8000362:	eba4 0408 	sub.w	r4, r4, r8
 8000366:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036a:	e7c0      	b.n	80002ee <__udivmoddi4+0x9a>
 800036c:	428b      	cmp	r3, r1
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x12e>
 8000370:	2e00      	cmp	r6, #0
 8000372:	f000 80b1 	beq.w	80004d8 <__udivmoddi4+0x284>
 8000376:	2100      	movs	r1, #0
 8000378:	e9c6 0500 	strd	r0, r5, [r6]
 800037c:	4608      	mov	r0, r1
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f183 	clz	r1, r3
 8000386:	2900      	cmp	r1, #0
 8000388:	d14b      	bne.n	8000422 <__udivmoddi4+0x1ce>
 800038a:	42ab      	cmp	r3, r5
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0x140>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80b9 	bhi.w	8000506 <__udivmoddi4+0x2b2>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb65 0303 	sbc.w	r3, r5, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d0aa      	beq.n	80002f8 <__udivmoddi4+0xa4>
 80003a2:	e9c6 4e00 	strd	r4, lr, [r6]
 80003a6:	e7a7      	b.n	80002f8 <__udivmoddi4+0xa4>
 80003a8:	409f      	lsls	r7, r3
 80003aa:	f1c3 0220 	rsb	r2, r3, #32
 80003ae:	40d1      	lsrs	r1, r2
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	fa24 f202 	lsr.w	r2, r4, r2
 80003c4:	409d      	lsls	r5, r3
 80003c6:	fb00 fc08 	mul.w	ip, r0, r8
 80003ca:	432a      	orrs	r2, r5
 80003cc:	0c15      	lsrs	r5, r2, #16
 80003ce:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80003d2:	45ac      	cmp	ip, r5
 80003d4:	fa04 f403 	lsl.w	r4, r4, r3
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x19a>
 80003da:	197d      	adds	r5, r7, r5
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	f080 808f 	bcs.w	8000502 <__udivmoddi4+0x2ae>
 80003e4:	45ac      	cmp	ip, r5
 80003e6:	f240 808c 	bls.w	8000502 <__udivmoddi4+0x2ae>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	eba5 050c 	sub.w	r5, r5, ip
 80003f2:	fbb5 f1fe 	udiv	r1, r5, lr
 80003f6:	fb0e 5c11 	mls	ip, lr, r1, r5
 80003fa:	fb01 f908 	mul.w	r9, r1, r8
 80003fe:	b295      	uxth	r5, r2
 8000400:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000404:	45a9      	cmp	r9, r5
 8000406:	d907      	bls.n	8000418 <__udivmoddi4+0x1c4>
 8000408:	197d      	adds	r5, r7, r5
 800040a:	f101 32ff 	add.w	r2, r1, #4294967295
 800040e:	d274      	bcs.n	80004fa <__udivmoddi4+0x2a6>
 8000410:	45a9      	cmp	r9, r5
 8000412:	d972      	bls.n	80004fa <__udivmoddi4+0x2a6>
 8000414:	3902      	subs	r1, #2
 8000416:	443d      	add	r5, r7
 8000418:	eba5 0509 	sub.w	r5, r5, r9
 800041c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000420:	e778      	b.n	8000314 <__udivmoddi4+0xc0>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	408b      	lsls	r3, r1
 8000428:	fa22 fc07 	lsr.w	ip, r2, r7
 800042c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000430:	fa25 f407 	lsr.w	r4, r5, r7
 8000434:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000438:	fbb4 f9fe 	udiv	r9, r4, lr
 800043c:	fa1f f88c 	uxth.w	r8, ip
 8000440:	fb0e 4419 	mls	r4, lr, r9, r4
 8000444:	fa20 f307 	lsr.w	r3, r0, r7
 8000448:	fb09 fa08 	mul.w	sl, r9, r8
 800044c:	408d      	lsls	r5, r1
 800044e:	431d      	orrs	r5, r3
 8000450:	0c2b      	lsrs	r3, r5, #16
 8000452:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000456:	45a2      	cmp	sl, r4
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 f301 	lsl.w	r3, r0, r1
 8000460:	d909      	bls.n	8000476 <__udivmoddi4+0x222>
 8000462:	eb1c 0404 	adds.w	r4, ip, r4
 8000466:	f109 30ff 	add.w	r0, r9, #4294967295
 800046a:	d248      	bcs.n	80004fe <__udivmoddi4+0x2aa>
 800046c:	45a2      	cmp	sl, r4
 800046e:	d946      	bls.n	80004fe <__udivmoddi4+0x2aa>
 8000470:	f1a9 0902 	sub.w	r9, r9, #2
 8000474:	4464      	add	r4, ip
 8000476:	eba4 040a 	sub.w	r4, r4, sl
 800047a:	fbb4 f0fe 	udiv	r0, r4, lr
 800047e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000482:	fb00 fa08 	mul.w	sl, r0, r8
 8000486:	b2ad      	uxth	r5, r5
 8000488:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800048c:	45a2      	cmp	sl, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x24e>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d22d      	bcs.n	80004f6 <__udivmoddi4+0x2a2>
 800049a:	45a2      	cmp	sl, r4
 800049c:	d92b      	bls.n	80004f6 <__udivmoddi4+0x2a2>
 800049e:	3802      	subs	r0, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	eba4 040a 	sub.w	r4, r4, sl
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d319      	bcc.n	80004ea <__udivmoddi4+0x296>
 80004b6:	d016      	beq.n	80004e6 <__udivmoddi4+0x292>
 80004b8:	b15e      	cbz	r6, 80004d2 <__udivmoddi4+0x27e>
 80004ba:	ebb3 020e 	subs.w	r2, r3, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ca:	431f      	orrs	r7, r3
 80004cc:	40cc      	lsrs	r4, r1
 80004ce:	e9c6 7400 	strd	r7, r4, [r6]
 80004d2:	2100      	movs	r1, #0
 80004d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e70c      	b.n	80002f8 <__udivmoddi4+0xa4>
 80004de:	468c      	mov	ip, r1
 80004e0:	e6eb      	b.n	80002ba <__udivmoddi4+0x66>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6ff      	b.n	80002e6 <__udivmoddi4+0x92>
 80004e6:	4543      	cmp	r3, r8
 80004e8:	d2e6      	bcs.n	80004b8 <__udivmoddi4+0x264>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb69 050c 	sbc.w	r5, r9, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7e0      	b.n	80004b8 <__udivmoddi4+0x264>
 80004f6:	4628      	mov	r0, r5
 80004f8:	e7d3      	b.n	80004a2 <__udivmoddi4+0x24e>
 80004fa:	4611      	mov	r1, r2
 80004fc:	e78c      	b.n	8000418 <__udivmoddi4+0x1c4>
 80004fe:	4681      	mov	r9, r0
 8000500:	e7b9      	b.n	8000476 <__udivmoddi4+0x222>
 8000502:	4608      	mov	r0, r1
 8000504:	e773      	b.n	80003ee <__udivmoddi4+0x19a>
 8000506:	4608      	mov	r0, r1
 8000508:	e749      	b.n	800039e <__udivmoddi4+0x14a>
 800050a:	f1ac 0c02 	sub.w	ip, ip, #2
 800050e:	443d      	add	r5, r7
 8000510:	e713      	b.n	800033a <__udivmoddi4+0xe6>
 8000512:	3802      	subs	r0, #2
 8000514:	443c      	add	r4, r7
 8000516:	e724      	b.n	8000362 <__udivmoddi4+0x10e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 f98a 	bl	8000838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f814 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f886 	bl	8000638 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800052c:	f000 f85a 	bl	80005e4 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Transmit(&huart1,"!",1,100);
 8000530:	2364      	movs	r3, #100	; 0x64
 8000532:	2201      	movs	r2, #1
 8000534:	4904      	ldr	r1, [pc, #16]	; (8000548 <main+0x2c>)
 8000536:	4805      	ldr	r0, [pc, #20]	; (800054c <main+0x30>)
 8000538:	f001 fb31 	bl	8001b9e <HAL_UART_Transmit>
	HAL_Delay(1000);
 800053c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000540:	f000 f9dc 	bl	80008fc <HAL_Delay>
	HAL_UART_Transmit(&huart1,"!",1,100);
 8000544:	e7f4      	b.n	8000530 <main+0x14>
 8000546:	bf00      	nop
 8000548:	08002524 	.word	0x08002524
 800054c:	20000028 	.word	0x20000028

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0318 	add.w	r3, r7, #24
 800055a:	2238      	movs	r2, #56	; 0x38
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f001 ffcc 	bl	80024fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000572:	2302      	movs	r3, #2
 8000574:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000576:	2301      	movs	r3, #1
 8000578:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057a:	2310      	movs	r3, #16
 800057c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000586:	2300      	movs	r3, #0
 8000588:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 800058a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000590:	2300      	movs	r3, #0
 8000592:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 0318 	add.w	r3, r7, #24
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fda7 	bl	80010ec <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005a4:	f000 f85e 	bl	8000664 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2302      	movs	r3, #2
 80005ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 f8a8 	bl	8001718 <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ce:	f000 f849 	bl	8000664 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80005d2:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <SystemClock_Config+0x90>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	601a      	str	r2, [r3, #0]
}
 80005d8:	bf00      	nop
 80005da:	3750      	adds	r7, #80	; 0x50
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	42420070 	.word	0x42420070

080005e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 80005ea:	4a12      	ldr	r2, [pc, #72]	; (8000634 <MX_USART1_UART_Init+0x50>)
 80005ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005ee:	4b10      	ldr	r3, [pc, #64]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 80005f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_USART1_UART_Init+0x4c>)
 800061c:	f001 fa72 	bl	8001b04 <HAL_UART_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000626:	f000 f81d 	bl	8000664 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000028 	.word	0x20000028
 8000634:	40013800 	.word	0x40013800

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <MX_GPIO_Init+0x28>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	4a07      	ldr	r2, [pc, #28]	; (8000660 <MX_GPIO_Init+0x28>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	6193      	str	r3, [r2, #24]
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <MX_GPIO_Init+0x28>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f003 0304 	and.w	r3, r3, #4
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]

}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	40021000 	.word	0x40021000

08000664 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000668:	b672      	cpsid	i
}
 800066a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066c:	e7fe      	b.n	800066c <Error_Handler+0x8>
	...

08000670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000670:	b480      	push	{r7}
 8000672:	b085      	sub	sp, #20
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <HAL_MspInit+0x5c>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	4a14      	ldr	r2, [pc, #80]	; (80006cc <HAL_MspInit+0x5c>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6193      	str	r3, [r2, #24]
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <HAL_MspInit+0x5c>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <HAL_MspInit+0x5c>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	4a0e      	ldr	r2, [pc, #56]	; (80006cc <HAL_MspInit+0x5c>)
 8000694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000698:	61d3      	str	r3, [r2, #28]
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <HAL_MspInit+0x5c>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006a6:	4b0a      	ldr	r3, [pc, #40]	; (80006d0 <HAL_MspInit+0x60>)
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	60fb      	str	r3, [r7, #12]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <HAL_MspInit+0x60>)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c2:	bf00      	nop
 80006c4:	3714      	adds	r7, #20
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40010000 	.word	0x40010000

080006d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006dc:	f107 0310 	add.w	r3, r7, #16
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a20      	ldr	r2, [pc, #128]	; (8000770 <HAL_UART_MspInit+0x9c>)
 80006f0:	4293      	cmp	r3, r2
 80006f2:	d139      	bne.n	8000768 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <HAL_UART_MspInit+0xa0>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a1e      	ldr	r2, [pc, #120]	; (8000774 <HAL_UART_MspInit+0xa0>)
 80006fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <HAL_UART_MspInit+0xa0>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <HAL_UART_MspInit+0xa0>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	4a18      	ldr	r2, [pc, #96]	; (8000774 <HAL_UART_MspInit+0xa0>)
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	6193      	str	r3, [r2, #24]
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <HAL_UART_MspInit+0xa0>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f003 0304 	and.w	r3, r3, #4
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000728:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	2302      	movs	r3, #2
 800072c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800072e:	2303      	movs	r3, #3
 8000730:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	4619      	mov	r1, r3
 8000738:	480f      	ldr	r0, [pc, #60]	; (8000778 <HAL_UART_MspInit+0xa4>)
 800073a:	f000 fb53 	bl	8000de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800073e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000742:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	4619      	mov	r1, r3
 8000752:	4809      	ldr	r0, [pc, #36]	; (8000778 <HAL_UART_MspInit+0xa4>)
 8000754:	f000 fb46 	bl	8000de4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000758:	2200      	movs	r2, #0
 800075a:	2100      	movs	r1, #0
 800075c:	2025      	movs	r0, #37	; 0x25
 800075e:	f000 f9c8 	bl	8000af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000762:	2025      	movs	r0, #37	; 0x25
 8000764:	f000 f9e1 	bl	8000b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000768:	bf00      	nop
 800076a:	3720      	adds	r7, #32
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40013800 	.word	0x40013800
 8000774:	40021000 	.word	0x40021000
 8000778:	40010800 	.word	0x40010800

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <NMI_Handler+0x4>

08000782 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <HardFault_Handler+0x4>

08000788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <MemManage_Handler+0x4>

0800078e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000792:	e7fe      	b.n	8000792 <BusFault_Handler+0x4>

08000794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000798:	e7fe      	b.n	8000798 <UsageFault_Handler+0x4>

0800079a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr

080007a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr

080007b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c2:	f000 f87f 	bl	80008c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007d0:	4802      	ldr	r0, [pc, #8]	; (80007dc <USART1_IRQHandler+0x10>)
 80007d2:	f001 fa77 	bl	8001cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000028 	.word	0x20000028

080007e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ee:	490d      	ldr	r1, [pc, #52]	; (8000824 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007f0:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f4:	e002      	b.n	80007fc <LoopCopyDataInit>

080007f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fa:	3304      	adds	r3, #4

080007fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000800:	d3f9      	bcc.n	80007f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000804:	4c0a      	ldr	r4, [pc, #40]	; (8000830 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000808:	e001      	b.n	800080e <LoopFillZerobss>

0800080a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800080c:	3204      	adds	r2, #4

0800080e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000810:	d3fb      	bcc.n	800080a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000812:	f7ff ffe5 	bl	80007e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000816:	f001 fe4d 	bl	80024b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081a:	f7ff fe7f 	bl	800051c <main>
  bx lr
 800081e:	4770      	bx	lr
  ldr r0, =_sdata
 8000820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000824:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000828:	08002570 	.word	0x08002570
  ldr r2, =_sbss
 800082c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000830:	20000070 	.word	0x20000070

08000834 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC1_2_IRQHandler>
	...

08000838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_Init+0x28>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a07      	ldr	r2, [pc, #28]	; (8000860 <HAL_Init+0x28>)
 8000842:	f043 0310 	orr.w	r3, r3, #16
 8000846:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000848:	2003      	movs	r0, #3
 800084a:	f000 f947 	bl	8000adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800084e:	200f      	movs	r0, #15
 8000850:	f000 f808 	bl	8000864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000854:	f7ff ff0c 	bl	8000670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40022000 	.word	0x40022000

08000864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_InitTick+0x54>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <HAL_InitTick+0x58>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	4619      	mov	r1, r3
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	fbb3 f3f1 	udiv	r3, r3, r1
 800087e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000882:	4618      	mov	r0, r3
 8000884:	f000 f95f 	bl	8000b46 <HAL_SYSTICK_Config>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	e00e      	b.n	80008b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b0f      	cmp	r3, #15
 8000896:	d80a      	bhi.n	80008ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000898:	2200      	movs	r2, #0
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	f04f 30ff 	mov.w	r0, #4294967295
 80008a0:	f000 f927 	bl	8000af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008a4:	4a06      	ldr	r2, [pc, #24]	; (80008c0 <HAL_InitTick+0x5c>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008aa:	2300      	movs	r3, #0
 80008ac:	e000      	b.n	80008b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000008 	.word	0x20000008
 80008c0:	20000004 	.word	0x20000004

080008c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c8:	4b05      	ldr	r3, [pc, #20]	; (80008e0 <HAL_IncTick+0x1c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_IncTick+0x20>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	4a03      	ldr	r2, [pc, #12]	; (80008e4 <HAL_IncTick+0x20>)
 80008d6:	6013      	str	r3, [r2, #0]
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	20000008 	.word	0x20000008
 80008e4:	2000006c 	.word	0x2000006c

080008e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return uwTick;
 80008ec:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <HAL_GetTick+0x10>)
 80008ee:	681b      	ldr	r3, [r3, #0]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	2000006c 	.word	0x2000006c

080008fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000904:	f7ff fff0 	bl	80008e8 <HAL_GetTick>
 8000908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000914:	d005      	beq.n	8000922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <HAL_Delay+0x44>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	461a      	mov	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4413      	add	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000922:	bf00      	nop
 8000924:	f7ff ffe0 	bl	80008e8 <HAL_GetTick>
 8000928:	4602      	mov	r2, r0
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	1ad3      	subs	r3, r2, r3
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	429a      	cmp	r2, r3
 8000932:	d8f7      	bhi.n	8000924 <HAL_Delay+0x28>
  {
  }
}
 8000934:	bf00      	nop
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000008 	.word	0x20000008

08000944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800095a:	68ba      	ldr	r2, [r7, #8]
 800095c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800096c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000976:	4a04      	ldr	r2, [pc, #16]	; (8000988 <__NVIC_SetPriorityGrouping+0x44>)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	60d3      	str	r3, [r2, #12]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	0a1b      	lsrs	r3, r3, #8
 8000996:	f003 0307 	and.w	r3, r3, #7
}
 800099a:	4618      	mov	r0, r3
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	4603      	mov	r3, r0
 80009b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	db0b      	blt.n	80009d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	f003 021f 	and.w	r2, r3, #31
 80009c0:	4906      	ldr	r1, [pc, #24]	; (80009dc <__NVIC_EnableIRQ+0x34>)
 80009c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c6:	095b      	lsrs	r3, r3, #5
 80009c8:	2001      	movs	r0, #1
 80009ca:	fa00 f202 	lsl.w	r2, r0, r2
 80009ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009d2:	bf00      	nop
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	e000e100 	.word	0xe000e100

080009e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	6039      	str	r1, [r7, #0]
 80009ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	db0a      	blt.n	8000a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	490c      	ldr	r1, [pc, #48]	; (8000a2c <__NVIC_SetPriority+0x4c>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	0112      	lsls	r2, r2, #4
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	440b      	add	r3, r1
 8000a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a08:	e00a      	b.n	8000a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4908      	ldr	r1, [pc, #32]	; (8000a30 <__NVIC_SetPriority+0x50>)
 8000a10:	79fb      	ldrb	r3, [r7, #7]
 8000a12:	f003 030f 	and.w	r3, r3, #15
 8000a16:	3b04      	subs	r3, #4
 8000a18:	0112      	lsls	r2, r2, #4
 8000a1a:	b2d2      	uxtb	r2, r2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	761a      	strb	r2, [r3, #24]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000e100 	.word	0xe000e100
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b089      	sub	sp, #36	; 0x24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	f1c3 0307 	rsb	r3, r3, #7
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	bf28      	it	cs
 8000a52:	2304      	movcs	r3, #4
 8000a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a56:	69fb      	ldr	r3, [r7, #28]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	2b06      	cmp	r3, #6
 8000a5c:	d902      	bls.n	8000a64 <NVIC_EncodePriority+0x30>
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3b03      	subs	r3, #3
 8000a62:	e000      	b.n	8000a66 <NVIC_EncodePriority+0x32>
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a68:	f04f 32ff 	mov.w	r2, #4294967295
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43da      	mvns	r2, r3
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	401a      	ands	r2, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	43d9      	mvns	r1, r3
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a8c:	4313      	orrs	r3, r2
         );
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3724      	adds	r7, #36	; 0x24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr

08000a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3b01      	subs	r3, #1
 8000aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000aa8:	d301      	bcc.n	8000aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e00f      	b.n	8000ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aae:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <SysTick_Config+0x40>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ab6:	210f      	movs	r1, #15
 8000ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8000abc:	f7ff ff90 	bl	80009e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <SysTick_Config+0x40>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ac6:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <SysTick_Config+0x40>)
 8000ac8:	2207      	movs	r2, #7
 8000aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	e000e010 	.word	0xe000e010

08000adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f7ff ff2d 	bl	8000944 <__NVIC_SetPriorityGrouping>
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b086      	sub	sp, #24
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	4603      	mov	r3, r0
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
 8000afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b04:	f7ff ff42 	bl	800098c <__NVIC_GetPriorityGrouping>
 8000b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	68b9      	ldr	r1, [r7, #8]
 8000b0e:	6978      	ldr	r0, [r7, #20]
 8000b10:	f7ff ff90 	bl	8000a34 <NVIC_EncodePriority>
 8000b14:	4602      	mov	r2, r0
 8000b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b1a:	4611      	mov	r1, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff ff5f 	bl	80009e0 <__NVIC_SetPriority>
}
 8000b22:	bf00      	nop
 8000b24:	3718      	adds	r7, #24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b082      	sub	sp, #8
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff35 	bl	80009a8 <__NVIC_EnableIRQ>
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffa2 	bl	8000a98 <SysTick_Config>
 8000b54:	4603      	mov	r3, r0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b085      	sub	sp, #20
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d008      	beq.n	8000b86 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2204      	movs	r2, #4
 8000b78:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e020      	b.n	8000bc8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f022 020e 	bic.w	r2, r2, #14
 8000b94:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f022 0201 	bic.w	r2, r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bae:	2101      	movs	r1, #1
 8000bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
	...

08000bd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d005      	beq.n	8000bf6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2204      	movs	r2, #4
 8000bee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	e0d6      	b.n	8000da4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f022 020e 	bic.w	r2, r2, #14
 8000c04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f022 0201 	bic.w	r2, r2, #1
 8000c14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4b64      	ldr	r3, [pc, #400]	; (8000db0 <HAL_DMA_Abort_IT+0x1dc>)
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d958      	bls.n	8000cd4 <HAL_DMA_Abort_IT+0x100>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a63      	ldr	r2, [pc, #396]	; (8000db4 <HAL_DMA_Abort_IT+0x1e0>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d04f      	beq.n	8000ccc <HAL_DMA_Abort_IT+0xf8>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a61      	ldr	r2, [pc, #388]	; (8000db8 <HAL_DMA_Abort_IT+0x1e4>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d048      	beq.n	8000cc8 <HAL_DMA_Abort_IT+0xf4>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a60      	ldr	r2, [pc, #384]	; (8000dbc <HAL_DMA_Abort_IT+0x1e8>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d040      	beq.n	8000cc2 <HAL_DMA_Abort_IT+0xee>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a5e      	ldr	r2, [pc, #376]	; (8000dc0 <HAL_DMA_Abort_IT+0x1ec>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d038      	beq.n	8000cbc <HAL_DMA_Abort_IT+0xe8>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a5d      	ldr	r2, [pc, #372]	; (8000dc4 <HAL_DMA_Abort_IT+0x1f0>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d030      	beq.n	8000cb6 <HAL_DMA_Abort_IT+0xe2>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a5b      	ldr	r2, [pc, #364]	; (8000dc8 <HAL_DMA_Abort_IT+0x1f4>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d028      	beq.n	8000cb0 <HAL_DMA_Abort_IT+0xdc>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a53      	ldr	r2, [pc, #332]	; (8000db0 <HAL_DMA_Abort_IT+0x1dc>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d020      	beq.n	8000caa <HAL_DMA_Abort_IT+0xd6>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a57      	ldr	r2, [pc, #348]	; (8000dcc <HAL_DMA_Abort_IT+0x1f8>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d019      	beq.n	8000ca6 <HAL_DMA_Abort_IT+0xd2>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a56      	ldr	r2, [pc, #344]	; (8000dd0 <HAL_DMA_Abort_IT+0x1fc>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d012      	beq.n	8000ca2 <HAL_DMA_Abort_IT+0xce>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a54      	ldr	r2, [pc, #336]	; (8000dd4 <HAL_DMA_Abort_IT+0x200>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d00a      	beq.n	8000c9c <HAL_DMA_Abort_IT+0xc8>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a53      	ldr	r2, [pc, #332]	; (8000dd8 <HAL_DMA_Abort_IT+0x204>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d102      	bne.n	8000c96 <HAL_DMA_Abort_IT+0xc2>
 8000c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c94:	e01b      	b.n	8000cce <HAL_DMA_Abort_IT+0xfa>
 8000c96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c9a:	e018      	b.n	8000cce <HAL_DMA_Abort_IT+0xfa>
 8000c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ca0:	e015      	b.n	8000cce <HAL_DMA_Abort_IT+0xfa>
 8000ca2:	2310      	movs	r3, #16
 8000ca4:	e013      	b.n	8000cce <HAL_DMA_Abort_IT+0xfa>
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e011      	b.n	8000cce <HAL_DMA_Abort_IT+0xfa>
 8000caa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cae:	e00e      	b.n	8000cce <HAL_DMA_Abort_IT+0xfa>
 8000cb0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cb4:	e00b      	b.n	8000cce <HAL_DMA_Abort_IT+0xfa>
 8000cb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cba:	e008      	b.n	8000cce <HAL_DMA_Abort_IT+0xfa>
 8000cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc0:	e005      	b.n	8000cce <HAL_DMA_Abort_IT+0xfa>
 8000cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc6:	e002      	b.n	8000cce <HAL_DMA_Abort_IT+0xfa>
 8000cc8:	2310      	movs	r3, #16
 8000cca:	e000      	b.n	8000cce <HAL_DMA_Abort_IT+0xfa>
 8000ccc:	2301      	movs	r3, #1
 8000cce:	4a43      	ldr	r2, [pc, #268]	; (8000ddc <HAL_DMA_Abort_IT+0x208>)
 8000cd0:	6053      	str	r3, [r2, #4]
 8000cd2:	e057      	b.n	8000d84 <HAL_DMA_Abort_IT+0x1b0>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a36      	ldr	r2, [pc, #216]	; (8000db4 <HAL_DMA_Abort_IT+0x1e0>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d04f      	beq.n	8000d7e <HAL_DMA_Abort_IT+0x1aa>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a35      	ldr	r2, [pc, #212]	; (8000db8 <HAL_DMA_Abort_IT+0x1e4>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d048      	beq.n	8000d7a <HAL_DMA_Abort_IT+0x1a6>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a33      	ldr	r2, [pc, #204]	; (8000dbc <HAL_DMA_Abort_IT+0x1e8>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d040      	beq.n	8000d74 <HAL_DMA_Abort_IT+0x1a0>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a32      	ldr	r2, [pc, #200]	; (8000dc0 <HAL_DMA_Abort_IT+0x1ec>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d038      	beq.n	8000d6e <HAL_DMA_Abort_IT+0x19a>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a30      	ldr	r2, [pc, #192]	; (8000dc4 <HAL_DMA_Abort_IT+0x1f0>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d030      	beq.n	8000d68 <HAL_DMA_Abort_IT+0x194>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a2f      	ldr	r2, [pc, #188]	; (8000dc8 <HAL_DMA_Abort_IT+0x1f4>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d028      	beq.n	8000d62 <HAL_DMA_Abort_IT+0x18e>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a26      	ldr	r2, [pc, #152]	; (8000db0 <HAL_DMA_Abort_IT+0x1dc>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d020      	beq.n	8000d5c <HAL_DMA_Abort_IT+0x188>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a2b      	ldr	r2, [pc, #172]	; (8000dcc <HAL_DMA_Abort_IT+0x1f8>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d019      	beq.n	8000d58 <HAL_DMA_Abort_IT+0x184>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a29      	ldr	r2, [pc, #164]	; (8000dd0 <HAL_DMA_Abort_IT+0x1fc>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d012      	beq.n	8000d54 <HAL_DMA_Abort_IT+0x180>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a28      	ldr	r2, [pc, #160]	; (8000dd4 <HAL_DMA_Abort_IT+0x200>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d00a      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x17a>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a26      	ldr	r2, [pc, #152]	; (8000dd8 <HAL_DMA_Abort_IT+0x204>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d102      	bne.n	8000d48 <HAL_DMA_Abort_IT+0x174>
 8000d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d46:	e01b      	b.n	8000d80 <HAL_DMA_Abort_IT+0x1ac>
 8000d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4c:	e018      	b.n	8000d80 <HAL_DMA_Abort_IT+0x1ac>
 8000d4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d52:	e015      	b.n	8000d80 <HAL_DMA_Abort_IT+0x1ac>
 8000d54:	2310      	movs	r3, #16
 8000d56:	e013      	b.n	8000d80 <HAL_DMA_Abort_IT+0x1ac>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e011      	b.n	8000d80 <HAL_DMA_Abort_IT+0x1ac>
 8000d5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d60:	e00e      	b.n	8000d80 <HAL_DMA_Abort_IT+0x1ac>
 8000d62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d66:	e00b      	b.n	8000d80 <HAL_DMA_Abort_IT+0x1ac>
 8000d68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d6c:	e008      	b.n	8000d80 <HAL_DMA_Abort_IT+0x1ac>
 8000d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d72:	e005      	b.n	8000d80 <HAL_DMA_Abort_IT+0x1ac>
 8000d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d78:	e002      	b.n	8000d80 <HAL_DMA_Abort_IT+0x1ac>
 8000d7a:	2310      	movs	r3, #16
 8000d7c:	e000      	b.n	8000d80 <HAL_DMA_Abort_IT+0x1ac>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <HAL_DMA_Abort_IT+0x20c>)
 8000d82:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2201      	movs	r2, #1
 8000d88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d003      	beq.n	8000da4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	4798      	blx	r3
    } 
  }
  return status;
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3710      	adds	r7, #16
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40020080 	.word	0x40020080
 8000db4:	40020008 	.word	0x40020008
 8000db8:	4002001c 	.word	0x4002001c
 8000dbc:	40020030 	.word	0x40020030
 8000dc0:	40020044 	.word	0x40020044
 8000dc4:	40020058 	.word	0x40020058
 8000dc8:	4002006c 	.word	0x4002006c
 8000dcc:	40020408 	.word	0x40020408
 8000dd0:	4002041c 	.word	0x4002041c
 8000dd4:	40020430 	.word	0x40020430
 8000dd8:	40020444 	.word	0x40020444
 8000ddc:	40020400 	.word	0x40020400
 8000de0:	40020000 	.word	0x40020000

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b08b      	sub	sp, #44	; 0x2c
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000df2:	2300      	movs	r3, #0
 8000df4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df6:	e169      	b.n	80010cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000df8:	2201      	movs	r2, #1
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	69fa      	ldr	r2, [r7, #28]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	f040 8158 	bne.w	80010c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	4a9a      	ldr	r2, [pc, #616]	; (8001084 <HAL_GPIO_Init+0x2a0>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d05e      	beq.n	8000ede <HAL_GPIO_Init+0xfa>
 8000e20:	4a98      	ldr	r2, [pc, #608]	; (8001084 <HAL_GPIO_Init+0x2a0>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d875      	bhi.n	8000f12 <HAL_GPIO_Init+0x12e>
 8000e26:	4a98      	ldr	r2, [pc, #608]	; (8001088 <HAL_GPIO_Init+0x2a4>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d058      	beq.n	8000ede <HAL_GPIO_Init+0xfa>
 8000e2c:	4a96      	ldr	r2, [pc, #600]	; (8001088 <HAL_GPIO_Init+0x2a4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d86f      	bhi.n	8000f12 <HAL_GPIO_Init+0x12e>
 8000e32:	4a96      	ldr	r2, [pc, #600]	; (800108c <HAL_GPIO_Init+0x2a8>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d052      	beq.n	8000ede <HAL_GPIO_Init+0xfa>
 8000e38:	4a94      	ldr	r2, [pc, #592]	; (800108c <HAL_GPIO_Init+0x2a8>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d869      	bhi.n	8000f12 <HAL_GPIO_Init+0x12e>
 8000e3e:	4a94      	ldr	r2, [pc, #592]	; (8001090 <HAL_GPIO_Init+0x2ac>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d04c      	beq.n	8000ede <HAL_GPIO_Init+0xfa>
 8000e44:	4a92      	ldr	r2, [pc, #584]	; (8001090 <HAL_GPIO_Init+0x2ac>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d863      	bhi.n	8000f12 <HAL_GPIO_Init+0x12e>
 8000e4a:	4a92      	ldr	r2, [pc, #584]	; (8001094 <HAL_GPIO_Init+0x2b0>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d046      	beq.n	8000ede <HAL_GPIO_Init+0xfa>
 8000e50:	4a90      	ldr	r2, [pc, #576]	; (8001094 <HAL_GPIO_Init+0x2b0>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d85d      	bhi.n	8000f12 <HAL_GPIO_Init+0x12e>
 8000e56:	2b12      	cmp	r3, #18
 8000e58:	d82a      	bhi.n	8000eb0 <HAL_GPIO_Init+0xcc>
 8000e5a:	2b12      	cmp	r3, #18
 8000e5c:	d859      	bhi.n	8000f12 <HAL_GPIO_Init+0x12e>
 8000e5e:	a201      	add	r2, pc, #4	; (adr r2, 8000e64 <HAL_GPIO_Init+0x80>)
 8000e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e64:	08000edf 	.word	0x08000edf
 8000e68:	08000eb9 	.word	0x08000eb9
 8000e6c:	08000ecb 	.word	0x08000ecb
 8000e70:	08000f0d 	.word	0x08000f0d
 8000e74:	08000f13 	.word	0x08000f13
 8000e78:	08000f13 	.word	0x08000f13
 8000e7c:	08000f13 	.word	0x08000f13
 8000e80:	08000f13 	.word	0x08000f13
 8000e84:	08000f13 	.word	0x08000f13
 8000e88:	08000f13 	.word	0x08000f13
 8000e8c:	08000f13 	.word	0x08000f13
 8000e90:	08000f13 	.word	0x08000f13
 8000e94:	08000f13 	.word	0x08000f13
 8000e98:	08000f13 	.word	0x08000f13
 8000e9c:	08000f13 	.word	0x08000f13
 8000ea0:	08000f13 	.word	0x08000f13
 8000ea4:	08000f13 	.word	0x08000f13
 8000ea8:	08000ec1 	.word	0x08000ec1
 8000eac:	08000ed5 	.word	0x08000ed5
 8000eb0:	4a79      	ldr	r2, [pc, #484]	; (8001098 <HAL_GPIO_Init+0x2b4>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d013      	beq.n	8000ede <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eb6:	e02c      	b.n	8000f12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	623b      	str	r3, [r7, #32]
          break;
 8000ebe:	e029      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	623b      	str	r3, [r7, #32]
          break;
 8000ec8:	e024      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	3308      	adds	r3, #8
 8000ed0:	623b      	str	r3, [r7, #32]
          break;
 8000ed2:	e01f      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	330c      	adds	r3, #12
 8000eda:	623b      	str	r3, [r7, #32]
          break;
 8000edc:	e01a      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d102      	bne.n	8000eec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	623b      	str	r3, [r7, #32]
          break;
 8000eea:	e013      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	2b01      	cmp	r3, #1
 8000ef2:	d105      	bne.n	8000f00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef4:	2308      	movs	r3, #8
 8000ef6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69fa      	ldr	r2, [r7, #28]
 8000efc:	611a      	str	r2, [r3, #16]
          break;
 8000efe:	e009      	b.n	8000f14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f00:	2308      	movs	r3, #8
 8000f02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	69fa      	ldr	r2, [r7, #28]
 8000f08:	615a      	str	r2, [r3, #20]
          break;
 8000f0a:	e003      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
          break;
 8000f10:	e000      	b.n	8000f14 <HAL_GPIO_Init+0x130>
          break;
 8000f12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	2bff      	cmp	r3, #255	; 0xff
 8000f18:	d801      	bhi.n	8000f1e <HAL_GPIO_Init+0x13a>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	e001      	b.n	8000f22 <HAL_GPIO_Init+0x13e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3304      	adds	r3, #4
 8000f22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	2bff      	cmp	r3, #255	; 0xff
 8000f28:	d802      	bhi.n	8000f30 <HAL_GPIO_Init+0x14c>
 8000f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	e002      	b.n	8000f36 <HAL_GPIO_Init+0x152>
 8000f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f32:	3b08      	subs	r3, #8
 8000f34:	009b      	lsls	r3, r3, #2
 8000f36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	210f      	movs	r1, #15
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	43db      	mvns	r3, r3
 8000f46:	401a      	ands	r2, r3
 8000f48:	6a39      	ldr	r1, [r7, #32]
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f50:	431a      	orrs	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	f000 80b1 	beq.w	80010c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f64:	4b4d      	ldr	r3, [pc, #308]	; (800109c <HAL_GPIO_Init+0x2b8>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	; (800109c <HAL_GPIO_Init+0x2b8>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b4a      	ldr	r3, [pc, #296]	; (800109c <HAL_GPIO_Init+0x2b8>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f003 0301 	and.w	r3, r3, #1
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f7c:	4a48      	ldr	r2, [pc, #288]	; (80010a0 <HAL_GPIO_Init+0x2bc>)
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	3302      	adds	r3, #2
 8000f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	220f      	movs	r2, #15
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a40      	ldr	r2, [pc, #256]	; (80010a4 <HAL_GPIO_Init+0x2c0>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d013      	beq.n	8000fd0 <HAL_GPIO_Init+0x1ec>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a3f      	ldr	r2, [pc, #252]	; (80010a8 <HAL_GPIO_Init+0x2c4>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d00d      	beq.n	8000fcc <HAL_GPIO_Init+0x1e8>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a3e      	ldr	r2, [pc, #248]	; (80010ac <HAL_GPIO_Init+0x2c8>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d007      	beq.n	8000fc8 <HAL_GPIO_Init+0x1e4>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a3d      	ldr	r2, [pc, #244]	; (80010b0 <HAL_GPIO_Init+0x2cc>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d101      	bne.n	8000fc4 <HAL_GPIO_Init+0x1e0>
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	e006      	b.n	8000fd2 <HAL_GPIO_Init+0x1ee>
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	e004      	b.n	8000fd2 <HAL_GPIO_Init+0x1ee>
 8000fc8:	2302      	movs	r3, #2
 8000fca:	e002      	b.n	8000fd2 <HAL_GPIO_Init+0x1ee>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e000      	b.n	8000fd2 <HAL_GPIO_Init+0x1ee>
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fd4:	f002 0203 	and.w	r2, r2, #3
 8000fd8:	0092      	lsls	r2, r2, #2
 8000fda:	4093      	lsls	r3, r2
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fe2:	492f      	ldr	r1, [pc, #188]	; (80010a0 <HAL_GPIO_Init+0x2bc>)
 8000fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe6:	089b      	lsrs	r3, r3, #2
 8000fe8:	3302      	adds	r3, #2
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d006      	beq.n	800100a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ffc:	4b2d      	ldr	r3, [pc, #180]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	492c      	ldr	r1, [pc, #176]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	4313      	orrs	r3, r2
 8001006:	600b      	str	r3, [r1, #0]
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800100a:	4b2a      	ldr	r3, [pc, #168]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	43db      	mvns	r3, r3
 8001012:	4928      	ldr	r1, [pc, #160]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001014:	4013      	ands	r3, r2
 8001016:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001024:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	4922      	ldr	r1, [pc, #136]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	604b      	str	r3, [r1, #4]
 8001030:	e006      	b.n	8001040 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001032:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001034:	685a      	ldr	r2, [r3, #4]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	43db      	mvns	r3, r3
 800103a:	491e      	ldr	r1, [pc, #120]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 800103c:	4013      	ands	r3, r2
 800103e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d006      	beq.n	800105a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	4918      	ldr	r1, [pc, #96]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	608b      	str	r3, [r1, #8]
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	43db      	mvns	r3, r3
 8001062:	4914      	ldr	r1, [pc, #80]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001064:	4013      	ands	r3, r2
 8001066:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d021      	beq.n	80010b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	490e      	ldr	r1, [pc, #56]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	60cb      	str	r3, [r1, #12]
 8001080:	e021      	b.n	80010c6 <HAL_GPIO_Init+0x2e2>
 8001082:	bf00      	nop
 8001084:	10320000 	.word	0x10320000
 8001088:	10310000 	.word	0x10310000
 800108c:	10220000 	.word	0x10220000
 8001090:	10210000 	.word	0x10210000
 8001094:	10120000 	.word	0x10120000
 8001098:	10110000 	.word	0x10110000
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010000 	.word	0x40010000
 80010a4:	40010800 	.word	0x40010800
 80010a8:	40010c00 	.word	0x40010c00
 80010ac:	40011000 	.word	0x40011000
 80010b0:	40011400 	.word	0x40011400
 80010b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_GPIO_Init+0x304>)
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	43db      	mvns	r3, r3
 80010c0:	4909      	ldr	r1, [pc, #36]	; (80010e8 <HAL_GPIO_Init+0x304>)
 80010c2:	4013      	ands	r3, r2
 80010c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c8:	3301      	adds	r3, #1
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	fa22 f303 	lsr.w	r3, r2, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f47f ae8e 	bne.w	8000df8 <HAL_GPIO_Init+0x14>
  }
}
 80010dc:	bf00      	nop
 80010de:	bf00      	nop
 80010e0:	372c      	adds	r7, #44	; 0x2c
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr
 80010e8:	40010400 	.word	0x40010400

080010ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e304      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 8087 	beq.w	800121a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800110c:	4b92      	ldr	r3, [pc, #584]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 030c 	and.w	r3, r3, #12
 8001114:	2b04      	cmp	r3, #4
 8001116:	d00c      	beq.n	8001132 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001118:	4b8f      	ldr	r3, [pc, #572]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 030c 	and.w	r3, r3, #12
 8001120:	2b08      	cmp	r3, #8
 8001122:	d112      	bne.n	800114a <HAL_RCC_OscConfig+0x5e>
 8001124:	4b8c      	ldr	r3, [pc, #560]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001130:	d10b      	bne.n	800114a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001132:	4b89      	ldr	r3, [pc, #548]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d06c      	beq.n	8001218 <HAL_RCC_OscConfig+0x12c>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d168      	bne.n	8001218 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e2de      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001152:	d106      	bne.n	8001162 <HAL_RCC_OscConfig+0x76>
 8001154:	4b80      	ldr	r3, [pc, #512]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a7f      	ldr	r2, [pc, #508]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 800115a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	e02e      	b.n	80011c0 <HAL_RCC_OscConfig+0xd4>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10c      	bne.n	8001184 <HAL_RCC_OscConfig+0x98>
 800116a:	4b7b      	ldr	r3, [pc, #492]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a7a      	ldr	r2, [pc, #488]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 8001170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	4b78      	ldr	r3, [pc, #480]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a77      	ldr	r2, [pc, #476]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 800117c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e01d      	b.n	80011c0 <HAL_RCC_OscConfig+0xd4>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800118c:	d10c      	bne.n	80011a8 <HAL_RCC_OscConfig+0xbc>
 800118e:	4b72      	ldr	r3, [pc, #456]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a71      	ldr	r2, [pc, #452]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 8001194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	4b6f      	ldr	r3, [pc, #444]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a6e      	ldr	r2, [pc, #440]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e00b      	b.n	80011c0 <HAL_RCC_OscConfig+0xd4>
 80011a8:	4b6b      	ldr	r3, [pc, #428]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a6a      	ldr	r2, [pc, #424]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 80011ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b68      	ldr	r3, [pc, #416]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a67      	ldr	r2, [pc, #412]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 80011ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d013      	beq.n	80011f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c8:	f7ff fb8e 	bl	80008e8 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fb8a 	bl	80008e8 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	; 0x64
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e292      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e2:	4b5d      	ldr	r3, [pc, #372]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f0      	beq.n	80011d0 <HAL_RCC_OscConfig+0xe4>
 80011ee:	e014      	b.n	800121a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fb7a 	bl	80008e8 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f8:	f7ff fb76 	bl	80008e8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b64      	cmp	r3, #100	; 0x64
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e27e      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120a:	4b53      	ldr	r3, [pc, #332]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0x10c>
 8001216:	e000      	b.n	800121a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d063      	beq.n	80012ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001226:	4b4c      	ldr	r3, [pc, #304]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 030c 	and.w	r3, r3, #12
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00b      	beq.n	800124a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001232:	4b49      	ldr	r3, [pc, #292]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f003 030c 	and.w	r3, r3, #12
 800123a:	2b08      	cmp	r3, #8
 800123c:	d11c      	bne.n	8001278 <HAL_RCC_OscConfig+0x18c>
 800123e:	4b46      	ldr	r3, [pc, #280]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d116      	bne.n	8001278 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124a:	4b43      	ldr	r3, [pc, #268]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d005      	beq.n	8001262 <HAL_RCC_OscConfig+0x176>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d001      	beq.n	8001262 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e252      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001262:	4b3d      	ldr	r3, [pc, #244]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	4939      	ldr	r1, [pc, #228]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 8001272:	4313      	orrs	r3, r2
 8001274:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001276:	e03a      	b.n	80012ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d020      	beq.n	80012c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001280:	4b36      	ldr	r3, [pc, #216]	; (800135c <HAL_RCC_OscConfig+0x270>)
 8001282:	2201      	movs	r2, #1
 8001284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001286:	f7ff fb2f 	bl	80008e8 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800128e:	f7ff fb2b 	bl	80008e8 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e233      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a0:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0f0      	beq.n	800128e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ac:	4b2a      	ldr	r3, [pc, #168]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4927      	ldr	r1, [pc, #156]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	600b      	str	r3, [r1, #0]
 80012c0:	e015      	b.n	80012ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012c2:	4b26      	ldr	r3, [pc, #152]	; (800135c <HAL_RCC_OscConfig+0x270>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fb0e 	bl	80008e8 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d0:	f7ff fb0a 	bl	80008e8 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e212      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d1f0      	bne.n	80012d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d03a      	beq.n	8001370 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d019      	beq.n	8001336 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001302:	4b17      	ldr	r3, [pc, #92]	; (8001360 <HAL_RCC_OscConfig+0x274>)
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001308:	f7ff faee 	bl	80008e8 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001310:	f7ff faea 	bl	80008e8 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e1f2      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <HAL_RCC_OscConfig+0x26c>)
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800132e:	2001      	movs	r0, #1
 8001330:	f000 fbca 	bl	8001ac8 <RCC_Delay>
 8001334:	e01c      	b.n	8001370 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_RCC_OscConfig+0x274>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133c:	f7ff fad4 	bl	80008e8 <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001342:	e00f      	b.n	8001364 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001344:	f7ff fad0 	bl	80008e8 <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d908      	bls.n	8001364 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e1d8      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	42420000 	.word	0x42420000
 8001360:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001364:	4b9b      	ldr	r3, [pc, #620]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1e9      	bne.n	8001344 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0304 	and.w	r3, r3, #4
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80a6 	beq.w	80014ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001382:	4b94      	ldr	r3, [pc, #592]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10d      	bne.n	80013aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	4b91      	ldr	r3, [pc, #580]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	4a90      	ldr	r2, [pc, #576]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	61d3      	str	r3, [r2, #28]
 800139a:	4b8e      	ldr	r3, [pc, #568]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013a6:	2301      	movs	r3, #1
 80013a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013aa:	4b8b      	ldr	r3, [pc, #556]	; (80015d8 <HAL_RCC_OscConfig+0x4ec>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d118      	bne.n	80013e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013b6:	4b88      	ldr	r3, [pc, #544]	; (80015d8 <HAL_RCC_OscConfig+0x4ec>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a87      	ldr	r2, [pc, #540]	; (80015d8 <HAL_RCC_OscConfig+0x4ec>)
 80013bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fa91 	bl	80008e8 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ca:	f7ff fa8d 	bl	80008e8 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b64      	cmp	r3, #100	; 0x64
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e195      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013dc:	4b7e      	ldr	r3, [pc, #504]	; (80015d8 <HAL_RCC_OscConfig+0x4ec>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d106      	bne.n	80013fe <HAL_RCC_OscConfig+0x312>
 80013f0:	4b78      	ldr	r3, [pc, #480]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 80013f2:	6a1b      	ldr	r3, [r3, #32]
 80013f4:	4a77      	ldr	r2, [pc, #476]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	6213      	str	r3, [r2, #32]
 80013fc:	e02d      	b.n	800145a <HAL_RCC_OscConfig+0x36e>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0x334>
 8001406:	4b73      	ldr	r3, [pc, #460]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	4a72      	ldr	r2, [pc, #456]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	6213      	str	r3, [r2, #32]
 8001412:	4b70      	ldr	r3, [pc, #448]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	4a6f      	ldr	r2, [pc, #444]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 8001418:	f023 0304 	bic.w	r3, r3, #4
 800141c:	6213      	str	r3, [r2, #32]
 800141e:	e01c      	b.n	800145a <HAL_RCC_OscConfig+0x36e>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	691b      	ldr	r3, [r3, #16]
 8001424:	2b05      	cmp	r3, #5
 8001426:	d10c      	bne.n	8001442 <HAL_RCC_OscConfig+0x356>
 8001428:	4b6a      	ldr	r3, [pc, #424]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	4a69      	ldr	r2, [pc, #420]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	6213      	str	r3, [r2, #32]
 8001434:	4b67      	ldr	r3, [pc, #412]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	4a66      	ldr	r2, [pc, #408]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6213      	str	r3, [r2, #32]
 8001440:	e00b      	b.n	800145a <HAL_RCC_OscConfig+0x36e>
 8001442:	4b64      	ldr	r3, [pc, #400]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	4a63      	ldr	r2, [pc, #396]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 8001448:	f023 0301 	bic.w	r3, r3, #1
 800144c:	6213      	str	r3, [r2, #32]
 800144e:	4b61      	ldr	r3, [pc, #388]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	4a60      	ldr	r2, [pc, #384]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 8001454:	f023 0304 	bic.w	r3, r3, #4
 8001458:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d015      	beq.n	800148e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001462:	f7ff fa41 	bl	80008e8 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001468:	e00a      	b.n	8001480 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800146a:	f7ff fa3d 	bl	80008e8 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	f241 3288 	movw	r2, #5000	; 0x1388
 8001478:	4293      	cmp	r3, r2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e143      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001480:	4b54      	ldr	r3, [pc, #336]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0ee      	beq.n	800146a <HAL_RCC_OscConfig+0x37e>
 800148c:	e014      	b.n	80014b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148e:	f7ff fa2b 	bl	80008e8 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001494:	e00a      	b.n	80014ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001496:	f7ff fa27 	bl	80008e8 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e12d      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ac:	4b49      	ldr	r3, [pc, #292]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	f003 0302 	and.w	r3, r3, #2
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1ee      	bne.n	8001496 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d105      	bne.n	80014ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014be:	4b45      	ldr	r3, [pc, #276]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	4a44      	ldr	r2, [pc, #272]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 80014c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014c8:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 808c 	beq.w	80015ec <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80014d4:	4b3f      	ldr	r3, [pc, #252]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014e0:	d10e      	bne.n	8001500 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80014e2:	4b3c      	ldr	r3, [pc, #240]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d108      	bne.n	8001500 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80014ee:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 80014f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80014f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014fa:	d101      	bne.n	8001500 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e103      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	2b02      	cmp	r3, #2
 8001506:	d14e      	bne.n	80015a6 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001508:	4b32      	ldr	r3, [pc, #200]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d009      	beq.n	8001528 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001514:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001520:	429a      	cmp	r2, r3
 8001522:	d001      	beq.n	8001528 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e0ef      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001528:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <HAL_RCC_OscConfig+0x4f0>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff f9db 	bl	80008e8 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001536:	f7ff f9d7 	bl	80008e8 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b64      	cmp	r3, #100	; 0x64
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e0df      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001548:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f0      	bne.n	8001536 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001554:	4b1f      	ldr	r3, [pc, #124]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001560:	491c      	ldr	r1, [pc, #112]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 8001562:	4313      	orrs	r3, r2
 8001564:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4918      	ldr	r1, [pc, #96]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 8001574:	4313      	orrs	r3, r2
 8001576:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <HAL_RCC_OscConfig+0x4f0>)
 800157a:	2201      	movs	r2, #1
 800157c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157e:	f7ff f9b3 	bl	80008e8 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001586:	f7ff f9af 	bl	80008e8 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b64      	cmp	r3, #100	; 0x64
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e0b7      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001598:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0f0      	beq.n	8001586 <HAL_RCC_OscConfig+0x49a>
 80015a4:	e022      	b.n	80015ec <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 80015a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015aa:	4a0a      	ldr	r2, [pc, #40]	; (80015d4 <HAL_RCC_OscConfig+0x4e8>)
 80015ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_RCC_OscConfig+0x4f0>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff f996 	bl	80008e8 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80015be:	e00f      	b.n	80015e0 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80015c0:	f7ff f992 	bl	80008e8 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	; 0x64
 80015cc:	d908      	bls.n	80015e0 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e09a      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
 80015d2:	bf00      	nop
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40007000 	.word	0x40007000
 80015dc:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80015e0:	4b4b      	ldr	r3, [pc, #300]	; (8001710 <HAL_RCC_OscConfig+0x624>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d1e9      	bne.n	80015c0 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a1b      	ldr	r3, [r3, #32]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 8088 	beq.w	8001706 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f6:	4b46      	ldr	r3, [pc, #280]	; (8001710 <HAL_RCC_OscConfig+0x624>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d068      	beq.n	80016d4 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d14d      	bne.n	80016a6 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800160a:	4b42      	ldr	r3, [pc, #264]	; (8001714 <HAL_RCC_OscConfig+0x628>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001610:	f7ff f96a 	bl	80008e8 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff f966 	bl	80008e8 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e06e      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800162a:	4b39      	ldr	r3, [pc, #228]	; (8001710 <HAL_RCC_OscConfig+0x624>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800163e:	d10f      	bne.n	8001660 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8001640:	4b33      	ldr	r3, [pc, #204]	; (8001710 <HAL_RCC_OscConfig+0x624>)
 8001642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4931      	ldr	r1, [pc, #196]	; (8001710 <HAL_RCC_OscConfig+0x624>)
 800164a:	4313      	orrs	r3, r2
 800164c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800164e:	4b30      	ldr	r3, [pc, #192]	; (8001710 <HAL_RCC_OscConfig+0x624>)
 8001650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001652:	f023 020f 	bic.w	r2, r3, #15
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	492d      	ldr	r1, [pc, #180]	; (8001710 <HAL_RCC_OscConfig+0x624>)
 800165c:	4313      	orrs	r3, r2
 800165e:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001660:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <HAL_RCC_OscConfig+0x624>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	430b      	orrs	r3, r1
 8001672:	4927      	ldr	r1, [pc, #156]	; (8001710 <HAL_RCC_OscConfig+0x624>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001678:	4b26      	ldr	r3, [pc, #152]	; (8001714 <HAL_RCC_OscConfig+0x628>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167e:	f7ff f933 	bl	80008e8 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001686:	f7ff f92f 	bl	80008e8 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e037      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_RCC_OscConfig+0x624>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x59a>
 80016a4:	e02f      	b.n	8001706 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a6:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HAL_RCC_OscConfig+0x628>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff f91c 	bl	80008e8 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff f918 	bl	80008e8 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e020      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_RCC_OscConfig+0x624>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1f0      	bne.n	80016b4 <HAL_RCC_OscConfig+0x5c8>
 80016d2:	e018      	b.n	8001706 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a1b      	ldr	r3, [r3, #32]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e013      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_RCC_OscConfig+0x624>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d106      	bne.n	8001702 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fe:	429a      	cmp	r2, r3
 8001700:	d001      	beq.n	8001706 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40021000 	.word	0x40021000
 8001714:	42420060 	.word	0x42420060

08001718 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e0d0      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800172c:	4b6a      	ldr	r3, [pc, #424]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	429a      	cmp	r2, r3
 8001738:	d910      	bls.n	800175c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173a:	4b67      	ldr	r3, [pc, #412]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 0207 	bic.w	r2, r3, #7
 8001742:	4965      	ldr	r1, [pc, #404]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b63      	ldr	r3, [pc, #396]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0b8      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0304 	and.w	r3, r3, #4
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001774:	4b59      	ldr	r3, [pc, #356]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4a58      	ldr	r2, [pc, #352]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800177e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0308 	and.w	r3, r3, #8
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800178c:	4b53      	ldr	r3, [pc, #332]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4a52      	ldr	r2, [pc, #328]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001792:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001796:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001798:	4b50      	ldr	r3, [pc, #320]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	494d      	ldr	r1, [pc, #308]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d040      	beq.n	8001838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d107      	bne.n	80017ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b47      	ldr	r3, [pc, #284]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d115      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e07f      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017d6:	4b41      	ldr	r3, [pc, #260]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d109      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e073      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e6:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e06b      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017f6:	4b39      	ldr	r3, [pc, #228]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f023 0203 	bic.w	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4936      	ldr	r1, [pc, #216]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001808:	f7ff f86e 	bl	80008e8 <HAL_GetTick>
 800180c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800180e:	e00a      	b.n	8001826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001810:	f7ff f86a 	bl	80008e8 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	; 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e053      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 020c 	and.w	r2, r3, #12
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	429a      	cmp	r2, r3
 8001836:	d1eb      	bne.n	8001810 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001838:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d210      	bcs.n	8001868 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 0207 	bic.w	r2, r3, #7
 800184e:	4922      	ldr	r1, [pc, #136]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b20      	ldr	r3, [pc, #128]	; (80018d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e032      	b.n	80018ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	4916      	ldr	r1, [pc, #88]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	4313      	orrs	r3, r2
 8001884:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d009      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001892:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	490e      	ldr	r1, [pc, #56]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018a6:	f000 f821 	bl	80018ec <HAL_RCC_GetSysClockFreq>
 80018aa:	4602      	mov	r2, r0
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	f003 030f 	and.w	r3, r3, #15
 80018b6:	490a      	ldr	r1, [pc, #40]	; (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 80018b8:	5ccb      	ldrb	r3, [r1, r3]
 80018ba:	fa22 f303 	lsr.w	r3, r2, r3
 80018be:	4a09      	ldr	r2, [pc, #36]	; (80018e4 <HAL_RCC_ClockConfig+0x1cc>)
 80018c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <HAL_RCC_ClockConfig+0x1d0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe ffcc 	bl	8000864 <HAL_InitTick>

  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40022000 	.word	0x40022000
 80018dc:	40021000 	.word	0x40021000
 80018e0:	08002548 	.word	0x08002548
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000004 	.word	0x20000004

080018ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ee:	b091      	sub	sp, #68	; 0x44
 80018f0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80018f2:	4b56      	ldr	r3, [pc, #344]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x160>)
 80018f4:	f107 0414 	add.w	r4, r7, #20
 80018f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018fa:	c407      	stmia	r4!, {r0, r1, r2}
 80018fc:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80018fe:	4b54      	ldr	r3, [pc, #336]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x164>)
 8001900:	1d3c      	adds	r4, r7, #4
 8001902:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001904:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
 800190c:	2300      	movs	r3, #0
 800190e:	633b      	str	r3, [r7, #48]	; 0x30
 8001910:	2300      	movs	r3, #0
 8001912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001914:	2300      	movs	r3, #0
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8001918:	2300      	movs	r3, #0
 800191a:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001920:	2300      	movs	r3, #0
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001924:	4b4b      	ldr	r3, [pc, #300]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x168>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800192a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800192c:	f003 030c 	and.w	r3, r3, #12
 8001930:	2b04      	cmp	r3, #4
 8001932:	d002      	beq.n	800193a <HAL_RCC_GetSysClockFreq+0x4e>
 8001934:	2b08      	cmp	r3, #8
 8001936:	d003      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x54>
 8001938:	e080      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800193a:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x16c>)
 800193c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800193e:	e080      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001942:	0c9b      	lsrs	r3, r3, #18
 8001944:	f003 030f 	and.w	r3, r3, #15
 8001948:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800194c:	4413      	add	r3, r2
 800194e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d066      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800195e:	4b3d      	ldr	r3, [pc, #244]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x168>)
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800196a:	4413      	add	r3, r2
 800196c:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001972:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x168>)
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d044      	beq.n	8001a08 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800197e:	4b35      	ldr	r3, [pc, #212]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x168>)
 8001980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	3301      	adds	r3, #1
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 800198c:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x168>)
 800198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	3302      	adds	r3, #2
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	4618      	mov	r0, r3
 800199e:	f04f 0100 	mov.w	r1, #0
 80019a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a4:	461a      	mov	r2, r3
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	fb02 f501 	mul.w	r5, r2, r1
 80019ae:	fb00 f403 	mul.w	r4, r0, r3
 80019b2:	442c      	add	r4, r5
 80019b4:	fba0 2302 	umull	r2, r3, r0, r2
 80019b8:	18e1      	adds	r1, r4, r3
 80019ba:	460b      	mov	r3, r1
 80019bc:	4926      	ldr	r1, [pc, #152]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x16c>)
 80019be:	fb01 f003 	mul.w	r0, r1, r3
 80019c2:	2100      	movs	r1, #0
 80019c4:	fb01 f102 	mul.w	r1, r1, r2
 80019c8:	4401      	add	r1, r0
 80019ca:	4823      	ldr	r0, [pc, #140]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x16c>)
 80019cc:	fba2 4500 	umull	r4, r5, r2, r0
 80019d0:	194b      	adds	r3, r1, r5
 80019d2:	461d      	mov	r5, r3
 80019d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d6:	4618      	mov	r0, r3
 80019d8:	f04f 0100 	mov.w	r1, #0
 80019dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019de:	461a      	mov	r2, r3
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	fb02 fc01 	mul.w	ip, r2, r1
 80019e8:	fb00 f603 	mul.w	r6, r0, r3
 80019ec:	4466      	add	r6, ip
 80019ee:	fba0 2302 	umull	r2, r3, r0, r2
 80019f2:	18f1      	adds	r1, r6, r3
 80019f4:	460b      	mov	r3, r1
 80019f6:	4620      	mov	r0, r4
 80019f8:	4629      	mov	r1, r5
 80019fa:	f7fe fc13 	bl	8000224 <__aeabi_uldivmod>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4613      	mov	r3, r2
 8001a04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a06:	e007      	b.n	8001a18 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0a:	4a13      	ldr	r2, [pc, #76]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001a0c:	fb02 f203 	mul.w	r2, r2, r3
 8001a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001a18:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d108      	bne.n	8001a36 <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8001a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a26:	085b      	lsrs	r3, r3, #1
 8001a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a2a:	e004      	b.n	8001a36 <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x170>)
 8001a30:	fb02 f303 	mul.w	r3, r2, r3
 8001a34:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8001a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a3a:	e002      	b.n	8001a42 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x174>)
 8001a3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3744      	adds	r7, #68	; 0x44
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4c:	08002528 	.word	0x08002528
 8001a50:	08002538 	.word	0x08002538
 8001a54:	40021000 	.word	0x40021000
 8001a58:	00989680 	.word	0x00989680
 8001a5c:	003d0900 	.word	0x003d0900
 8001a60:	007a1200 	.word	0x007a1200

08001a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a68:	4b02      	ldr	r3, [pc, #8]	; (8001a74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	20000000 	.word	0x20000000

08001a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a7c:	f7ff fff2 	bl	8001a64 <HAL_RCC_GetHCLKFreq>
 8001a80:	4602      	mov	r2, r0
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	0a1b      	lsrs	r3, r3, #8
 8001a88:	f003 0307 	and.w	r3, r3, #7
 8001a8c:	4903      	ldr	r1, [pc, #12]	; (8001a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a8e:	5ccb      	ldrb	r3, [r1, r3]
 8001a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	08002558 	.word	0x08002558

08001aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aa4:	f7ff ffde 	bl	8001a64 <HAL_RCC_GetHCLKFreq>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	0adb      	lsrs	r3, r3, #11
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	4903      	ldr	r1, [pc, #12]	; (8001ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ab6:	5ccb      	ldrb	r3, [r1, r3]
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	08002558 	.word	0x08002558

08001ac8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <RCC_Delay+0x34>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <RCC_Delay+0x38>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	0a5b      	lsrs	r3, r3, #9
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ae4:	bf00      	nop
  }
  while (Delay --);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1e5a      	subs	r2, r3, #1
 8001aea:	60fa      	str	r2, [r7, #12]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f9      	bne.n	8001ae4 <RCC_Delay+0x1c>
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr
 8001afc:	20000000 	.word	0x20000000
 8001b00:	10624dd3 	.word	0x10624dd3

08001b04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e03f      	b.n	8001b96 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d106      	bne.n	8001b30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7fe fdd2 	bl	80006d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2224      	movs	r2, #36	; 0x24
 8001b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68da      	ldr	r2, [r3, #12]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f000 fc25 	bl	8002398 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	695a      	ldr	r2, [r3, #20]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2220      	movs	r2, #32
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b08a      	sub	sp, #40	; 0x28
 8001ba2:	af02      	add	r7, sp, #8
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	603b      	str	r3, [r7, #0]
 8001baa:	4613      	mov	r3, r2
 8001bac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b20      	cmp	r3, #32
 8001bbc:	d17c      	bne.n	8001cb8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <HAL_UART_Transmit+0x2c>
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e075      	b.n	8001cba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_UART_Transmit+0x3e>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e06e      	b.n	8001cba <HAL_UART_Transmit+0x11c>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2221      	movs	r2, #33	; 0x21
 8001bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bf2:	f7fe fe79 	bl	80008e8 <HAL_GetTick>
 8001bf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	88fa      	ldrh	r2, [r7, #6]
 8001bfc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	88fa      	ldrh	r2, [r7, #6]
 8001c02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c0c:	d108      	bne.n	8001c20 <HAL_UART_Transmit+0x82>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d104      	bne.n	8001c20 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	e003      	b.n	8001c28 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001c30:	e02a      	b.n	8001c88 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2180      	movs	r1, #128	; 0x80
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 fa11 	bl	8002064 <UART_WaitOnFlagUntilTimeout>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e036      	b.n	8001cba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10b      	bne.n	8001c6a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	3302      	adds	r3, #2
 8001c66:	61bb      	str	r3, [r7, #24]
 8001c68:	e007      	b.n	8001c7a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	781a      	ldrb	r2, [r3, #0]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	3301      	adds	r3, #1
 8001c78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1cf      	bne.n	8001c32 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2140      	movs	r1, #64	; 0x40
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 f9e1 	bl	8002064 <UART_WaitOnFlagUntilTimeout>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e006      	b.n	8001cba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2220      	movs	r2, #32
 8001cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e000      	b.n	8001cba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001cb8:	2302      	movs	r3, #2
  }
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3720      	adds	r7, #32
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08a      	sub	sp, #40	; 0x28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10d      	bne.n	8001d16 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	f003 0320 	and.w	r3, r3, #32
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d008      	beq.n	8001d16 <HAL_UART_IRQHandler+0x52>
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	f003 0320 	and.w	r3, r3, #32
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fa99 	bl	8002246 <UART_Receive_IT>
      return;
 8001d14:	e17b      	b.n	800200e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80b1 	beq.w	8001e80 <HAL_UART_IRQHandler+0x1bc>
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d105      	bne.n	8001d34 <HAL_UART_IRQHandler+0x70>
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 80a6 	beq.w	8001e80 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00a      	beq.n	8001d54 <HAL_UART_IRQHandler+0x90>
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d005      	beq.n	8001d54 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f043 0201 	orr.w	r2, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00a      	beq.n	8001d74 <HAL_UART_IRQHandler+0xb0>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f043 0202 	orr.w	r2, r3, #2
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00a      	beq.n	8001d94 <HAL_UART_IRQHandler+0xd0>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d005      	beq.n	8001d94 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f043 0204 	orr.w	r2, r3, #4
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00f      	beq.n	8001dbe <HAL_UART_IRQHandler+0xfa>
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	f003 0320 	and.w	r3, r3, #32
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d104      	bne.n	8001db2 <HAL_UART_IRQHandler+0xee>
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f043 0208 	orr.w	r2, r3, #8
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 811e 	beq.w	8002004 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <HAL_UART_IRQHandler+0x11e>
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 fa32 	bl	8002246 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf14      	ite	ne
 8001df0:	2301      	movne	r3, #1
 8001df2:	2300      	moveq	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d102      	bne.n	8001e0a <HAL_UART_IRQHandler+0x146>
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d031      	beq.n	8001e6e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f974 	bl	80020f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d023      	beq.n	8001e66 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e2c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d013      	beq.n	8001e5e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e3a:	4a76      	ldr	r2, [pc, #472]	; (8002014 <HAL_UART_IRQHandler+0x350>)
 8001e3c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fec6 	bl	8000bd4 <HAL_DMA_Abort_IT>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d016      	beq.n	8001e7c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e5c:	e00e      	b.n	8001e7c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f8ec 	bl	800203c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e64:	e00a      	b.n	8001e7c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8e8 	bl	800203c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e6c:	e006      	b.n	8001e7c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f8e4 	bl	800203c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001e7a:	e0c3      	b.n	8002004 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e7c:	bf00      	nop
    return;
 8001e7e:	e0c1      	b.n	8002004 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	f040 80a1 	bne.w	8001fcc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 809b 	beq.w	8001fcc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 8095 	beq.w	8001fcc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d04e      	beq.n	8001f64 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8001ed0:	8a3b      	ldrh	r3, [r7, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8098 	beq.w	8002008 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001edc:	8a3a      	ldrh	r2, [r7, #16]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	f080 8092 	bcs.w	8002008 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	8a3a      	ldrh	r2, [r7, #16]
 8001ee8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d02b      	beq.n	8001f4c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f02:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695a      	ldr	r2, [r3, #20]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0201 	bic.w	r2, r2, #1
 8001f12:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f22:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 0210 	bic.w	r2, r2, #16
 8001f40:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7fe fe09 	bl	8000b5e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f876 	bl	800204e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001f62:	e051      	b.n	8002008 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d047      	beq.n	800200c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8001f7c:	8a7b      	ldrh	r3, [r7, #18]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d044      	beq.n	800200c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f90:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695a      	ldr	r2, [r3, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0201 	bic.w	r2, r2, #1
 8001fa0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0210 	bic.w	r2, r2, #16
 8001fbe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001fc0:	8a7b      	ldrh	r3, [r7, #18]
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f842 	bl	800204e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8001fca:	e01f      	b.n	800200c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d008      	beq.n	8001fe8 <HAL_UART_IRQHandler+0x324>
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f8c9 	bl	8002178 <UART_Transmit_IT>
    return;
 8001fe6:	e012      	b.n	800200e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00d      	beq.n	800200e <HAL_UART_IRQHandler+0x34a>
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f90a 	bl	8002216 <UART_EndTransmit_IT>
    return;
 8002002:	e004      	b.n	800200e <HAL_UART_IRQHandler+0x34a>
    return;
 8002004:	bf00      	nop
 8002006:	e002      	b.n	800200e <HAL_UART_IRQHandler+0x34a>
      return;
 8002008:	bf00      	nop
 800200a:	e000      	b.n	800200e <HAL_UART_IRQHandler+0x34a>
      return;
 800200c:	bf00      	nop
  }
}
 800200e:	3728      	adds	r7, #40	; 0x28
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	08002151 	.word	0x08002151

08002018 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800202a:	b480      	push	{r7}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr

0800204e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	460b      	mov	r3, r1
 8002058:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	4613      	mov	r3, r2
 8002072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002074:	e02c      	b.n	80020d0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d028      	beq.n	80020d0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d007      	beq.n	8002094 <UART_WaitOnFlagUntilTimeout+0x30>
 8002084:	f7fe fc30 	bl	80008e8 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	429a      	cmp	r2, r3
 8002092:	d21d      	bcs.n	80020d0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80020a2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f022 0201 	bic.w	r2, r2, #1
 80020b2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2220      	movs	r2, #32
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e00f      	b.n	80020f0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	4013      	ands	r3, r2
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	429a      	cmp	r2, r3
 80020de:	bf0c      	ite	eq
 80020e0:	2301      	moveq	r3, #1
 80020e2:	2300      	movne	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	79fb      	ldrb	r3, [r7, #7]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d0c3      	beq.n	8002076 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800210e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0201 	bic.w	r2, r2, #1
 800211e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	2b01      	cmp	r3, #1
 8002126:	d107      	bne.n	8002138 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0210 	bic.w	r2, r2, #16
 8002136:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f7ff ff66 	bl	800203c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002170:	bf00      	nop
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b21      	cmp	r3, #33	; 0x21
 800218a:	d13e      	bne.n	800220a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002194:	d114      	bne.n	80021c0 <UART_Transmit_IT+0x48>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d110      	bne.n	80021c0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	1c9a      	adds	r2, r3, #2
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	621a      	str	r2, [r3, #32]
 80021be:	e008      	b.n	80021d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	1c59      	adds	r1, r3, #1
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6211      	str	r1, [r2, #32]
 80021ca:	781a      	ldrb	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29b      	uxth	r3, r3
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4619      	mov	r1, r3
 80021e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10f      	bne.n	8002206 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002204:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800220a:	2302      	movs	r3, #2
  }
}
 800220c:	4618      	mov	r0, r3
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr

08002216 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800222c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff feee 	bl	8002018 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b22      	cmp	r3, #34	; 0x22
 8002258:	f040 8099 	bne.w	800238e <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002264:	d117      	bne.n	8002296 <UART_Receive_IT+0x50>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d113      	bne.n	8002296 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	b29b      	uxth	r3, r3
 8002280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002284:	b29a      	uxth	r2, r3
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228e:	1c9a      	adds	r2, r3, #2
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	629a      	str	r2, [r3, #40]	; 0x28
 8002294:	e026      	b.n	80022e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229a:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800229c:	2300      	movs	r3, #0
 800229e:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a8:	d007      	beq.n	80022ba <UART_Receive_IT+0x74>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10a      	bne.n	80022c8 <UART_Receive_IT+0x82>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	701a      	strb	r2, [r3, #0]
 80022c6:	e008      	b.n	80022da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	4619      	mov	r1, r3
 80022f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d148      	bne.n	800238a <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0220 	bic.w	r2, r2, #32
 8002306:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002316:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0201 	bic.w	r2, r2, #1
 8002326:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	2b01      	cmp	r3, #1
 8002336:	d123      	bne.n	8002380 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0210 	bic.w	r2, r2, #16
 800234c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	2b10      	cmp	r3, #16
 800235a:	d10a      	bne.n	8002372 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002376:	4619      	mov	r1, r3
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff fe68 	bl	800204e <HAL_UARTEx_RxEventCallback>
 800237e:	e002      	b.n	8002386 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff fe52 	bl	800202a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e002      	b.n	8002390 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800238a:	2300      	movs	r3, #0
 800238c:	e000      	b.n	8002390 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800238e:	2302      	movs	r3, #2
  }
}
 8002390:	4618      	mov	r0, r3
 8002392:	3718      	adds	r7, #24
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68da      	ldr	r2, [r3, #12]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023d2:	f023 030c 	bic.w	r3, r3, #12
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6812      	ldr	r2, [r2, #0]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	430b      	orrs	r3, r1
 80023de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a2c      	ldr	r2, [pc, #176]	; (80024ac <UART_SetConfig+0x114>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d103      	bne.n	8002408 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002400:	f7ff fb4e 	bl	8001aa0 <HAL_RCC_GetPCLK2Freq>
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	e002      	b.n	800240e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002408:	f7ff fb36 	bl	8001a78 <HAL_RCC_GetPCLK1Freq>
 800240c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	009a      	lsls	r2, r3, #2
 8002418:	441a      	add	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	fbb2 f3f3 	udiv	r3, r2, r3
 8002424:	4a22      	ldr	r2, [pc, #136]	; (80024b0 <UART_SetConfig+0x118>)
 8002426:	fba2 2303 	umull	r2, r3, r2, r3
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	0119      	lsls	r1, r3, #4
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	009a      	lsls	r2, r3, #2
 8002438:	441a      	add	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	fbb2 f2f3 	udiv	r2, r2, r3
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <UART_SetConfig+0x118>)
 8002446:	fba3 0302 	umull	r0, r3, r3, r2
 800244a:	095b      	lsrs	r3, r3, #5
 800244c:	2064      	movs	r0, #100	; 0x64
 800244e:	fb00 f303 	mul.w	r3, r0, r3
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	3332      	adds	r3, #50	; 0x32
 8002458:	4a15      	ldr	r2, [pc, #84]	; (80024b0 <UART_SetConfig+0x118>)
 800245a:	fba2 2303 	umull	r2, r3, r2, r3
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002464:	4419      	add	r1, r3
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	009a      	lsls	r2, r3, #2
 8002470:	441a      	add	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	fbb2 f2f3 	udiv	r2, r2, r3
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <UART_SetConfig+0x118>)
 800247e:	fba3 0302 	umull	r0, r3, r3, r2
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	2064      	movs	r0, #100	; 0x64
 8002486:	fb00 f303 	mul.w	r3, r0, r3
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	3332      	adds	r3, #50	; 0x32
 8002490:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <UART_SetConfig+0x118>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	f003 020f 	and.w	r2, r3, #15
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	440a      	add	r2, r1
 80024a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024a4:	bf00      	nop
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40013800 	.word	0x40013800
 80024b0:	51eb851f 	.word	0x51eb851f

080024b4 <__libc_init_array>:
 80024b4:	b570      	push	{r4, r5, r6, lr}
 80024b6:	2600      	movs	r6, #0
 80024b8:	4d0c      	ldr	r5, [pc, #48]	; (80024ec <__libc_init_array+0x38>)
 80024ba:	4c0d      	ldr	r4, [pc, #52]	; (80024f0 <__libc_init_array+0x3c>)
 80024bc:	1b64      	subs	r4, r4, r5
 80024be:	10a4      	asrs	r4, r4, #2
 80024c0:	42a6      	cmp	r6, r4
 80024c2:	d109      	bne.n	80024d8 <__libc_init_array+0x24>
 80024c4:	f000 f822 	bl	800250c <_init>
 80024c8:	2600      	movs	r6, #0
 80024ca:	4d0a      	ldr	r5, [pc, #40]	; (80024f4 <__libc_init_array+0x40>)
 80024cc:	4c0a      	ldr	r4, [pc, #40]	; (80024f8 <__libc_init_array+0x44>)
 80024ce:	1b64      	subs	r4, r4, r5
 80024d0:	10a4      	asrs	r4, r4, #2
 80024d2:	42a6      	cmp	r6, r4
 80024d4:	d105      	bne.n	80024e2 <__libc_init_array+0x2e>
 80024d6:	bd70      	pop	{r4, r5, r6, pc}
 80024d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80024dc:	4798      	blx	r3
 80024de:	3601      	adds	r6, #1
 80024e0:	e7ee      	b.n	80024c0 <__libc_init_array+0xc>
 80024e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80024e6:	4798      	blx	r3
 80024e8:	3601      	adds	r6, #1
 80024ea:	e7f2      	b.n	80024d2 <__libc_init_array+0x1e>
 80024ec:	08002568 	.word	0x08002568
 80024f0:	08002568 	.word	0x08002568
 80024f4:	08002568 	.word	0x08002568
 80024f8:	0800256c 	.word	0x0800256c

080024fc <memset>:
 80024fc:	4603      	mov	r3, r0
 80024fe:	4402      	add	r2, r0
 8002500:	4293      	cmp	r3, r2
 8002502:	d100      	bne.n	8002506 <memset+0xa>
 8002504:	4770      	bx	lr
 8002506:	f803 1b01 	strb.w	r1, [r3], #1
 800250a:	e7f9      	b.n	8002500 <memset+0x4>

0800250c <_init>:
 800250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800250e:	bf00      	nop
 8002510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002512:	bc08      	pop	{r3}
 8002514:	469e      	mov	lr, r3
 8002516:	4770      	bx	lr

08002518 <_fini>:
 8002518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251a:	bf00      	nop
 800251c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800251e:	bc08      	pop	{r3}
 8002520:	469e      	mov	lr, r3
 8002522:	4770      	bx	lr
