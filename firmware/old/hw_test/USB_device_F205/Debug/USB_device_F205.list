
USB_device_F205.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006400  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006584  08006584  00016584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065e4  080065e4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080065e4  080065e4  000165e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065ec  080065ec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065ec  080065ec  000165ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065f0  080065f0  000165f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080065f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001110  200001e0  080067d4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200012f0  080067d4  000212f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000131ce  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d3e  00000000  00000000  000333d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  00036118  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b90  00000000  00000000  00036e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002017d  00000000  00000000  00037990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d5ac  00000000  00000000  00057b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b2ff2  00000000  00000000  000650b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001180ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000353c  00000000  00000000  00118128  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	200001e0 	.word	0x200001e0
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800656c 	.word	0x0800656c

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	200001e4 	.word	0x200001e4
 80001c0:	0800656c 	.word	0x0800656c

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b974 	b.w	80004c4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	468c      	mov	ip, r1
 80001fa:	4604      	mov	r4, r0
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d14b      	bne.n	800029a <__udivmoddi4+0xa6>
 8000202:	428a      	cmp	r2, r1
 8000204:	4615      	mov	r5, r2
 8000206:	d967      	bls.n	80002d8 <__udivmoddi4+0xe4>
 8000208:	fab2 f282 	clz	r2, r2
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0720 	rsb	r7, r2, #32
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	fa20 f707 	lsr.w	r7, r0, r7
 800021a:	4095      	lsls	r5, r2
 800021c:	ea47 0c03 	orr.w	ip, r7, r3
 8000220:	4094      	lsls	r4, r2
 8000222:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000226:	fbbc f7fe 	udiv	r7, ip, lr
 800022a:	fa1f f885 	uxth.w	r8, r5
 800022e:	fb0e c317 	mls	r3, lr, r7, ip
 8000232:	fb07 f908 	mul.w	r9, r7, r8
 8000236:	0c21      	lsrs	r1, r4, #16
 8000238:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023c:	4599      	cmp	r9, r3
 800023e:	d909      	bls.n	8000254 <__udivmoddi4+0x60>
 8000240:	18eb      	adds	r3, r5, r3
 8000242:	f107 31ff 	add.w	r1, r7, #4294967295
 8000246:	f080 811c 	bcs.w	8000482 <__udivmoddi4+0x28e>
 800024a:	4599      	cmp	r9, r3
 800024c:	f240 8119 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000250:	3f02      	subs	r7, #2
 8000252:	442b      	add	r3, r5
 8000254:	eba3 0309 	sub.w	r3, r3, r9
 8000258:	fbb3 f0fe 	udiv	r0, r3, lr
 800025c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000260:	fb00 f108 	mul.w	r1, r0, r8
 8000264:	b2a4      	uxth	r4, r4
 8000266:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026a:	42a1      	cmp	r1, r4
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x8e>
 800026e:	192c      	adds	r4, r5, r4
 8000270:	f100 33ff 	add.w	r3, r0, #4294967295
 8000274:	f080 8107 	bcs.w	8000486 <__udivmoddi4+0x292>
 8000278:	42a1      	cmp	r1, r4
 800027a:	f240 8104 	bls.w	8000486 <__udivmoddi4+0x292>
 800027e:	3802      	subs	r0, #2
 8000280:	442c      	add	r4, r5
 8000282:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000286:	2700      	movs	r7, #0
 8000288:	1a64      	subs	r4, r4, r1
 800028a:	b11e      	cbz	r6, 8000294 <__udivmoddi4+0xa0>
 800028c:	2300      	movs	r3, #0
 800028e:	40d4      	lsrs	r4, r2
 8000290:	e9c6 4300 	strd	r4, r3, [r6]
 8000294:	4639      	mov	r1, r7
 8000296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029a:	428b      	cmp	r3, r1
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0xbe>
 800029e:	2e00      	cmp	r6, #0
 80002a0:	f000 80ec 	beq.w	800047c <__udivmoddi4+0x288>
 80002a4:	2700      	movs	r7, #0
 80002a6:	e9c6 0100 	strd	r0, r1, [r6]
 80002aa:	4638      	mov	r0, r7
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	fab3 f783 	clz	r7, r3
 80002b6:	2f00      	cmp	r7, #0
 80002b8:	d148      	bne.n	800034c <__udivmoddi4+0x158>
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xd0>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 80fb 	bhi.w	80004ba <__udivmoddi4+0x2c6>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	469c      	mov	ip, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d0e0      	beq.n	8000294 <__udivmoddi4+0xa0>
 80002d2:	e9c6 4c00 	strd	r4, ip, [r6]
 80002d6:	e7dd      	b.n	8000294 <__udivmoddi4+0xa0>
 80002d8:	b902      	cbnz	r2, 80002dc <__udivmoddi4+0xe8>
 80002da:	deff      	udf	#255	; 0xff
 80002dc:	fab2 f282 	clz	r2, r2
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f040 808f 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e6:	2701      	movs	r7, #1
 80002e8:	1b49      	subs	r1, r1, r5
 80002ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002ee:	fa1f f985 	uxth.w	r9, r5
 80002f2:	fbb1 fef8 	udiv	lr, r1, r8
 80002f6:	fb08 111e 	mls	r1, r8, lr, r1
 80002fa:	fb09 f00e 	mul.w	r0, r9, lr
 80002fe:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000302:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000306:	4298      	cmp	r0, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x126>
 800030a:	18eb      	adds	r3, r5, r3
 800030c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4298      	cmp	r0, r3
 8000314:	f200 80cd 	bhi.w	80004b2 <__udivmoddi4+0x2be>
 8000318:	468e      	mov	lr, r1
 800031a:	1a1b      	subs	r3, r3, r0
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	fb09 f900 	mul.w	r9, r9, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800032e:	45a1      	cmp	r9, r4
 8000330:	d907      	bls.n	8000342 <__udivmoddi4+0x14e>
 8000332:	192c      	adds	r4, r5, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x14c>
 800033a:	45a1      	cmp	r9, r4
 800033c:	f200 80b6 	bhi.w	80004ac <__udivmoddi4+0x2b8>
 8000340:	4618      	mov	r0, r3
 8000342:	eba4 0409 	sub.w	r4, r4, r9
 8000346:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800034a:	e79e      	b.n	800028a <__udivmoddi4+0x96>
 800034c:	f1c7 0520 	rsb	r5, r7, #32
 8000350:	40bb      	lsls	r3, r7
 8000352:	fa22 fc05 	lsr.w	ip, r2, r5
 8000356:	ea4c 0c03 	orr.w	ip, ip, r3
 800035a:	fa21 f405 	lsr.w	r4, r1, r5
 800035e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000362:	fbb4 f9fe 	udiv	r9, r4, lr
 8000366:	fa1f f88c 	uxth.w	r8, ip
 800036a:	fb0e 4419 	mls	r4, lr, r9, r4
 800036e:	fa20 f305 	lsr.w	r3, r0, r5
 8000372:	40b9      	lsls	r1, r7
 8000374:	fb09 fa08 	mul.w	sl, r9, r8
 8000378:	4319      	orrs	r1, r3
 800037a:	0c0b      	lsrs	r3, r1, #16
 800037c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000380:	45a2      	cmp	sl, r4
 8000382:	fa02 f207 	lsl.w	r2, r2, r7
 8000386:	fa00 f307 	lsl.w	r3, r0, r7
 800038a:	d90b      	bls.n	80003a4 <__udivmoddi4+0x1b0>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f109 30ff 	add.w	r0, r9, #4294967295
 8000394:	f080 8088 	bcs.w	80004a8 <__udivmoddi4+0x2b4>
 8000398:	45a2      	cmp	sl, r4
 800039a:	f240 8085 	bls.w	80004a8 <__udivmoddi4+0x2b4>
 800039e:	f1a9 0902 	sub.w	r9, r9, #2
 80003a2:	4464      	add	r4, ip
 80003a4:	eba4 040a 	sub.w	r4, r4, sl
 80003a8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003ac:	fb0e 4410 	mls	r4, lr, r0, r4
 80003b0:	fb00 fa08 	mul.w	sl, r0, r8
 80003b4:	b289      	uxth	r1, r1
 80003b6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003ba:	45a2      	cmp	sl, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	d26b      	bcs.n	80004a0 <__udivmoddi4+0x2ac>
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d969      	bls.n	80004a0 <__udivmoddi4+0x2ac>
 80003cc:	3802      	subs	r0, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d4:	fba0 8902 	umull	r8, r9, r0, r2
 80003d8:	eba4 040a 	sub.w	r4, r4, sl
 80003dc:	454c      	cmp	r4, r9
 80003de:	4641      	mov	r1, r8
 80003e0:	46ce      	mov	lr, r9
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d069      	beq.n	80004be <__udivmoddi4+0x2ca>
 80003ea:	1a5a      	subs	r2, r3, r1
 80003ec:	eb64 040e 	sbc.w	r4, r4, lr
 80003f0:	fa04 f505 	lsl.w	r5, r4, r5
 80003f4:	fa22 f307 	lsr.w	r3, r2, r7
 80003f8:	40fc      	lsrs	r4, r7
 80003fa:	431d      	orrs	r5, r3
 80003fc:	e9c6 5400 	strd	r5, r4, [r6]
 8000400:	2700      	movs	r7, #0
 8000402:	e747      	b.n	8000294 <__udivmoddi4+0xa0>
 8000404:	4095      	lsls	r5, r2
 8000406:	f1c2 0320 	rsb	r3, r2, #32
 800040a:	fa21 f003 	lsr.w	r0, r1, r3
 800040e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000412:	fbb0 f7f8 	udiv	r7, r0, r8
 8000416:	fa1f f985 	uxth.w	r9, r5
 800041a:	fb08 0017 	mls	r0, r8, r7, r0
 800041e:	fa24 f303 	lsr.w	r3, r4, r3
 8000422:	4091      	lsls	r1, r2
 8000424:	fb07 fc09 	mul.w	ip, r7, r9
 8000428:	430b      	orrs	r3, r1
 800042a:	0c19      	lsrs	r1, r3, #16
 800042c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000430:	458c      	cmp	ip, r1
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x254>
 8000438:	1869      	adds	r1, r5, r1
 800043a:	f107 30ff 	add.w	r0, r7, #4294967295
 800043e:	d231      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000440:	458c      	cmp	ip, r1
 8000442:	d92f      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 8000444:	3f02      	subs	r7, #2
 8000446:	4429      	add	r1, r5
 8000448:	eba1 010c 	sub.w	r1, r1, ip
 800044c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000450:	fb08 1c10 	mls	ip, r8, r0, r1
 8000454:	fb00 fe09 	mul.w	lr, r0, r9
 8000458:	b299      	uxth	r1, r3
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	458e      	cmp	lr, r1
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x27e>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f100 33ff 	add.w	r3, r0, #4294967295
 8000468:	d218      	bcs.n	800049c <__udivmoddi4+0x2a8>
 800046a:	458e      	cmp	lr, r1
 800046c:	d916      	bls.n	800049c <__udivmoddi4+0x2a8>
 800046e:	3802      	subs	r0, #2
 8000470:	4429      	add	r1, r5
 8000472:	eba1 010e 	sub.w	r1, r1, lr
 8000476:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4637      	mov	r7, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e708      	b.n	8000294 <__udivmoddi4+0xa0>
 8000482:	460f      	mov	r7, r1
 8000484:	e6e6      	b.n	8000254 <__udivmoddi4+0x60>
 8000486:	4618      	mov	r0, r3
 8000488:	e6fb      	b.n	8000282 <__udivmoddi4+0x8e>
 800048a:	4543      	cmp	r3, r8
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb8 0102 	subs.w	r1, r8, r2
 8000492:	eb69 020c 	sbc.w	r2, r9, ip
 8000496:	3801      	subs	r0, #1
 8000498:	4696      	mov	lr, r2
 800049a:	e7a4      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049c:	4618      	mov	r0, r3
 800049e:	e7e8      	b.n	8000472 <__udivmoddi4+0x27e>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e795      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e7cf      	b.n	8000448 <__udivmoddi4+0x254>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e77b      	b.n	80003a4 <__udivmoddi4+0x1b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	442c      	add	r4, r5
 80004b0:	e747      	b.n	8000342 <__udivmoddi4+0x14e>
 80004b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b6:	442b      	add	r3, r5
 80004b8:	e72f      	b.n	800031a <__udivmoddi4+0x126>
 80004ba:	4638      	mov	r0, r7
 80004bc:	e707      	b.n	80002ce <__udivmoddi4+0xda>
 80004be:	4637      	mov	r7, r6
 80004c0:	e6e8      	b.n	8000294 <__udivmoddi4+0xa0>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 f9ae 	bl	800082c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f807 	bl	80004e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f876 	bl	80005c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004d8:	f000 f84a 	bl	8000570 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80004dc:	f005 fa42 	bl	8005964 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <main+0x18>

080004e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b092      	sub	sp, #72	; 0x48
 80004e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e8:	f107 0318 	add.w	r3, r7, #24
 80004ec:	2230      	movs	r2, #48	; 0x30
 80004ee:	2100      	movs	r1, #0
 80004f0:	4618      	mov	r0, r3
 80004f2:	f005 ff7b 	bl	80063ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000504:	2301      	movs	r3, #1
 8000506:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000508:	2301      	movs	r3, #1
 800050a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800050c:	2302      	movs	r3, #2
 800050e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000510:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000514:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000516:	2319      	movs	r3, #25
 8000518:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 800051a:	23c0      	movs	r3, #192	; 0xc0
 800051c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800051e:	2304      	movs	r3, #4
 8000520:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000522:	2304      	movs	r3, #4
 8000524:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000526:	f107 0318 	add.w	r3, r7, #24
 800052a:	4618      	mov	r0, r3
 800052c:	f001 fe10 	bl	8002150 <HAL_RCC_OscConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000536:	f000 f86b 	bl	8000610 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053a:	230f      	movs	r3, #15
 800053c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053e:	2302      	movs	r3, #2
 8000540:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000546:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800054a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800054c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000550:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2101      	movs	r1, #1
 8000556:	4618      	mov	r0, r3
 8000558:	f002 f84a 	bl	80025f0 <HAL_RCC_ClockConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000562:	f000 f855 	bl	8000610 <Error_Handler>
  }
}
 8000566:	bf00      	nop
 8000568:	3748      	adds	r7, #72	; 0x48
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 8000576:	4a12      	ldr	r2, [pc, #72]	; (80005c0 <MX_USART1_UART_Init+0x50>)
 8000578:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800057a:	4b10      	ldr	r3, [pc, #64]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 800057c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000580:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000588:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 800058a:	2200      	movs	r2, #0
 800058c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 8000590:	2200      	movs	r2, #0
 8000592:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000594:	4b09      	ldr	r3, [pc, #36]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 8000596:	220c      	movs	r2, #12
 8000598:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 800059c:	2200      	movs	r2, #0
 800059e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005a6:	4805      	ldr	r0, [pc, #20]	; (80005bc <MX_USART1_UART_Init+0x4c>)
 80005a8:	f002 fa0e 	bl	80029c8 <HAL_UART_Init>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005b2:	f000 f82d 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	2000020c 	.word	0x2000020c
 80005c0:	40011000 	.word	0x40011000

080005c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_GPIO_Init+0x48>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <MX_GPIO_Init+0x48>)
 80005d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_GPIO_Init+0x48>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <MX_GPIO_Init+0x48>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a07      	ldr	r2, [pc, #28]	; (800060c <MX_GPIO_Init+0x48>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <MX_GPIO_Init+0x48>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	40023800 	.word	0x40023800

08000610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <HAL_MspInit+0x48>)
 8000628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <HAL_MspInit+0x48>)
 800062c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000630:	6453      	str	r3, [r2, #68]	; 0x44
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_MspInit+0x48>)
 8000634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <HAL_MspInit+0x48>)
 8000644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000646:	4a07      	ldr	r2, [pc, #28]	; (8000664 <HAL_MspInit+0x48>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064c:	6413      	str	r3, [r2, #64]	; 0x40
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <HAL_MspInit+0x48>)
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	40023800 	.word	0x40023800

08000668 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a19      	ldr	r2, [pc, #100]	; (80006ec <HAL_UART_MspInit+0x84>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d12c      	bne.n	80006e4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <HAL_UART_MspInit+0x88>)
 8000690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000692:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <HAL_UART_MspInit+0x88>)
 8000694:	f043 0310 	orr.w	r3, r3, #16
 8000698:	6453      	str	r3, [r2, #68]	; 0x44
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <HAL_UART_MspInit+0x88>)
 800069c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069e:	f003 0310 	and.w	r3, r3, #16
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <HAL_UART_MspInit+0x88>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a10      	ldr	r2, [pc, #64]	; (80006f0 <HAL_UART_MspInit+0x88>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <HAL_UART_MspInit+0x88>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006c2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	2303      	movs	r3, #3
 80006d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006d4:	2307      	movs	r3, #7
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <HAL_UART_MspInit+0x8c>)
 80006e0:	f000 fa42 	bl	8000b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006e4:	bf00      	nop
 80006e6:	3728      	adds	r7, #40	; 0x28
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40011000 	.word	0x40011000
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020000 	.word	0x40020000

080006f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <HardFault_Handler+0x4>

0800070a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <MemManage_Handler+0x4>

08000710 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <BusFault_Handler+0x4>

08000716 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <UsageFault_Handler+0x4>

0800071c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr

08000740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000744:	f000 f8c4 	bl	80008d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000750:	4802      	ldr	r0, [pc, #8]	; (800075c <OTG_FS_IRQHandler+0x10>)
 8000752:	f000 fce6 	bl	8001122 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000eec 	.word	0x20000eec

08000760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000768:	4a14      	ldr	r2, [pc, #80]	; (80007bc <_sbrk+0x5c>)
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <_sbrk+0x60>)
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d102      	bne.n	8000782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <_sbrk+0x64>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <_sbrk+0x68>)
 8000780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <_sbrk+0x64>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	429a      	cmp	r2, r3
 800078e:	d207      	bcs.n	80007a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000790:	f005 fdf2 	bl	8006378 <__errno>
 8000794:	4602      	mov	r2, r0
 8000796:	230c      	movs	r3, #12
 8000798:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	e009      	b.n	80007b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <_sbrk+0x64>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007a6:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <_sbrk+0x64>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	4a05      	ldr	r2, [pc, #20]	; (80007c4 <_sbrk+0x64>)
 80007b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007b2:	68fb      	ldr	r3, [r7, #12]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20010000 	.word	0x20010000
 80007c0:	00004000 	.word	0x00004000
 80007c4:	200001fc 	.word	0x200001fc
 80007c8:	200012f0 	.word	0x200012f0

080007cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000810 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80007dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80007de:	e003      	b.n	80007e8 <LoopCopyDataInit>

080007e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80007e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80007e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80007e6:	3104      	adds	r1, #4

080007e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80007e8:	480b      	ldr	r0, [pc, #44]	; (8000818 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80007ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80007ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80007f0:	d3f6      	bcc.n	80007e0 <CopyDataInit>
  ldr  r2, =_sbss
 80007f2:	4a0b      	ldr	r2, [pc, #44]	; (8000820 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80007f4:	e002      	b.n	80007fc <LoopFillZerobss>

080007f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80007f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80007f8:	f842 3b04 	str.w	r3, [r2], #4

080007fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80007fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000800:	d3f9      	bcc.n	80007f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000802:	f7ff ffe3 	bl	80007cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000806:	f005 fdbd 	bl	8006384 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800080a:	f7ff fe5d 	bl	80004c8 <main>
  bx  lr    
 800080e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000810:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000814:	080065f4 	.word	0x080065f4
  ldr  r0, =_sdata
 8000818:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800081c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8000820:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8000824:	200012f0 	.word	0x200012f0

08000828 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000828:	e7fe      	b.n	8000828 <ADC_IRQHandler>
	...

0800082c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000830:	4b0e      	ldr	r3, [pc, #56]	; (800086c <HAL_Init+0x40>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <HAL_Init+0x40>)
 8000836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800083a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800083c:	4b0b      	ldr	r3, [pc, #44]	; (800086c <HAL_Init+0x40>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a0a      	ldr	r2, [pc, #40]	; (800086c <HAL_Init+0x40>)
 8000842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000846:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_Init+0x40>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a07      	ldr	r2, [pc, #28]	; (800086c <HAL_Init+0x40>)
 800084e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000852:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000854:	2003      	movs	r0, #3
 8000856:	f000 f945 	bl	8000ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085a:	2000      	movs	r0, #0
 800085c:	f000 f808 	bl	8000870 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000860:	f7ff fedc 	bl	800061c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023c00 	.word	0x40023c00

08000870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <HAL_InitTick+0x54>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_InitTick+0x58>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4619      	mov	r1, r3
 8000882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000886:	fbb3 f3f1 	udiv	r3, r3, r1
 800088a:	fbb2 f3f3 	udiv	r3, r2, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f95d 	bl	8000b4e <HAL_SYSTICK_Config>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e00e      	b.n	80008bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d80a      	bhi.n	80008ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a4:	2200      	movs	r2, #0
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f000 f925 	bl	8000afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b0:	4a06      	ldr	r2, [pc, #24]	; (80008cc <HAL_InitTick+0x5c>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008b6:	2300      	movs	r3, #0
 80008b8:	e000      	b.n	80008bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000008 	.word	0x20000008
 80008cc:	20000004 	.word	0x20000004

080008d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <HAL_IncTick+0x1c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <HAL_IncTick+0x20>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	4a03      	ldr	r2, [pc, #12]	; (80008f0 <HAL_IncTick+0x20>)
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bc80      	pop	{r7}
 80008ea:	4770      	bx	lr
 80008ec:	20000008 	.word	0x20000008
 80008f0:	2000024c 	.word	0x2000024c

080008f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  return uwTick;
 80008f8:	4b02      	ldr	r3, [pc, #8]	; (8000904 <HAL_GetTick+0x10>)
 80008fa:	681b      	ldr	r3, [r3, #0]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr
 8000904:	2000024c 	.word	0x2000024c

08000908 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000910:	f7ff fff0 	bl	80008f4 <HAL_GetTick>
 8000914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000920:	d005      	beq.n	800092e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_Delay+0x40>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	4413      	add	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800092e:	bf00      	nop
 8000930:	f7ff ffe0 	bl	80008f4 <HAL_GetTick>
 8000934:	4602      	mov	r2, r0
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	429a      	cmp	r2, r3
 800093e:	d8f7      	bhi.n	8000930 <HAL_Delay+0x28>
  {
  }
}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000008 	.word	0x20000008

0800094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097e:	4a04      	ldr	r2, [pc, #16]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <__NVIC_GetPriorityGrouping+0x18>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	f003 0307 	and.w	r3, r3, #7
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	db0b      	blt.n	80009da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	f003 021f 	and.w	r2, r3, #31
 80009c8:	4906      	ldr	r1, [pc, #24]	; (80009e4 <__NVIC_EnableIRQ+0x34>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	095b      	lsrs	r3, r3, #5
 80009d0:	2001      	movs	r0, #1
 80009d2:	fa00 f202 	lsl.w	r2, r0, r2
 80009d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	e000e100 	.word	0xe000e100

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	; (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab0:	d301      	bcc.n	8000ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00f      	b.n	8000ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <SysTick_Config+0x40>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000abe:	210f      	movs	r1, #15
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f7ff ff90 	bl	80009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <SysTick_Config+0x40>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SysTick_Config+0x40>)
 8000ad0:	2207      	movs	r2, #7
 8000ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	e000e010 	.word	0xe000e010

08000ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff2d 	bl	800094c <__NVIC_SetPriorityGrouping>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0c:	f7ff ff42 	bl	8000994 <__NVIC_GetPriorityGrouping>
 8000b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	6978      	ldr	r0, [r7, #20]
 8000b18:	f7ff ff90 	bl	8000a3c <NVIC_EncodePriority>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff5f 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff35 	bl	80009b0 <__NVIC_EnableIRQ>
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffa2 	bl	8000aa0 <SysTick_Config>
 8000b5c:	4603      	mov	r3, r0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b087      	sub	sp, #28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b76:	e16f      	b.n	8000e58 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	fa01 f303 	lsl.w	r3, r1, r3
 8000b84:	4013      	ands	r3, r2
 8000b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	f000 8161 	beq.w	8000e52 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d00b      	beq.n	8000bb0 <HAL_GPIO_Init+0x48>
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d007      	beq.n	8000bb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ba4:	2b11      	cmp	r3, #17
 8000ba6:	d003      	beq.n	8000bb0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	2b12      	cmp	r3, #18
 8000bae:	d130      	bne.n	8000c12 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	2203      	movs	r2, #3
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	68da      	ldr	r2, [r3, #12]
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000be6:	2201      	movs	r2, #1
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	f003 0201 	and.w	r2, r3, #1
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa02 f303 	lsl.w	r3, r2, r3
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	689a      	ldr	r2, [r3, #8]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d003      	beq.n	8000c52 <HAL_GPIO_Init+0xea>
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2b12      	cmp	r3, #18
 8000c50:	d123      	bne.n	8000c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	08da      	lsrs	r2, r3, #3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3208      	adds	r2, #8
 8000c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	220f      	movs	r2, #15
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43db      	mvns	r3, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4013      	ands	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	691a      	ldr	r2, [r3, #16]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	f003 0307 	and.w	r3, r3, #7
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	fa02 f303 	lsl.w	r3, r2, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	08da      	lsrs	r2, r3, #3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3208      	adds	r2, #8
 8000c94:	6939      	ldr	r1, [r7, #16]
 8000c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 0203 	and.w	r2, r3, #3
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f000 80bb 	beq.w	8000e52 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
 8000ce0:	4b64      	ldr	r3, [pc, #400]	; (8000e74 <HAL_GPIO_Init+0x30c>)
 8000ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce4:	4a63      	ldr	r2, [pc, #396]	; (8000e74 <HAL_GPIO_Init+0x30c>)
 8000ce6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cea:	6453      	str	r3, [r2, #68]	; 0x44
 8000cec:	4b61      	ldr	r3, [pc, #388]	; (8000e74 <HAL_GPIO_Init+0x30c>)
 8000cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cf8:	4a5f      	ldr	r2, [pc, #380]	; (8000e78 <HAL_GPIO_Init+0x310>)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	089b      	lsrs	r3, r3, #2
 8000cfe:	3302      	adds	r3, #2
 8000d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	220f      	movs	r2, #15
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	4a57      	ldr	r2, [pc, #348]	; (8000e7c <HAL_GPIO_Init+0x314>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d031      	beq.n	8000d88 <HAL_GPIO_Init+0x220>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a56      	ldr	r2, [pc, #344]	; (8000e80 <HAL_GPIO_Init+0x318>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d02b      	beq.n	8000d84 <HAL_GPIO_Init+0x21c>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a55      	ldr	r2, [pc, #340]	; (8000e84 <HAL_GPIO_Init+0x31c>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d025      	beq.n	8000d80 <HAL_GPIO_Init+0x218>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a54      	ldr	r2, [pc, #336]	; (8000e88 <HAL_GPIO_Init+0x320>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d01f      	beq.n	8000d7c <HAL_GPIO_Init+0x214>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a53      	ldr	r2, [pc, #332]	; (8000e8c <HAL_GPIO_Init+0x324>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d019      	beq.n	8000d78 <HAL_GPIO_Init+0x210>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a52      	ldr	r2, [pc, #328]	; (8000e90 <HAL_GPIO_Init+0x328>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d013      	beq.n	8000d74 <HAL_GPIO_Init+0x20c>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a51      	ldr	r2, [pc, #324]	; (8000e94 <HAL_GPIO_Init+0x32c>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d00d      	beq.n	8000d70 <HAL_GPIO_Init+0x208>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a50      	ldr	r2, [pc, #320]	; (8000e98 <HAL_GPIO_Init+0x330>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d007      	beq.n	8000d6c <HAL_GPIO_Init+0x204>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a4f      	ldr	r2, [pc, #316]	; (8000e9c <HAL_GPIO_Init+0x334>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d101      	bne.n	8000d68 <HAL_GPIO_Init+0x200>
 8000d64:	2308      	movs	r3, #8
 8000d66:	e010      	b.n	8000d8a <HAL_GPIO_Init+0x222>
 8000d68:	2309      	movs	r3, #9
 8000d6a:	e00e      	b.n	8000d8a <HAL_GPIO_Init+0x222>
 8000d6c:	2307      	movs	r3, #7
 8000d6e:	e00c      	b.n	8000d8a <HAL_GPIO_Init+0x222>
 8000d70:	2306      	movs	r3, #6
 8000d72:	e00a      	b.n	8000d8a <HAL_GPIO_Init+0x222>
 8000d74:	2305      	movs	r3, #5
 8000d76:	e008      	b.n	8000d8a <HAL_GPIO_Init+0x222>
 8000d78:	2304      	movs	r3, #4
 8000d7a:	e006      	b.n	8000d8a <HAL_GPIO_Init+0x222>
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	e004      	b.n	8000d8a <HAL_GPIO_Init+0x222>
 8000d80:	2302      	movs	r3, #2
 8000d82:	e002      	b.n	8000d8a <HAL_GPIO_Init+0x222>
 8000d84:	2301      	movs	r3, #1
 8000d86:	e000      	b.n	8000d8a <HAL_GPIO_Init+0x222>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	f002 0203 	and.w	r2, r2, #3
 8000d90:	0092      	lsls	r2, r2, #2
 8000d92:	4093      	lsls	r3, r2
 8000d94:	461a      	mov	r2, r3
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d9c:	4936      	ldr	r1, [pc, #216]	; (8000e78 <HAL_GPIO_Init+0x310>)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	089b      	lsrs	r3, r3, #2
 8000da2:	3302      	adds	r3, #2
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000daa:	4b3d      	ldr	r3, [pc, #244]	; (8000ea0 <HAL_GPIO_Init+0x338>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	4013      	ands	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d003      	beq.n	8000dce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000dce:	4a34      	ldr	r2, [pc, #208]	; (8000ea0 <HAL_GPIO_Init+0x338>)
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dd4:	4b32      	ldr	r3, [pc, #200]	; (8000ea0 <HAL_GPIO_Init+0x338>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	43db      	mvns	r3, r3
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d003      	beq.n	8000df8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000df8:	4a29      	ldr	r2, [pc, #164]	; (8000ea0 <HAL_GPIO_Init+0x338>)
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dfe:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <HAL_GPIO_Init+0x338>)
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	43db      	mvns	r3, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d003      	beq.n	8000e22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e22:	4a1f      	ldr	r2, [pc, #124]	; (8000ea0 <HAL_GPIO_Init+0x338>)
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e28:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <HAL_GPIO_Init+0x338>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	43db      	mvns	r3, r3
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	4013      	ands	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d003      	beq.n	8000e4c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e4c:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <HAL_GPIO_Init+0x338>)
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	3301      	adds	r3, #1
 8000e56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f47f ae88 	bne.w	8000b78 <HAL_GPIO_Init+0x10>
  }
}
 8000e68:	bf00      	nop
 8000e6a:	371c      	adds	r7, #28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40013800 	.word	0x40013800
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	40020400 	.word	0x40020400
 8000e84:	40020800 	.word	0x40020800
 8000e88:	40020c00 	.word	0x40020c00
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40021400 	.word	0x40021400
 8000e94:	40021800 	.word	0x40021800
 8000e98:	40021c00 	.word	0x40021c00
 8000e9c:	40022000 	.word	0x40022000
 8000ea0:	40013c00 	.word	0x40013c00

08000ea4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ea6:	b08f      	sub	sp, #60	; 0x3c
 8000ea8:	af0a      	add	r7, sp, #40	; 0x28
 8000eaa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d101      	bne.n	8000eb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e10f      	b.n	80010d6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d106      	bne.n	8000ed6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f004 ff53 	bl	8005d7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2203      	movs	r2, #3
 8000eda:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d102      	bne.n	8000ef0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f001 ffa9 	bl	8002e4c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	687e      	ldr	r6, [r7, #4]
 8000f02:	466d      	mov	r5, sp
 8000f04:	f106 0410 	add.w	r4, r6, #16
 8000f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f14:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f18:	1d33      	adds	r3, r6, #4
 8000f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f1c:	6838      	ldr	r0, [r7, #0]
 8000f1e:	f001 fe8b 	bl	8002c38 <USB_CoreInit>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d005      	beq.n	8000f34 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e0d0      	b.n	80010d6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 ff96 	bl	8002e6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	e04a      	b.n	8000fdc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f46:	7bfa      	ldrb	r2, [r7, #15]
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	1a9b      	subs	r3, r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	440b      	add	r3, r1
 8000f54:	333d      	adds	r3, #61	; 0x3d
 8000f56:	2201      	movs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f5a:	7bfa      	ldrb	r2, [r7, #15]
 8000f5c:	6879      	ldr	r1, [r7, #4]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	1a9b      	subs	r3, r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	440b      	add	r3, r1
 8000f68:	333c      	adds	r3, #60	; 0x3c
 8000f6a:	7bfa      	ldrb	r2, [r7, #15]
 8000f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000f6e:	7bfa      	ldrb	r2, [r7, #15]
 8000f70:	7bfb      	ldrb	r3, [r7, #15]
 8000f72:	b298      	uxth	r0, r3
 8000f74:	6879      	ldr	r1, [r7, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	1a9b      	subs	r3, r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	440b      	add	r3, r1
 8000f80:	3342      	adds	r3, #66	; 0x42
 8000f82:	4602      	mov	r2, r0
 8000f84:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000f86:	7bfa      	ldrb	r2, [r7, #15]
 8000f88:	6879      	ldr	r1, [r7, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	00db      	lsls	r3, r3, #3
 8000f8e:	1a9b      	subs	r3, r3, r2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	440b      	add	r3, r1
 8000f94:	333f      	adds	r3, #63	; 0x3f
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000f9a:	7bfa      	ldrb	r2, [r7, #15]
 8000f9c:	6879      	ldr	r1, [r7, #4]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	1a9b      	subs	r3, r3, r2
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	3344      	adds	r3, #68	; 0x44
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fae:	7bfa      	ldrb	r2, [r7, #15]
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	1a9b      	subs	r3, r3, r2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	440b      	add	r3, r1
 8000fbc:	3348      	adds	r3, #72	; 0x48
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000fc2:	7bfa      	ldrb	r2, [r7, #15]
 8000fc4:	6879      	ldr	r1, [r7, #4]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	1a9b      	subs	r3, r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	3350      	adds	r3, #80	; 0x50
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
 8000fdc:	7bfa      	ldrb	r2, [r7, #15]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d3af      	bcc.n	8000f46 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	e044      	b.n	8001076 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	1a9b      	subs	r3, r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	4613      	mov	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	1a9b      	subs	r3, r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	440b      	add	r3, r1
 8001010:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001018:	7bfa      	ldrb	r2, [r7, #15]
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	1a9b      	subs	r3, r3, r2
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	440b      	add	r3, r1
 8001026:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	4613      	mov	r3, r2
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	1a9b      	subs	r3, r3, r2
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	440b      	add	r3, r1
 800103c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	4613      	mov	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	440b      	add	r3, r1
 8001052:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	4613      	mov	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	1a9b      	subs	r3, r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	440b      	add	r3, r1
 8001068:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	3301      	adds	r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	429a      	cmp	r2, r3
 800107e:	d3b5      	bcc.n	8000fec <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	687e      	ldr	r6, [r7, #4]
 8001088:	466d      	mov	r5, sp
 800108a:	f106 0410 	add.w	r4, r6, #16
 800108e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001090:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001096:	e894 0003 	ldmia.w	r4, {r0, r1}
 800109a:	e885 0003 	stmia.w	r5, {r0, r1}
 800109e:	1d33      	adds	r3, r6, #4
 80010a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010a2:	6838      	ldr	r0, [r7, #0]
 80010a4:	f001 ff0c 	bl	8002ec0 <USB_DevInit>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d005      	beq.n	80010ba <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2202      	movs	r2, #2
 80010b2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00d      	b.n	80010d6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 ff45 	bl	8003f5e <USB_DevDisconnect>

  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080010de <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d101      	bne.n	80010f4 <HAL_PCD_Start+0x16>
 80010f0:	2302      	movs	r3, #2
 80010f2:	e012      	b.n	800111a <HAL_PCD_Start+0x3c>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f001 fe93 	bl	8002e2c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4618      	mov	r0, r3
 800110c:	f002 ff07 	bl	8003f1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001122:	b590      	push	{r4, r7, lr}
 8001124:	b08d      	sub	sp, #52	; 0x34
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001130:	6a3b      	ldr	r3, [r7, #32]
 8001132:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f002 ffbe 	bl	80040ba <USB_GetMode>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	f040 838f 	bne.w	8001864 <HAL_PCD_IRQHandler+0x742>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f002 ff27 	bl	8003f9e <USB_ReadInterrupts>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8385 	beq.w	8001862 <HAL_PCD_IRQHandler+0x740>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4618      	mov	r0, r3
 800115e:	f002 ff1e 	bl	8003f9e <USB_ReadInterrupts>
 8001162:	4603      	mov	r3, r0
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b02      	cmp	r3, #2
 800116a:	d107      	bne.n	800117c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	695a      	ldr	r2, [r3, #20]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f002 0202 	and.w	r2, r2, #2
 800117a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f002 ff0c 	bl	8003f9e <USB_ReadInterrupts>
 8001186:	4603      	mov	r3, r0
 8001188:	f003 0310 	and.w	r3, r3, #16
 800118c:	2b10      	cmp	r3, #16
 800118e:	d161      	bne.n	8001254 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	699a      	ldr	r2, [r3, #24]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0210 	bic.w	r2, r2, #16
 800119e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	f003 020f 	and.w	r2, r3, #15
 80011ac:	4613      	mov	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	1a9b      	subs	r3, r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	4413      	add	r3, r2
 80011bc:	3304      	adds	r3, #4
 80011be:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	0c5b      	lsrs	r3, r3, #17
 80011c4:	f003 030f 	and.w	r3, r3, #15
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d124      	bne.n	8001216 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d035      	beq.n	8001244 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	091b      	lsrs	r3, r3, #4
 80011e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80011e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011e6:	b29b      	uxth	r3, r3
 80011e8:	461a      	mov	r2, r3
 80011ea:	6a38      	ldr	r0, [r7, #32]
 80011ec:	f002 fd78 	bl	8003ce0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	69bb      	ldr	r3, [r7, #24]
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011fc:	441a      	add	r2, r3
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	699a      	ldr	r2, [r3, #24]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800120e:	441a      	add	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	619a      	str	r2, [r3, #24]
 8001214:	e016      	b.n	8001244 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	0c5b      	lsrs	r3, r3, #17
 800121a:	f003 030f 	and.w	r3, r3, #15
 800121e:	2b06      	cmp	r3, #6
 8001220:	d110      	bne.n	8001244 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001228:	2208      	movs	r2, #8
 800122a:	4619      	mov	r1, r3
 800122c:	6a38      	ldr	r0, [r7, #32]
 800122e:	f002 fd57 	bl	8003ce0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	699a      	ldr	r2, [r3, #24]
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	091b      	lsrs	r3, r3, #4
 800123a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800123e:	441a      	add	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	699a      	ldr	r2, [r3, #24]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f042 0210 	orr.w	r2, r2, #16
 8001252:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f002 fea0 	bl	8003f9e <USB_ReadInterrupts>
 800125e:	4603      	mov	r3, r0
 8001260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001264:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001268:	d16e      	bne.n	8001348 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f002 fea5 	bl	8003fc2 <USB_ReadDevAllOutEpInterrupt>
 8001278:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800127a:	e062      	b.n	8001342 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800127c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d057      	beq.n	8001336 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f002 fec8 	bl	8004026 <USB_ReadDevOutEPInterrupt>
 8001296:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00c      	beq.n	80012bc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	015a      	lsls	r2, r3, #5
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	4413      	add	r3, r2
 80012aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012ae:	461a      	mov	r2, r3
 80012b0:	2301      	movs	r3, #1
 80012b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80012b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 fda2 	bl	8001e00 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d00c      	beq.n	80012e0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	015a      	lsls	r2, r3, #5
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	4413      	add	r3, r2
 80012ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012d2:	461a      	mov	r2, r3
 80012d4:	2308      	movs	r3, #8
 80012d6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80012d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 fe9c 	bl	8002018 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d008      	beq.n	80012fc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	015a      	lsls	r2, r3, #5
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	4413      	add	r3, r2
 80012f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80012f6:	461a      	mov	r2, r3
 80012f8:	2310      	movs	r3, #16
 80012fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	f003 0320 	and.w	r3, r3, #32
 8001302:	2b00      	cmp	r3, #0
 8001304:	d008      	beq.n	8001318 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	015a      	lsls	r2, r3, #5
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	4413      	add	r3, r2
 800130e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001312:	461a      	mov	r2, r3
 8001314:	2320      	movs	r3, #32
 8001316:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d009      	beq.n	8001336 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001324:	015a      	lsls	r2, r3, #5
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	4413      	add	r3, r2
 800132a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800132e:	461a      	mov	r2, r3
 8001330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001334:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	3301      	adds	r3, #1
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800133c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133e:	085b      	lsrs	r3, r3, #1
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001344:	2b00      	cmp	r3, #0
 8001346:	d199      	bne.n	800127c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f002 fe26 	bl	8003f9e <USB_ReadInterrupts>
 8001352:	4603      	mov	r3, r0
 8001354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001358:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800135c:	f040 80c0 	bne.w	80014e0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4618      	mov	r0, r3
 8001366:	f002 fe45 	bl	8003ff4 <USB_ReadDevAllInEpInterrupt>
 800136a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001370:	e0b2      	b.n	80014d8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80a7 	beq.w	80014cc <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f002 fe69 	bl	8004060 <USB_ReadDevInEPInterrupt>
 800138e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	2b00      	cmp	r3, #0
 8001398:	d057      	beq.n	800144a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	f003 030f 	and.w	r3, r3, #15
 80013a0:	2201      	movs	r2, #1
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69f9      	ldr	r1, [r7, #28]
 80013b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80013ba:	4013      	ands	r3, r2
 80013bc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c0:	015a      	lsls	r2, r3, #5
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	4413      	add	r3, r2
 80013c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013ca:	461a      	mov	r2, r3
 80013cc:	2301      	movs	r3, #1
 80013ce:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d132      	bne.n	800143e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013dc:	4613      	mov	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	1a9b      	subs	r3, r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	3348      	adds	r3, #72	; 0x48
 80013e8:	6819      	ldr	r1, [r3, #0]
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ee:	4613      	mov	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	1a9b      	subs	r3, r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4403      	add	r3, r0
 80013f8:	3344      	adds	r3, #68	; 0x44
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4419      	add	r1, r3
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001402:	4613      	mov	r3, r2
 8001404:	00db      	lsls	r3, r3, #3
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4403      	add	r3, r0
 800140c:	3348      	adds	r3, #72	; 0x48
 800140e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	2b00      	cmp	r3, #0
 8001414:	d113      	bne.n	800143e <HAL_PCD_IRQHandler+0x31c>
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	1a9b      	subs	r3, r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	3350      	adds	r3, #80	; 0x50
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d108      	bne.n	800143e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6818      	ldr	r0, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001436:	461a      	mov	r2, r3
 8001438:	2101      	movs	r1, #1
 800143a:	f002 fe6d 	bl	8004118 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	b2db      	uxtb	r3, r3
 8001442:	4619      	mov	r1, r3
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f004 fd1a 	bl	8005e7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f003 0308 	and.w	r3, r3, #8
 8001450:	2b00      	cmp	r3, #0
 8001452:	d008      	beq.n	8001466 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	015a      	lsls	r2, r3, #5
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	4413      	add	r3, r2
 800145c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001460:	461a      	mov	r2, r3
 8001462:	2308      	movs	r3, #8
 8001464:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	015a      	lsls	r2, r3, #5
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	4413      	add	r3, r2
 8001478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800147c:	461a      	mov	r2, r3
 800147e:	2310      	movs	r3, #16
 8001480:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001488:	2b00      	cmp	r3, #0
 800148a:	d008      	beq.n	800149e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	015a      	lsls	r2, r3, #5
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	4413      	add	r3, r2
 8001494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001498:	461a      	mov	r2, r3
 800149a:	2340      	movs	r3, #64	; 0x40
 800149c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d008      	beq.n	80014ba <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	015a      	lsls	r2, r3, #5
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	4413      	add	r3, r2
 80014b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014b4:	461a      	mov	r2, r3
 80014b6:	2302      	movs	r3, #2
 80014b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 fc0c 	bl	8001ce4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	3301      	adds	r3, #1
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d4:	085b      	lsrs	r3, r3, #1
 80014d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f47f af49 	bne.w	8001372 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f002 fd5a 	bl	8003f9e <USB_ReadInterrupts>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014f4:	d114      	bne.n	8001520 <HAL_PCD_IRQHandler+0x3fe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f004 fd2e 	bl	8005f6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800151e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f002 fd3a 	bl	8003f9e <USB_ReadInterrupts>
 800152a:	4603      	mov	r3, r0
 800152c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001530:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001534:	d112      	bne.n	800155c <HAL_PCD_IRQHandler+0x43a>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b01      	cmp	r3, #1
 8001544:	d102      	bne.n	800154c <HAL_PCD_IRQHandler+0x42a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f004 fcea 	bl	8005f20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	695a      	ldr	r2, [r3, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800155a:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f002 fd1c 	bl	8003f9e <USB_ReadInterrupts>
 8001566:	4603      	mov	r3, r0
 8001568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800156c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001570:	f040 80c7 	bne.w	8001702 <HAL_PCD_IRQHandler+0x5e0>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	69fa      	ldr	r2, [r7, #28]
 800157e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001582:	f023 0301 	bic.w	r3, r3, #1
 8001586:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2110      	movs	r1, #16
 800158e:	4618      	mov	r0, r3
 8001590:	f001 fdfa 	bl	8003188 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001598:	e056      	b.n	8001648 <HAL_PCD_IRQHandler+0x526>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800159a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159c:	015a      	lsls	r2, r3, #5
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	4413      	add	r3, r2
 80015a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015a6:	461a      	mov	r2, r3
 80015a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80015ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b0:	015a      	lsls	r2, r3, #5
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015be:	0151      	lsls	r1, r2, #5
 80015c0:	69fa      	ldr	r2, [r7, #28]
 80015c2:	440a      	add	r2, r1
 80015c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015cc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80015ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d0:	015a      	lsls	r2, r3, #5
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	4413      	add	r3, r2
 80015d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015de:	0151      	lsls	r1, r2, #5
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	440a      	add	r2, r1
 80015e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80015e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80015ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f0:	015a      	lsls	r2, r3, #5
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	4413      	add	r3, r2
 80015f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015fa:	461a      	mov	r2, r3
 80015fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001600:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001604:	015a      	lsls	r2, r3, #5
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	4413      	add	r3, r2
 800160a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001612:	0151      	lsls	r1, r2, #5
 8001614:	69fa      	ldr	r2, [r7, #28]
 8001616:	440a      	add	r2, r1
 8001618:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800161c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001620:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001624:	015a      	lsls	r2, r3, #5
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	4413      	add	r3, r2
 800162a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001632:	0151      	lsls	r1, r2, #5
 8001634:	69fa      	ldr	r2, [r7, #28]
 8001636:	440a      	add	r2, r1
 8001638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800163c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001640:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001644:	3301      	adds	r3, #1
 8001646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800164e:	429a      	cmp	r2, r3
 8001650:	d3a3      	bcc.n	800159a <HAL_PCD_IRQHandler+0x478>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001660:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001664:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	2b00      	cmp	r3, #0
 800166c:	d016      	beq.n	800169c <HAL_PCD_IRQHandler+0x57a>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001678:	69fa      	ldr	r2, [r7, #28]
 800167a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800167e:	f043 030b 	orr.w	r3, r3, #11
 8001682:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001694:	f043 030b 	orr.w	r3, r3, #11
 8001698:	6453      	str	r3, [r2, #68]	; 0x44
 800169a:	e015      	b.n	80016c8 <HAL_PCD_IRQHandler+0x5a6>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	69fa      	ldr	r2, [r7, #28]
 80016a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016ae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80016b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	69fa      	ldr	r2, [r7, #28]
 80016be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016c2:	f043 030b 	orr.w	r3, r3, #11
 80016c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	69fa      	ldr	r2, [r7, #28]
 80016d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80016da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80016ec:	461a      	mov	r2, r3
 80016ee:	f002 fd13 	bl	8004118 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f002 fc49 	bl	8003f9e <USB_ReadInterrupts>
 800170c:	4603      	mov	r3, r0
 800170e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001716:	d124      	bne.n	8001762 <HAL_PCD_IRQHandler+0x640>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f002 fcd9 	bl	80040d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f001 fd8a 	bl	8003240 <USB_GetDevSpeed>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681c      	ldr	r4, [r3, #0]
 8001738:	f001 f8f8 	bl	800292c <HAL_RCC_GetHCLKFreq>
 800173c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	4620      	mov	r0, r4
 8001748:	f001 face 	bl	8002ce8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f004 fbbe 	bl	8005ece <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	695a      	ldr	r2, [r3, #20]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001760:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f002 fc19 	bl	8003f9e <USB_ReadInterrupts>
 800176c:	4603      	mov	r3, r0
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	2b08      	cmp	r3, #8
 8001774:	d10a      	bne.n	800178c <HAL_PCD_IRQHandler+0x66a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f004 fb9b 	bl	8005eb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	695a      	ldr	r2, [r3, #20]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f002 0208 	and.w	r2, r2, #8
 800178a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f002 fc04 	bl	8003f9e <USB_ReadInterrupts>
 8001796:	4603      	mov	r3, r0
 8001798:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800179c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017a0:	d10f      	bne.n	80017c2 <HAL_PCD_IRQHandler+0x6a0>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	4619      	mov	r1, r3
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f004 fbfd 	bl	8005fac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80017c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 fbe9 	bl	8003f9e <USB_ReadInterrupts>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017d6:	d10f      	bne.n	80017f8 <HAL_PCD_IRQHandler+0x6d6>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	4619      	mov	r1, r3
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f004 fbd0 	bl	8005f88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	695a      	ldr	r2, [r3, #20]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80017f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f002 fbce 	bl	8003f9e <USB_ReadInterrupts>
 8001802:	4603      	mov	r3, r0
 8001804:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180c:	d10a      	bne.n	8001824 <HAL_PCD_IRQHandler+0x702>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f004 fbde 	bl	8005fd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001822:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f002 fbb8 	bl	8003f9e <USB_ReadInterrupts>
 800182e:	4603      	mov	r3, r0
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b04      	cmp	r3, #4
 8001836:	d115      	bne.n	8001864 <HAL_PCD_IRQHandler+0x742>
    {
      temp = hpcd->Instance->GOTGINT;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2b00      	cmp	r3, #0
 8001848:	d002      	beq.n	8001850 <HAL_PCD_IRQHandler+0x72e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f004 fbce 	bl	8005fec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6859      	ldr	r1, [r3, #4]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	430a      	orrs	r2, r1
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	e000      	b.n	8001864 <HAL_PCD_IRQHandler+0x742>
      return;
 8001862:	bf00      	nop
    }
  }
}
 8001864:	3734      	adds	r7, #52	; 0x34
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}

0800186a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	460b      	mov	r3, r1
 8001874:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800187c:	2b01      	cmp	r3, #1
 800187e:	d101      	bne.n	8001884 <HAL_PCD_SetAddress+0x1a>
 8001880:	2302      	movs	r3, #2
 8001882:	e013      	b.n	80018ac <HAL_PCD_SetAddress+0x42>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	78fa      	ldrb	r2, [r7, #3]
 8001890:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	4611      	mov	r1, r2
 800189c:	4618      	mov	r0, r3
 800189e:	f002 fb19 	bl	8003ed4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	4608      	mov	r0, r1
 80018be:	4611      	mov	r1, r2
 80018c0:	461a      	mov	r2, r3
 80018c2:	4603      	mov	r3, r0
 80018c4:	70fb      	strb	r3, [r7, #3]
 80018c6:	460b      	mov	r3, r1
 80018c8:	803b      	strh	r3, [r7, #0]
 80018ca:	4613      	mov	r3, r2
 80018cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	da0f      	bge.n	80018fa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018da:	78fb      	ldrb	r3, [r7, #3]
 80018dc:	f003 020f 	and.w	r2, r3, #15
 80018e0:	4613      	mov	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	1a9b      	subs	r3, r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	3338      	adds	r3, #56	; 0x38
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	3304      	adds	r3, #4
 80018f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2201      	movs	r2, #1
 80018f6:	705a      	strb	r2, [r3, #1]
 80018f8:	e00f      	b.n	800191a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	f003 020f 	and.w	r2, r3, #15
 8001900:	4613      	mov	r3, r2
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	4413      	add	r3, r2
 8001910:	3304      	adds	r3, #4
 8001912:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800191a:	78fb      	ldrb	r3, [r7, #3]
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	b2da      	uxtb	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001926:	883a      	ldrh	r2, [r7, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	78ba      	ldrb	r2, [r7, #2]
 8001930:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	785b      	ldrb	r3, [r3, #1]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d004      	beq.n	8001944 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	b29a      	uxth	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001944:	78bb      	ldrb	r3, [r7, #2]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d102      	bne.n	8001950 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_PCD_EP_Open+0xaa>
 800195a:	2302      	movs	r3, #2
 800195c:	e00e      	b.n	800197c <HAL_PCD_EP_Open+0xc8>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68f9      	ldr	r1, [r7, #12]
 800196c:	4618      	mov	r0, r3
 800196e:	f001 fc8b 	bl	8003288 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800197a:	7afb      	ldrb	r3, [r7, #11]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001994:	2b00      	cmp	r3, #0
 8001996:	da0f      	bge.n	80019b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	f003 020f 	and.w	r2, r3, #15
 800199e:	4613      	mov	r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	1a9b      	subs	r3, r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	3338      	adds	r3, #56	; 0x38
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	4413      	add	r3, r2
 80019ac:	3304      	adds	r3, #4
 80019ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2201      	movs	r2, #1
 80019b4:	705a      	strb	r2, [r3, #1]
 80019b6:	e00f      	b.n	80019d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	f003 020f 	and.w	r2, r3, #15
 80019be:	4613      	mov	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	1a9b      	subs	r3, r3, r2
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	4413      	add	r3, r2
 80019ce:	3304      	adds	r3, #4
 80019d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80019d8:	78fb      	ldrb	r3, [r7, #3]
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_PCD_EP_Close+0x6e>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e00e      	b.n	8001a10 <HAL_PCD_EP_Close+0x8c>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f001 fcc7 	bl	8003394 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	60f8      	str	r0, [r7, #12]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	603b      	str	r3, [r7, #0]
 8001a24:	460b      	mov	r3, r1
 8001a26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a28:	7afb      	ldrb	r3, [r7, #11]
 8001a2a:	f003 020f 	and.w	r2, r3, #15
 8001a2e:	4613      	mov	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	1a9b      	subs	r3, r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3304      	adds	r3, #4
 8001a40:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2200      	movs	r2, #0
 8001a52:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	2200      	movs	r2, #0
 8001a58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a5a:	7afb      	ldrb	r3, [r7, #11]
 8001a5c:	f003 030f 	and.w	r3, r3, #15
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d102      	bne.n	8001a74 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a74:	7afb      	ldrb	r3, [r7, #11]
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d109      	bne.n	8001a92 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6818      	ldr	r0, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	6979      	ldr	r1, [r7, #20]
 8001a8c:	f001 ffa2 	bl	80039d4 <USB_EP0StartXfer>
 8001a90:	e008      	b.n	8001aa4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6818      	ldr	r0, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	6979      	ldr	r1, [r7, #20]
 8001aa0:	f001 fd54 	bl	800354c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	f003 020f 	and.w	r2, r3, #15
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	440b      	add	r3, r1
 8001acc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001ad0:	681b      	ldr	r3, [r3, #0]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aec:	7afb      	ldrb	r3, [r7, #11]
 8001aee:	f003 020f 	and.w	r2, r3, #15
 8001af2:	4613      	mov	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	3338      	adds	r3, #56	; 0x38
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	4413      	add	r3, r2
 8001b00:	3304      	adds	r3, #4
 8001b02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	2200      	movs	r2, #0
 8001b14:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b1c:	7afb      	ldrb	r3, [r7, #11]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d102      	bne.n	8001b36 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b36:	7afb      	ldrb	r3, [r7, #11]
 8001b38:	f003 030f 	and.w	r3, r3, #15
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d109      	bne.n	8001b54 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	6979      	ldr	r1, [r7, #20]
 8001b4e:	f001 ff41 	bl	80039d4 <USB_EP0StartXfer>
 8001b52:	e008      	b.n	8001b66 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	6979      	ldr	r1, [r7, #20]
 8001b62:	f001 fcf3 	bl	800354c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	f003 020f 	and.w	r2, r3, #15
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d901      	bls.n	8001b8e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e050      	b.n	8001c30 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	da0f      	bge.n	8001bb6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b96:	78fb      	ldrb	r3, [r7, #3]
 8001b98:	f003 020f 	and.w	r2, r3, #15
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	3338      	adds	r3, #56	; 0x38
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	3304      	adds	r3, #4
 8001bac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	705a      	strb	r2, [r3, #1]
 8001bb4:	e00d      	b.n	8001bd2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bb6:	78fa      	ldrb	r2, [r7, #3]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	1a9b      	subs	r3, r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	3304      	adds	r3, #4
 8001bca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bd8:	78fb      	ldrb	r3, [r7, #3]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d101      	bne.n	8001bf2 <HAL_PCD_EP_SetStall+0x82>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e01e      	b.n	8001c30 <HAL_PCD_EP_SetStall+0xc0>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68f9      	ldr	r1, [r7, #12]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f002 f895 	bl	8003d30 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c06:	78fb      	ldrb	r3, [r7, #3]
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10a      	bne.n	8001c26 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	b2d9      	uxtb	r1, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c20:	461a      	mov	r2, r3
 8001c22:	f002 fa79 	bl	8004118 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	f003 020f 	and.w	r2, r3, #15
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d901      	bls.n	8001c56 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e042      	b.n	8001cdc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	da0f      	bge.n	8001c7e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	f003 020f 	and.w	r2, r3, #15
 8001c64:	4613      	mov	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	1a9b      	subs	r3, r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	3338      	adds	r3, #56	; 0x38
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	4413      	add	r3, r2
 8001c72:	3304      	adds	r3, #4
 8001c74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	705a      	strb	r2, [r3, #1]
 8001c7c:	e00f      	b.n	8001c9e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	f003 020f 	and.w	r2, r3, #15
 8001c84:	4613      	mov	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	1a9b      	subs	r3, r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	4413      	add	r3, r2
 8001c94:	3304      	adds	r3, #4
 8001c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ca4:	78fb      	ldrb	r3, [r7, #3]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d101      	bne.n	8001cbe <HAL_PCD_EP_ClrStall+0x86>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	e00e      	b.n	8001cdc <HAL_PCD_EP_ClrStall+0xa4>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68f9      	ldr	r1, [r7, #12]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f002 f89c 	bl	8003e0a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af02      	add	r7, sp, #8
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	3338      	adds	r3, #56	; 0x38
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	4413      	add	r3, r2
 8001d08:	3304      	adds	r3, #4
 8001d0a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	699a      	ldr	r2, [r3, #24]
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d901      	bls.n	8001d1c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e06c      	b.n	8001df6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	695a      	ldr	r2, [r3, #20]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	69fa      	ldr	r2, [r7, #28]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d902      	bls.n	8001d38 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	3303      	adds	r3, #3
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d40:	e02b      	b.n	8001d9a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	695a      	ldr	r2, [r3, #20]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	69fa      	ldr	r2, [r7, #28]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d902      	bls.n	8001d5e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3303      	adds	r3, #3
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	68d9      	ldr	r1, [r3, #12]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	6978      	ldr	r0, [r7, #20]
 8001d7e:	f001 ff7b 	bl	8003c78 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	441a      	add	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	699a      	ldr	r2, [r3, #24]
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	441a      	add	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	015a      	lsls	r2, r3, #5
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d809      	bhi.n	8001dc4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	699a      	ldr	r2, [r3, #24]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d203      	bcs.n	8001dc4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1be      	bne.n	8001d42 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	695a      	ldr	r2, [r3, #20]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d811      	bhi.n	8001df4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	6939      	ldr	r1, [r7, #16]
 8001dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001df0:	4013      	ands	r3, r2
 8001df2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3720      	adds	r7, #32
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	333c      	adds	r3, #60	; 0x3c
 8001e18:	3304      	adds	r3, #4
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	015a      	lsls	r2, r3, #5
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4413      	add	r3, r2
 8001e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	f040 80a0 	bne.w	8001f78 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d015      	beq.n	8001e6e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4a72      	ldr	r2, [pc, #456]	; (8002010 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	f240 80dd 	bls.w	8002006 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 80d7 	beq.w	8002006 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	015a      	lsls	r2, r3, #5
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	4413      	add	r3, r2
 8001e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e64:	461a      	mov	r2, r3
 8001e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e6a:	6093      	str	r3, [r2, #8]
 8001e6c:	e0cb      	b.n	8002006 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f003 0320 	and.w	r3, r3, #32
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d009      	beq.n	8001e8c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e84:	461a      	mov	r2, r3
 8001e86:	2320      	movs	r3, #32
 8001e88:	6093      	str	r3, [r2, #8]
 8001e8a:	e0bc      	b.n	8002006 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f040 80b7 	bne.w	8002006 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4a5d      	ldr	r2, [pc, #372]	; (8002010 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d90f      	bls.n	8001ec0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00a      	beq.n	8001ec0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	015a      	lsls	r2, r3, #5
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ebc:	6093      	str	r3, [r2, #8]
 8001ebe:	e0a2      	b.n	8002006 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ed2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	0159      	lsls	r1, r3, #5
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	440b      	add	r3, r1
 8001edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001ee6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	4613      	mov	r3, r2
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4403      	add	r3, r0
 8001ef6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001efa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	4613      	mov	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f0e:	6819      	ldr	r1, [r3, #0]
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4403      	add	r3, r0
 8001f1e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4419      	add	r1, r3
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	1a9b      	subs	r3, r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4403      	add	r3, r0
 8001f34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f38:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d114      	bne.n	8001f6a <PCD_EP_OutXfrComplete_int+0x16a>
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d108      	bne.n	8001f6a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f62:	461a      	mov	r2, r3
 8001f64:	2101      	movs	r1, #1
 8001f66:	f002 f8d7 	bl	8004118 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	4619      	mov	r1, r3
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f003 ff69 	bl	8005e48 <HAL_PCD_DataOutStageCallback>
 8001f76:	e046      	b.n	8002006 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4a26      	ldr	r2, [pc, #152]	; (8002014 <PCD_EP_OutXfrComplete_int+0x214>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d124      	bne.n	8001fca <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00a      	beq.n	8001fa0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f96:	461a      	mov	r2, r3
 8001f98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f9c:	6093      	str	r3, [r2, #8]
 8001f9e:	e032      	b.n	8002006 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d008      	beq.n	8001fbc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	015a      	lsls	r2, r3, #5
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2320      	movs	r3, #32
 8001fba:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f003 ff40 	bl	8005e48 <HAL_PCD_DataOutStageCallback>
 8001fc8:	e01d      	b.n	8002006 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d114      	bne.n	8001ffa <PCD_EP_OutXfrComplete_int+0x1fa>
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d108      	bne.n	8001ffa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	f002 f88f 	bl	8004118 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	4619      	mov	r1, r3
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f003 ff21 	bl	8005e48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	4f54300a 	.word	0x4f54300a
 8002014:	4f54310a 	.word	0x4f54310a

08002018 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	333c      	adds	r3, #60	; 0x3c
 8002030:	3304      	adds	r3, #4
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	015a      	lsls	r2, r3, #5
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4413      	add	r3, r2
 800203e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4a15      	ldr	r2, [pc, #84]	; (80020a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d90e      	bls.n	800206c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002054:	2b00      	cmp	r3, #0
 8002056:	d009      	beq.n	800206c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	015a      	lsls	r2, r3, #5
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4413      	add	r3, r2
 8002060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002064:	461a      	mov	r2, r3
 8002066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800206a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f003 fed9 	bl	8005e24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d90c      	bls.n	8002094 <PCD_EP_OutSetupPacket_int+0x7c>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d108      	bne.n	8002094 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800208c:	461a      	mov	r2, r3
 800208e:	2101      	movs	r1, #1
 8002090:	f002 f842 	bl	8004118 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	4f54300a 	.word	0x4f54300a

080020a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	70fb      	strb	r3, [r7, #3]
 80020b0:	4613      	mov	r3, r2
 80020b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d107      	bne.n	80020d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80020c2:	883b      	ldrh	r3, [r7, #0]
 80020c4:	0419      	lsls	r1, r3, #16
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	629a      	str	r2, [r3, #40]	; 0x28
 80020d0:	e028      	b.n	8002124 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	4413      	add	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020e0:	2300      	movs	r3, #0
 80020e2:	73fb      	strb	r3, [r7, #15]
 80020e4:	e00d      	b.n	8002102 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	3340      	adds	r3, #64	; 0x40
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	0c1b      	lsrs	r3, r3, #16
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	4413      	add	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	3301      	adds	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	7bfa      	ldrb	r2, [r7, #15]
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	3b01      	subs	r3, #1
 8002108:	429a      	cmp	r2, r3
 800210a:	d3ec      	bcc.n	80020e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800210c:	883b      	ldrh	r3, [r7, #0]
 800210e:	0418      	lsls	r0, r3, #16
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6819      	ldr	r1, [r3, #0]
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	3b01      	subs	r3, #1
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	4302      	orrs	r2, r0
 800211c:	3340      	adds	r3, #64	; 0x40
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	887a      	ldrh	r2, [r7, #2]
 8002142:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	; 0x28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d101      	bne.n	8002162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e237      	b.n	80025d2 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	d050      	beq.n	8002210 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800216e:	4ba3      	ldr	r3, [pc, #652]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b04      	cmp	r3, #4
 8002178:	d00c      	beq.n	8002194 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800217a:	4ba0      	ldr	r3, [pc, #640]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002182:	2b08      	cmp	r3, #8
 8002184:	d112      	bne.n	80021ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002186:	4b9d      	ldr	r3, [pc, #628]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002192:	d10b      	bne.n	80021ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002194:	4b99      	ldr	r3, [pc, #612]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d036      	beq.n	800220e <HAL_RCC_OscConfig+0xbe>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d132      	bne.n	800220e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e212      	b.n	80025d2 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	4b93      	ldr	r3, [pc, #588]	; (8002400 <HAL_RCC_OscConfig+0x2b0>)
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d013      	beq.n	80021e6 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021be:	f7fe fb99 	bl	80008f4 <HAL_GetTick>
 80021c2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021c6:	f7fe fb95 	bl	80008f4 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b64      	cmp	r3, #100	; 0x64
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e1fc      	b.n	80025d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d8:	4b88      	ldr	r3, [pc, #544]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0f0      	beq.n	80021c6 <HAL_RCC_OscConfig+0x76>
 80021e4:	e014      	b.n	8002210 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e6:	f7fe fb85 	bl	80008f4 <HAL_GetTick>
 80021ea:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ee:	f7fe fb81 	bl	80008f4 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b64      	cmp	r3, #100	; 0x64
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e1e8      	b.n	80025d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002200:	4b7e      	ldr	r3, [pc, #504]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f0      	bne.n	80021ee <HAL_RCC_OscConfig+0x9e>
 800220c:	e000      	b.n	8002210 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d077      	beq.n	800230c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800221c:	4b77      	ldr	r3, [pc, #476]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030c 	and.w	r3, r3, #12
 8002224:	2b00      	cmp	r3, #0
 8002226:	d00b      	beq.n	8002240 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002228:	4b74      	ldr	r3, [pc, #464]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002230:	2b08      	cmp	r3, #8
 8002232:	d126      	bne.n	8002282 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002234:	4b71      	ldr	r3, [pc, #452]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d120      	bne.n	8002282 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002240:	4b6e      	ldr	r3, [pc, #440]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_OscConfig+0x108>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d001      	beq.n	8002258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e1bc      	b.n	80025d2 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002258:	4b68      	ldr	r3, [pc, #416]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	21f8      	movs	r1, #248	; 0xf8
 8002266:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	69b9      	ldr	r1, [r7, #24]
 800226a:	fa91 f1a1 	rbit	r1, r1
 800226e:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002270:	6979      	ldr	r1, [r7, #20]
 8002272:	fab1 f181 	clz	r1, r1
 8002276:	b2c9      	uxtb	r1, r1
 8002278:	408b      	lsls	r3, r1
 800227a:	4960      	ldr	r1, [pc, #384]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 800227c:	4313      	orrs	r3, r2
 800227e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002280:	e044      	b.n	800230c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d02a      	beq.n	80022e0 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800228a:	4b5e      	ldr	r3, [pc, #376]	; (8002404 <HAL_RCC_OscConfig+0x2b4>)
 800228c:	2201      	movs	r2, #1
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7fe fb30 	bl	80008f4 <HAL_GetTick>
 8002294:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002298:	f7fe fb2c 	bl	80008f4 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e193      	b.n	80025d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022aa:	4b54      	ldr	r3, [pc, #336]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b6:	4b51      	ldr	r3, [pc, #324]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	21f8      	movs	r1, #248	; 0xf8
 80022c4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	6939      	ldr	r1, [r7, #16]
 80022c8:	fa91 f1a1 	rbit	r1, r1
 80022cc:	60f9      	str	r1, [r7, #12]
  return result;
 80022ce:	68f9      	ldr	r1, [r7, #12]
 80022d0:	fab1 f181 	clz	r1, r1
 80022d4:	b2c9      	uxtb	r1, r1
 80022d6:	408b      	lsls	r3, r1
 80022d8:	4948      	ldr	r1, [pc, #288]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]
 80022de:	e015      	b.n	800230c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e0:	4b48      	ldr	r3, [pc, #288]	; (8002404 <HAL_RCC_OscConfig+0x2b4>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7fe fb05 	bl	80008f4 <HAL_GetTick>
 80022ea:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ee:	f7fe fb01 	bl	80008f4 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e168      	b.n	80025d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002300:	4b3e      	ldr	r3, [pc, #248]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f0      	bne.n	80022ee <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d030      	beq.n	800237a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d016      	beq.n	800234e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002320:	4b39      	ldr	r3, [pc, #228]	; (8002408 <HAL_RCC_OscConfig+0x2b8>)
 8002322:	2201      	movs	r2, #1
 8002324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002326:	f7fe fae5 	bl	80008f4 <HAL_GetTick>
 800232a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800232e:	f7fe fae1 	bl	80008f4 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	6a3b      	ldr	r3, [r7, #32]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e148      	b.n	80025d2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002340:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x1de>
 800234c:	e015      	b.n	800237a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234e:	4b2e      	ldr	r3, [pc, #184]	; (8002408 <HAL_RCC_OscConfig+0x2b8>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002354:	f7fe face 	bl	80008f4 <HAL_GetTick>
 8002358:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800235c:	f7fe faca 	bl	80008f4 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e131      	b.n	80025d2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800236e:	4b23      	ldr	r3, [pc, #140]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b00      	cmp	r3, #0
 8002384:	f000 8088 	beq.w	8002498 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002388:	2300      	movs	r3, #0
 800238a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d110      	bne.n	80023bc <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	4b17      	ldr	r3, [pc, #92]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	4a16      	ldr	r2, [pc, #88]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a8:	6413      	str	r3, [r2, #64]	; 0x40
 80023aa:	4b14      	ldr	r3, [pc, #80]	; (80023fc <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <HAL_RCC_OscConfig+0x2bc>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a12      	ldr	r2, [pc, #72]	; (800240c <HAL_RCC_OscConfig+0x2bc>)
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	4b10      	ldr	r3, [pc, #64]	; (800240c <HAL_RCC_OscConfig+0x2bc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d123      	bne.n	800241c <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023d4:	4b0d      	ldr	r3, [pc, #52]	; (800240c <HAL_RCC_OscConfig+0x2bc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0c      	ldr	r2, [pc, #48]	; (800240c <HAL_RCC_OscConfig+0x2bc>)
 80023da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e0:	f7fe fa88 	bl	80008f4 <HAL_GetTick>
 80023e4:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e6:	e013      	b.n	8002410 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e8:	f7fe fa84 	bl	80008f4 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d90c      	bls.n	8002410 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e0eb      	b.n	80025d2 <HAL_RCC_OscConfig+0x482>
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40023802 	.word	0x40023802
 8002404:	42470000 	.word	0x42470000
 8002408:	42470e80 	.word	0x42470e80
 800240c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002410:	4b72      	ldr	r3, [pc, #456]	; (80025dc <HAL_RCC_OscConfig+0x48c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0e5      	beq.n	80023e8 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	4b6f      	ldr	r3, [pc, #444]	; (80025e0 <HAL_RCC_OscConfig+0x490>)
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d015      	beq.n	800245a <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242e:	f7fe fa61 	bl	80008f4 <HAL_GetTick>
 8002432:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002434:	e00a      	b.n	800244c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002436:	f7fe fa5d 	bl	80008f4 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0c2      	b.n	80025d2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244c:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x494>)
 800244e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0ee      	beq.n	8002436 <HAL_RCC_OscConfig+0x2e6>
 8002458:	e014      	b.n	8002484 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245a:	f7fe fa4b 	bl	80008f4 <HAL_GetTick>
 800245e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	e00a      	b.n	8002478 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7fe fa47 	bl	80008f4 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0ac      	b.n	80025d2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002478:	4b5a      	ldr	r3, [pc, #360]	; (80025e4 <HAL_RCC_OscConfig+0x494>)
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1ee      	bne.n	8002462 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002488:	2b01      	cmp	r3, #1
 800248a:	d105      	bne.n	8002498 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800248c:	4b55      	ldr	r3, [pc, #340]	; (80025e4 <HAL_RCC_OscConfig+0x494>)
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	4a54      	ldr	r2, [pc, #336]	; (80025e4 <HAL_RCC_OscConfig+0x494>)
 8002492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002496:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 8097 	beq.w	80025d0 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024a2:	4b50      	ldr	r3, [pc, #320]	; (80025e4 <HAL_RCC_OscConfig+0x494>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d061      	beq.n	8002572 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d146      	bne.n	8002544 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b6:	4b4c      	ldr	r3, [pc, #304]	; (80025e8 <HAL_RCC_OscConfig+0x498>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7fe fa1a 	bl	80008f4 <HAL_GetTick>
 80024c0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c4:	f7fe fa16 	bl	80008f4 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	; 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e07d      	b.n	80025d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d6:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x494>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e2:	4b40      	ldr	r3, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x494>)
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	4b41      	ldr	r3, [pc, #260]	; (80025ec <HAL_RCC_OscConfig+0x49c>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	69d1      	ldr	r1, [r2, #28]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6a12      	ldr	r2, [r2, #32]
 80024f2:	4311      	orrs	r1, r2
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024f8:	0192      	lsls	r2, r2, #6
 80024fa:	4311      	orrs	r1, r2
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002500:	0612      	lsls	r2, r2, #24
 8002502:	4311      	orrs	r1, r2
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002508:	0852      	lsrs	r2, r2, #1
 800250a:	3a01      	subs	r2, #1
 800250c:	0412      	lsls	r2, r2, #16
 800250e:	430a      	orrs	r2, r1
 8002510:	4934      	ldr	r1, [pc, #208]	; (80025e4 <HAL_RCC_OscConfig+0x494>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002516:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <HAL_RCC_OscConfig+0x498>)
 8002518:	2201      	movs	r2, #1
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fe f9ea 	bl	80008f4 <HAL_GetTick>
 8002520:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002524:	f7fe f9e6 	bl	80008f4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	; 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e04d      	b.n	80025d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002536:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <HAL_RCC_OscConfig+0x494>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x3d4>
 8002542:	e045      	b.n	80025d0 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002544:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <HAL_RCC_OscConfig+0x498>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254a:	f7fe f9d3 	bl	80008f4 <HAL_GetTick>
 800254e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002552:	f7fe f9cf 	bl	80008f4 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b64      	cmp	r3, #100	; 0x64
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e036      	b.n	80025d2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002564:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <HAL_RCC_OscConfig+0x494>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f0      	bne.n	8002552 <HAL_RCC_OscConfig+0x402>
 8002570:	e02e      	b.n	80025d0 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d101      	bne.n	800257e <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e029      	b.n	80025d2 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800257e:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <HAL_RCC_OscConfig+0x494>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	429a      	cmp	r2, r3
 8002590:	d11c      	bne.n	80025cc <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d115      	bne.n	80025cc <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	099b      	lsrs	r3, r3, #6
 80025a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d10d      	bne.n	80025cc <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d106      	bne.n	80025cc <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d001      	beq.n	80025d0 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3728      	adds	r7, #40	; 0x28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40007000 	.word	0x40007000
 80025e0:	40023870 	.word	0x40023870
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470060 	.word	0x42470060
 80025ec:	f0bc8000 	.word	0xf0bc8000

080025f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0d2      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b6b      	ldr	r3, [pc, #428]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d90c      	bls.n	800262c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b68      	ldr	r3, [pc, #416]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b66      	ldr	r3, [pc, #408]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0be      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002644:	4b5c      	ldr	r3, [pc, #368]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a5b      	ldr	r2, [pc, #364]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 800264a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800264e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800265c:	4b56      	ldr	r3, [pc, #344]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	4a55      	ldr	r2, [pc, #340]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002662:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002666:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002668:	4b53      	ldr	r3, [pc, #332]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	4950      	ldr	r1, [pc, #320]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d040      	beq.n	8002708 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	4b4a      	ldr	r3, [pc, #296]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d115      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e085      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a6:	4b44      	ldr	r3, [pc, #272]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e079      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b6:	4b40      	ldr	r3, [pc, #256]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e071      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c6:	4b3c      	ldr	r3, [pc, #240]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f023 0203 	bic.w	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4939      	ldr	r1, [pc, #228]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d8:	f7fe f90c 	bl	80008f4 <HAL_GetTick>
 80026dc:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e0:	f7fe f908 	bl	80008f4 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e059      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	4b30      	ldr	r3, [pc, #192]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 020c 	and.w	r2, r3, #12
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	429a      	cmp	r2, r3
 8002706:	d1eb      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002708:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d20c      	bcs.n	8002730 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e03c      	b.n	80027aa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800273c:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	491b      	ldr	r1, [pc, #108]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 800274a:	4313      	orrs	r3, r2
 800274c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800275a:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	4913      	ldr	r1, [pc, #76]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800276e:	f000 f82b 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8002772:	4601      	mov	r1, r0
 8002774:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800277c:	22f0      	movs	r2, #240	; 0xf0
 800277e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	fa92 f2a2 	rbit	r2, r2
 8002786:	60fa      	str	r2, [r7, #12]
  return result;
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	fab2 f282 	clz	r2, r2
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	40d3      	lsrs	r3, r2
 8002792:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <HAL_RCC_ClockConfig+0x1cc>)
 8002794:	5cd3      	ldrb	r3, [r2, r3]
 8002796:	fa21 f303 	lsr.w	r3, r1, r3
 800279a:	4a09      	ldr	r2, [pc, #36]	; (80027c0 <HAL_RCC_ClockConfig+0x1d0>)
 800279c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800279e:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <HAL_RCC_ClockConfig+0x1d4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe f864 	bl	8000870 <HAL_InitTick>

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40023c00 	.word	0x40023c00
 80027b8:	40023800 	.word	0x40023800
 80027bc:	080065cc 	.word	0x080065cc
 80027c0:	20000000 	.word	0x20000000
 80027c4:	20000004 	.word	0x20000004

080027c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	2300      	movs	r3, #0
 80027d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027de:	4b50      	ldr	r3, [pc, #320]	; (8002920 <HAL_RCC_GetSysClockFreq+0x158>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d007      	beq.n	80027fa <HAL_RCC_GetSysClockFreq+0x32>
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d008      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x38>
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f040 808d 	bne.w	800290e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f4:	4b4b      	ldr	r3, [pc, #300]	; (8002924 <HAL_RCC_GetSysClockFreq+0x15c>)
 80027f6:	60bb      	str	r3, [r7, #8]
       break;
 80027f8:	e08c      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027fa:	4b4b      	ldr	r3, [pc, #300]	; (8002928 <HAL_RCC_GetSysClockFreq+0x160>)
 80027fc:	60bb      	str	r3, [r7, #8]
      break;
 80027fe:	e089      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002800:	4b47      	ldr	r3, [pc, #284]	; (8002920 <HAL_RCC_GetSysClockFreq+0x158>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002808:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800280a:	4b45      	ldr	r3, [pc, #276]	; (8002920 <HAL_RCC_GetSysClockFreq+0x158>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d023      	beq.n	800285e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002816:	4b42      	ldr	r3, [pc, #264]	; (8002920 <HAL_RCC_GetSysClockFreq+0x158>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	099b      	lsrs	r3, r3, #6
 800281c:	f04f 0400 	mov.w	r4, #0
 8002820:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	ea03 0501 	and.w	r5, r3, r1
 800282c:	ea04 0602 	and.w	r6, r4, r2
 8002830:	4a3d      	ldr	r2, [pc, #244]	; (8002928 <HAL_RCC_GetSysClockFreq+0x160>)
 8002832:	fb02 f106 	mul.w	r1, r2, r6
 8002836:	2200      	movs	r2, #0
 8002838:	fb02 f205 	mul.w	r2, r2, r5
 800283c:	440a      	add	r2, r1
 800283e:	493a      	ldr	r1, [pc, #232]	; (8002928 <HAL_RCC_GetSysClockFreq+0x160>)
 8002840:	fba5 0101 	umull	r0, r1, r5, r1
 8002844:	1853      	adds	r3, r2, r1
 8002846:	4619      	mov	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f04f 0400 	mov.w	r4, #0
 800284e:	461a      	mov	r2, r3
 8002850:	4623      	mov	r3, r4
 8002852:	f7fd fcb7 	bl	80001c4 <__aeabi_uldivmod>
 8002856:	4603      	mov	r3, r0
 8002858:	460c      	mov	r4, r1
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	e049      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800285e:	4b30      	ldr	r3, [pc, #192]	; (8002920 <HAL_RCC_GetSysClockFreq+0x158>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	099b      	lsrs	r3, r3, #6
 8002864:	f04f 0400 	mov.w	r4, #0
 8002868:	f240 11ff 	movw	r1, #511	; 0x1ff
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	ea03 0501 	and.w	r5, r3, r1
 8002874:	ea04 0602 	and.w	r6, r4, r2
 8002878:	4629      	mov	r1, r5
 800287a:	4632      	mov	r2, r6
 800287c:	f04f 0300 	mov.w	r3, #0
 8002880:	f04f 0400 	mov.w	r4, #0
 8002884:	0154      	lsls	r4, r2, #5
 8002886:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800288a:	014b      	lsls	r3, r1, #5
 800288c:	4619      	mov	r1, r3
 800288e:	4622      	mov	r2, r4
 8002890:	1b49      	subs	r1, r1, r5
 8002892:	eb62 0206 	sbc.w	r2, r2, r6
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	f04f 0400 	mov.w	r4, #0
 800289e:	0194      	lsls	r4, r2, #6
 80028a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80028a4:	018b      	lsls	r3, r1, #6
 80028a6:	1a5b      	subs	r3, r3, r1
 80028a8:	eb64 0402 	sbc.w	r4, r4, r2
 80028ac:	f04f 0100 	mov.w	r1, #0
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	00e2      	lsls	r2, r4, #3
 80028b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80028ba:	00d9      	lsls	r1, r3, #3
 80028bc:	460b      	mov	r3, r1
 80028be:	4614      	mov	r4, r2
 80028c0:	195b      	adds	r3, r3, r5
 80028c2:	eb44 0406 	adc.w	r4, r4, r6
 80028c6:	f04f 0100 	mov.w	r1, #0
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	02a2      	lsls	r2, r4, #10
 80028d0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80028d4:	0299      	lsls	r1, r3, #10
 80028d6:	460b      	mov	r3, r1
 80028d8:	4614      	mov	r4, r2
 80028da:	4618      	mov	r0, r3
 80028dc:	4621      	mov	r1, r4
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f04f 0400 	mov.w	r4, #0
 80028e4:	461a      	mov	r2, r3
 80028e6:	4623      	mov	r3, r4
 80028e8:	f7fd fc6c 	bl	80001c4 <__aeabi_uldivmod>
 80028ec:	4603      	mov	r3, r0
 80028ee:	460c      	mov	r4, r1
 80028f0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_RCC_GetSysClockFreq+0x158>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	0c1b      	lsrs	r3, r3, #16
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	3301      	adds	r3, #1
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	fbb2 f3f3 	udiv	r3, r2, r3
 800290a:	60bb      	str	r3, [r7, #8]
      break;
 800290c:	e002      	b.n	8002914 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002910:	60bb      	str	r3, [r7, #8]
      break;
 8002912:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002914:	68bb      	ldr	r3, [r7, #8]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800
 8002924:	00f42400 	.word	0x00f42400
 8002928:	017d7840 	.word	0x017d7840

0800292c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002930:	4b02      	ldr	r3, [pc, #8]	; (800293c <HAL_RCC_GetHCLKFreq+0x10>)
 8002932:	681b      	ldr	r3, [r3, #0]
}
 8002934:	4618      	mov	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	20000000 	.word	0x20000000

08002940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002946:	f7ff fff1 	bl	800292c <HAL_RCC_GetHCLKFreq>
 800294a:	4601      	mov	r1, r0
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002954:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002958:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	fa92 f2a2 	rbit	r2, r2
 8002960:	603a      	str	r2, [r7, #0]
  return result;
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	fab2 f282 	clz	r2, r2
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	40d3      	lsrs	r3, r2
 800296c:	4a04      	ldr	r2, [pc, #16]	; (8002980 <HAL_RCC_GetPCLK1Freq+0x40>)
 800296e:	5cd3      	ldrb	r3, [r2, r3]
 8002970:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40023800 	.word	0x40023800
 8002980:	080065dc 	.word	0x080065dc

08002984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800298a:	f7ff ffcf 	bl	800292c <HAL_RCC_GetHCLKFreq>
 800298e:	4601      	mov	r1, r0
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002998:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800299c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	fa92 f2a2 	rbit	r2, r2
 80029a4:	603a      	str	r2, [r7, #0]
  return result;
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	fab2 f282 	clz	r2, r2
 80029ac:	b2d2      	uxtb	r2, r2
 80029ae:	40d3      	lsrs	r3, r2
 80029b0:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80029b2:	5cd3      	ldrb	r3, [r2, r3]
 80029b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	080065dc 	.word	0x080065dc

080029c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e03f      	b.n	8002a5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fd fe3a 	bl	8000668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2224      	movs	r2, #36	; 0x24
 80029f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f829 	bl	8002a64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2220      	movs	r2, #32
 8002a54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689a      	ldr	r2, [r3, #8]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002aa4:	f023 030c 	bic.w	r3, r3, #12
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	430b      	orrs	r3, r1
 8002ab0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699a      	ldr	r2, [r3, #24]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a57      	ldr	r2, [pc, #348]	; (8002c2c <UART_SetConfig+0x1c8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d004      	beq.n	8002adc <UART_SetConfig+0x78>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a56      	ldr	r2, [pc, #344]	; (8002c30 <UART_SetConfig+0x1cc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d103      	bne.n	8002ae4 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002adc:	f7ff ff52 	bl	8002984 <HAL_RCC_GetPCLK2Freq>
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	e002      	b.n	8002aea <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ae4:	f7ff ff2c 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8002ae8:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002af2:	d14c      	bne.n	8002b8e <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	009a      	lsls	r2, r3, #2
 8002afe:	441a      	add	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0a:	4a4a      	ldr	r2, [pc, #296]	; (8002c34 <UART_SetConfig+0x1d0>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	0119      	lsls	r1, r3, #4
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009a      	lsls	r2, r3, #2
 8002b1e:	441a      	add	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b2a:	4b42      	ldr	r3, [pc, #264]	; (8002c34 <UART_SetConfig+0x1d0>)
 8002b2c:	fba3 0302 	umull	r0, r3, r3, r2
 8002b30:	095b      	lsrs	r3, r3, #5
 8002b32:	2064      	movs	r0, #100	; 0x64
 8002b34:	fb00 f303 	mul.w	r3, r0, r3
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	3332      	adds	r3, #50	; 0x32
 8002b3e:	4a3d      	ldr	r2, [pc, #244]	; (8002c34 <UART_SetConfig+0x1d0>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	095b      	lsrs	r3, r3, #5
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b4c:	4419      	add	r1, r3
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	009a      	lsls	r2, r3, #2
 8002b58:	441a      	add	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b64:	4b33      	ldr	r3, [pc, #204]	; (8002c34 <UART_SetConfig+0x1d0>)
 8002b66:	fba3 0302 	umull	r0, r3, r3, r2
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	2064      	movs	r0, #100	; 0x64
 8002b6e:	fb00 f303 	mul.w	r3, r0, r3
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	3332      	adds	r3, #50	; 0x32
 8002b78:	4a2e      	ldr	r2, [pc, #184]	; (8002c34 <UART_SetConfig+0x1d0>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	f003 0207 	and.w	r2, r3, #7
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	440a      	add	r2, r1
 8002b8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b8c:	e04a      	b.n	8002c24 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	009a      	lsls	r2, r3, #2
 8002b98:	441a      	add	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba4:	4a23      	ldr	r2, [pc, #140]	; (8002c34 <UART_SetConfig+0x1d0>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	0119      	lsls	r1, r3, #4
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009a      	lsls	r2, r3, #2
 8002bb8:	441a      	add	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <UART_SetConfig+0x1d0>)
 8002bc6:	fba3 0302 	umull	r0, r3, r3, r2
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	2064      	movs	r0, #100	; 0x64
 8002bce:	fb00 f303 	mul.w	r3, r0, r3
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	3332      	adds	r3, #50	; 0x32
 8002bd8:	4a16      	ldr	r2, [pc, #88]	; (8002c34 <UART_SetConfig+0x1d0>)
 8002bda:	fba2 2303 	umull	r2, r3, r2, r3
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be4:	4419      	add	r1, r3
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	009a      	lsls	r2, r3, #2
 8002bf0:	441a      	add	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bfc:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <UART_SetConfig+0x1d0>)
 8002bfe:	fba3 0302 	umull	r0, r3, r3, r2
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	2064      	movs	r0, #100	; 0x64
 8002c06:	fb00 f303 	mul.w	r3, r0, r3
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	3332      	adds	r3, #50	; 0x32
 8002c10:	4a08      	ldr	r2, [pc, #32]	; (8002c34 <UART_SetConfig+0x1d0>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	f003 020f 	and.w	r2, r3, #15
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	440a      	add	r2, r1
 8002c22:	609a      	str	r2, [r3, #8]
}
 8002c24:	bf00      	nop
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40011000 	.word	0x40011000
 8002c30:	40011400 	.word	0x40011400
 8002c34:	51eb851f 	.word	0x51eb851f

08002c38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c38:	b084      	sub	sp, #16
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	f107 001c 	add.w	r0, r7, #28
 8002c46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d122      	bne.n	8002c96 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d105      	bne.n	8002c8a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f001 faa0 	bl	80041d0 <USB_CoreReset>
 8002c90:	4603      	mov	r3, r0
 8002c92:	73fb      	strb	r3, [r7, #15]
 8002c94:	e010      	b.n	8002cb8 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f001 fa94 	bl	80041d0 <USB_CoreReset>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d10b      	bne.n	8002cd6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f043 0206 	orr.w	r2, r3, #6
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f043 0220 	orr.w	r2, r3, #32
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ce2:	b004      	add	sp, #16
 8002ce4:	4770      	bx	lr
	...

08002ce8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b087      	sub	sp, #28
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d165      	bne.n	8002dc8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4a41      	ldr	r2, [pc, #260]	; (8002e04 <USB_SetTurnaroundTime+0x11c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d906      	bls.n	8002d12 <USB_SetTurnaroundTime+0x2a>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4a40      	ldr	r2, [pc, #256]	; (8002e08 <USB_SetTurnaroundTime+0x120>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d802      	bhi.n	8002d12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002d0c:	230f      	movs	r3, #15
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	e062      	b.n	8002dd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	4a3c      	ldr	r2, [pc, #240]	; (8002e08 <USB_SetTurnaroundTime+0x120>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d906      	bls.n	8002d28 <USB_SetTurnaroundTime+0x40>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	4a3b      	ldr	r2, [pc, #236]	; (8002e0c <USB_SetTurnaroundTime+0x124>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d802      	bhi.n	8002d28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002d22:	230e      	movs	r3, #14
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	e057      	b.n	8002dd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4a38      	ldr	r2, [pc, #224]	; (8002e0c <USB_SetTurnaroundTime+0x124>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d906      	bls.n	8002d3e <USB_SetTurnaroundTime+0x56>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	4a37      	ldr	r2, [pc, #220]	; (8002e10 <USB_SetTurnaroundTime+0x128>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d802      	bhi.n	8002d3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002d38:	230d      	movs	r3, #13
 8002d3a:	617b      	str	r3, [r7, #20]
 8002d3c:	e04c      	b.n	8002dd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	4a33      	ldr	r2, [pc, #204]	; (8002e10 <USB_SetTurnaroundTime+0x128>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d906      	bls.n	8002d54 <USB_SetTurnaroundTime+0x6c>
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4a32      	ldr	r2, [pc, #200]	; (8002e14 <USB_SetTurnaroundTime+0x12c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d802      	bhi.n	8002d54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002d4e:	230c      	movs	r3, #12
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	e041      	b.n	8002dd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4a2f      	ldr	r2, [pc, #188]	; (8002e14 <USB_SetTurnaroundTime+0x12c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d906      	bls.n	8002d6a <USB_SetTurnaroundTime+0x82>
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4a2e      	ldr	r2, [pc, #184]	; (8002e18 <USB_SetTurnaroundTime+0x130>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d802      	bhi.n	8002d6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002d64:	230b      	movs	r3, #11
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	e036      	b.n	8002dd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	4a2a      	ldr	r2, [pc, #168]	; (8002e18 <USB_SetTurnaroundTime+0x130>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d906      	bls.n	8002d80 <USB_SetTurnaroundTime+0x98>
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	4a29      	ldr	r2, [pc, #164]	; (8002e1c <USB_SetTurnaroundTime+0x134>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d802      	bhi.n	8002d80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002d7a:	230a      	movs	r3, #10
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	e02b      	b.n	8002dd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	4a26      	ldr	r2, [pc, #152]	; (8002e1c <USB_SetTurnaroundTime+0x134>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d906      	bls.n	8002d96 <USB_SetTurnaroundTime+0xae>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4a25      	ldr	r2, [pc, #148]	; (8002e20 <USB_SetTurnaroundTime+0x138>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d802      	bhi.n	8002d96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002d90:	2309      	movs	r3, #9
 8002d92:	617b      	str	r3, [r7, #20]
 8002d94:	e020      	b.n	8002dd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	4a21      	ldr	r2, [pc, #132]	; (8002e20 <USB_SetTurnaroundTime+0x138>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d906      	bls.n	8002dac <USB_SetTurnaroundTime+0xc4>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4a20      	ldr	r2, [pc, #128]	; (8002e24 <USB_SetTurnaroundTime+0x13c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d802      	bhi.n	8002dac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002da6:	2308      	movs	r3, #8
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	e015      	b.n	8002dd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <USB_SetTurnaroundTime+0x13c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d906      	bls.n	8002dc2 <USB_SetTurnaroundTime+0xda>
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4a1c      	ldr	r2, [pc, #112]	; (8002e28 <USB_SetTurnaroundTime+0x140>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d802      	bhi.n	8002dc2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002dbc:	2307      	movs	r3, #7
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	e00a      	b.n	8002dd8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002dc2:	2306      	movs	r3, #6
 8002dc4:	617b      	str	r3, [r7, #20]
 8002dc6:	e007      	b.n	8002dd8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d102      	bne.n	8002dd4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002dce:	2309      	movs	r3, #9
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	e001      	b.n	8002dd8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002dd4:	2309      	movs	r3, #9
 8002dd6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	029b      	lsls	r3, r3, #10
 8002dec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002df0:	431a      	orrs	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	371c      	adds	r7, #28
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bc80      	pop	{r7}
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	00d8acbf 	.word	0x00d8acbf
 8002e08:	00e4e1bf 	.word	0x00e4e1bf
 8002e0c:	00f423ff 	.word	0x00f423ff
 8002e10:	0106737f 	.word	0x0106737f
 8002e14:	011a499f 	.word	0x011a499f
 8002e18:	01312cff 	.word	0x01312cff
 8002e1c:	014ca43f 	.word	0x014ca43f
 8002e20:	016e35ff 	.word	0x016e35ff
 8002e24:	01a6ab1f 	.word	0x01a6ab1f
 8002e28:	01e847ff 	.word	0x01e847ff

08002e2c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f043 0201 	orr.w	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f023 0201 	bic.w	r2, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d106      	bne.n	8002e98 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	e00b      	b.n	8002eb0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	e001      	b.n	8002eb0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e003      	b.n	8002eb8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002eb0:	2032      	movs	r0, #50	; 0x32
 8002eb2:	f7fd fd29 	bl	8000908 <HAL_Delay>

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3708      	adds	r7, #8
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b086      	sub	sp, #24
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	e009      	b.n	8002ef4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	3340      	adds	r3, #64	; 0x40
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	2200      	movs	r2, #0
 8002eec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	613b      	str	r3, [r7, #16]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b0e      	cmp	r3, #14
 8002ef8:	d9f2      	bls.n	8002ee0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d11c      	bne.n	8002f3a <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f0e:	f043 0302 	orr.w	r3, r3, #2
 8002f12:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	639a      	str	r2, [r3, #56]	; 0x38
 8002f38:	e00b      	b.n	8002f52 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f58:	461a      	mov	r2, r3
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f64:	4619      	mov	r1, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	680b      	ldr	r3, [r1, #0]
 8002f70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d10c      	bne.n	8002f92 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d104      	bne.n	8002f88 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f7e:	2100      	movs	r1, #0
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f945 	bl	8003210 <USB_SetDevSpeed>
 8002f86:	e008      	b.n	8002f9a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f88:	2101      	movs	r1, #1
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f940 	bl	8003210 <USB_SetDevSpeed>
 8002f90:	e003      	b.n	8002f9a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f92:	2103      	movs	r1, #3
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f93b 	bl	8003210 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f9a:	2110      	movs	r1, #16
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f8f3 	bl	8003188 <USB_FlushTxFifo>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f90f 	bl	80031d0 <USB_FlushRxFifo>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fce:	461a      	mov	r2, r3
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	e043      	b.n	800306e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	015a      	lsls	r2, r3, #5
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ffc:	d118      	bne.n	8003030 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4413      	add	r3, r2
 800300c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003010:	461a      	mov	r2, r3
 8003012:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003016:	6013      	str	r3, [r2, #0]
 8003018:	e013      	b.n	8003042 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003026:	461a      	mov	r2, r3
 8003028:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	e008      	b.n	8003042 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800303c:	461a      	mov	r2, r3
 800303e:	2300      	movs	r3, #0
 8003040:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4413      	add	r3, r2
 800304a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800304e:	461a      	mov	r2, r3
 8003050:	2300      	movs	r3, #0
 8003052:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003060:	461a      	mov	r2, r3
 8003062:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003066:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	3301      	adds	r3, #1
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	429a      	cmp	r2, r3
 8003074:	d3b7      	bcc.n	8002fe6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	e043      	b.n	8003104 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4413      	add	r3, r2
 8003084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800308e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003092:	d118      	bne.n	80030c6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	015a      	lsls	r2, r3, #5
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a6:	461a      	mov	r2, r3
 80030a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	e013      	b.n	80030d8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030bc:	461a      	mov	r2, r3
 80030be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030c2:	6013      	str	r3, [r2, #0]
 80030c4:	e008      	b.n	80030d8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	015a      	lsls	r2, r3, #5
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4413      	add	r3, r2
 80030ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d2:	461a      	mov	r2, r3
 80030d4:	2300      	movs	r3, #0
 80030d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e4:	461a      	mov	r2, r3
 80030e6:	2300      	movs	r3, #0
 80030e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f6:	461a      	mov	r2, r3
 80030f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	3301      	adds	r3, #1
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	429a      	cmp	r2, r3
 800310a:	d3b7      	bcc.n	800307c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	68fa      	ldr	r2, [r7, #12]
 8003116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800311e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800312c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f043 0210 	orr.w	r2, r3, #16
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <USB_DevInit+0x2c4>)
 8003146:	4313      	orrs	r3, r2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800314c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d005      	beq.n	800315e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f043 0208 	orr.w	r2, r3, #8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800315e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003160:	2b01      	cmp	r3, #1
 8003162:	d107      	bne.n	8003174 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800316c:	f043 0304 	orr.w	r3, r3, #4
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003174:	7dfb      	ldrb	r3, [r7, #23]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003180:	b004      	add	sp, #16
 8003182:	4770      	bx	lr
 8003184:	803c3800 	.word	0x803c3800

08003188 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	019b      	lsls	r3, r3, #6
 800319a:	f043 0220 	orr.w	r2, r3, #32
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3301      	adds	r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4a08      	ldr	r2, [pc, #32]	; (80031cc <USB_FlushTxFifo+0x44>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d901      	bls.n	80031b4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e006      	b.n	80031c2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d0f0      	beq.n	80031a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bc80      	pop	{r7}
 80031ca:	4770      	bx	lr
 80031cc:	00030d40 	.word	0x00030d40

080031d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2210      	movs	r2, #16
 80031e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	3301      	adds	r3, #1
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4a08      	ldr	r2, [pc, #32]	; (800320c <USB_FlushRxFifo+0x3c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e006      	b.n	8003202 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b10      	cmp	r3, #16
 80031fe:	d0f0      	beq.n	80031e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr
 800320c:	00030d40 	.word	0x00030d40

08003210 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	68f9      	ldr	r1, [r7, #12]
 800322c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003230:	4313      	orrs	r3, r2
 8003232:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3714      	adds	r7, #20
 800323a:	46bd      	mov	sp, r7
 800323c:	bc80      	pop	{r7}
 800323e:	4770      	bx	lr

08003240 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003240:	b480      	push	{r7}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 0306 	and.w	r3, r3, #6
 8003258:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003260:	2300      	movs	r3, #0
 8003262:	75fb      	strb	r3, [r7, #23]
 8003264:	e00a      	b.n	800327c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d002      	beq.n	8003272 <USB_GetDevSpeed+0x32>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2b06      	cmp	r3, #6
 8003270:	d102      	bne.n	8003278 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003272:	2302      	movs	r3, #2
 8003274:	75fb      	strb	r3, [r7, #23]
 8003276:	e001      	b.n	800327c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003278:	230f      	movs	r3, #15
 800327a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800327c:	7dfb      	ldrb	r3, [r7, #23]
}
 800327e:	4618      	mov	r0, r3
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr

08003288 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	785b      	ldrb	r3, [r3, #1]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d13a      	bne.n	800331a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	2101      	movs	r1, #1
 80032b6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	68f9      	ldr	r1, [r7, #12]
 80032be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80032c2:	4313      	orrs	r3, r2
 80032c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d155      	bne.n	8003388 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	78db      	ldrb	r3, [r3, #3]
 80032f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80032f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	059b      	lsls	r3, r3, #22
 80032fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003300:	4313      	orrs	r3, r2
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	0151      	lsls	r1, r2, #5
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	440a      	add	r2, r1
 800330a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800330e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	e036      	b.n	8003388 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003320:	69da      	ldr	r2, [r3, #28]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	2101      	movs	r1, #1
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	041b      	lsls	r3, r3, #16
 8003332:	68f9      	ldr	r1, [r7, #12]
 8003334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003338:	4313      	orrs	r3, r2
 800333a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	015a      	lsls	r2, r3, #5
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4413      	add	r3, r2
 8003344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d11a      	bne.n	8003388 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4413      	add	r3, r2
 800335a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	78db      	ldrb	r3, [r3, #3]
 800336c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800336e:	430b      	orrs	r3, r1
 8003370:	4313      	orrs	r3, r2
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	0151      	lsls	r1, r2, #5
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	440a      	add	r2, r1
 800337a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800337e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003386:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr

08003394 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	785b      	ldrb	r3, [r3, #1]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d161      	bne.n	8003474 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	015a      	lsls	r2, r3, #5
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4413      	add	r3, r2
 80033b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033c6:	d11f      	bne.n	8003408 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	0151      	lsls	r1, r2, #5
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	440a      	add	r2, r1
 80033de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	0151      	lsls	r1, r2, #5
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	440a      	add	r2, r1
 80033fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003402:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003406:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800340e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	2101      	movs	r1, #1
 800341a:	fa01 f303 	lsl.w	r3, r1, r3
 800341e:	b29b      	uxth	r3, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	68f9      	ldr	r1, [r7, #12]
 8003424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003428:	4013      	ands	r3, r2
 800342a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	2101      	movs	r1, #1
 800343e:	fa01 f303 	lsl.w	r3, r1, r3
 8003442:	b29b      	uxth	r3, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	68f9      	ldr	r1, [r7, #12]
 8003448:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800344c:	4013      	ands	r3, r2
 800344e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4413      	add	r3, r2
 8003458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	0159      	lsls	r1, r3, #5
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	440b      	add	r3, r1
 8003466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800346a:	4619      	mov	r1, r3
 800346c:	4b35      	ldr	r3, [pc, #212]	; (8003544 <USB_DeactivateEndpoint+0x1b0>)
 800346e:	4013      	ands	r3, r2
 8003470:	600b      	str	r3, [r1, #0]
 8003472:	e060      	b.n	8003536 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	015a      	lsls	r2, r3, #5
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4413      	add	r3, r2
 800347c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800348a:	d11f      	bne.n	80034cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	0151      	lsls	r1, r2, #5
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	440a      	add	r2, r1
 80034a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	0151      	lsls	r1, r2, #5
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	440a      	add	r2, r1
 80034c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	2101      	movs	r1, #1
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	041b      	lsls	r3, r3, #16
 80034e4:	43db      	mvns	r3, r3
 80034e6:	68f9      	ldr	r1, [r7, #12]
 80034e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034ec:	4013      	ands	r3, r2
 80034ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	f003 030f 	and.w	r3, r3, #15
 8003500:	2101      	movs	r1, #1
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	041b      	lsls	r3, r3, #16
 8003508:	43db      	mvns	r3, r3
 800350a:	68f9      	ldr	r1, [r7, #12]
 800350c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003510:	4013      	ands	r3, r2
 8003512:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4413      	add	r3, r2
 800351c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	0159      	lsls	r1, r3, #5
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	440b      	add	r3, r1
 800352a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352e:	4619      	mov	r1, r3
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <USB_DeactivateEndpoint+0x1b4>)
 8003532:	4013      	ands	r3, r2
 8003534:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	ec337800 	.word	0xec337800
 8003548:	eff37800 	.word	0xeff37800

0800354c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	4613      	mov	r3, r2
 8003558:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	785b      	ldrb	r3, [r3, #1]
 8003568:	2b01      	cmp	r3, #1
 800356a:	f040 815c 	bne.w	8003826 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d132      	bne.n	80035dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	0151      	lsls	r1, r2, #5
 8003588:	69fa      	ldr	r2, [r7, #28]
 800358a:	440a      	add	r2, r1
 800358c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003590:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003594:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003598:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	0151      	lsls	r1, r2, #5
 80035ac:	69fa      	ldr	r2, [r7, #28]
 80035ae:	440a      	add	r2, r1
 80035b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	0151      	lsls	r1, r2, #5
 80035cc:	69fa      	ldr	r2, [r7, #28]
 80035ce:	440a      	add	r2, r1
 80035d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035d4:	0cdb      	lsrs	r3, r3, #19
 80035d6:	04db      	lsls	r3, r3, #19
 80035d8:	6113      	str	r3, [r2, #16]
 80035da:	e074      	b.n	80036c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	0151      	lsls	r1, r2, #5
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	440a      	add	r2, r1
 80035f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035f6:	0cdb      	lsrs	r3, r3, #19
 80035f8:	04db      	lsls	r3, r3, #19
 80035fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	0151      	lsls	r1, r2, #5
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	440a      	add	r2, r1
 8003612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003616:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800361a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800361e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362c:	691a      	ldr	r2, [r3, #16]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	6959      	ldr	r1, [r3, #20]
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	440b      	add	r3, r1
 8003638:	1e59      	subs	r1, r3, #1
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003642:	04d9      	lsls	r1, r3, #19
 8003644:	4b9d      	ldr	r3, [pc, #628]	; (80038bc <USB_EPStartXfer+0x370>)
 8003646:	400b      	ands	r3, r1
 8003648:	69b9      	ldr	r1, [r7, #24]
 800364a:	0148      	lsls	r0, r1, #5
 800364c:	69f9      	ldr	r1, [r7, #28]
 800364e:	4401      	add	r1, r0
 8003650:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003654:	4313      	orrs	r3, r2
 8003656:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003664:	691a      	ldr	r2, [r3, #16]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800366e:	69b9      	ldr	r1, [r7, #24]
 8003670:	0148      	lsls	r0, r1, #5
 8003672:	69f9      	ldr	r1, [r7, #28]
 8003674:	4401      	add	r1, r0
 8003676:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800367a:	4313      	orrs	r3, r2
 800367c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	78db      	ldrb	r3, [r3, #3]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d11f      	bne.n	80036c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	015a      	lsls	r2, r3, #5
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	4413      	add	r3, r2
 800368e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	0151      	lsls	r1, r2, #5
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	440a      	add	r2, r1
 800369c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80036a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	0151      	lsls	r1, r2, #5
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	440a      	add	r2, r1
 80036bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d14b      	bne.n	8003764 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d009      	beq.n	80036e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e0:	461a      	mov	r2, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	78db      	ldrb	r3, [r3, #3]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d128      	bne.n	8003742 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d110      	bne.n	8003722 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	4413      	add	r3, r2
 8003708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	0151      	lsls	r1, r2, #5
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	440a      	add	r2, r1
 8003716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800371a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	e00f      	b.n	8003742 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	015a      	lsls	r2, r3, #5
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	4413      	add	r3, r2
 800372a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	0151      	lsls	r1, r2, #5
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	440a      	add	r2, r1
 8003738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800373c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003740:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	015a      	lsls	r2, r3, #5
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	4413      	add	r3, r2
 800374a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	0151      	lsls	r1, r2, #5
 8003754:	69fa      	ldr	r2, [r7, #28]
 8003756:	440a      	add	r2, r1
 8003758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800375c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003760:	6013      	str	r3, [r2, #0]
 8003762:	e12f      	b.n	80039c4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	0151      	lsls	r1, r2, #5
 8003776:	69fa      	ldr	r2, [r7, #28]
 8003778:	440a      	add	r2, r1
 800377a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800377e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003782:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	78db      	ldrb	r3, [r3, #3]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d015      	beq.n	80037b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	695b      	ldr	r3, [r3, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8117 	beq.w	80039c4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800379c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	2101      	movs	r1, #1
 80037a8:	fa01 f303 	lsl.w	r3, r1, r3
 80037ac:	69f9      	ldr	r1, [r7, #28]
 80037ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037b2:	4313      	orrs	r3, r2
 80037b4:	634b      	str	r3, [r1, #52]	; 0x34
 80037b6:	e105      	b.n	80039c4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d110      	bne.n	80037ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	0151      	lsls	r1, r2, #5
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	440a      	add	r2, r1
 80037de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	e00f      	b.n	800380a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	0151      	lsls	r1, r2, #5
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	440a      	add	r2, r1
 8003800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003808:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	68d9      	ldr	r1, [r3, #12]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	781a      	ldrb	r2, [r3, #0]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	b298      	uxth	r0, r3
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	4603      	mov	r3, r0
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fa2a 	bl	8003c78 <USB_WritePacket>
 8003824:	e0ce      	b.n	80039c4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	015a      	lsls	r2, r3, #5
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	4413      	add	r3, r2
 800382e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	0151      	lsls	r1, r2, #5
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	440a      	add	r2, r1
 800383c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003840:	0cdb      	lsrs	r3, r3, #19
 8003842:	04db      	lsls	r3, r3, #19
 8003844:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	4413      	add	r3, r2
 800384e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	0151      	lsls	r1, r2, #5
 8003858:	69fa      	ldr	r2, [r7, #28]
 800385a:	440a      	add	r2, r1
 800385c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003860:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003864:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003868:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d126      	bne.n	80038c0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003888:	69b9      	ldr	r1, [r7, #24]
 800388a:	0148      	lsls	r0, r1, #5
 800388c:	69f9      	ldr	r1, [r7, #28]
 800388e:	4401      	add	r1, r0
 8003890:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003894:	4313      	orrs	r3, r2
 8003896:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	0151      	lsls	r1, r2, #5
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	440a      	add	r2, r1
 80038ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80038b6:	6113      	str	r3, [r2, #16]
 80038b8:	e036      	b.n	8003928 <USB_EPStartXfer+0x3dc>
 80038ba:	bf00      	nop
 80038bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4413      	add	r3, r2
 80038ca:	1e5a      	subs	r2, r3, #1
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	8afb      	ldrh	r3, [r7, #22]
 80038e6:	04d9      	lsls	r1, r3, #19
 80038e8:	4b39      	ldr	r3, [pc, #228]	; (80039d0 <USB_EPStartXfer+0x484>)
 80038ea:	400b      	ands	r3, r1
 80038ec:	69b9      	ldr	r1, [r7, #24]
 80038ee:	0148      	lsls	r0, r1, #5
 80038f0:	69f9      	ldr	r1, [r7, #28]
 80038f2:	4401      	add	r1, r0
 80038f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80038f8:	4313      	orrs	r3, r2
 80038fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	4413      	add	r3, r2
 8003904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	8af9      	ldrh	r1, [r7, #22]
 8003910:	fb01 f303 	mul.w	r3, r1, r3
 8003914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003918:	69b9      	ldr	r1, [r7, #24]
 800391a:	0148      	lsls	r0, r1, #5
 800391c:	69f9      	ldr	r1, [r7, #28]
 800391e:	4401      	add	r1, r0
 8003920:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003924:	4313      	orrs	r3, r2
 8003926:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d10d      	bne.n	800394a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	68d9      	ldr	r1, [r3, #12]
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003946:	460a      	mov	r2, r1
 8003948:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	78db      	ldrb	r3, [r3, #3]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d128      	bne.n	80039a4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395e:	2b00      	cmp	r3, #0
 8003960:	d110      	bne.n	8003984 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	0151      	lsls	r1, r2, #5
 8003974:	69fa      	ldr	r2, [r7, #28]
 8003976:	440a      	add	r2, r1
 8003978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800397c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e00f      	b.n	80039a4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	0151      	lsls	r1, r2, #5
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	440a      	add	r2, r1
 800399a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800399e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	0151      	lsls	r1, r2, #5
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	440a      	add	r2, r1
 80039ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	1ff80000 	.word	0x1ff80000

080039d4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	4613      	mov	r3, r2
 80039e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	785b      	ldrb	r3, [r3, #1]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	f040 80cd 	bne.w	8003b90 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d132      	bne.n	8003a64 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	0151      	lsls	r1, r2, #5
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	440a      	add	r2, r1
 8003a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	0151      	lsls	r1, r2, #5
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	440a      	add	r2, r1
 8003a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	0151      	lsls	r1, r2, #5
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	440a      	add	r2, r1
 8003a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a5c:	0cdb      	lsrs	r3, r3, #19
 8003a5e:	04db      	lsls	r3, r3, #19
 8003a60:	6113      	str	r3, [r2, #16]
 8003a62:	e04e      	b.n	8003b02 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	0151      	lsls	r1, r2, #5
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	440a      	add	r2, r1
 8003a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a7e:	0cdb      	lsrs	r3, r3, #19
 8003a80:	04db      	lsls	r3, r3, #19
 8003a82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	0151      	lsls	r1, r2, #5
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	440a      	add	r2, r1
 8003a9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003aa2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003aa6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d903      	bls.n	8003abc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	0151      	lsls	r1, r2, #5
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	440a      	add	r2, r1
 8003ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ad6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ada:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae8:	691a      	ldr	r2, [r3, #16]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af2:	6939      	ldr	r1, [r7, #16]
 8003af4:	0148      	lsls	r0, r1, #5
 8003af6:	6979      	ldr	r1, [r7, #20]
 8003af8:	4401      	add	r1, r0
 8003afa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003afe:	4313      	orrs	r3, r2
 8003b00:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d11e      	bne.n	8003b46 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d009      	beq.n	8003b24 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	0151      	lsls	r1, r2, #5
 8003b36:	697a      	ldr	r2, [r7, #20]
 8003b38:	440a      	add	r2, r1
 8003b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	e092      	b.n	8003c6c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	0151      	lsls	r1, r2, #5
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	440a      	add	r2, r1
 8003b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b64:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d07e      	beq.n	8003c6c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	2101      	movs	r1, #1
 8003b80:	fa01 f303 	lsl.w	r3, r1, r3
 8003b84:	6979      	ldr	r1, [r7, #20]
 8003b86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	634b      	str	r3, [r1, #52]	; 0x34
 8003b8e:	e06d      	b.n	8003c6c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	0151      	lsls	r1, r2, #5
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	440a      	add	r2, r1
 8003ba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003baa:	0cdb      	lsrs	r3, r3, #19
 8003bac:	04db      	lsls	r3, r3, #19
 8003bae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	0151      	lsls	r1, r2, #5
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	440a      	add	r2, r1
 8003bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bd2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	689a      	ldr	r2, [r3, #8]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	0151      	lsls	r1, r2, #5
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	440a      	add	r2, r1
 8003bfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bfe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c1a:	6939      	ldr	r1, [r7, #16]
 8003c1c:	0148      	lsls	r0, r1, #5
 8003c1e:	6979      	ldr	r1, [r7, #20]
 8003c20:	4401      	add	r1, r0
 8003c22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c26:	4313      	orrs	r3, r2
 8003c28:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d10d      	bne.n	8003c4c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d009      	beq.n	8003c4c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	68d9      	ldr	r1, [r3, #12]
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c48:	460a      	mov	r2, r1
 8003c4a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	0151      	lsls	r1, r2, #5
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	440a      	add	r2, r1
 8003c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bc80      	pop	{r7}
 8003c76:	4770      	bx	lr

08003c78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b089      	sub	sp, #36	; 0x24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	4611      	mov	r1, r2
 8003c84:	461a      	mov	r2, r3
 8003c86:	460b      	mov	r3, r1
 8003c88:	71fb      	strb	r3, [r7, #7]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003c96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d11a      	bne.n	8003cd4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003c9e:	88bb      	ldrh	r3, [r7, #4]
 8003ca0:	3303      	adds	r3, #3
 8003ca2:	089b      	lsrs	r3, r3, #2
 8003ca4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	e00f      	b.n	8003ccc <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	031a      	lsls	r2, r3, #12
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cb8:	461a      	mov	r2, r3
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	61bb      	str	r3, [r7, #24]
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d3eb      	bcc.n	8003cac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3724      	adds	r7, #36	; 0x24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b089      	sub	sp, #36	; 0x24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	4613      	mov	r3, r2
 8003cec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003cf6:	88fb      	ldrh	r3, [r7, #6]
 8003cf8:	3303      	adds	r3, #3
 8003cfa:	089b      	lsrs	r3, r3, #2
 8003cfc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	e00b      	b.n	8003d1c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	601a      	str	r2, [r3, #0]
    pDest++;
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	3304      	adds	r3, #4
 8003d14:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d3ef      	bcc.n	8003d04 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003d24:	69fb      	ldr	r3, [r7, #28]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3724      	adds	r7, #36	; 0x24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	785b      	ldrb	r3, [r3, #1]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d12c      	bne.n	8003da6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	db12      	blt.n	8003d84 <USB_EPSetStall+0x54>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00f      	beq.n	8003d84 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68ba      	ldr	r2, [r7, #8]
 8003d74:	0151      	lsls	r1, r2, #5
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	440a      	add	r2, r1
 8003d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d7e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003d82:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	0151      	lsls	r1, r2, #5
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	440a      	add	r2, r1
 8003d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003da2:	6013      	str	r3, [r2, #0]
 8003da4:	e02b      	b.n	8003dfe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	db12      	blt.n	8003dde <USB_EPSetStall+0xae>
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00f      	beq.n	8003dde <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68ba      	ldr	r2, [r7, #8]
 8003dce:	0151      	lsls	r1, r2, #5
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	440a      	add	r2, r1
 8003dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ddc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	015a      	lsls	r2, r3, #5
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4413      	add	r3, r2
 8003de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	0151      	lsls	r1, r2, #5
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	440a      	add	r2, r1
 8003df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003df8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dfc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3714      	adds	r7, #20
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bc80      	pop	{r7}
 8003e08:	4770      	bx	lr

08003e0a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	785b      	ldrb	r3, [r3, #1]
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d128      	bne.n	8003e78 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	0151      	lsls	r1, r2, #5
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	440a      	add	r2, r1
 8003e3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	78db      	ldrb	r3, [r3, #3]
 8003e4a:	2b03      	cmp	r3, #3
 8003e4c:	d003      	beq.n	8003e56 <USB_EPClearStall+0x4c>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	78db      	ldrb	r3, [r3, #3]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d138      	bne.n	8003ec8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	0151      	lsls	r1, r2, #5
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	440a      	add	r2, r1
 8003e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e027      	b.n	8003ec8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	0151      	lsls	r1, r2, #5
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	440a      	add	r2, r1
 8003e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	78db      	ldrb	r3, [r3, #3]
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d003      	beq.n	8003ea8 <USB_EPClearStall+0x9e>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	78db      	ldrb	r3, [r3, #3]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d10f      	bne.n	8003ec8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	0151      	lsls	r1, r2, #5
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	440a      	add	r2, r1
 8003ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ef2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003ef6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	78fb      	ldrb	r3, [r7, #3]
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003f08:	68f9      	ldr	r1, [r7, #12]
 8003f0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bc80      	pop	{r7}
 8003f1c:	4770      	bx	lr

08003f1e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b085      	sub	sp, #20
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003f38:	f023 0303 	bic.w	r3, r3, #3
 8003f3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f4c:	f023 0302 	bic.w	r3, r3, #2
 8003f50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3714      	adds	r7, #20
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr

08003f5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b085      	sub	sp, #20
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003f78:	f023 0303 	bic.w	r3, r3, #3
 8003f7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f8c:	f043 0302 	orr.w	r3, r3, #2
 8003f90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b085      	sub	sp, #20
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr

08003fc2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b085      	sub	sp, #20
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	0c1b      	lsrs	r3, r3, #16
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bc80      	pop	{r7}
 8003ff2:	4770      	bx	lr

08003ff4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	4013      	ands	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	b29b      	uxth	r3, r3
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr

08004026 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004026:	b480      	push	{r7}
 8004028:	b085      	sub	sp, #20
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	460b      	mov	r3, r1
 8004030:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004036:	78fb      	ldrb	r3, [r7, #3]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	4013      	ands	r3, r2
 8004052:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004054:	68bb      	ldr	r3, [r7, #8]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	bc80      	pop	{r7}
 800405e:	4770      	bx	lr

08004060 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	460b      	mov	r3, r1
 800406a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004082:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	fa22 f303 	lsr.w	r3, r2, r3
 8004090:	01db      	lsls	r3, r3, #7
 8004092:	b2db      	uxtb	r3, r3
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4313      	orrs	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4013      	ands	r3, r2
 80040ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80040ae:	68bb      	ldr	r3, [r7, #8]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr

080040ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f003 0301 	and.w	r3, r3, #1
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80040f2:	f023 0307 	bic.w	r3, r3, #7
 80040f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800410a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr

08004118 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	460b      	mov	r3, r1
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	333c      	adds	r3, #60	; 0x3c
 800412e:	3304      	adds	r3, #4
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4a25      	ldr	r2, [pc, #148]	; (80041cc <USB_EP0_OutStart+0xb4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d90a      	bls.n	8004152 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800414c:	d101      	bne.n	8004152 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800414e:	2300      	movs	r3, #0
 8004150:	e037      	b.n	80041c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004158:	461a      	mov	r2, r3
 800415a:	2300      	movs	r3, #0
 800415c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800416c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004170:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004180:	f043 0318 	orr.w	r3, r3, #24
 8004184:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004194:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004198:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800419a:	7afb      	ldrb	r3, [r7, #11]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d10f      	bne.n	80041c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a6:	461a      	mov	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80041be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr
 80041cc:	4f54300a 	.word	0x4f54300a

080041d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3301      	adds	r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4a12      	ldr	r2, [pc, #72]	; (8004230 <USB_CoreReset+0x60>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e01b      	b.n	8004226 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	daf2      	bge.n	80041dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f043 0201 	orr.w	r2, r3, #1
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	3301      	adds	r3, #1
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4a08      	ldr	r2, [pc, #32]	; (8004230 <USB_CoreReset+0x60>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d901      	bls.n	8004218 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e006      	b.n	8004226 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691b      	ldr	r3, [r3, #16]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b01      	cmp	r3, #1
 8004222:	d0f0      	beq.n	8004206 <USB_CoreReset+0x36>

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr
 8004230:	00030d40 	.word	0x00030d40

08004234 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004240:	2300      	movs	r3, #0
 8004242:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	7c1b      	ldrb	r3, [r3, #16]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d115      	bne.n	8004278 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800424c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004250:	2202      	movs	r2, #2
 8004252:	2181      	movs	r1, #129	; 0x81
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f001 ff3c 	bl	80060d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004260:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004264:	2202      	movs	r2, #2
 8004266:	2101      	movs	r1, #1
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f001 ff32 	bl	80060d2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004276:	e012      	b.n	800429e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004278:	2340      	movs	r3, #64	; 0x40
 800427a:	2202      	movs	r2, #2
 800427c:	2181      	movs	r1, #129	; 0x81
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f001 ff27 	bl	80060d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800428a:	2340      	movs	r3, #64	; 0x40
 800428c:	2202      	movs	r2, #2
 800428e:	2101      	movs	r1, #1
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f001 ff1e 	bl	80060d2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800429e:	2308      	movs	r3, #8
 80042a0:	2203      	movs	r2, #3
 80042a2:	2182      	movs	r1, #130	; 0x82
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f001 ff14 	bl	80060d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80042b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80042b4:	f002 f88a 	bl	80063cc <malloc>
 80042b8:	4603      	mov	r3, r0
 80042ba:	461a      	mov	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d102      	bne.n	80042d2 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80042cc:	2301      	movs	r3, #1
 80042ce:	73fb      	strb	r3, [r7, #15]
 80042d0:	e026      	b.n	8004320 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042d8:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	7c1b      	ldrb	r3, [r3, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d109      	bne.n	8004310 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004306:	2101      	movs	r1, #1
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f001 ffd2 	bl	80062b2 <USBD_LL_PrepareReceive>
 800430e:	e007      	b.n	8004320 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004316:	2340      	movs	r3, #64	; 0x40
 8004318:	2101      	movs	r1, #1
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f001 ffc9 	bl	80062b2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004320:	7bfb      	ldrb	r3, [r7, #15]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b084      	sub	sp, #16
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
 8004332:	460b      	mov	r3, r1
 8004334:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800433a:	2181      	movs	r1, #129	; 0x81
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f001 feee 	bl	800611e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004348:	2101      	movs	r1, #1
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f001 fee7 	bl	800611e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004358:	2182      	movs	r1, #130	; 0x82
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f001 fedf 	bl	800611e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00e      	beq.n	800438e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004380:	4618      	mov	r0, r3
 8004382:	f002 f82b 	bl	80063dc <free>
    pdev->pClassData = NULL;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800438e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004390:	4618      	mov	r0, r3
 8004392:	3710      	adds	r7, #16
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80043a8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80043aa:	2300      	movs	r3, #0
 80043ac:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d039      	beq.n	8004436 <USBD_CDC_Setup+0x9e>
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d17c      	bne.n	80044c0 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	88db      	ldrh	r3, [r3, #6]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d029      	beq.n	8004422 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	b25b      	sxtb	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	da11      	bge.n	80043fc <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80043e4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	88d2      	ldrh	r2, [r2, #6]
 80043ea:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80043ec:	6939      	ldr	r1, [r7, #16]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	88db      	ldrh	r3, [r3, #6]
 80043f2:	461a      	mov	r2, r3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f001 fa31 	bl	800585c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80043fa:	e068      	b.n	80044ce <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	785a      	ldrb	r2, [r3, #1]
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	88db      	ldrh	r3, [r3, #6]
 800440a:	b2da      	uxtb	r2, r3
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004412:	6939      	ldr	r1, [r7, #16]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	88db      	ldrh	r3, [r3, #6]
 8004418:	461a      	mov	r2, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f001 fa4c 	bl	80058b8 <USBD_CtlPrepareRx>
      break;
 8004420:	e055      	b.n	80044ce <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	7850      	ldrb	r0, [r2, #1]
 800442e:	2200      	movs	r2, #0
 8004430:	6839      	ldr	r1, [r7, #0]
 8004432:	4798      	blx	r3
      break;
 8004434:	e04b      	b.n	80044ce <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	785b      	ldrb	r3, [r3, #1]
 800443a:	2b0a      	cmp	r3, #10
 800443c:	d017      	beq.n	800446e <USBD_CDC_Setup+0xd6>
 800443e:	2b0b      	cmp	r3, #11
 8004440:	d029      	beq.n	8004496 <USBD_CDC_Setup+0xfe>
 8004442:	2b00      	cmp	r3, #0
 8004444:	d133      	bne.n	80044ae <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800444c:	2b03      	cmp	r3, #3
 800444e:	d107      	bne.n	8004460 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004450:	f107 030c 	add.w	r3, r7, #12
 8004454:	2202      	movs	r2, #2
 8004456:	4619      	mov	r1, r3
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f001 f9ff 	bl	800585c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800445e:	e02e      	b.n	80044be <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004460:	6839      	ldr	r1, [r7, #0]
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f001 f990 	bl	8005788 <USBD_CtlError>
            ret = USBD_FAIL;
 8004468:	2302      	movs	r3, #2
 800446a:	75fb      	strb	r3, [r7, #23]
          break;
 800446c:	e027      	b.n	80044be <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004474:	2b03      	cmp	r3, #3
 8004476:	d107      	bne.n	8004488 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004478:	f107 030f 	add.w	r3, r7, #15
 800447c:	2201      	movs	r2, #1
 800447e:	4619      	mov	r1, r3
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f001 f9eb 	bl	800585c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004486:	e01a      	b.n	80044be <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004488:	6839      	ldr	r1, [r7, #0]
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f001 f97c 	bl	8005788 <USBD_CtlError>
            ret = USBD_FAIL;
 8004490:	2302      	movs	r3, #2
 8004492:	75fb      	strb	r3, [r7, #23]
          break;
 8004494:	e013      	b.n	80044be <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800449c:	2b03      	cmp	r3, #3
 800449e:	d00d      	beq.n	80044bc <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80044a0:	6839      	ldr	r1, [r7, #0]
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f001 f970 	bl	8005788 <USBD_CtlError>
            ret = USBD_FAIL;
 80044a8:	2302      	movs	r3, #2
 80044aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80044ac:	e006      	b.n	80044bc <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80044ae:	6839      	ldr	r1, [r7, #0]
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f001 f969 	bl	8005788 <USBD_CtlError>
          ret = USBD_FAIL;
 80044b6:	2302      	movs	r3, #2
 80044b8:	75fb      	strb	r3, [r7, #23]
          break;
 80044ba:	e000      	b.n	80044be <USBD_CDC_Setup+0x126>
          break;
 80044bc:	bf00      	nop
      }
      break;
 80044be:	e006      	b.n	80044ce <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80044c0:	6839      	ldr	r1, [r7, #0]
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f001 f960 	bl	8005788 <USBD_CtlError>
      ret = USBD_FAIL;
 80044c8:	2302      	movs	r3, #2
 80044ca:	75fb      	strb	r3, [r7, #23]
      break;
 80044cc:	bf00      	nop
  }

  return ret;
 80044ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	460b      	mov	r3, r1
 80044e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80044ea:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044f2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d03a      	beq.n	8004574 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80044fe:	78fa      	ldrb	r2, [r7, #3]
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	331c      	adds	r3, #28
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d029      	beq.n	8004568 <USBD_CDC_DataIn+0x90>
 8004514:	78fa      	ldrb	r2, [r7, #3]
 8004516:	6879      	ldr	r1, [r7, #4]
 8004518:	4613      	mov	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	440b      	add	r3, r1
 8004522:	331c      	adds	r3, #28
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	78f9      	ldrb	r1, [r7, #3]
 8004528:	68b8      	ldr	r0, [r7, #8]
 800452a:	460b      	mov	r3, r1
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	1a5b      	subs	r3, r3, r1
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4403      	add	r3, r0
 8004534:	3344      	adds	r3, #68	; 0x44
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	fbb2 f1f3 	udiv	r1, r2, r3
 800453c:	fb03 f301 	mul.w	r3, r3, r1
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d110      	bne.n	8004568 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004546:	78fa      	ldrb	r2, [r7, #3]
 8004548:	6879      	ldr	r1, [r7, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	440b      	add	r3, r1
 8004554:	331c      	adds	r3, #28
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800455a:	78f9      	ldrb	r1, [r7, #3]
 800455c:	2300      	movs	r3, #0
 800455e:	2200      	movs	r2, #0
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f001 fe83 	bl	800626c <USBD_LL_Transmit>
 8004566:	e003      	b.n	8004570 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004570:	2300      	movs	r3, #0
 8004572:	e000      	b.n	8004576 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8004574:	2302      	movs	r3, #2
  }
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	460b      	mov	r3, r1
 8004588:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004590:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004592:	78fb      	ldrb	r3, [r7, #3]
 8004594:	4619      	mov	r1, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f001 feae 	bl	80062f8 <USBD_LL_GetRxDataSize>
 800459c:	4602      	mov	r2, r0
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00d      	beq.n	80045ca <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80045c2:	4611      	mov	r1, r2
 80045c4:	4798      	blx	r3

    return USBD_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	e000      	b.n	80045cc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80045ca:	2302      	movs	r3, #2
  }
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045e2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d015      	beq.n	800461a <USBD_CDC_EP0_RxReady+0x46>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80045f4:	2bff      	cmp	r3, #255	; 0xff
 80045f6:	d010      	beq.n	800461a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004606:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800460e:	b292      	uxth	r2, r2
 8004610:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	22ff      	movs	r2, #255	; 0xff
 8004616:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2243      	movs	r2, #67	; 0x43
 8004630:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004632:	4b03      	ldr	r3, [pc, #12]	; (8004640 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	20000094 	.word	0x20000094

08004644 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2243      	movs	r2, #67	; 0x43
 8004650:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004652:	4b03      	ldr	r3, [pc, #12]	; (8004660 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004654:	4618      	mov	r0, r3
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	bc80      	pop	{r7}
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	20000050 	.word	0x20000050

08004664 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2243      	movs	r2, #67	; 0x43
 8004670:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004672:	4b03      	ldr	r3, [pc, #12]	; (8004680 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	200000d8 	.word	0x200000d8

08004684 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	220a      	movs	r2, #10
 8004690:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004692:	4b03      	ldr	r3, [pc, #12]	; (80046a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004694:	4618      	mov	r0, r3
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	bc80      	pop	{r7}
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	2000000c 	.word	0x2000000c

080046a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80046ae:	2302      	movs	r3, #2
 80046b0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80046c0:	2300      	movs	r3, #0
 80046c2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr

080046d0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	4613      	mov	r3, r2
 80046dc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046e4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80046ee:	88fa      	ldrh	r2, [r7, #6]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	371c      	adds	r7, #28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bc80      	pop	{r7}
 8004700:	4770      	bx	lr

08004702 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
 800470a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004712:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr

08004728 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004736:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d01c      	beq.n	800477c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004748:	2b00      	cmp	r3, #0
 800474a:	d115      	bne.n	8004778 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800476a:	b29b      	uxth	r3, r3
 800476c:	2181      	movs	r1, #129	; 0x81
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f001 fd7c 	bl	800626c <USBD_LL_Transmit>

      return USBD_OK;
 8004774:	2300      	movs	r3, #0
 8004776:	e002      	b.n	800477e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800477c:	2302      	movs	r3, #2
  }
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b084      	sub	sp, #16
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004794:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800479c:	2b00      	cmp	r3, #0
 800479e:	d017      	beq.n	80047d0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	7c1b      	ldrb	r3, [r3, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d109      	bne.n	80047bc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047b2:	2101      	movs	r1, #1
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f001 fd7c 	bl	80062b2 <USBD_LL_PrepareReceive>
 80047ba:	e007      	b.n	80047cc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047c2:	2340      	movs	r3, #64	; 0x40
 80047c4:	2101      	movs	r1, #1
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f001 fd73 	bl	80062b2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	e000      	b.n	80047d2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80047d0:	2302      	movs	r3, #2
  }
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b084      	sub	sp, #16
 80047de:	af00      	add	r7, sp, #0
 80047e0:	60f8      	str	r0, [r7, #12]
 80047e2:	60b9      	str	r1, [r7, #8]
 80047e4:	4613      	mov	r3, r2
 80047e6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80047ee:	2302      	movs	r3, #2
 80047f0:	e01a      	b.n	8004828 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	79fa      	ldrb	r2, [r7, #7]
 800481e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f001 fbf1 	bl	8006008 <USBD_LL_Init>

  return USBD_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d006      	beq.n	8004852 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	73fb      	strb	r3, [r7, #15]
 8004850:	e001      	b.n	8004856 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004852:	2302      	movs	r3, #2
 8004854:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004856:	7bfb      	ldrb	r3, [r7, #15]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	bc80      	pop	{r7}
 8004860:	4770      	bx	lr

08004862 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b082      	sub	sp, #8
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f001 fc16 	bl	800609c <USBD_LL_Start>

  return USBD_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	bc80      	pop	{r7}
 800488c:	4770      	bx	lr

0800488e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	460b      	mov	r3, r1
 8004898:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800489a:	2302      	movs	r3, #2
 800489c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00c      	beq.n	80048c2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	78fa      	ldrb	r2, [r7, #3]
 80048b2:	4611      	mov	r1, r2
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	4798      	blx	r3
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	78fa      	ldrb	r2, [r7, #3]
 80048e2:	4611      	mov	r1, r2
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	4798      	blx	r3

  return USBD_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004902:	6839      	ldr	r1, [r7, #0]
 8004904:	4618      	mov	r0, r3
 8004906:	f000 ff03 	bl	8005710 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004918:	461a      	mov	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004926:	f003 031f 	and.w	r3, r3, #31
 800492a:	2b01      	cmp	r3, #1
 800492c:	d00c      	beq.n	8004948 <USBD_LL_SetupStage+0x56>
 800492e:	2b01      	cmp	r3, #1
 8004930:	d302      	bcc.n	8004938 <USBD_LL_SetupStage+0x46>
 8004932:	2b02      	cmp	r3, #2
 8004934:	d010      	beq.n	8004958 <USBD_LL_SetupStage+0x66>
 8004936:	e017      	b.n	8004968 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800493e:	4619      	mov	r1, r3
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fa03 	bl	8004d4c <USBD_StdDevReq>
      break;
 8004946:	e01a      	b.n	800497e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800494e:	4619      	mov	r1, r3
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 fa65 	bl	8004e20 <USBD_StdItfReq>
      break;
 8004956:	e012      	b.n	800497e <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800495e:	4619      	mov	r1, r3
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 faa3 	bl	8004eac <USBD_StdEPReq>
      break;
 8004966:	e00a      	b.n	800497e <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800496e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004972:	b2db      	uxtb	r3, r3
 8004974:	4619      	mov	r1, r3
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f001 fbf0 	bl	800615c <USBD_LL_StallEP>
      break;
 800497c:	bf00      	nop
  }

  return USBD_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3708      	adds	r7, #8
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	460b      	mov	r3, r1
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004996:	7afb      	ldrb	r3, [r7, #11]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d14b      	bne.n	8004a34 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80049a2:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d134      	bne.n	8004a18 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d919      	bls.n	80049ee <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	1ad2      	subs	r2, r2, r3
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d203      	bcs.n	80049dc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80049d8:	b29b      	uxth	r3, r3
 80049da:	e002      	b.n	80049e2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f000 ff84 	bl	80058f4 <USBD_CtlContinueRx>
 80049ec:	e038      	b.n	8004a60 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d105      	bne.n	8004a10 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 ff81 	bl	8005918 <USBD_CtlSendStatus>
 8004a16:	e023      	b.n	8004a60 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004a1e:	2b05      	cmp	r3, #5
 8004a20:	d11e      	bne.n	8004a60 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f001 fb95 	bl	800615c <USBD_LL_StallEP>
 8004a32:	e015      	b.n	8004a60 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00d      	beq.n	8004a5c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d108      	bne.n	8004a5c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	7afa      	ldrb	r2, [r7, #11]
 8004a54:	4611      	mov	r1, r2
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	4798      	blx	r3
 8004a5a:	e001      	b.n	8004a60 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e000      	b.n	8004a62 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b086      	sub	sp, #24
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	460b      	mov	r3, r1
 8004a74:	607a      	str	r2, [r7, #4]
 8004a76:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004a78:	7afb      	ldrb	r3, [r7, #11]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d17f      	bne.n	8004b7e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3314      	adds	r3, #20
 8004a82:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d15c      	bne.n	8004b48 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d915      	bls.n	8004ac6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	68da      	ldr	r2, [r3, #12]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	1ad2      	subs	r2, r2, r3
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	461a      	mov	r2, r3
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 feee 	bl	8005894 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ab8:	2300      	movs	r3, #0
 8004aba:	2200      	movs	r2, #0
 8004abc:	2100      	movs	r1, #0
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f001 fbf7 	bl	80062b2 <USBD_LL_PrepareReceive>
 8004ac4:	e04e      	b.n	8004b64 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	6912      	ldr	r2, [r2, #16]
 8004ace:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ad2:	fb02 f201 	mul.w	r2, r2, r1
 8004ad6:	1a9b      	subs	r3, r3, r2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d11c      	bne.n	8004b16 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d316      	bcc.n	8004b16 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d20f      	bcs.n	8004b16 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004af6:	2200      	movs	r2, #0
 8004af8:	2100      	movs	r1, #0
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 feca 	bl	8005894 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004b08:	2300      	movs	r3, #0
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f001 fbcf 	bl	80062b2 <USBD_LL_PrepareReceive>
 8004b14:	e026      	b.n	8004b64 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d105      	bne.n	8004b38 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004b38:	2180      	movs	r1, #128	; 0x80
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f001 fb0e 	bl	800615c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 fefc 	bl	800593e <USBD_CtlReceiveStatus>
 8004b46:	e00d      	b.n	8004b64 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d004      	beq.n	8004b5c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d103      	bne.n	8004b64 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004b5c:	2180      	movs	r1, #128	; 0x80
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f001 fafc 	bl	800615c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d11d      	bne.n	8004baa <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f7ff fe83 	bl	800487a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004b7c:	e015      	b.n	8004baa <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00d      	beq.n	8004ba6 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d108      	bne.n	8004ba6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	7afa      	ldrb	r2, [r7, #11]
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	4798      	blx	r3
 8004ba4:	e001      	b.n	8004baa <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e000      	b.n	8004bac <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004bbc:	2340      	movs	r3, #64	; 0x40
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f001 fa85 	bl	80060d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2240      	movs	r2, #64	; 0x40
 8004bd4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004bd8:	2340      	movs	r3, #64	; 0x40
 8004bda:	2200      	movs	r2, #0
 8004bdc:	2180      	movs	r1, #128	; 0x80
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f001 fa77 	bl	80060d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2240      	movs	r2, #64	; 0x40
 8004bee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d009      	beq.n	8004c2c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6852      	ldr	r2, [r2, #4]
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	4611      	mov	r1, r2
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	4798      	blx	r3
  }

  return USBD_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	78fa      	ldrb	r2, [r7, #3]
 8004c46:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr

08004c54 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2204      	movs	r2, #4
 8004c6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bc80      	pop	{r7}
 8004c7a:	4770      	bx	lr

08004c7c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d105      	bne.n	8004c9a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bc80      	pop	{r7}
 8004ca4:	4770      	bx	lr

08004ca6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b082      	sub	sp, #8
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d10b      	bne.n	8004cd0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b083      	sub	sp, #12
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bc80      	pop	{r7}
 8004cf0:	4770      	bx	lr

08004cf2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr

08004d0a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bc80      	pop	{r7}
 8004d1c:	4770      	bx	lr

08004d1e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b082      	sub	sp, #8
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	6852      	ldr	r2, [r2, #4]
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	4798      	blx	r3

  return USBD_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	d004      	beq.n	8004d70 <USBD_StdDevReq+0x24>
 8004d66:	2b40      	cmp	r3, #64	; 0x40
 8004d68:	d002      	beq.n	8004d70 <USBD_StdDevReq+0x24>
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d008      	beq.n	8004d80 <USBD_StdDevReq+0x34>
 8004d6e:	e04c      	b.n	8004e0a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	6839      	ldr	r1, [r7, #0]
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	4798      	blx	r3
      break;
 8004d7e:	e049      	b.n	8004e14 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	785b      	ldrb	r3, [r3, #1]
 8004d84:	2b09      	cmp	r3, #9
 8004d86:	d83a      	bhi.n	8004dfe <USBD_StdDevReq+0xb2>
 8004d88:	a201      	add	r2, pc, #4	; (adr r2, 8004d90 <USBD_StdDevReq+0x44>)
 8004d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8e:	bf00      	nop
 8004d90:	08004de1 	.word	0x08004de1
 8004d94:	08004df5 	.word	0x08004df5
 8004d98:	08004dff 	.word	0x08004dff
 8004d9c:	08004deb 	.word	0x08004deb
 8004da0:	08004dff 	.word	0x08004dff
 8004da4:	08004dc3 	.word	0x08004dc3
 8004da8:	08004db9 	.word	0x08004db9
 8004dac:	08004dff 	.word	0x08004dff
 8004db0:	08004dd7 	.word	0x08004dd7
 8004db4:	08004dcd 	.word	0x08004dcd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004db8:	6839      	ldr	r1, [r7, #0]
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 f9d4 	bl	8005168 <USBD_GetDescriptor>
          break;
 8004dc0:	e022      	b.n	8004e08 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004dc2:	6839      	ldr	r1, [r7, #0]
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fb37 	bl	8005438 <USBD_SetAddress>
          break;
 8004dca:	e01d      	b.n	8004e08 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004dcc:	6839      	ldr	r1, [r7, #0]
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fb74 	bl	80054bc <USBD_SetConfig>
          break;
 8004dd4:	e018      	b.n	8004e08 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004dd6:	6839      	ldr	r1, [r7, #0]
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fbfd 	bl	80055d8 <USBD_GetConfig>
          break;
 8004dde:	e013      	b.n	8004e08 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004de0:	6839      	ldr	r1, [r7, #0]
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fc2c 	bl	8005640 <USBD_GetStatus>
          break;
 8004de8:	e00e      	b.n	8004e08 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004dea:	6839      	ldr	r1, [r7, #0]
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fc5a 	bl	80056a6 <USBD_SetFeature>
          break;
 8004df2:	e009      	b.n	8004e08 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004df4:	6839      	ldr	r1, [r7, #0]
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 fc69 	bl	80056ce <USBD_ClrFeature>
          break;
 8004dfc:	e004      	b.n	8004e08 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004dfe:	6839      	ldr	r1, [r7, #0]
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f000 fcc1 	bl	8005788 <USBD_CtlError>
          break;
 8004e06:	bf00      	nop
      }
      break;
 8004e08:	e004      	b.n	8004e14 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8004e0a:	6839      	ldr	r1, [r7, #0]
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fcbb 	bl	8005788 <USBD_CtlError>
      break;
 8004e12:	bf00      	nop
  }

  return ret;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop

08004e20 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e36:	2b20      	cmp	r3, #32
 8004e38:	d003      	beq.n	8004e42 <USBD_StdItfReq+0x22>
 8004e3a:	2b40      	cmp	r3, #64	; 0x40
 8004e3c:	d001      	beq.n	8004e42 <USBD_StdItfReq+0x22>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d12a      	bne.n	8004e98 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d81d      	bhi.n	8004e8a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	889b      	ldrh	r3, [r3, #4]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d813      	bhi.n	8004e80 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	6839      	ldr	r1, [r7, #0]
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	4798      	blx	r3
 8004e66:	4603      	mov	r3, r0
 8004e68:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	88db      	ldrh	r3, [r3, #6]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d110      	bne.n	8004e94 <USBD_StdItfReq+0x74>
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10d      	bne.n	8004e94 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fd4d 	bl	8005918 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004e7e:	e009      	b.n	8004e94 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8004e80:	6839      	ldr	r1, [r7, #0]
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fc80 	bl	8005788 <USBD_CtlError>
          break;
 8004e88:	e004      	b.n	8004e94 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8004e8a:	6839      	ldr	r1, [r7, #0]
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 fc7b 	bl	8005788 <USBD_CtlError>
          break;
 8004e92:	e000      	b.n	8004e96 <USBD_StdItfReq+0x76>
          break;
 8004e94:	bf00      	nop
      }
      break;
 8004e96:	e004      	b.n	8004ea2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8004e98:	6839      	ldr	r1, [r7, #0]
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fc74 	bl	8005788 <USBD_CtlError>
      break;
 8004ea0:	bf00      	nop
  }

  return USBD_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	889b      	ldrh	r3, [r3, #4]
 8004ebe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d004      	beq.n	8004ed6 <USBD_StdEPReq+0x2a>
 8004ecc:	2b40      	cmp	r3, #64	; 0x40
 8004ece:	d002      	beq.n	8004ed6 <USBD_StdEPReq+0x2a>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <USBD_StdEPReq+0x3a>
 8004ed4:	e13d      	b.n	8005152 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	6839      	ldr	r1, [r7, #0]
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	4798      	blx	r3
      break;
 8004ee4:	e13a      	b.n	800515c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d10a      	bne.n	8004f08 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	6839      	ldr	r1, [r7, #0]
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	4798      	blx	r3
 8004f00:	4603      	mov	r3, r0
 8004f02:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	e12a      	b.n	800515e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	785b      	ldrb	r3, [r3, #1]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d03e      	beq.n	8004f8e <USBD_StdEPReq+0xe2>
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d002      	beq.n	8004f1a <USBD_StdEPReq+0x6e>
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d070      	beq.n	8004ffa <USBD_StdEPReq+0x14e>
 8004f18:	e115      	b.n	8005146 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d002      	beq.n	8004f2a <USBD_StdEPReq+0x7e>
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d015      	beq.n	8004f54 <USBD_StdEPReq+0xa8>
 8004f28:	e02b      	b.n	8004f82 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f2a:	7bbb      	ldrb	r3, [r7, #14]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00c      	beq.n	8004f4a <USBD_StdEPReq+0x9e>
 8004f30:	7bbb      	ldrb	r3, [r7, #14]
 8004f32:	2b80      	cmp	r3, #128	; 0x80
 8004f34:	d009      	beq.n	8004f4a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004f36:	7bbb      	ldrb	r3, [r7, #14]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f001 f90e 	bl	800615c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004f40:	2180      	movs	r1, #128	; 0x80
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f001 f90a 	bl	800615c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004f48:	e020      	b.n	8004f8c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8004f4a:	6839      	ldr	r1, [r7, #0]
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 fc1b 	bl	8005788 <USBD_CtlError>
              break;
 8004f52:	e01b      	b.n	8004f8c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	885b      	ldrh	r3, [r3, #2]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10e      	bne.n	8004f7a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004f5c:	7bbb      	ldrb	r3, [r7, #14]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00b      	beq.n	8004f7a <USBD_StdEPReq+0xce>
 8004f62:	7bbb      	ldrb	r3, [r7, #14]
 8004f64:	2b80      	cmp	r3, #128	; 0x80
 8004f66:	d008      	beq.n	8004f7a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	88db      	ldrh	r3, [r3, #6]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d104      	bne.n	8004f7a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004f70:	7bbb      	ldrb	r3, [r7, #14]
 8004f72:	4619      	mov	r1, r3
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f001 f8f1 	bl	800615c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fccc 	bl	8005918 <USBD_CtlSendStatus>

              break;
 8004f80:	e004      	b.n	8004f8c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004f82:	6839      	ldr	r1, [r7, #0]
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 fbff 	bl	8005788 <USBD_CtlError>
              break;
 8004f8a:	bf00      	nop
          }
          break;
 8004f8c:	e0e0      	b.n	8005150 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d002      	beq.n	8004f9e <USBD_StdEPReq+0xf2>
 8004f98:	2b03      	cmp	r3, #3
 8004f9a:	d015      	beq.n	8004fc8 <USBD_StdEPReq+0x11c>
 8004f9c:	e026      	b.n	8004fec <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f9e:	7bbb      	ldrb	r3, [r7, #14]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d00c      	beq.n	8004fbe <USBD_StdEPReq+0x112>
 8004fa4:	7bbb      	ldrb	r3, [r7, #14]
 8004fa6:	2b80      	cmp	r3, #128	; 0x80
 8004fa8:	d009      	beq.n	8004fbe <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004faa:	7bbb      	ldrb	r3, [r7, #14]
 8004fac:	4619      	mov	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f001 f8d4 	bl	800615c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004fb4:	2180      	movs	r1, #128	; 0x80
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f001 f8d0 	bl	800615c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004fbc:	e01c      	b.n	8004ff8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8004fbe:	6839      	ldr	r1, [r7, #0]
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fbe1 	bl	8005788 <USBD_CtlError>
              break;
 8004fc6:	e017      	b.n	8004ff8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	885b      	ldrh	r3, [r3, #2]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d112      	bne.n	8004ff6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004fd0:	7bbb      	ldrb	r3, [r7, #14]
 8004fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d004      	beq.n	8004fe4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004fda:	7bbb      	ldrb	r3, [r7, #14]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f001 f8db 	bl	800619a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fc97 	bl	8005918 <USBD_CtlSendStatus>
              }
              break;
 8004fea:	e004      	b.n	8004ff6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8004fec:	6839      	ldr	r1, [r7, #0]
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fbca 	bl	8005788 <USBD_CtlError>
              break;
 8004ff4:	e000      	b.n	8004ff8 <USBD_StdEPReq+0x14c>
              break;
 8004ff6:	bf00      	nop
          }
          break;
 8004ff8:	e0aa      	b.n	8005150 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005000:	2b02      	cmp	r3, #2
 8005002:	d002      	beq.n	800500a <USBD_StdEPReq+0x15e>
 8005004:	2b03      	cmp	r3, #3
 8005006:	d032      	beq.n	800506e <USBD_StdEPReq+0x1c2>
 8005008:	e097      	b.n	800513a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800500a:	7bbb      	ldrb	r3, [r7, #14]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d007      	beq.n	8005020 <USBD_StdEPReq+0x174>
 8005010:	7bbb      	ldrb	r3, [r7, #14]
 8005012:	2b80      	cmp	r3, #128	; 0x80
 8005014:	d004      	beq.n	8005020 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005016:	6839      	ldr	r1, [r7, #0]
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fbb5 	bl	8005788 <USBD_CtlError>
                break;
 800501e:	e091      	b.n	8005144 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005020:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005024:	2b00      	cmp	r3, #0
 8005026:	da0b      	bge.n	8005040 <USBD_StdEPReq+0x194>
 8005028:	7bbb      	ldrb	r3, [r7, #14]
 800502a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800502e:	4613      	mov	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	3310      	adds	r3, #16
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	4413      	add	r3, r2
 800503c:	3304      	adds	r3, #4
 800503e:	e00b      	b.n	8005058 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005040:	7bbb      	ldrb	r3, [r7, #14]
 8005042:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005046:	4613      	mov	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	4413      	add	r3, r2
 8005056:	3304      	adds	r3, #4
 8005058:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2202      	movs	r2, #2
 8005064:	4619      	mov	r1, r3
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fbf8 	bl	800585c <USBD_CtlSendData>
              break;
 800506c:	e06a      	b.n	8005144 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800506e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005072:	2b00      	cmp	r3, #0
 8005074:	da11      	bge.n	800509a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005076:	7bbb      	ldrb	r3, [r7, #14]
 8005078:	f003 020f 	and.w	r2, r3, #15
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	440b      	add	r3, r1
 8005088:	3318      	adds	r3, #24
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d117      	bne.n	80050c0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fb78 	bl	8005788 <USBD_CtlError>
                  break;
 8005098:	e054      	b.n	8005144 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800509a:	7bbb      	ldrb	r3, [r7, #14]
 800509c:	f003 020f 	and.w	r2, r3, #15
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d104      	bne.n	80050c0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80050b6:	6839      	ldr	r1, [r7, #0]
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fb65 	bl	8005788 <USBD_CtlError>
                  break;
 80050be:	e041      	b.n	8005144 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80050c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	da0b      	bge.n	80050e0 <USBD_StdEPReq+0x234>
 80050c8:	7bbb      	ldrb	r3, [r7, #14]
 80050ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	3310      	adds	r3, #16
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	4413      	add	r3, r2
 80050dc:	3304      	adds	r3, #4
 80050de:	e00b      	b.n	80050f8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80050e0:	7bbb      	ldrb	r3, [r7, #14]
 80050e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	4413      	add	r3, r2
 80050f6:	3304      	adds	r3, #4
 80050f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80050fa:	7bbb      	ldrb	r3, [r7, #14]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <USBD_StdEPReq+0x25a>
 8005100:	7bbb      	ldrb	r3, [r7, #14]
 8005102:	2b80      	cmp	r3, #128	; 0x80
 8005104:	d103      	bne.n	800510e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	e00e      	b.n	800512c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800510e:	7bbb      	ldrb	r3, [r7, #14]
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f001 f860 	bl	80061d8 <USBD_LL_IsStallEP>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2201      	movs	r2, #1
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	e002      	b.n	800512c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2202      	movs	r2, #2
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fb92 	bl	800585c <USBD_CtlSendData>
              break;
 8005138:	e004      	b.n	8005144 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800513a:	6839      	ldr	r1, [r7, #0]
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fb23 	bl	8005788 <USBD_CtlError>
              break;
 8005142:	bf00      	nop
          }
          break;
 8005144:	e004      	b.n	8005150 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005146:	6839      	ldr	r1, [r7, #0]
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fb1d 	bl	8005788 <USBD_CtlError>
          break;
 800514e:	bf00      	nop
      }
      break;
 8005150:	e004      	b.n	800515c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005152:	6839      	ldr	r1, [r7, #0]
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fb17 	bl	8005788 <USBD_CtlError>
      break;
 800515a:	bf00      	nop
  }

  return ret;
 800515c:	7bfb      	ldrb	r3, [r7, #15]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005176:	2300      	movs	r3, #0
 8005178:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	885b      	ldrh	r3, [r3, #2]
 8005182:	0a1b      	lsrs	r3, r3, #8
 8005184:	b29b      	uxth	r3, r3
 8005186:	3b01      	subs	r3, #1
 8005188:	2b06      	cmp	r3, #6
 800518a:	f200 8128 	bhi.w	80053de <USBD_GetDescriptor+0x276>
 800518e:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <USBD_GetDescriptor+0x2c>)
 8005190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005194:	080051b1 	.word	0x080051b1
 8005198:	080051c9 	.word	0x080051c9
 800519c:	08005209 	.word	0x08005209
 80051a0:	080053df 	.word	0x080053df
 80051a4:	080053df 	.word	0x080053df
 80051a8:	0800537f 	.word	0x0800537f
 80051ac:	080053ab 	.word	0x080053ab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	7c12      	ldrb	r2, [r2, #16]
 80051bc:	f107 0108 	add.w	r1, r7, #8
 80051c0:	4610      	mov	r0, r2
 80051c2:	4798      	blx	r3
 80051c4:	60f8      	str	r0, [r7, #12]
      break;
 80051c6:	e112      	b.n	80053ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	7c1b      	ldrb	r3, [r3, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10d      	bne.n	80051ec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d8:	f107 0208 	add.w	r2, r7, #8
 80051dc:	4610      	mov	r0, r2
 80051de:	4798      	blx	r3
 80051e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	3301      	adds	r3, #1
 80051e6:	2202      	movs	r2, #2
 80051e8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80051ea:	e100      	b.n	80053ee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	f107 0208 	add.w	r2, r7, #8
 80051f8:	4610      	mov	r0, r2
 80051fa:	4798      	blx	r3
 80051fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3301      	adds	r3, #1
 8005202:	2202      	movs	r2, #2
 8005204:	701a      	strb	r2, [r3, #0]
      break;
 8005206:	e0f2      	b.n	80053ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	885b      	ldrh	r3, [r3, #2]
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b05      	cmp	r3, #5
 8005210:	f200 80ac 	bhi.w	800536c <USBD_GetDescriptor+0x204>
 8005214:	a201      	add	r2, pc, #4	; (adr r2, 800521c <USBD_GetDescriptor+0xb4>)
 8005216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521a:	bf00      	nop
 800521c:	08005235 	.word	0x08005235
 8005220:	08005269 	.word	0x08005269
 8005224:	0800529d 	.word	0x0800529d
 8005228:	080052d1 	.word	0x080052d1
 800522c:	08005305 	.word	0x08005305
 8005230:	08005339 	.word	0x08005339
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00b      	beq.n	8005258 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	7c12      	ldrb	r2, [r2, #16]
 800524c:	f107 0108 	add.w	r1, r7, #8
 8005250:	4610      	mov	r0, r2
 8005252:	4798      	blx	r3
 8005254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005256:	e091      	b.n	800537c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005258:	6839      	ldr	r1, [r7, #0]
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fa94 	bl	8005788 <USBD_CtlError>
            err++;
 8005260:	7afb      	ldrb	r3, [r7, #11]
 8005262:	3301      	adds	r3, #1
 8005264:	72fb      	strb	r3, [r7, #11]
          break;
 8005266:	e089      	b.n	800537c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00b      	beq.n	800528c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	7c12      	ldrb	r2, [r2, #16]
 8005280:	f107 0108 	add.w	r1, r7, #8
 8005284:	4610      	mov	r0, r2
 8005286:	4798      	blx	r3
 8005288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800528a:	e077      	b.n	800537c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800528c:	6839      	ldr	r1, [r7, #0]
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fa7a 	bl	8005788 <USBD_CtlError>
            err++;
 8005294:	7afb      	ldrb	r3, [r7, #11]
 8005296:	3301      	adds	r3, #1
 8005298:	72fb      	strb	r3, [r7, #11]
          break;
 800529a:	e06f      	b.n	800537c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00b      	beq.n	80052c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	7c12      	ldrb	r2, [r2, #16]
 80052b4:	f107 0108 	add.w	r1, r7, #8
 80052b8:	4610      	mov	r0, r2
 80052ba:	4798      	blx	r3
 80052bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80052be:	e05d      	b.n	800537c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80052c0:	6839      	ldr	r1, [r7, #0]
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 fa60 	bl	8005788 <USBD_CtlError>
            err++;
 80052c8:	7afb      	ldrb	r3, [r7, #11]
 80052ca:	3301      	adds	r3, #1
 80052cc:	72fb      	strb	r3, [r7, #11]
          break;
 80052ce:	e055      	b.n	800537c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00b      	beq.n	80052f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	7c12      	ldrb	r2, [r2, #16]
 80052e8:	f107 0108 	add.w	r1, r7, #8
 80052ec:	4610      	mov	r0, r2
 80052ee:	4798      	blx	r3
 80052f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80052f2:	e043      	b.n	800537c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80052f4:	6839      	ldr	r1, [r7, #0]
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fa46 	bl	8005788 <USBD_CtlError>
            err++;
 80052fc:	7afb      	ldrb	r3, [r7, #11]
 80052fe:	3301      	adds	r3, #1
 8005300:	72fb      	strb	r3, [r7, #11]
          break;
 8005302:	e03b      	b.n	800537c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00b      	beq.n	8005328 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	7c12      	ldrb	r2, [r2, #16]
 800531c:	f107 0108 	add.w	r1, r7, #8
 8005320:	4610      	mov	r0, r2
 8005322:	4798      	blx	r3
 8005324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005326:	e029      	b.n	800537c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005328:	6839      	ldr	r1, [r7, #0]
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fa2c 	bl	8005788 <USBD_CtlError>
            err++;
 8005330:	7afb      	ldrb	r3, [r7, #11]
 8005332:	3301      	adds	r3, #1
 8005334:	72fb      	strb	r3, [r7, #11]
          break;
 8005336:	e021      	b.n	800537c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00b      	beq.n	800535c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800534a:	699b      	ldr	r3, [r3, #24]
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	7c12      	ldrb	r2, [r2, #16]
 8005350:	f107 0108 	add.w	r1, r7, #8
 8005354:	4610      	mov	r0, r2
 8005356:	4798      	blx	r3
 8005358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800535a:	e00f      	b.n	800537c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fa12 	bl	8005788 <USBD_CtlError>
            err++;
 8005364:	7afb      	ldrb	r3, [r7, #11]
 8005366:	3301      	adds	r3, #1
 8005368:	72fb      	strb	r3, [r7, #11]
          break;
 800536a:	e007      	b.n	800537c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800536c:	6839      	ldr	r1, [r7, #0]
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 fa0a 	bl	8005788 <USBD_CtlError>
          err++;
 8005374:	7afb      	ldrb	r3, [r7, #11]
 8005376:	3301      	adds	r3, #1
 8005378:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800537a:	e038      	b.n	80053ee <USBD_GetDescriptor+0x286>
 800537c:	e037      	b.n	80053ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	7c1b      	ldrb	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800538c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800538e:	f107 0208 	add.w	r2, r7, #8
 8005392:	4610      	mov	r0, r2
 8005394:	4798      	blx	r3
 8005396:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005398:	e029      	b.n	80053ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800539a:	6839      	ldr	r1, [r7, #0]
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f9f3 	bl	8005788 <USBD_CtlError>
        err++;
 80053a2:	7afb      	ldrb	r3, [r7, #11]
 80053a4:	3301      	adds	r3, #1
 80053a6:	72fb      	strb	r3, [r7, #11]
      break;
 80053a8:	e021      	b.n	80053ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	7c1b      	ldrb	r3, [r3, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10d      	bne.n	80053ce <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	f107 0208 	add.w	r2, r7, #8
 80053be:	4610      	mov	r0, r2
 80053c0:	4798      	blx	r3
 80053c2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	3301      	adds	r3, #1
 80053c8:	2207      	movs	r2, #7
 80053ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80053cc:	e00f      	b.n	80053ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80053ce:	6839      	ldr	r1, [r7, #0]
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f9d9 	bl	8005788 <USBD_CtlError>
        err++;
 80053d6:	7afb      	ldrb	r3, [r7, #11]
 80053d8:	3301      	adds	r3, #1
 80053da:	72fb      	strb	r3, [r7, #11]
      break;
 80053dc:	e007      	b.n	80053ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80053de:	6839      	ldr	r1, [r7, #0]
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f9d1 	bl	8005788 <USBD_CtlError>
      err++;
 80053e6:	7afb      	ldrb	r3, [r7, #11]
 80053e8:	3301      	adds	r3, #1
 80053ea:	72fb      	strb	r3, [r7, #11]
      break;
 80053ec:	bf00      	nop
  }

  if (err != 0U)
 80053ee:	7afb      	ldrb	r3, [r7, #11]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d11c      	bne.n	800542e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80053f4:	893b      	ldrh	r3, [r7, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d011      	beq.n	800541e <USBD_GetDescriptor+0x2b6>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	88db      	ldrh	r3, [r3, #6]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00d      	beq.n	800541e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	88da      	ldrh	r2, [r3, #6]
 8005406:	893b      	ldrh	r3, [r7, #8]
 8005408:	4293      	cmp	r3, r2
 800540a:	bf28      	it	cs
 800540c:	4613      	movcs	r3, r2
 800540e:	b29b      	uxth	r3, r3
 8005410:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005412:	893b      	ldrh	r3, [r7, #8]
 8005414:	461a      	mov	r2, r3
 8005416:	68f9      	ldr	r1, [r7, #12]
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fa1f 	bl	800585c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	88db      	ldrh	r3, [r3, #6]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d104      	bne.n	8005430 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fa76 	bl	8005918 <USBD_CtlSendStatus>
 800542c:	e000      	b.n	8005430 <USBD_GetDescriptor+0x2c8>
    return;
 800542e:	bf00      	nop
    }
  }
}
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop

08005438 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	889b      	ldrh	r3, [r3, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d130      	bne.n	80054ac <USBD_SetAddress+0x74>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	88db      	ldrh	r3, [r3, #6]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d12c      	bne.n	80054ac <USBD_SetAddress+0x74>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	885b      	ldrh	r3, [r3, #2]
 8005456:	2b7f      	cmp	r3, #127	; 0x7f
 8005458:	d828      	bhi.n	80054ac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	885b      	ldrh	r3, [r3, #2]
 800545e:	b2db      	uxtb	r3, r3
 8005460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005464:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800546c:	2b03      	cmp	r3, #3
 800546e:	d104      	bne.n	800547a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005470:	6839      	ldr	r1, [r7, #0]
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f988 	bl	8005788 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005478:	e01c      	b.n	80054b4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	7bfa      	ldrb	r2, [r7, #15]
 800547e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	4619      	mov	r1, r3
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fed1 	bl	800622e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fa43 	bl	8005918 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005492:	7bfb      	ldrb	r3, [r7, #15]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d004      	beq.n	80054a2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054a0:	e008      	b.n	80054b4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054aa:	e003      	b.n	80054b4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f96a 	bl	8005788 <USBD_CtlError>
  }
}
 80054b4:	bf00      	nop
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	885b      	ldrh	r3, [r3, #2]
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	4b41      	ldr	r3, [pc, #260]	; (80055d4 <USBD_SetConfig+0x118>)
 80054ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80054d0:	4b40      	ldr	r3, [pc, #256]	; (80055d4 <USBD_SetConfig+0x118>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d904      	bls.n	80054e2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80054d8:	6839      	ldr	r1, [r7, #0]
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f954 	bl	8005788 <USBD_CtlError>
 80054e0:	e075      	b.n	80055ce <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d002      	beq.n	80054f2 <USBD_SetConfig+0x36>
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d023      	beq.n	8005538 <USBD_SetConfig+0x7c>
 80054f0:	e062      	b.n	80055b8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80054f2:	4b38      	ldr	r3, [pc, #224]	; (80055d4 <USBD_SetConfig+0x118>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d01a      	beq.n	8005530 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80054fa:	4b36      	ldr	r3, [pc, #216]	; (80055d4 <USBD_SetConfig+0x118>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	461a      	mov	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2203      	movs	r2, #3
 8005508:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800550c:	4b31      	ldr	r3, [pc, #196]	; (80055d4 <USBD_SetConfig+0x118>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	4619      	mov	r1, r3
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff f9bb 	bl	800488e <USBD_SetClassConfig>
 8005518:	4603      	mov	r3, r0
 800551a:	2b02      	cmp	r3, #2
 800551c:	d104      	bne.n	8005528 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800551e:	6839      	ldr	r1, [r7, #0]
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f931 	bl	8005788 <USBD_CtlError>
            return;
 8005526:	e052      	b.n	80055ce <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f9f5 	bl	8005918 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800552e:	e04e      	b.n	80055ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f9f1 	bl	8005918 <USBD_CtlSendStatus>
        break;
 8005536:	e04a      	b.n	80055ce <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005538:	4b26      	ldr	r3, [pc, #152]	; (80055d4 <USBD_SetConfig+0x118>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d112      	bne.n	8005566 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005548:	4b22      	ldr	r3, [pc, #136]	; (80055d4 <USBD_SetConfig+0x118>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	461a      	mov	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005552:	4b20      	ldr	r3, [pc, #128]	; (80055d4 <USBD_SetConfig+0x118>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7ff f9b7 	bl	80048cc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f9da 	bl	8005918 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005564:	e033      	b.n	80055ce <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005566:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <USBD_SetConfig+0x118>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	429a      	cmp	r2, r3
 8005572:	d01d      	beq.n	80055b0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	b2db      	uxtb	r3, r3
 800557a:	4619      	mov	r1, r3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff f9a5 	bl	80048cc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005582:	4b14      	ldr	r3, [pc, #80]	; (80055d4 <USBD_SetConfig+0x118>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	461a      	mov	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800558c:	4b11      	ldr	r3, [pc, #68]	; (80055d4 <USBD_SetConfig+0x118>)
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7ff f97b 	bl	800488e <USBD_SetClassConfig>
 8005598:	4603      	mov	r3, r0
 800559a:	2b02      	cmp	r3, #2
 800559c:	d104      	bne.n	80055a8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800559e:	6839      	ldr	r1, [r7, #0]
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f8f1 	bl	8005788 <USBD_CtlError>
            return;
 80055a6:	e012      	b.n	80055ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f9b5 	bl	8005918 <USBD_CtlSendStatus>
        break;
 80055ae:	e00e      	b.n	80055ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f9b1 	bl	8005918 <USBD_CtlSendStatus>
        break;
 80055b6:	e00a      	b.n	80055ce <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80055b8:	6839      	ldr	r1, [r7, #0]
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f8e4 	bl	8005788 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80055c0:	4b04      	ldr	r3, [pc, #16]	; (80055d4 <USBD_SetConfig+0x118>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	4619      	mov	r1, r3
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7ff f980 	bl	80048cc <USBD_ClrClassConfig>
        break;
 80055cc:	bf00      	nop
    }
  }
}
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	20000200 	.word	0x20000200

080055d8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	88db      	ldrh	r3, [r3, #6]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d004      	beq.n	80055f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80055ea:	6839      	ldr	r1, [r7, #0]
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f8cb 	bl	8005788 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80055f2:	e021      	b.n	8005638 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	db17      	blt.n	800562e <USBD_GetConfig+0x56>
 80055fe:	2b02      	cmp	r3, #2
 8005600:	dd02      	ble.n	8005608 <USBD_GetConfig+0x30>
 8005602:	2b03      	cmp	r3, #3
 8005604:	d00b      	beq.n	800561e <USBD_GetConfig+0x46>
 8005606:	e012      	b.n	800562e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3308      	adds	r3, #8
 8005612:	2201      	movs	r2, #1
 8005614:	4619      	mov	r1, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f920 	bl	800585c <USBD_CtlSendData>
        break;
 800561c:	e00c      	b.n	8005638 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3304      	adds	r3, #4
 8005622:	2201      	movs	r2, #1
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f918 	bl	800585c <USBD_CtlSendData>
        break;
 800562c:	e004      	b.n	8005638 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800562e:	6839      	ldr	r1, [r7, #0]
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f8a9 	bl	8005788 <USBD_CtlError>
        break;
 8005636:	bf00      	nop
}
 8005638:	bf00      	nop
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005650:	3b01      	subs	r3, #1
 8005652:	2b02      	cmp	r3, #2
 8005654:	d81e      	bhi.n	8005694 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	88db      	ldrh	r3, [r3, #6]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d004      	beq.n	8005668 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800565e:	6839      	ldr	r1, [r7, #0]
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f891 	bl	8005788 <USBD_CtlError>
        break;
 8005666:	e01a      	b.n	800569e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d005      	beq.n	8005684 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f043 0202 	orr.w	r2, r3, #2
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	330c      	adds	r3, #12
 8005688:	2202      	movs	r2, #2
 800568a:	4619      	mov	r1, r3
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f8e5 	bl	800585c <USBD_CtlSendData>
      break;
 8005692:	e004      	b.n	800569e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005694:	6839      	ldr	r1, [r7, #0]
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f876 	bl	8005788 <USBD_CtlError>
      break;
 800569c:	bf00      	nop
  }
}
 800569e:	bf00      	nop
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b082      	sub	sp, #8
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	885b      	ldrh	r3, [r3, #2]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d106      	bne.n	80056c6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f929 	bl	8005918 <USBD_CtlSendStatus>
  }
}
 80056c6:	bf00      	nop
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056de:	3b01      	subs	r3, #1
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d80b      	bhi.n	80056fc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	885b      	ldrh	r3, [r3, #2]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d10c      	bne.n	8005706 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f90f 	bl	8005918 <USBD_CtlSendStatus>
      }
      break;
 80056fa:	e004      	b.n	8005706 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80056fc:	6839      	ldr	r1, [r7, #0]
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f842 	bl	8005788 <USBD_CtlError>
      break;
 8005704:	e000      	b.n	8005708 <USBD_ClrFeature+0x3a>
      break;
 8005706:	bf00      	nop
  }
}
 8005708:	bf00      	nop
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	781a      	ldrb	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	785a      	ldrb	r2, [r3, #1]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	3302      	adds	r3, #2
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	b29a      	uxth	r2, r3
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	3303      	adds	r3, #3
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	b29b      	uxth	r3, r3
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	b29b      	uxth	r3, r3
 800573e:	4413      	add	r3, r2
 8005740:	b29a      	uxth	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	3304      	adds	r3, #4
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	b29a      	uxth	r2, r3
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	3305      	adds	r3, #5
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	021b      	lsls	r3, r3, #8
 8005758:	b29b      	uxth	r3, r3
 800575a:	4413      	add	r3, r2
 800575c:	b29a      	uxth	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	3306      	adds	r3, #6
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	b29a      	uxth	r2, r3
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	3307      	adds	r3, #7
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	b29b      	uxth	r3, r3
 8005772:	021b      	lsls	r3, r3, #8
 8005774:	b29b      	uxth	r3, r3
 8005776:	4413      	add	r3, r2
 8005778:	b29a      	uxth	r2, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	80da      	strh	r2, [r3, #6]

}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr

08005788 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005792:	2180      	movs	r1, #128	; 0x80
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fce1 	bl	800615c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800579a:	2100      	movs	r1, #0
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fcdd 	bl	800615c <USBD_LL_StallEP>
}
 80057a2:	bf00      	nop
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b086      	sub	sp, #24
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d032      	beq.n	8005826 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f834 	bl	800582e <USBD_GetLen>
 80057c6:	4603      	mov	r3, r0
 80057c8:	3301      	adds	r3, #1
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80057d4:	7dfb      	ldrb	r3, [r7, #23]
 80057d6:	1c5a      	adds	r2, r3, #1
 80057d8:	75fa      	strb	r2, [r7, #23]
 80057da:	461a      	mov	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4413      	add	r3, r2
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	7812      	ldrb	r2, [r2, #0]
 80057e4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80057e6:	7dfb      	ldrb	r3, [r7, #23]
 80057e8:	1c5a      	adds	r2, r3, #1
 80057ea:	75fa      	strb	r2, [r7, #23]
 80057ec:	461a      	mov	r2, r3
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	4413      	add	r3, r2
 80057f2:	2203      	movs	r2, #3
 80057f4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80057f6:	e012      	b.n	800581e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	60fa      	str	r2, [r7, #12]
 80057fe:	7dfa      	ldrb	r2, [r7, #23]
 8005800:	1c51      	adds	r1, r2, #1
 8005802:	75f9      	strb	r1, [r7, #23]
 8005804:	4611      	mov	r1, r2
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	440a      	add	r2, r1
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800580e:	7dfb      	ldrb	r3, [r7, #23]
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	75fa      	strb	r2, [r7, #23]
 8005814:	461a      	mov	r2, r3
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	4413      	add	r3, r2
 800581a:	2200      	movs	r2, #0
 800581c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e8      	bne.n	80057f8 <USBD_GetString+0x4e>
    }
  }
}
 8005826:	bf00      	nop
 8005828:	3718      	adds	r7, #24
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800583a:	e005      	b.n	8005848 <USBD_GetLen+0x1a>
  {
    len++;
 800583c:	7bfb      	ldrb	r3, [r7, #15]
 800583e:	3301      	adds	r3, #1
 8005840:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3301      	adds	r3, #1
 8005846:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1f5      	bne.n	800583c <USBD_GetLen+0xe>
  }

  return len;
 8005850:	7bfb      	ldrb	r3, [r7, #15]
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr

0800585c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	60b9      	str	r1, [r7, #8]
 8005866:	4613      	mov	r3, r2
 8005868:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2202      	movs	r2, #2
 800586e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005872:	88fa      	ldrh	r2, [r7, #6]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005878:	88fa      	ldrh	r2, [r7, #6]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	68ba      	ldr	r2, [r7, #8]
 8005882:	2100      	movs	r1, #0
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 fcf1 	bl	800626c <USBD_LL_Transmit>

  return USBD_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	4613      	mov	r3, r2
 80058a0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80058a2:	88fb      	ldrh	r3, [r7, #6]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	2100      	movs	r1, #0
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 fcdf 	bl	800626c <USBD_LL_Transmit>

  return USBD_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	60f8      	str	r0, [r7, #12]
 80058c0:	60b9      	str	r1, [r7, #8]
 80058c2:	4613      	mov	r3, r2
 80058c4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2203      	movs	r2, #3
 80058ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80058ce:	88fa      	ldrh	r2, [r7, #6]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80058d6:	88fa      	ldrh	r2, [r7, #6]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80058de:	88fb      	ldrh	r3, [r7, #6]
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	2100      	movs	r1, #0
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 fce4 	bl	80062b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	4613      	mov	r3, r2
 8005900:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005902:	88fb      	ldrh	r3, [r7, #6]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	2100      	movs	r1, #0
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 fcd2 	bl	80062b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3710      	adds	r7, #16
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2204      	movs	r2, #4
 8005924:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005928:	2300      	movs	r3, #0
 800592a:	2200      	movs	r2, #0
 800592c:	2100      	movs	r1, #0
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fc9c 	bl	800626c <USBD_LL_Transmit>

  return USBD_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b082      	sub	sp, #8
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2205      	movs	r2, #5
 800594a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800594e:	2300      	movs	r3, #0
 8005950:	2200      	movs	r2, #0
 8005952:	2100      	movs	r1, #0
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fcac 	bl	80062b2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005968:	2200      	movs	r2, #0
 800596a:	4912      	ldr	r1, [pc, #72]	; (80059b4 <MX_USB_DEVICE_Init+0x50>)
 800596c:	4812      	ldr	r0, [pc, #72]	; (80059b8 <MX_USB_DEVICE_Init+0x54>)
 800596e:	f7fe ff34 	bl	80047da <USBD_Init>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d001      	beq.n	800597c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005978:	f7fa fe4a 	bl	8000610 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800597c:	490f      	ldr	r1, [pc, #60]	; (80059bc <MX_USB_DEVICE_Init+0x58>)
 800597e:	480e      	ldr	r0, [pc, #56]	; (80059b8 <MX_USB_DEVICE_Init+0x54>)
 8005980:	f7fe ff56 	bl	8004830 <USBD_RegisterClass>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800598a:	f7fa fe41 	bl	8000610 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800598e:	490c      	ldr	r1, [pc, #48]	; (80059c0 <MX_USB_DEVICE_Init+0x5c>)
 8005990:	4809      	ldr	r0, [pc, #36]	; (80059b8 <MX_USB_DEVICE_Init+0x54>)
 8005992:	f7fe fe87 	bl	80046a4 <USBD_CDC_RegisterInterface>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800599c:	f7fa fe38 	bl	8000610 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80059a0:	4805      	ldr	r0, [pc, #20]	; (80059b8 <MX_USB_DEVICE_Init+0x54>)
 80059a2:	f7fe ff5e 	bl	8004862 <USBD_Start>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80059ac:	f7fa fe30 	bl	8000610 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80059b0:	bf00      	nop
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	2000012c 	.word	0x2000012c
 80059b8:	20000250 	.word	0x20000250
 80059bc:	20000018 	.word	0x20000018
 80059c0:	2000011c 	.word	0x2000011c

080059c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80059c8:	2200      	movs	r2, #0
 80059ca:	4905      	ldr	r1, [pc, #20]	; (80059e0 <CDC_Init_FS+0x1c>)
 80059cc:	4805      	ldr	r0, [pc, #20]	; (80059e4 <CDC_Init_FS+0x20>)
 80059ce:	f7fe fe7f 	bl	80046d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80059d2:	4905      	ldr	r1, [pc, #20]	; (80059e8 <CDC_Init_FS+0x24>)
 80059d4:	4803      	ldr	r0, [pc, #12]	; (80059e4 <CDC_Init_FS+0x20>)
 80059d6:	f7fe fe94 	bl	8004702 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80059da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80059dc:	4618      	mov	r0, r3
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	200008fc 	.word	0x200008fc
 80059e4:	20000250 	.word	0x20000250
 80059e8:	20000514 	.word	0x20000514

080059ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80059ec:	b480      	push	{r7}
 80059ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80059f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bc80      	pop	{r7}
 80059f8:	4770      	bx	lr
	...

080059fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	4603      	mov	r3, r0
 8005a04:	6039      	str	r1, [r7, #0]
 8005a06:	71fb      	strb	r3, [r7, #7]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	2b23      	cmp	r3, #35	; 0x23
 8005a10:	d85c      	bhi.n	8005acc <CDC_Control_FS+0xd0>
 8005a12:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <CDC_Control_FS+0x1c>)
 8005a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a18:	08005acd 	.word	0x08005acd
 8005a1c:	08005acd 	.word	0x08005acd
 8005a20:	08005acd 	.word	0x08005acd
 8005a24:	08005acd 	.word	0x08005acd
 8005a28:	08005acd 	.word	0x08005acd
 8005a2c:	08005acd 	.word	0x08005acd
 8005a30:	08005acd 	.word	0x08005acd
 8005a34:	08005acd 	.word	0x08005acd
 8005a38:	08005acd 	.word	0x08005acd
 8005a3c:	08005acd 	.word	0x08005acd
 8005a40:	08005acd 	.word	0x08005acd
 8005a44:	08005acd 	.word	0x08005acd
 8005a48:	08005acd 	.word	0x08005acd
 8005a4c:	08005acd 	.word	0x08005acd
 8005a50:	08005acd 	.word	0x08005acd
 8005a54:	08005acd 	.word	0x08005acd
 8005a58:	08005acd 	.word	0x08005acd
 8005a5c:	08005acd 	.word	0x08005acd
 8005a60:	08005acd 	.word	0x08005acd
 8005a64:	08005acd 	.word	0x08005acd
 8005a68:	08005acd 	.word	0x08005acd
 8005a6c:	08005acd 	.word	0x08005acd
 8005a70:	08005acd 	.word	0x08005acd
 8005a74:	08005acd 	.word	0x08005acd
 8005a78:	08005acd 	.word	0x08005acd
 8005a7c:	08005acd 	.word	0x08005acd
 8005a80:	08005acd 	.word	0x08005acd
 8005a84:	08005acd 	.word	0x08005acd
 8005a88:	08005acd 	.word	0x08005acd
 8005a8c:	08005acd 	.word	0x08005acd
 8005a90:	08005acd 	.word	0x08005acd
 8005a94:	08005acd 	.word	0x08005acd
 8005a98:	08005aa9 	.word	0x08005aa9
 8005a9c:	08005abb 	.word	0x08005abb
 8005aa0:	08005acd 	.word	0x08005acd
 8005aa4:	08005acd 	.word	0x08005acd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	memcpy(buffer,pbuf,7);
 8005aa8:	4b0c      	ldr	r3, [pc, #48]	; (8005adc <CDC_Control_FS+0xe0>)
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	6811      	ldr	r1, [r2, #0]
 8005aae:	6019      	str	r1, [r3, #0]
 8005ab0:	8891      	ldrh	r1, [r2, #4]
 8005ab2:	7992      	ldrb	r2, [r2, #6]
 8005ab4:	8099      	strh	r1, [r3, #4]
 8005ab6:	719a      	strb	r2, [r3, #6]
    break;
 8005ab8:	e009      	b.n	8005ace <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
     	memcpy(pbuf,buffer,7);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	4a07      	ldr	r2, [pc, #28]	; (8005adc <CDC_Control_FS+0xe0>)
 8005abe:	6811      	ldr	r1, [r2, #0]
 8005ac0:	6019      	str	r1, [r3, #0]
 8005ac2:	8891      	ldrh	r1, [r2, #4]
 8005ac4:	7992      	ldrb	r2, [r2, #6]
 8005ac6:	8099      	strh	r1, [r3, #4]
 8005ac8:	719a      	strb	r2, [r3, #6]
    break;
 8005aca:	e000      	b.n	8005ace <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005acc:	bf00      	nop
  }

  return (USBD_OK);
 8005ace:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bc80      	pop	{r7}
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	20000ce4 	.word	0x20000ce4

08005ae0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	4808      	ldr	r0, [pc, #32]	; (8005b10 <CDC_Receive_FS+0x30>)
 8005aee:	f7fe fe08 	bl	8004702 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005af2:	4807      	ldr	r0, [pc, #28]	; (8005b10 <CDC_Receive_FS+0x30>)
 8005af4:	f7fe fe47 	bl	8004786 <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf,*Len);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 f807 	bl	8005b14 <CDC_Transmit_FS>
  return (USBD_OK);
 8005b06:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	20000250 	.word	0x20000250

08005b14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005b24:	4b0d      	ldr	r3, [pc, #52]	; (8005b5c <CDC_Transmit_FS+0x48>)
 8005b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e00b      	b.n	8005b52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005b3a:	887b      	ldrh	r3, [r7, #2]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	4806      	ldr	r0, [pc, #24]	; (8005b5c <CDC_Transmit_FS+0x48>)
 8005b42:	f7fe fdc5 	bl	80046d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005b46:	4805      	ldr	r0, [pc, #20]	; (8005b5c <CDC_Transmit_FS+0x48>)
 8005b48:	f7fe fdee 	bl	8004728 <USBD_CDC_TransmitPacket>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	20000250 	.word	0x20000250

08005b60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	4603      	mov	r3, r0
 8005b68:	6039      	str	r1, [r7, #0]
 8005b6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2212      	movs	r2, #18
 8005b70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005b72:	4b03      	ldr	r3, [pc, #12]	; (8005b80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bc80      	pop	{r7}
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	20000148 	.word	0x20000148

08005b84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	6039      	str	r1, [r7, #0]
 8005b8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2204      	movs	r2, #4
 8005b94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005b96:	4b03      	ldr	r3, [pc, #12]	; (8005ba4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bc80      	pop	{r7}
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	2000015c 	.word	0x2000015c

08005ba8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	4603      	mov	r3, r0
 8005bb0:	6039      	str	r1, [r7, #0]
 8005bb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d105      	bne.n	8005bc6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	4907      	ldr	r1, [pc, #28]	; (8005bdc <USBD_FS_ProductStrDescriptor+0x34>)
 8005bbe:	4808      	ldr	r0, [pc, #32]	; (8005be0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005bc0:	f7ff fdf3 	bl	80057aa <USBD_GetString>
 8005bc4:	e004      	b.n	8005bd0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	4904      	ldr	r1, [pc, #16]	; (8005bdc <USBD_FS_ProductStrDescriptor+0x34>)
 8005bca:	4805      	ldr	r0, [pc, #20]	; (8005be0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005bcc:	f7ff fded 	bl	80057aa <USBD_GetString>
  }
  return USBD_StrDesc;
 8005bd0:	4b02      	ldr	r3, [pc, #8]	; (8005bdc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000cec 	.word	0x20000cec
 8005be0:	08006584 	.word	0x08006584

08005be4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	4603      	mov	r3, r0
 8005bec:	6039      	str	r1, [r7, #0]
 8005bee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	4904      	ldr	r1, [pc, #16]	; (8005c04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005bf4:	4804      	ldr	r0, [pc, #16]	; (8005c08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005bf6:	f7ff fdd8 	bl	80057aa <USBD_GetString>
  return USBD_StrDesc;
 8005bfa:	4b02      	ldr	r3, [pc, #8]	; (8005c04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	20000cec 	.word	0x20000cec
 8005c08:	0800659c 	.word	0x0800659c

08005c0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	6039      	str	r1, [r7, #0]
 8005c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	221a      	movs	r2, #26
 8005c1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005c1e:	f000 f843 	bl	8005ca8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005c22:	4b02      	ldr	r3, [pc, #8]	; (8005c2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	20000160 	.word	0x20000160

08005c30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	4603      	mov	r3, r0
 8005c38:	6039      	str	r1, [r7, #0]
 8005c3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d105      	bne.n	8005c4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	4907      	ldr	r1, [pc, #28]	; (8005c64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005c46:	4808      	ldr	r0, [pc, #32]	; (8005c68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005c48:	f7ff fdaf 	bl	80057aa <USBD_GetString>
 8005c4c:	e004      	b.n	8005c58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	4904      	ldr	r1, [pc, #16]	; (8005c64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005c52:	4805      	ldr	r0, [pc, #20]	; (8005c68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005c54:	f7ff fda9 	bl	80057aa <USBD_GetString>
  }
  return USBD_StrDesc;
 8005c58:	4b02      	ldr	r3, [pc, #8]	; (8005c64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20000cec 	.word	0x20000cec
 8005c68:	080065b0 	.word	0x080065b0

08005c6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	4603      	mov	r3, r0
 8005c74:	6039      	str	r1, [r7, #0]
 8005c76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d105      	bne.n	8005c8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	4907      	ldr	r1, [pc, #28]	; (8005ca0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005c82:	4808      	ldr	r0, [pc, #32]	; (8005ca4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005c84:	f7ff fd91 	bl	80057aa <USBD_GetString>
 8005c88:	e004      	b.n	8005c94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	4904      	ldr	r1, [pc, #16]	; (8005ca0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005c8e:	4805      	ldr	r0, [pc, #20]	; (8005ca4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005c90:	f7ff fd8b 	bl	80057aa <USBD_GetString>
  }
  return USBD_StrDesc;
 8005c94:	4b02      	ldr	r3, [pc, #8]	; (8005ca0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	20000cec 	.word	0x20000cec
 8005ca4:	080065bc 	.word	0x080065bc

08005ca8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005cae:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <Get_SerialNum+0x44>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005cb4:	4b0e      	ldr	r3, [pc, #56]	; (8005cf0 <Get_SerialNum+0x48>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005cba:	4b0e      	ldr	r3, [pc, #56]	; (8005cf4 <Get_SerialNum+0x4c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d009      	beq.n	8005ce2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005cce:	2208      	movs	r2, #8
 8005cd0:	4909      	ldr	r1, [pc, #36]	; (8005cf8 <Get_SerialNum+0x50>)
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 f814 	bl	8005d00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005cd8:	2204      	movs	r2, #4
 8005cda:	4908      	ldr	r1, [pc, #32]	; (8005cfc <Get_SerialNum+0x54>)
 8005cdc:	68b8      	ldr	r0, [r7, #8]
 8005cde:	f000 f80f 	bl	8005d00 <IntToUnicode>
  }
}
 8005ce2:	bf00      	nop
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	1fff7a10 	.word	0x1fff7a10
 8005cf0:	1fff7a14 	.word	0x1fff7a14
 8005cf4:	1fff7a18 	.word	0x1fff7a18
 8005cf8:	20000162 	.word	0x20000162
 8005cfc:	20000172 	.word	0x20000172

08005d00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005d12:	2300      	movs	r3, #0
 8005d14:	75fb      	strb	r3, [r7, #23]
 8005d16:	e027      	b.n	8005d68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	0f1b      	lsrs	r3, r3, #28
 8005d1c:	2b09      	cmp	r3, #9
 8005d1e:	d80b      	bhi.n	8005d38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	0f1b      	lsrs	r3, r3, #28
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	7dfb      	ldrb	r3, [r7, #23]
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	440b      	add	r3, r1
 8005d30:	3230      	adds	r2, #48	; 0x30
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	e00a      	b.n	8005d4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	0f1b      	lsrs	r3, r3, #28
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	7dfb      	ldrb	r3, [r7, #23]
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	4619      	mov	r1, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	440b      	add	r3, r1
 8005d48:	3237      	adds	r2, #55	; 0x37
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	3301      	adds	r3, #1
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	2200      	movs	r2, #0
 8005d60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005d62:	7dfb      	ldrb	r3, [r7, #23]
 8005d64:	3301      	adds	r3, #1
 8005d66:	75fb      	strb	r3, [r7, #23]
 8005d68:	7dfa      	ldrb	r2, [r7, #23]
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d3d3      	bcc.n	8005d18 <IntToUnicode+0x18>
  }
}
 8005d70:	bf00      	nop
 8005d72:	371c      	adds	r7, #28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bc80      	pop	{r7}
 8005d78:	4770      	bx	lr
	...

08005d7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08a      	sub	sp, #40	; 0x28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d84:	f107 0314 	add.w	r3, r7, #20
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	605a      	str	r2, [r3, #4]
 8005d8e:	609a      	str	r2, [r3, #8]
 8005d90:	60da      	str	r2, [r3, #12]
 8005d92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d9c:	d13a      	bne.n	8005e14 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d9e:	2300      	movs	r3, #0
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	4b1e      	ldr	r3, [pc, #120]	; (8005e1c <HAL_PCD_MspInit+0xa0>)
 8005da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da6:	4a1d      	ldr	r2, [pc, #116]	; (8005e1c <HAL_PCD_MspInit+0xa0>)
 8005da8:	f043 0301 	orr.w	r3, r3, #1
 8005dac:	6313      	str	r3, [r2, #48]	; 0x30
 8005dae:	4b1b      	ldr	r3, [pc, #108]	; (8005e1c <HAL_PCD_MspInit+0xa0>)
 8005db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	613b      	str	r3, [r7, #16]
 8005db8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005dba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005dcc:	230a      	movs	r3, #10
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dd0:	f107 0314 	add.w	r3, r7, #20
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4812      	ldr	r0, [pc, #72]	; (8005e20 <HAL_PCD_MspInit+0xa4>)
 8005dd8:	f7fa fec6 	bl	8000b68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005ddc:	4b0f      	ldr	r3, [pc, #60]	; (8005e1c <HAL_PCD_MspInit+0xa0>)
 8005dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de0:	4a0e      	ldr	r2, [pc, #56]	; (8005e1c <HAL_PCD_MspInit+0xa0>)
 8005de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de6:	6353      	str	r3, [r2, #52]	; 0x34
 8005de8:	2300      	movs	r3, #0
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <HAL_PCD_MspInit+0xa0>)
 8005dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df0:	4a0a      	ldr	r2, [pc, #40]	; (8005e1c <HAL_PCD_MspInit+0xa0>)
 8005df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005df6:	6453      	str	r3, [r2, #68]	; 0x44
 8005df8:	4b08      	ldr	r3, [pc, #32]	; (8005e1c <HAL_PCD_MspInit+0xa0>)
 8005dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005e04:	2200      	movs	r2, #0
 8005e06:	2100      	movs	r1, #0
 8005e08:	2043      	movs	r0, #67	; 0x43
 8005e0a:	f7fa fe76 	bl	8000afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005e0e:	2043      	movs	r0, #67	; 0x43
 8005e10:	f7fa fe8f 	bl	8000b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005e14:	bf00      	nop
 8005e16:	3728      	adds	r7, #40	; 0x28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	40023800 	.word	0x40023800
 8005e20:	40020000 	.word	0x40020000

08005e24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	f7fe fd59 	bl	80048f2 <USBD_LL_SetupStage>
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8005e5a:	78fa      	ldrb	r2, [r7, #3]
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	440b      	add	r3, r1
 8005e68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	78fb      	ldrb	r3, [r7, #3]
 8005e70:	4619      	mov	r1, r3
 8005e72:	f7fe fd89 	bl	8004988 <USBD_LL_DataOutStage>
}
 8005e76:	bf00      	nop
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	460b      	mov	r3, r1
 8005e88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8005e90:	78fa      	ldrb	r2, [r7, #3]
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	4613      	mov	r3, r2
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	1a9b      	subs	r3, r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	440b      	add	r3, r1
 8005e9e:	3348      	adds	r3, #72	; 0x48
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	78fb      	ldrb	r3, [r7, #3]
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	f7fe fde0 	bl	8004a6a <USBD_LL_DataInStage>
}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fe fef0 	bl	8004ca6 <USBD_LL_SOF>
}
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b084      	sub	sp, #16
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d102      	bne.n	8005ee8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	73fb      	strb	r3, [r7, #15]
 8005ee6:	e008      	b.n	8005efa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d102      	bne.n	8005ef6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	73fb      	strb	r3, [r7, #15]
 8005ef4:	e001      	b.n	8005efa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005ef6:	f7fa fb8b 	bl	8000610 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8005f00:	7bfa      	ldrb	r2, [r7, #15]
 8005f02:	4611      	mov	r1, r2
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fe fe96 	bl	8004c36 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fe fe4f 	bl	8004bb4 <USBD_LL_Reset>
}
 8005f16:	bf00      	nop
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fe fe90 	bl	8004c54 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	6812      	ldr	r2, [r2, #0]
 8005f42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f46:	f043 0301 	orr.w	r3, r3, #1
 8005f4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d005      	beq.n	8005f60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005f54:	4b04      	ldr	r3, [pc, #16]	; (8005f68 <HAL_PCD_SuspendCallback+0x48>)
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	4a03      	ldr	r2, [pc, #12]	; (8005f68 <HAL_PCD_SuspendCallback+0x48>)
 8005f5a:	f043 0306 	orr.w	r3, r3, #6
 8005f5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	e000ed00 	.word	0xe000ed00

08005f6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fe fe7e 	bl	8004c7c <USBD_LL_Resume>
}
 8005f80:	bf00      	nop
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8005f9a:	78fa      	ldrb	r2, [r7, #3]
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fe fea7 	bl	8004cf2 <USBD_LL_IsoOUTIncomplete>
}
 8005fa4:	bf00      	nop
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8005fbe:	78fa      	ldrb	r2, [r7, #3]
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fe fe89 	bl	8004cda <USBD_LL_IsoINIncomplete>
}
 8005fc8:	bf00      	nop
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe fe93 	bl	8004d0a <USBD_LL_DevConnected>
}
 8005fe4:	bf00      	nop
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe fe8f 	bl	8004d1e <USBD_LL_DevDisconnected>
}
 8006000:	bf00      	nop
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d139      	bne.n	800608c <USBD_LL_Init+0x84>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006018:	4a1f      	ldr	r2, [pc, #124]	; (8006098 <USBD_LL_Init+0x90>)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a1d      	ldr	r2, [pc, #116]	; (8006098 <USBD_LL_Init+0x90>)
 8006024:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006028:	4b1b      	ldr	r3, [pc, #108]	; (8006098 <USBD_LL_Init+0x90>)
 800602a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800602e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006030:	4b19      	ldr	r3, [pc, #100]	; (8006098 <USBD_LL_Init+0x90>)
 8006032:	2204      	movs	r2, #4
 8006034:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006036:	4b18      	ldr	r3, [pc, #96]	; (8006098 <USBD_LL_Init+0x90>)
 8006038:	2202      	movs	r2, #2
 800603a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800603c:	4b16      	ldr	r3, [pc, #88]	; (8006098 <USBD_LL_Init+0x90>)
 800603e:	2200      	movs	r2, #0
 8006040:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006042:	4b15      	ldr	r3, [pc, #84]	; (8006098 <USBD_LL_Init+0x90>)
 8006044:	2202      	movs	r2, #2
 8006046:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006048:	4b13      	ldr	r3, [pc, #76]	; (8006098 <USBD_LL_Init+0x90>)
 800604a:	2200      	movs	r2, #0
 800604c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800604e:	4b12      	ldr	r3, [pc, #72]	; (8006098 <USBD_LL_Init+0x90>)
 8006050:	2200      	movs	r2, #0
 8006052:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006054:	4b10      	ldr	r3, [pc, #64]	; (8006098 <USBD_LL_Init+0x90>)
 8006056:	2200      	movs	r2, #0
 8006058:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800605a:	4b0f      	ldr	r3, [pc, #60]	; (8006098 <USBD_LL_Init+0x90>)
 800605c:	2200      	movs	r2, #0
 800605e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006060:	480d      	ldr	r0, [pc, #52]	; (8006098 <USBD_LL_Init+0x90>)
 8006062:	f7fa ff1f 	bl	8000ea4 <HAL_PCD_Init>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800606c:	f7fa fad0 	bl	8000610 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006070:	2180      	movs	r1, #128	; 0x80
 8006072:	4809      	ldr	r0, [pc, #36]	; (8006098 <USBD_LL_Init+0x90>)
 8006074:	f7fc f85c 	bl	8002130 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006078:	2240      	movs	r2, #64	; 0x40
 800607a:	2100      	movs	r1, #0
 800607c:	4806      	ldr	r0, [pc, #24]	; (8006098 <USBD_LL_Init+0x90>)
 800607e:	f7fc f811 	bl	80020a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006082:	2280      	movs	r2, #128	; 0x80
 8006084:	2101      	movs	r1, #1
 8006086:	4804      	ldr	r0, [pc, #16]	; (8006098 <USBD_LL_Init+0x90>)
 8006088:	f7fc f80c 	bl	80020a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	20000eec 	.word	0x20000eec

0800609c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060a8:	2300      	movs	r3, #0
 80060aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fb f813 	bl	80010de <HAL_PCD_Start>
 80060b8:	4603      	mov	r3, r0
 80060ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 f92e 	bl	8006320 <USBD_Get_USB_Status>
 80060c4:	4603      	mov	r3, r0
 80060c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80060c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
 80060da:	4608      	mov	r0, r1
 80060dc:	4611      	mov	r1, r2
 80060de:	461a      	mov	r2, r3
 80060e0:	4603      	mov	r3, r0
 80060e2:	70fb      	strb	r3, [r7, #3]
 80060e4:	460b      	mov	r3, r1
 80060e6:	70bb      	strb	r3, [r7, #2]
 80060e8:	4613      	mov	r3, r2
 80060ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060f0:	2300      	movs	r3, #0
 80060f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80060fa:	78bb      	ldrb	r3, [r7, #2]
 80060fc:	883a      	ldrh	r2, [r7, #0]
 80060fe:	78f9      	ldrb	r1, [r7, #3]
 8006100:	f7fb fbd8 	bl	80018b4 <HAL_PCD_EP_Open>
 8006104:	4603      	mov	r3, r0
 8006106:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	4618      	mov	r0, r3
 800610c:	f000 f908 	bl	8006320 <USBD_Get_USB_Status>
 8006110:	4603      	mov	r3, r0
 8006112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006114:	7bbb      	ldrb	r3, [r7, #14]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	460b      	mov	r3, r1
 8006128:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006138:	78fa      	ldrb	r2, [r7, #3]
 800613a:	4611      	mov	r1, r2
 800613c:	4618      	mov	r0, r3
 800613e:	f7fb fc21 	bl	8001984 <HAL_PCD_EP_Close>
 8006142:	4603      	mov	r3, r0
 8006144:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006146:	7bfb      	ldrb	r3, [r7, #15]
 8006148:	4618      	mov	r0, r3
 800614a:	f000 f8e9 	bl	8006320 <USBD_Get_USB_Status>
 800614e:	4603      	mov	r3, r0
 8006150:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006152:	7bbb      	ldrb	r3, [r7, #14]
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006168:	2300      	movs	r3, #0
 800616a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006176:	78fa      	ldrb	r2, [r7, #3]
 8006178:	4611      	mov	r1, r2
 800617a:	4618      	mov	r0, r3
 800617c:	f7fb fcf8 	bl	8001b70 <HAL_PCD_EP_SetStall>
 8006180:	4603      	mov	r3, r0
 8006182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	4618      	mov	r0, r3
 8006188:	f000 f8ca 	bl	8006320 <USBD_Get_USB_Status>
 800618c:	4603      	mov	r3, r0
 800618e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006190:	7bbb      	ldrb	r3, [r7, #14]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800619a:	b580      	push	{r7, lr}
 800619c:	b084      	sub	sp, #16
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	460b      	mov	r3, r1
 80061a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061b4:	78fa      	ldrb	r2, [r7, #3]
 80061b6:	4611      	mov	r1, r2
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fb fd3d 	bl	8001c38 <HAL_PCD_EP_ClrStall>
 80061be:	4603      	mov	r3, r0
 80061c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 f8ab 	bl	8006320 <USBD_Get_USB_Status>
 80061ca:	4603      	mov	r3, r0
 80061cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80061ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80061ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	da0b      	bge.n	800620c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80061f4:	78fb      	ldrb	r3, [r7, #3]
 80061f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061fa:	68f9      	ldr	r1, [r7, #12]
 80061fc:	4613      	mov	r3, r2
 80061fe:	00db      	lsls	r3, r3, #3
 8006200:	1a9b      	subs	r3, r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	333e      	adds	r3, #62	; 0x3e
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	e00b      	b.n	8006224 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006212:	68f9      	ldr	r1, [r7, #12]
 8006214:	4613      	mov	r3, r2
 8006216:	00db      	lsls	r3, r3, #3
 8006218:	1a9b      	subs	r3, r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	440b      	add	r3, r1
 800621e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006222:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	bc80      	pop	{r7}
 800622c:	4770      	bx	lr

0800622e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b084      	sub	sp, #16
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	460b      	mov	r3, r1
 8006238:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006248:	78fa      	ldrb	r2, [r7, #3]
 800624a:	4611      	mov	r1, r2
 800624c:	4618      	mov	r0, r3
 800624e:	f7fb fb0c 	bl	800186a <HAL_PCD_SetAddress>
 8006252:	4603      	mov	r3, r0
 8006254:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006256:	7bfb      	ldrb	r3, [r7, #15]
 8006258:	4618      	mov	r0, r3
 800625a:	f000 f861 	bl	8006320 <USBD_Get_USB_Status>
 800625e:	4603      	mov	r3, r0
 8006260:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006262:	7bbb      	ldrb	r3, [r7, #14]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3710      	adds	r7, #16
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	607a      	str	r2, [r7, #4]
 8006276:	461a      	mov	r2, r3
 8006278:	460b      	mov	r3, r1
 800627a:	72fb      	strb	r3, [r7, #11]
 800627c:	4613      	mov	r3, r2
 800627e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006280:	2300      	movs	r3, #0
 8006282:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800628e:	893b      	ldrh	r3, [r7, #8]
 8006290:	7af9      	ldrb	r1, [r7, #11]
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	f7fb fc22 	bl	8001adc <HAL_PCD_EP_Transmit>
 8006298:	4603      	mov	r3, r0
 800629a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800629c:	7dfb      	ldrb	r3, [r7, #23]
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 f83e 	bl	8006320 <USBD_Get_USB_Status>
 80062a4:	4603      	mov	r3, r0
 80062a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80062a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3718      	adds	r7, #24
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b086      	sub	sp, #24
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	607a      	str	r2, [r7, #4]
 80062bc:	461a      	mov	r2, r3
 80062be:	460b      	mov	r3, r1
 80062c0:	72fb      	strb	r3, [r7, #11]
 80062c2:	4613      	mov	r3, r2
 80062c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80062d4:	893b      	ldrh	r3, [r7, #8]
 80062d6:	7af9      	ldrb	r1, [r7, #11]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	f7fb fb9d 	bl	8001a18 <HAL_PCD_EP_Receive>
 80062de:	4603      	mov	r3, r0
 80062e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062e2:	7dfb      	ldrb	r3, [r7, #23]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 f81b 	bl	8006320 <USBD_Get_USB_Status>
 80062ea:	4603      	mov	r3, r0
 80062ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80062ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	460b      	mov	r3, r1
 8006302:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800630a:	78fa      	ldrb	r2, [r7, #3]
 800630c:	4611      	mov	r1, r2
 800630e:	4618      	mov	r0, r3
 8006310:	f7fb fbcd 	bl	8001aae <HAL_PCD_EP_GetRxCount>
 8006314:	4603      	mov	r3, r0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
	...

08006320 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	4603      	mov	r3, r0
 8006328:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800632e:	79fb      	ldrb	r3, [r7, #7]
 8006330:	2b03      	cmp	r3, #3
 8006332:	d817      	bhi.n	8006364 <USBD_Get_USB_Status+0x44>
 8006334:	a201      	add	r2, pc, #4	; (adr r2, 800633c <USBD_Get_USB_Status+0x1c>)
 8006336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800633a:	bf00      	nop
 800633c:	0800634d 	.word	0x0800634d
 8006340:	08006353 	.word	0x08006353
 8006344:	08006359 	.word	0x08006359
 8006348:	0800635f 	.word	0x0800635f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	73fb      	strb	r3, [r7, #15]
    break;
 8006350:	e00b      	b.n	800636a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006352:	2302      	movs	r3, #2
 8006354:	73fb      	strb	r3, [r7, #15]
    break;
 8006356:	e008      	b.n	800636a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006358:	2301      	movs	r3, #1
 800635a:	73fb      	strb	r3, [r7, #15]
    break;
 800635c:	e005      	b.n	800636a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800635e:	2302      	movs	r3, #2
 8006360:	73fb      	strb	r3, [r7, #15]
    break;
 8006362:	e002      	b.n	800636a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006364:	2302      	movs	r3, #2
 8006366:	73fb      	strb	r3, [r7, #15]
    break;
 8006368:	bf00      	nop
  }
  return usb_status;
 800636a:	7bfb      	ldrb	r3, [r7, #15]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	bc80      	pop	{r7}
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop

08006378 <__errno>:
 8006378:	4b01      	ldr	r3, [pc, #4]	; (8006380 <__errno+0x8>)
 800637a:	6818      	ldr	r0, [r3, #0]
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	2000017c 	.word	0x2000017c

08006384 <__libc_init_array>:
 8006384:	b570      	push	{r4, r5, r6, lr}
 8006386:	2500      	movs	r5, #0
 8006388:	4e0c      	ldr	r6, [pc, #48]	; (80063bc <__libc_init_array+0x38>)
 800638a:	4c0d      	ldr	r4, [pc, #52]	; (80063c0 <__libc_init_array+0x3c>)
 800638c:	1ba4      	subs	r4, r4, r6
 800638e:	10a4      	asrs	r4, r4, #2
 8006390:	42a5      	cmp	r5, r4
 8006392:	d109      	bne.n	80063a8 <__libc_init_array+0x24>
 8006394:	f000 f8ea 	bl	800656c <_init>
 8006398:	2500      	movs	r5, #0
 800639a:	4e0a      	ldr	r6, [pc, #40]	; (80063c4 <__libc_init_array+0x40>)
 800639c:	4c0a      	ldr	r4, [pc, #40]	; (80063c8 <__libc_init_array+0x44>)
 800639e:	1ba4      	subs	r4, r4, r6
 80063a0:	10a4      	asrs	r4, r4, #2
 80063a2:	42a5      	cmp	r5, r4
 80063a4:	d105      	bne.n	80063b2 <__libc_init_array+0x2e>
 80063a6:	bd70      	pop	{r4, r5, r6, pc}
 80063a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063ac:	4798      	blx	r3
 80063ae:	3501      	adds	r5, #1
 80063b0:	e7ee      	b.n	8006390 <__libc_init_array+0xc>
 80063b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063b6:	4798      	blx	r3
 80063b8:	3501      	adds	r5, #1
 80063ba:	e7f2      	b.n	80063a2 <__libc_init_array+0x1e>
 80063bc:	080065ec 	.word	0x080065ec
 80063c0:	080065ec 	.word	0x080065ec
 80063c4:	080065ec 	.word	0x080065ec
 80063c8:	080065f0 	.word	0x080065f0

080063cc <malloc>:
 80063cc:	4b02      	ldr	r3, [pc, #8]	; (80063d8 <malloc+0xc>)
 80063ce:	4601      	mov	r1, r0
 80063d0:	6818      	ldr	r0, [r3, #0]
 80063d2:	f000 b85f 	b.w	8006494 <_malloc_r>
 80063d6:	bf00      	nop
 80063d8:	2000017c 	.word	0x2000017c

080063dc <free>:
 80063dc:	4b02      	ldr	r3, [pc, #8]	; (80063e8 <free+0xc>)
 80063de:	4601      	mov	r1, r0
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	f000 b80b 	b.w	80063fc <_free_r>
 80063e6:	bf00      	nop
 80063e8:	2000017c 	.word	0x2000017c

080063ec <memset>:
 80063ec:	4603      	mov	r3, r0
 80063ee:	4402      	add	r2, r0
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d100      	bne.n	80063f6 <memset+0xa>
 80063f4:	4770      	bx	lr
 80063f6:	f803 1b01 	strb.w	r1, [r3], #1
 80063fa:	e7f9      	b.n	80063f0 <memset+0x4>

080063fc <_free_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4605      	mov	r5, r0
 8006400:	2900      	cmp	r1, #0
 8006402:	d043      	beq.n	800648c <_free_r+0x90>
 8006404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006408:	1f0c      	subs	r4, r1, #4
 800640a:	2b00      	cmp	r3, #0
 800640c:	bfb8      	it	lt
 800640e:	18e4      	addlt	r4, r4, r3
 8006410:	f000 f8aa 	bl	8006568 <__malloc_lock>
 8006414:	4a1e      	ldr	r2, [pc, #120]	; (8006490 <_free_r+0x94>)
 8006416:	6813      	ldr	r3, [r2, #0]
 8006418:	4610      	mov	r0, r2
 800641a:	b933      	cbnz	r3, 800642a <_free_r+0x2e>
 800641c:	6063      	str	r3, [r4, #4]
 800641e:	6014      	str	r4, [r2, #0]
 8006420:	4628      	mov	r0, r5
 8006422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006426:	f000 b8a0 	b.w	800656a <__malloc_unlock>
 800642a:	42a3      	cmp	r3, r4
 800642c:	d90b      	bls.n	8006446 <_free_r+0x4a>
 800642e:	6821      	ldr	r1, [r4, #0]
 8006430:	1862      	adds	r2, r4, r1
 8006432:	4293      	cmp	r3, r2
 8006434:	bf01      	itttt	eq
 8006436:	681a      	ldreq	r2, [r3, #0]
 8006438:	685b      	ldreq	r3, [r3, #4]
 800643a:	1852      	addeq	r2, r2, r1
 800643c:	6022      	streq	r2, [r4, #0]
 800643e:	6063      	str	r3, [r4, #4]
 8006440:	6004      	str	r4, [r0, #0]
 8006442:	e7ed      	b.n	8006420 <_free_r+0x24>
 8006444:	4613      	mov	r3, r2
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	b10a      	cbz	r2, 800644e <_free_r+0x52>
 800644a:	42a2      	cmp	r2, r4
 800644c:	d9fa      	bls.n	8006444 <_free_r+0x48>
 800644e:	6819      	ldr	r1, [r3, #0]
 8006450:	1858      	adds	r0, r3, r1
 8006452:	42a0      	cmp	r0, r4
 8006454:	d10b      	bne.n	800646e <_free_r+0x72>
 8006456:	6820      	ldr	r0, [r4, #0]
 8006458:	4401      	add	r1, r0
 800645a:	1858      	adds	r0, r3, r1
 800645c:	4282      	cmp	r2, r0
 800645e:	6019      	str	r1, [r3, #0]
 8006460:	d1de      	bne.n	8006420 <_free_r+0x24>
 8006462:	6810      	ldr	r0, [r2, #0]
 8006464:	6852      	ldr	r2, [r2, #4]
 8006466:	4401      	add	r1, r0
 8006468:	6019      	str	r1, [r3, #0]
 800646a:	605a      	str	r2, [r3, #4]
 800646c:	e7d8      	b.n	8006420 <_free_r+0x24>
 800646e:	d902      	bls.n	8006476 <_free_r+0x7a>
 8006470:	230c      	movs	r3, #12
 8006472:	602b      	str	r3, [r5, #0]
 8006474:	e7d4      	b.n	8006420 <_free_r+0x24>
 8006476:	6820      	ldr	r0, [r4, #0]
 8006478:	1821      	adds	r1, r4, r0
 800647a:	428a      	cmp	r2, r1
 800647c:	bf01      	itttt	eq
 800647e:	6811      	ldreq	r1, [r2, #0]
 8006480:	6852      	ldreq	r2, [r2, #4]
 8006482:	1809      	addeq	r1, r1, r0
 8006484:	6021      	streq	r1, [r4, #0]
 8006486:	6062      	str	r2, [r4, #4]
 8006488:	605c      	str	r4, [r3, #4]
 800648a:	e7c9      	b.n	8006420 <_free_r+0x24>
 800648c:	bd38      	pop	{r3, r4, r5, pc}
 800648e:	bf00      	nop
 8006490:	20000204 	.word	0x20000204

08006494 <_malloc_r>:
 8006494:	b570      	push	{r4, r5, r6, lr}
 8006496:	1ccd      	adds	r5, r1, #3
 8006498:	f025 0503 	bic.w	r5, r5, #3
 800649c:	3508      	adds	r5, #8
 800649e:	2d0c      	cmp	r5, #12
 80064a0:	bf38      	it	cc
 80064a2:	250c      	movcc	r5, #12
 80064a4:	2d00      	cmp	r5, #0
 80064a6:	4606      	mov	r6, r0
 80064a8:	db01      	blt.n	80064ae <_malloc_r+0x1a>
 80064aa:	42a9      	cmp	r1, r5
 80064ac:	d903      	bls.n	80064b6 <_malloc_r+0x22>
 80064ae:	230c      	movs	r3, #12
 80064b0:	6033      	str	r3, [r6, #0]
 80064b2:	2000      	movs	r0, #0
 80064b4:	bd70      	pop	{r4, r5, r6, pc}
 80064b6:	f000 f857 	bl	8006568 <__malloc_lock>
 80064ba:	4a21      	ldr	r2, [pc, #132]	; (8006540 <_malloc_r+0xac>)
 80064bc:	6814      	ldr	r4, [r2, #0]
 80064be:	4621      	mov	r1, r4
 80064c0:	b991      	cbnz	r1, 80064e8 <_malloc_r+0x54>
 80064c2:	4c20      	ldr	r4, [pc, #128]	; (8006544 <_malloc_r+0xb0>)
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	b91b      	cbnz	r3, 80064d0 <_malloc_r+0x3c>
 80064c8:	4630      	mov	r0, r6
 80064ca:	f000 f83d 	bl	8006548 <_sbrk_r>
 80064ce:	6020      	str	r0, [r4, #0]
 80064d0:	4629      	mov	r1, r5
 80064d2:	4630      	mov	r0, r6
 80064d4:	f000 f838 	bl	8006548 <_sbrk_r>
 80064d8:	1c43      	adds	r3, r0, #1
 80064da:	d124      	bne.n	8006526 <_malloc_r+0x92>
 80064dc:	230c      	movs	r3, #12
 80064de:	4630      	mov	r0, r6
 80064e0:	6033      	str	r3, [r6, #0]
 80064e2:	f000 f842 	bl	800656a <__malloc_unlock>
 80064e6:	e7e4      	b.n	80064b2 <_malloc_r+0x1e>
 80064e8:	680b      	ldr	r3, [r1, #0]
 80064ea:	1b5b      	subs	r3, r3, r5
 80064ec:	d418      	bmi.n	8006520 <_malloc_r+0x8c>
 80064ee:	2b0b      	cmp	r3, #11
 80064f0:	d90f      	bls.n	8006512 <_malloc_r+0x7e>
 80064f2:	600b      	str	r3, [r1, #0]
 80064f4:	18cc      	adds	r4, r1, r3
 80064f6:	50cd      	str	r5, [r1, r3]
 80064f8:	4630      	mov	r0, r6
 80064fa:	f000 f836 	bl	800656a <__malloc_unlock>
 80064fe:	f104 000b 	add.w	r0, r4, #11
 8006502:	1d23      	adds	r3, r4, #4
 8006504:	f020 0007 	bic.w	r0, r0, #7
 8006508:	1ac3      	subs	r3, r0, r3
 800650a:	d0d3      	beq.n	80064b4 <_malloc_r+0x20>
 800650c:	425a      	negs	r2, r3
 800650e:	50e2      	str	r2, [r4, r3]
 8006510:	e7d0      	b.n	80064b4 <_malloc_r+0x20>
 8006512:	684b      	ldr	r3, [r1, #4]
 8006514:	428c      	cmp	r4, r1
 8006516:	bf16      	itet	ne
 8006518:	6063      	strne	r3, [r4, #4]
 800651a:	6013      	streq	r3, [r2, #0]
 800651c:	460c      	movne	r4, r1
 800651e:	e7eb      	b.n	80064f8 <_malloc_r+0x64>
 8006520:	460c      	mov	r4, r1
 8006522:	6849      	ldr	r1, [r1, #4]
 8006524:	e7cc      	b.n	80064c0 <_malloc_r+0x2c>
 8006526:	1cc4      	adds	r4, r0, #3
 8006528:	f024 0403 	bic.w	r4, r4, #3
 800652c:	42a0      	cmp	r0, r4
 800652e:	d005      	beq.n	800653c <_malloc_r+0xa8>
 8006530:	1a21      	subs	r1, r4, r0
 8006532:	4630      	mov	r0, r6
 8006534:	f000 f808 	bl	8006548 <_sbrk_r>
 8006538:	3001      	adds	r0, #1
 800653a:	d0cf      	beq.n	80064dc <_malloc_r+0x48>
 800653c:	6025      	str	r5, [r4, #0]
 800653e:	e7db      	b.n	80064f8 <_malloc_r+0x64>
 8006540:	20000204 	.word	0x20000204
 8006544:	20000208 	.word	0x20000208

08006548 <_sbrk_r>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	2300      	movs	r3, #0
 800654c:	4c05      	ldr	r4, [pc, #20]	; (8006564 <_sbrk_r+0x1c>)
 800654e:	4605      	mov	r5, r0
 8006550:	4608      	mov	r0, r1
 8006552:	6023      	str	r3, [r4, #0]
 8006554:	f7fa f904 	bl	8000760 <_sbrk>
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	d102      	bne.n	8006562 <_sbrk_r+0x1a>
 800655c:	6823      	ldr	r3, [r4, #0]
 800655e:	b103      	cbz	r3, 8006562 <_sbrk_r+0x1a>
 8006560:	602b      	str	r3, [r5, #0]
 8006562:	bd38      	pop	{r3, r4, r5, pc}
 8006564:	200012ec 	.word	0x200012ec

08006568 <__malloc_lock>:
 8006568:	4770      	bx	lr

0800656a <__malloc_unlock>:
 800656a:	4770      	bx	lr

0800656c <_init>:
 800656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656e:	bf00      	nop
 8006570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006572:	bc08      	pop	{r3}
 8006574:	469e      	mov	lr, r3
 8006576:	4770      	bx	lr

08006578 <_fini>:
 8006578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657a:	bf00      	nop
 800657c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800657e:	bc08      	pop	{r3}
 8006580:	469e      	mov	lr, r3
 8006582:	4770      	bx	lr
