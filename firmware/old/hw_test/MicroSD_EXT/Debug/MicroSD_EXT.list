
MicroSD_EXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ca0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  08008e28  08008e28  00018e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009340  08009340  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08009340  08009340  00019340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009348  08009348  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009348  08009348  00019348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800934c  0800934c  0001934c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08009350  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          00000a38  20000020  20000020  00020020  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000a58  20000a58  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014944  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029e1  00000000  00000000  00034994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001218  00000000  00000000  00037378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001130  00000000  00000000  00038590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021040  00000000  00000000  000396c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001809d  00000000  00000000  0005a700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2c0b  00000000  00000000  0007279d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001353a8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cb4  00000000  00000000  001353f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e10 	.word	0x08008e10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08008e10 	.word	0x08008e10

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fe48 	bl	8001174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f86e 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f982 	bl	80007f0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80004ec:	f000 f8d2 	bl	8000694 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80004f0:	f000 f954 	bl	800079c <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80004f4:	f003 fec8 	bl	8004288 <MX_FATFS_Init>
  MX_TIM2_Init();
 80004f8:	f000 f902 	bl	8000700 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
   HAL_Delay(2000);
 80004fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000500:	f000 feaa 	bl	8001258 <HAL_Delay>
   HAL_UART_Transmit(&huart1,(uint8_t*)"Start\n\r",9,100);
 8000504:	2364      	movs	r3, #100	; 0x64
 8000506:	2209      	movs	r2, #9
 8000508:	4922      	ldr	r1, [pc, #136]	; (8000594 <main+0xb8>)
 800050a:	4823      	ldr	r0, [pc, #140]	; (8000598 <main+0xbc>)
 800050c:	f002 fef5 	bl	80032fa <HAL_UART_Transmit>

   disk_initialize(SDFatFs.drv);
 8000510:	4b22      	ldr	r3, [pc, #136]	; (800059c <main+0xc0>)
 8000512:	785b      	ldrb	r3, [r3, #1]
 8000514:	4618      	mov	r0, r3
 8000516:	f003 ffe1 	bl	80044dc <disk_initialize>

   HAL_UART_Transmit(&huart1,(uint8_t*)"Mounted\n\r",11,100);
 800051a:	2364      	movs	r3, #100	; 0x64
 800051c:	220b      	movs	r2, #11
 800051e:	4920      	ldr	r1, [pc, #128]	; (80005a0 <main+0xc4>)
 8000520:	481d      	ldr	r0, [pc, #116]	; (8000598 <main+0xbc>)
 8000522:	f002 feea 	bl	80032fa <HAL_UART_Transmit>

   if(f_mount(&SDFatFs,"",1)!=FR_OK)
 8000526:	2201      	movs	r2, #1
 8000528:	491e      	ldr	r1, [pc, #120]	; (80005a4 <main+0xc8>)
 800052a:	481c      	ldr	r0, [pc, #112]	; (800059c <main+0xc0>)
 800052c:	f007 fc12 	bl	8007d54 <f_mount>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d007      	beq.n	8000546 <main+0x6a>
   {

 	  HAL_UART_Transmit(&huart1,(uint8_t*)"MNT error\n\r",13,100);
 8000536:	2364      	movs	r3, #100	; 0x64
 8000538:	220d      	movs	r2, #13
 800053a:	491b      	ldr	r1, [pc, #108]	; (80005a8 <main+0xcc>)
 800053c:	4816      	ldr	r0, [pc, #88]	; (8000598 <main+0xbc>)
 800053e:	f002 fedc 	bl	80032fa <HAL_UART_Transmit>
       Error_Handler();
 8000542:	f000 fa5d 	bl	8000a00 <Error_Handler>
   }

   if(f_open(&MyFile,"lastdata.txt",FA_CREATE_ALWAYS|FA_WRITE)!=FR_OK)
 8000546:	220a      	movs	r2, #10
 8000548:	4918      	ldr	r1, [pc, #96]	; (80005ac <main+0xd0>)
 800054a:	4819      	ldr	r0, [pc, #100]	; (80005b0 <main+0xd4>)
 800054c:	f007 fc48 	bl	8007de0 <f_open>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d008      	beq.n	8000568 <main+0x8c>
        {

 	      HAL_UART_Transmit(&huart1,(uint8_t*)"SD error\n\r",12,100);
 8000556:	2364      	movs	r3, #100	; 0x64
 8000558:	220c      	movs	r2, #12
 800055a:	4916      	ldr	r1, [pc, #88]	; (80005b4 <main+0xd8>)
 800055c:	480e      	ldr	r0, [pc, #56]	; (8000598 <main+0xbc>)
 800055e:	f002 fecc 	bl	80032fa <HAL_UART_Transmit>
           Error_Handler();
 8000562:	f000 fa4d 	bl	8000a00 <Error_Handler>
 8000566:	e005      	b.n	8000574 <main+0x98>
        }
    else
  	  {
  	     HAL_UART_Transmit(&huart1,(uint8_t*)"Created\n\r",11,100);
 8000568:	2364      	movs	r3, #100	; 0x64
 800056a:	220b      	movs	r2, #11
 800056c:	4912      	ldr	r1, [pc, #72]	; (80005b8 <main+0xdc>)
 800056e:	480a      	ldr	r0, [pc, #40]	; (8000598 <main+0xbc>)
 8000570:	f002 fec3 	bl	80032fa <HAL_UART_Transmit>
  	  }
   f_write(&MyFile,(uint8_t*)"HELLO FILE",10,(void*)&byteswritten);
 8000574:	4b11      	ldr	r3, [pc, #68]	; (80005bc <main+0xe0>)
 8000576:	220a      	movs	r2, #10
 8000578:	4911      	ldr	r1, [pc, #68]	; (80005c0 <main+0xe4>)
 800057a:	480d      	ldr	r0, [pc, #52]	; (80005b0 <main+0xd4>)
 800057c:	f007 fef1 	bl	8008362 <f_write>
   f_close(&MyFile);
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <main+0xd4>)
 8000582:	f008 f9c0 	bl	8008906 <f_close>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 readDir();
 8000586:	f000 f9a7 	bl	80008d8 <readDir>
	 HAL_Delay(2000);
 800058a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800058e:	f000 fe63 	bl	8001258 <HAL_Delay>
	 readDir();
 8000592:	e7f8      	b.n	8000586 <main+0xaa>
 8000594:	08008e28 	.word	0x08008e28
 8000598:	200000dc 	.word	0x200000dc
 800059c:	20000120 	.word	0x20000120
 80005a0:	08008e30 	.word	0x08008e30
 80005a4:	08008e3c 	.word	0x08008e3c
 80005a8:	08008e40 	.word	0x08008e40
 80005ac:	08008e4c 	.word	0x08008e4c
 80005b0:	20000358 	.word	0x20000358
 80005b4:	08008e5c 	.word	0x08008e5c
 80005b8:	08008e68 	.word	0x08008e68
 80005bc:	200005b0 	.word	0x200005b0
 80005c0:	08008e74 	.word	0x08008e74

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b094      	sub	sp, #80	; 0x50
 80005c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	f107 0320 	add.w	r3, r7, #32
 80005ce:	2230      	movs	r2, #48	; 0x30
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f008 fc14 	bl	8008e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	4b27      	ldr	r3, [pc, #156]	; (800068c <SystemClock_Config+0xc8>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	4a26      	ldr	r2, [pc, #152]	; (800068c <SystemClock_Config+0xc8>)
 80005f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f6:	6413      	str	r3, [r2, #64]	; 0x40
 80005f8:	4b24      	ldr	r3, [pc, #144]	; (800068c <SystemClock_Config+0xc8>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	4b21      	ldr	r3, [pc, #132]	; (8000690 <SystemClock_Config+0xcc>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a20      	ldr	r2, [pc, #128]	; (8000690 <SystemClock_Config+0xcc>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <SystemClock_Config+0xcc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000628:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000632:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000634:	2310      	movs	r3, #16
 8000636:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000638:	23c0      	movs	r3, #192	; 0xc0
 800063a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800063c:	2306      	movs	r3, #6
 800063e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f001 f983 	bl	8001954 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000654:	f000 f9d4 	bl	8000a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2101      	movs	r1, #1
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fbe5 	bl	8001e44 <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000680:	f000 f9be 	bl	8000a00 <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3750      	adds	r7, #80	; 0x50
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_SPI1_Init+0x64>)
 800069a:	4a18      	ldr	r2, [pc, #96]	; (80006fc <MX_SPI1_Init+0x68>)
 800069c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069e:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d8:	4b07      	ldr	r3, [pc, #28]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006de:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006e0:	220a      	movs	r2, #10
 80006e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_SPI1_Init+0x64>)
 80006e6:	f001 fd8d 	bl	8002204 <HAL_SPI_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f0:	f000 f986 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000003c 	.word	0x2000003c
 80006fc:	40013000 	.word	0x40013000

08000700 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000706:	f107 0308 	add.w	r3, r7, #8
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	463b      	mov	r3, r7
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_TIM2_Init+0x98>)
 800071e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000722:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_TIM2_Init+0x98>)
 8000726:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800072a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072c:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_TIM2_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 8000732:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_TIM2_Init+0x98>)
 8000734:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000738:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_TIM2_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <MX_TIM2_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000746:	4814      	ldr	r0, [pc, #80]	; (8000798 <MX_TIM2_Init+0x98>)
 8000748:	f002 f970 	bl	8002a2c <HAL_TIM_Base_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000752:	f000 f955 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800075c:	f107 0308 	add.w	r3, r7, #8
 8000760:	4619      	mov	r1, r3
 8000762:	480d      	ldr	r0, [pc, #52]	; (8000798 <MX_TIM2_Init+0x98>)
 8000764:	f002 fab9 	bl	8002cda <HAL_TIM_ConfigClockSource>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800076e:	f000 f947 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	; (8000798 <MX_TIM2_Init+0x98>)
 8000780:	f002 fcde 	bl	8003140 <HAL_TIMEx_MasterConfigSynchronization>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800078a:	f000 f939 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000094 	.word	0x20000094

0800079c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_USART1_UART_Init+0x50>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_USART1_UART_Init+0x4c>)
 80007d4:	f002 fd44 	bl	8003260 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007de:	f000 f90f 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000dc 	.word	0x200000dc
 80007ec:	40011000 	.word	0x40011000

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4b30      	ldr	r3, [pc, #192]	; (80008cc <MX_GPIO_Init+0xdc>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a2f      	ldr	r2, [pc, #188]	; (80008cc <MX_GPIO_Init+0xdc>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <MX_GPIO_Init+0xdc>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <MX_GPIO_Init+0xdc>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a28      	ldr	r2, [pc, #160]	; (80008cc <MX_GPIO_Init+0xdc>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b26      	ldr	r3, [pc, #152]	; (80008cc <MX_GPIO_Init+0xdc>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b22      	ldr	r3, [pc, #136]	; (80008cc <MX_GPIO_Init+0xdc>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a21      	ldr	r2, [pc, #132]	; (80008cc <MX_GPIO_Init+0xdc>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_GPIO_Init+0xdc>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b1b      	ldr	r3, [pc, #108]	; (80008cc <MX_GPIO_Init+0xdc>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a1a      	ldr	r2, [pc, #104]	; (80008cc <MX_GPIO_Init+0xdc>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_GPIO_Init+0xdc>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_SD3_GPIO_Port, SS_SD3_Pin, GPIO_PIN_SET);
 8000876:	2201      	movs	r2, #1
 8000878:	2102      	movs	r1, #2
 800087a:	4815      	ldr	r0, [pc, #84]	; (80008d0 <MX_GPIO_Init+0xe0>)
 800087c:	f001 f850 	bl	8001920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin, GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	2186      	movs	r1, #134	; 0x86
 8000884:	4813      	ldr	r0, [pc, #76]	; (80008d4 <MX_GPIO_Init+0xe4>)
 8000886:	f001 f84b 	bl	8001920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_SD3_Pin */
  GPIO_InitStruct.Pin = SS_SD3_Pin;
 800088a:	2302      	movs	r3, #2
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SS_SD3_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	480b      	ldr	r0, [pc, #44]	; (80008d0 <MX_GPIO_Init+0xe0>)
 80008a2:	f000 fea1 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_SD1_Pin SS_SD2_Pin SS_SD4_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin;
 80008a6:	2386      	movs	r3, #134	; 0x86
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_GPIO_Init+0xe4>)
 80008be:	f000 fe93 	bl	80015e8 <HAL_GPIO_Init>

}
 80008c2:	bf00      	nop
 80008c4:	3728      	adds	r7, #40	; 0x28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020000 	.word	0x40020000

080008d8 <readDir>:

/* USER CODE BEGIN 4 */
void readDir()
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	f5ad 7d5e 	sub.w	sp, sp, #888	; 0x378
 80008de:	af00      	add	r7, sp, #0
	DIR dir;
	FILINFO fileInfo;
	uint8_t sect[512];
	uint8_t result;

	 if(f_mount(&SDFatFs,"0",0)!=FR_OK)
 80008e0:	2200      	movs	r2, #0
 80008e2:	4941      	ldr	r1, [pc, #260]	; (80009e8 <readDir+0x110>)
 80008e4:	4841      	ldr	r0, [pc, #260]	; (80009ec <readDir+0x114>)
 80008e6:	f007 fa35 	bl	8007d54 <f_mount>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d002      	beq.n	80008f6 <readDir+0x1e>
	  {
	    Error_Handler();
 80008f0:	f000 f886 	bl	8000a00 <Error_Handler>
	    	    else break;
	    	  }
	   	    f_closedir(&dir);
	    }
	  }
}
 80008f4:	e072      	b.n	80009dc <readDir+0x104>
	    fileInfo.fsize = sizeof(sect);
 80008f6:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80008fa:	f5a3 71bc 	sub.w	r1, r3, #376	; 0x178
 80008fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000902:	f04f 0300 	mov.w	r3, #0
 8000906:	e9c1 2300 	strd	r2, r3, [r1]
	    result = f_opendir(&dir, "/");
 800090a:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800090e:	4938      	ldr	r1, [pc, #224]	; (80009f0 <readDir+0x118>)
 8000910:	4618      	mov	r0, r3
 8000912:	f008 f822 	bl	800895a <f_opendir>
 8000916:	4603      	mov	r3, r0
 8000918:	f887 3377 	strb.w	r3, [r7, #887]	; 0x377
	    if (result == FR_OK)
 800091c:	f897 3377 	ldrb.w	r3, [r7, #887]	; 0x377
 8000920:	2b00      	cmp	r3, #0
 8000922:	d15b      	bne.n	80009dc <readDir+0x104>
	    	    result = f_readdir(&dir, &fileInfo);
 8000924:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8000928:	f507 7348 	add.w	r3, r7, #800	; 0x320
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f008 f8e2 	bl	8008af8 <f_readdir>
 8000934:	4603      	mov	r3, r0
 8000936:	f887 3377 	strb.w	r3, [r7, #887]	; 0x377
	    	    if (result==FR_OK && fileInfo.fname[0])
 800093a:	f897 3377 	ldrb.w	r3, [r7, #887]	; 0x377
 800093e:	2b00      	cmp	r3, #0
 8000940:	d147      	bne.n	80009d2 <readDir+0xfa>
 8000942:	f507 735e 	add.w	r3, r7, #888	; 0x378
 8000946:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800094a:	7e9b      	ldrb	r3, [r3, #26]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d040      	beq.n	80009d2 <readDir+0xfa>
	    	    	  fn = fileInfo.fname;
 8000950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000954:	331a      	adds	r3, #26
 8000956:	f8c7 3370 	str.w	r3, [r7, #880]	; 0x370
	    	    	  if(strlen(fn))
 800095a:	f8d7 3370 	ldr.w	r3, [r7, #880]	; 0x370
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d00d      	beq.n	8000980 <readDir+0xa8>
	    	    		  	HAL_UART_Transmit(&huart1,(uint8_t*)fn,strlen(fn),0x1000);
 8000964:	f8d7 0370 	ldr.w	r0, [r7, #880]	; 0x370
 8000968:	f7ff fc2e 	bl	80001c8 <strlen>
 800096c:	4603      	mov	r3, r0
 800096e:	b29a      	uxth	r2, r3
 8000970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000974:	f8d7 1370 	ldr.w	r1, [r7, #880]	; 0x370
 8000978:	481e      	ldr	r0, [pc, #120]	; (80009f4 <readDir+0x11c>)
 800097a:	f002 fcbe 	bl	80032fa <HAL_UART_Transmit>
 800097e:	e010      	b.n	80009a2 <readDir+0xca>
	    	    		HAL_UART_Transmit(&huart1,(uint8_t*)fileInfo.fname,strlen((char*)fileInfo.fname),0x1000);
 8000980:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000984:	331a      	adds	r3, #26
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fc1e 	bl	80001c8 <strlen>
 800098c:	4603      	mov	r3, r0
 800098e:	b29a      	uxth	r2, r3
 8000990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000994:	f103 011a 	add.w	r1, r3, #26
 8000998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800099c:	4815      	ldr	r0, [pc, #84]	; (80009f4 <readDir+0x11c>)
 800099e:	f002 fcac 	bl	80032fa <HAL_UART_Transmit>
	    	    	  if(fileInfo.fattrib&AM_DIR)
 80009a2:	f507 735e 	add.w	r3, r7, #888	; 0x378
 80009a6:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80009aa:	7b1b      	ldrb	r3, [r3, #12]
 80009ac:	f003 0310 	and.w	r3, r3, #16
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d006      	beq.n	80009c2 <readDir+0xea>
	    	    		HAL_UART_Transmit(&huart1,(uint8_t*)" [DIR]",7,0x1000);
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	2207      	movs	r2, #7
 80009ba:	490f      	ldr	r1, [pc, #60]	; (80009f8 <readDir+0x120>)
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <readDir+0x11c>)
 80009be:	f002 fc9c 	bl	80032fa <HAL_UART_Transmit>
	    	    	  HAL_UART_Transmit(&huart1,(uint8_t*)"\n\r",4,0x1000);
 80009c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c6:	2204      	movs	r2, #4
 80009c8:	490c      	ldr	r1, [pc, #48]	; (80009fc <readDir+0x124>)
 80009ca:	480a      	ldr	r0, [pc, #40]	; (80009f4 <readDir+0x11c>)
 80009cc:	f002 fc95 	bl	80032fa <HAL_UART_Transmit>
	    	    result = f_readdir(&dir, &fileInfo);
 80009d0:	e7a8      	b.n	8000924 <readDir+0x4c>
	   	    f_closedir(&dir);
 80009d2:	f507 7348 	add.w	r3, r7, #800	; 0x320
 80009d6:	4618      	mov	r0, r3
 80009d8:	f008 f868 	bl	8008aac <f_closedir>
}
 80009dc:	bf00      	nop
 80009de:	f507 775e 	add.w	r7, r7, #888	; 0x378
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	08008e80 	.word	0x08008e80
 80009ec:	20000120 	.word	0x20000120
 80009f0:	08008e84 	.word	0x08008e84
 80009f4:	200000dc 	.word	0x200000dc
 80009f8:	08008e88 	.word	0x08008e88
 80009fc:	08008e90 	.word	0x08008e90

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>

08000a0a <SPI_wait_ready>:
    ;
}

//-----------------------------------------------
uint8_t SPI_wait_ready(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	80fb      	strh	r3, [r7, #6]
  do {
    res=SPI_ReceiveByte();
 8000a14:	f000 f991 	bl	8000d3a <SPI_ReceiveByte>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	717b      	strb	r3, [r7, #5]
    cnt++;
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 8000a22:	797b      	ldrb	r3, [r7, #5]
 8000a24:	2bff      	cmp	r3, #255	; 0xff
 8000a26:	d004      	beq.n	8000a32 <SPI_wait_ready+0x28>
 8000a28:	88fb      	ldrh	r3, [r7, #6]
 8000a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d1f0      	bne.n	8000a14 <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d101      	bne.n	8000a40 <SPI_wait_ready+0x36>
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e000      	b.n	8000a42 <SPI_wait_ready+0x38>
  return res;
 8000a40:	797b      	ldrb	r3, [r7, #5]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <SD_cmd>:
//-----------------------------------------------


//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
  // ACMD<n> is the command sequense of CMD55-CMD<n>
  if (cmd & 0x80)
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	da0e      	bge.n	8000a7e <SD_cmd+0x32>
  {
    cmd &= 0x7F;
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a66:	71fb      	strb	r3, [r7, #7]
    res = SD_cmd(CMD55, 0);
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2077      	movs	r0, #119	; 0x77
 8000a6c:	f7ff ffee 	bl	8000a4c <SD_cmd>
 8000a70:	4603      	mov	r3, r0
 8000a72:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 8000a74:	7bbb      	ldrb	r3, [r7, #14]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d901      	bls.n	8000a7e <SD_cmd+0x32>
 8000a7a:	7bbb      	ldrb	r3, [r7, #14]
 8000a7c:	e049      	b.n	8000b12 <SD_cmd+0xc6>
  }
  // Select the card
  SS_SD_DESELECT();
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2102      	movs	r1, #2
 8000a82:	4826      	ldr	r0, [pc, #152]	; (8000b1c <SD_cmd+0xd0>)
 8000a84:	f000 ff4c 	bl	8001920 <HAL_GPIO_WritePin>
  SPI_ReceiveByte();
 8000a88:	f000 f957 	bl	8000d3a <SPI_ReceiveByte>
  SS_SD_SELECT();
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2102      	movs	r1, #2
 8000a90:	4822      	ldr	r0, [pc, #136]	; (8000b1c <SD_cmd+0xd0>)
 8000a92:	f000 ff45 	bl	8001920 <HAL_GPIO_WritePin>
  SPI_ReceiveByte();
 8000a96:	f000 f950 	bl	8000d3a <SPI_ReceiveByte>
  // Send a command packet
  SPI_SendByte(cmd); // Start + Command index
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f93f 	bl	8000d20 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	0e1b      	lsrs	r3, r3, #24
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 f939 	bl	8000d20 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	0c1b      	lsrs	r3, r3, #16
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 f933 	bl	8000d20 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 f92d 	bl	8000d20 <SPI_SendByte>
  SPI_SendByte((uint8_t)arg); // Argument[7..0]
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	4618      	mov	r0, r3
 8000acc:	f000 f928 	bl	8000d20 <SPI_SendByte>

  n = 0x01; // Dummy CRC + Stop
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	2b40      	cmp	r3, #64	; 0x40
 8000ad8:	d101      	bne.n	8000ade <SD_cmd+0x92>
 8000ada:	2395      	movs	r3, #149	; 0x95
 8000adc:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	2b48      	cmp	r3, #72	; 0x48
 8000ae2:	d101      	bne.n	8000ae8 <SD_cmd+0x9c>
 8000ae4:	2387      	movs	r3, #135	; 0x87
 8000ae6:	73fb      	strb	r3, [r7, #15]
  SPI_SendByte(n);
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 f918 	bl	8000d20 <SPI_SendByte>
  // Receive a command response
  n = 10; // Wait for a valid response in timeout of 10 attempts
 8000af0:	230a      	movs	r3, #10
 8000af2:	73fb      	strb	r3, [r7, #15]
  do {
    res = SPI_ReceiveByte();
 8000af4:	f000 f921 	bl	8000d3a <SPI_ReceiveByte>
 8000af8:	4603      	mov	r3, r0
 8000afa:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 8000afc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	da05      	bge.n	8000b10 <SD_cmd+0xc4>
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	73fb      	strb	r3, [r7, #15]
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d1f1      	bne.n	8000af4 <SD_cmd+0xa8>

  return res;
 8000b10:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40020000 	.word	0x40020000

08000b20 <sd_ini>:
//-----------------------------------------------

uint8_t sd_ini(void)
{
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
	  uint8_t i, cmd;;
	  uint8_t ocr[4];
	  int16_t tmr;
	  uint32_t temp;
	  //LD_OFF;
	  sdinfo.type = 0;
 8000b26:	4b68      	ldr	r3, [pc, #416]	; (8000cc8 <sd_ini+0x1a8>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]

	  temp=hspi1.Init.BaudRatePrescaler;
 8000b2c:	4b67      	ldr	r3, [pc, #412]	; (8000ccc <sd_ini+0x1ac>)
 8000b2e:	69db      	ldr	r3, [r3, #28]
 8000b30:	60bb      	str	r3, [r7, #8]
	  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256; //156.25 kbbs
 8000b32:	4b66      	ldr	r3, [pc, #408]	; (8000ccc <sd_ini+0x1ac>)
 8000b34:	2238      	movs	r2, #56	; 0x38
 8000b36:	61da      	str	r2, [r3, #28]
	  HAL_SPI_Init(&hspi1);
 8000b38:	4864      	ldr	r0, [pc, #400]	; (8000ccc <sd_ini+0x1ac>)
 8000b3a:	f001 fb63 	bl	8002204 <HAL_SPI_Init>

	  SS_SD_DESELECT();
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2102      	movs	r1, #2
 8000b42:	4863      	ldr	r0, [pc, #396]	; (8000cd0 <sd_ini+0x1b0>)
 8000b44:	f000 feec 	bl	8001920 <HAL_GPIO_WritePin>
	  for(i=0;i<10;i++) SPI_Release();//80
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]
 8000b4c:	e004      	b.n	8000b58 <sd_ini+0x38>
 8000b4e:	f000 f901 	bl	8000d54 <SPI_Release>
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
 8000b54:	3301      	adds	r3, #1
 8000b56:	73fb      	strb	r3, [r7, #15]
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	2b09      	cmp	r3, #9
 8000b5c:	d9f7      	bls.n	8000b4e <sd_ini+0x2e>

	  hspi1.Init.BaudRatePrescaler = temp;
 8000b5e:	4a5b      	ldr	r2, [pc, #364]	; (8000ccc <sd_ini+0x1ac>)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	61d3      	str	r3, [r2, #28]
	  HAL_SPI_Init(&hspi1);
 8000b64:	4859      	ldr	r0, [pc, #356]	; (8000ccc <sd_ini+0x1ac>)
 8000b66:	f001 fb4d 	bl	8002204 <HAL_SPI_Init>
	  SS_SD_SELECT();
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	4858      	ldr	r0, [pc, #352]	; (8000cd0 <sd_ini+0x1b0>)
 8000b70:	f000 fed6 	bl	8001920 <HAL_GPIO_WritePin>
	  if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8000b74:	2100      	movs	r1, #0
 8000b76:	2040      	movs	r0, #64	; 0x40
 8000b78:	f7ff ff68 	bl	8000a4c <SD_cmd>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	f040 809a 	bne.w	8000cb8 <sd_ini+0x198>
	  {
		  SPI_Release();
 8000b84:	f000 f8e6 	bl	8000d54 <SPI_Release>
		  if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8000b88:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000b8c:	2048      	movs	r0, #72	; 0x48
 8000b8e:	f7ff ff5d 	bl	8000a4c <SD_cmd>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d157      	bne.n	8000c48 <sd_ini+0x128>
		  {
			  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	73fb      	strb	r3, [r7, #15]
 8000b9c:	e00c      	b.n	8000bb8 <sd_ini+0x98>
 8000b9e:	7bfc      	ldrb	r4, [r7, #15]
 8000ba0:	f000 f8cb 	bl	8000d3a <SPI_ReceiveByte>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	f104 0310 	add.w	r3, r4, #16
 8000bac:	443b      	add	r3, r7
 8000bae:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000bb2:	7bfb      	ldrb	r3, [r7, #15]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	2b03      	cmp	r3, #3
 8000bbc:	d9ef      	bls.n	8000b9e <sd_ini+0x7e>

			    // Get trailing return value of R7 resp
			    if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8000bbe:	79bb      	ldrb	r3, [r7, #6]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d17b      	bne.n	8000cbc <sd_ini+0x19c>
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2baa      	cmp	r3, #170	; 0xaa
 8000bc8:	d178      	bne.n	8000cbc <sd_ini+0x19c>
			    {
			    	for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 8000bca:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000bce:	81bb      	strh	r3, [r7, #12]
 8000bd0:	e005      	b.n	8000bde <sd_ini+0xbe>
 8000bd2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	81bb      	strh	r3, [r7, #12]
 8000bde:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d007      	beq.n	8000bf6 <sd_ini+0xd6>
 8000be6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000bea:	20e9      	movs	r0, #233	; 0xe9
 8000bec:	f7ff ff2e 	bl	8000a4c <SD_cmd>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d1ed      	bne.n	8000bd2 <sd_ini+0xb2>
			    	    ; // Wait for leaving idle state (ACMD41 with HCS bit)
			    	if (tmr && SD_cmd(CMD58, 0) == 0)
 8000bf6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d05e      	beq.n	8000cbc <sd_ini+0x19c>
 8000bfe:	2100      	movs	r1, #0
 8000c00:	207a      	movs	r0, #122	; 0x7a
 8000c02:	f7ff ff23 	bl	8000a4c <SD_cmd>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d157      	bne.n	8000cbc <sd_ini+0x19c>
			    	 { // Check CCS bit in the OCR
			    	  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	73fb      	strb	r3, [r7, #15]
 8000c10:	e00c      	b.n	8000c2c <sd_ini+0x10c>
 8000c12:	7bfc      	ldrb	r4, [r7, #15]
 8000c14:	f000 f891 	bl	8000d3a <SPI_ReceiveByte>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	f104 0310 	add.w	r3, r4, #16
 8000c20:	443b      	add	r3, r7
 8000c22:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	2b03      	cmp	r3, #3
 8000c30:	d9ef      	bls.n	8000c12 <sd_ini+0xf2>
			     	   sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8000c32:	793b      	ldrb	r3, [r7, #4]
 8000c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <sd_ini+0x120>
 8000c3c:	220c      	movs	r2, #12
 8000c3e:	e000      	b.n	8000c42 <sd_ini+0x122>
 8000c40:	2204      	movs	r2, #4
 8000c42:	4b21      	ldr	r3, [pc, #132]	; (8000cc8 <sd_ini+0x1a8>)
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	e039      	b.n	8000cbc <sd_ini+0x19c>
			    	}
			    }
		  }
		  else //SDv1 or MMCv3
		  {
			  if (SD_cmd(ACMD41, 0) <= 1)
 8000c48:	2100      	movs	r1, #0
 8000c4a:	20e9      	movs	r0, #233	; 0xe9
 8000c4c:	f7ff fefe 	bl	8000a4c <SD_cmd>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d805      	bhi.n	8000c62 <sd_ini+0x142>
			    {
			      sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <sd_ini+0x1a8>)
 8000c58:	2202      	movs	r2, #2
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	23e9      	movs	r3, #233	; 0xe9
 8000c5e:	73bb      	strb	r3, [r7, #14]
 8000c60:	e004      	b.n	8000c6c <sd_ini+0x14c>
			    }
			    else
			    {
			      sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 8000c62:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <sd_ini+0x1a8>)
 8000c64:	2201      	movs	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
 8000c68:	2341      	movs	r3, #65	; 0x41
 8000c6a:	73bb      	strb	r3, [r7, #14]
			    }
			    for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 8000c6c:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8000c70:	81bb      	strh	r3, [r7, #12]
 8000c72:	e005      	b.n	8000c80 <sd_ini+0x160>
 8000c74:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	81bb      	strh	r3, [r7, #12]
 8000c80:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d007      	beq.n	8000c98 <sd_ini+0x178>
 8000c88:	7bbb      	ldrb	r3, [r7, #14]
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fedd 	bl	8000a4c <SD_cmd>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1ed      	bne.n	8000c74 <sd_ini+0x154>
			    if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8000c98:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d007      	beq.n	8000cb0 <sd_ini+0x190>
 8000ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca4:	2050      	movs	r0, #80	; 0x50
 8000ca6:	f7ff fed1 	bl	8000a4c <SD_cmd>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d005      	beq.n	8000cbc <sd_ini+0x19c>
			    sdinfo.type = 0;
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <sd_ini+0x1a8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
 8000cb6:	e001      	b.n	8000cbc <sd_ini+0x19c>
		  }
	  }
	  else
	  {
	    return 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e000      	b.n	8000cbe <sd_ini+0x19e>
	  }




  return 0;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd90      	pop	{r4, r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200005b4 	.word	0x200005b4
 8000ccc:	2000003c 	.word	0x2000003c
 8000cd0:	40020000 	.word	0x40020000

08000cd4 <Error>:

//-----------------------------------------------
static void Error (void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  //LD_ON;
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <SPIx_WriteRead>:
//-----------------------------------------------

//-----------------------------------------------
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8000cf2:	f107 020f 	add.w	r2, r7, #15
 8000cf6:	1df9      	adds	r1, r7, #7
 8000cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2301      	movs	r3, #1
 8000d00:	4806      	ldr	r0, [pc, #24]	; (8000d1c <SPIx_WriteRead+0x38>)
 8000d02:	f001 fb08 	bl	8002316 <HAL_SPI_TransmitReceive>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SPIx_WriteRead+0x2c>
  {
    Error();
 8000d0c:	f7ff ffe2 	bl	8000cd4 <Error>
  }
  return receivedbyte;
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000003c 	.word	0x2000003c

08000d20 <SPI_SendByte>:
//-----------------------------------------------

//-----------------------------------------------
void SPI_SendByte(uint8_t bt)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ffd9 	bl	8000ce4 <SPIx_WriteRead>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <SPI_ReceiveByte>:
//-----------------------------------------------
uint8_t SPI_ReceiveByte(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 8000d40:	20ff      	movs	r0, #255	; 0xff
 8000d42:	f7ff ffcf 	bl	8000ce4 <SPIx_WriteRead>
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  return bt;
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <SPI_Release>:
//-----------------------------------------------
void SPI_Release(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8000d58:	20ff      	movs	r0, #255	; 0xff
 8000d5a:	f7ff ffc3 	bl	8000ce4 <SPIx_WriteRead>
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <SD_Read_Block>:
//-----------------------------------------------

//-----------------------------------------------
uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 8000d62:	b590      	push	{r4, r7, lr}
 8000d64:	b085      	sub	sp, #20
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;


  result=SD_cmd (CMD17, lba);
 8000d6c:	6839      	ldr	r1, [r7, #0]
 8000d6e:	2051      	movs	r0, #81	; 0x51
 8000d70:	f7ff fe6c 	bl	8000a4c <SD_cmd>
 8000d74:	4603      	mov	r3, r0
 8000d76:	737b      	strb	r3, [r7, #13]
  if (result!=0x00) return 5;
 8000d78:	7b7b      	ldrb	r3, [r7, #13]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SD_Read_Block+0x20>
 8000d7e:	2305      	movs	r3, #5
 8000d80:	e02f      	b.n	8000de2 <SD_Read_Block+0x80>

  SPI_Release();
 8000d82:	f7ff ffe7 	bl	8000d54 <SPI_Release>
   cnt=0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	81fb      	strh	r3, [r7, #14]
   do{
     result=SPI_ReceiveByte();
 8000d8a:	f7ff ffd6 	bl	8000d3a <SPI_ReceiveByte>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	737b      	strb	r3, [r7, #13]
     cnt++;
 8000d92:	89fb      	ldrh	r3, [r7, #14]
 8000d94:	3301      	adds	r3, #1
 8000d96:	81fb      	strh	r3, [r7, #14]
   } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 8000d98:	7b7b      	ldrb	r3, [r7, #13]
 8000d9a:	2bfe      	cmp	r3, #254	; 0xfe
 8000d9c:	d004      	beq.n	8000da8 <SD_Read_Block+0x46>
 8000d9e:	89fb      	ldrh	r3, [r7, #14]
 8000da0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d1f0      	bne.n	8000d8a <SD_Read_Block+0x28>
   if (cnt>=0xFFFF) return 5;
 8000da8:	89fb      	ldrh	r3, [r7, #14]
 8000daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d101      	bne.n	8000db6 <SD_Read_Block+0x54>
 8000db2:	2305      	movs	r3, #5
 8000db4:	e015      	b.n	8000de2 <SD_Read_Block+0x80>
   for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte();
 8000db6:	2300      	movs	r3, #0
 8000db8:	81fb      	strh	r3, [r7, #14]
 8000dba:	e009      	b.n	8000dd0 <SD_Read_Block+0x6e>
 8000dbc:	89fb      	ldrh	r3, [r7, #14]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	18d4      	adds	r4, r2, r3
 8000dc2:	f7ff ffba 	bl	8000d3a <SPI_ReceiveByte>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	7023      	strb	r3, [r4, #0]
 8000dca:	89fb      	ldrh	r3, [r7, #14]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	81fb      	strh	r3, [r7, #14]
 8000dd0:	89fb      	ldrh	r3, [r7, #14]
 8000dd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dd6:	d3f1      	bcc.n	8000dbc <SD_Read_Block+0x5a>
   SPI_Release();
 8000dd8:	f7ff ffbc 	bl	8000d54 <SPI_Release>
   SPI_Release();
 8000ddc:	f7ff ffba 	bl	8000d54 <SPI_Release>




  return 0;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd90      	pop	{r4, r7, pc}

08000dea <SD_Write_Block>:
//-----------------------------------------------

//-----------------------------------------------
uint8_t SD_Write_Block (uint8_t *buff, uint32_t lba)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b084      	sub	sp, #16
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
 8000df2:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;
  result=SD_cmd(CMD24,lba);
 8000df4:	6839      	ldr	r1, [r7, #0]
 8000df6:	2058      	movs	r0, #88	; 0x58
 8000df8:	f7ff fe28 	bl	8000a4c <SD_cmd>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	737b      	strb	r3, [r7, #13]
  if (result!=0x00) return 6;
 8000e00:	7b7b      	ldrb	r3, [r7, #13]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <SD_Write_Block+0x20>
 8000e06:	2306      	movs	r3, #6
 8000e08:	e03d      	b.n	8000e86 <SD_Write_Block+0x9c>
  SPI_Release();
 8000e0a:	f7ff ffa3 	bl	8000d54 <SPI_Release>
  SPI_SendByte (0xFE);
 8000e0e:	20fe      	movs	r0, #254	; 0xfe
 8000e10:	f7ff ff86 	bl	8000d20 <SPI_SendByte>
  for (cnt=0;cnt<512;cnt++) SPI_SendByte(buff[cnt]);
 8000e14:	2300      	movs	r3, #0
 8000e16:	81fb      	strh	r3, [r7, #14]
 8000e18:	e009      	b.n	8000e2e <SD_Write_Block+0x44>
 8000e1a:	89fb      	ldrh	r3, [r7, #14]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	4413      	add	r3, r2
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff7c 	bl	8000d20 <SPI_SendByte>
 8000e28:	89fb      	ldrh	r3, [r7, #14]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	81fb      	strh	r3, [r7, #14]
 8000e2e:	89fb      	ldrh	r3, [r7, #14]
 8000e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e34:	d3f1      	bcc.n	8000e1a <SD_Write_Block+0x30>
  SPI_Release();
 8000e36:	f7ff ff8d 	bl	8000d54 <SPI_Release>
  SPI_Release();
 8000e3a:	f7ff ff8b 	bl	8000d54 <SPI_Release>
  result=SPI_ReceiveByte();
 8000e3e:	f7ff ff7c 	bl	8000d3a <SPI_ReceiveByte>
 8000e42:	4603      	mov	r3, r0
 8000e44:	737b      	strb	r3, [r7, #13]
  if ((result&0x05)!=0x05) return 6;
 8000e46:	7b7b      	ldrb	r3, [r7, #13]
 8000e48:	f003 0305 	and.w	r3, r3, #5
 8000e4c:	2b05      	cmp	r3, #5
 8000e4e:	d001      	beq.n	8000e54 <SD_Write_Block+0x6a>
 8000e50:	2306      	movs	r3, #6
 8000e52:	e018      	b.n	8000e86 <SD_Write_Block+0x9c>
  cnt=0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	81fb      	strh	r3, [r7, #14]
  do {
    result=SPI_ReceiveByte();
 8000e58:	f7ff ff6f 	bl	8000d3a <SPI_ReceiveByte>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	737b      	strb	r3, [r7, #13]
    cnt++;
 8000e60:	89fb      	ldrh	r3, [r7, #14]
 8000e62:	3301      	adds	r3, #1
 8000e64:	81fb      	strh	r3, [r7, #14]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8000e66:	7b7b      	ldrb	r3, [r7, #13]
 8000e68:	2bff      	cmp	r3, #255	; 0xff
 8000e6a:	d004      	beq.n	8000e76 <SD_Write_Block+0x8c>
 8000e6c:	89fb      	ldrh	r3, [r7, #14]
 8000e6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d1f0      	bne.n	8000e58 <SD_Write_Block+0x6e>
  if (cnt>=0xFFFF) return 6;
 8000e76:	89fb      	ldrh	r3, [r7, #14]
 8000e78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d101      	bne.n	8000e84 <SD_Write_Block+0x9a>
 8000e80:	2306      	movs	r3, #6
 8000e82:	e000      	b.n	8000e86 <SD_Write_Block+0x9c>
  return 0;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <HAL_MspInit+0x4c>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	; (8000edc <HAL_MspInit+0x4c>)
 8000ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_MspInit+0x4c>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_MspInit+0x4c>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <HAL_MspInit+0x4c>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_MspInit+0x4c>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <HAL_SPI_MspInit+0x94>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d133      	bne.n	8000f6a <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <HAL_SPI_MspInit+0x98>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <HAL_SPI_MspInit+0x98>)
 8000f0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_SPI_MspInit+0x98>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <HAL_SPI_MspInit+0x98>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <HAL_SPI_MspInit+0x98>)
 8000f28:	f043 0302 	orr.w	r3, r3, #2
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_SPI_MspInit+0x98>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f3a:	2338      	movs	r3, #56	; 0x38
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f4a:	2305      	movs	r3, #5
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	4619      	mov	r1, r3
 8000f54:	4809      	ldr	r0, [pc, #36]	; (8000f7c <HAL_SPI_MspInit+0x9c>)
 8000f56:	f000 fb47 	bl	80015e8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2023      	movs	r0, #35	; 0x23
 8000f60:	f000 fa79 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f64:	2023      	movs	r0, #35	; 0x23
 8000f66:	f000 fa92 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3728      	adds	r7, #40	; 0x28
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40013000 	.word	0x40013000
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40020400 	.word	0x40020400

08000f80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f90:	d115      	bne.n	8000fbe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <HAL_TIM_Base_MspInit+0x48>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	4a0b      	ldr	r2, [pc, #44]	; (8000fc8 <HAL_TIM_Base_MspInit+0x48>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_TIM_Base_MspInit+0x48>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	201c      	movs	r0, #28
 8000fb4:	f000 fa4f 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fb8:	201c      	movs	r0, #28
 8000fba:	f000 fa68 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800

08000fcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
 8000fe2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <HAL_UART_MspInit+0x94>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d134      	bne.n	8001058 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <HAL_UART_MspInit+0x98>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <HAL_UART_MspInit+0x98>)
 8000ff8:	f043 0310 	orr.w	r3, r3, #16
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_UART_MspInit+0x98>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f003 0310 	and.w	r3, r3, #16
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_UART_MspInit+0x98>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a14      	ldr	r2, [pc, #80]	; (8001064 <HAL_UART_MspInit+0x98>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_UART_MspInit+0x98>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001026:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800102a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001038:	2307      	movs	r3, #7
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	4809      	ldr	r0, [pc, #36]	; (8001068 <HAL_UART_MspInit+0x9c>)
 8001044:	f000 fad0 	bl	80015e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001048:	2200      	movs	r2, #0
 800104a:	2100      	movs	r1, #0
 800104c:	2025      	movs	r0, #37	; 0x25
 800104e:	f000 fa02 	bl	8001456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001052:	2025      	movs	r0, #37	; 0x25
 8001054:	f000 fa1b 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40011000 	.word	0x40011000
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <NMI_Handler+0x4>

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <MemManage_Handler+0x4>

0800107e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>

0800108a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b8:	f000 f8ae 	bl	8001218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <TIM2_IRQHandler+0x10>)
 80010c6:	f001 fd00 	bl	8002aca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000094 	.word	0x20000094

080010d4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <SPI1_IRQHandler+0x10>)
 80010da:	f001 fabf 	bl	800265c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	2000003c 	.word	0x2000003c

080010e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <USART1_IRQHandler+0x10>)
 80010ee:	f002 f997 	bl	8003420 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	200000dc 	.word	0x200000dc

080010fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <SystemInit+0x20>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001106:	4a05      	ldr	r2, [pc, #20]	; (800111c <SystemInit+0x20>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001158 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001126:	490e      	ldr	r1, [pc, #56]	; (8001160 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001128:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800113c:	4c0b      	ldr	r4, [pc, #44]	; (800116c <LoopFillZerobss+0x26>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800114a:	f7ff ffd7 	bl	80010fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800114e:	f007 fe33 	bl	8008db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001152:	f7ff f9c3 	bl	80004dc <main>
  bx  lr    
 8001156:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001164:	08009350 	.word	0x08009350
  ldr r2, =_sbss
 8001168:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800116c:	20000a58 	.word	0x20000a58

08001170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC_IRQHandler>
	...

08001174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_Init+0x40>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <HAL_Init+0x40>)
 800117e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001184:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <HAL_Init+0x40>)
 800118a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800118e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_Init+0x40>)
 8001196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800119c:	2003      	movs	r0, #3
 800119e:	f000 f94f 	bl	8001440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011a2:	200f      	movs	r0, #15
 80011a4:	f000 f808 	bl	80011b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a8:	f7ff fe72 	bl	8000e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023c00 	.word	0x40023c00

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x54>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <HAL_InitTick+0x58>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f967 	bl	80014aa <HAL_SYSTICK_Config>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00e      	b.n	8001204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d80a      	bhi.n	8001202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f000 f92f 	bl	8001456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f8:	4a06      	ldr	r2, [pc, #24]	; (8001214 <HAL_InitTick+0x5c>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
 8001200:	e000      	b.n	8001204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
}
 8001204:	4618      	mov	r0, r3
 8001206:	3708      	adds	r7, #8
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000000 	.word	0x20000000
 8001210:	20000008 	.word	0x20000008
 8001214:	20000004 	.word	0x20000004

08001218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <HAL_IncTick+0x20>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	461a      	mov	r2, r3
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <HAL_IncTick+0x24>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4413      	add	r3, r2
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_IncTick+0x24>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008
 800123c:	200005b8 	.word	0x200005b8

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	200005b8 	.word	0x200005b8

08001258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001260:	f7ff ffee 	bl	8001240 <HAL_GetTick>
 8001264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001270:	d005      	beq.n	800127e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_Delay+0x44>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	4413      	add	r3, r2
 800127c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800127e:	bf00      	nop
 8001280:	f7ff ffde 	bl	8001240 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	429a      	cmp	r2, r3
 800128e:	d8f7      	bhi.n	8001280 <HAL_Delay+0x28>
  {
  }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000008 	.word	0x20000008

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	db0b      	blt.n	800132e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f003 021f 	and.w	r2, r3, #31
 800131c:	4907      	ldr	r1, [pc, #28]	; (800133c <__NVIC_EnableIRQ+0x38>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	2001      	movs	r0, #1
 8001326:	fa00 f202 	lsl.w	r2, r0, r2
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000e100 	.word	0xe000e100

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	db0a      	blt.n	800136a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	490c      	ldr	r1, [pc, #48]	; (800138c <__NVIC_SetPriority+0x4c>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	0112      	lsls	r2, r2, #4
 8001360:	b2d2      	uxtb	r2, r2
 8001362:	440b      	add	r3, r1
 8001364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001368:	e00a      	b.n	8001380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	b2da      	uxtb	r2, r3
 800136e:	4908      	ldr	r1, [pc, #32]	; (8001390 <__NVIC_SetPriority+0x50>)
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	3b04      	subs	r3, #4
 8001378:	0112      	lsls	r2, r2, #4
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	440b      	add	r3, r1
 800137e:	761a      	strb	r2, [r3, #24]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000e100 	.word	0xe000e100
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001394:	b480      	push	{r7}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f1c3 0307 	rsb	r3, r3, #7
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	bf28      	it	cs
 80013b2:	2304      	movcs	r3, #4
 80013b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3304      	adds	r3, #4
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d902      	bls.n	80013c4 <NVIC_EncodePriority+0x30>
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3b03      	subs	r3, #3
 80013c2:	e000      	b.n	80013c6 <NVIC_EncodePriority+0x32>
 80013c4:	2300      	movs	r3, #0
 80013c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	401a      	ands	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013dc:	f04f 31ff 	mov.w	r1, #4294967295
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ec:	4313      	orrs	r3, r2
         );
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3724      	adds	r7, #36	; 0x24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800140c:	d301      	bcc.n	8001412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800140e:	2301      	movs	r3, #1
 8001410:	e00f      	b.n	8001432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <SysTick_Config+0x40>)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3b01      	subs	r3, #1
 8001418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800141a:	210f      	movs	r1, #15
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f7ff ff8e 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <SysTick_Config+0x40>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800142a:	4b04      	ldr	r3, [pc, #16]	; (800143c <SysTick_Config+0x40>)
 800142c:	2207      	movs	r2, #7
 800142e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	e000e010 	.word	0xe000e010

08001440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff29 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001456:	b580      	push	{r7, lr}
 8001458:	b086      	sub	sp, #24
 800145a:	af00      	add	r7, sp, #0
 800145c:	4603      	mov	r3, r0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001468:	f7ff ff3e 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 800146c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	68b9      	ldr	r1, [r7, #8]
 8001472:	6978      	ldr	r0, [r7, #20]
 8001474:	f7ff ff8e 	bl	8001394 <NVIC_EncodePriority>
 8001478:	4602      	mov	r2, r0
 800147a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff5d 	bl	8001340 <__NVIC_SetPriority>
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff31 	bl	8001304 <__NVIC_EnableIRQ>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ffa2 	bl	80013fc <SysTick_Config>
 80014b8:	4603      	mov	r3, r0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b084      	sub	sp, #16
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014d0:	f7ff feb6 	bl	8001240 <HAL_GetTick>
 80014d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d008      	beq.n	80014f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2280      	movs	r2, #128	; 0x80
 80014e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e052      	b.n	800159a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0216 	bic.w	r2, r2, #22
 8001502:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	695a      	ldr	r2, [r3, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001512:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	2b00      	cmp	r3, #0
 800151a:	d103      	bne.n	8001524 <HAL_DMA_Abort+0x62>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0208 	bic.w	r2, r2, #8
 8001532:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0201 	bic.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001544:	e013      	b.n	800156e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001546:	f7ff fe7b 	bl	8001240 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b05      	cmp	r3, #5
 8001552:	d90c      	bls.n	800156e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2220      	movs	r2, #32
 8001558:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2203      	movs	r2, #3
 800155e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e015      	b.n	800159a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1e4      	bne.n	8001546 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001580:	223f      	movs	r2, #63	; 0x3f
 8001582:	409a      	lsls	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d004      	beq.n	80015c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2280      	movs	r2, #128	; 0x80
 80015ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e00c      	b.n	80015da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2205      	movs	r2, #5
 80015c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
 8001602:	e16b      	b.n	80018dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001604:	2201      	movs	r2, #1
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	429a      	cmp	r2, r3
 800161e:	f040 815a 	bne.w	80018d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 0303 	and.w	r3, r3, #3
 800162a:	2b01      	cmp	r3, #1
 800162c:	d005      	beq.n	800163a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001636:	2b02      	cmp	r3, #2
 8001638:	d130      	bne.n	800169c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	2203      	movs	r2, #3
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001670:	2201      	movs	r2, #1
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f003 0201 	and.w	r2, r3, #1
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d017      	beq.n	80016d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d123      	bne.n	800172c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	08da      	lsrs	r2, r3, #3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3208      	adds	r2, #8
 80016ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	220f      	movs	r2, #15
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	691a      	ldr	r2, [r3, #16]
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4313      	orrs	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	08da      	lsrs	r2, r3, #3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3208      	adds	r2, #8
 8001726:	69b9      	ldr	r1, [r7, #24]
 8001728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0203 	and.w	r2, r3, #3
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80b4 	beq.w	80018d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4b60      	ldr	r3, [pc, #384]	; (80018f4 <HAL_GPIO_Init+0x30c>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	4a5f      	ldr	r2, [pc, #380]	; (80018f4 <HAL_GPIO_Init+0x30c>)
 8001778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177c:	6453      	str	r3, [r2, #68]	; 0x44
 800177e:	4b5d      	ldr	r3, [pc, #372]	; (80018f4 <HAL_GPIO_Init+0x30c>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800178a:	4a5b      	ldr	r2, [pc, #364]	; (80018f8 <HAL_GPIO_Init+0x310>)
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	089b      	lsrs	r3, r3, #2
 8001790:	3302      	adds	r3, #2
 8001792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	220f      	movs	r2, #15
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a52      	ldr	r2, [pc, #328]	; (80018fc <HAL_GPIO_Init+0x314>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d02b      	beq.n	800180e <HAL_GPIO_Init+0x226>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a51      	ldr	r2, [pc, #324]	; (8001900 <HAL_GPIO_Init+0x318>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d025      	beq.n	800180a <HAL_GPIO_Init+0x222>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a50      	ldr	r2, [pc, #320]	; (8001904 <HAL_GPIO_Init+0x31c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d01f      	beq.n	8001806 <HAL_GPIO_Init+0x21e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4f      	ldr	r2, [pc, #316]	; (8001908 <HAL_GPIO_Init+0x320>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d019      	beq.n	8001802 <HAL_GPIO_Init+0x21a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4e      	ldr	r2, [pc, #312]	; (800190c <HAL_GPIO_Init+0x324>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_GPIO_Init+0x216>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4d      	ldr	r2, [pc, #308]	; (8001910 <HAL_GPIO_Init+0x328>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00d      	beq.n	80017fa <HAL_GPIO_Init+0x212>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4c      	ldr	r2, [pc, #304]	; (8001914 <HAL_GPIO_Init+0x32c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d007      	beq.n	80017f6 <HAL_GPIO_Init+0x20e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a4b      	ldr	r2, [pc, #300]	; (8001918 <HAL_GPIO_Init+0x330>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d101      	bne.n	80017f2 <HAL_GPIO_Init+0x20a>
 80017ee:	2307      	movs	r3, #7
 80017f0:	e00e      	b.n	8001810 <HAL_GPIO_Init+0x228>
 80017f2:	2308      	movs	r3, #8
 80017f4:	e00c      	b.n	8001810 <HAL_GPIO_Init+0x228>
 80017f6:	2306      	movs	r3, #6
 80017f8:	e00a      	b.n	8001810 <HAL_GPIO_Init+0x228>
 80017fa:	2305      	movs	r3, #5
 80017fc:	e008      	b.n	8001810 <HAL_GPIO_Init+0x228>
 80017fe:	2304      	movs	r3, #4
 8001800:	e006      	b.n	8001810 <HAL_GPIO_Init+0x228>
 8001802:	2303      	movs	r3, #3
 8001804:	e004      	b.n	8001810 <HAL_GPIO_Init+0x228>
 8001806:	2302      	movs	r3, #2
 8001808:	e002      	b.n	8001810 <HAL_GPIO_Init+0x228>
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <HAL_GPIO_Init+0x228>
 800180e:	2300      	movs	r3, #0
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	f002 0203 	and.w	r2, r2, #3
 8001816:	0092      	lsls	r2, r2, #2
 8001818:	4093      	lsls	r3, r2
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001820:	4935      	ldr	r1, [pc, #212]	; (80018f8 <HAL_GPIO_Init+0x310>)
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	089b      	lsrs	r3, r3, #2
 8001826:	3302      	adds	r3, #2
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800182e:	4b3b      	ldr	r3, [pc, #236]	; (800191c <HAL_GPIO_Init+0x334>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001852:	4a32      	ldr	r2, [pc, #200]	; (800191c <HAL_GPIO_Init+0x334>)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001858:	4b30      	ldr	r3, [pc, #192]	; (800191c <HAL_GPIO_Init+0x334>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800187c:	4a27      	ldr	r2, [pc, #156]	; (800191c <HAL_GPIO_Init+0x334>)
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001882:	4b26      	ldr	r3, [pc, #152]	; (800191c <HAL_GPIO_Init+0x334>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018a6:	4a1d      	ldr	r2, [pc, #116]	; (800191c <HAL_GPIO_Init+0x334>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_GPIO_Init+0x334>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d0:	4a12      	ldr	r2, [pc, #72]	; (800191c <HAL_GPIO_Init+0x334>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3301      	adds	r3, #1
 80018da:	61fb      	str	r3, [r7, #28]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	2b0f      	cmp	r3, #15
 80018e0:	f67f ae90 	bls.w	8001604 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018e4:	bf00      	nop
 80018e6:	bf00      	nop
 80018e8:	3724      	adds	r7, #36	; 0x24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40013800 	.word	0x40013800
 80018fc:	40020000 	.word	0x40020000
 8001900:	40020400 	.word	0x40020400
 8001904:	40020800 	.word	0x40020800
 8001908:	40020c00 	.word	0x40020c00
 800190c:	40021000 	.word	0x40021000
 8001910:	40021400 	.word	0x40021400
 8001914:	40021800 	.word	0x40021800
 8001918:	40021c00 	.word	0x40021c00
 800191c:	40013c00 	.word	0x40013c00

08001920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	807b      	strh	r3, [r7, #2]
 800192c:	4613      	mov	r3, r2
 800192e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001930:	787b      	ldrb	r3, [r7, #1]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001936:	887a      	ldrh	r2, [r7, #2]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800193c:	e003      	b.n	8001946 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800193e:	887b      	ldrh	r3, [r7, #2]
 8001940:	041a      	lsls	r2, r3, #16
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	619a      	str	r2, [r3, #24]
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e267      	b.n	8001e36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d075      	beq.n	8001a5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001972:	4b88      	ldr	r3, [pc, #544]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b04      	cmp	r3, #4
 800197c:	d00c      	beq.n	8001998 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800197e:	4b85      	ldr	r3, [pc, #532]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001986:	2b08      	cmp	r3, #8
 8001988:	d112      	bne.n	80019b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800198a:	4b82      	ldr	r3, [pc, #520]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001996:	d10b      	bne.n	80019b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	4b7e      	ldr	r3, [pc, #504]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d05b      	beq.n	8001a5c <HAL_RCC_OscConfig+0x108>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d157      	bne.n	8001a5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e242      	b.n	8001e36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b8:	d106      	bne.n	80019c8 <HAL_RCC_OscConfig+0x74>
 80019ba:	4b76      	ldr	r3, [pc, #472]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a75      	ldr	r2, [pc, #468]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	e01d      	b.n	8001a04 <HAL_RCC_OscConfig+0xb0>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x98>
 80019d2:	4b70      	ldr	r3, [pc, #448]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a6f      	ldr	r2, [pc, #444]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 80019d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	4b6d      	ldr	r3, [pc, #436]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a6c      	ldr	r2, [pc, #432]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	e00b      	b.n	8001a04 <HAL_RCC_OscConfig+0xb0>
 80019ec:	4b69      	ldr	r3, [pc, #420]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a68      	ldr	r2, [pc, #416]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 80019f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b66      	ldr	r3, [pc, #408]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a65      	ldr	r2, [pc, #404]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 80019fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d013      	beq.n	8001a34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fc18 	bl	8001240 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a14:	f7ff fc14 	bl	8001240 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b64      	cmp	r3, #100	; 0x64
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e207      	b.n	8001e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	4b5b      	ldr	r3, [pc, #364]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0xc0>
 8001a32:	e014      	b.n	8001a5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a34:	f7ff fc04 	bl	8001240 <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a3c:	f7ff fc00 	bl	8001240 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b64      	cmp	r3, #100	; 0x64
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e1f3      	b.n	8001e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	4b51      	ldr	r3, [pc, #324]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f0      	bne.n	8001a3c <HAL_RCC_OscConfig+0xe8>
 8001a5a:	e000      	b.n	8001a5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d063      	beq.n	8001b32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a6a:	4b4a      	ldr	r3, [pc, #296]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d00b      	beq.n	8001a8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a76:	4b47      	ldr	r3, [pc, #284]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	d11c      	bne.n	8001abc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a82:	4b44      	ldr	r3, [pc, #272]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d116      	bne.n	8001abc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8e:	4b41      	ldr	r3, [pc, #260]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d005      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x152>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d001      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e1c7      	b.n	8001e36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa6:	4b3b      	ldr	r3, [pc, #236]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	4937      	ldr	r1, [pc, #220]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aba:	e03a      	b.n	8001b32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d020      	beq.n	8001b06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac4:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <HAL_RCC_OscConfig+0x244>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aca:	f7ff fbb9 	bl	8001240 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad2:	f7ff fbb5 	bl	8001240 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e1a8      	b.n	8001e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae4:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af0:	4b28      	ldr	r3, [pc, #160]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4925      	ldr	r1, [pc, #148]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	600b      	str	r3, [r1, #0]
 8001b04:	e015      	b.n	8001b32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b06:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <HAL_RCC_OscConfig+0x244>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fb98 	bl	8001240 <HAL_GetTick>
 8001b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b14:	f7ff fb94 	bl	8001240 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e187      	b.n	8001e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b26:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f0      	bne.n	8001b14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0308 	and.w	r3, r3, #8
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d036      	beq.n	8001bac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d016      	beq.n	8001b74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <HAL_RCC_OscConfig+0x248>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4c:	f7ff fb78 	bl	8001240 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b54:	f7ff fb74 	bl	8001240 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e167      	b.n	8001e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_RCC_OscConfig+0x240>)
 8001b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x200>
 8001b72:	e01b      	b.n	8001bac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <HAL_RCC_OscConfig+0x248>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff fb61 	bl	8001240 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b80:	e00e      	b.n	8001ba0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b82:	f7ff fb5d 	bl	8001240 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d907      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e150      	b.n	8001e36 <HAL_RCC_OscConfig+0x4e2>
 8001b94:	40023800 	.word	0x40023800
 8001b98:	42470000 	.word	0x42470000
 8001b9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba0:	4b88      	ldr	r3, [pc, #544]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1ea      	bne.n	8001b82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	f000 8097 	beq.w	8001ce8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bbe:	4b81      	ldr	r3, [pc, #516]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10f      	bne.n	8001bea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	4b7d      	ldr	r3, [pc, #500]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	4a7c      	ldr	r2, [pc, #496]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bda:	4b7a      	ldr	r3, [pc, #488]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001be6:	2301      	movs	r3, #1
 8001be8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bea:	4b77      	ldr	r3, [pc, #476]	; (8001dc8 <HAL_RCC_OscConfig+0x474>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d118      	bne.n	8001c28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bf6:	4b74      	ldr	r3, [pc, #464]	; (8001dc8 <HAL_RCC_OscConfig+0x474>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a73      	ldr	r2, [pc, #460]	; (8001dc8 <HAL_RCC_OscConfig+0x474>)
 8001bfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c02:	f7ff fb1d 	bl	8001240 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c0a:	f7ff fb19 	bl	8001240 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e10c      	b.n	8001e36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1c:	4b6a      	ldr	r3, [pc, #424]	; (8001dc8 <HAL_RCC_OscConfig+0x474>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d106      	bne.n	8001c3e <HAL_RCC_OscConfig+0x2ea>
 8001c30:	4b64      	ldr	r3, [pc, #400]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c34:	4a63      	ldr	r2, [pc, #396]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3c:	e01c      	b.n	8001c78 <HAL_RCC_OscConfig+0x324>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b05      	cmp	r3, #5
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x30c>
 8001c46:	4b5f      	ldr	r3, [pc, #380]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4a:	4a5e      	ldr	r2, [pc, #376]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	6713      	str	r3, [r2, #112]	; 0x70
 8001c52:	4b5c      	ldr	r3, [pc, #368]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c56:	4a5b      	ldr	r2, [pc, #364]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5e:	e00b      	b.n	8001c78 <HAL_RCC_OscConfig+0x324>
 8001c60:	4b58      	ldr	r3, [pc, #352]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c64:	4a57      	ldr	r2, [pc, #348]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001c66:	f023 0301 	bic.w	r3, r3, #1
 8001c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6c:	4b55      	ldr	r3, [pc, #340]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c70:	4a54      	ldr	r2, [pc, #336]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001c72:	f023 0304 	bic.w	r3, r3, #4
 8001c76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d015      	beq.n	8001cac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c80:	f7ff fade 	bl	8001240 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c88:	f7ff fada 	bl	8001240 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e0cb      	b.n	8001e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9e:	4b49      	ldr	r3, [pc, #292]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0ee      	beq.n	8001c88 <HAL_RCC_OscConfig+0x334>
 8001caa:	e014      	b.n	8001cd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cac:	f7ff fac8 	bl	8001240 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb2:	e00a      	b.n	8001cca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb4:	f7ff fac4 	bl	8001240 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e0b5      	b.n	8001e36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cca:	4b3e      	ldr	r3, [pc, #248]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1ee      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cd6:	7dfb      	ldrb	r3, [r7, #23]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d105      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cdc:	4b39      	ldr	r3, [pc, #228]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	4a38      	ldr	r2, [pc, #224]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 80a1 	beq.w	8001e34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cf2:	4b34      	ldr	r3, [pc, #208]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b08      	cmp	r3, #8
 8001cfc:	d05c      	beq.n	8001db8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d141      	bne.n	8001d8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d06:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <HAL_RCC_OscConfig+0x478>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fa98 	bl	8001240 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d14:	f7ff fa94 	bl	8001240 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e087      	b.n	8001e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d26:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69da      	ldr	r2, [r3, #28]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	019b      	lsls	r3, r3, #6
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d48:	085b      	lsrs	r3, r3, #1
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	041b      	lsls	r3, r3, #16
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	061b      	lsls	r3, r3, #24
 8001d56:	491b      	ldr	r1, [pc, #108]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <HAL_RCC_OscConfig+0x478>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7ff fa6d 	bl	8001240 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7ff fa69 	bl	8001240 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e05c      	b.n	8001e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x416>
 8001d88:	e054      	b.n	8001e34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <HAL_RCC_OscConfig+0x478>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fa56 	bl	8001240 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d98:	f7ff fa52 	bl	8001240 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e045      	b.n	8001e36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <HAL_RCC_OscConfig+0x470>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x444>
 8001db6:	e03d      	b.n	8001e34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d107      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e038      	b.n	8001e36 <HAL_RCC_OscConfig+0x4e2>
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40007000 	.word	0x40007000
 8001dcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_RCC_OscConfig+0x4ec>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d028      	beq.n	8001e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d121      	bne.n	8001e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d11a      	bne.n	8001e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e00:	4013      	ands	r3, r2
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d111      	bne.n	8001e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e16:	085b      	lsrs	r3, r3, #1
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d107      	bne.n	8001e30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e000      	b.n	8001e36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800

08001e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0cc      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e58:	4b68      	ldr	r3, [pc, #416]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d90c      	bls.n	8001e80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	4b65      	ldr	r3, [pc, #404]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6e:	4b63      	ldr	r3, [pc, #396]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0b8      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d020      	beq.n	8001ece <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e98:	4b59      	ldr	r3, [pc, #356]	; (8002000 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	4a58      	ldr	r2, [pc, #352]	; (8002000 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ea2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eb0:	4b53      	ldr	r3, [pc, #332]	; (8002000 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	4a52      	ldr	r2, [pc, #328]	; (8002000 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ebc:	4b50      	ldr	r3, [pc, #320]	; (8002000 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	494d      	ldr	r1, [pc, #308]	; (8002000 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d044      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d107      	bne.n	8001ef2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	4b47      	ldr	r3, [pc, #284]	; (8002000 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d119      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e07f      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d003      	beq.n	8001f02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f02:	4b3f      	ldr	r3, [pc, #252]	; (8002000 <HAL_RCC_ClockConfig+0x1bc>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e06f      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f12:	4b3b      	ldr	r3, [pc, #236]	; (8002000 <HAL_RCC_ClockConfig+0x1bc>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e067      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f22:	4b37      	ldr	r3, [pc, #220]	; (8002000 <HAL_RCC_ClockConfig+0x1bc>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f023 0203 	bic.w	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	4934      	ldr	r1, [pc, #208]	; (8002000 <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f34:	f7ff f984 	bl	8001240 <HAL_GetTick>
 8001f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3c:	f7ff f980 	bl	8001240 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e04f      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	4b2b      	ldr	r3, [pc, #172]	; (8002000 <HAL_RCC_ClockConfig+0x1bc>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 020c 	and.w	r2, r3, #12
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d1eb      	bne.n	8001f3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f64:	4b25      	ldr	r3, [pc, #148]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d20c      	bcs.n	8001f8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001f74:	683a      	ldr	r2, [r7, #0]
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f7a:	4b20      	ldr	r3, [pc, #128]	; (8001ffc <HAL_RCC_ClockConfig+0x1b8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0307 	and.w	r3, r3, #7
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d001      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e032      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f98:	4b19      	ldr	r3, [pc, #100]	; (8002000 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4916      	ldr	r1, [pc, #88]	; (8002000 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d009      	beq.n	8001fca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fb6:	4b12      	ldr	r3, [pc, #72]	; (8002000 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	490e      	ldr	r1, [pc, #56]	; (8002000 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fca:	f000 f821 	bl	8002010 <HAL_RCC_GetSysClockFreq>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	091b      	lsrs	r3, r3, #4
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	490a      	ldr	r1, [pc, #40]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	5ccb      	ldrb	r3, [r1, r3]
 8001fde:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe2:	4a09      	ldr	r2, [pc, #36]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fe6:	4b09      	ldr	r3, [pc, #36]	; (800200c <HAL_RCC_ClockConfig+0x1c8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff f8e4 	bl	80011b8 <HAL_InitTick>

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023c00 	.word	0x40023c00
 8002000:	40023800 	.word	0x40023800
 8002004:	08008ee8 	.word	0x08008ee8
 8002008:	20000000 	.word	0x20000000
 800200c:	20000004 	.word	0x20000004

08002010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002014:	b090      	sub	sp, #64	; 0x40
 8002016:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	637b      	str	r3, [r7, #52]	; 0x34
 800201c:	2300      	movs	r3, #0
 800201e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002020:	2300      	movs	r3, #0
 8002022:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002028:	4b59      	ldr	r3, [pc, #356]	; (8002190 <HAL_RCC_GetSysClockFreq+0x180>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 030c 	and.w	r3, r3, #12
 8002030:	2b08      	cmp	r3, #8
 8002032:	d00d      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0x40>
 8002034:	2b08      	cmp	r3, #8
 8002036:	f200 80a1 	bhi.w	800217c <HAL_RCC_GetSysClockFreq+0x16c>
 800203a:	2b00      	cmp	r3, #0
 800203c:	d002      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0x34>
 800203e:	2b04      	cmp	r3, #4
 8002040:	d003      	beq.n	800204a <HAL_RCC_GetSysClockFreq+0x3a>
 8002042:	e09b      	b.n	800217c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002044:	4b53      	ldr	r3, [pc, #332]	; (8002194 <HAL_RCC_GetSysClockFreq+0x184>)
 8002046:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002048:	e09b      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800204a:	4b53      	ldr	r3, [pc, #332]	; (8002198 <HAL_RCC_GetSysClockFreq+0x188>)
 800204c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800204e:	e098      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002050:	4b4f      	ldr	r3, [pc, #316]	; (8002190 <HAL_RCC_GetSysClockFreq+0x180>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002058:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800205a:	4b4d      	ldr	r3, [pc, #308]	; (8002190 <HAL_RCC_GetSysClockFreq+0x180>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d028      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002066:	4b4a      	ldr	r3, [pc, #296]	; (8002190 <HAL_RCC_GetSysClockFreq+0x180>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	099b      	lsrs	r3, r3, #6
 800206c:	2200      	movs	r2, #0
 800206e:	623b      	str	r3, [r7, #32]
 8002070:	627a      	str	r2, [r7, #36]	; 0x24
 8002072:	6a3b      	ldr	r3, [r7, #32]
 8002074:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002078:	2100      	movs	r1, #0
 800207a:	4b47      	ldr	r3, [pc, #284]	; (8002198 <HAL_RCC_GetSysClockFreq+0x188>)
 800207c:	fb03 f201 	mul.w	r2, r3, r1
 8002080:	2300      	movs	r3, #0
 8002082:	fb00 f303 	mul.w	r3, r0, r3
 8002086:	4413      	add	r3, r2
 8002088:	4a43      	ldr	r2, [pc, #268]	; (8002198 <HAL_RCC_GetSysClockFreq+0x188>)
 800208a:	fba0 1202 	umull	r1, r2, r0, r2
 800208e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002090:	460a      	mov	r2, r1
 8002092:	62ba      	str	r2, [r7, #40]	; 0x28
 8002094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002096:	4413      	add	r3, r2
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800209a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800209c:	2200      	movs	r2, #0
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	61fa      	str	r2, [r7, #28]
 80020a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020aa:	f7fe f895 	bl	80001d8 <__aeabi_uldivmod>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4613      	mov	r3, r2
 80020b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020b6:	e053      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b8:	4b35      	ldr	r3, [pc, #212]	; (8002190 <HAL_RCC_GetSysClockFreq+0x180>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	099b      	lsrs	r3, r3, #6
 80020be:	2200      	movs	r2, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	617a      	str	r2, [r7, #20]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80020ca:	f04f 0b00 	mov.w	fp, #0
 80020ce:	4652      	mov	r2, sl
 80020d0:	465b      	mov	r3, fp
 80020d2:	f04f 0000 	mov.w	r0, #0
 80020d6:	f04f 0100 	mov.w	r1, #0
 80020da:	0159      	lsls	r1, r3, #5
 80020dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020e0:	0150      	lsls	r0, r2, #5
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	ebb2 080a 	subs.w	r8, r2, sl
 80020ea:	eb63 090b 	sbc.w	r9, r3, fp
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80020fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002102:	ebb2 0408 	subs.w	r4, r2, r8
 8002106:	eb63 0509 	sbc.w	r5, r3, r9
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	f04f 0300 	mov.w	r3, #0
 8002112:	00eb      	lsls	r3, r5, #3
 8002114:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002118:	00e2      	lsls	r2, r4, #3
 800211a:	4614      	mov	r4, r2
 800211c:	461d      	mov	r5, r3
 800211e:	eb14 030a 	adds.w	r3, r4, sl
 8002122:	603b      	str	r3, [r7, #0]
 8002124:	eb45 030b 	adc.w	r3, r5, fp
 8002128:	607b      	str	r3, [r7, #4]
 800212a:	f04f 0200 	mov.w	r2, #0
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002136:	4629      	mov	r1, r5
 8002138:	028b      	lsls	r3, r1, #10
 800213a:	4621      	mov	r1, r4
 800213c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002140:	4621      	mov	r1, r4
 8002142:	028a      	lsls	r2, r1, #10
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214a:	2200      	movs	r2, #0
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	60fa      	str	r2, [r7, #12]
 8002150:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002154:	f7fe f840 	bl	80001d8 <__aeabi_uldivmod>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4613      	mov	r3, r2
 800215e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_RCC_GetSysClockFreq+0x180>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	0c1b      	lsrs	r3, r3, #16
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	3301      	adds	r3, #1
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002170:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002174:	fbb2 f3f3 	udiv	r3, r2, r3
 8002178:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800217a:	e002      	b.n	8002182 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetSysClockFreq+0x184>)
 800217e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002184:	4618      	mov	r0, r3
 8002186:	3740      	adds	r7, #64	; 0x40
 8002188:	46bd      	mov	sp, r7
 800218a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800
 8002194:	00f42400 	.word	0x00f42400
 8002198:	017d7840 	.word	0x017d7840

0800219c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000000 	.word	0x20000000

080021b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021b8:	f7ff fff0 	bl	800219c <HAL_RCC_GetHCLKFreq>
 80021bc:	4602      	mov	r2, r0
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	0a9b      	lsrs	r3, r3, #10
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	4903      	ldr	r1, [pc, #12]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ca:	5ccb      	ldrb	r3, [r1, r3]
 80021cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40023800 	.word	0x40023800
 80021d8:	08008ef8 	.word	0x08008ef8

080021dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021e0:	f7ff ffdc 	bl	800219c <HAL_RCC_GetHCLKFreq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	0b5b      	lsrs	r3, r3, #13
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	4903      	ldr	r1, [pc, #12]	; (8002200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f2:	5ccb      	ldrb	r3, [r1, r3]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40023800 	.word	0x40023800
 8002200:	08008ef8 	.word	0x08008ef8

08002204 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e07b      	b.n	800230e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	2b00      	cmp	r3, #0
 800221c:	d108      	bne.n	8002230 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002226:	d009      	beq.n	800223c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	61da      	str	r2, [r3, #28]
 800222e:	e005      	b.n	800223c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7fe fe42 	bl	8000ee0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2202      	movs	r2, #2
 8002260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002272:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022ac:	431a      	orrs	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c0:	ea42 0103 	orr.w	r1, r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	0c1b      	lsrs	r3, r3, #16
 80022da:	f003 0104 	and.w	r1, r3, #4
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	f003 0210 	and.w	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	69da      	ldr	r2, [r3, #28]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b08c      	sub	sp, #48	; 0x30
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002324:	2301      	movs	r3, #1
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002328:	2300      	movs	r3, #0
 800232a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <HAL_SPI_TransmitReceive+0x26>
 8002338:	2302      	movs	r3, #2
 800233a:	e18a      	b.n	8002652 <HAL_SPI_TransmitReceive+0x33c>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002344:	f7fe ff7c 	bl	8001240 <HAL_GetTick>
 8002348:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002350:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800235a:	887b      	ldrh	r3, [r7, #2]
 800235c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800235e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002362:	2b01      	cmp	r3, #1
 8002364:	d00f      	beq.n	8002386 <HAL_SPI_TransmitReceive+0x70>
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800236c:	d107      	bne.n	800237e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d103      	bne.n	800237e <HAL_SPI_TransmitReceive+0x68>
 8002376:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800237a:	2b04      	cmp	r3, #4
 800237c:	d003      	beq.n	8002386 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800237e:	2302      	movs	r3, #2
 8002380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002384:	e15b      	b.n	800263e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d005      	beq.n	8002398 <HAL_SPI_TransmitReceive+0x82>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <HAL_SPI_TransmitReceive+0x82>
 8002392:	887b      	ldrh	r3, [r7, #2]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d103      	bne.n	80023a0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800239e:	e14e      	b.n	800263e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d003      	beq.n	80023b4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2205      	movs	r2, #5
 80023b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	887a      	ldrh	r2, [r7, #2]
 80023c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	887a      	ldrh	r2, [r7, #2]
 80023ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	887a      	ldrh	r2, [r7, #2]
 80023d6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	887a      	ldrh	r2, [r7, #2]
 80023dc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f4:	2b40      	cmp	r3, #64	; 0x40
 80023f6:	d007      	beq.n	8002408 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002406:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002410:	d178      	bne.n	8002504 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <HAL_SPI_TransmitReceive+0x10a>
 800241a:	8b7b      	ldrh	r3, [r7, #26]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d166      	bne.n	80024ee <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	881a      	ldrh	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	1c9a      	adds	r2, r3, #2
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002444:	e053      	b.n	80024ee <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	2b02      	cmp	r3, #2
 8002452:	d11b      	bne.n	800248c <HAL_SPI_TransmitReceive+0x176>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002458:	b29b      	uxth	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	d016      	beq.n	800248c <HAL_SPI_TransmitReceive+0x176>
 800245e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002460:	2b01      	cmp	r3, #1
 8002462:	d113      	bne.n	800248c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	881a      	ldrh	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	1c9a      	adds	r2, r3, #2
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b01      	cmp	r3, #1
 8002498:	d119      	bne.n	80024ce <HAL_SPI_TransmitReceive+0x1b8>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800249e:	b29b      	uxth	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d014      	beq.n	80024ce <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ae:	b292      	uxth	r2, r2
 80024b0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b6:	1c9a      	adds	r2, r3, #2
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80024ca:	2301      	movs	r3, #1
 80024cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80024ce:	f7fe feb7 	bl	8001240 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024da:	429a      	cmp	r2, r3
 80024dc:	d807      	bhi.n	80024ee <HAL_SPI_TransmitReceive+0x1d8>
 80024de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d003      	beq.n	80024ee <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80024ec:	e0a7      	b.n	800263e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1a6      	bne.n	8002446 <HAL_SPI_TransmitReceive+0x130>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1a1      	bne.n	8002446 <HAL_SPI_TransmitReceive+0x130>
 8002502:	e07c      	b.n	80025fe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <HAL_SPI_TransmitReceive+0x1fc>
 800250c:	8b7b      	ldrh	r3, [r7, #26]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d16b      	bne.n	80025ea <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	330c      	adds	r3, #12
 800251c:	7812      	ldrb	r2, [r2, #0]
 800251e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800252e:	b29b      	uxth	r3, r3
 8002530:	3b01      	subs	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002538:	e057      	b.n	80025ea <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b02      	cmp	r3, #2
 8002546:	d11c      	bne.n	8002582 <HAL_SPI_TransmitReceive+0x26c>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d017      	beq.n	8002582 <HAL_SPI_TransmitReceive+0x26c>
 8002552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002554:	2b01      	cmp	r3, #1
 8002556:	d114      	bne.n	8002582 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	330c      	adds	r3, #12
 8002562:	7812      	ldrb	r2, [r2, #0]
 8002564:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b01      	cmp	r3, #1
 800258e:	d119      	bne.n	80025c4 <HAL_SPI_TransmitReceive+0x2ae>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002594:	b29b      	uxth	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d014      	beq.n	80025c4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68da      	ldr	r2, [r3, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025c0:	2301      	movs	r3, #1
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80025c4:	f7fe fe3c 	bl	8001240 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d803      	bhi.n	80025dc <HAL_SPI_TransmitReceive+0x2c6>
 80025d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025da:	d102      	bne.n	80025e2 <HAL_SPI_TransmitReceive+0x2cc>
 80025dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d103      	bne.n	80025ea <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025e8:	e029      	b.n	800263e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1a2      	bne.n	800253a <HAL_SPI_TransmitReceive+0x224>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d19d      	bne.n	800253a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002600:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f000 f9d0 	bl	80029a8 <SPI_EndRxTxTransaction>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d006      	beq.n	800261c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800261a:	e010      	b.n	800263e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10b      	bne.n	800263c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	e000      	b.n	800263e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800263c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800264e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002652:	4618      	mov	r0, r3
 8002654:	3730      	adds	r7, #48	; 0x30
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b088      	sub	sp, #32
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	099b      	lsrs	r3, r3, #6
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10f      	bne.n	80026a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	099b      	lsrs	r3, r3, #6
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d004      	beq.n	80026a0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	4798      	blx	r3
    return;
 800269e:	e0d7      	b.n	8002850 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	085b      	lsrs	r3, r3, #1
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00a      	beq.n	80026c2 <HAL_SPI_IRQHandler+0x66>
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	09db      	lsrs	r3, r3, #7
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	4798      	blx	r3
    return;
 80026c0:	e0c6      	b.n	8002850 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d10c      	bne.n	80026e8 <HAL_SPI_IRQHandler+0x8c>
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	099b      	lsrs	r3, r3, #6
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	0a1b      	lsrs	r3, r3, #8
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80b4 	beq.w	8002850 <HAL_SPI_IRQHandler+0x1f4>
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80ad 	beq.w	8002850 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	099b      	lsrs	r3, r3, #6
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d023      	beq.n	800274a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b03      	cmp	r3, #3
 800270c:	d011      	beq.n	8002732 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	f043 0204 	orr.w	r2, r3, #4
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	e00b      	b.n	800274a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	693b      	ldr	r3, [r7, #16]
        return;
 8002748:	e082      	b.n	8002850 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d014      	beq.n	8002780 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275a:	f043 0201 	orr.w	r2, r3, #1
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00c      	beq.n	80027a6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002790:	f043 0208 	orr.w	r2, r3, #8
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	60bb      	str	r3, [r7, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d04f      	beq.n	800284e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027bc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d104      	bne.n	80027da <HAL_SPI_IRQHandler+0x17e>
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d034      	beq.n	8002844 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0203 	bic.w	r2, r2, #3
 80027e8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d011      	beq.n	8002816 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f6:	4a18      	ldr	r2, [pc, #96]	; (8002858 <HAL_SPI_IRQHandler+0x1fc>)
 80027f8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fecf 	bl	80015a2 <HAL_DMA_Abort_IT>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800281a:	2b00      	cmp	r3, #0
 800281c:	d016      	beq.n	800284c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002822:	4a0d      	ldr	r2, [pc, #52]	; (8002858 <HAL_SPI_IRQHandler+0x1fc>)
 8002824:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282a:	4618      	mov	r0, r3
 800282c:	f7fe feb9 	bl	80015a2 <HAL_DMA_Abort_IT>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00a      	beq.n	800284c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002842:	e003      	b.n	800284c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f809 	bl	800285c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800284a:	e000      	b.n	800284e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800284c:	bf00      	nop
    return;
 800284e:	bf00      	nop
  }
}
 8002850:	3720      	adds	r7, #32
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	08002871 	.word	0x08002871

0800285c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f7ff ffe6 	bl	800285c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002890:	bf00      	nop
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028a8:	f7fe fcca 	bl	8001240 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	4413      	add	r3, r2
 80028b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028b8:	f7fe fcc2 	bl	8001240 <HAL_GetTick>
 80028bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028be:	4b39      	ldr	r3, [pc, #228]	; (80029a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	015b      	lsls	r3, r3, #5
 80028c4:	0d1b      	lsrs	r3, r3, #20
 80028c6:	69fa      	ldr	r2, [r7, #28]
 80028c8:	fb02 f303 	mul.w	r3, r2, r3
 80028cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028ce:	e054      	b.n	800297a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d6:	d050      	beq.n	800297a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028d8:	f7fe fcb2 	bl	8001240 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d902      	bls.n	80028ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d13d      	bne.n	800296a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002906:	d111      	bne.n	800292c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002910:	d004      	beq.n	800291c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800291a:	d107      	bne.n	800292c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800292a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002934:	d10f      	bne.n	8002956 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002954:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e017      	b.n	800299a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	3b01      	subs	r3, #1
 8002978:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4013      	ands	r3, r2
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	429a      	cmp	r2, r3
 8002988:	bf0c      	ite	eq
 800298a:	2301      	moveq	r3, #1
 800298c:	2300      	movne	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	429a      	cmp	r2, r3
 8002996:	d19b      	bne.n	80028d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3720      	adds	r7, #32
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000000 	.word	0x20000000

080029a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80029b4:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <SPI_EndRxTxTransaction+0x7c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <SPI_EndRxTxTransaction+0x80>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	0d5b      	lsrs	r3, r3, #21
 80029c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029c4:	fb02 f303 	mul.w	r3, r2, r3
 80029c8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029d2:	d112      	bne.n	80029fa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2200      	movs	r2, #0
 80029dc:	2180      	movs	r1, #128	; 0x80
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f7ff ff5a 	bl	8002898 <SPI_WaitFlagStateUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d016      	beq.n	8002a18 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	f043 0220 	orr.w	r2, r3, #32
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e00f      	b.n	8002a1a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a10:	2b80      	cmp	r3, #128	; 0x80
 8002a12:	d0f2      	beq.n	80029fa <SPI_EndRxTxTransaction+0x52>
 8002a14:	e000      	b.n	8002a18 <SPI_EndRxTxTransaction+0x70>
        break;
 8002a16:	bf00      	nop
  }

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000000 	.word	0x20000000
 8002a28:	165e9f81 	.word	0x165e9f81

08002a2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e041      	b.n	8002ac2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe fa94 	bl	8000f80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3304      	adds	r3, #4
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	f000 fa2e 	bl	8002ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d122      	bne.n	8002b26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d11b      	bne.n	8002b26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f06f 0202 	mvn.w	r2, #2
 8002af6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f9bf 	bl	8002e90 <HAL_TIM_IC_CaptureCallback>
 8002b12:	e005      	b.n	8002b20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f9b1 	bl	8002e7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f9c2 	bl	8002ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d122      	bne.n	8002b7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d11b      	bne.n	8002b7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f06f 0204 	mvn.w	r2, #4
 8002b4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f995 	bl	8002e90 <HAL_TIM_IC_CaptureCallback>
 8002b66:	e005      	b.n	8002b74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f987 	bl	8002e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f998 	bl	8002ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d122      	bne.n	8002bce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d11b      	bne.n	8002bce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f06f 0208 	mvn.w	r2, #8
 8002b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2204      	movs	r2, #4
 8002ba4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f96b 	bl	8002e90 <HAL_TIM_IC_CaptureCallback>
 8002bba:	e005      	b.n	8002bc8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f95d 	bl	8002e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f96e 	bl	8002ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d122      	bne.n	8002c22 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	2b10      	cmp	r3, #16
 8002be8:	d11b      	bne.n	8002c22 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f06f 0210 	mvn.w	r2, #16
 8002bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2208      	movs	r2, #8
 8002bf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f941 	bl	8002e90 <HAL_TIM_IC_CaptureCallback>
 8002c0e:	e005      	b.n	8002c1c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f933 	bl	8002e7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f944 	bl	8002ea4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d10e      	bne.n	8002c4e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d107      	bne.n	8002c4e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f06f 0201 	mvn.w	r2, #1
 8002c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 f90d 	bl	8002e68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c58:	2b80      	cmp	r3, #128	; 0x80
 8002c5a:	d10e      	bne.n	8002c7a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c66:	2b80      	cmp	r3, #128	; 0x80
 8002c68:	d107      	bne.n	8002c7a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fae9 	bl	800324c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c84:	2b40      	cmp	r3, #64	; 0x40
 8002c86:	d10e      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c92:	2b40      	cmp	r3, #64	; 0x40
 8002c94:	d107      	bne.n	8002ca6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f909 	bl	8002eb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d10e      	bne.n	8002cd2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f003 0320 	and.w	r3, r3, #32
 8002cbe:	2b20      	cmp	r3, #32
 8002cc0:	d107      	bne.n	8002cd2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f06f 0220 	mvn.w	r2, #32
 8002cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 fab3 	bl	8003238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cd2:	bf00      	nop
 8002cd4:	3708      	adds	r7, #8
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_TIM_ConfigClockSource+0x1c>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e0b4      	b.n	8002e60 <HAL_TIM_ConfigClockSource+0x186>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2202      	movs	r2, #2
 8002d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d14:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d1c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2e:	d03e      	beq.n	8002dae <HAL_TIM_ConfigClockSource+0xd4>
 8002d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d34:	f200 8087 	bhi.w	8002e46 <HAL_TIM_ConfigClockSource+0x16c>
 8002d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d3c:	f000 8086 	beq.w	8002e4c <HAL_TIM_ConfigClockSource+0x172>
 8002d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d44:	d87f      	bhi.n	8002e46 <HAL_TIM_ConfigClockSource+0x16c>
 8002d46:	2b70      	cmp	r3, #112	; 0x70
 8002d48:	d01a      	beq.n	8002d80 <HAL_TIM_ConfigClockSource+0xa6>
 8002d4a:	2b70      	cmp	r3, #112	; 0x70
 8002d4c:	d87b      	bhi.n	8002e46 <HAL_TIM_ConfigClockSource+0x16c>
 8002d4e:	2b60      	cmp	r3, #96	; 0x60
 8002d50:	d050      	beq.n	8002df4 <HAL_TIM_ConfigClockSource+0x11a>
 8002d52:	2b60      	cmp	r3, #96	; 0x60
 8002d54:	d877      	bhi.n	8002e46 <HAL_TIM_ConfigClockSource+0x16c>
 8002d56:	2b50      	cmp	r3, #80	; 0x50
 8002d58:	d03c      	beq.n	8002dd4 <HAL_TIM_ConfigClockSource+0xfa>
 8002d5a:	2b50      	cmp	r3, #80	; 0x50
 8002d5c:	d873      	bhi.n	8002e46 <HAL_TIM_ConfigClockSource+0x16c>
 8002d5e:	2b40      	cmp	r3, #64	; 0x40
 8002d60:	d058      	beq.n	8002e14 <HAL_TIM_ConfigClockSource+0x13a>
 8002d62:	2b40      	cmp	r3, #64	; 0x40
 8002d64:	d86f      	bhi.n	8002e46 <HAL_TIM_ConfigClockSource+0x16c>
 8002d66:	2b30      	cmp	r3, #48	; 0x30
 8002d68:	d064      	beq.n	8002e34 <HAL_TIM_ConfigClockSource+0x15a>
 8002d6a:	2b30      	cmp	r3, #48	; 0x30
 8002d6c:	d86b      	bhi.n	8002e46 <HAL_TIM_ConfigClockSource+0x16c>
 8002d6e:	2b20      	cmp	r3, #32
 8002d70:	d060      	beq.n	8002e34 <HAL_TIM_ConfigClockSource+0x15a>
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	d867      	bhi.n	8002e46 <HAL_TIM_ConfigClockSource+0x16c>
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d05c      	beq.n	8002e34 <HAL_TIM_ConfigClockSource+0x15a>
 8002d7a:	2b10      	cmp	r3, #16
 8002d7c:	d05a      	beq.n	8002e34 <HAL_TIM_ConfigClockSource+0x15a>
 8002d7e:	e062      	b.n	8002e46 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	6899      	ldr	r1, [r3, #8]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f000 f9b6 	bl	8003100 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002da2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	609a      	str	r2, [r3, #8]
      break;
 8002dac:	e04f      	b.n	8002e4e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6899      	ldr	r1, [r3, #8]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f000 f99f 	bl	8003100 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dd0:	609a      	str	r2, [r3, #8]
      break;
 8002dd2:	e03c      	b.n	8002e4e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	461a      	mov	r2, r3
 8002de2:	f000 f913 	bl	800300c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2150      	movs	r1, #80	; 0x50
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 f96c 	bl	80030ca <TIM_ITRx_SetConfig>
      break;
 8002df2:	e02c      	b.n	8002e4e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	6859      	ldr	r1, [r3, #4]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	461a      	mov	r2, r3
 8002e02:	f000 f932 	bl	800306a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2160      	movs	r1, #96	; 0x60
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 f95c 	bl	80030ca <TIM_ITRx_SetConfig>
      break;
 8002e12:	e01c      	b.n	8002e4e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	6859      	ldr	r1, [r3, #4]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	461a      	mov	r2, r3
 8002e22:	f000 f8f3 	bl	800300c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2140      	movs	r1, #64	; 0x40
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 f94c 	bl	80030ca <TIM_ITRx_SetConfig>
      break;
 8002e32:	e00c      	b.n	8002e4e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	4610      	mov	r0, r2
 8002e40:	f000 f943 	bl	80030ca <TIM_ITRx_SetConfig>
      break;
 8002e44:	e003      	b.n	8002e4e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
      break;
 8002e4a:	e000      	b.n	8002e4e <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a40      	ldr	r2, [pc, #256]	; (8002fe0 <TIM_Base_SetConfig+0x114>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d013      	beq.n	8002f0c <TIM_Base_SetConfig+0x40>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eea:	d00f      	beq.n	8002f0c <TIM_Base_SetConfig+0x40>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a3d      	ldr	r2, [pc, #244]	; (8002fe4 <TIM_Base_SetConfig+0x118>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d00b      	beq.n	8002f0c <TIM_Base_SetConfig+0x40>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a3c      	ldr	r2, [pc, #240]	; (8002fe8 <TIM_Base_SetConfig+0x11c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d007      	beq.n	8002f0c <TIM_Base_SetConfig+0x40>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a3b      	ldr	r2, [pc, #236]	; (8002fec <TIM_Base_SetConfig+0x120>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d003      	beq.n	8002f0c <TIM_Base_SetConfig+0x40>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a3a      	ldr	r2, [pc, #232]	; (8002ff0 <TIM_Base_SetConfig+0x124>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d108      	bne.n	8002f1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a2f      	ldr	r2, [pc, #188]	; (8002fe0 <TIM_Base_SetConfig+0x114>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d02b      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f2c:	d027      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a2c      	ldr	r2, [pc, #176]	; (8002fe4 <TIM_Base_SetConfig+0x118>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d023      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a2b      	ldr	r2, [pc, #172]	; (8002fe8 <TIM_Base_SetConfig+0x11c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d01f      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a2a      	ldr	r2, [pc, #168]	; (8002fec <TIM_Base_SetConfig+0x120>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d01b      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a29      	ldr	r2, [pc, #164]	; (8002ff0 <TIM_Base_SetConfig+0x124>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d017      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a28      	ldr	r2, [pc, #160]	; (8002ff4 <TIM_Base_SetConfig+0x128>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d013      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a27      	ldr	r2, [pc, #156]	; (8002ff8 <TIM_Base_SetConfig+0x12c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00f      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a26      	ldr	r2, [pc, #152]	; (8002ffc <TIM_Base_SetConfig+0x130>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00b      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a25      	ldr	r2, [pc, #148]	; (8003000 <TIM_Base_SetConfig+0x134>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d007      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a24      	ldr	r2, [pc, #144]	; (8003004 <TIM_Base_SetConfig+0x138>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d003      	beq.n	8002f7e <TIM_Base_SetConfig+0xb2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a23      	ldr	r2, [pc, #140]	; (8003008 <TIM_Base_SetConfig+0x13c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d108      	bne.n	8002f90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a0a      	ldr	r2, [pc, #40]	; (8002fe0 <TIM_Base_SetConfig+0x114>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d003      	beq.n	8002fc4 <TIM_Base_SetConfig+0xf8>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a0c      	ldr	r2, [pc, #48]	; (8002ff0 <TIM_Base_SetConfig+0x124>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d103      	bne.n	8002fcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	691a      	ldr	r2, [r3, #16]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	615a      	str	r2, [r3, #20]
}
 8002fd2:	bf00      	nop
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40010000 	.word	0x40010000
 8002fe4:	40000400 	.word	0x40000400
 8002fe8:	40000800 	.word	0x40000800
 8002fec:	40000c00 	.word	0x40000c00
 8002ff0:	40010400 	.word	0x40010400
 8002ff4:	40014000 	.word	0x40014000
 8002ff8:	40014400 	.word	0x40014400
 8002ffc:	40014800 	.word	0x40014800
 8003000:	40001800 	.word	0x40001800
 8003004:	40001c00 	.word	0x40001c00
 8003008:	40002000 	.word	0x40002000

0800300c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f023 0201 	bic.w	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f023 030a 	bic.w	r3, r3, #10
 8003048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	621a      	str	r2, [r3, #32]
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800306a:	b480      	push	{r7}
 800306c:	b087      	sub	sp, #28
 800306e:	af00      	add	r7, sp, #0
 8003070:	60f8      	str	r0, [r7, #12]
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	f023 0210 	bic.w	r2, r3, #16
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003094:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	031b      	lsls	r3, r3, #12
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	621a      	str	r2, [r3, #32]
}
 80030be:	bf00      	nop
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f043 0307 	orr.w	r3, r3, #7
 80030ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68fa      	ldr	r2, [r7, #12]
 80030f2:	609a      	str	r2, [r3, #8]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
 800310c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800311a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	021a      	lsls	r2, r3, #8
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	431a      	orrs	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4313      	orrs	r3, r2
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	4313      	orrs	r3, r2
 800312c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	609a      	str	r2, [r3, #8]
}
 8003134:	bf00      	nop
 8003136:	371c      	adds	r7, #28
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003154:	2302      	movs	r3, #2
 8003156:	e05a      	b.n	800320e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a21      	ldr	r2, [pc, #132]	; (800321c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d022      	beq.n	80031e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a4:	d01d      	beq.n	80031e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1d      	ldr	r2, [pc, #116]	; (8003220 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d018      	beq.n	80031e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a1b      	ldr	r2, [pc, #108]	; (8003224 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a1a      	ldr	r2, [pc, #104]	; (8003228 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00e      	beq.n	80031e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a18      	ldr	r2, [pc, #96]	; (800322c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d009      	beq.n	80031e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a17      	ldr	r2, [pc, #92]	; (8003230 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d004      	beq.n	80031e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a15      	ldr	r2, [pc, #84]	; (8003234 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d10c      	bne.n	80031fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40010000 	.word	0x40010000
 8003220:	40000400 	.word	0x40000400
 8003224:	40000800 	.word	0x40000800
 8003228:	40000c00 	.word	0x40000c00
 800322c:	40010400 	.word	0x40010400
 8003230:	40014000 	.word	0x40014000
 8003234:	40001800 	.word	0x40001800

08003238 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e03f      	b.n	80032f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fd fea0 	bl	8000fcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2224      	movs	r2, #36	; 0x24
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68da      	ldr	r2, [r3, #12]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fd7b 	bl	8003da0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b08a      	sub	sp, #40	; 0x28
 80032fe:	af02      	add	r7, sp, #8
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	4613      	mov	r3, r2
 8003308:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b20      	cmp	r3, #32
 8003318:	d17c      	bne.n	8003414 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <HAL_UART_Transmit+0x2c>
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e075      	b.n	8003416 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_UART_Transmit+0x3e>
 8003334:	2302      	movs	r3, #2
 8003336:	e06e      	b.n	8003416 <HAL_UART_Transmit+0x11c>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2221      	movs	r2, #33	; 0x21
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800334e:	f7fd ff77 	bl	8001240 <HAL_GetTick>
 8003352:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	88fa      	ldrh	r2, [r7, #6]
 8003358:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	88fa      	ldrh	r2, [r7, #6]
 800335e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003368:	d108      	bne.n	800337c <HAL_UART_Transmit+0x82>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d104      	bne.n	800337c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	e003      	b.n	8003384 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003380:	2300      	movs	r3, #0
 8003382:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800338c:	e02a      	b.n	80033e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2200      	movs	r2, #0
 8003396:	2180      	movs	r1, #128	; 0x80
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 faf9 	bl	8003990 <UART_WaitOnFlagUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e036      	b.n	8003416 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10b      	bne.n	80033c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	3302      	adds	r3, #2
 80033c2:	61bb      	str	r3, [r7, #24]
 80033c4:	e007      	b.n	80033d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	781a      	ldrb	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	3301      	adds	r3, #1
 80033d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1cf      	bne.n	800338e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2200      	movs	r2, #0
 80033f6:	2140      	movs	r1, #64	; 0x40
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 fac9 	bl	8003990 <UART_WaitOnFlagUntilTimeout>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e006      	b.n	8003416 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003410:	2300      	movs	r3, #0
 8003412:	e000      	b.n	8003416 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003414:	2302      	movs	r3, #2
  }
}
 8003416:	4618      	mov	r0, r3
 8003418:	3720      	adds	r7, #32
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b0ba      	sub	sp, #232	; 0xe8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003446:	2300      	movs	r3, #0
 8003448:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800344c:	2300      	movs	r3, #0
 800344e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800345e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10f      	bne.n	8003486 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <HAL_UART_IRQHandler+0x66>
 8003472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fbd3 	bl	8003c2a <UART_Receive_IT>
      return;
 8003484:	e256      	b.n	8003934 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003486:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 80de 	beq.w	800364c <HAL_UART_IRQHandler+0x22c>
 8003490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d106      	bne.n	80034aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800349c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80d1 	beq.w	800364c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00b      	beq.n	80034ce <HAL_UART_IRQHandler+0xae>
 80034b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f043 0201 	orr.w	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d2:	f003 0304 	and.w	r3, r3, #4
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00b      	beq.n	80034f2 <HAL_UART_IRQHandler+0xd2>
 80034da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f043 0202 	orr.w	r2, r3, #2
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HAL_UART_IRQHandler+0xf6>
 80034fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f043 0204 	orr.w	r2, r3, #4
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d011      	beq.n	8003546 <HAL_UART_IRQHandler+0x126>
 8003522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b00      	cmp	r3, #0
 800352c:	d105      	bne.n	800353a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800352e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f043 0208 	orr.w	r2, r3, #8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 81ed 	beq.w	800392a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_UART_IRQHandler+0x14e>
 800355c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003560:	f003 0320 	and.w	r3, r3, #32
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 fb5e 	bl	8003c2a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b40      	cmp	r3, #64	; 0x40
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d103      	bne.n	800359a <HAL_UART_IRQHandler+0x17a>
 8003592:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d04f      	beq.n	800363a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fa66 	bl	8003a6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035aa:	2b40      	cmp	r3, #64	; 0x40
 80035ac:	d141      	bne.n	8003632 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3314      	adds	r3, #20
 80035b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035bc:	e853 3f00 	ldrex	r3, [r3]
 80035c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80035c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80035c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3314      	adds	r3, #20
 80035d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80035da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80035de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80035e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80035ea:	e841 2300 	strex	r3, r2, [r1]
 80035ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80035f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1d9      	bne.n	80035ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d013      	beq.n	800362a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	4a7d      	ldr	r2, [pc, #500]	; (80037fc <HAL_UART_IRQHandler+0x3dc>)
 8003608:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	4618      	mov	r0, r3
 8003610:	f7fd ffc7 	bl	80015a2 <HAL_DMA_Abort_IT>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003624:	4610      	mov	r0, r2
 8003626:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003628:	e00e      	b.n	8003648 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f99a 	bl	8003964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003630:	e00a      	b.n	8003648 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f996 	bl	8003964 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003638:	e006      	b.n	8003648 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f992 	bl	8003964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003646:	e170      	b.n	800392a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003648:	bf00      	nop
    return;
 800364a:	e16e      	b.n	800392a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	2b01      	cmp	r3, #1
 8003652:	f040 814a 	bne.w	80038ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365a:	f003 0310 	and.w	r3, r3, #16
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 8143 	beq.w	80038ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 813c 	beq.w	80038ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b40      	cmp	r3, #64	; 0x40
 8003694:	f040 80b4 	bne.w	8003800 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80036a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8140 	beq.w	800392e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80036b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036b6:	429a      	cmp	r2, r3
 80036b8:	f080 8139 	bcs.w	800392e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80036c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ce:	f000 8088 	beq.w	80037e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	330c      	adds	r3, #12
 80036d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80036e0:	e853 3f00 	ldrex	r3, [r3]
 80036e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80036e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	330c      	adds	r3, #12
 80036fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80036fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003702:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003706:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800370a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1d9      	bne.n	80036d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3314      	adds	r3, #20
 8003724:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003728:	e853 3f00 	ldrex	r3, [r3]
 800372c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800372e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3314      	adds	r3, #20
 800373e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003742:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003746:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003748:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800374a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800374e:	e841 2300 	strex	r3, r2, [r1]
 8003752:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1e1      	bne.n	800371e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3314      	adds	r3, #20
 8003760:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003764:	e853 3f00 	ldrex	r3, [r3]
 8003768:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800376a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800376c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3314      	adds	r3, #20
 800377a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800377e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003780:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003782:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003784:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003786:	e841 2300 	strex	r3, r2, [r1]
 800378a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800378c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1e3      	bne.n	800375a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	330c      	adds	r3, #12
 80037a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037aa:	e853 3f00 	ldrex	r3, [r3]
 80037ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80037b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037b2:	f023 0310 	bic.w	r3, r3, #16
 80037b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330c      	adds	r3, #12
 80037c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80037c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80037c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80037d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e3      	bne.n	80037a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fd fe70 	bl	80014c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	4619      	mov	r1, r3
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f8c0 	bl	8003978 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037f8:	e099      	b.n	800392e <HAL_UART_IRQHandler+0x50e>
 80037fa:	bf00      	nop
 80037fc:	08003b33 	.word	0x08003b33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003808:	b29b      	uxth	r3, r3
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 808b 	beq.w	8003932 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800381c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 8086 	beq.w	8003932 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	330c      	adds	r3, #12
 800382c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003838:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800383c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	330c      	adds	r3, #12
 8003846:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800384a:	647a      	str	r2, [r7, #68]	; 0x44
 800384c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003850:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003852:	e841 2300 	strex	r3, r2, [r1]
 8003856:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e3      	bne.n	8003826 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3314      	adds	r3, #20
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	623b      	str	r3, [r7, #32]
   return(result);
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3314      	adds	r3, #20
 800387e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003882:	633a      	str	r2, [r7, #48]	; 0x30
 8003884:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003888:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1e3      	bne.n	800385e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	330c      	adds	r3, #12
 80038aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	e853 3f00 	ldrex	r3, [r3]
 80038b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f023 0310 	bic.w	r3, r3, #16
 80038ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	330c      	adds	r3, #12
 80038c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80038c8:	61fa      	str	r2, [r7, #28]
 80038ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	69b9      	ldr	r1, [r7, #24]
 80038ce:	69fa      	ldr	r2, [r7, #28]
 80038d0:	e841 2300 	strex	r3, r2, [r1]
 80038d4:	617b      	str	r3, [r7, #20]
   return(result);
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e3      	bne.n	80038a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038e0:	4619      	mov	r1, r3
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f848 	bl	8003978 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038e8:	e023      	b.n	8003932 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <HAL_UART_IRQHandler+0x4ea>
 80038f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f929 	bl	8003b5a <UART_Transmit_IT>
    return;
 8003908:	e014      	b.n	8003934 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800390a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800390e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00e      	beq.n	8003934 <HAL_UART_IRQHandler+0x514>
 8003916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800391a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d008      	beq.n	8003934 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f000 f969 	bl	8003bfa <UART_EndTransmit_IT>
    return;
 8003928:	e004      	b.n	8003934 <HAL_UART_IRQHandler+0x514>
    return;
 800392a:	bf00      	nop
 800392c:	e002      	b.n	8003934 <HAL_UART_IRQHandler+0x514>
      return;
 800392e:	bf00      	nop
 8003930:	e000      	b.n	8003934 <HAL_UART_IRQHandler+0x514>
      return;
 8003932:	bf00      	nop
  }
}
 8003934:	37e8      	adds	r7, #232	; 0xe8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop

0800393c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003984:	bf00      	nop
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b090      	sub	sp, #64	; 0x40
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	4613      	mov	r3, r2
 800399e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a0:	e050      	b.n	8003a44 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d04c      	beq.n	8003a44 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d007      	beq.n	80039c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80039b0:	f7fd fc46 	bl	8001240 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039bc:	429a      	cmp	r2, r3
 80039be:	d241      	bcs.n	8003a44 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ca:	e853 3f00 	ldrex	r3, [r3]
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	330c      	adds	r3, #12
 80039de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039e0:	637a      	str	r2, [r7, #52]	; 0x34
 80039e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039e8:	e841 2300 	strex	r3, r2, [r1]
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1e5      	bne.n	80039c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	3314      	adds	r3, #20
 80039fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	e853 3f00 	ldrex	r3, [r3]
 8003a02:	613b      	str	r3, [r7, #16]
   return(result);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f023 0301 	bic.w	r3, r3, #1
 8003a0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3314      	adds	r3, #20
 8003a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a14:	623a      	str	r2, [r7, #32]
 8003a16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a18:	69f9      	ldr	r1, [r7, #28]
 8003a1a:	6a3a      	ldr	r2, [r7, #32]
 8003a1c:	e841 2300 	strex	r3, r2, [r1]
 8003a20:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e5      	bne.n	80039f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e00f      	b.n	8003a64 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	bf0c      	ite	eq
 8003a54:	2301      	moveq	r3, #1
 8003a56:	2300      	movne	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	79fb      	ldrb	r3, [r7, #7]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d09f      	beq.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3740      	adds	r7, #64	; 0x40
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b095      	sub	sp, #84	; 0x54
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	330c      	adds	r3, #12
 8003a7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7e:	e853 3f00 	ldrex	r3, [r3]
 8003a82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	330c      	adds	r3, #12
 8003a92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a94:	643a      	str	r2, [r7, #64]	; 0x40
 8003a96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a9c:	e841 2300 	strex	r3, r2, [r1]
 8003aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1e5      	bne.n	8003a74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3314      	adds	r3, #20
 8003aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab0:	6a3b      	ldr	r3, [r7, #32]
 8003ab2:	e853 3f00 	ldrex	r3, [r3]
 8003ab6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f023 0301 	bic.w	r3, r3, #1
 8003abe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3314      	adds	r3, #20
 8003ac6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ac8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003acc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ad0:	e841 2300 	strex	r3, r2, [r1]
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e5      	bne.n	8003aa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d119      	bne.n	8003b18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	330c      	adds	r3, #12
 8003aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	e853 3f00 	ldrex	r3, [r3]
 8003af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f023 0310 	bic.w	r3, r3, #16
 8003afa:	647b      	str	r3, [r7, #68]	; 0x44
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	330c      	adds	r3, #12
 8003b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b04:	61ba      	str	r2, [r7, #24]
 8003b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b08:	6979      	ldr	r1, [r7, #20]
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	e841 2300 	strex	r3, r2, [r1]
 8003b10:	613b      	str	r3, [r7, #16]
   return(result);
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e5      	bne.n	8003ae4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b26:	bf00      	nop
 8003b28:	3754      	adds	r7, #84	; 0x54
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b084      	sub	sp, #16
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f7ff ff09 	bl	8003964 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b52:	bf00      	nop
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b21      	cmp	r3, #33	; 0x21
 8003b6c:	d13e      	bne.n	8003bec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b76:	d114      	bne.n	8003ba2 <UART_Transmit_IT+0x48>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d110      	bne.n	8003ba2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	881b      	ldrh	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	1c9a      	adds	r2, r3, #2
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	621a      	str	r2, [r3, #32]
 8003ba0:	e008      	b.n	8003bb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	1c59      	adds	r1, r3, #1
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6211      	str	r1, [r2, #32]
 8003bac:	781a      	ldrb	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10f      	bne.n	8003be8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	e000      	b.n	8003bee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bec:	2302      	movs	r3, #2
  }
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b082      	sub	sp, #8
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c10:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff fe8e 	bl	800393c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b08c      	sub	sp, #48	; 0x30
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b22      	cmp	r3, #34	; 0x22
 8003c3c:	f040 80ab 	bne.w	8003d96 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c48:	d117      	bne.n	8003c7a <UART_Receive_IT+0x50>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d113      	bne.n	8003c7a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	1c9a      	adds	r2, r3, #2
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	629a      	str	r2, [r3, #40]	; 0x28
 8003c78:	e026      	b.n	8003cc8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c8c:	d007      	beq.n	8003c9e <UART_Receive_IT+0x74>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10a      	bne.n	8003cac <UART_Receive_IT+0x82>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d106      	bne.n	8003cac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	701a      	strb	r2, [r3, #0]
 8003caa:	e008      	b.n	8003cbe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d15a      	bne.n	8003d92 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0220 	bic.w	r2, r2, #32
 8003cea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cfa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 0201 	bic.w	r2, r2, #1
 8003d0a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d135      	bne.n	8003d88 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	330c      	adds	r3, #12
 8003d28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	e853 3f00 	ldrex	r3, [r3]
 8003d30:	613b      	str	r3, [r7, #16]
   return(result);
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f023 0310 	bic.w	r3, r3, #16
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	330c      	adds	r3, #12
 8003d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d42:	623a      	str	r2, [r7, #32]
 8003d44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d46:	69f9      	ldr	r1, [r7, #28]
 8003d48:	6a3a      	ldr	r2, [r7, #32]
 8003d4a:	e841 2300 	strex	r3, r2, [r1]
 8003d4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1e5      	bne.n	8003d22 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b10      	cmp	r3, #16
 8003d62:	d10a      	bne.n	8003d7a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff fdf9 	bl	8003978 <HAL_UARTEx_RxEventCallback>
 8003d86:	e002      	b.n	8003d8e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f7ff fde1 	bl	8003950 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	e002      	b.n	8003d98 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	e000      	b.n	8003d98 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003d96:	2302      	movs	r3, #2
  }
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3730      	adds	r7, #48	; 0x30
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da4:	b0c0      	sub	sp, #256	; 0x100
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbc:	68d9      	ldr	r1, [r3, #12]
 8003dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	ea40 0301 	orr.w	r3, r0, r1
 8003dc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dce:	689a      	ldr	r2, [r3, #8]
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003df8:	f021 010c 	bic.w	r1, r1, #12
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e06:	430b      	orrs	r3, r1
 8003e08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e1a:	6999      	ldr	r1, [r3, #24]
 8003e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	ea40 0301 	orr.w	r3, r0, r1
 8003e26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4b8f      	ldr	r3, [pc, #572]	; (800406c <UART_SetConfig+0x2cc>)
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d005      	beq.n	8003e40 <UART_SetConfig+0xa0>
 8003e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4b8d      	ldr	r3, [pc, #564]	; (8004070 <UART_SetConfig+0x2d0>)
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d104      	bne.n	8003e4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e40:	f7fe f9cc 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 8003e44:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e48:	e003      	b.n	8003e52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e4a:	f7fe f9b3 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8003e4e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e5c:	f040 810c 	bne.w	8004078 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e64:	2200      	movs	r2, #0
 8003e66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e6a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e72:	4622      	mov	r2, r4
 8003e74:	462b      	mov	r3, r5
 8003e76:	1891      	adds	r1, r2, r2
 8003e78:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e7a:	415b      	adcs	r3, r3
 8003e7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e82:	4621      	mov	r1, r4
 8003e84:	eb12 0801 	adds.w	r8, r2, r1
 8003e88:	4629      	mov	r1, r5
 8003e8a:	eb43 0901 	adc.w	r9, r3, r1
 8003e8e:	f04f 0200 	mov.w	r2, #0
 8003e92:	f04f 0300 	mov.w	r3, #0
 8003e96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ea2:	4690      	mov	r8, r2
 8003ea4:	4699      	mov	r9, r3
 8003ea6:	4623      	mov	r3, r4
 8003ea8:	eb18 0303 	adds.w	r3, r8, r3
 8003eac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003eb0:	462b      	mov	r3, r5
 8003eb2:	eb49 0303 	adc.w	r3, r9, r3
 8003eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ec6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003eca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ece:	460b      	mov	r3, r1
 8003ed0:	18db      	adds	r3, r3, r3
 8003ed2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	eb42 0303 	adc.w	r3, r2, r3
 8003eda:	657b      	str	r3, [r7, #84]	; 0x54
 8003edc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003ee0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ee4:	f7fc f978 	bl	80001d8 <__aeabi_uldivmod>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	460b      	mov	r3, r1
 8003eec:	4b61      	ldr	r3, [pc, #388]	; (8004074 <UART_SetConfig+0x2d4>)
 8003eee:	fba3 2302 	umull	r2, r3, r3, r2
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	011c      	lsls	r4, r3, #4
 8003ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003efa:	2200      	movs	r2, #0
 8003efc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f00:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f08:	4642      	mov	r2, r8
 8003f0a:	464b      	mov	r3, r9
 8003f0c:	1891      	adds	r1, r2, r2
 8003f0e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003f10:	415b      	adcs	r3, r3
 8003f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003f18:	4641      	mov	r1, r8
 8003f1a:	eb12 0a01 	adds.w	sl, r2, r1
 8003f1e:	4649      	mov	r1, r9
 8003f20:	eb43 0b01 	adc.w	fp, r3, r1
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f38:	4692      	mov	sl, r2
 8003f3a:	469b      	mov	fp, r3
 8003f3c:	4643      	mov	r3, r8
 8003f3e:	eb1a 0303 	adds.w	r3, sl, r3
 8003f42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f46:	464b      	mov	r3, r9
 8003f48:	eb4b 0303 	adc.w	r3, fp, r3
 8003f4c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f5c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f64:	460b      	mov	r3, r1
 8003f66:	18db      	adds	r3, r3, r3
 8003f68:	643b      	str	r3, [r7, #64]	; 0x40
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	eb42 0303 	adc.w	r3, r2, r3
 8003f70:	647b      	str	r3, [r7, #68]	; 0x44
 8003f72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f7a:	f7fc f92d 	bl	80001d8 <__aeabi_uldivmod>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4611      	mov	r1, r2
 8003f84:	4b3b      	ldr	r3, [pc, #236]	; (8004074 <UART_SetConfig+0x2d4>)
 8003f86:	fba3 2301 	umull	r2, r3, r3, r1
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	2264      	movs	r2, #100	; 0x64
 8003f8e:	fb02 f303 	mul.w	r3, r2, r3
 8003f92:	1acb      	subs	r3, r1, r3
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f9a:	4b36      	ldr	r3, [pc, #216]	; (8004074 <UART_SetConfig+0x2d4>)
 8003f9c:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa0:	095b      	lsrs	r3, r3, #5
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fa8:	441c      	add	r4, r3
 8003faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fb4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003fb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	1891      	adds	r1, r2, r2
 8003fc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003fc4:	415b      	adcs	r3, r3
 8003fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fcc:	4641      	mov	r1, r8
 8003fce:	1851      	adds	r1, r2, r1
 8003fd0:	6339      	str	r1, [r7, #48]	; 0x30
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	414b      	adcs	r3, r1
 8003fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fe4:	4659      	mov	r1, fp
 8003fe6:	00cb      	lsls	r3, r1, #3
 8003fe8:	4651      	mov	r1, sl
 8003fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fee:	4651      	mov	r1, sl
 8003ff0:	00ca      	lsls	r2, r1, #3
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4642      	mov	r2, r8
 8003ffa:	189b      	adds	r3, r3, r2
 8003ffc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004000:	464b      	mov	r3, r9
 8004002:	460a      	mov	r2, r1
 8004004:	eb42 0303 	adc.w	r3, r2, r3
 8004008:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800400c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004018:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800401c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004020:	460b      	mov	r3, r1
 8004022:	18db      	adds	r3, r3, r3
 8004024:	62bb      	str	r3, [r7, #40]	; 0x28
 8004026:	4613      	mov	r3, r2
 8004028:	eb42 0303 	adc.w	r3, r2, r3
 800402c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800402e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004032:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004036:	f7fc f8cf 	bl	80001d8 <__aeabi_uldivmod>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <UART_SetConfig+0x2d4>)
 8004040:	fba3 1302 	umull	r1, r3, r3, r2
 8004044:	095b      	lsrs	r3, r3, #5
 8004046:	2164      	movs	r1, #100	; 0x64
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	3332      	adds	r3, #50	; 0x32
 8004052:	4a08      	ldr	r2, [pc, #32]	; (8004074 <UART_SetConfig+0x2d4>)
 8004054:	fba2 2303 	umull	r2, r3, r2, r3
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	f003 0207 	and.w	r2, r3, #7
 800405e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4422      	add	r2, r4
 8004066:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004068:	e105      	b.n	8004276 <UART_SetConfig+0x4d6>
 800406a:	bf00      	nop
 800406c:	40011000 	.word	0x40011000
 8004070:	40011400 	.word	0x40011400
 8004074:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800407c:	2200      	movs	r2, #0
 800407e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004082:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004086:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800408a:	4642      	mov	r2, r8
 800408c:	464b      	mov	r3, r9
 800408e:	1891      	adds	r1, r2, r2
 8004090:	6239      	str	r1, [r7, #32]
 8004092:	415b      	adcs	r3, r3
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
 8004096:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800409a:	4641      	mov	r1, r8
 800409c:	1854      	adds	r4, r2, r1
 800409e:	4649      	mov	r1, r9
 80040a0:	eb43 0501 	adc.w	r5, r3, r1
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	00eb      	lsls	r3, r5, #3
 80040ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040b2:	00e2      	lsls	r2, r4, #3
 80040b4:	4614      	mov	r4, r2
 80040b6:	461d      	mov	r5, r3
 80040b8:	4643      	mov	r3, r8
 80040ba:	18e3      	adds	r3, r4, r3
 80040bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040c0:	464b      	mov	r3, r9
 80040c2:	eb45 0303 	adc.w	r3, r5, r3
 80040c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040e6:	4629      	mov	r1, r5
 80040e8:	008b      	lsls	r3, r1, #2
 80040ea:	4621      	mov	r1, r4
 80040ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040f0:	4621      	mov	r1, r4
 80040f2:	008a      	lsls	r2, r1, #2
 80040f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040f8:	f7fc f86e 	bl	80001d8 <__aeabi_uldivmod>
 80040fc:	4602      	mov	r2, r0
 80040fe:	460b      	mov	r3, r1
 8004100:	4b60      	ldr	r3, [pc, #384]	; (8004284 <UART_SetConfig+0x4e4>)
 8004102:	fba3 2302 	umull	r2, r3, r3, r2
 8004106:	095b      	lsrs	r3, r3, #5
 8004108:	011c      	lsls	r4, r3, #4
 800410a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800410e:	2200      	movs	r2, #0
 8004110:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004114:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004118:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800411c:	4642      	mov	r2, r8
 800411e:	464b      	mov	r3, r9
 8004120:	1891      	adds	r1, r2, r2
 8004122:	61b9      	str	r1, [r7, #24]
 8004124:	415b      	adcs	r3, r3
 8004126:	61fb      	str	r3, [r7, #28]
 8004128:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800412c:	4641      	mov	r1, r8
 800412e:	1851      	adds	r1, r2, r1
 8004130:	6139      	str	r1, [r7, #16]
 8004132:	4649      	mov	r1, r9
 8004134:	414b      	adcs	r3, r1
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004144:	4659      	mov	r1, fp
 8004146:	00cb      	lsls	r3, r1, #3
 8004148:	4651      	mov	r1, sl
 800414a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800414e:	4651      	mov	r1, sl
 8004150:	00ca      	lsls	r2, r1, #3
 8004152:	4610      	mov	r0, r2
 8004154:	4619      	mov	r1, r3
 8004156:	4603      	mov	r3, r0
 8004158:	4642      	mov	r2, r8
 800415a:	189b      	adds	r3, r3, r2
 800415c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004160:	464b      	mov	r3, r9
 8004162:	460a      	mov	r2, r1
 8004164:	eb42 0303 	adc.w	r3, r2, r3
 8004168:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	67bb      	str	r3, [r7, #120]	; 0x78
 8004176:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004184:	4649      	mov	r1, r9
 8004186:	008b      	lsls	r3, r1, #2
 8004188:	4641      	mov	r1, r8
 800418a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800418e:	4641      	mov	r1, r8
 8004190:	008a      	lsls	r2, r1, #2
 8004192:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004196:	f7fc f81f 	bl	80001d8 <__aeabi_uldivmod>
 800419a:	4602      	mov	r2, r0
 800419c:	460b      	mov	r3, r1
 800419e:	4b39      	ldr	r3, [pc, #228]	; (8004284 <UART_SetConfig+0x4e4>)
 80041a0:	fba3 1302 	umull	r1, r3, r3, r2
 80041a4:	095b      	lsrs	r3, r3, #5
 80041a6:	2164      	movs	r1, #100	; 0x64
 80041a8:	fb01 f303 	mul.w	r3, r1, r3
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	3332      	adds	r3, #50	; 0x32
 80041b2:	4a34      	ldr	r2, [pc, #208]	; (8004284 <UART_SetConfig+0x4e4>)
 80041b4:	fba2 2303 	umull	r2, r3, r2, r3
 80041b8:	095b      	lsrs	r3, r3, #5
 80041ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041be:	441c      	add	r4, r3
 80041c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041c4:	2200      	movs	r2, #0
 80041c6:	673b      	str	r3, [r7, #112]	; 0x70
 80041c8:	677a      	str	r2, [r7, #116]	; 0x74
 80041ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041ce:	4642      	mov	r2, r8
 80041d0:	464b      	mov	r3, r9
 80041d2:	1891      	adds	r1, r2, r2
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	415b      	adcs	r3, r3
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041de:	4641      	mov	r1, r8
 80041e0:	1851      	adds	r1, r2, r1
 80041e2:	6039      	str	r1, [r7, #0]
 80041e4:	4649      	mov	r1, r9
 80041e6:	414b      	adcs	r3, r1
 80041e8:	607b      	str	r3, [r7, #4]
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	f04f 0300 	mov.w	r3, #0
 80041f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041f6:	4659      	mov	r1, fp
 80041f8:	00cb      	lsls	r3, r1, #3
 80041fa:	4651      	mov	r1, sl
 80041fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004200:	4651      	mov	r1, sl
 8004202:	00ca      	lsls	r2, r1, #3
 8004204:	4610      	mov	r0, r2
 8004206:	4619      	mov	r1, r3
 8004208:	4603      	mov	r3, r0
 800420a:	4642      	mov	r2, r8
 800420c:	189b      	adds	r3, r3, r2
 800420e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004210:	464b      	mov	r3, r9
 8004212:	460a      	mov	r2, r1
 8004214:	eb42 0303 	adc.w	r3, r2, r3
 8004218:	66fb      	str	r3, [r7, #108]	; 0x6c
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	663b      	str	r3, [r7, #96]	; 0x60
 8004224:	667a      	str	r2, [r7, #100]	; 0x64
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004232:	4649      	mov	r1, r9
 8004234:	008b      	lsls	r3, r1, #2
 8004236:	4641      	mov	r1, r8
 8004238:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800423c:	4641      	mov	r1, r8
 800423e:	008a      	lsls	r2, r1, #2
 8004240:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004244:	f7fb ffc8 	bl	80001d8 <__aeabi_uldivmod>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4b0d      	ldr	r3, [pc, #52]	; (8004284 <UART_SetConfig+0x4e4>)
 800424e:	fba3 1302 	umull	r1, r3, r3, r2
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	2164      	movs	r1, #100	; 0x64
 8004256:	fb01 f303 	mul.w	r3, r1, r3
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	3332      	adds	r3, #50	; 0x32
 8004260:	4a08      	ldr	r2, [pc, #32]	; (8004284 <UART_SetConfig+0x4e4>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	095b      	lsrs	r3, r3, #5
 8004268:	f003 020f 	and.w	r2, r3, #15
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4422      	add	r2, r4
 8004274:	609a      	str	r2, [r3, #8]
}
 8004276:	bf00      	nop
 8004278:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800427c:	46bd      	mov	sp, r7
 800427e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004282:	bf00      	nop
 8004284:	51eb851f 	.word	0x51eb851f

08004288 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800428c:	4904      	ldr	r1, [pc, #16]	; (80042a0 <MX_FATFS_Init+0x18>)
 800428e:	4805      	ldr	r0, [pc, #20]	; (80042a4 <MX_FATFS_Init+0x1c>)
 8004290:	f004 fcbc 	bl	8008c0c <FATFS_LinkDriver>
 8004294:	4603      	mov	r3, r0
 8004296:	461a      	mov	r2, r3
 8004298:	4b03      	ldr	r3, [pc, #12]	; (80042a8 <MX_FATFS_Init+0x20>)
 800429a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800429c:	bf00      	nop
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	200005c0 	.word	0x200005c0
 80042a4:	2000000c 	.word	0x2000000c
 80042a8:	200005bc 	.word	0x200005bc

080042ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80042b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	4603      	mov	r3, r0
 80042c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//SD_PowerOn();
	if(sd_ini()==0) {Stat &= ~STA_NOINIT;} // STA_NOINIT
 80042c6:	f7fc fc2b 	bl	8000b20 <sd_ini>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d107      	bne.n	80042e0 <USER_initialize+0x24>
 80042d0:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <USER_initialize+0x34>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <USER_initialize+0x34>)
 80042de:	701a      	strb	r2, [r3, #0]
    return Stat;
 80042e0:	4b03      	ldr	r3, [pc, #12]	; (80042f0 <USER_initialize+0x34>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000009 	.word	0x20000009

080042f4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	4603      	mov	r3, r0
 80042fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	if (pdrv) return STA_NOINIT;
 80042fe:	79fb      	ldrb	r3, [r7, #7]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <USER_status+0x14>
 8004304:	2301      	movs	r3, #1
 8004306:	e002      	b.n	800430e <USER_status+0x1a>
    return Stat;
 8004308:	4b04      	ldr	r3, [pc, #16]	; (800431c <USER_status+0x28>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800430e:	4618      	mov	r0, r3
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	20000009 	.word	0x20000009

08004320 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
 800432a:	603b      	str	r3, [r7, #0]
 800432c:	4603      	mov	r3, r0
 800432e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	if (pdrv || !count) return RES_PARERR;
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d102      	bne.n	800433c <USER_read+0x1c>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <USER_read+0x20>
 800433c:	2304      	movs	r3, #4
 800433e:	e023      	b.n	8004388 <USER_read+0x68>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004340:	4b13      	ldr	r3, [pc, #76]	; (8004390 <USER_read+0x70>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f003 0301 	and.w	r3, r3, #1
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <USER_read+0x32>
 800434e:	2303      	movs	r3, #3
 8004350:	e01a      	b.n	8004388 <USER_read+0x68>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 8004352:	4b10      	ldr	r3, [pc, #64]	; (8004394 <USER_read+0x74>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d102      	bne.n	8004366 <USER_read+0x46>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	025b      	lsls	r3, r3, #9
 8004364:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b01      	cmp	r3, #1
 800436a:	d105      	bne.n	8004378 <USER_read+0x58>
	{
	  SD_Read_Block(buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	68b8      	ldr	r0, [r7, #8]
 8004370:	f7fc fcf7 	bl	8000d62 <SD_Read_Block>
	  count = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	603b      	str	r3, [r7, #0]
	}
	else /* Multiple block read */
	{
	}
	SPI_Release();
 8004378:	f7fc fcec 	bl	8000d54 <SPI_Release>
	return count ? RES_ERROR : RES_OK;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	bf14      	ite	ne
 8004382:	2301      	movne	r3, #1
 8004384:	2300      	moveq	r3, #0
 8004386:	b2db      	uxtb	r3, r3
    return RES_OK;
  /* USER CODE END READ */
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	20000009 	.word	0x20000009
 8004394:	200005b4 	.word	0x200005b4

08004398 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	4603      	mov	r3, r0
 80043a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	if (pdrv || !count) return RES_PARERR;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d102      	bne.n	80043b4 <USER_write+0x1c>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <USER_write+0x20>
 80043b4:	2304      	movs	r3, #4
 80043b6:	e02c      	b.n	8004412 <USER_write+0x7a>
	  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80043b8:	4b18      	ldr	r3, [pc, #96]	; (800441c <USER_write+0x84>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <USER_write+0x32>
 80043c6:	2303      	movs	r3, #3
 80043c8:	e023      	b.n	8004412 <USER_write+0x7a>
	  if (Stat & STA_PROTECT) return RES_WRPRT;
 80043ca:	4b14      	ldr	r3, [pc, #80]	; (800441c <USER_write+0x84>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <USER_write+0x44>
 80043d8:	2302      	movs	r3, #2
 80043da:	e01a      	b.n	8004412 <USER_write+0x7a>
	  if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 80043dc:	4b10      	ldr	r3, [pc, #64]	; (8004420 <USER_write+0x88>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <USER_write+0x58>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	025b      	lsls	r3, r3, #9
 80043ee:	607b      	str	r3, [r7, #4]
	  if (count == 1) /* Single block read */
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d105      	bne.n	8004402 <USER_write+0x6a>
	  {
	    SD_Write_Block((BYTE*)buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	68b8      	ldr	r0, [r7, #8]
 80043fa:	f7fc fcf6 	bl	8000dea <SD_Write_Block>
	    count = 0;
 80043fe:	2300      	movs	r3, #0
 8004400:	603b      	str	r3, [r7, #0]
	  }
	  else /* Multiple block read */
	  {
	}
	SPI_Release();
 8004402:	f7fc fca7 	bl	8000d54 <SPI_Release>
	return count ? RES_ERROR : RES_OK;
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	bf14      	ite	ne
 800440c:	2301      	movne	r3, #1
 800440e:	2300      	moveq	r3, #0
 8004410:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000009 	.word	0x20000009
 8004420:	200005b4 	.word	0x200005b4

08004424 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	4603      	mov	r3, r0
 800442c:	603a      	str	r2, [r7, #0]
 800442e:	71fb      	strb	r3, [r7, #7]
 8004430:	460b      	mov	r3, r1
 8004432:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res;
	if (pdrv) return RES_PARERR;
 8004434:	79fb      	ldrb	r3, [r7, #7]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <USER_ioctl+0x1a>
 800443a:	2304      	movs	r3, #4
 800443c:	e02b      	b.n	8004496 <USER_ioctl+0x72>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800443e:	4b18      	ldr	r3, [pc, #96]	; (80044a0 <USER_ioctl+0x7c>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d001      	beq.n	8004450 <USER_ioctl+0x2c>
 800444c:	2303      	movs	r3, #3
 800444e:	e022      	b.n	8004496 <USER_ioctl+0x72>
	res = RES_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	73fb      	strb	r3, [r7, #15]
	switch (cmd)
 8004454:	79bb      	ldrb	r3, [r7, #6]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <USER_ioctl+0x3c>
 800445a:	2b02      	cmp	r3, #2
 800445c:	d00d      	beq.n	800447a <USER_ioctl+0x56>
 800445e:	e013      	b.n	8004488 <USER_ioctl+0x64>
	{
	  case CTRL_SYNC : /* Flush dirty buffer if present */
	    SS_SD_SELECT();
 8004460:	2200      	movs	r2, #0
 8004462:	2102      	movs	r1, #2
 8004464:	480f      	ldr	r0, [pc, #60]	; (80044a4 <USER_ioctl+0x80>)
 8004466:	f7fd fa5b 	bl	8001920 <HAL_GPIO_WritePin>
	    if (SPI_wait_ready() == 0xFF)
 800446a:	f7fc face 	bl	8000a0a <SPI_wait_ready>
 800446e:	4603      	mov	r3, r0
 8004470:	2bff      	cmp	r3, #255	; 0xff
 8004472:	d10c      	bne.n	800448e <USER_ioctl+0x6a>
	    res = RES_OK;
 8004474:	2300      	movs	r3, #0
 8004476:	73fb      	strb	r3, [r7, #15]
	    break;
 8004478:	e009      	b.n	800448e <USER_ioctl+0x6a>
	  case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
	    *(WORD*)buff = 512;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004480:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 8004482:	2300      	movs	r3, #0
 8004484:	73fb      	strb	r3, [r7, #15]
	    break;
 8004486:	e003      	b.n	8004490 <USER_ioctl+0x6c>
	  default:
	    res = RES_PARERR;
 8004488:	2304      	movs	r3, #4
 800448a:	73fb      	strb	r3, [r7, #15]
 800448c:	e000      	b.n	8004490 <USER_ioctl+0x6c>
	    break;
 800448e:	bf00      	nop
	}
	SPI_Release();
 8004490:	f7fc fc60 	bl	8000d54 <SPI_Release>
    return res;
 8004494:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	20000009 	.word	0x20000009
 80044a4:	40020000 	.word	0x40020000

080044a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	4603      	mov	r3, r0
 80044b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80044b2:	79fb      	ldrb	r3, [r7, #7]
 80044b4:	4a08      	ldr	r2, [pc, #32]	; (80044d8 <disk_status+0x30>)
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	79fa      	ldrb	r2, [r7, #7]
 80044c0:	4905      	ldr	r1, [pc, #20]	; (80044d8 <disk_status+0x30>)
 80044c2:	440a      	add	r2, r1
 80044c4:	7a12      	ldrb	r2, [r2, #8]
 80044c6:	4610      	mov	r0, r2
 80044c8:	4798      	blx	r3
 80044ca:	4603      	mov	r3, r0
 80044cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80044ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	20000a4c 	.word	0x20000a4c

080044dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80044ea:	79fb      	ldrb	r3, [r7, #7]
 80044ec:	4a0d      	ldr	r2, [pc, #52]	; (8004524 <disk_initialize+0x48>)
 80044ee:	5cd3      	ldrb	r3, [r2, r3]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d111      	bne.n	8004518 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	4a0b      	ldr	r2, [pc, #44]	; (8004524 <disk_initialize+0x48>)
 80044f8:	2101      	movs	r1, #1
 80044fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	4a09      	ldr	r2, [pc, #36]	; (8004524 <disk_initialize+0x48>)
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4413      	add	r3, r2
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	79fa      	ldrb	r2, [r7, #7]
 800450a:	4906      	ldr	r1, [pc, #24]	; (8004524 <disk_initialize+0x48>)
 800450c:	440a      	add	r2, r1
 800450e:	7a12      	ldrb	r2, [r2, #8]
 8004510:	4610      	mov	r0, r2
 8004512:	4798      	blx	r3
 8004514:	4603      	mov	r3, r0
 8004516:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004518:	7bfb      	ldrb	r3, [r7, #15]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	20000a4c 	.word	0x20000a4c

08004528 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004528:	b590      	push	{r4, r7, lr}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	607a      	str	r2, [r7, #4]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	4603      	mov	r3, r0
 8004536:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	4a0a      	ldr	r2, [pc, #40]	; (8004564 <disk_read+0x3c>)
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	689c      	ldr	r4, [r3, #8]
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	4a07      	ldr	r2, [pc, #28]	; (8004564 <disk_read+0x3c>)
 8004548:	4413      	add	r3, r2
 800454a:	7a18      	ldrb	r0, [r3, #8]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	68b9      	ldr	r1, [r7, #8]
 8004552:	47a0      	blx	r4
 8004554:	4603      	mov	r3, r0
 8004556:	75fb      	strb	r3, [r7, #23]
  return res;
 8004558:	7dfb      	ldrb	r3, [r7, #23]
}
 800455a:	4618      	mov	r0, r3
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	bd90      	pop	{r4, r7, pc}
 8004562:	bf00      	nop
 8004564:	20000a4c 	.word	0x20000a4c

08004568 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004568:	b590      	push	{r4, r7, lr}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	607a      	str	r2, [r7, #4]
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	4603      	mov	r3, r0
 8004576:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	4a0a      	ldr	r2, [pc, #40]	; (80045a4 <disk_write+0x3c>)
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	68dc      	ldr	r4, [r3, #12]
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	4a07      	ldr	r2, [pc, #28]	; (80045a4 <disk_write+0x3c>)
 8004588:	4413      	add	r3, r2
 800458a:	7a18      	ldrb	r0, [r3, #8]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	47a0      	blx	r4
 8004594:	4603      	mov	r3, r0
 8004596:	75fb      	strb	r3, [r7, #23]
  return res;
 8004598:	7dfb      	ldrb	r3, [r7, #23]
}
 800459a:	4618      	mov	r0, r3
 800459c:	371c      	adds	r7, #28
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd90      	pop	{r4, r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000a4c 	.word	0x20000a4c

080045a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	603a      	str	r2, [r7, #0]
 80045b2:	71fb      	strb	r3, [r7, #7]
 80045b4:	460b      	mov	r3, r1
 80045b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80045b8:	79fb      	ldrb	r3, [r7, #7]
 80045ba:	4a09      	ldr	r2, [pc, #36]	; (80045e0 <disk_ioctl+0x38>)
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	79fa      	ldrb	r2, [r7, #7]
 80045c6:	4906      	ldr	r1, [pc, #24]	; (80045e0 <disk_ioctl+0x38>)
 80045c8:	440a      	add	r2, r1
 80045ca:	7a10      	ldrb	r0, [r2, #8]
 80045cc:	79b9      	ldrb	r1, [r7, #6]
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	4798      	blx	r3
 80045d2:	4603      	mov	r3, r0
 80045d4:	73fb      	strb	r3, [r7, #15]
  return res;
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20000a4c 	.word	0x20000a4c

080045e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3301      	adds	r3, #1
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80045f4:	89fb      	ldrh	r3, [r7, #14]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	b21a      	sxth	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	b21b      	sxth	r3, r3
 8004600:	4313      	orrs	r3, r2
 8004602:	b21b      	sxth	r3, r3
 8004604:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004606:	89fb      	ldrh	r3, [r7, #14]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3303      	adds	r3, #3
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	3202      	adds	r2, #2
 800462c:	7812      	ldrb	r2, [r2, #0]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	021b      	lsls	r3, r3, #8
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	3201      	adds	r2, #1
 800463a:	7812      	ldrb	r2, [r2, #0]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	021b      	lsls	r3, r3, #8
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	7812      	ldrb	r2, [r2, #0]
 8004648:	4313      	orrs	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
	return rv;
 800464c:	68fb      	ldr	r3, [r7, #12]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800465a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800465e:	b09d      	sub	sp, #116	; 0x74
 8004660:	af00      	add	r7, sp, #0
 8004662:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 8004664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004666:	3307      	adds	r3, #7
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2200      	movs	r2, #0
 800466e:	469a      	mov	sl, r3
 8004670:	4693      	mov	fp, r2
 8004672:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 8004676:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800467a:	f04f 0000 	mov.w	r0, #0
 800467e:	f04f 0100 	mov.w	r1, #0
 8004682:	0219      	lsls	r1, r3, #8
 8004684:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004688:	0210      	lsls	r0, r2, #8
 800468a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800468c:	3306      	adds	r3, #6
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2200      	movs	r2, #0
 8004694:	461c      	mov	r4, r3
 8004696:	4615      	mov	r5, r2
 8004698:	ea40 0804 	orr.w	r8, r0, r4
 800469c:	ea41 0905 	orr.w	r9, r1, r5
 80046a0:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 80046a4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80046a8:	f04f 0000 	mov.w	r0, #0
 80046ac:	f04f 0100 	mov.w	r1, #0
 80046b0:	0219      	lsls	r1, r3, #8
 80046b2:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80046b6:	0210      	lsls	r0, r2, #8
 80046b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046ba:	3305      	adds	r3, #5
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2200      	movs	r2, #0
 80046c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80046c4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80046c6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80046ca:	4623      	mov	r3, r4
 80046cc:	4303      	orrs	r3, r0
 80046ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80046d0:	462b      	mov	r3, r5
 80046d2:	430b      	orrs	r3, r1
 80046d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046d6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80046da:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 80046de:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80046e2:	f04f 0000 	mov.w	r0, #0
 80046e6:	f04f 0100 	mov.w	r1, #0
 80046ea:	0219      	lsls	r1, r3, #8
 80046ec:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80046f0:	0210      	lsls	r0, r2, #8
 80046f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046f4:	3304      	adds	r3, #4
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2200      	movs	r2, #0
 80046fc:	653b      	str	r3, [r7, #80]	; 0x50
 80046fe:	657a      	str	r2, [r7, #84]	; 0x54
 8004700:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8004704:	4623      	mov	r3, r4
 8004706:	4303      	orrs	r3, r0
 8004708:	623b      	str	r3, [r7, #32]
 800470a:	462b      	mov	r3, r5
 800470c:	430b      	orrs	r3, r1
 800470e:	627b      	str	r3, [r7, #36]	; 0x24
 8004710:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004714:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 8004718:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800471c:	f04f 0000 	mov.w	r0, #0
 8004720:	f04f 0100 	mov.w	r1, #0
 8004724:	0219      	lsls	r1, r3, #8
 8004726:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800472a:	0210      	lsls	r0, r2, #8
 800472c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800472e:	3303      	adds	r3, #3
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2200      	movs	r2, #0
 8004736:	64bb      	str	r3, [r7, #72]	; 0x48
 8004738:	64fa      	str	r2, [r7, #76]	; 0x4c
 800473a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800473e:	4623      	mov	r3, r4
 8004740:	4303      	orrs	r3, r0
 8004742:	61bb      	str	r3, [r7, #24]
 8004744:	462b      	mov	r3, r5
 8004746:	430b      	orrs	r3, r1
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800474e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 8004752:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004756:	f04f 0000 	mov.w	r0, #0
 800475a:	f04f 0100 	mov.w	r1, #0
 800475e:	0219      	lsls	r1, r3, #8
 8004760:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004764:	0210      	lsls	r0, r2, #8
 8004766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004768:	3302      	adds	r3, #2
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2200      	movs	r2, #0
 8004770:	643b      	str	r3, [r7, #64]	; 0x40
 8004772:	647a      	str	r2, [r7, #68]	; 0x44
 8004774:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8004778:	4623      	mov	r3, r4
 800477a:	4303      	orrs	r3, r0
 800477c:	613b      	str	r3, [r7, #16]
 800477e:	462b      	mov	r3, r5
 8004780:	430b      	orrs	r3, r1
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004788:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800478c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	020b      	lsls	r3, r1, #8
 800479a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800479e:	0202      	lsls	r2, r0, #8
 80047a0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80047a2:	3101      	adds	r1, #1
 80047a4:	7809      	ldrb	r1, [r1, #0]
 80047a6:	b2c9      	uxtb	r1, r1
 80047a8:	2000      	movs	r0, #0
 80047aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80047ac:	63f8      	str	r0, [r7, #60]	; 0x3c
 80047ae:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 80047b2:	4621      	mov	r1, r4
 80047b4:	4311      	orrs	r1, r2
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	4629      	mov	r1, r5
 80047ba:	4319      	orrs	r1, r3
 80047bc:	60f9      	str	r1, [r7, #12]
 80047be:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80047c2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 80047c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	020b      	lsls	r3, r1, #8
 80047d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80047d8:	0202      	lsls	r2, r0, #8
 80047da:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80047dc:	7809      	ldrb	r1, [r1, #0]
 80047de:	b2c9      	uxtb	r1, r1
 80047e0:	2000      	movs	r0, #0
 80047e2:	6339      	str	r1, [r7, #48]	; 0x30
 80047e4:	6378      	str	r0, [r7, #52]	; 0x34
 80047e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047ea:	4621      	mov	r1, r4
 80047ec:	4311      	orrs	r1, r2
 80047ee:	6039      	str	r1, [r7, #0]
 80047f0:	4629      	mov	r1, r5
 80047f2:	4319      	orrs	r1, r3
 80047f4:	6079      	str	r1, [r7, #4]
 80047f6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80047fa:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 80047fe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 8004802:	4610      	mov	r0, r2
 8004804:	4619      	mov	r1, r3
 8004806:	3774      	adds	r7, #116	; 0x74
 8004808:	46bd      	mov	sp, r7
 800480a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800480e:	4770      	bx	lr

08004810 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	1c5a      	adds	r2, r3, #1
 8004820:	607a      	str	r2, [r7, #4]
 8004822:	887a      	ldrh	r2, [r7, #2]
 8004824:	b2d2      	uxtb	r2, r2
 8004826:	701a      	strb	r2, [r3, #0]
 8004828:	887b      	ldrh	r3, [r7, #2]
 800482a:	0a1b      	lsrs	r3, r3, #8
 800482c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	887a      	ldrh	r2, [r7, #2]
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	607a      	str	r2, [r7, #4]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	701a      	strb	r2, [r3, #0]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	0a1b      	lsrs	r3, r3, #8
 8004860:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	0a1b      	lsrs	r3, r3, #8
 8004872:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	1c5a      	adds	r2, r3, #1
 8004878:	607a      	str	r2, [r7, #4]
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	701a      	strb	r2, [r3, #0]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	0a1b      	lsrs	r3, r3, #8
 8004884:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	701a      	strb	r2, [r3, #0]
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800489e:	b480      	push	{r7}
 80048a0:	b085      	sub	sp, #20
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	60fa      	str	r2, [r7, #12]
 80048b0:	783a      	ldrb	r2, [r7, #0]
 80048b2:	701a      	strb	r2, [r3, #0]
 80048b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	0a02      	lsrs	r2, r0, #8
 80048c2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80048c6:	0a0b      	lsrs	r3, r1, #8
 80048c8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	60fa      	str	r2, [r7, #12]
 80048d2:	783a      	ldrb	r2, [r7, #0]
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	f04f 0300 	mov.w	r3, #0
 80048e2:	0a02      	lsrs	r2, r0, #8
 80048e4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80048e8:	0a0b      	lsrs	r3, r1, #8
 80048ea:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	60fa      	str	r2, [r7, #12]
 80048f4:	783a      	ldrb	r2, [r7, #0]
 80048f6:	701a      	strb	r2, [r3, #0]
 80048f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80048fc:	f04f 0200 	mov.w	r2, #0
 8004900:	f04f 0300 	mov.w	r3, #0
 8004904:	0a02      	lsrs	r2, r0, #8
 8004906:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800490a:	0a0b      	lsrs	r3, r1, #8
 800490c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	60fa      	str	r2, [r7, #12]
 8004916:	783a      	ldrb	r2, [r7, #0]
 8004918:	701a      	strb	r2, [r3, #0]
 800491a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800491e:	f04f 0200 	mov.w	r2, #0
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	0a02      	lsrs	r2, r0, #8
 8004928:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800492c:	0a0b      	lsrs	r3, r1, #8
 800492e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	60fa      	str	r2, [r7, #12]
 8004938:	783a      	ldrb	r2, [r7, #0]
 800493a:	701a      	strb	r2, [r3, #0]
 800493c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	0a02      	lsrs	r2, r0, #8
 800494a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800494e:	0a0b      	lsrs	r3, r1, #8
 8004950:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	60fa      	str	r2, [r7, #12]
 800495a:	783a      	ldrb	r2, [r7, #0]
 800495c:	701a      	strb	r2, [r3, #0]
 800495e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	0a02      	lsrs	r2, r0, #8
 800496c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004970:	0a0b      	lsrs	r3, r1, #8
 8004972:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	60fa      	str	r2, [r7, #12]
 800497c:	783a      	ldrb	r2, [r7, #0]
 800497e:	701a      	strb	r2, [r3, #0]
 8004980:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	0a02      	lsrs	r2, r0, #8
 800498e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004992:	0a0b      	lsrs	r3, r1, #8
 8004994:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	60fa      	str	r2, [r7, #12]
 800499e:	783a      	ldrb	r2, [r7, #0]
 80049a0:	701a      	strb	r2, [r3, #0]
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80049ae:	b480      	push	{r7}
 80049b0:	b087      	sub	sp, #28
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00d      	beq.n	80049e4 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	1c53      	adds	r3, r2, #1
 80049cc:	613b      	str	r3, [r7, #16]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	1c59      	adds	r1, r3, #1
 80049d2:	6179      	str	r1, [r7, #20]
 80049d4:	7812      	ldrb	r2, [r2, #0]
 80049d6:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	3b01      	subs	r3, #1
 80049dc:	607b      	str	r3, [r7, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1f1      	bne.n	80049c8 <mem_cpy+0x1a>
	}
}
 80049e4:	bf00      	nop
 80049e6:	371c      	adds	r7, #28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	617a      	str	r2, [r7, #20]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	b2d2      	uxtb	r2, r2
 8004a0a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	607b      	str	r3, [r7, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f3      	bne.n	8004a00 <mem_set+0x10>
}
 8004a18:	bf00      	nop
 8004a1a:	bf00      	nop
 8004a1c:	371c      	adds	r7, #28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004a26:	b480      	push	{r7}
 8004a28:	b089      	sub	sp, #36	; 0x24
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	1c5a      	adds	r2, r3, #1
 8004a42:	61fa      	str	r2, [r7, #28]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	4619      	mov	r1, r3
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	61ba      	str	r2, [r7, #24]
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	1acb      	subs	r3, r1, r3
 8004a52:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	607b      	str	r3, [r7, #4]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <mem_cmp+0x40>
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0eb      	beq.n	8004a3e <mem_cmp+0x18>

	return r;
 8004a66:	697b      	ldr	r3, [r7, #20]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3724      	adds	r7, #36	; 0x24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004a7e:	e002      	b.n	8004a86 <chk_chr+0x12>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3301      	adds	r3, #1
 8004a84:	607b      	str	r3, [r7, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <chk_chr+0x26>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d1f2      	bne.n	8004a80 <chk_chr+0xc>
	return *str;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	781b      	ldrb	r3, [r3, #0]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
	...

08004aac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	e029      	b.n	8004b14 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004ac0:	4a27      	ldr	r2, [pc, #156]	; (8004b60 <chk_lock+0xb4>)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	4413      	add	r3, r2
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d01d      	beq.n	8004b0a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004ace:	4a24      	ldr	r2, [pc, #144]	; (8004b60 <chk_lock+0xb4>)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	4413      	add	r3, r2
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d116      	bne.n	8004b0e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004ae0:	4a1f      	ldr	r2, [pc, #124]	; (8004b60 <chk_lock+0xb4>)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3304      	adds	r3, #4
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d10c      	bne.n	8004b0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004af4:	4a1a      	ldr	r2, [pc, #104]	; (8004b60 <chk_lock+0xb4>)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	4413      	add	r3, r2
 8004afc:	3308      	adds	r3, #8
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d102      	bne.n	8004b0e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004b08:	e007      	b.n	8004b1a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3301      	adds	r3, #1
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d9d2      	bls.n	8004ac0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d109      	bne.n	8004b34 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d102      	bne.n	8004b2c <chk_lock+0x80>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d101      	bne.n	8004b30 <chk_lock+0x84>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e010      	b.n	8004b52 <chk_lock+0xa6>
 8004b30:	2312      	movs	r3, #18
 8004b32:	e00e      	b.n	8004b52 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d108      	bne.n	8004b4c <chk_lock+0xa0>
 8004b3a:	4a09      	ldr	r2, [pc, #36]	; (8004b60 <chk_lock+0xb4>)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	4413      	add	r3, r2
 8004b42:	330c      	adds	r3, #12
 8004b44:	881b      	ldrh	r3, [r3, #0]
 8004b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b4a:	d101      	bne.n	8004b50 <chk_lock+0xa4>
 8004b4c:	2310      	movs	r3, #16
 8004b4e:	e000      	b.n	8004b52 <chk_lock+0xa6>
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	200005cc 	.word	0x200005cc

08004b64 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	607b      	str	r3, [r7, #4]
 8004b6e:	e002      	b.n	8004b76 <enq_lock+0x12>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3301      	adds	r3, #1
 8004b74:	607b      	str	r3, [r7, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d806      	bhi.n	8004b8a <enq_lock+0x26>
 8004b7c:	4a09      	ldr	r2, [pc, #36]	; (8004ba4 <enq_lock+0x40>)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	4413      	add	r3, r2
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f2      	bne.n	8004b70 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	bf14      	ite	ne
 8004b90:	2301      	movne	r3, #1
 8004b92:	2300      	moveq	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	200005cc 	.word	0x200005cc

08004ba8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	e01f      	b.n	8004bf8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004bb8:	4a41      	ldr	r2, [pc, #260]	; (8004cc0 <inc_lock+0x118>)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	011b      	lsls	r3, r3, #4
 8004bbe:	4413      	add	r3, r2
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d113      	bne.n	8004bf2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004bca:	4a3d      	ldr	r2, [pc, #244]	; (8004cc0 <inc_lock+0x118>)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	4413      	add	r3, r2
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d109      	bne.n	8004bf2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004bde:	4a38      	ldr	r2, [pc, #224]	; (8004cc0 <inc_lock+0x118>)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	4413      	add	r3, r2
 8004be6:	3308      	adds	r3, #8
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d006      	beq.n	8004c00 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d9dc      	bls.n	8004bb8 <inc_lock+0x10>
 8004bfe:	e000      	b.n	8004c02 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004c00:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d132      	bne.n	8004c6e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	e002      	b.n	8004c14 <inc_lock+0x6c>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3301      	adds	r3, #1
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d806      	bhi.n	8004c28 <inc_lock+0x80>
 8004c1a:	4a29      	ldr	r2, [pc, #164]	; (8004cc0 <inc_lock+0x118>)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	011b      	lsls	r3, r3, #4
 8004c20:	4413      	add	r3, r2
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1f2      	bne.n	8004c0e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d101      	bne.n	8004c32 <inc_lock+0x8a>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	e040      	b.n	8004cb4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	4922      	ldr	r1, [pc, #136]	; (8004cc0 <inc_lock+0x118>)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	440b      	add	r3, r1
 8004c3e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	491e      	ldr	r1, [pc, #120]	; (8004cc0 <inc_lock+0x118>)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	011b      	lsls	r3, r3, #4
 8004c4a:	440b      	add	r3, r1
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c54:	491a      	ldr	r1, [pc, #104]	; (8004cc0 <inc_lock+0x118>)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3308      	adds	r3, #8
 8004c5e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004c60:	4a17      	ldr	r2, [pc, #92]	; (8004cc0 <inc_lock+0x118>)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	011b      	lsls	r3, r3, #4
 8004c66:	4413      	add	r3, r2
 8004c68:	330c      	adds	r3, #12
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d009      	beq.n	8004c88 <inc_lock+0xe0>
 8004c74:	4a12      	ldr	r2, [pc, #72]	; (8004cc0 <inc_lock+0x118>)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	4413      	add	r3, r2
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <inc_lock+0xe0>
 8004c84:	2300      	movs	r3, #0
 8004c86:	e015      	b.n	8004cb4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d108      	bne.n	8004ca0 <inc_lock+0xf8>
 8004c8e:	4a0c      	ldr	r2, [pc, #48]	; (8004cc0 <inc_lock+0x118>)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	4413      	add	r3, r2
 8004c96:	330c      	adds	r3, #12
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	e001      	b.n	8004ca4 <inc_lock+0xfc>
 8004ca0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ca4:	4906      	ldr	r1, [pc, #24]	; (8004cc0 <inc_lock+0x118>)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	440b      	add	r3, r1
 8004cac:	330c      	adds	r3, #12
 8004cae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3301      	adds	r3, #1
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	200005cc 	.word	0x200005cc

08004cc4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	607b      	str	r3, [r7, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d825      	bhi.n	8004d24 <dec_lock+0x60>
		n = Files[i].ctr;
 8004cd8:	4a17      	ldr	r2, [pc, #92]	; (8004d38 <dec_lock+0x74>)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	4413      	add	r3, r2
 8004ce0:	330c      	adds	r3, #12
 8004ce2:	881b      	ldrh	r3, [r3, #0]
 8004ce4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004ce6:	89fb      	ldrh	r3, [r7, #14]
 8004ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cec:	d101      	bne.n	8004cf2 <dec_lock+0x2e>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004cf2:	89fb      	ldrh	r3, [r7, #14]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <dec_lock+0x3a>
 8004cf8:	89fb      	ldrh	r3, [r7, #14]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004cfe:	4a0e      	ldr	r2, [pc, #56]	; (8004d38 <dec_lock+0x74>)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	4413      	add	r3, r2
 8004d06:	330c      	adds	r3, #12
 8004d08:	89fa      	ldrh	r2, [r7, #14]
 8004d0a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004d0c:	89fb      	ldrh	r3, [r7, #14]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d105      	bne.n	8004d1e <dec_lock+0x5a>
 8004d12:	4a09      	ldr	r2, [pc, #36]	; (8004d38 <dec_lock+0x74>)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	4413      	add	r3, r2
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	737b      	strb	r3, [r7, #13]
 8004d22:	e001      	b.n	8004d28 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004d24:	2302      	movs	r3, #2
 8004d26:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004d28:	7b7b      	ldrb	r3, [r7, #13]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	200005cc 	.word	0x200005cc

08004d3c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004d44:	2300      	movs	r3, #0
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	e010      	b.n	8004d6c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004d4a:	4a0d      	ldr	r2, [pc, #52]	; (8004d80 <clear_lock+0x44>)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	4413      	add	r3, r2
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d105      	bne.n	8004d66 <clear_lock+0x2a>
 8004d5a:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <clear_lock+0x44>)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	4413      	add	r3, r2
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d9eb      	bls.n	8004d4a <clear_lock+0xe>
	}
}
 8004d72:	bf00      	nop
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	200005cc 	.word	0x200005cc

08004d84 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	78db      	ldrb	r3, [r3, #3]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d034      	beq.n	8004e02 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	7858      	ldrb	r0, [r3, #1]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004da8:	2301      	movs	r3, #1
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	f7ff fbdc 	bl	8004568 <disk_write>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d002      	beq.n	8004dbc <sync_window+0x38>
			res = FR_DISK_ERR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	73fb      	strb	r3, [r7, #15]
 8004dba:	e022      	b.n	8004e02 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	1ad2      	subs	r2, r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d217      	bcs.n	8004e02 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	789b      	ldrb	r3, [r3, #2]
 8004dd6:	613b      	str	r3, [r7, #16]
 8004dd8:	e010      	b.n	8004dfc <sync_window+0x78>
					wsect += fs->fsize;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4413      	add	r3, r2
 8004de2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	7858      	ldrb	r0, [r3, #1]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004dee:	2301      	movs	r3, #1
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	f7ff fbb9 	bl	8004568 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	613b      	str	r3, [r7, #16]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d8eb      	bhi.n	8004dda <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d01b      	beq.n	8004e5c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff ffad 	bl	8004d84 <sync_window>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004e2e:	7bfb      	ldrb	r3, [r7, #15]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d113      	bne.n	8004e5c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	7858      	ldrb	r0, [r3, #1]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004e3e:	2301      	movs	r3, #1
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	f7ff fb71 	bl	8004528 <disk_read>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d004      	beq.n	8004e56 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e50:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff ff87 	bl	8004d84 <sync_window>
 8004e76:	4603      	mov	r3, r0
 8004e78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d158      	bne.n	8004f32 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b03      	cmp	r3, #3
 8004e86:	d148      	bne.n	8004f1a <sync_fs+0xb2>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	791b      	ldrb	r3, [r3, #4]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d144      	bne.n	8004f1a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3338      	adds	r3, #56	; 0x38
 8004e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e98:	2100      	movs	r1, #0
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff fda8 	bl	80049f0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3338      	adds	r3, #56	; 0x38
 8004ea4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004ea8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff fcaf 	bl	8004810 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3338      	adds	r3, #56	; 0x38
 8004eb6:	4921      	ldr	r1, [pc, #132]	; (8004f3c <sync_fs+0xd4>)
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7ff fcc4 	bl	8004846 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3338      	adds	r3, #56	; 0x38
 8004ec2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004ec6:	491e      	ldr	r1, [pc, #120]	; (8004f40 <sync_fs+0xd8>)
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff fcbc 	bl	8004846 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	3338      	adds	r3, #56	; 0x38
 8004ed2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f7ff fcb2 	bl	8004846 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3338      	adds	r3, #56	; 0x38
 8004ee6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	f7ff fca8 	bl	8004846 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	7858      	ldrb	r0, [r3, #1]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f7ff fb2a 	bl	8004568 <disk_write>
			fs->fsi_flag = 0;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	785b      	ldrb	r3, [r3, #1]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	2100      	movs	r1, #0
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff fb40 	bl	80045a8 <disk_ioctl>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <sync_fs+0xca>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	41615252 	.word	0x41615252
 8004f40:	61417272 	.word	0x61417272

08004f44 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	3b02      	subs	r3, #2
 8004f52:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69db      	ldr	r3, [r3, #28]
 8004f58:	3b02      	subs	r3, #2
 8004f5a:	683a      	ldr	r2, [r7, #0]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d301      	bcc.n	8004f64 <clust2sect+0x20>
 8004f60:	2300      	movs	r3, #0
 8004f62:	e008      	b.n	8004f76 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	895b      	ldrh	r3, [r3, #10]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	fb03 f202 	mul.w	r2, r3, r2
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f74:	4413      	add	r3, r2
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
	...

08004f84 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004f8e:	6879      	ldr	r1, [r7, #4]
 8004f90:	6809      	ldr	r1, [r1, #0]
 8004f92:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004f94:	6839      	ldr	r1, [r7, #0]
 8004f96:	2901      	cmp	r1, #1
 8004f98:	d904      	bls.n	8004fa4 <get_fat+0x20>
 8004f9a:	69b9      	ldr	r1, [r7, #24]
 8004f9c:	69c9      	ldr	r1, [r1, #28]
 8004f9e:	6838      	ldr	r0, [r7, #0]
 8004fa0:	4288      	cmp	r0, r1
 8004fa2:	d302      	bcc.n	8004faa <get_fat+0x26>
		val = 1;	/* Internal error */
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	61fb      	str	r3, [r7, #28]
 8004fa8:	e101      	b.n	80051ae <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004faa:	f04f 31ff 	mov.w	r1, #4294967295
 8004fae:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 8004fb0:	69b9      	ldr	r1, [r7, #24]
 8004fb2:	7809      	ldrb	r1, [r1, #0]
 8004fb4:	3901      	subs	r1, #1
 8004fb6:	2903      	cmp	r1, #3
 8004fb8:	f200 80ed 	bhi.w	8005196 <get_fat+0x212>
 8004fbc:	a001      	add	r0, pc, #4	; (adr r0, 8004fc4 <get_fat+0x40>)
 8004fbe:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004fc2:	bf00      	nop
 8004fc4:	08004fd5 	.word	0x08004fd5
 8004fc8:	0800505d 	.word	0x0800505d
 8004fcc:	08005093 	.word	0x08005093
 8004fd0:	080050cb 	.word	0x080050cb
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	60fb      	str	r3, [r7, #12]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	085b      	lsrs	r3, r3, #1
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	0a5b      	lsrs	r3, r3, #9
 8004fea:	4413      	add	r3, r2
 8004fec:	4619      	mov	r1, r3
 8004fee:	69b8      	ldr	r0, [r7, #24]
 8004ff0:	f7ff ff0c 	bl	8004e0c <move_window>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f040 80d0 	bne.w	800519c <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	60fa      	str	r2, [r7, #12]
 8005002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4413      	add	r3, r2
 800500a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800500e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	0a5b      	lsrs	r3, r3, #9
 8005018:	4413      	add	r3, r2
 800501a:	4619      	mov	r1, r3
 800501c:	69b8      	ldr	r0, [r7, #24]
 800501e:	f7ff fef5 	bl	8004e0c <move_window>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	f040 80bb 	bne.w	80051a0 <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	4413      	add	r3, r2
 8005034:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	461a      	mov	r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4313      	orrs	r3, r2
 8005040:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <get_fat+0xce>
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	091b      	lsrs	r3, r3, #4
 8005050:	e002      	b.n	8005058 <get_fat+0xd4>
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005058:	61fb      	str	r3, [r7, #28]
			break;
 800505a:	e0a8      	b.n	80051ae <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	0a1b      	lsrs	r3, r3, #8
 8005064:	4413      	add	r3, r2
 8005066:	4619      	mov	r1, r3
 8005068:	69b8      	ldr	r0, [r7, #24]
 800506a:	f7ff fecf 	bl	8004e0c <move_window>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	f040 8097 	bne.w	80051a4 <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005084:	4413      	add	r3, r2
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff faac 	bl	80045e4 <ld_word>
 800508c:	4603      	mov	r3, r0
 800508e:	61fb      	str	r3, [r7, #28]
			break;
 8005090:	e08d      	b.n	80051ae <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	09db      	lsrs	r3, r3, #7
 800509a:	4413      	add	r3, r2
 800509c:	4619      	mov	r1, r3
 800509e:	69b8      	ldr	r0, [r7, #24]
 80050a0:	f7ff feb4 	bl	8004e0c <move_window>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d17e      	bne.n	80051a8 <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80050aa:	69bb      	ldr	r3, [r7, #24]
 80050ac:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80050b8:	4413      	add	r3, r2
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff faaa 	bl	8004614 <ld_dword>
 80050c0:	4603      	mov	r3, r0
 80050c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050c6:	61fb      	str	r3, [r7, #28]
			break;
 80050c8:	e071      	b.n	80051ae <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80050d0:	4301      	orrs	r1, r0
 80050d2:	d060      	beq.n	8005196 <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	6889      	ldr	r1, [r1, #8]
 80050d8:	6838      	ldr	r0, [r7, #0]
 80050da:	1a41      	subs	r1, r0, r1
 80050dc:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80050e4:	1e42      	subs	r2, r0, #1
 80050e6:	f141 33ff 	adc.w	r3, r1, #4294967295
 80050ea:	f04f 0000 	mov.w	r0, #0
 80050ee:	f04f 0100 	mov.w	r1, #0
 80050f2:	0a50      	lsrs	r0, r2, #9
 80050f4:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80050f8:	0a59      	lsrs	r1, r3, #9
 80050fa:	4602      	mov	r2, r0
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	895b      	ldrh	r3, [r3, #10]
 8005100:	fbb2 f3f3 	udiv	r3, r2, r3
 8005104:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	79db      	ldrb	r3, [r3, #7]
 800510a:	2b02      	cmp	r3, #2
 800510c:	d10e      	bne.n	800512c <get_fat+0x1a8>
					if (cofs <= clen) {
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	429a      	cmp	r2, r3
 8005114:	d80a      	bhi.n	800512c <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	429a      	cmp	r2, r3
 800511c:	d002      	beq.n	8005124 <get_fat+0x1a0>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	3301      	adds	r3, #1
 8005122:	e001      	b.n	8005128 <get_fat+0x1a4>
 8005124:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005128:	61fb      	str	r3, [r7, #28]
						break;
 800512a:	e040      	b.n	80051ae <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	79db      	ldrb	r3, [r3, #7]
 8005130:	2b03      	cmp	r3, #3
 8005132:	d108      	bne.n	8005146 <get_fat+0x1c2>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	429a      	cmp	r2, r3
 800513c:	d203      	bcs.n	8005146 <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	3301      	adds	r3, #1
 8005142:	61fb      	str	r3, [r7, #28]
					break;
 8005144:	e033      	b.n	80051ae <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	79db      	ldrb	r3, [r3, #7]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d023      	beq.n	8005196 <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8005156:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800515a:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800515c:	e027      	b.n	80051ae <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	09db      	lsrs	r3, r3, #7
 8005166:	4413      	add	r3, r2
 8005168:	4619      	mov	r1, r3
 800516a:	69b8      	ldr	r0, [r7, #24]
 800516c:	f7ff fe4e 	bl	8004e0c <move_window>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d11a      	bne.n	80051ac <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005184:	4413      	add	r3, r2
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff fa44 	bl	8004614 <ld_dword>
 800518c:	4603      	mov	r3, r0
 800518e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005192:	61fb      	str	r3, [r7, #28]
					break;
 8005194:	e00b      	b.n	80051ae <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005196:	2301      	movs	r3, #1
 8005198:	61fb      	str	r3, [r7, #28]
 800519a:	e008      	b.n	80051ae <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800519c:	bf00      	nop
 800519e:	e006      	b.n	80051ae <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80051a0:	bf00      	nop
 80051a2:	e004      	b.n	80051ae <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80051a4:	bf00      	nop
 80051a6:	e002      	b.n	80051ae <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80051a8:	bf00      	nop
 80051aa:	e000      	b.n	80051ae <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80051ac:	bf00      	nop
		}
	}

	return val;
 80051ae:	69fb      	ldr	r3, [r7, #28]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3720      	adds	r7, #32
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80051b8:	b590      	push	{r4, r7, lr}
 80051ba:	b089      	sub	sp, #36	; 0x24
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80051c4:	2302      	movs	r3, #2
 80051c6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	f240 80d6 	bls.w	800537c <put_fat+0x1c4>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	69db      	ldr	r3, [r3, #28]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	f080 80d0 	bcs.w	800537c <put_fat+0x1c4>
		switch (fs->fs_type) {
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	f300 80d4 	bgt.w	800538e <put_fat+0x1d6>
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	f280 8093 	bge.w	8005312 <put_fat+0x15a>
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d002      	beq.n	80051f6 <put_fat+0x3e>
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d06e      	beq.n	80052d2 <put_fat+0x11a>
 80051f4:	e0cb      	b.n	800538e <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	61bb      	str	r3, [r7, #24]
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	085b      	lsrs	r3, r3, #1
 80051fe:	69ba      	ldr	r2, [r7, #24]
 8005200:	4413      	add	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	0a5b      	lsrs	r3, r3, #9
 800520c:	4413      	add	r3, r2
 800520e:	4619      	mov	r1, r3
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f7ff fdfb 	bl	8004e0c <move_window>
 8005216:	4603      	mov	r3, r0
 8005218:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800521a:	7ffb      	ldrb	r3, [r7, #31]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f040 80af 	bne.w	8005380 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	1c59      	adds	r1, r3, #1
 800522c:	61b9      	str	r1, [r7, #24]
 800522e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005232:	4413      	add	r3, r2
 8005234:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00d      	beq.n	800525c <put_fat+0xa4>
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	b25b      	sxtb	r3, r3
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	b25a      	sxtb	r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	b2db      	uxtb	r3, r3
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	b25b      	sxtb	r3, r3
 8005254:	4313      	orrs	r3, r2
 8005256:	b25b      	sxtb	r3, r3
 8005258:	b2db      	uxtb	r3, r3
 800525a:	e001      	b.n	8005260 <put_fat+0xa8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	b2db      	uxtb	r3, r3
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2201      	movs	r2, #1
 8005268:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	0a5b      	lsrs	r3, r3, #9
 8005272:	4413      	add	r3, r2
 8005274:	4619      	mov	r1, r3
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f7ff fdc8 	bl	8004e0c <move_window>
 800527c:	4603      	mov	r3, r0
 800527e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005280:	7ffb      	ldrb	r3, [r7, #31]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d17e      	bne.n	8005384 <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005292:	4413      	add	r3, r2
 8005294:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <put_fat+0xf0>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	091b      	lsrs	r3, r3, #4
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	e00e      	b.n	80052c6 <put_fat+0x10e>
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	b25b      	sxtb	r3, r3
 80052ae:	f023 030f 	bic.w	r3, r3, #15
 80052b2:	b25a      	sxtb	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	0a1b      	lsrs	r3, r3, #8
 80052b8:	b25b      	sxtb	r3, r3
 80052ba:	f003 030f 	and.w	r3, r3, #15
 80052be:	b25b      	sxtb	r3, r3
 80052c0:	4313      	orrs	r3, r2
 80052c2:	b25b      	sxtb	r3, r3
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2201      	movs	r2, #1
 80052ce:	70da      	strb	r2, [r3, #3]
			break;
 80052d0:	e05d      	b.n	800538e <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	0a1b      	lsrs	r3, r3, #8
 80052da:	4413      	add	r3, r2
 80052dc:	4619      	mov	r1, r3
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f7ff fd94 	bl	8004e0c <move_window>
 80052e4:	4603      	mov	r3, r0
 80052e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80052e8:	7ffb      	ldrb	r3, [r7, #31]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d14c      	bne.n	8005388 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80052fc:	4413      	add	r3, r2
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	b292      	uxth	r2, r2
 8005302:	4611      	mov	r1, r2
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff fa83 	bl	8004810 <st_word>
			fs->wflag = 1;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2201      	movs	r2, #1
 800530e:	70da      	strb	r2, [r3, #3]
			break;
 8005310:	e03d      	b.n	800538e <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	09db      	lsrs	r3, r3, #7
 800531a:	4413      	add	r3, r2
 800531c:	4619      	mov	r1, r3
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f7ff fd74 	bl	8004e0c <move_window>
 8005324:	4603      	mov	r3, r0
 8005326:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005328:	7ffb      	ldrb	r3, [r7, #31]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d12e      	bne.n	800538c <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b04      	cmp	r3, #4
 8005334:	d012      	beq.n	800535c <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800534a:	4413      	add	r3, r2
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff f961 	bl	8004614 <ld_dword>
 8005352:	4603      	mov	r3, r0
 8005354:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005358:	4323      	orrs	r3, r4
 800535a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800536a:	4413      	add	r3, r2
 800536c:	6879      	ldr	r1, [r7, #4]
 800536e:	4618      	mov	r0, r3
 8005370:	f7ff fa69 	bl	8004846 <st_dword>
			fs->wflag = 1;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2201      	movs	r2, #1
 8005378:	70da      	strb	r2, [r3, #3]
			break;
 800537a:	e008      	b.n	800538e <put_fat+0x1d6>
		}
	}
 800537c:	bf00      	nop
 800537e:	e006      	b.n	800538e <put_fat+0x1d6>
			if (res != FR_OK) break;
 8005380:	bf00      	nop
 8005382:	e004      	b.n	800538e <put_fat+0x1d6>
			if (res != FR_OK) break;
 8005384:	bf00      	nop
 8005386:	e002      	b.n	800538e <put_fat+0x1d6>
			if (res != FR_OK) break;
 8005388:	bf00      	nop
 800538a:	e000      	b.n	800538e <put_fat+0x1d6>
			if (res != FR_OK) break;
 800538c:	bf00      	nop
	return res;
 800538e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3724      	adds	r7, #36	; 0x24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd90      	pop	{r4, r7, pc}

08005398 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08a      	sub	sp, #40	; 0x28
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	3b02      	subs	r3, #2
 80053a8:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	3b02      	subs	r3, #2
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d301      	bcc.n	80053ba <find_bitmap+0x22>
 80053b6:	2300      	movs	r3, #0
 80053b8:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	61fb      	str	r3, [r7, #28]
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	61bb      	str	r3, [r7, #24]
 80053c2:	2300      	movs	r3, #0
 80053c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	0b1b      	lsrs	r3, r3, #12
 80053ce:	4413      	add	r3, r2
 80053d0:	4619      	mov	r1, r3
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f7ff fd1a 	bl	8004e0c <move_window>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <find_bitmap+0x4c>
 80053de:	f04f 33ff 	mov.w	r3, #4294967295
 80053e2:	e051      	b.n	8005488 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	08db      	lsrs	r3, r3, #3
 80053e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ec:	623b      	str	r3, [r7, #32]
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	2201      	movs	r2, #1
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	6a3b      	ldr	r3, [r7, #32]
 8005402:	4413      	add	r3, r2
 8005404:	3338      	adds	r3, #56	; 0x38
 8005406:	781a      	ldrb	r2, [r3, #0]
 8005408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800540c:	4013      	ands	r3, r2
 800540e:	74fb      	strb	r3, [r7, #19]
 8005410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	3301      	adds	r3, #1
 800541e:	61fb      	str	r3, [r7, #28]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	3b02      	subs	r3, #2
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	429a      	cmp	r2, r3
 800542a:	d307      	bcc.n	800543c <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800542c:	2300      	movs	r3, #0
 800542e:	61fb      	str	r3, [r7, #28]
 8005430:	2300      	movs	r3, #0
 8005432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800543a:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800543c:	7cfb      	ldrb	r3, [r7, #19]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	3301      	adds	r3, #1
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	697a      	ldr	r2, [r7, #20]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	429a      	cmp	r2, r3
 800544e:	d106      	bne.n	800545e <find_bitmap+0xc6>
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	3302      	adds	r3, #2
 8005454:	e018      	b.n	8005488 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800545e:	69fa      	ldr	r2, [r7, #28]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	429a      	cmp	r2, r3
 8005464:	d101      	bne.n	800546a <find_bitmap+0xd2>
 8005466:	2300      	movs	r3, #0
 8005468:	e00e      	b.n	8005488 <find_bitmap+0xf0>
			} while (bm);
 800546a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1c5      	bne.n	80053fe <find_bitmap+0x66>
			bm = 1;
 8005472:	2301      	movs	r3, #1
 8005474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	3301      	adds	r3, #1
 800547c:	623b      	str	r3, [r7, #32]
 800547e:	6a3b      	ldr	r3, [r7, #32]
 8005480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005484:	d3bb      	bcc.n	80053fe <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8005486:	e79e      	b.n	80053c6 <find_bitmap+0x2e>
	}
}
 8005488:	4618      	mov	r0, r3
 800548a:	3728      	adds	r7, #40	; 0x28
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
 800549c:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	3b02      	subs	r3, #2
 80054a2:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	0b1b      	lsrs	r3, r3, #12
 80054ac:	4413      	add	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	08db      	lsrs	r3, r3, #3
 80054b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b8:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	2201      	movs	r2, #1
 80054c2:	fa02 f303 	lsl.w	r3, r2, r3
 80054c6:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	1c5a      	adds	r2, r3, #1
 80054cc:	617a      	str	r2, [r7, #20]
 80054ce:	4619      	mov	r1, r3
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f7ff fc9b 	bl	8004e0c <move_window>
 80054d6:	4603      	mov	r3, r0
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d001      	beq.n	80054e0 <change_bitmap+0x50>
 80054dc:	2301      	movs	r3, #1
 80054de:	e03d      	b.n	800555c <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	4413      	add	r3, r2
 80054e6:	3338      	adds	r3, #56	; 0x38
 80054e8:	781a      	ldrb	r2, [r3, #0]
 80054ea:	7ffb      	ldrb	r3, [r7, #31]
 80054ec:	4013      	ands	r3, r2
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	bf14      	ite	ne
 80054f4:	2301      	movne	r3, #1
 80054f6:	2300      	moveq	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	461a      	mov	r2, r3
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	4293      	cmp	r3, r2
 8005500:	d101      	bne.n	8005506 <change_bitmap+0x76>
 8005502:	2302      	movs	r3, #2
 8005504:	e02a      	b.n	800555c <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	4413      	add	r3, r2
 800550c:	3338      	adds	r3, #56	; 0x38
 800550e:	781a      	ldrb	r2, [r3, #0]
 8005510:	7ffb      	ldrb	r3, [r7, #31]
 8005512:	4053      	eors	r3, r2
 8005514:	b2d9      	uxtb	r1, r3
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	4413      	add	r3, r2
 800551c:	3338      	adds	r3, #56	; 0x38
 800551e:	460a      	mov	r2, r1
 8005520:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2201      	movs	r2, #1
 8005526:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3b01      	subs	r3, #1
 800552c:	607b      	str	r3, [r7, #4]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <change_bitmap+0xa8>
 8005534:	2300      	movs	r3, #0
 8005536:	e011      	b.n	800555c <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 8005538:	7ffb      	ldrb	r3, [r7, #31]
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	77fb      	strb	r3, [r7, #31]
 800553e:	7ffb      	ldrb	r3, [r7, #31]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d1cd      	bne.n	80054e0 <change_bitmap+0x50>
			bm = 1;
 8005544:	2301      	movs	r3, #1
 8005546:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	3301      	adds	r3, #1
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005554:	d3c4      	bcc.n	80054e0 <change_bitmap+0x50>
		i = 0;
 8005556:	2300      	movs	r3, #0
 8005558:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800555a:	e7b5      	b.n	80054c8 <change_bitmap+0x38>
	}
}
 800555c:	4618      	mov	r0, r3
 800555e:	3720      	adds	r7, #32
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	79db      	ldrb	r3, [r3, #7]
 8005570:	2b03      	cmp	r3, #3
 8005572:	d121      	bne.n	80055b8 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	617b      	str	r3, [r7, #20]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	613b      	str	r3, [r7, #16]
 8005580:	e014      	b.n	80055ac <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	3301      	adds	r3, #1
 800558a:	461a      	mov	r2, r3
 800558c:	6979      	ldr	r1, [r7, #20]
 800558e:	f7ff fe13 	bl	80051b8 <put_fat>
 8005592:	4603      	mov	r3, r0
 8005594:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <fill_first_frag+0x3c>
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	e00c      	b.n	80055ba <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	3301      	adds	r3, #1
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	613b      	str	r3, [r7, #16]
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e7      	bne.n	8005582 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3718      	adds	r7, #24
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b086      	sub	sp, #24
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 80055ce:	e020      	b.n	8005612 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6818      	ldr	r0, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	1c59      	adds	r1, r3, #1
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d905      	bls.n	80055f2 <fill_last_frag+0x30>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	3302      	adds	r3, #2
 80055f0:	e000      	b.n	80055f4 <fill_last_frag+0x32>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	461a      	mov	r2, r3
 80055f6:	f7ff fddf 	bl	80051b8 <put_fat>
 80055fa:	4603      	mov	r3, r0
 80055fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <fill_last_frag+0x46>
 8005604:	7dfb      	ldrb	r3, [r7, #23]
 8005606:	e009      	b.n	800561c <fill_last_frag+0x5a>
		obj->n_frag--;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	1e5a      	subs	r2, r3, #1
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1da      	bne.n	80055d0 <fill_last_frag+0xe>
	}
	return FR_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b08a      	sub	sp, #40	; 0x28
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	627b      	str	r3, [r7, #36]	; 0x24
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d904      	bls.n	8005652 <remove_chain+0x2e>
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	69db      	ldr	r3, [r3, #28]
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	429a      	cmp	r2, r3
 8005650:	d301      	bcc.n	8005656 <remove_chain+0x32>
 8005652:	2302      	movs	r3, #2
 8005654:	e096      	b.n	8005784 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d014      	beq.n	8005686 <remove_chain+0x62>
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	2b04      	cmp	r3, #4
 8005662:	d103      	bne.n	800566c <remove_chain+0x48>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	79db      	ldrb	r3, [r3, #7]
 8005668:	2b02      	cmp	r3, #2
 800566a:	d00c      	beq.n	8005686 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800566c:	f04f 32ff 	mov.w	r2, #4294967295
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	69b8      	ldr	r0, [r7, #24]
 8005674:	f7ff fda0 	bl	80051b8 <put_fat>
 8005678:	4603      	mov	r3, r0
 800567a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800567c:	7ffb      	ldrb	r3, [r7, #31]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <remove_chain+0x62>
 8005682:	7ffb      	ldrb	r3, [r7, #31]
 8005684:	e07e      	b.n	8005784 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f7ff fc7b 	bl	8004f84 <get_fat>
 800568e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d055      	beq.n	8005742 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d101      	bne.n	80056a0 <remove_chain+0x7c>
 800569c:	2302      	movs	r3, #2
 800569e:	e071      	b.n	8005784 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a6:	d101      	bne.n	80056ac <remove_chain+0x88>
 80056a8:	2301      	movs	r3, #1
 80056aa:	e06b      	b.n	8005784 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d00b      	beq.n	80056cc <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80056b4:	2200      	movs	r2, #0
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	69b8      	ldr	r0, [r7, #24]
 80056ba:	f7ff fd7d 	bl	80051b8 <put_fat>
 80056be:	4603      	mov	r3, r0
 80056c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80056c2:	7ffb      	ldrb	r3, [r7, #31]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <remove_chain+0xa8>
 80056c8:	7ffb      	ldrb	r3, [r7, #31]
 80056ca:	e05b      	b.n	8005784 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	699a      	ldr	r2, [r3, #24]
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	3b02      	subs	r3, #2
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d20b      	bcs.n	80056f2 <remove_chain+0xce>
			fs->free_clst++;
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	1c5a      	adds	r2, r3, #1
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	791b      	ldrb	r3, [r3, #4]
 80056e8:	f043 0301 	orr.w	r3, r3, #1
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	3301      	adds	r3, #1
 80056f6:	697a      	ldr	r2, [r7, #20]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d102      	bne.n	8005702 <remove_chain+0xde>
			ecl = nxt;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	623b      	str	r3, [r7, #32]
 8005700:	e017      	b.n	8005732 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	2b04      	cmp	r3, #4
 8005708:	d10f      	bne.n	800572a <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800570a:	6a3a      	ldr	r2, [r7, #32]
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	1c5a      	adds	r2, r3, #1
 8005712:	2300      	movs	r3, #0
 8005714:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005716:	69b8      	ldr	r0, [r7, #24]
 8005718:	f7ff feba 	bl	8005490 <change_bitmap>
 800571c:	4603      	mov	r3, r0
 800571e:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8005720:	7ffb      	ldrb	r3, [r7, #31]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <remove_chain+0x106>
 8005726:	7ffb      	ldrb	r3, [r7, #31]
 8005728:	e02c      	b.n	8005784 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	623b      	str	r3, [r7, #32]
 800572e:	6a3b      	ldr	r3, [r7, #32]
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	429a      	cmp	r2, r3
 800573e:	d3a2      	bcc.n	8005686 <remove_chain+0x62>
 8005740:	e000      	b.n	8005744 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8005742:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b04      	cmp	r3, #4
 800574a:	d11a      	bne.n	8005782 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d103      	bne.n	800575a <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	71da      	strb	r2, [r3, #7]
 8005758:	e013      	b.n	8005782 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	79db      	ldrb	r3, [r3, #7]
 800575e:	2b03      	cmp	r3, #3
 8005760:	d10f      	bne.n	8005782 <remove_chain+0x15e>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	429a      	cmp	r2, r3
 800576a:	d30a      	bcc.n	8005782 <remove_chain+0x15e>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	4413      	add	r3, r2
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	429a      	cmp	r2, r3
 800577a:	d802      	bhi.n	8005782 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2202      	movs	r2, #2
 8005780:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3728      	adds	r7, #40	; 0x28
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10d      	bne.n	80057be <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d004      	beq.n	80057b8 <create_chain+0x2c>
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	69db      	ldr	r3, [r3, #28]
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d31b      	bcc.n	80057f0 <create_chain+0x64>
 80057b8:	2301      	movs	r3, #1
 80057ba:	61bb      	str	r3, [r7, #24]
 80057bc:	e018      	b.n	80057f0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80057be:	6839      	ldr	r1, [r7, #0]
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff fbdf 	bl	8004f84 <get_fat>
 80057c6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d801      	bhi.n	80057d2 <create_chain+0x46>
 80057ce:	2301      	movs	r3, #1
 80057d0:	e0d9      	b.n	8005986 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d8:	d101      	bne.n	80057de <create_chain+0x52>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	e0d3      	b.n	8005986 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d201      	bcs.n	80057ec <create_chain+0x60>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	e0cc      	b.n	8005986 <create_chain+0x1fa>
		scl = clst;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b04      	cmp	r3, #4
 80057f6:	d164      	bne.n	80058c2 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 80057f8:	2201      	movs	r2, #1
 80057fa:	69b9      	ldr	r1, [r7, #24]
 80057fc:	6938      	ldr	r0, [r7, #16]
 80057fe:	f7ff fdcb 	bl	8005398 <find_bitmap>
 8005802:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <create_chain+0x86>
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005810:	d101      	bne.n	8005816 <create_chain+0x8a>
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	e0b7      	b.n	8005986 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8005816:	2301      	movs	r3, #1
 8005818:	2201      	movs	r2, #1
 800581a:	69f9      	ldr	r1, [r7, #28]
 800581c:	6938      	ldr	r0, [r7, #16]
 800581e:	f7ff fe37 	bl	8005490 <change_bitmap>
 8005822:	4603      	mov	r3, r0
 8005824:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8005826:	7dfb      	ldrb	r3, [r7, #23]
 8005828:	2b02      	cmp	r3, #2
 800582a:	d101      	bne.n	8005830 <create_chain+0xa4>
 800582c:	2301      	movs	r3, #1
 800582e:	e0aa      	b.n	8005986 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8005830:	7dfb      	ldrb	r3, [r7, #23]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d102      	bne.n	800583c <create_chain+0xb0>
 8005836:	f04f 33ff 	mov.w	r3, #4294967295
 800583a:	e0a4      	b.n	8005986 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d103      	bne.n	800584a <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2202      	movs	r2, #2
 8005846:	71da      	strb	r2, [r3, #7]
 8005848:	e011      	b.n	800586e <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	79db      	ldrb	r3, [r3, #7]
 800584e:	2b02      	cmp	r3, #2
 8005850:	d10d      	bne.n	800586e <create_chain+0xe2>
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	3301      	adds	r3, #1
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	429a      	cmp	r2, r3
 800585a:	d008      	beq.n	800586e <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	1ad2      	subs	r2, r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2203      	movs	r2, #3
 800586c:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	79db      	ldrb	r3, [r3, #7]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d064      	beq.n	8005940 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	3301      	adds	r3, #1
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	429a      	cmp	r2, r3
 800587e:	d10b      	bne.n	8005898 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <create_chain+0x104>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	3301      	adds	r3, #1
 800588e:	e000      	b.n	8005892 <create_chain+0x106>
 8005890:	2302      	movs	r3, #2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	61d3      	str	r3, [r2, #28]
 8005896:	e053      	b.n	8005940 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d102      	bne.n	80058a6 <create_chain+0x11a>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 80058a6:	69fa      	ldr	r2, [r7, #28]
 80058a8:	6839      	ldr	r1, [r7, #0]
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff fe89 	bl	80055c2 <fill_last_frag>
 80058b0:	4603      	mov	r3, r0
 80058b2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 80058b4:	7dfb      	ldrb	r3, [r7, #23]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d142      	bne.n	8005940 <create_chain+0x1b4>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	61da      	str	r2, [r3, #28]
 80058c0:	e03e      	b.n	8005940 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	3301      	adds	r3, #1
 80058ca:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d307      	bcc.n	80058e6 <create_chain+0x15a>
				ncl = 2;
 80058d6:	2302      	movs	r3, #2
 80058d8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80058da:	69fa      	ldr	r2, [r7, #28]
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d901      	bls.n	80058e6 <create_chain+0x15a>
 80058e2:	2300      	movs	r3, #0
 80058e4:	e04f      	b.n	8005986 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80058e6:	69f9      	ldr	r1, [r7, #28]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff fb4b 	bl	8004f84 <get_fat>
 80058ee:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00e      	beq.n	8005914 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d003      	beq.n	8005904 <create_chain+0x178>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005902:	d101      	bne.n	8005908 <create_chain+0x17c>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	e03e      	b.n	8005986 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	429a      	cmp	r2, r3
 800590e:	d1da      	bne.n	80058c6 <create_chain+0x13a>
 8005910:	2300      	movs	r3, #0
 8005912:	e038      	b.n	8005986 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8005914:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005916:	f04f 32ff 	mov.w	r2, #4294967295
 800591a:	69f9      	ldr	r1, [r7, #28]
 800591c:	6938      	ldr	r0, [r7, #16]
 800591e:	f7ff fc4b 	bl	80051b8 <put_fat>
 8005922:	4603      	mov	r3, r0
 8005924:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005926:	7dfb      	ldrb	r3, [r7, #23]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d109      	bne.n	8005940 <create_chain+0x1b4>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d006      	beq.n	8005940 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	6839      	ldr	r1, [r7, #0]
 8005936:	6938      	ldr	r0, [r7, #16]
 8005938:	f7ff fc3e 	bl	80051b8 <put_fat>
 800593c:	4603      	mov	r3, r0
 800593e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005940:	7dfb      	ldrb	r3, [r7, #23]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d116      	bne.n	8005974 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	69fa      	ldr	r2, [r7, #28]
 800594a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	699a      	ldr	r2, [r3, #24]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	69db      	ldr	r3, [r3, #28]
 8005954:	3b02      	subs	r3, #2
 8005956:	429a      	cmp	r2, r3
 8005958:	d804      	bhi.n	8005964 <create_chain+0x1d8>
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	1e5a      	subs	r2, r3, #1
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	791b      	ldrb	r3, [r3, #4]
 8005968:	f043 0301 	orr.w	r3, r3, #1
 800596c:	b2da      	uxtb	r2, r3
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	711a      	strb	r2, [r3, #4]
 8005972:	e007      	b.n	8005984 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005974:	7dfb      	ldrb	r3, [r7, #23]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d102      	bne.n	8005980 <create_chain+0x1f4>
 800597a:	f04f 33ff 	mov.w	r3, #4294967295
 800597e:	e000      	b.n	8005982 <create_chain+0x1f6>
 8005980:	2301      	movs	r3, #1
 8005982:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005984:	69fb      	ldr	r3, [r7, #28]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3720      	adds	r7, #32
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800598e:	b5b0      	push	{r4, r5, r7, lr}
 8005990:	b088      	sub	sp, #32
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a4:	3304      	adds	r3, #4
 80059a6:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80059a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ac:	f04f 0000 	mov.w	r0, #0
 80059b0:	f04f 0100 	mov.w	r1, #0
 80059b4:	0a50      	lsrs	r0, r2, #9
 80059b6:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80059ba:	0a59      	lsrs	r1, r3, #9
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	895b      	ldrh	r3, [r3, #10]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2200      	movs	r2, #0
 80059c4:	461c      	mov	r4, r3
 80059c6:	4615      	mov	r5, r2
 80059c8:	4622      	mov	r2, r4
 80059ca:	462b      	mov	r3, r5
 80059cc:	f7fa fc04 	bl	80001d8 <__aeabi_uldivmod>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4613      	mov	r3, r2
 80059d6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	1d1a      	adds	r2, r3, #4
 80059dc:	61ba      	str	r2, [r7, #24]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <clmt_clust+0x5e>
 80059e8:	2300      	movs	r3, #0
 80059ea:	e010      	b.n	8005a0e <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d307      	bcc.n	8005a04 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	61fb      	str	r3, [r7, #28]
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	3304      	adds	r3, #4
 8005a00:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005a02:	e7e9      	b.n	80059d8 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 8005a04:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3720      	adds	r7, #32
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bdb0      	pop	{r4, r5, r7, pc}

08005a16 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b086      	sub	sp, #24
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d102      	bne.n	8005a34 <dir_sdi+0x1e>
 8005a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a32:	e001      	b.n	8005a38 <dir_sdi+0x22>
 8005a34:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d904      	bls.n	8005a48 <dir_sdi+0x32>
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	f003 031f 	and.w	r3, r3, #31
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <dir_sdi+0x36>
		return FR_INT_ERR;
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e066      	b.n	8005b1a <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d109      	bne.n	8005a72 <dir_sdi+0x5c>
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	2b02      	cmp	r3, #2
 8005a64:	d905      	bls.n	8005a72 <dir_sdi+0x5c>
		clst = fs->dirbase;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10c      	bne.n	8005a92 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	8912      	ldrh	r2, [r2, #8]
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d301      	bcc.n	8005a88 <dir_sdi+0x72>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e048      	b.n	8005b1a <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	639a      	str	r2, [r3, #56]	; 0x38
 8005a90:	e029      	b.n	8005ae6 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	895b      	ldrh	r3, [r3, #10]
 8005a96:	025b      	lsls	r3, r3, #9
 8005a98:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005a9a:	e019      	b.n	8005ad0 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6979      	ldr	r1, [r7, #20]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff fa6f 	bl	8004f84 <get_fat>
 8005aa6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aae:	d101      	bne.n	8005ab4 <dir_sdi+0x9e>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e032      	b.n	8005b1a <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d904      	bls.n	8005ac4 <dir_sdi+0xae>
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d301      	bcc.n	8005ac8 <dir_sdi+0xb2>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e028      	b.n	8005b1a <dir_sdi+0x104>
			ofs -= csz;
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d2e1      	bcs.n	8005a9c <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 8005ad8:	6979      	ldr	r1, [r7, #20]
 8005ada:	6938      	ldr	r0, [r7, #16]
 8005adc:	f7ff fa32 	bl	8004f44 <clust2sect>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d101      	bne.n	8005af8 <dir_sdi+0xe2>
 8005af4:	2302      	movs	r3, #2
 8005af6:	e010      	b.n	8005b1a <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	0a5b      	lsrs	r3, r3, #9
 8005b00:	441a      	add	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b12:	441a      	add	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b086      	sub	sp, #24
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b36:	3320      	adds	r3, #32
 8005b38:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00b      	beq.n	8005b5a <dir_next+0x38>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d102      	bne.n	8005b50 <dir_next+0x2e>
 8005b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b4e:	e001      	b.n	8005b54 <dir_next+0x32>
 8005b50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d801      	bhi.n	8005b5e <dir_next+0x3c>
 8005b5a:	2304      	movs	r3, #4
 8005b5c:	e0b2      	b.n	8005cc4 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f040 80a0 	bne.w	8005caa <dir_next+0x188>
		dp->sect++;				/* Next sector */
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	1c5a      	adds	r2, r3, #1
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10b      	bne.n	8005b94 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	8912      	ldrh	r2, [r2, #8]
 8005b84:	4293      	cmp	r3, r2
 8005b86:	f0c0 8090 	bcc.w	8005caa <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	639a      	str	r2, [r3, #56]	; 0x38
 8005b90:	2304      	movs	r3, #4
 8005b92:	e097      	b.n	8005cc4 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	0a5b      	lsrs	r3, r3, #9
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	8952      	ldrh	r2, [r2, #10]
 8005b9c:	3a01      	subs	r2, #1
 8005b9e:	4013      	ands	r3, r2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f040 8082 	bne.w	8005caa <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bac:	4619      	mov	r1, r3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	f7ff f9e8 	bl	8004f84 <get_fat>
 8005bb4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d801      	bhi.n	8005bc0 <dir_next+0x9e>
 8005bbc:	2302      	movs	r3, #2
 8005bbe:	e081      	b.n	8005cc4 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc6:	d101      	bne.n	8005bcc <dir_next+0xaa>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e07b      	b.n	8005cc4 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	69db      	ldr	r3, [r3, #28]
 8005bd0:	697a      	ldr	r2, [r7, #20]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d35f      	bcc.n	8005c96 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d104      	bne.n	8005be6 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	639a      	str	r2, [r3, #56]	; 0x38
 8005be2:	2304      	movs	r3, #4
 8005be4:	e06e      	b.n	8005cc4 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bec:	4619      	mov	r1, r3
 8005bee:	4610      	mov	r0, r2
 8005bf0:	f7ff fdcc 	bl	800578c <create_chain>
 8005bf4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d101      	bne.n	8005c00 <dir_next+0xde>
 8005bfc:	2307      	movs	r3, #7
 8005bfe:	e061      	b.n	8005cc4 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <dir_next+0xe8>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e05c      	b.n	8005cc4 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c10:	d101      	bne.n	8005c16 <dir_next+0xf4>
 8005c12:	2301      	movs	r3, #1
 8005c14:	e056      	b.n	8005cc4 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	79db      	ldrb	r3, [r3, #7]
 8005c1a:	f043 0304 	orr.w	r3, r3, #4
 8005c1e:	b2da      	uxtb	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7ff f8ad 	bl	8004d84 <sync_window>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d001      	beq.n	8005c34 <dir_next+0x112>
 8005c30:	2301      	movs	r3, #1
 8005c32:	e047      	b.n	8005cc4 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3338      	adds	r3, #56	; 0x38
 8005c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fe fed6 	bl	80049f0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005c44:	2300      	movs	r3, #0
 8005c46:	613b      	str	r3, [r7, #16]
 8005c48:	6979      	ldr	r1, [r7, #20]
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f7ff f97a 	bl	8004f44 <clust2sect>
 8005c50:	4602      	mov	r2, r0
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	635a      	str	r2, [r3, #52]	; 0x34
 8005c56:	e012      	b.n	8005c7e <dir_next+0x15c>
						fs->wflag = 1;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005c5e:	68f8      	ldr	r0, [r7, #12]
 8005c60:	f7ff f890 	bl	8004d84 <sync_window>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <dir_next+0x14c>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e02a      	b.n	8005cc4 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	3301      	adds	r3, #1
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c78:	1c5a      	adds	r2, r3, #1
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	895b      	ldrh	r3, [r3, #10]
 8005c82:	461a      	mov	r2, r3
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d3e6      	bcc.n	8005c58 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad2      	subs	r2, r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 8005c9c:	6979      	ldr	r1, [r7, #20]
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f7ff f950 	bl	8004f44 <clust2sect>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cbc:	441a      	add	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005cdc:	2100      	movs	r1, #0
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7ff fe99 	bl	8005a16 <dir_sdi>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005ce8:	7dfb      	ldrb	r3, [r7, #23]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d140      	bne.n	8005d70 <dir_alloc+0xa4>
		n = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f7ff f887 	bl	8004e0c <move_window>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005d02:	7dfb      	ldrb	r3, [r7, #23]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d132      	bne.n	8005d6e <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b04      	cmp	r3, #4
 8005d0e:	d108      	bne.n	8005d22 <dir_alloc+0x56>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d14:	781b      	ldrb	r3, [r3, #0]
 8005d16:	b25b      	sxtb	r3, r3
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	09db      	lsrs	r3, r3, #7
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	e00f      	b.n	8005d42 <dir_alloc+0x76>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2be5      	cmp	r3, #229	; 0xe5
 8005d2a:	d004      	beq.n	8005d36 <dir_alloc+0x6a>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <dir_alloc+0x6e>
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <dir_alloc+0x70>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d007      	beq.n	8005d56 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	613b      	str	r3, [r7, #16]
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d102      	bne.n	8005d5a <dir_alloc+0x8e>
 8005d54:	e00c      	b.n	8005d70 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005d56:	2300      	movs	r3, #0
 8005d58:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7ff fee0 	bl	8005b22 <dir_next>
 8005d62:	4603      	mov	r3, r0
 8005d64:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005d66:	7dfb      	ldrb	r3, [r7, #23]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0c2      	beq.n	8005cf2 <dir_alloc+0x26>
 8005d6c:	e000      	b.n	8005d70 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8005d6e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005d70:	7dfb      	ldrb	r3, [r7, #23]
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d101      	bne.n	8005d7a <dir_alloc+0xae>
 8005d76:	2307      	movs	r3, #7
 8005d78:	75fb      	strb	r3, [r7, #23]
	return res;
 8005d7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	331a      	adds	r3, #26
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fe fc26 	bl	80045e4 <ld_word>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b03      	cmp	r3, #3
 8005da2:	d109      	bne.n	8005db8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	3314      	adds	r3, #20
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fe fc1b 	bl	80045e4 <ld_word>
 8005dae:	4603      	mov	r3, r0
 8005db0:	041b      	lsls	r3, r3, #16
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005db8:	68fb      	ldr	r3, [r7, #12]
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b084      	sub	sp, #16
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	60f8      	str	r0, [r7, #12]
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	331a      	adds	r3, #26
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	b292      	uxth	r2, r2
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fe fd19 	bl	8004810 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d109      	bne.n	8005dfa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f103 0214 	add.w	r2, r3, #20
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	0c1b      	lsrs	r3, r3, #16
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	4619      	mov	r1, r3
 8005df4:	4610      	mov	r0, r2
 8005df6:	f7fe fd0b 	bl	8004810 <st_word>
	}
}
 8005dfa:	bf00      	nop
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005e04:	b590      	push	{r4, r7, lr}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	331a      	adds	r3, #26
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fe fbe6 	bl	80045e4 <ld_word>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d001      	beq.n	8005e22 <cmp_lfn+0x1e>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e059      	b.n	8005ed6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e2a:	1e5a      	subs	r2, r3, #1
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005e38:	2301      	movs	r3, #1
 8005e3a:	81fb      	strh	r3, [r7, #14]
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	613b      	str	r3, [r7, #16]
 8005e40:	e033      	b.n	8005eaa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005e42:	4a27      	ldr	r2, [pc, #156]	; (8005ee0 <cmp_lfn+0xdc>)
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	4413      	add	r3, r2
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	4413      	add	r3, r2
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fe fbc7 	bl	80045e4 <ld_word>
 8005e56:	4603      	mov	r3, r0
 8005e58:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005e5a:	89fb      	ldrh	r3, [r7, #14]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d01a      	beq.n	8005e96 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2bfe      	cmp	r3, #254	; 0xfe
 8005e64:	d812      	bhi.n	8005e8c <cmp_lfn+0x88>
 8005e66:	89bb      	ldrh	r3, [r7, #12]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f002 ff1b 	bl	8008ca4 <ff_wtoupper>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	461c      	mov	r4, r3
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	617a      	str	r2, [r7, #20]
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f002 ff0f 	bl	8008ca4 <ff_wtoupper>
 8005e86:	4603      	mov	r3, r0
 8005e88:	429c      	cmp	r4, r3
 8005e8a:	d001      	beq.n	8005e90 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e022      	b.n	8005ed6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8005e90:	89bb      	ldrh	r3, [r7, #12]
 8005e92:	81fb      	strh	r3, [r7, #14]
 8005e94:	e006      	b.n	8005ea4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005e96:	89bb      	ldrh	r3, [r7, #12]
 8005e98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d001      	beq.n	8005ea4 <cmp_lfn+0xa0>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	e018      	b.n	8005ed6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	613b      	str	r3, [r7, #16]
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b0c      	cmp	r3, #12
 8005eae:	d9c8      	bls.n	8005e42 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00b      	beq.n	8005ed4 <cmp_lfn+0xd0>
 8005ebc:	89fb      	ldrh	r3, [r7, #14]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d008      	beq.n	8005ed4 <cmp_lfn+0xd0>
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	005b      	lsls	r3, r3, #1
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	4413      	add	r3, r2
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <cmp_lfn+0xd0>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	e000      	b.n	8005ed6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005ed4:	2301      	movs	r3, #1
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	371c      	adds	r7, #28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd90      	pop	{r4, r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	08008f80 	.word	0x08008f80

08005ee4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	331a      	adds	r3, #26
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fe fb76 	bl	80045e4 <ld_word>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <pick_lfn+0x1e>
 8005efe:	2300      	movs	r3, #0
 8005f00:	e04d      	b.n	8005f9e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f0a:	1e5a      	subs	r2, r3, #1
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	4413      	add	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005f18:	2301      	movs	r3, #1
 8005f1a:	81fb      	strh	r3, [r7, #14]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	e028      	b.n	8005f74 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005f22:	4a21      	ldr	r2, [pc, #132]	; (8005fa8 <pick_lfn+0xc4>)
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	4413      	add	r3, r2
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	4413      	add	r3, r2
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fe fb57 	bl	80045e4 <ld_word>
 8005f36:	4603      	mov	r3, r0
 8005f38:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005f3a:	89fb      	ldrh	r3, [r7, #14]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00f      	beq.n	8005f60 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2bfe      	cmp	r3, #254	; 0xfe
 8005f44:	d901      	bls.n	8005f4a <pick_lfn+0x66>
 8005f46:	2300      	movs	r3, #0
 8005f48:	e029      	b.n	8005f9e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8005f4a:	89bb      	ldrh	r3, [r7, #12]
 8005f4c:	81fb      	strh	r3, [r7, #14]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	617a      	str	r2, [r7, #20]
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	4413      	add	r3, r2
 8005f5a:	89fa      	ldrh	r2, [r7, #14]
 8005f5c:	801a      	strh	r2, [r3, #0]
 8005f5e:	e006      	b.n	8005f6e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005f60:	89bb      	ldrh	r3, [r7, #12]
 8005f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d001      	beq.n	8005f6e <pick_lfn+0x8a>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	e017      	b.n	8005f9e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	3301      	adds	r3, #1
 8005f72:	613b      	str	r3, [r7, #16]
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	2b0c      	cmp	r3, #12
 8005f78:	d9d3      	bls.n	8005f22 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2bfe      	cmp	r3, #254	; 0xfe
 8005f8a:	d901      	bls.n	8005f90 <pick_lfn+0xac>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	e006      	b.n	8005f9e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	4413      	add	r3, r2
 8005f98:	2200      	movs	r2, #0
 8005f9a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8005f9c:	2301      	movs	r3, #1
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	08008f80 	.word	0x08008f80

08005fac <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	461a      	mov	r2, r3
 8005fba:	460b      	mov	r3, r1
 8005fbc:	71fb      	strb	r3, [r7, #7]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	330d      	adds	r3, #13
 8005fc6:	79ba      	ldrb	r2, [r7, #6]
 8005fc8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	330b      	adds	r3, #11
 8005fce:	220f      	movs	r2, #15
 8005fd0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	330c      	adds	r3, #12
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	331a      	adds	r3, #26
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f7fe fc15 	bl	8004810 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005fe6:	79fb      	ldrb	r3, [r7, #7]
 8005fe8:	1e5a      	subs	r2, r3, #1
 8005fea:	4613      	mov	r3, r2
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	4413      	add	r3, r2
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	4413      	add	r3, r2
 8005ff4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	82fb      	strh	r3, [r7, #22]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005ffe:	8afb      	ldrh	r3, [r7, #22]
 8006000:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006004:	4293      	cmp	r3, r2
 8006006:	d007      	beq.n	8006018 <put_lfn+0x6c>
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	61fa      	str	r2, [r7, #28]
 800600e:	005b      	lsls	r3, r3, #1
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	4413      	add	r3, r2
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006018:	4a17      	ldr	r2, [pc, #92]	; (8006078 <put_lfn+0xcc>)
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	4413      	add	r3, r2
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	4413      	add	r3, r2
 8006026:	8afa      	ldrh	r2, [r7, #22]
 8006028:	4611      	mov	r1, r2
 800602a:	4618      	mov	r0, r3
 800602c:	f7fe fbf0 	bl	8004810 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006030:	8afb      	ldrh	r3, [r7, #22]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d102      	bne.n	800603c <put_lfn+0x90>
 8006036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800603a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	3301      	adds	r3, #1
 8006040:	61bb      	str	r3, [r7, #24]
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	2b0c      	cmp	r3, #12
 8006046:	d9da      	bls.n	8005ffe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006048:	8afb      	ldrh	r3, [r7, #22]
 800604a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800604e:	4293      	cmp	r3, r2
 8006050:	d006      	beq.n	8006060 <put_lfn+0xb4>
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	4413      	add	r3, r2
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d103      	bne.n	8006068 <put_lfn+0xbc>
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006066:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	79fa      	ldrb	r2, [r7, #7]
 800606c:	701a      	strb	r2, [r3, #0]
}
 800606e:	bf00      	nop
 8006070:	3720      	adds	r7, #32
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	08008f80 	.word	0x08008f80

0800607c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08c      	sub	sp, #48	; 0x30
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800608a:	220b      	movs	r2, #11
 800608c:	68b9      	ldr	r1, [r7, #8]
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f7fe fc8d 	bl	80049ae <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2b05      	cmp	r3, #5
 8006098:	d92b      	bls.n	80060f2 <gen_numname+0x76>
		sr = seq;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800609e:	e022      	b.n	80060e6 <gen_numname+0x6a>
			wc = *lfn++;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	1c9a      	adds	r2, r3, #2
 80060a4:	607a      	str	r2, [r7, #4]
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80060aa:	2300      	movs	r3, #0
 80060ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80060ae:	e017      	b.n	80060e0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	005a      	lsls	r2, r3, #1
 80060b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	4413      	add	r3, r2
 80060bc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80060be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80060c0:	085b      	lsrs	r3, r3, #1
 80060c2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d005      	beq.n	80060da <gen_numname+0x5e>
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80060d4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80060d8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	3301      	adds	r3, #1
 80060de:	62bb      	str	r3, [r7, #40]	; 0x28
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	2b0f      	cmp	r3, #15
 80060e4:	d9e4      	bls.n	80060b0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1d8      	bne.n	80060a0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80060f2:	2307      	movs	r3, #7
 80060f4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	f003 030f 	and.w	r3, r3, #15
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	3330      	adds	r3, #48	; 0x30
 8006102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800610a:	2b39      	cmp	r3, #57	; 0x39
 800610c:	d904      	bls.n	8006118 <gen_numname+0x9c>
 800610e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006112:	3307      	adds	r3, #7
 8006114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611a:	1e5a      	subs	r2, r3, #1
 800611c:	62ba      	str	r2, [r7, #40]	; 0x28
 800611e:	3330      	adds	r3, #48	; 0x30
 8006120:	443b      	add	r3, r7
 8006122:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006126:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	091b      	lsrs	r3, r3, #4
 800612e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1df      	bne.n	80060f6 <gen_numname+0x7a>
	ns[i] = '~';
 8006136:	f107 0214 	add.w	r2, r7, #20
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	4413      	add	r3, r2
 800613e:	227e      	movs	r2, #126	; 0x7e
 8006140:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006142:	2300      	movs	r3, #0
 8006144:	627b      	str	r3, [r7, #36]	; 0x24
 8006146:	e002      	b.n	800614e <gen_numname+0xd2>
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	3301      	adds	r3, #1
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
 800614e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006152:	429a      	cmp	r2, r3
 8006154:	d205      	bcs.n	8006162 <gen_numname+0xe6>
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	4413      	add	r3, r2
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b20      	cmp	r3, #32
 8006160:	d1f2      	bne.n	8006148 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006164:	2b07      	cmp	r3, #7
 8006166:	d807      	bhi.n	8006178 <gen_numname+0xfc>
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	62ba      	str	r2, [r7, #40]	; 0x28
 800616e:	3330      	adds	r3, #48	; 0x30
 8006170:	443b      	add	r3, r7
 8006172:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006176:	e000      	b.n	800617a <gen_numname+0xfe>
 8006178:	2120      	movs	r1, #32
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	627a      	str	r2, [r7, #36]	; 0x24
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	4413      	add	r3, r2
 8006184:	460a      	mov	r2, r1
 8006186:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	2b07      	cmp	r3, #7
 800618c:	d9e9      	bls.n	8006162 <gen_numname+0xe6>
}
 800618e:	bf00      	nop
 8006190:	bf00      	nop
 8006192:	3730      	adds	r7, #48	; 0x30
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006198:	b480      	push	{r7}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80061a4:	230b      	movs	r3, #11
 80061a6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	0852      	lsrs	r2, r2, #1
 80061ae:	01db      	lsls	r3, r3, #7
 80061b0:	4313      	orrs	r3, r2
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	1c59      	adds	r1, r3, #1
 80061b8:	6079      	str	r1, [r7, #4]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	4413      	add	r3, r2
 80061be:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	60bb      	str	r3, [r7, #8]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1ed      	bne.n	80061a8 <sum_sfn+0x10>
	return sum;
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 80061da:	b480      	push	{r7}
 80061dc:	b087      	sub	sp, #28
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	3301      	adds	r3, #1
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	3301      	adds	r3, #1
 80061ea:	015b      	lsls	r3, r3, #5
 80061ec:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 80061ee:	2300      	movs	r3, #0
 80061f0:	827b      	strh	r3, [r7, #18]
 80061f2:	2300      	movs	r3, #0
 80061f4:	617b      	str	r3, [r7, #20]
 80061f6:	e018      	b.n	800622a <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d103      	bne.n	8006206 <xdir_sum+0x2c>
			i++;
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	3301      	adds	r3, #1
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	e00e      	b.n	8006224 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8006206:	8a7b      	ldrh	r3, [r7, #18]
 8006208:	03db      	lsls	r3, r3, #15
 800620a:	b29a      	uxth	r2, r3
 800620c:	8a7b      	ldrh	r3, [r7, #18]
 800620e:	085b      	lsrs	r3, r3, #1
 8006210:	b29b      	uxth	r3, r3
 8006212:	4413      	add	r3, r2
 8006214:	b29a      	uxth	r2, r3
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	440b      	add	r3, r1
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	b29b      	uxth	r3, r3
 8006220:	4413      	add	r3, r2
 8006222:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	3301      	adds	r3, #1
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	429a      	cmp	r2, r3
 8006230:	d3e2      	bcc.n	80061f8 <xdir_sum+0x1e>
		}
	}
	return sum;
 8006232:	8a7b      	ldrh	r3, [r7, #18]
}
 8006234:	4618      	mov	r0, r3
 8006236:	371c      	adds	r7, #28
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8006248:	2300      	movs	r3, #0
 800624a:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800624c:	e01f      	b.n	800628e <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800624e:	89bb      	ldrh	r3, [r7, #12]
 8006250:	4618      	mov	r0, r3
 8006252:	f002 fd27 	bl	8008ca4 <ff_wtoupper>
 8006256:	4603      	mov	r3, r0
 8006258:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800625a:	89fb      	ldrh	r3, [r7, #14]
 800625c:	03db      	lsls	r3, r3, #15
 800625e:	b29a      	uxth	r2, r3
 8006260:	89fb      	ldrh	r3, [r7, #14]
 8006262:	085b      	lsrs	r3, r3, #1
 8006264:	b29b      	uxth	r3, r3
 8006266:	4413      	add	r3, r2
 8006268:	b29a      	uxth	r2, r3
 800626a:	89bb      	ldrh	r3, [r7, #12]
 800626c:	b2db      	uxtb	r3, r3
 800626e:	b29b      	uxth	r3, r3
 8006270:	4413      	add	r3, r2
 8006272:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8006274:	89fb      	ldrh	r3, [r7, #14]
 8006276:	03db      	lsls	r3, r3, #15
 8006278:	b29a      	uxth	r2, r3
 800627a:	89fb      	ldrh	r3, [r7, #14]
 800627c:	085b      	lsrs	r3, r3, #1
 800627e:	b29b      	uxth	r3, r3
 8006280:	4413      	add	r3, r2
 8006282:	b29a      	uxth	r2, r3
 8006284:	89bb      	ldrh	r3, [r7, #12]
 8006286:	0a1b      	lsrs	r3, r3, #8
 8006288:	b29b      	uxth	r3, r3
 800628a:	4413      	add	r3, r2
 800628c:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	1c9a      	adds	r2, r3, #2
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	881b      	ldrh	r3, [r3, #0]
 8006296:	81bb      	strh	r3, [r7, #12]
 8006298:	89bb      	ldrh	r3, [r7, #12]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1d7      	bne.n	800624e <xname_sum+0xe>
	}
	return sum;
 800629e:	89fb      	ldrh	r3, [r7, #14]
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3710      	adds	r7, #16
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 80062b6:	2340      	movs	r3, #64	; 0x40
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	e02c      	b.n	800631a <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	f003 031f 	and.w	r3, r3, #31
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d102      	bne.n	80062d0 <get_xdir_info+0x28>
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	3302      	adds	r3, #2
 80062ce:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	4413      	add	r3, r2
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fe f984 	bl	80045e4 <ld_word>
 80062dc:	4603      	mov	r3, r0
 80062de:	2100      	movs	r1, #0
 80062e0:	4618      	mov	r0, r3
 80062e2:	f002 fca3 	bl	8008c2c <ff_convert>
 80062e6:	4603      	mov	r3, r0
 80062e8:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 80062ea:	897b      	ldrh	r3, [r7, #10]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d002      	beq.n	80062f6 <get_xdir_info+0x4e>
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	2bfe      	cmp	r3, #254	; 0xfe
 80062f4:	d902      	bls.n	80062fc <get_xdir_info+0x54>
 80062f6:	2300      	movs	r3, #0
 80062f8:	617b      	str	r3, [r7, #20]
 80062fa:	e015      	b.n	8006328 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	617a      	str	r2, [r7, #20]
 8006302:	897a      	ldrh	r2, [r7, #10]
 8006304:	b2d1      	uxtb	r1, r2
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	4413      	add	r3, r2
 800630a:	460a      	mov	r2, r1
 800630c:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	3302      	adds	r3, #2
 8006312:	613b      	str	r3, [r7, #16]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	3301      	adds	r3, #1
 8006318:	60fb      	str	r3, [r7, #12]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3323      	adds	r3, #35	; 0x23
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	4293      	cmp	r3, r2
 8006326:	d3cb      	bcc.n	80062c0 <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d106      	bne.n	800633c <get_xdir_info+0x94>
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	617a      	str	r2, [r7, #20]
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	4413      	add	r3, r2
 8006338:	223f      	movs	r2, #63	; 0x3f
 800633a:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	4413      	add	r3, r2
 8006342:	331a      	adds	r3, #26
 8006344:	2200      	movs	r2, #0
 8006346:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	2200      	movs	r2, #0
 800634c:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	791a      	ldrb	r2, [r3, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	7b1b      	ldrb	r3, [r3, #12]
 800635a:	f003 0310 	and.w	r3, r3, #16
 800635e:	2b00      	cmp	r3, #0
 8006360:	d107      	bne.n	8006372 <get_xdir_info+0xca>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	3338      	adds	r3, #56	; 0x38
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe f977 	bl	800465a <ld_qword>
 800636c:	4602      	mov	r2, r0
 800636e:	460b      	mov	r3, r1
 8006370:	e003      	b.n	800637a <get_xdir_info+0xd2>
 8006372:	f04f 0200 	mov.w	r2, #0
 8006376:	f04f 0300 	mov.w	r3, #0
 800637a:	6839      	ldr	r1, [r7, #0]
 800637c:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	330c      	adds	r3, #12
 8006384:	4618      	mov	r0, r3
 8006386:	f7fe f92d 	bl	80045e4 <ld_word>
 800638a:	4603      	mov	r3, r0
 800638c:	461a      	mov	r2, r3
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	330e      	adds	r3, #14
 8006396:	4618      	mov	r0, r3
 8006398:	f7fe f924 	bl	80045e4 <ld_word>
 800639c:	4603      	mov	r3, r0
 800639e:	461a      	mov	r2, r3
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	811a      	strh	r2, [r3, #8]
}
 80063a4:	bf00      	nop
 80063a6:	3718      	adds	r7, #24
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 80063ac:	b590      	push	{r4, r7, lr}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c4:	4619      	mov	r1, r3
 80063c6:	4610      	mov	r0, r2
 80063c8:	f7fe fd20 	bl	8004e0c <move_window>
 80063cc:	4603      	mov	r3, r0
 80063ce:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <load_xdir+0x2e>
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
 80063d8:	e09f      	b.n	800651a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	2b85      	cmp	r3, #133	; 0x85
 80063e2:	d001      	beq.n	80063e8 <load_xdir+0x3c>
 80063e4:	2302      	movs	r3, #2
 80063e6:	e098      	b.n	800651a <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ec:	2220      	movs	r2, #32
 80063ee:	4619      	mov	r1, r3
 80063f0:	6938      	ldr	r0, [r7, #16]
 80063f2:	f7fe fadc 	bl	80049ae <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	3301      	adds	r3, #1
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	3301      	adds	r3, #1
 80063fe:	015b      	lsls	r3, r3, #5
 8006400:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2b5f      	cmp	r3, #95	; 0x5f
 8006406:	d903      	bls.n	8006410 <load_xdir+0x64>
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800640e:	d901      	bls.n	8006414 <load_xdir+0x68>
 8006410:	2302      	movs	r3, #2
 8006412:	e082      	b.n	800651a <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8006414:	2100      	movs	r1, #0
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7ff fb83 	bl	8005b22 <dir_next>
 800641c:	4603      	mov	r3, r0
 800641e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <load_xdir+0x7e>
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	e077      	b.n	800651a <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006432:	4619      	mov	r1, r3
 8006434:	4610      	mov	r0, r2
 8006436:	f7fe fce9 	bl	8004e0c <move_window>
 800643a:	4603      	mov	r3, r0
 800643c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800643e:	7bfb      	ldrb	r3, [r7, #15]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <load_xdir+0x9c>
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	e068      	b.n	800651a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2bc0      	cmp	r3, #192	; 0xc0
 8006450:	d001      	beq.n	8006456 <load_xdir+0xaa>
 8006452:	2302      	movs	r3, #2
 8006454:	e061      	b.n	800651a <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f103 0020 	add.w	r0, r3, #32
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006460:	2220      	movs	r2, #32
 8006462:	4619      	mov	r1, r3
 8006464:	f7fe faa3 	bl	80049ae <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	3323      	adds	r3, #35	; 0x23
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	332c      	adds	r3, #44	; 0x2c
 8006470:	4a2c      	ldr	r2, [pc, #176]	; (8006524 <load_xdir+0x178>)
 8006472:	fba2 2303 	umull	r2, r3, r2, r3
 8006476:	08db      	lsrs	r3, r3, #3
 8006478:	015b      	lsls	r3, r3, #5
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	429a      	cmp	r2, r3
 800647e:	d201      	bcs.n	8006484 <load_xdir+0xd8>
 8006480:	2302      	movs	r3, #2
 8006482:	e04a      	b.n	800651a <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8006484:	2340      	movs	r3, #64	; 0x40
 8006486:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8006488:	2100      	movs	r1, #0
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff fb49 	bl	8005b22 <dir_next>
 8006490:	4603      	mov	r3, r0
 8006492:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8006494:	7bfb      	ldrb	r3, [r7, #15]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d001      	beq.n	800649e <load_xdir+0xf2>
 800649a:	7bfb      	ldrb	r3, [r7, #15]
 800649c:	e03d      	b.n	800651a <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a6:	4619      	mov	r1, r3
 80064a8:	4610      	mov	r0, r2
 80064aa:	f7fe fcaf 	bl	8004e0c <move_window>
 80064ae:	4603      	mov	r3, r0
 80064b0:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80064b2:	7bfb      	ldrb	r3, [r7, #15]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <load_xdir+0x110>
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
 80064ba:	e02e      	b.n	800651a <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2bc1      	cmp	r3, #193	; 0xc1
 80064c4:	d001      	beq.n	80064ca <load_xdir+0x11e>
 80064c6:	2302      	movs	r3, #2
 80064c8:	e027      	b.n	800651a <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80064d0:	d208      	bcs.n	80064e4 <load_xdir+0x138>
 80064d2:	693a      	ldr	r2, [r7, #16]
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	18d0      	adds	r0, r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064dc:	2220      	movs	r2, #32
 80064de:	4619      	mov	r1, r3
 80064e0:	f7fe fa65 	bl	80049ae <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	3320      	adds	r3, #32
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d3ca      	bcc.n	8006488 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80064f8:	d80e      	bhi.n	8006518 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 80064fa:	6938      	ldr	r0, [r7, #16]
 80064fc:	f7ff fe6d 	bl	80061da <xdir_sum>
 8006500:	4603      	mov	r3, r0
 8006502:	461c      	mov	r4, r3
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	3302      	adds	r3, #2
 8006508:	4618      	mov	r0, r3
 800650a:	f7fe f86b 	bl	80045e4 <ld_word>
 800650e:	4603      	mov	r3, r0
 8006510:	429c      	cmp	r4, r3
 8006512:	d001      	beq.n	8006518 <load_xdir+0x16c>
 8006514:	2302      	movs	r3, #2
 8006516:	e000      	b.n	800651a <load_xdir+0x16e>
	}
	return FR_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	371c      	adds	r7, #28
 800651e:	46bd      	mov	sp, r7
 8006520:	bd90      	pop	{r4, r7, pc}
 8006522:	bf00      	nop
 8006524:	88888889 	.word	0x88888889

08006528 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8006528:	b5b0      	push	{r4, r5, r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8006532:	6839      	ldr	r1, [r7, #0]
 8006534:	6808      	ldr	r0, [r1, #0]
 8006536:	6879      	ldr	r1, [r7, #4]
 8006538:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800653a:	6839      	ldr	r1, [r7, #0]
 800653c:	6a08      	ldr	r0, [r1, #32]
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8006546:	b2c8      	uxtb	r0, r1
 8006548:	6879      	ldr	r1, [r7, #4]
 800654a:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8006550:	2000      	movs	r0, #0
 8006552:	460c      	mov	r4, r1
 8006554:	4605      	mov	r5, r0
 8006556:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800655a:	2300      	movs	r3, #0
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff fa50 	bl	8005a16 <dir_sdi>
 8006576:	4603      	mov	r3, r0
 8006578:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d104      	bne.n	800658a <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7ff ff13 	bl	80063ac <load_xdir>
 8006586:	4603      	mov	r3, r0
 8006588:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800658a:	7bfb      	ldrb	r3, [r7, #15]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bdb0      	pop	{r4, r5, r7, pc}

08006594 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8006594:	b590      	push	{r4, r7, lr}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	1c9c      	adds	r4, r3, #2
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f7ff fe16 	bl	80061da <xdir_sum>
 80065ae:	4603      	mov	r3, r0
 80065b0:	4619      	mov	r1, r3
 80065b2:	4620      	mov	r0, r4
 80065b4:	f7fe f92c 	bl	8004810 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	3301      	adds	r3, #1
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	3301      	adds	r3, #1
 80065c0:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff fa24 	bl	8005a16 <dir_sdi>
 80065ce:	4603      	mov	r3, r0
 80065d0:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80065d2:	e026      	b.n	8006622 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065dc:	4619      	mov	r1, r3
 80065de:	4610      	mov	r0, r2
 80065e0:	f7fe fc14 	bl	8004e0c <move_window>
 80065e4:	4603      	mov	r3, r0
 80065e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80065e8:	7dfb      	ldrb	r3, [r7, #23]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d11d      	bne.n	800662a <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f2:	2220      	movs	r2, #32
 80065f4:	68f9      	ldr	r1, [r7, #12]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fe f9d9 	bl	80049ae <mem_cpy>
		dp->obj.fs->wflag = 1;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2201      	movs	r2, #1
 8006602:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	3b01      	subs	r3, #1
 8006608:	613b      	str	r3, [r7, #16]
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00e      	beq.n	800662e <store_xdir+0x9a>
		dirb += SZDIRE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	3320      	adds	r3, #32
 8006614:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8006616:	2100      	movs	r1, #0
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7ff fa82 	bl	8005b22 <dir_next>
 800661e:	4603      	mov	r3, r0
 8006620:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8006622:	7dfb      	ldrb	r3, [r7, #23]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d0d5      	beq.n	80065d4 <store_xdir+0x40>
 8006628:	e002      	b.n	8006630 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800662a:	bf00      	nop
 800662c:	e000      	b.n	8006630 <store_xdir+0x9c>
		if (--nent == 0) break;
 800662e:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8006630:	7dfb      	ldrb	r3, [r7, #23]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d002      	beq.n	800663c <store_xdir+0xa8>
 8006636:	7dfb      	ldrb	r3, [r7, #23]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <store_xdir+0xac>
 800663c:	7dfb      	ldrb	r3, [r7, #23]
 800663e:	e000      	b.n	8006642 <store_xdir+0xae>
 8006640:	2302      	movs	r3, #2
}
 8006642:	4618      	mov	r0, r3
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	bd90      	pop	{r4, r7, pc}

0800664a <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800664a:	b590      	push	{r4, r7, lr}
 800664c:	b085      	sub	sp, #20
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8006654:	2240      	movs	r2, #64	; 0x40
 8006656:	2100      	movs	r1, #0
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7fe f9c9 	bl	80049f0 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2285      	movs	r2, #133	; 0x85
 8006662:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3320      	adds	r3, #32
 8006668:	22c0      	movs	r2, #192	; 0xc0
 800666a:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800666c:	2300      	movs	r3, #0
 800666e:	72bb      	strb	r3, [r7, #10]
 8006670:	2301      	movs	r3, #1
 8006672:	72fb      	strb	r3, [r7, #11]
 8006674:	2301      	movs	r3, #1
 8006676:	813b      	strh	r3, [r7, #8]
 8006678:	2340      	movs	r3, #64	; 0x40
 800667a:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	60fa      	str	r2, [r7, #12]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	4413      	add	r3, r2
 8006686:	22c1      	movs	r2, #193	; 0xc1
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	60fa      	str	r2, [r7, #12]
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	4413      	add	r3, r2
 8006694:	2200      	movs	r2, #0
 8006696:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8006698:	893b      	ldrh	r3, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00b      	beq.n	80066b6 <create_xdir+0x6c>
 800669e:	7abb      	ldrb	r3, [r7, #10]
 80066a0:	005b      	lsls	r3, r3, #1
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	4413      	add	r3, r2
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	813b      	strh	r3, [r7, #8]
 80066aa:	893b      	ldrh	r3, [r7, #8]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <create_xdir+0x6c>
 80066b0:	7abb      	ldrb	r3, [r7, #10]
 80066b2:	3301      	adds	r3, #1
 80066b4:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	893a      	ldrh	r2, [r7, #8]
 80066be:	4611      	mov	r1, r2
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fe f8a5 	bl	8004810 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	3302      	adds	r3, #2
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f003 031f 	and.w	r3, r3, #31
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e0      	bne.n	8006698 <create_xdir+0x4e>
		nb++;
 80066d6:	7afb      	ldrb	r3, [r7, #11]
 80066d8:	3301      	adds	r3, #1
 80066da:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 80066dc:	7abb      	ldrb	r3, [r7, #10]
 80066de:	005b      	lsls	r3, r3, #1
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	4413      	add	r3, r2
 80066e4:	881b      	ldrh	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1c8      	bne.n	800667c <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	3323      	adds	r3, #35	; 0x23
 80066ee:	7aba      	ldrb	r2, [r7, #10]
 80066f0:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	3301      	adds	r3, #1
 80066f6:	7afa      	ldrb	r2, [r7, #11]
 80066f8:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8006700:	6838      	ldr	r0, [r7, #0]
 8006702:	f7ff fd9d 	bl	8006240 <xname_sum>
 8006706:	4603      	mov	r3, r0
 8006708:	4619      	mov	r1, r3
 800670a:	4620      	mov	r0, r4
 800670c:	f7fe f880 	bl	8004810 <st_word>
}
 8006710:	bf00      	nop
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	bd90      	pop	{r4, r7, pc}

08006718 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006722:	2304      	movs	r3, #4
 8006724:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800672c:	23ff      	movs	r3, #255	; 0xff
 800672e:	757b      	strb	r3, [r7, #21]
 8006730:	23ff      	movs	r3, #255	; 0xff
 8006732:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8006734:	e09f      	b.n	8006876 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673a:	4619      	mov	r1, r3
 800673c:	6938      	ldr	r0, [r7, #16]
 800673e:	f7fe fb65 	bl	8004e0c <move_window>
 8006742:	4603      	mov	r3, r0
 8006744:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006746:	7dfb      	ldrb	r3, [r7, #23]
 8006748:	2b00      	cmp	r3, #0
 800674a:	f040 809a 	bne.w	8006882 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8006756:	7dbb      	ldrb	r3, [r7, #22]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d102      	bne.n	8006762 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800675c:	2304      	movs	r3, #4
 800675e:	75fb      	strb	r3, [r7, #23]
 8006760:	e096      	b.n	8006890 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	2b04      	cmp	r3, #4
 8006768:	d118      	bne.n	800679c <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800676a:	7dbb      	ldrb	r3, [r7, #22]
 800676c:	2b85      	cmp	r3, #133	; 0x85
 800676e:	d179      	bne.n	8006864 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7ff fe17 	bl	80063ac <load_xdir>
 800677e:	4603      	mov	r3, r0
 8006780:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8006782:	7dfb      	ldrb	r3, [r7, #23]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d17e      	bne.n	8006886 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	3304      	adds	r3, #4
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006794:	b2da      	uxtb	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	719a      	strb	r2, [r3, #6]
					}
					break;
 800679a:	e074      	b.n	8006886 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a0:	330b      	adds	r3, #11
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067a8:	73fb      	strb	r3, [r7, #15]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	7bfa      	ldrb	r2, [r7, #15]
 80067ae:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80067b0:	7dbb      	ldrb	r3, [r7, #22]
 80067b2:	2be5      	cmp	r3, #229	; 0xe5
 80067b4:	d00e      	beq.n	80067d4 <dir_read+0xbc>
 80067b6:	7dbb      	ldrb	r3, [r7, #22]
 80067b8:	2b2e      	cmp	r3, #46	; 0x2e
 80067ba:	d00b      	beq.n	80067d4 <dir_read+0xbc>
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
 80067be:	f023 0320 	bic.w	r3, r3, #32
 80067c2:	2b08      	cmp	r3, #8
 80067c4:	bf0c      	ite	eq
 80067c6:	2301      	moveq	r3, #1
 80067c8:	2300      	movne	r3, #0
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	461a      	mov	r2, r3
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d002      	beq.n	80067da <dir_read+0xc2>
				ord = 0xFF;
 80067d4:	23ff      	movs	r3, #255	; 0xff
 80067d6:	757b      	strb	r3, [r7, #21]
 80067d8:	e044      	b.n	8006864 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80067da:	7bfb      	ldrb	r3, [r7, #15]
 80067dc:	2b0f      	cmp	r3, #15
 80067de:	d12f      	bne.n	8006840 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80067e0:	7dbb      	ldrb	r3, [r7, #22]
 80067e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00d      	beq.n	8006806 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ee:	7b5b      	ldrb	r3, [r3, #13]
 80067f0:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80067f2:	7dbb      	ldrb	r3, [r7, #22]
 80067f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f8:	75bb      	strb	r3, [r7, #22]
 80067fa:	7dbb      	ldrb	r3, [r7, #22]
 80067fc:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006806:	7dba      	ldrb	r2, [r7, #22]
 8006808:	7d7b      	ldrb	r3, [r7, #21]
 800680a:	429a      	cmp	r2, r3
 800680c:	d115      	bne.n	800683a <dir_read+0x122>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006812:	330d      	adds	r3, #13
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	7d3a      	ldrb	r2, [r7, #20]
 8006818:	429a      	cmp	r2, r3
 800681a:	d10e      	bne.n	800683a <dir_read+0x122>
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006824:	4619      	mov	r1, r3
 8006826:	4610      	mov	r0, r2
 8006828:	f7ff fb5c 	bl	8005ee4 <pick_lfn>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <dir_read+0x122>
 8006832:	7d7b      	ldrb	r3, [r7, #21]
 8006834:	3b01      	subs	r3, #1
 8006836:	b2db      	uxtb	r3, r3
 8006838:	e000      	b.n	800683c <dir_read+0x124>
 800683a:	23ff      	movs	r3, #255	; 0xff
 800683c:	757b      	strb	r3, [r7, #21]
 800683e:	e011      	b.n	8006864 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8006840:	7d7b      	ldrb	r3, [r7, #21]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d109      	bne.n	800685a <dir_read+0x142>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800684a:	4618      	mov	r0, r3
 800684c:	f7ff fca4 	bl	8006198 <sum_sfn>
 8006850:	4603      	mov	r3, r0
 8006852:	461a      	mov	r2, r3
 8006854:	7d3b      	ldrb	r3, [r7, #20]
 8006856:	4293      	cmp	r3, r2
 8006858:	d017      	beq.n	800688a <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f04f 32ff 	mov.w	r2, #4294967295
 8006860:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8006862:	e012      	b.n	800688a <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006864:	2100      	movs	r1, #0
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7ff f95b 	bl	8005b22 <dir_next>
 800686c:	4603      	mov	r3, r0
 800686e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006870:	7dfb      	ldrb	r3, [r7, #23]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10b      	bne.n	800688e <dir_read+0x176>
	while (dp->sect) {
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800687a:	2b00      	cmp	r3, #0
 800687c:	f47f af5b 	bne.w	8006736 <dir_read+0x1e>
 8006880:	e006      	b.n	8006890 <dir_read+0x178>
		if (res != FR_OK) break;
 8006882:	bf00      	nop
 8006884:	e004      	b.n	8006890 <dir_read+0x178>
					break;
 8006886:	bf00      	nop
 8006888:	e002      	b.n	8006890 <dir_read+0x178>
					break;
 800688a:	bf00      	nop
 800688c:	e000      	b.n	8006890 <dir_read+0x178>
		if (res != FR_OK) break;
 800688e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006890:	7dfb      	ldrb	r3, [r7, #23]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <dir_read+0x184>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800689c:	7dfb      	ldrb	r3, [r7, #23]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80068a6:	b590      	push	{r4, r7, lr}
 80068a8:	b089      	sub	sp, #36	; 0x24
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80068b4:	2100      	movs	r1, #0
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7ff f8ad 	bl	8005a16 <dir_sdi>
 80068bc:	4603      	mov	r3, r0
 80068be:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 80068c0:	7ffb      	ldrb	r3, [r7, #31]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <dir_find+0x24>
 80068c6:	7ffb      	ldrb	r3, [r7, #31]
 80068c8:	e112      	b.n	8006af0 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d164      	bne.n	800699c <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7ff fcb2 	bl	8006240 <xname_sum>
 80068dc:	4603      	mov	r3, r0
 80068de:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80068e0:	e04f      	b.n	8006982 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	3324      	adds	r3, #36	; 0x24
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fd fe7b 	bl	80045e4 <ld_word>
 80068ee:	4603      	mov	r3, r0
 80068f0:	461a      	mov	r2, r3
 80068f2:	893b      	ldrh	r3, [r7, #8]
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d000      	beq.n	80068fa <dir_find+0x54>
 80068f8:	e043      	b.n	8006982 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006902:	76fb      	strb	r3, [r7, #27]
 8006904:	2340      	movs	r3, #64	; 0x40
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	2300      	movs	r3, #0
 800690a:	613b      	str	r3, [r7, #16]
 800690c:	e029      	b.n	8006962 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f003 031f 	and.w	r3, r3, #31
 8006914:	2b00      	cmp	r3, #0
 8006916:	d102      	bne.n	800691e <dir_find+0x78>
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	3302      	adds	r3, #2
 800691c:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	691a      	ldr	r2, [r3, #16]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	4413      	add	r3, r2
 8006926:	4618      	mov	r0, r3
 8006928:	f7fd fe5c 	bl	80045e4 <ld_word>
 800692c:	4603      	mov	r3, r0
 800692e:	4618      	mov	r0, r3
 8006930:	f002 f9b8 	bl	8008ca4 <ff_wtoupper>
 8006934:	4603      	mov	r3, r0
 8006936:	461c      	mov	r4, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	68da      	ldr	r2, [r3, #12]
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	4413      	add	r3, r2
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	4618      	mov	r0, r3
 8006946:	f002 f9ad 	bl	8008ca4 <ff_wtoupper>
 800694a:	4603      	mov	r3, r0
 800694c:	429c      	cmp	r4, r3
 800694e:	d10c      	bne.n	800696a <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8006950:	7efb      	ldrb	r3, [r7, #27]
 8006952:	3b01      	subs	r3, #1
 8006954:	76fb      	strb	r3, [r7, #27]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	3302      	adds	r3, #2
 800695a:	617b      	str	r3, [r7, #20]
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	3301      	adds	r3, #1
 8006960:	613b      	str	r3, [r7, #16]
 8006962:	7efb      	ldrb	r3, [r7, #27]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1d2      	bne.n	800690e <dir_find+0x68>
 8006968:	e000      	b.n	800696c <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800696a:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800696c:	7efb      	ldrb	r3, [r7, #27]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d107      	bne.n	8006982 <dir_find+0xdc>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	68da      	ldr	r2, [r3, #12]
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	4413      	add	r3, r2
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d009      	beq.n	8006996 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8006982:	2100      	movs	r1, #0
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f7ff fec7 	bl	8006718 <dir_read>
 800698a:	4603      	mov	r3, r0
 800698c:	77fb      	strb	r3, [r7, #31]
 800698e:	7ffb      	ldrb	r3, [r7, #31]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0a6      	beq.n	80068e2 <dir_find+0x3c>
 8006994:	e000      	b.n	8006998 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8006996:	bf00      	nop
		}
		return res;
 8006998:	7ffb      	ldrb	r3, [r7, #31]
 800699a:	e0a9      	b.n	8006af0 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800699c:	23ff      	movs	r3, #255	; 0xff
 800699e:	773b      	strb	r3, [r7, #28]
 80069a0:	7f3b      	ldrb	r3, [r7, #28]
 80069a2:	777b      	strb	r3, [r7, #29]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f04f 32ff 	mov.w	r2, #4294967295
 80069aa:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b0:	4619      	mov	r1, r3
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f7fe fa2a 	bl	8004e0c <move_window>
 80069b8:	4603      	mov	r3, r0
 80069ba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 80069bc:	7ffb      	ldrb	r3, [r7, #31]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f040 8090 	bne.w	8006ae4 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80069cc:	7fbb      	ldrb	r3, [r7, #30]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d102      	bne.n	80069d8 <dir_find+0x132>
 80069d2:	2304      	movs	r3, #4
 80069d4:	77fb      	strb	r3, [r7, #31]
 80069d6:	e08a      	b.n	8006aee <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069dc:	330b      	adds	r3, #11
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069e4:	72fb      	strb	r3, [r7, #11]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	7afa      	ldrb	r2, [r7, #11]
 80069ea:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80069ec:	7fbb      	ldrb	r3, [r7, #30]
 80069ee:	2be5      	cmp	r3, #229	; 0xe5
 80069f0:	d007      	beq.n	8006a02 <dir_find+0x15c>
 80069f2:	7afb      	ldrb	r3, [r7, #11]
 80069f4:	f003 0308 	and.w	r3, r3, #8
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d009      	beq.n	8006a10 <dir_find+0x16a>
 80069fc:	7afb      	ldrb	r3, [r7, #11]
 80069fe:	2b0f      	cmp	r3, #15
 8006a00:	d006      	beq.n	8006a10 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006a02:	23ff      	movs	r3, #255	; 0xff
 8006a04:	777b      	strb	r3, [r7, #29]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f04f 32ff 	mov.w	r2, #4294967295
 8006a0c:	64da      	str	r2, [r3, #76]	; 0x4c
 8006a0e:	e05e      	b.n	8006ace <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006a10:	7afb      	ldrb	r3, [r7, #11]
 8006a12:	2b0f      	cmp	r3, #15
 8006a14:	d136      	bne.n	8006a84 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d154      	bne.n	8006ace <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006a24:	7fbb      	ldrb	r3, [r7, #30]
 8006a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00d      	beq.n	8006a4a <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	7b5b      	ldrb	r3, [r3, #13]
 8006a34:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006a36:	7fbb      	ldrb	r3, [r7, #30]
 8006a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a3c:	77bb      	strb	r3, [r7, #30]
 8006a3e:	7fbb      	ldrb	r3, [r7, #30]
 8006a40:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006a4a:	7fba      	ldrb	r2, [r7, #30]
 8006a4c:	7f7b      	ldrb	r3, [r7, #29]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d115      	bne.n	8006a7e <dir_find+0x1d8>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a56:	330d      	adds	r3, #13
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	7f3a      	ldrb	r2, [r7, #28]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d10e      	bne.n	8006a7e <dir_find+0x1d8>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	f7ff f9ca 	bl	8005e04 <cmp_lfn>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <dir_find+0x1d8>
 8006a76:	7f7b      	ldrb	r3, [r7, #29]
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	e000      	b.n	8006a80 <dir_find+0x1da>
 8006a7e:	23ff      	movs	r3, #255	; 0xff
 8006a80:	777b      	strb	r3, [r7, #29]
 8006a82:	e024      	b.n	8006ace <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006a84:	7f7b      	ldrb	r3, [r7, #29]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d109      	bne.n	8006a9e <dir_find+0x1f8>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7ff fb82 	bl	8006198 <sum_sfn>
 8006a94:	4603      	mov	r3, r0
 8006a96:	461a      	mov	r2, r3
 8006a98:	7f3b      	ldrb	r3, [r7, #28]
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d024      	beq.n	8006ae8 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10a      	bne.n	8006ac2 <dir_find+0x21c>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3340      	adds	r3, #64	; 0x40
 8006ab4:	220b      	movs	r2, #11
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	f7fd ffb5 	bl	8004a26 <mem_cmp>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d014      	beq.n	8006aec <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006ac2:	23ff      	movs	r3, #255	; 0xff
 8006ac4:	777b      	strb	r3, [r7, #29]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8006acc:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006ace:	2100      	movs	r1, #0
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff f826 	bl	8005b22 <dir_next>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8006ada:	7ffb      	ldrb	r3, [r7, #31]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f43f af65 	beq.w	80069ac <dir_find+0x106>
 8006ae2:	e004      	b.n	8006aee <dir_find+0x248>
		if (res != FR_OK) break;
 8006ae4:	bf00      	nop
 8006ae6:	e002      	b.n	8006aee <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006ae8:	bf00      	nop
 8006aea:	e000      	b.n	8006aee <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006aec:	bf00      	nop

	return res;
 8006aee:	7ffb      	ldrb	r3, [r7, #31]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3724      	adds	r7, #36	; 0x24
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd90      	pop	{r4, r7, pc}

08006af8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006af8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006afc:	b0a0      	sub	sp, #128	; 0x80
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006b0e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <dir_register+0x22>
 8006b16:	2306      	movs	r3, #6
 8006b18:	e18e      	b.n	8006e38 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	677b      	str	r3, [r7, #116]	; 0x74
 8006b1e:	e002      	b.n	8006b26 <dir_register+0x2e>
 8006b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b22:	3301      	adds	r3, #1
 8006b24:	677b      	str	r3, [r7, #116]	; 0x74
 8006b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	4413      	add	r3, r2
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1f4      	bne.n	8006b20 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8006b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	f040 809f 	bne.w	8006c7e <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8006b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b42:	330e      	adds	r3, #14
 8006b44:	4aa2      	ldr	r2, [pc, #648]	; (8006dd0 <dir_register+0x2d8>)
 8006b46:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4a:	08db      	lsrs	r3, r3, #3
 8006b4c:	3302      	adds	r3, #2
 8006b4e:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8006b50:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7ff f8ba 	bl	8005ccc <dir_alloc>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 8006b5e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d002      	beq.n	8006b6c <dir_register+0x74>
 8006b66:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006b6a:	e165      	b.n	8006e38 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b72:	3b01      	subs	r3, #1
 8006b74:	015b      	lsls	r3, r3, #5
 8006b76:	1ad2      	subs	r2, r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d072      	beq.n	8006c6a <dir_register+0x172>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	79db      	ldrb	r3, [r3, #7]
 8006b88:	f003 0304 	and.w	r3, r3, #4
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d06c      	beq.n	8006c6a <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006b96:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006b98:	8949      	ldrh	r1, [r1, #10]
 8006b9a:	0249      	lsls	r1, r1, #9
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	4605      	mov	r5, r0
 8006ba2:	eb12 0804 	adds.w	r8, r2, r4
 8006ba6:	eb43 0905 	adc.w	r9, r3, r5
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7fe fcd6 	bl	8005564 <fill_first_frag>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8006bbe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d002      	beq.n	8006bcc <dir_register+0xd4>
 8006bc6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006bca:	e135      	b.n	8006e38 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	f7fe fcf3 	bl	80055c2 <fill_last_frag>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8006be2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <dir_register+0xf8>
 8006bea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006bee:	e123      	b.n	8006e38 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	f107 0308 	add.w	r3, r7, #8
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7ff fc95 	bl	8006528 <load_obj_dir>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8006c04:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d002      	beq.n	8006c12 <dir_register+0x11a>
 8006c0c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006c10:	e112      	b.n	8006e38 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 8006c12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006c20:	4608      	mov	r0, r1
 8006c22:	f7fd fe3c 	bl	800489e <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8006c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006c34:	4608      	mov	r0, r1
 8006c36:	f7fd fe32 	bl	800489e <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	79da      	ldrb	r2, [r3, #7]
 8006c3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	3321      	adds	r3, #33	; 0x21
 8006c44:	f042 0201 	orr.w	r2, r2, #1
 8006c48:	b2d2      	uxtb	r2, r2
 8006c4a:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8006c4c:	f107 0308 	add.w	r3, r7, #8
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7ff fc9f 	bl	8006594 <store_xdir>
 8006c56:	4603      	mov	r3, r0
 8006c58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8006c5c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <dir_register+0x172>
 8006c64:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006c68:	e0e6      	b.n	8006e38 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8006c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c6c:	691a      	ldr	r2, [r3, #16]
 8006c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	4619      	mov	r1, r3
 8006c74:	4610      	mov	r0, r2
 8006c76:	f7ff fce8 	bl	800664a <create_xdir>
		return FR_OK;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e0dc      	b.n	8006e38 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8006c84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006c88:	220c      	movs	r2, #12
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fd fe8f 	bl	80049ae <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006c90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d033      	beq.n	8006d04 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2240      	movs	r2, #64	; 0x40
 8006ca0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ca8:	e016      	b.n	8006cd8 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8006cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8006cb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cba:	f7ff f9df 	bl	800607c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff fdf1 	bl	80068a6 <dir_find>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 8006cca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d106      	bne.n	8006ce0 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 8006cd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	67bb      	str	r3, [r7, #120]	; 0x78
 8006cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cda:	2b63      	cmp	r3, #99	; 0x63
 8006cdc:	d9e5      	bls.n	8006caa <dir_register+0x1b2>
 8006cde:	e000      	b.n	8006ce2 <dir_register+0x1ea>
			if (res != FR_OK) break;
 8006ce0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006ce2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ce4:	2b64      	cmp	r3, #100	; 0x64
 8006ce6:	d101      	bne.n	8006cec <dir_register+0x1f4>
 8006ce8:	2307      	movs	r3, #7
 8006cea:	e0a5      	b.n	8006e38 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006cec:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d002      	beq.n	8006cfa <dir_register+0x202>
 8006cf4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006cf8:	e09e      	b.n	8006e38 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006cfa:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006d04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d007      	beq.n	8006d20 <dir_register+0x228>
 8006d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d12:	330c      	adds	r3, #12
 8006d14:	4a2f      	ldr	r2, [pc, #188]	; (8006dd4 <dir_register+0x2dc>)
 8006d16:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1a:	089b      	lsrs	r3, r3, #2
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	e000      	b.n	8006d22 <dir_register+0x22a>
 8006d20:	2301      	movs	r3, #1
 8006d22:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006d24:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7fe ffd0 	bl	8005ccc <dir_alloc>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006d32:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d14f      	bne.n	8006dda <dir_register+0x2e2>
 8006d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	673b      	str	r3, [r7, #112]	; 0x70
 8006d40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d049      	beq.n	8006dda <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d4c:	015b      	lsls	r3, r3, #5
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7fe fe5f 	bl	8005a16 <dir_sdi>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8006d5e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d139      	bne.n	8006dda <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	3340      	adds	r3, #64	; 0x40
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7ff fa14 	bl	8006198 <sum_sfn>
 8006d70:	4603      	mov	r3, r0
 8006d72:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006d7e:	f7fe f845 	bl	8004e0c <move_window>
 8006d82:	4603      	mov	r3, r0
 8006d84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8006d88:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d123      	bne.n	8006dd8 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d92:	68d8      	ldr	r0, [r3, #12]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006d98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8006da0:	f7ff f904 	bl	8005fac <put_lfn>
				fs->wflag = 1;
 8006da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da6:	2201      	movs	r2, #1
 8006da8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006daa:	2100      	movs	r1, #0
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7fe feb8 	bl	8005b22 <dir_next>
 8006db2:	4603      	mov	r3, r0
 8006db4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 8006db8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10c      	bne.n	8006dda <dir_register+0x2e2>
 8006dc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dc2:	3b01      	subs	r3, #1
 8006dc4:	673b      	str	r3, [r7, #112]	; 0x70
 8006dc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1d4      	bne.n	8006d76 <dir_register+0x27e>
 8006dcc:	e005      	b.n	8006dda <dir_register+0x2e2>
 8006dce:	bf00      	nop
 8006dd0:	88888889 	.word	0x88888889
 8006dd4:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8006dd8:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006dda:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d128      	bne.n	8006e34 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de6:	4619      	mov	r1, r3
 8006de8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006dea:	f7fe f80f 	bl	8004e0c <move_window>
 8006dee:	4603      	mov	r3, r0
 8006df0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8006df4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d11b      	bne.n	8006e34 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e00:	2220      	movs	r2, #32
 8006e02:	2100      	movs	r1, #0
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fd fdf3 	bl	80049f0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3340      	adds	r3, #64	; 0x40
 8006e12:	220b      	movs	r2, #11
 8006e14:	4619      	mov	r1, r3
 8006e16:	f7fd fdca 	bl	80049ae <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e24:	330c      	adds	r3, #12
 8006e26:	f002 0218 	and.w	r2, r2, #24
 8006e2a:	b2d2      	uxtb	r2, r2
 8006e2c:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e30:	2201      	movs	r2, #1
 8006e32:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006e34:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3780      	adds	r7, #128	; 0x80
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006e42:	bf00      	nop

08006e44 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8006e44:	b5b0      	push	{r4, r5, r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2200      	movs	r2, #0
 8006e58:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f000 80d8 	beq.w	8007014 <get_fileinfo+0x1d0>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	d106      	bne.n	8006e7a <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7ff fa18 	bl	80062a8 <get_xdir_info>
		return;
 8006e78:	e0cd      	b.n	8007016 <get_fileinfo+0x1d2>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e82:	d032      	beq.n	8006eea <get_fileinfo+0xa6>
			i = j = 0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	61bb      	str	r3, [r7, #24]
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006e8c:	e01b      	b.n	8006ec6 <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8006e8e:	89fb      	ldrh	r3, [r7, #14]
 8006e90:	2100      	movs	r1, #0
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 feca 	bl	8008c2c <ff_convert>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8006e9c:	89fb      	ldrh	r3, [r7, #14]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d102      	bne.n	8006ea8 <get_fileinfo+0x64>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	61fb      	str	r3, [r7, #28]
 8006ea6:	e01a      	b.n	8006ede <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	2bfe      	cmp	r3, #254	; 0xfe
 8006eac:	d902      	bls.n	8006eb4 <get_fileinfo+0x70>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61fb      	str	r3, [r7, #28]
 8006eb2:	e014      	b.n	8006ede <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	61fa      	str	r2, [r7, #28]
 8006eba:	89fa      	ldrh	r2, [r7, #14]
 8006ebc:	b2d1      	uxtb	r1, r2
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	460a      	mov	r2, r1
 8006ec4:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	68da      	ldr	r2, [r3, #12]
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	1c59      	adds	r1, r3, #1
 8006ece:	61b9      	str	r1, [r7, #24]
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	4413      	add	r3, r2
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	81fb      	strh	r3, [r7, #14]
 8006ed8:	89fb      	ldrh	r3, [r7, #14]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1d7      	bne.n	8006e8e <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	331a      	adds	r3, #26
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8006eea:	2300      	movs	r3, #0
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	331a      	adds	r3, #26
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8006efe:	e04c      	b.n	8006f9a <get_fileinfo+0x156>
		c = (TCHAR)dp->dir[i++];
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	1c59      	adds	r1, r3, #1
 8006f08:	61f9      	str	r1, [r7, #28]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
 8006f12:	2b20      	cmp	r3, #32
 8006f14:	d100      	bne.n	8006f18 <get_fileinfo+0xd4>
 8006f16:	e040      	b.n	8006f9a <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	2b05      	cmp	r3, #5
 8006f1c:	d101      	bne.n	8006f22 <get_fileinfo+0xde>
 8006f1e:	23e5      	movs	r3, #229	; 0xe5
 8006f20:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	2b09      	cmp	r3, #9
 8006f26:	d10f      	bne.n	8006f48 <get_fileinfo+0x104>
			if (!lfv) fno->fname[j] = '.';
 8006f28:	89bb      	ldrh	r3, [r7, #12]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d105      	bne.n	8006f3a <get_fileinfo+0xf6>
 8006f2e:	683a      	ldr	r2, [r7, #0]
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	4413      	add	r3, r2
 8006f34:	331a      	adds	r3, #26
 8006f36:	222e      	movs	r2, #46	; 0x2e
 8006f38:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	61ba      	str	r2, [r7, #24]
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	4413      	add	r3, r2
 8006f44:	222e      	movs	r2, #46	; 0x2e
 8006f46:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	330d      	adds	r3, #13
 8006f50:	7dfa      	ldrb	r2, [r7, #23]
 8006f52:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8006f54:	89bb      	ldrh	r3, [r7, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d11c      	bne.n	8006f94 <get_fileinfo+0x150>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
 8006f5c:	2b40      	cmp	r3, #64	; 0x40
 8006f5e:	d913      	bls.n	8006f88 <get_fileinfo+0x144>
 8006f60:	7dfb      	ldrb	r3, [r7, #23]
 8006f62:	2b5a      	cmp	r3, #90	; 0x5a
 8006f64:	d810      	bhi.n	8006f88 <get_fileinfo+0x144>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6a:	330c      	adds	r3, #12
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	d901      	bls.n	8006f7a <get_fileinfo+0x136>
 8006f76:	2310      	movs	r3, #16
 8006f78:	e000      	b.n	8006f7c <get_fileinfo+0x138>
 8006f7a:	2308      	movs	r3, #8
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <get_fileinfo+0x144>
				c += 0x20;			/* To lower */
 8006f82:	7dfb      	ldrb	r3, [r7, #23]
 8006f84:	3320      	adds	r3, #32
 8006f86:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	331a      	adds	r3, #26
 8006f90:	7dfa      	ldrb	r2, [r7, #23]
 8006f92:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	3301      	adds	r3, #1
 8006f98:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	2b0a      	cmp	r3, #10
 8006f9e:	d9af      	bls.n	8006f00 <get_fileinfo+0xbc>
	}
	if (!lfv) {
 8006fa0:	89bb      	ldrh	r3, [r7, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10d      	bne.n	8006fc2 <get_fileinfo+0x17e>
		fno->fname[j] = 0;
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	4413      	add	r3, r2
 8006fac:	331a      	adds	r3, #26
 8006fae:	2200      	movs	r2, #0
 8006fb0:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb6:	330c      	adds	r3, #12
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <get_fileinfo+0x17e>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	330d      	adds	r3, #13
 8006fca:	2200      	movs	r2, #0
 8006fcc:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fd2:	7ada      	ldrb	r2, [r3, #11]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fdc:	331c      	adds	r3, #28
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fd fb18 	bl	8004614 <ld_dword>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	461c      	mov	r4, r3
 8006fea:	4615      	mov	r5, r2
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff6:	3316      	adds	r3, #22
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7fd fb0b 	bl	8004614 <ld_dword>
 8006ffe:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	b29a      	uxth	r2, r3
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	815a      	strh	r2, [r3, #10]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	0c1b      	lsrs	r3, r3, #16
 800700c:	b29a      	uxth	r2, r3
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	811a      	strh	r2, [r3, #8]
 8007012:	e000      	b.n	8007016 <get_fileinfo+0x1d2>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007014:	bf00      	nop
}
 8007016:	3720      	adds	r7, #32
 8007018:	46bd      	mov	sp, r7
 800701a:	bdb0      	pop	{r4, r5, r7, pc}

0800701c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08a      	sub	sp, #40	; 0x28
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	613b      	str	r3, [r7, #16]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	60fb      	str	r3, [r7, #12]
 8007034:	2300      	movs	r3, #0
 8007036:	617b      	str	r3, [r7, #20]
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	61ba      	str	r2, [r7, #24]
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	4413      	add	r3, r2
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800704a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800704c:	2b1f      	cmp	r3, #31
 800704e:	d940      	bls.n	80070d2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007050:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007052:	2b2f      	cmp	r3, #47	; 0x2f
 8007054:	d006      	beq.n	8007064 <create_name+0x48>
 8007056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007058:	2b5c      	cmp	r3, #92	; 0x5c
 800705a:	d110      	bne.n	800707e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800705c:	e002      	b.n	8007064 <create_name+0x48>
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	3301      	adds	r3, #1
 8007062:	61bb      	str	r3, [r7, #24]
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	4413      	add	r3, r2
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	2b2f      	cmp	r3, #47	; 0x2f
 800706e:	d0f6      	beq.n	800705e <create_name+0x42>
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	4413      	add	r3, r2
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	2b5c      	cmp	r3, #92	; 0x5c
 800707a:	d0f0      	beq.n	800705e <create_name+0x42>
			break;
 800707c:	e02a      	b.n	80070d4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2bfe      	cmp	r3, #254	; 0xfe
 8007082:	d901      	bls.n	8007088 <create_name+0x6c>
 8007084:	2306      	movs	r3, #6
 8007086:	e17d      	b.n	8007384 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007088:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800708a:	b2db      	uxtb	r3, r3
 800708c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800708e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007090:	2101      	movs	r1, #1
 8007092:	4618      	mov	r0, r3
 8007094:	f001 fdca 	bl	8008c2c <ff_convert>
 8007098:	4603      	mov	r3, r0
 800709a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800709c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d101      	bne.n	80070a6 <create_name+0x8a>
 80070a2:	2306      	movs	r3, #6
 80070a4:	e16e      	b.n	8007384 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80070a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070a8:	2b7f      	cmp	r3, #127	; 0x7f
 80070aa:	d809      	bhi.n	80070c0 <create_name+0xa4>
 80070ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070ae:	4619      	mov	r1, r3
 80070b0:	488d      	ldr	r0, [pc, #564]	; (80072e8 <create_name+0x2cc>)
 80070b2:	f7fd fcdf 	bl	8004a74 <chk_chr>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <create_name+0xa4>
 80070bc:	2306      	movs	r3, #6
 80070be:	e161      	b.n	8007384 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	617a      	str	r2, [r7, #20]
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	4413      	add	r3, r2
 80070cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80070ce:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80070d0:	e7b4      	b.n	800703c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80070d2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80070d4:	693a      	ldr	r2, [r7, #16]
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	441a      	add	r2, r3
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80070de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070e0:	2b1f      	cmp	r3, #31
 80070e2:	d801      	bhi.n	80070e8 <create_name+0xcc>
 80070e4:	2304      	movs	r3, #4
 80070e6:	e000      	b.n	80070ea <create_name+0xce>
 80070e8:	2300      	movs	r3, #0
 80070ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80070ee:	e011      	b.n	8007114 <create_name+0xf8>
		w = lfn[di - 1];
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80070f6:	3b01      	subs	r3, #1
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4413      	add	r3, r2
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007102:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007104:	2b20      	cmp	r3, #32
 8007106:	d002      	beq.n	800710e <create_name+0xf2>
 8007108:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800710a:	2b2e      	cmp	r3, #46	; 0x2e
 800710c:	d106      	bne.n	800711c <create_name+0x100>
		di--;
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	3b01      	subs	r3, #1
 8007112:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1ea      	bne.n	80070f0 <create_name+0xd4>
 800711a:	e000      	b.n	800711e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800711c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	4413      	add	r3, r2
 8007126:	2200      	movs	r2, #0
 8007128:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d101      	bne.n	8007134 <create_name+0x118>
 8007130:	2306      	movs	r3, #6
 8007132:	e127      	b.n	8007384 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	3340      	adds	r3, #64	; 0x40
 8007138:	220b      	movs	r2, #11
 800713a:	2120      	movs	r1, #32
 800713c:	4618      	mov	r0, r3
 800713e:	f7fd fc57 	bl	80049f0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007142:	2300      	movs	r3, #0
 8007144:	61bb      	str	r3, [r7, #24]
 8007146:	e002      	b.n	800714e <create_name+0x132>
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	3301      	adds	r3, #1
 800714c:	61bb      	str	r3, [r7, #24]
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	4413      	add	r3, r2
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	2b20      	cmp	r3, #32
 800715a:	d0f5      	beq.n	8007148 <create_name+0x12c>
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	005b      	lsls	r3, r3, #1
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	2b2e      	cmp	r3, #46	; 0x2e
 8007168:	d0ee      	beq.n	8007148 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d009      	beq.n	8007184 <create_name+0x168>
 8007170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007174:	f043 0303 	orr.w	r3, r3, #3
 8007178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800717c:	e002      	b.n	8007184 <create_name+0x168>
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	3b01      	subs	r3, #1
 8007182:	617b      	str	r3, [r7, #20]
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d009      	beq.n	800719e <create_name+0x182>
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007190:	3b01      	subs	r3, #1
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4413      	add	r3, r2
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	2b2e      	cmp	r3, #46	; 0x2e
 800719c:	d1ef      	bne.n	800717e <create_name+0x162>

	i = b = 0; ni = 8;
 800719e:	2300      	movs	r3, #0
 80071a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80071a4:	2300      	movs	r3, #0
 80071a6:	623b      	str	r3, [r7, #32]
 80071a8:	2308      	movs	r3, #8
 80071aa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	1c5a      	adds	r2, r3, #1
 80071b0:	61ba      	str	r2, [r7, #24]
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	4413      	add	r3, r2
 80071b8:	881b      	ldrh	r3, [r3, #0]
 80071ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80071bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 8090 	beq.w	80072e4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80071c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d006      	beq.n	80071d8 <create_name+0x1bc>
 80071ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80071cc:	2b2e      	cmp	r3, #46	; 0x2e
 80071ce:	d10a      	bne.n	80071e6 <create_name+0x1ca>
 80071d0:	69ba      	ldr	r2, [r7, #24]
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d006      	beq.n	80071e6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80071d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071dc:	f043 0303 	orr.w	r3, r3, #3
 80071e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80071e4:	e07d      	b.n	80072e2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80071e6:	6a3a      	ldr	r2, [r7, #32]
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d203      	bcs.n	80071f6 <create_name+0x1da>
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d123      	bne.n	800723e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	2b0b      	cmp	r3, #11
 80071fa:	d106      	bne.n	800720a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80071fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007200:	f043 0303 	orr.w	r3, r3, #3
 8007204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007208:	e075      	b.n	80072f6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800720a:	69ba      	ldr	r2, [r7, #24]
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	429a      	cmp	r2, r3
 8007210:	d005      	beq.n	800721e <create_name+0x202>
 8007212:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007216:	f043 0303 	orr.w	r3, r3, #3
 800721a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800721e:	69ba      	ldr	r2, [r7, #24]
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	429a      	cmp	r2, r3
 8007224:	d866      	bhi.n	80072f4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	61bb      	str	r3, [r7, #24]
 800722a:	2308      	movs	r3, #8
 800722c:	623b      	str	r3, [r7, #32]
 800722e:	230b      	movs	r3, #11
 8007230:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007232:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800723c:	e051      	b.n	80072e2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800723e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007240:	2b7f      	cmp	r3, #127	; 0x7f
 8007242:	d914      	bls.n	800726e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007244:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007246:	2100      	movs	r1, #0
 8007248:	4618      	mov	r0, r3
 800724a:	f001 fcef 	bl	8008c2c <ff_convert>
 800724e:	4603      	mov	r3, r0
 8007250:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007252:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007254:	2b00      	cmp	r3, #0
 8007256:	d004      	beq.n	8007262 <create_name+0x246>
 8007258:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800725a:	3b80      	subs	r3, #128	; 0x80
 800725c:	4a23      	ldr	r2, [pc, #140]	; (80072ec <create_name+0x2d0>)
 800725e:	5cd3      	ldrb	r3, [r2, r3]
 8007260:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007266:	f043 0302 	orr.w	r3, r3, #2
 800726a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800726e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007270:	2b00      	cmp	r3, #0
 8007272:	d007      	beq.n	8007284 <create_name+0x268>
 8007274:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007276:	4619      	mov	r1, r3
 8007278:	481d      	ldr	r0, [pc, #116]	; (80072f0 <create_name+0x2d4>)
 800727a:	f7fd fbfb 	bl	8004a74 <chk_chr>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d008      	beq.n	8007296 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007284:	235f      	movs	r3, #95	; 0x5f
 8007286:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800728c:	f043 0303 	orr.w	r3, r3, #3
 8007290:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007294:	e01b      	b.n	80072ce <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007296:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007298:	2b40      	cmp	r3, #64	; 0x40
 800729a:	d909      	bls.n	80072b0 <create_name+0x294>
 800729c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800729e:	2b5a      	cmp	r3, #90	; 0x5a
 80072a0:	d806      	bhi.n	80072b0 <create_name+0x294>
					b |= 2;
 80072a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072a6:	f043 0302 	orr.w	r3, r3, #2
 80072aa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80072ae:	e00e      	b.n	80072ce <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80072b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072b2:	2b60      	cmp	r3, #96	; 0x60
 80072b4:	d90b      	bls.n	80072ce <create_name+0x2b2>
 80072b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072b8:	2b7a      	cmp	r3, #122	; 0x7a
 80072ba:	d808      	bhi.n	80072ce <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80072bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80072c0:	f043 0301 	orr.w	r3, r3, #1
 80072c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80072c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072ca:	3b20      	subs	r3, #32
 80072cc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80072ce:	6a3b      	ldr	r3, [r7, #32]
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	623a      	str	r2, [r7, #32]
 80072d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072d6:	b2d1      	uxtb	r1, r2
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	4413      	add	r3, r2
 80072dc:	460a      	mov	r2, r1
 80072de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 80072e2:	e763      	b.n	80071ac <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80072e4:	bf00      	nop
 80072e6:	e006      	b.n	80072f6 <create_name+0x2da>
 80072e8:	08008e94 	.word	0x08008e94
 80072ec:	08008f00 	.word	0x08008f00
 80072f0:	08008ea0 	.word	0x08008ea0
			if (si > di) break;			/* No extension */
 80072f4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072fc:	2be5      	cmp	r3, #229	; 0xe5
 80072fe:	d103      	bne.n	8007308 <create_name+0x2ec>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2205      	movs	r2, #5
 8007304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	2b08      	cmp	r3, #8
 800730c:	d104      	bne.n	8007318 <create_name+0x2fc>
 800730e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007318:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800731c:	f003 030c 	and.w	r3, r3, #12
 8007320:	2b0c      	cmp	r3, #12
 8007322:	d005      	beq.n	8007330 <create_name+0x314>
 8007324:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007328:	f003 0303 	and.w	r3, r3, #3
 800732c:	2b03      	cmp	r3, #3
 800732e:	d105      	bne.n	800733c <create_name+0x320>
 8007330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007334:	f043 0302 	orr.w	r3, r3, #2
 8007338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800733c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007340:	f003 0302 	and.w	r3, r3, #2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d117      	bne.n	8007378 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007348:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800734c:	f003 0303 	and.w	r3, r3, #3
 8007350:	2b01      	cmp	r3, #1
 8007352:	d105      	bne.n	8007360 <create_name+0x344>
 8007354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007358:	f043 0310 	orr.w	r3, r3, #16
 800735c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007360:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007364:	f003 030c 	and.w	r3, r3, #12
 8007368:	2b04      	cmp	r3, #4
 800736a:	d105      	bne.n	8007378 <create_name+0x35c>
 800736c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007370:	f043 0308 	orr.w	r3, r3, #8
 8007374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800737e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 8007382:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007384:	4618      	mov	r0, r3
 8007386:	3728      	adds	r7, #40	; 0x28
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b086      	sub	sp, #24
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80073a0:	e002      	b.n	80073a8 <follow_path+0x1c>
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	3301      	adds	r3, #1
 80073a6:	603b      	str	r3, [r7, #0]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	2b2f      	cmp	r3, #47	; 0x2f
 80073ae:	d0f8      	beq.n	80073a2 <follow_path+0x16>
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	2b5c      	cmp	r3, #92	; 0x5c
 80073b6:	d0f4      	beq.n	80073a2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2200      	movs	r2, #0
 80073bc:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	2200      	movs	r2, #0
 80073c2:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	2b1f      	cmp	r3, #31
 80073ca:	d80a      	bhi.n	80073e2 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2280      	movs	r2, #128	; 0x80
 80073d0:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 80073d4:	2100      	movs	r1, #0
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7fe fb1d 	bl	8005a16 <dir_sdi>
 80073dc:	4603      	mov	r3, r0
 80073de:	75fb      	strb	r3, [r7, #23]
 80073e0:	e078      	b.n	80074d4 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80073e2:	463b      	mov	r3, r7
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f7ff fe18 	bl	800701c <create_name>
 80073ec:	4603      	mov	r3, r0
 80073ee:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80073f0:	7dfb      	ldrb	r3, [r7, #23]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d169      	bne.n	80074ca <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f7ff fa55 	bl	80068a6 <dir_find>
 80073fc:	4603      	mov	r3, r0
 80073fe:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8007406:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007408:	7dfb      	ldrb	r3, [r7, #23]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800740e:	7dfb      	ldrb	r3, [r7, #23]
 8007410:	2b04      	cmp	r3, #4
 8007412:	d15c      	bne.n	80074ce <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007414:	7afb      	ldrb	r3, [r7, #11]
 8007416:	f003 0304 	and.w	r3, r3, #4
 800741a:	2b00      	cmp	r3, #0
 800741c:	d157      	bne.n	80074ce <follow_path+0x142>
 800741e:	2305      	movs	r3, #5
 8007420:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007422:	e054      	b.n	80074ce <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007424:	7afb      	ldrb	r3, [r7, #11]
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b00      	cmp	r3, #0
 800742c:	d151      	bne.n	80074d2 <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	799b      	ldrb	r3, [r3, #6]
 8007432:	f003 0310 	and.w	r3, r3, #16
 8007436:	2b00      	cmp	r3, #0
 8007438:	d102      	bne.n	8007440 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800743a:	2305      	movs	r3, #5
 800743c:	75fb      	strb	r3, [r7, #23]
 800743e:	e049      	b.n	80074d4 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	2b04      	cmp	r3, #4
 8007446:	d130      	bne.n	80074aa <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	689a      	ldr	r2, [r3, #8]
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007456:	4613      	mov	r3, r2
 8007458:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	79d2      	ldrb	r2, [r2, #7]
 8007460:	431a      	orrs	r2, r3
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	3334      	adds	r3, #52	; 0x34
 8007474:	4618      	mov	r0, r3
 8007476:	f7fd f8cd 	bl	8004614 <ld_dword>
 800747a:	4602      	mov	r2, r0
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	3321      	adds	r3, #33	; 0x21
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	f003 0302 	and.w	r3, r3, #2
 800748c:	b2da      	uxtb	r2, r3
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	3338      	adds	r3, #56	; 0x38
 8007498:	4618      	mov	r0, r3
 800749a:	f7fd f8de 	bl	800465a <ld_qword>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	6939      	ldr	r1, [r7, #16]
 80074a4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80074a8:	e79b      	b.n	80073e2 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074b8:	4413      	add	r3, r2
 80074ba:	4619      	mov	r1, r3
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f7fe fc61 	bl	8005d84 <ld_clust>
 80074c2:	4602      	mov	r2, r0
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80074c8:	e78b      	b.n	80073e2 <follow_path+0x56>
			if (res != FR_OK) break;
 80074ca:	bf00      	nop
 80074cc:	e002      	b.n	80074d4 <follow_path+0x148>
				break;
 80074ce:	bf00      	nop
 80074d0:	e000      	b.n	80074d4 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80074d2:	bf00      	nop
			}
		}
	}

	return res;
 80074d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80074de:	b480      	push	{r7}
 80074e0:	b087      	sub	sp, #28
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80074e6:	f04f 33ff 	mov.w	r3, #4294967295
 80074ea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d031      	beq.n	8007558 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	617b      	str	r3, [r7, #20]
 80074fa:	e002      	b.n	8007502 <get_ldnumber+0x24>
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	3301      	adds	r3, #1
 8007500:	617b      	str	r3, [r7, #20]
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b1f      	cmp	r3, #31
 8007508:	d903      	bls.n	8007512 <get_ldnumber+0x34>
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	2b3a      	cmp	r3, #58	; 0x3a
 8007510:	d1f4      	bne.n	80074fc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b3a      	cmp	r3, #58	; 0x3a
 8007518:	d11c      	bne.n	8007554 <get_ldnumber+0x76>
			tp = *path;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	60fa      	str	r2, [r7, #12]
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	3b30      	subs	r3, #48	; 0x30
 800752a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2b09      	cmp	r3, #9
 8007530:	d80e      	bhi.n	8007550 <get_ldnumber+0x72>
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	429a      	cmp	r2, r3
 8007538:	d10a      	bne.n	8007550 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d107      	bne.n	8007550 <get_ldnumber+0x72>
					vol = (int)i;
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	3301      	adds	r3, #1
 8007548:	617b      	str	r3, [r7, #20]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	e002      	b.n	800755a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007554:	2300      	movs	r3, #0
 8007556:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007558:	693b      	ldr	r3, [r7, #16]
}
 800755a:	4618      	mov	r0, r3
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
	...

08007568 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	70da      	strb	r2, [r3, #3]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f04f 32ff 	mov.w	r2, #4294967295
 800757e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7fd fc42 	bl	8004e0c <move_window>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <check_fs+0x2a>
 800758e:	2304      	movs	r3, #4
 8007590:	e044      	b.n	800761c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	3338      	adds	r3, #56	; 0x38
 8007596:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800759a:	4618      	mov	r0, r3
 800759c:	f7fd f822 	bl	80045e4 <ld_word>
 80075a0:	4603      	mov	r3, r0
 80075a2:	461a      	mov	r2, r3
 80075a4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d001      	beq.n	80075b0 <check_fs+0x48>
 80075ac:	2303      	movs	r3, #3
 80075ae:	e035      	b.n	800761c <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80075b6:	2be9      	cmp	r3, #233	; 0xe9
 80075b8:	d009      	beq.n	80075ce <check_fs+0x66>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80075c0:	2beb      	cmp	r3, #235	; 0xeb
 80075c2:	d11e      	bne.n	8007602 <check_fs+0x9a>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80075ca:	2b90      	cmp	r3, #144	; 0x90
 80075cc:	d119      	bne.n	8007602 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	3338      	adds	r3, #56	; 0x38
 80075d2:	3336      	adds	r3, #54	; 0x36
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fd f81d 	bl	8004614 <ld_dword>
 80075da:	4603      	mov	r3, r0
 80075dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80075e0:	4a10      	ldr	r2, [pc, #64]	; (8007624 <check_fs+0xbc>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d101      	bne.n	80075ea <check_fs+0x82>
 80075e6:	2300      	movs	r3, #0
 80075e8:	e018      	b.n	800761c <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	3338      	adds	r3, #56	; 0x38
 80075ee:	3352      	adds	r3, #82	; 0x52
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fd f80f 	bl	8004614 <ld_dword>
 80075f6:	4603      	mov	r3, r0
 80075f8:	4a0b      	ldr	r2, [pc, #44]	; (8007628 <check_fs+0xc0>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d101      	bne.n	8007602 <check_fs+0x9a>
 80075fe:	2300      	movs	r3, #0
 8007600:	e00c      	b.n	800761c <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	3338      	adds	r3, #56	; 0x38
 8007606:	220b      	movs	r2, #11
 8007608:	4908      	ldr	r1, [pc, #32]	; (800762c <check_fs+0xc4>)
 800760a:	4618      	mov	r0, r3
 800760c:	f7fd fa0b 	bl	8004a26 <mem_cmp>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d101      	bne.n	800761a <check_fs+0xb2>
 8007616:	2301      	movs	r3, #1
 8007618:	e000      	b.n	800761c <check_fs+0xb4>
#endif
	return 2;
 800761a:	2302      	movs	r3, #2
}
 800761c:	4618      	mov	r0, r3
 800761e:	3708      	adds	r7, #8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	00544146 	.word	0x00544146
 8007628:	33544146 	.word	0x33544146
 800762c:	08008ea8 	.word	0x08008ea8

08007630 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007634:	b09c      	sub	sp, #112	; 0x70
 8007636:	af00      	add	r7, sp, #0
 8007638:	61f8      	str	r0, [r7, #28]
 800763a:	61b9      	str	r1, [r7, #24]
 800763c:	4613      	mov	r3, r2
 800763e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	2200      	movs	r2, #0
 8007644:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007646:	69f8      	ldr	r0, [r7, #28]
 8007648:	f7ff ff49 	bl	80074de <get_ldnumber>
 800764c:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800764e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007650:	2b00      	cmp	r3, #0
 8007652:	da01      	bge.n	8007658 <find_volume+0x28>
 8007654:	230b      	movs	r3, #11
 8007656:	e337      	b.n	8007cc8 <find_volume+0x698>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007658:	4a99      	ldr	r2, [pc, #612]	; (80078c0 <find_volume+0x290>)
 800765a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800765c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007660:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <find_volume+0x3c>
 8007668:	230c      	movs	r3, #12
 800766a:	e32d      	b.n	8007cc8 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007670:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007672:	7dfb      	ldrb	r3, [r7, #23]
 8007674:	f023 0301 	bic.w	r3, r3, #1
 8007678:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800767a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d01a      	beq.n	80076b8 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8007682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007684:	785b      	ldrb	r3, [r3, #1]
 8007686:	4618      	mov	r0, r3
 8007688:	f7fc ff0e 	bl	80044a8 <disk_status>
 800768c:	4603      	mov	r3, r0
 800768e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007692:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10c      	bne.n	80076b8 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800769e:	7dfb      	ldrb	r3, [r7, #23]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d007      	beq.n	80076b4 <find_volume+0x84>
 80076a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80076a8:	f003 0304 	and.w	r3, r3, #4
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 80076b0:	230a      	movs	r3, #10
 80076b2:	e309      	b.n	8007cc8 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 80076b4:	2300      	movs	r3, #0
 80076b6:	e307      	b.n	8007cc8 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80076b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ba:	2200      	movs	r2, #0
 80076bc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80076be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076c4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80076c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076c8:	785b      	ldrb	r3, [r3, #1]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fc ff06 	bl	80044dc <disk_initialize>
 80076d0:	4603      	mov	r3, r0
 80076d2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80076d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d001      	beq.n	80076e6 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80076e2:	2303      	movs	r3, #3
 80076e4:	e2f0      	b.n	8007cc8 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d007      	beq.n	80076fc <find_volume+0xcc>
 80076ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80076f0:	f003 0304 	and.w	r3, r3, #4
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 80076f8:	230a      	movs	r3, #10
 80076fa:	e2e5      	b.n	8007cc8 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007700:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007702:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007704:	f7ff ff30 	bl	8007568 <check_fs>
 8007708:	4603      	mov	r3, r0
 800770a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800770e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007712:	2b02      	cmp	r3, #2
 8007714:	d14d      	bne.n	80077b2 <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007716:	2300      	movs	r3, #0
 8007718:	65bb      	str	r3, [r7, #88]	; 0x58
 800771a:	e020      	b.n	800775e <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800771c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800771e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007722:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007724:	011b      	lsls	r3, r3, #4
 8007726:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800772a:	4413      	add	r3, r2
 800772c:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800772e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007730:	3304      	adds	r3, #4
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d006      	beq.n	8007746 <find_volume+0x116>
 8007738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800773a:	3308      	adds	r3, #8
 800773c:	4618      	mov	r0, r3
 800773e:	f7fc ff69 	bl	8004614 <ld_dword>
 8007742:	4602      	mov	r2, r0
 8007744:	e000      	b.n	8007748 <find_volume+0x118>
 8007746:	2200      	movs	r2, #0
 8007748:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	3360      	adds	r3, #96	; 0x60
 800774e:	f107 0110 	add.w	r1, r7, #16
 8007752:	440b      	add	r3, r1
 8007754:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007758:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800775a:	3301      	adds	r3, #1
 800775c:	65bb      	str	r3, [r7, #88]	; 0x58
 800775e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007760:	2b03      	cmp	r3, #3
 8007762:	d9db      	bls.n	800771c <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007764:	2300      	movs	r3, #0
 8007766:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 8007768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <find_volume+0x144>
 800776e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007770:	3b01      	subs	r3, #1
 8007772:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007774:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	3360      	adds	r3, #96	; 0x60
 800777a:	f107 0210 	add.w	r2, r7, #16
 800777e:	4413      	add	r3, r2
 8007780:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8007784:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007788:	2b00      	cmp	r3, #0
 800778a:	d005      	beq.n	8007798 <find_volume+0x168>
 800778c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800778e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007790:	f7ff feea 	bl	8007568 <check_fs>
 8007794:	4603      	mov	r3, r0
 8007796:	e000      	b.n	800779a <find_volume+0x16a>
 8007798:	2303      	movs	r3, #3
 800779a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800779e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d905      	bls.n	80077b2 <find_volume+0x182>
 80077a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077a8:	3301      	adds	r3, #1
 80077aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80077ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d9e0      	bls.n	8007774 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80077b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	d101      	bne.n	80077be <find_volume+0x18e>
 80077ba:	2301      	movs	r3, #1
 80077bc:	e284      	b.n	8007cc8 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80077be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d901      	bls.n	80077ca <find_volume+0x19a>
 80077c6:	230d      	movs	r3, #13
 80077c8:	e27e      	b.n	8007cc8 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 80077ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	f040 80fa 	bne.w	80079c8 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 80077d4:	230b      	movs	r3, #11
 80077d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80077d8:	e002      	b.n	80077e0 <find_volume+0x1b0>
 80077da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077dc:	3301      	adds	r3, #1
 80077de:	65bb      	str	r3, [r7, #88]	; 0x58
 80077e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077e2:	2b3f      	cmp	r3, #63	; 0x3f
 80077e4:	d806      	bhi.n	80077f4 <find_volume+0x1c4>
 80077e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80077e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077ea:	4413      	add	r3, r2
 80077ec:	3338      	adds	r3, #56	; 0x38
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d0f2      	beq.n	80077da <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 80077f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077f6:	2b3f      	cmp	r3, #63	; 0x3f
 80077f8:	d801      	bhi.n	80077fe <find_volume+0x1ce>
 80077fa:	230d      	movs	r3, #13
 80077fc:	e264      	b.n	8007cc8 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 80077fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007800:	3338      	adds	r3, #56	; 0x38
 8007802:	3368      	adds	r3, #104	; 0x68
 8007804:	4618      	mov	r0, r3
 8007806:	f7fc feed 	bl	80045e4 <ld_word>
 800780a:	4603      	mov	r3, r0
 800780c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007810:	d001      	beq.n	8007816 <find_volume+0x1e6>
 8007812:	230d      	movs	r3, #13
 8007814:	e258      	b.n	8007cc8 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8007816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007818:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800781c:	2b09      	cmp	r3, #9
 800781e:	d001      	beq.n	8007824 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 8007820:	230d      	movs	r3, #13
 8007822:	e251      	b.n	8007cc8 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8007824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007826:	3338      	adds	r3, #56	; 0x38
 8007828:	3348      	adds	r3, #72	; 0x48
 800782a:	4618      	mov	r0, r3
 800782c:	f7fc ff15 	bl	800465a <ld_qword>
 8007830:	4602      	mov	r2, r0
 8007832:	460b      	mov	r3, r1
 8007834:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007836:	2000      	movs	r0, #0
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	68b9      	ldr	r1, [r7, #8]
 800783e:	1851      	adds	r1, r2, r1
 8007840:	6039      	str	r1, [r7, #0]
 8007842:	68f9      	ldr	r1, [r7, #12]
 8007844:	eb43 0101 	adc.w	r1, r3, r1
 8007848:	6079      	str	r1, [r7, #4]
 800784a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800784e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8007852:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007856:	2b01      	cmp	r3, #1
 8007858:	d301      	bcc.n	800785e <find_volume+0x22e>
 800785a:	230d      	movs	r3, #13
 800785c:	e234      	b.n	8007cc8 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800785e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007860:	3338      	adds	r3, #56	; 0x38
 8007862:	3354      	adds	r3, #84	; 0x54
 8007864:	4618      	mov	r0, r3
 8007866:	f7fc fed5 	bl	8004614 <ld_dword>
 800786a:	4602      	mov	r2, r0
 800786c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800786e:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8007870:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007872:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 8007876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007878:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800787a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800787c:	789b      	ldrb	r3, [r3, #2]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d001      	beq.n	8007886 <find_volume+0x256>
 8007882:	230d      	movs	r3, #13
 8007884:	e220      	b.n	8007cc8 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8007886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007888:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800788c:	461a      	mov	r2, r3
 800788e:	2301      	movs	r3, #1
 8007890:	4093      	lsls	r3, r2
 8007892:	b29a      	uxth	r2, r3
 8007894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007896:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8007898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800789a:	895b      	ldrh	r3, [r3, #10]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d101      	bne.n	80078a4 <find_volume+0x274>
 80078a0:	230d      	movs	r3, #13
 80078a2:	e211      	b.n	8007cc8 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 80078a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078a6:	3338      	adds	r3, #56	; 0x38
 80078a8:	335c      	adds	r3, #92	; 0x5c
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7fc feb2 	bl	8004614 <ld_dword>
 80078b0:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 80078b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b4:	4a03      	ldr	r2, [pc, #12]	; (80078c4 <find_volume+0x294>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d906      	bls.n	80078c8 <find_volume+0x298>
 80078ba:	230d      	movs	r3, #13
 80078bc:	e204      	b.n	8007cc8 <find_volume+0x698>
 80078be:	bf00      	nop
 80078c0:	200005c4 	.word	0x200005c4
 80078c4:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 80078c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ca:	1c9a      	adds	r2, r3, #2
 80078cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ce:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 80078d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078d4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80078d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078d8:	3338      	adds	r3, #56	; 0x38
 80078da:	3358      	adds	r3, #88	; 0x58
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fc fe99 	bl	8004614 <ld_dword>
 80078e2:	4602      	mov	r2, r0
 80078e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078e6:	441a      	add	r2, r3
 80078e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ea:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 80078ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ee:	3338      	adds	r3, #56	; 0x38
 80078f0:	3350      	adds	r3, #80	; 0x50
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7fc fe8e 	bl	8004614 <ld_dword>
 80078f8:	4602      	mov	r2, r0
 80078fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078fc:	441a      	add	r2, r3
 80078fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007900:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8007902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007906:	2200      	movs	r2, #0
 8007908:	469a      	mov	sl, r3
 800790a:	4693      	mov	fp, r2
 800790c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800790e:	895b      	ldrh	r3, [r3, #10]
 8007910:	461a      	mov	r2, r3
 8007912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007914:	fb02 f303 	mul.w	r3, r2, r3
 8007918:	2200      	movs	r2, #0
 800791a:	4698      	mov	r8, r3
 800791c:	4691      	mov	r9, r2
 800791e:	eb1a 0408 	adds.w	r4, sl, r8
 8007922:	eb4b 0509 	adc.w	r5, fp, r9
 8007926:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800792a:	42a2      	cmp	r2, r4
 800792c:	41ab      	sbcs	r3, r5
 800792e:	d201      	bcs.n	8007934 <find_volume+0x304>
 8007930:	230d      	movs	r3, #13
 8007932:	e1c9      	b.n	8007cc8 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8007934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007936:	3338      	adds	r3, #56	; 0x38
 8007938:	3360      	adds	r3, #96	; 0x60
 800793a:	4618      	mov	r0, r3
 800793c:	f7fc fe6a 	bl	8004614 <ld_dword>
 8007940:	4602      	mov	r2, r0
 8007942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007944:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8007946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794a:	4619      	mov	r1, r3
 800794c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800794e:	f7fd faf9 	bl	8004f44 <clust2sect>
 8007952:	4603      	mov	r3, r0
 8007954:	4619      	mov	r1, r3
 8007956:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007958:	f7fd fa58 	bl	8004e0c <move_window>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <find_volume+0x336>
 8007962:	2301      	movs	r3, #1
 8007964:	e1b0      	b.n	8007cc8 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8007966:	2300      	movs	r3, #0
 8007968:	65bb      	str	r3, [r7, #88]	; 0x58
 800796a:	e015      	b.n	8007998 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800796c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800796e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007970:	4413      	add	r3, r2
 8007972:	3338      	adds	r3, #56	; 0x38
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	2b81      	cmp	r3, #129	; 0x81
 8007978:	d10b      	bne.n	8007992 <find_volume+0x362>
 800797a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800797c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007982:	3314      	adds	r3, #20
 8007984:	4413      	add	r3, r2
 8007986:	4618      	mov	r0, r3
 8007988:	f7fc fe44 	bl	8004614 <ld_dword>
 800798c:	4603      	mov	r3, r0
 800798e:	2b02      	cmp	r3, #2
 8007990:	d007      	beq.n	80079a2 <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8007992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007994:	3320      	adds	r3, #32
 8007996:	65bb      	str	r3, [r7, #88]	; 0x58
 8007998:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800799a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800799e:	d3e5      	bcc.n	800796c <find_volume+0x33c>
 80079a0:	e000      	b.n	80079a4 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80079a2:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 80079a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079aa:	d101      	bne.n	80079b0 <find_volume+0x380>
 80079ac:	230d      	movs	r3, #13
 80079ae:	e18b      	b.n	8007cc8 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80079b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079b2:	f04f 32ff 	mov.w	r2, #4294967295
 80079b6:	619a      	str	r2, [r3, #24]
 80079b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ba:	699a      	ldr	r2, [r3, #24]
 80079bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079be:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 80079c0:	2304      	movs	r3, #4
 80079c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80079c6:	e167      	b.n	8007c98 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80079c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ca:	3338      	adds	r3, #56	; 0x38
 80079cc:	330b      	adds	r3, #11
 80079ce:	4618      	mov	r0, r3
 80079d0:	f7fc fe08 	bl	80045e4 <ld_word>
 80079d4:	4603      	mov	r3, r0
 80079d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079da:	d001      	beq.n	80079e0 <find_volume+0x3b0>
 80079dc:	230d      	movs	r3, #13
 80079de:	e173      	b.n	8007cc8 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80079e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079e2:	3338      	adds	r3, #56	; 0x38
 80079e4:	3316      	adds	r3, #22
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fc fdfc 	bl	80045e4 <ld_word>
 80079ec:	4603      	mov	r3, r0
 80079ee:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80079f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d106      	bne.n	8007a04 <find_volume+0x3d4>
 80079f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079f8:	3338      	adds	r3, #56	; 0x38
 80079fa:	3324      	adds	r3, #36	; 0x24
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fc fe09 	bl	8004614 <ld_dword>
 8007a02:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 8007a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a06:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a08:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a0c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007a10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a12:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a16:	789b      	ldrb	r3, [r3, #2]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d005      	beq.n	8007a28 <find_volume+0x3f8>
 8007a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a1e:	789b      	ldrb	r3, [r3, #2]
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	d001      	beq.n	8007a28 <find_volume+0x3f8>
 8007a24:	230d      	movs	r3, #13
 8007a26:	e14f      	b.n	8007cc8 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007a28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a2a:	789b      	ldrb	r3, [r3, #2]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a30:	fb02 f303 	mul.w	r3, r2, r3
 8007a34:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007a36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a40:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a44:	895b      	ldrh	r3, [r3, #10]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d008      	beq.n	8007a5c <find_volume+0x42c>
 8007a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a4c:	895b      	ldrh	r3, [r3, #10]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a52:	895b      	ldrh	r3, [r3, #10]
 8007a54:	3b01      	subs	r3, #1
 8007a56:	4013      	ands	r3, r2
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d001      	beq.n	8007a60 <find_volume+0x430>
 8007a5c:	230d      	movs	r3, #13
 8007a5e:	e133      	b.n	8007cc8 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a62:	3338      	adds	r3, #56	; 0x38
 8007a64:	3311      	adds	r3, #17
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7fc fdbc 	bl	80045e4 <ld_word>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	461a      	mov	r2, r3
 8007a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a72:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a76:	891b      	ldrh	r3, [r3, #8]
 8007a78:	f003 030f 	and.w	r3, r3, #15
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <find_volume+0x456>
 8007a82:	230d      	movs	r3, #13
 8007a84:	e120      	b.n	8007cc8 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a88:	3338      	adds	r3, #56	; 0x38
 8007a8a:	3313      	adds	r3, #19
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fc fda9 	bl	80045e4 <ld_word>
 8007a92:	4603      	mov	r3, r0
 8007a94:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d106      	bne.n	8007aaa <find_volume+0x47a>
 8007a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a9e:	3338      	adds	r3, #56	; 0x38
 8007aa0:	3320      	adds	r3, #32
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fc fdb6 	bl	8004614 <ld_dword>
 8007aa8:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aac:	3338      	adds	r3, #56	; 0x38
 8007aae:	330e      	adds	r3, #14
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7fc fd97 	bl	80045e4 <ld_word>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007abc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <find_volume+0x498>
 8007ac4:	230d      	movs	r3, #13
 8007ac6:	e0ff      	b.n	8007cc8 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007ac8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ace:	4413      	add	r3, r2
 8007ad0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007ad2:	8912      	ldrh	r2, [r2, #8]
 8007ad4:	0912      	lsrs	r2, r2, #4
 8007ad6:	b292      	uxth	r2, r2
 8007ad8:	4413      	add	r3, r2
 8007ada:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007adc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ade:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d201      	bcs.n	8007ae8 <find_volume+0x4b8>
 8007ae4:	230d      	movs	r3, #13
 8007ae6:	e0ef      	b.n	8007cc8 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007ae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007af0:	8952      	ldrh	r2, [r2, #10]
 8007af2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007af6:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <find_volume+0x4d2>
 8007afe:	230d      	movs	r3, #13
 8007b00:	e0e2      	b.n	8007cc8 <find_volume+0x698>
		fmt = FS_FAT32;
 8007b02:	2303      	movs	r3, #3
 8007b04:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b0a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d802      	bhi.n	8007b18 <find_volume+0x4e8>
 8007b12:	2302      	movs	r3, #2
 8007b14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b1a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d802      	bhi.n	8007b28 <find_volume+0x4f8>
 8007b22:	2301      	movs	r3, #1
 8007b24:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b2a:	1c9a      	adds	r2, r3, #2
 8007b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b2e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007b30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b34:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007b36:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b3c:	441a      	add	r2, r3
 8007b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b40:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007b42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b46:	441a      	add	r2, r3
 8007b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b4a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007b4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007b50:	2b03      	cmp	r3, #3
 8007b52:	d11e      	bne.n	8007b92 <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b56:	3338      	adds	r3, #56	; 0x38
 8007b58:	332a      	adds	r3, #42	; 0x2a
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fc fd42 	bl	80045e4 <ld_word>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d001      	beq.n	8007b6a <find_volume+0x53a>
 8007b66:	230d      	movs	r3, #13
 8007b68:	e0ae      	b.n	8007cc8 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b6c:	891b      	ldrh	r3, [r3, #8]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <find_volume+0x546>
 8007b72:	230d      	movs	r3, #13
 8007b74:	e0a8      	b.n	8007cc8 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b78:	3338      	adds	r3, #56	; 0x38
 8007b7a:	332c      	adds	r3, #44	; 0x2c
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fc fd49 	bl	8004614 <ld_dword>
 8007b82:	4602      	mov	r2, r0
 8007b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b86:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b8a:	69db      	ldr	r3, [r3, #28]
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b90:	e01f      	b.n	8007bd2 <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b94:	891b      	ldrh	r3, [r3, #8]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <find_volume+0x56e>
 8007b9a:	230d      	movs	r3, #13
 8007b9c:	e094      	b.n	8007cc8 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ba4:	441a      	add	r2, r3
 8007ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ba8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007baa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d103      	bne.n	8007bba <find_volume+0x58a>
 8007bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	005b      	lsls	r3, r3, #1
 8007bb8:	e00a      	b.n	8007bd0 <find_volume+0x5a0>
 8007bba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bbc:	69da      	ldr	r2, [r3, #28]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	005b      	lsls	r3, r3, #1
 8007bc2:	4413      	add	r3, r2
 8007bc4:	085a      	lsrs	r2, r3, #1
 8007bc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bd4:	6a1a      	ldr	r2, [r3, #32]
 8007bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bd8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007bdc:	0a5b      	lsrs	r3, r3, #9
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d201      	bcs.n	8007be6 <find_volume+0x5b6>
 8007be2:	230d      	movs	r3, #13
 8007be4:	e070      	b.n	8007cc8 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be8:	f04f 32ff 	mov.w	r2, #4294967295
 8007bec:	619a      	str	r2, [r3, #24]
 8007bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bf0:	699a      	ldr	r2, [r3, #24]
 8007bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bf4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bf8:	2280      	movs	r2, #128	; 0x80
 8007bfa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007bfc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d149      	bne.n	8007c98 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c06:	3338      	adds	r3, #56	; 0x38
 8007c08:	3330      	adds	r3, #48	; 0x30
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fc fcea 	bl	80045e4 <ld_word>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d140      	bne.n	8007c98 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007c16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c18:	3301      	adds	r3, #1
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007c1e:	f7fd f8f5 	bl	8004e0c <move_window>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d137      	bne.n	8007c98 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 8007c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c30:	3338      	adds	r3, #56	; 0x38
 8007c32:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fc fcd4 	bl	80045e4 <ld_word>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	461a      	mov	r2, r3
 8007c40:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d127      	bne.n	8007c98 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007c48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c4a:	3338      	adds	r3, #56	; 0x38
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fc fce1 	bl	8004614 <ld_dword>
 8007c52:	4603      	mov	r3, r0
 8007c54:	4a1f      	ldr	r2, [pc, #124]	; (8007cd4 <find_volume+0x6a4>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d11e      	bne.n	8007c98 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c5c:	3338      	adds	r3, #56	; 0x38
 8007c5e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fc fcd6 	bl	8004614 <ld_dword>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	4a1b      	ldr	r2, [pc, #108]	; (8007cd8 <find_volume+0x6a8>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d113      	bne.n	8007c98 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007c70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c72:	3338      	adds	r3, #56	; 0x38
 8007c74:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fc fccb 	bl	8004614 <ld_dword>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c82:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007c84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c86:	3338      	adds	r3, #56	; 0x38
 8007c88:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fc fcc1 	bl	8004614 <ld_dword>
 8007c92:	4602      	mov	r2, r0
 8007c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c96:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007c98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c9a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8007c9e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007ca0:	4b0e      	ldr	r3, [pc, #56]	; (8007cdc <find_volume+0x6ac>)
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	b29a      	uxth	r2, r3
 8007ca8:	4b0c      	ldr	r3, [pc, #48]	; (8007cdc <find_volume+0x6ac>)
 8007caa:	801a      	strh	r2, [r3, #0]
 8007cac:	4b0b      	ldr	r3, [pc, #44]	; (8007cdc <find_volume+0x6ac>)
 8007cae:	881a      	ldrh	r2, [r3, #0]
 8007cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cb2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cb6:	4a0a      	ldr	r2, [pc, #40]	; (8007ce0 <find_volume+0x6b0>)
 8007cb8:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8007cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cbc:	4a09      	ldr	r2, [pc, #36]	; (8007ce4 <find_volume+0x6b4>)
 8007cbe:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007cc0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007cc2:	f7fd f83b 	bl	8004d3c <clear_lock>
#endif
	return FR_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3770      	adds	r7, #112	; 0x70
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cd2:	bf00      	nop
 8007cd4:	41615252 	.word	0x41615252
 8007cd8:	61417272 	.word	0x61417272
 8007cdc:	200005c8 	.word	0x200005c8
 8007ce0:	2000084c 	.word	0x2000084c
 8007ce4:	200005ec 	.word	0x200005ec

08007ce8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007cf2:	2309      	movs	r3, #9
 8007cf4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d01c      	beq.n	8007d36 <validate+0x4e>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d018      	beq.n	8007d36 <validate+0x4e>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d013      	beq.n	8007d36 <validate+0x4e>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	889a      	ldrh	r2, [r3, #4]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	88db      	ldrh	r3, [r3, #6]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d10c      	bne.n	8007d36 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	785b      	ldrb	r3, [r3, #1]
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fc fbc0 	bl	80044a8 <disk_status>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d101      	bne.n	8007d36 <validate+0x4e>
			res = FR_OK;
 8007d32:	2300      	movs	r3, #0
 8007d34:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d102      	bne.n	8007d42 <validate+0x5a>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	e000      	b.n	8007d44 <validate+0x5c>
 8007d42:	2300      	movs	r3, #0
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	6013      	str	r3, [r2, #0]
	return res;
 8007d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
	...

08007d54 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b088      	sub	sp, #32
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	60f8      	str	r0, [r7, #12]
 8007d5c:	60b9      	str	r1, [r7, #8]
 8007d5e:	4613      	mov	r3, r2
 8007d60:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007d66:	f107 0310 	add.w	r3, r7, #16
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7ff fbb7 	bl	80074de <get_ldnumber>
 8007d70:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	da01      	bge.n	8007d7c <f_mount+0x28>
 8007d78:	230b      	movs	r3, #11
 8007d7a:	e02b      	b.n	8007dd4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007d7c:	4a17      	ldr	r2, [pc, #92]	; (8007ddc <f_mount+0x88>)
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d84:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d005      	beq.n	8007d98 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007d8c:	69b8      	ldr	r0, [r7, #24]
 8007d8e:	f7fc ffd5 	bl	8004d3c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	2200      	movs	r2, #0
 8007d96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	2200      	movs	r2, #0
 8007da2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	490d      	ldr	r1, [pc, #52]	; (8007ddc <f_mount+0x88>)
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <f_mount+0x66>
 8007db4:	79fb      	ldrb	r3, [r7, #7]
 8007db6:	2b01      	cmp	r3, #1
 8007db8:	d001      	beq.n	8007dbe <f_mount+0x6a>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	e00a      	b.n	8007dd4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007dbe:	f107 010c 	add.w	r1, r7, #12
 8007dc2:	f107 0308 	add.w	r3, r7, #8
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7ff fc31 	bl	8007630 <find_volume>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3720      	adds	r7, #32
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	200005c4 	.word	0x200005c4

08007de0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007de4:	b0a6      	sub	sp, #152	; 0x98
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	61f8      	str	r0, [r7, #28]
 8007dea:	61b9      	str	r1, [r7, #24]
 8007dec:	4613      	mov	r3, r2
 8007dee:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d101      	bne.n	8007dfa <f_open+0x1a>
 8007df6:	2309      	movs	r3, #9
 8007df8:	e2ae      	b.n	8008358 <f_open+0x578>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007dfa:	7dfb      	ldrb	r3, [r7, #23]
 8007dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e00:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 8007e02:	7dfa      	ldrb	r2, [r7, #23]
 8007e04:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8007e08:	f107 0318 	add.w	r3, r7, #24
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7ff fc0f 	bl	8007630 <find_volume>
 8007e12:	4603      	mov	r3, r0
 8007e14:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 8007e18:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f040 8292 	bne.w	8008346 <f_open+0x566>
		dj.obj.fs = fs;
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007e26:	69ba      	ldr	r2, [r7, #24]
 8007e28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7ff faac 	bl	800738c <follow_path>
 8007e34:	4603      	mov	r3, r0
 8007e36:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007e3a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d11a      	bne.n	8007e78 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007e42:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8007e46:	b25b      	sxtb	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	da03      	bge.n	8007e54 <f_open+0x74>
				res = FR_INVALID_NAME;
 8007e4c:	2306      	movs	r3, #6
 8007e4e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007e52:	e011      	b.n	8007e78 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	f023 0301 	bic.w	r3, r3, #1
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	bf14      	ite	ne
 8007e5e:	2301      	movne	r3, #1
 8007e60:	2300      	moveq	r3, #0
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	461a      	mov	r2, r3
 8007e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fc fe1d 	bl	8004aac <chk_lock>
 8007e72:	4603      	mov	r3, r0
 8007e74:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007e78:	7dfb      	ldrb	r3, [r7, #23]
 8007e7a:	f003 031c 	and.w	r3, r3, #28
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f000 8115 	beq.w	80080ae <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 8007e84:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d017      	beq.n	8007ebc <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007e8c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007e90:	2b04      	cmp	r3, #4
 8007e92:	d10e      	bne.n	8007eb2 <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007e94:	f7fc fe66 	bl	8004b64 <enq_lock>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d006      	beq.n	8007eac <f_open+0xcc>
 8007e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fe fe28 	bl	8006af8 <dir_register>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	e000      	b.n	8007eae <f_open+0xce>
 8007eac:	2312      	movs	r3, #18
 8007eae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007eb2:	7dfb      	ldrb	r3, [r7, #23]
 8007eb4:	f043 0308 	orr.w	r3, r3, #8
 8007eb8:	75fb      	strb	r3, [r7, #23]
 8007eba:	e011      	b.n	8007ee0 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007ebc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007ec0:	f003 0311 	and.w	r3, r3, #17
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d003      	beq.n	8007ed0 <f_open+0xf0>
					res = FR_DENIED;
 8007ec8:	2307      	movs	r3, #7
 8007eca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8007ece:	e007      	b.n	8007ee0 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007ed0:	7dfb      	ldrb	r3, [r7, #23]
 8007ed2:	f003 0304 	and.w	r3, r3, #4
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <f_open+0x100>
 8007eda:	2308      	movs	r3, #8
 8007edc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007ee0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f040 80fe 	bne.w	80080e6 <f_open+0x306>
 8007eea:	7dfb      	ldrb	r3, [r7, #23]
 8007eec:	f003 0308 	and.w	r3, r3, #8
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 80f8 	beq.w	80080e6 <f_open+0x306>
				dw = GET_FATTIME();
 8007ef6:	f7fc f9d9 	bl	80042ac <get_fattime>
 8007efa:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	2b04      	cmp	r3, #4
 8007f04:	f040 8084 	bne.w	8008010 <f_open+0x230>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8007f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	691b      	ldr	r3, [r3, #16]
 8007f12:	3334      	adds	r3, #52	; 0x34
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7fc fb7d 	bl	8004614 <ld_dword>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8007f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	3338      	adds	r3, #56	; 0x38
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fc fb97 	bl	800465a <ld_qword>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	69f9      	ldr	r1, [r7, #28]
 8007f32:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	3321      	adds	r3, #33	; 0x21
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	f003 0302 	and.w	r3, r3, #2
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 8007f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	3308      	adds	r3, #8
 8007f54:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fc fc74 	bl	8004846 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	3314      	adds	r3, #20
 8007f64:	2200      	movs	r2, #0
 8007f66:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8007f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	330c      	adds	r3, #12
 8007f6e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fc fc67 	bl	8004846 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 8007f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	3315      	adds	r3, #21
 8007f7e:	2200      	movs	r2, #0
 8007f80:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 8007f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	3304      	adds	r3, #4
 8007f88:	2220      	movs	r2, #32
 8007f8a:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	3334      	adds	r3, #52	; 0x34
 8007f92:	2100      	movs	r1, #0
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7fc fc56 	bl	8004846 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	691b      	ldr	r3, [r3, #16]
 8007f9e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007fa2:	f04f 0200 	mov.w	r2, #0
 8007fa6:	f04f 0300 	mov.w	r3, #0
 8007faa:	4608      	mov	r0, r1
 8007fac:	f7fc fc77 	bl	800489e <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8007fb8:	f04f 0200 	mov.w	r2, #0
 8007fbc:	f04f 0300 	mov.w	r3, #0
 8007fc0:	4608      	mov	r0, r1
 8007fc2:	f7fc fc6c 	bl	800489e <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	3321      	adds	r3, #33	; 0x21
 8007fcc:	2201      	movs	r2, #1
 8007fce:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8007fd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7fe fadd 	bl	8006594 <store_xdir>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8007fe0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d17e      	bne.n	80080e6 <f_open+0x306>
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d07a      	beq.n	80080e6 <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8007ff0:	69f8      	ldr	r0, [r7, #28]
 8007ff2:	69fb      	ldr	r3, [r7, #28]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	f7fd fb13 	bl	8005624 <remove_chain>
 8007ffe:	4603      	mov	r3, r0
 8008000:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	689a      	ldr	r2, [r3, #8]
 8008008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800a:	3a01      	subs	r2, #1
 800800c:	615a      	str	r2, [r3, #20]
 800800e:	e06a      	b.n	80080e6 <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008012:	330e      	adds	r3, #14
 8008014:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8008018:	4618      	mov	r0, r3
 800801a:	f7fc fc14 	bl	8004846 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800801e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008020:	3316      	adds	r3, #22
 8008022:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8008026:	4618      	mov	r0, r3
 8008028:	f7fc fc0d 	bl	8004846 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800802c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800802e:	330b      	adds	r3, #11
 8008030:	2220      	movs	r2, #32
 8008032:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008038:	4611      	mov	r1, r2
 800803a:	4618      	mov	r0, r3
 800803c:	f7fd fea2 	bl	8005d84 <ld_clust>
 8008040:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008048:	2200      	movs	r2, #0
 800804a:	4618      	mov	r0, r3
 800804c:	f7fd feb9 	bl	8005dc2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008052:	331c      	adds	r3, #28
 8008054:	2100      	movs	r1, #0
 8008056:	4618      	mov	r0, r3
 8008058:	f7fc fbf5 	bl	8004846 <st_dword>
					fs->wflag = 1;
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	2201      	movs	r2, #1
 8008060:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008062:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008066:	2b00      	cmp	r3, #0
 8008068:	d03d      	beq.n	80080e6 <f_open+0x306>
						dw = fs->winsect;
 800806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800806e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						res = remove_chain(&dj.obj, cl, 0);
 8008072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008076:	2200      	movs	r2, #0
 8008078:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800807c:	4618      	mov	r0, r3
 800807e:	f7fd fad1 	bl	8005624 <remove_chain>
 8008082:	4603      	mov	r3, r0
 8008084:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if (res == FR_OK) {
 8008088:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800808c:	2b00      	cmp	r3, #0
 800808e:	d12a      	bne.n	80080e6 <f_open+0x306>
							res = move_window(fs, dw);
 8008090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008092:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8008096:	4618      	mov	r0, r3
 8008098:	f7fc feb8 	bl	8004e0c <move_window>
 800809c:	4603      	mov	r3, r0
 800809e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80080a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80080a8:	3a01      	subs	r2, #1
 80080aa:	615a      	str	r2, [r3, #20]
 80080ac:	e01b      	b.n	80080e6 <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80080ae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d117      	bne.n	80080e6 <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80080b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80080ba:	f003 0310 	and.w	r3, r3, #16
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d003      	beq.n	80080ca <f_open+0x2ea>
					res = FR_NO_FILE;
 80080c2:	2304      	movs	r3, #4
 80080c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80080c8:	e00d      	b.n	80080e6 <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80080ca:	7dfb      	ldrb	r3, [r7, #23]
 80080cc:	f003 0302 	and.w	r3, r3, #2
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d008      	beq.n	80080e6 <f_open+0x306>
 80080d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80080d8:	f003 0301 	and.w	r3, r3, #1
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <f_open+0x306>
						res = FR_DENIED;
 80080e0:	2307      	movs	r3, #7
 80080e2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 80080e6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d128      	bne.n	8008140 <f_open+0x360>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	f003 0308 	and.w	r3, r3, #8
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d003      	beq.n	8008100 <f_open+0x320>
				mode |= FA_MODIFIED;
 80080f8:	7dfb      	ldrb	r3, [r7, #23]
 80080fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080fe:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008104:	69fb      	ldr	r3, [r7, #28]
 8008106:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8008108:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800810e:	7dfb      	ldrb	r3, [r7, #23]
 8008110:	f023 0301 	bic.w	r3, r3, #1
 8008114:	2b00      	cmp	r3, #0
 8008116:	bf14      	ite	ne
 8008118:	2301      	movne	r3, #1
 800811a:	2300      	moveq	r3, #0
 800811c:	b2db      	uxtb	r3, r3
 800811e:	461a      	mov	r2, r3
 8008120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008124:	4611      	mov	r1, r2
 8008126:	4618      	mov	r0, r3
 8008128:	f7fc fd3e 	bl	8004ba8 <inc_lock>
 800812c:	4602      	mov	r2, r0
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d102      	bne.n	8008140 <f_open+0x360>
 800813a:	2302      	movs	r3, #2
 800813c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008140:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008144:	2b00      	cmp	r3, #0
 8008146:	f040 80fe 	bne.w	8008346 <f_open+0x566>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	2b04      	cmp	r3, #4
 8008150:	d12d      	bne.n	80081ae <f_open+0x3ce>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8008152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8008158:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800815c:	4613      	mov	r3, r2
 800815e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008162:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008166:	431a      	orrs	r2, r3
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800816c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	3334      	adds	r3, #52	; 0x34
 8008178:	4618      	mov	r0, r3
 800817a:	f7fc fa4b 	bl	8004614 <ld_dword>
 800817e:	4602      	mov	r2, r0
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	691b      	ldr	r3, [r3, #16]
 8008188:	3338      	adds	r3, #56	; 0x38
 800818a:	4618      	mov	r0, r3
 800818c:	f7fc fa65 	bl	800465a <ld_qword>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	69f9      	ldr	r1, [r7, #28]
 8008196:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800819a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	3321      	adds	r3, #33	; 0x21
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	f003 0302 	and.w	r3, r3, #2
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	69fb      	ldr	r3, [r7, #28]
 80081aa:	71da      	strb	r2, [r3, #7]
 80081ac:	e016      	b.n	80081dc <f_open+0x3fc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80081b2:	4611      	mov	r1, r2
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fd fde5 	bl	8005d84 <ld_clust>
 80081ba:	4602      	mov	r2, r0
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80081c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081c2:	331c      	adds	r3, #28
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fc fa25 	bl	8004614 <ld_dword>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2200      	movs	r2, #0
 80081ce:	60bb      	str	r3, [r7, #8]
 80081d0:	60fa      	str	r2, [r7, #12]
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80081d8:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	2200      	movs	r2, #0
 80081e0:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80081e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80081e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ea:	88da      	ldrh	r2, [r3, #6]
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	7dfa      	ldrb	r2, [r7, #23]
 80081f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8008200:	69fb      	ldr	r3, [r7, #28]
 8008202:	2200      	movs	r2, #0
 8008204:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008206:	69f9      	ldr	r1, [r7, #28]
 8008208:	f04f 0200 	mov.w	r2, #0
 800820c:	f04f 0300 	mov.w	r3, #0
 8008210:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	3354      	adds	r3, #84	; 0x54
 8008218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800821c:	2100      	movs	r1, #0
 800821e:	4618      	mov	r0, r3
 8008220:	f7fc fbe6 	bl	80049f0 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008224:	7dfb      	ldrb	r3, [r7, #23]
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	2b00      	cmp	r3, #0
 800822c:	f000 808b 	beq.w	8008346 <f_open+0x566>
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008236:	4313      	orrs	r3, r2
 8008238:	f000 8085 	beq.w	8008346 <f_open+0x566>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008242:	69f9      	ldr	r1, [r7, #28]
 8008244:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824a:	895b      	ldrh	r3, [r3, #10]
 800824c:	025b      	lsls	r3, r3, #9
 800824e:	67fb      	str	r3, [r7, #124]	; 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008258:	69fb      	ldr	r3, [r7, #28]
 800825a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800825e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8008262:	e026      	b.n	80082b2 <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800826a:	4618      	mov	r0, r3
 800826c:	f7fc fe8a 	bl	8004f84 <get_fat>
 8008270:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					if (clst <= 1) res = FR_INT_ERR;
 8008274:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008278:	2b01      	cmp	r3, #1
 800827a:	d802      	bhi.n	8008282 <f_open+0x4a2>
 800827c:	2302      	movs	r3, #2
 800827e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008282:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828a:	d102      	bne.n	8008292 <f_open+0x4b2>
 800828c:	2301      	movs	r3, #1
 800828e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008292:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008294:	2200      	movs	r2, #0
 8008296:	469a      	mov	sl, r3
 8008298:	4693      	mov	fp, r2
 800829a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800829e:	ebb2 010a 	subs.w	r1, r2, sl
 80082a2:	6039      	str	r1, [r7, #0]
 80082a4:	eb63 030b 	sbc.w	r3, r3, fp
 80082a8:	607b      	str	r3, [r7, #4]
 80082aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ae:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 80082b2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d109      	bne.n	80082ce <f_open+0x4ee>
 80082ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80082bc:	2200      	movs	r2, #0
 80082be:	4698      	mov	r8, r3
 80082c0:	4691      	mov	r9, r2
 80082c2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80082c6:	4590      	cmp	r8, r2
 80082c8:	eb79 0303 	sbcs.w	r3, r9, r3
 80082cc:	d3ca      	bcc.n	8008264 <f_open+0x484>
				}
				fp->clust = clst;
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80082d4:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80082d6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d133      	bne.n	8008346 <f_open+0x566>
 80082de:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80082e2:	f3c2 0408 	ubfx	r4, r2, #0, #9
 80082e6:	2500      	movs	r5, #0
 80082e8:	ea54 0305 	orrs.w	r3, r4, r5
 80082ec:	d02b      	beq.n	8008346 <f_open+0x566>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7fc fe25 	bl	8004f44 <clust2sect>
 80082fa:	67b8      	str	r0, [r7, #120]	; 0x78
 80082fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d103      	bne.n	800830a <f_open+0x52a>
						res = FR_INT_ERR;
 8008302:	2302      	movs	r3, #2
 8008304:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008308:	e01d      	b.n	8008346 <f_open+0x566>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800830a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800830e:	f04f 0200 	mov.w	r2, #0
 8008312:	f04f 0300 	mov.w	r3, #0
 8008316:	0a42      	lsrs	r2, r0, #9
 8008318:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800831c:	0a4b      	lsrs	r3, r1, #9
 800831e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008320:	441a      	add	r2, r3
 8008322:	69fb      	ldr	r3, [r7, #28]
 8008324:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008328:	7858      	ldrb	r0, [r3, #1]
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008330:	69fb      	ldr	r3, [r7, #28]
 8008332:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008334:	2301      	movs	r3, #1
 8008336:	f7fc f8f7 	bl	8004528 <disk_read>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d002      	beq.n	8008346 <f_open+0x566>
 8008340:	2301      	movs	r3, #1
 8008342:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008346:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <f_open+0x574>
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	2200      	movs	r2, #0
 8008352:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008354:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8008358:	4618      	mov	r0, r3
 800835a:	3798      	adds	r7, #152	; 0x98
 800835c:	46bd      	mov	sp, r7
 800835e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008362 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008362:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008366:	b08c      	sub	sp, #48	; 0x30
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
 8008370:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	2200      	movs	r2, #0
 800837a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f107 0210 	add.w	r2, r7, #16
 8008382:	4611      	mov	r1, r2
 8008384:	4618      	mov	r0, r3
 8008386:	f7ff fcaf 	bl	8007ce8 <validate>
 800838a:	4603      	mov	r3, r0
 800838c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008390:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008394:	2b00      	cmp	r3, #0
 8008396:	d108      	bne.n	80083aa <f_write+0x48>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800839e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80083a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d002      	beq.n	80083b0 <f_write+0x4e>
 80083aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80083ae:	e187      	b.n	80086c0 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80083b6:	f003 0302 	and.w	r3, r3, #2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <f_write+0x60>
 80083be:	2307      	movs	r3, #7
 80083c0:	e17e      	b.n	80086c0 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b04      	cmp	r3, #4
 80083c8:	f000 816a 	beq.w	80086a0 <f_write+0x33e>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	18d1      	adds	r1, r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80083dc:	4613      	mov	r3, r2
 80083de:	4299      	cmp	r1, r3
 80083e0:	f080 815e 	bcs.w	80086a0 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80083ea:	4613      	mov	r3, r2
 80083ec:	43db      	mvns	r3, r3
 80083ee:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80083f0:	e156      	b.n	80086a0 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80083f8:	f3c2 0408 	ubfx	r4, r2, #0, #9
 80083fc:	2500      	movs	r5, #0
 80083fe:	ea54 0305 	orrs.w	r3, r4, r5
 8008402:	f040 80fb 	bne.w	80085fc <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800840c:	f04f 0200 	mov.w	r2, #0
 8008410:	f04f 0300 	mov.w	r3, #0
 8008414:	0a42      	lsrs	r2, r0, #9
 8008416:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800841a:	0a4b      	lsrs	r3, r1, #9
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	895b      	ldrh	r3, [r3, #10]
 8008420:	3b01      	subs	r3, #1
 8008422:	4013      	ands	r3, r2
 8008424:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d146      	bne.n	80084ba <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008432:	4313      	orrs	r3, r2
 8008434:	d10c      	bne.n	8008450 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843e:	2b00      	cmp	r3, #0
 8008440:	d11a      	bne.n	8008478 <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2100      	movs	r1, #0
 8008446:	4618      	mov	r0, r3
 8008448:	f7fd f9a0 	bl	800578c <create_chain>
 800844c:	62b8      	str	r0, [r7, #40]	; 0x28
 800844e:	e013      	b.n	8008478 <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008454:	2b00      	cmp	r3, #0
 8008456:	d007      	beq.n	8008468 <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f7fd fa95 	bl	800598e <clmt_clust>
 8008464:	62b8      	str	r0, [r7, #40]	; 0x28
 8008466:	e007      	b.n	8008478 <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846e:	4619      	mov	r1, r3
 8008470:	4610      	mov	r0, r2
 8008472:	f7fd f98b 	bl	800578c <create_chain>
 8008476:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 8115 	beq.w	80086aa <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008482:	2b01      	cmp	r3, #1
 8008484:	d105      	bne.n	8008492 <f_write+0x130>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2202      	movs	r2, #2
 800848a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800848e:	2302      	movs	r3, #2
 8008490:	e116      	b.n	80086c0 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008498:	d105      	bne.n	80084a6 <f_write+0x144>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80084a2:	2301      	movs	r3, #1
 80084a4:	e10c      	b.n	80086c0 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084aa:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d102      	bne.n	80084ba <f_write+0x158>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084b8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084c0:	b25b      	sxtb	r3, r3
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	da1b      	bge.n	80084fe <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	7858      	ldrb	r0, [r3, #1]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084d4:	2301      	movs	r3, #1
 80084d6:	f7fc f847 	bl	8004568 <disk_write>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d005      	beq.n	80084ec <f_write+0x18a>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80084e8:	2301      	movs	r3, #1
 80084ea:	e0e9      	b.n	80086c0 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084f6:	b2da      	uxtb	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008504:	4619      	mov	r1, r3
 8008506:	4610      	mov	r0, r2
 8008508:	f7fc fd1c 	bl	8004f44 <clust2sect>
 800850c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d105      	bne.n	8008520 <f_write+0x1be>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2202      	movs	r2, #2
 8008518:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800851c:	2302      	movs	r3, #2
 800851e:	e0cf      	b.n	80086c0 <f_write+0x35e>
			sect += csect;
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	4413      	add	r3, r2
 8008526:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	0a5b      	lsrs	r3, r3, #9
 800852c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800852e:	6a3b      	ldr	r3, [r7, #32]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d03f      	beq.n	80085b4 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008534:	69ba      	ldr	r2, [r7, #24]
 8008536:	6a3b      	ldr	r3, [r7, #32]
 8008538:	4413      	add	r3, r2
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	8952      	ldrh	r2, [r2, #10]
 800853e:	4293      	cmp	r3, r2
 8008540:	d905      	bls.n	800854e <f_write+0x1ec>
					cc = fs->csize - csect;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	895b      	ldrh	r3, [r3, #10]
 8008546:	461a      	mov	r2, r3
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	7858      	ldrb	r0, [r3, #1]
 8008552:	6a3b      	ldr	r3, [r7, #32]
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	69f9      	ldr	r1, [r7, #28]
 8008558:	f7fc f806 	bl	8004568 <disk_write>
 800855c:	4603      	mov	r3, r0
 800855e:	2b00      	cmp	r3, #0
 8008560:	d005      	beq.n	800856e <f_write+0x20c>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800856a:	2301      	movs	r3, #1
 800856c:	e0a8      	b.n	80086c0 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	6a3a      	ldr	r2, [r7, #32]
 8008578:	429a      	cmp	r2, r3
 800857a:	d917      	bls.n	80085ac <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	025b      	lsls	r3, r3, #9
 800858c:	69fa      	ldr	r2, [r7, #28]
 800858e:	4413      	add	r3, r2
 8008590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008594:	4619      	mov	r1, r3
 8008596:	f7fc fa0a 	bl	80049ae <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80085a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085a4:	b2da      	uxtb	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	025b      	lsls	r3, r3, #9
 80085b0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80085b2:	e04a      	b.n	800864a <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b8:	697a      	ldr	r2, [r7, #20]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d01b      	beq.n	80085f6 <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80085ca:	4290      	cmp	r0, r2
 80085cc:	eb71 0303 	sbcs.w	r3, r1, r3
 80085d0:	d211      	bcs.n	80085f6 <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	7858      	ldrb	r0, [r3, #1]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80085dc:	2301      	movs	r3, #1
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	f7fb ffa2 	bl	8004528 <disk_read>
 80085e4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d005      	beq.n	80085f6 <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80085f2:	2301      	movs	r3, #1
 80085f4:	e064      	b.n	80086c0 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	697a      	ldr	r2, [r7, #20]
 80085fa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008602:	4613      	mov	r3, r2
 8008604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008608:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800860c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800860e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	429a      	cmp	r2, r3
 8008614:	d901      	bls.n	800861a <f_write+0x2b8>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008626:	4613      	mov	r3, r2
 8008628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800862c:	440b      	add	r3, r1
 800862e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008630:	69f9      	ldr	r1, [r7, #28]
 8008632:	4618      	mov	r0, r3
 8008634:	f7fc f9bb 	bl	80049ae <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800863e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008642:	b2da      	uxtb	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800864a:	69fa      	ldr	r2, [r7, #28]
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864e:	4413      	add	r3, r2
 8008650:	61fb      	str	r3, [r7, #28]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800865a:	2000      	movs	r0, #0
 800865c:	4688      	mov	r8, r1
 800865e:	4681      	mov	r9, r0
 8008660:	eb12 0a08 	adds.w	sl, r2, r8
 8008664:	eb43 0b09 	adc.w	fp, r3, r9
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008674:	68f9      	ldr	r1, [r7, #12]
 8008676:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800867a:	4282      	cmp	r2, r0
 800867c:	eb73 0c01 	sbcs.w	ip, r3, r1
 8008680:	d201      	bcs.n	8008686 <f_write+0x324>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	68f9      	ldr	r1, [r7, #12]
 8008688:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	441a      	add	r2, r3
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	601a      	str	r2, [r3, #0]
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f47f aea5 	bne.w	80083f2 <f_write+0x90>
 80086a8:	e000      	b.n	80086ac <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80086aa:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 80086be:	2300      	movs	r3, #0
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3730      	adds	r7, #48	; 0x30
 80086c4:	46bd      	mov	sp, r7
 80086c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080086ca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b09a      	sub	sp, #104	; 0x68
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80086d8:	4611      	mov	r1, r2
 80086da:	4618      	mov	r0, r3
 80086dc:	f7ff fb04 	bl	8007ce8 <validate>
 80086e0:	4603      	mov	r3, r0
 80086e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80086e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f040 8105 	bne.w	80088fa <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80086f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f000 80fd 	beq.w	80088fa <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008706:	b25b      	sxtb	r3, r3
 8008708:	2b00      	cmp	r3, #0
 800870a:	da17      	bge.n	800873c <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800870c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800870e:	7858      	ldrb	r0, [r3, #1]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800871a:	2301      	movs	r3, #1
 800871c:	f7fb ff24 	bl	8004568 <disk_write>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <f_sync+0x60>
 8008726:	2301      	movs	r3, #1
 8008728:	e0e9      	b.n	80088fe <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008734:	b2da      	uxtb	r2, r3
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800873c:	f7fb fdb6 	bl	80042ac <get_fattime>
 8008740:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8008742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	2b04      	cmp	r3, #4
 8008748:	f040 808c 	bne.w	8008864 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4618      	mov	r0, r3
 8008750:	f7fc ff08 	bl	8005564 <fill_first_frag>
 8008754:	4603      	mov	r3, r0
 8008756:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 800875a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10a      	bne.n	8008778 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008768:	f04f 32ff 	mov.w	r2, #4294967295
 800876c:	4619      	mov	r1, r3
 800876e:	f7fc ff28 	bl	80055c2 <fill_last_frag>
 8008772:	4603      	mov	r3, r0
 8008774:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 8008778:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800877c:	2b00      	cmp	r3, #0
 800877e:	f040 80bc 	bne.w	80088fa <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	f107 0308 	add.w	r3, r7, #8
 8008788:	4611      	mov	r1, r2
 800878a:	4618      	mov	r0, r3
 800878c:	f7fd fecc 	bl	8006528 <load_obj_dir>
 8008790:	4603      	mov	r3, r0
 8008792:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 8008796:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800879a:	2b00      	cmp	r3, #0
 800879c:	f040 80ad 	bne.w	80088fa <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 80087a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	3304      	adds	r3, #4
 80087a6:	781a      	ldrb	r2, [r3, #0]
 80087a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087aa:	691b      	ldr	r3, [r3, #16]
 80087ac:	3304      	adds	r3, #4
 80087ae:	f042 0220 	orr.w	r2, r2, #32
 80087b2:	b2d2      	uxtb	r2, r2
 80087b4:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	79da      	ldrb	r2, [r3, #7]
 80087ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	3321      	adds	r3, #33	; 0x21
 80087c0:	f042 0201 	orr.w	r2, r2, #1
 80087c4:	b2d2      	uxtb	r2, r2
 80087c6:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 80087c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	4619      	mov	r1, r3
 80087d6:	4610      	mov	r0, r2
 80087d8:	f7fc f835 	bl	8004846 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 80087dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80087ea:	4608      	mov	r0, r1
 80087ec:	f7fc f857 	bl	800489e <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 80087f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80087fe:	4608      	mov	r0, r1
 8008800:	f7fc f84d 	bl	800489e <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8008804:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	330c      	adds	r3, #12
 800880a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800880c:	4618      	mov	r0, r3
 800880e:	f7fc f81a 	bl	8004846 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8008812:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	3315      	adds	r3, #21
 8008818:	2200      	movs	r2, #0
 800881a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800881c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	3310      	adds	r3, #16
 8008822:	2100      	movs	r1, #0
 8008824:	4618      	mov	r0, r3
 8008826:	f7fc f80e 	bl	8004846 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800882a:	f107 0308 	add.w	r3, r7, #8
 800882e:	4618      	mov	r0, r3
 8008830:	f7fd feb0 	bl	8006594 <store_xdir>
 8008834:	4603      	mov	r3, r0
 8008836:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800883a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800883e:	2b00      	cmp	r3, #0
 8008840:	d15b      	bne.n	80088fa <f_sync+0x230>
							res = sync_fs(fs);
 8008842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008844:	4618      	mov	r0, r3
 8008846:	f7fc fb0f 	bl	8004e68 <sync_fs>
 800884a:	4603      	mov	r3, r0
 800884c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008856:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800885a:	b2da      	uxtb	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8008862:	e04a      	b.n	80088fa <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008864:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800886a:	4619      	mov	r1, r3
 800886c:	4610      	mov	r0, r2
 800886e:	f7fc facd 	bl	8004e0c <move_window>
 8008872:	4603      	mov	r3, r0
 8008874:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8008878:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800887c:	2b00      	cmp	r3, #0
 800887e:	d13c      	bne.n	80088fa <f_sync+0x230>
					dir = fp->dir_ptr;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008884:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008888:	330b      	adds	r3, #11
 800888a:	781a      	ldrb	r2, [r3, #0]
 800888c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800888e:	330b      	adds	r3, #11
 8008890:	f042 0220 	orr.w	r2, r2, #32
 8008894:	b2d2      	uxtb	r2, r2
 8008896:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6818      	ldr	r0, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	461a      	mov	r2, r3
 80088a2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80088a4:	f7fd fa8d 	bl	8005dc2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80088a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088aa:	f103 001c 	add.w	r0, r3, #28
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80088b4:	4613      	mov	r3, r2
 80088b6:	4619      	mov	r1, r3
 80088b8:	f7fb ffc5 	bl	8004846 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80088bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088be:	3316      	adds	r3, #22
 80088c0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7fb ffbf 	bl	8004846 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80088c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088ca:	3312      	adds	r3, #18
 80088cc:	2100      	movs	r1, #0
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fb ff9e 	bl	8004810 <st_word>
					fs->wflag = 1;
 80088d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088d6:	2201      	movs	r2, #1
 80088d8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80088da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088dc:	4618      	mov	r0, r3
 80088de:	f7fc fac3 	bl	8004e68 <sync_fs>
 80088e2:	4603      	mov	r3, r0
 80088e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80088ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088f2:	b2da      	uxtb	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80088fa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3768      	adds	r7, #104	; 0x68
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b084      	sub	sp, #16
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7ff fedb 	bl	80086ca <f_sync>
 8008914:	4603      	mov	r3, r0
 8008916:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008918:	7bfb      	ldrb	r3, [r7, #15]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d118      	bne.n	8008950 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f107 0208 	add.w	r2, r7, #8
 8008924:	4611      	mov	r1, r2
 8008926:	4618      	mov	r0, r3
 8008928:	f7ff f9de 	bl	8007ce8 <validate>
 800892c:	4603      	mov	r3, r0
 800892e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008930:	7bfb      	ldrb	r3, [r7, #15]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10c      	bne.n	8008950 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893a:	4618      	mov	r0, r3
 800893c:	f7fc f9c2 	bl	8004cc4 <dec_lock>
 8008940:	4603      	mov	r3, r0
 8008942:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008944:	7bfb      	ldrb	r3, [r7, #15]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d102      	bne.n	8008950 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008950:	7bfb      	ldrb	r3, [r7, #15]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3710      	adds	r7, #16
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}

0800895a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800895a:	b580      	push	{r7, lr}
 800895c:	b086      	sub	sp, #24
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d101      	bne.n	800896e <f_opendir+0x14>
 800896a:	2309      	movs	r3, #9
 800896c:	e09a      	b.n	8008aa4 <f_opendir+0x14a>

	/* Get logical drive */
	obj = &dp->obj;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8008972:	f107 010c 	add.w	r1, r7, #12
 8008976:	463b      	mov	r3, r7
 8008978:	2200      	movs	r2, #0
 800897a:	4618      	mov	r0, r3
 800897c:	f7fe fe58 	bl	8007630 <find_volume>
 8008980:	4603      	mov	r3, r0
 8008982:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008984:	7dfb      	ldrb	r3, [r7, #23]
 8008986:	2b00      	cmp	r3, #0
 8008988:	f040 8085 	bne.w	8008a96 <f_opendir+0x13c>
		obj->fs = fs;
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	4619      	mov	r1, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7fe fcf8 	bl	800738c <follow_path>
 800899c:	4603      	mov	r3, r0
 800899e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80089a0:	7dfb      	ldrb	r3, [r7, #23]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d172      	bne.n	8008a8c <f_opendir+0x132>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80089ac:	b25b      	sxtb	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	db47      	blt.n	8008a42 <f_opendir+0xe8>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	799b      	ldrb	r3, [r3, #6]
 80089b6:	f003 0310 	and.w	r3, r3, #16
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d03f      	beq.n	8008a3e <f_opendir+0xe4>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	2b04      	cmp	r3, #4
 80089c4:	d130      	bne.n	8008a28 <f_opendir+0xce>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	689a      	ldr	r2, [r3, #8]
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80089d4:	4613      	mov	r3, r2
 80089d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	79d2      	ldrb	r2, [r2, #7]
 80089de:	431a      	orrs	r2, r3
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	625a      	str	r2, [r3, #36]	; 0x24
						obj->c_ofs = dp->blk_ofs;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	629a      	str	r2, [r3, #40]	; 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	3334      	adds	r3, #52	; 0x34
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fb fe0e 	bl	8004614 <ld_dword>
 80089f8:	4602      	mov	r2, r0
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	3338      	adds	r3, #56	; 0x38
 8008a04:	4618      	mov	r0, r3
 8008a06:	f7fb fe28 	bl	800465a <ld_qword>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	6939      	ldr	r1, [r7, #16]
 8008a10:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	691b      	ldr	r3, [r3, #16]
 8008a18:	3321      	adds	r3, #33	; 0x21
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	f003 0302 	and.w	r3, r3, #2
 8008a20:	b2da      	uxtb	r2, r3
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	71da      	strb	r2, [r3, #7]
 8008a26:	e00c      	b.n	8008a42 <f_opendir+0xe8>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a2e:	4619      	mov	r1, r3
 8008a30:	4610      	mov	r0, r2
 8008a32:	f7fd f9a7 	bl	8005d84 <ld_clust>
 8008a36:	4602      	mov	r2, r0
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	609a      	str	r2, [r3, #8]
 8008a3c:	e001      	b.n	8008a42 <f_opendir+0xe8>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8008a3e:	2305      	movs	r3, #5
 8008a40:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8008a42:	7dfb      	ldrb	r3, [r7, #23]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d121      	bne.n	8008a8c <f_opendir+0x132>
				obj->id = fs->id;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	88da      	ldrh	r2, [r3, #6]
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008a50:	2100      	movs	r1, #0
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7fc ffdf 	bl	8005a16 <dir_sdi>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008a5c:	7dfb      	ldrb	r3, [r7, #23]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d114      	bne.n	8008a8c <f_opendir+0x132>
					if (obj->sclust) {
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00d      	beq.n	8008a86 <f_opendir+0x12c>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7fc f89b 	bl	8004ba8 <inc_lock>
 8008a72:	4602      	mov	r2, r0
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	62da      	str	r2, [r3, #44]	; 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d105      	bne.n	8008a8c <f_opendir+0x132>
 8008a80:	2312      	movs	r3, #18
 8008a82:	75fb      	strb	r3, [r7, #23]
 8008a84:	e002      	b.n	8008a8c <f_opendir+0x132>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	62da      	str	r2, [r3, #44]	; 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008a8c:	7dfb      	ldrb	r3, [r7, #23]
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	d101      	bne.n	8008a96 <f_opendir+0x13c>
 8008a92:	2305      	movs	r3, #5
 8008a94:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008a96:	7dfb      	ldrb	r3, [r7, #23]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d002      	beq.n	8008aa2 <f_opendir+0x148>
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3718      	adds	r7, #24
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f107 0208 	add.w	r2, r7, #8
 8008aba:	4611      	mov	r1, r2
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7ff f913 	bl	8007ce8 <validate>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d110      	bne.n	8008aee <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d006      	beq.n	8008ae2 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fc f8f3 	bl	8004cc4 <dec_lock>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8008ae2:	7bfb      	ldrb	r3, [r7, #15]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d102      	bne.n	8008aee <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f107 0208 	add.w	r2, r7, #8
 8008b08:	4611      	mov	r1, r2
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f7ff f8ec 	bl	8007ce8 <validate>
 8008b10:	4603      	mov	r3, r0
 8008b12:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008b14:	7bfb      	ldrb	r3, [r7, #15]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d126      	bne.n	8008b68 <f_readdir+0x70>
		if (!fno) {
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d106      	bne.n	8008b2e <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008b20:	2100      	movs	r1, #0
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7fc ff77 	bl	8005a16 <dir_sdi>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	73fb      	strb	r3, [r7, #15]
 8008b2c:	e01c      	b.n	8008b68 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8008b2e:	2100      	movs	r1, #0
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7fd fdf1 	bl	8006718 <dir_read>
 8008b36:	4603      	mov	r3, r0
 8008b38:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
 8008b3c:	2b04      	cmp	r3, #4
 8008b3e:	d101      	bne.n	8008b44 <f_readdir+0x4c>
 8008b40:	2300      	movs	r3, #0
 8008b42:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d10e      	bne.n	8008b68 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7fe f979 	bl	8006e44 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008b52:	2100      	movs	r1, #0
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f7fc ffe4 	bl	8005b22 <dir_next>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8008b5e:	7bfb      	ldrb	r3, [r7, #15]
 8008b60:	2b04      	cmp	r3, #4
 8008b62:	d101      	bne.n	8008b68 <f_readdir+0x70>
 8008b64:	2300      	movs	r3, #0
 8008b66:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
	...

08008b74 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b087      	sub	sp, #28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008b82:	2301      	movs	r3, #1
 8008b84:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008b86:	2300      	movs	r3, #0
 8008b88:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008b8a:	4b1f      	ldr	r3, [pc, #124]	; (8008c08 <FATFS_LinkDriverEx+0x94>)
 8008b8c:	7a5b      	ldrb	r3, [r3, #9]
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d131      	bne.n	8008bf8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008b94:	4b1c      	ldr	r3, [pc, #112]	; (8008c08 <FATFS_LinkDriverEx+0x94>)
 8008b96:	7a5b      	ldrb	r3, [r3, #9]
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	4b1a      	ldr	r3, [pc, #104]	; (8008c08 <FATFS_LinkDriverEx+0x94>)
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008ba2:	4b19      	ldr	r3, [pc, #100]	; (8008c08 <FATFS_LinkDriverEx+0x94>)
 8008ba4:	7a5b      	ldrb	r3, [r3, #9]
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	4a17      	ldr	r2, [pc, #92]	; (8008c08 <FATFS_LinkDriverEx+0x94>)
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	4413      	add	r3, r2
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008bb2:	4b15      	ldr	r3, [pc, #84]	; (8008c08 <FATFS_LinkDriverEx+0x94>)
 8008bb4:	7a5b      	ldrb	r3, [r3, #9]
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	461a      	mov	r2, r3
 8008bba:	4b13      	ldr	r3, [pc, #76]	; (8008c08 <FATFS_LinkDriverEx+0x94>)
 8008bbc:	4413      	add	r3, r2
 8008bbe:	79fa      	ldrb	r2, [r7, #7]
 8008bc0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008bc2:	4b11      	ldr	r3, [pc, #68]	; (8008c08 <FATFS_LinkDriverEx+0x94>)
 8008bc4:	7a5b      	ldrb	r3, [r3, #9]
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	b2d1      	uxtb	r1, r2
 8008bcc:	4a0e      	ldr	r2, [pc, #56]	; (8008c08 <FATFS_LinkDriverEx+0x94>)
 8008bce:	7251      	strb	r1, [r2, #9]
 8008bd0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008bd2:	7dbb      	ldrb	r3, [r7, #22]
 8008bd4:	3330      	adds	r3, #48	; 0x30
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	3301      	adds	r3, #1
 8008be0:	223a      	movs	r2, #58	; 0x3a
 8008be2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	3302      	adds	r3, #2
 8008be8:	222f      	movs	r2, #47	; 0x2f
 8008bea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	3303      	adds	r3, #3
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	371c      	adds	r7, #28
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	20000a4c 	.word	0x20000a4c

08008c0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008c16:	2200      	movs	r2, #0
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f7ff ffaa 	bl	8008b74 <FATFS_LinkDriverEx>
 8008c20:	4603      	mov	r3, r0
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
	...

08008c2c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	4603      	mov	r3, r0
 8008c34:	6039      	str	r1, [r7, #0]
 8008c36:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008c38:	88fb      	ldrh	r3, [r7, #6]
 8008c3a:	2b7f      	cmp	r3, #127	; 0x7f
 8008c3c:	d802      	bhi.n	8008c44 <ff_convert+0x18>
		c = chr;
 8008c3e:	88fb      	ldrh	r3, [r7, #6]
 8008c40:	81fb      	strh	r3, [r7, #14]
 8008c42:	e025      	b.n	8008c90 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00b      	beq.n	8008c62 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008c4a:	88fb      	ldrh	r3, [r7, #6]
 8008c4c:	2bff      	cmp	r3, #255	; 0xff
 8008c4e:	d805      	bhi.n	8008c5c <ff_convert+0x30>
 8008c50:	88fb      	ldrh	r3, [r7, #6]
 8008c52:	3b80      	subs	r3, #128	; 0x80
 8008c54:	4a12      	ldr	r2, [pc, #72]	; (8008ca0 <ff_convert+0x74>)
 8008c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c5a:	e000      	b.n	8008c5e <ff_convert+0x32>
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	81fb      	strh	r3, [r7, #14]
 8008c60:	e016      	b.n	8008c90 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008c62:	2300      	movs	r3, #0
 8008c64:	81fb      	strh	r3, [r7, #14]
 8008c66:	e009      	b.n	8008c7c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008c68:	89fb      	ldrh	r3, [r7, #14]
 8008c6a:	4a0d      	ldr	r2, [pc, #52]	; (8008ca0 <ff_convert+0x74>)
 8008c6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c70:	88fa      	ldrh	r2, [r7, #6]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d006      	beq.n	8008c84 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008c76:	89fb      	ldrh	r3, [r7, #14]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	81fb      	strh	r3, [r7, #14]
 8008c7c:	89fb      	ldrh	r3, [r7, #14]
 8008c7e:	2b7f      	cmp	r3, #127	; 0x7f
 8008c80:	d9f2      	bls.n	8008c68 <ff_convert+0x3c>
 8008c82:	e000      	b.n	8008c86 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008c84:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008c86:	89fb      	ldrh	r3, [r7, #14]
 8008c88:	3380      	adds	r3, #128	; 0x80
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008c90:	89fb      	ldrh	r3, [r7, #14]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	08008f90 	.word	0x08008f90

08008ca4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b087      	sub	sp, #28
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	4603      	mov	r3, r0
 8008cac:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008cae:	88fb      	ldrh	r3, [r7, #6]
 8008cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cb4:	d201      	bcs.n	8008cba <ff_wtoupper+0x16>
 8008cb6:	4b3e      	ldr	r3, [pc, #248]	; (8008db0 <ff_wtoupper+0x10c>)
 8008cb8:	e000      	b.n	8008cbc <ff_wtoupper+0x18>
 8008cba:	4b3e      	ldr	r3, [pc, #248]	; (8008db4 <ff_wtoupper+0x110>)
 8008cbc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	1c9a      	adds	r2, r3, #2
 8008cc2:	617a      	str	r2, [r7, #20]
 8008cc4:	881b      	ldrh	r3, [r3, #0]
 8008cc6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008cc8:	8a7b      	ldrh	r3, [r7, #18]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d068      	beq.n	8008da0 <ff_wtoupper+0xfc>
 8008cce:	88fa      	ldrh	r2, [r7, #6]
 8008cd0:	8a7b      	ldrh	r3, [r7, #18]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d364      	bcc.n	8008da0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	1c9a      	adds	r2, r3, #2
 8008cda:	617a      	str	r2, [r7, #20]
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	823b      	strh	r3, [r7, #16]
 8008ce0:	8a3b      	ldrh	r3, [r7, #16]
 8008ce2:	0a1b      	lsrs	r3, r3, #8
 8008ce4:	81fb      	strh	r3, [r7, #14]
 8008ce6:	8a3b      	ldrh	r3, [r7, #16]
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008cec:	88fa      	ldrh	r2, [r7, #6]
 8008cee:	8a79      	ldrh	r1, [r7, #18]
 8008cf0:	8a3b      	ldrh	r3, [r7, #16]
 8008cf2:	440b      	add	r3, r1
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	da49      	bge.n	8008d8c <ff_wtoupper+0xe8>
			switch (cmd) {
 8008cf8:	89fb      	ldrh	r3, [r7, #14]
 8008cfa:	2b08      	cmp	r3, #8
 8008cfc:	d84f      	bhi.n	8008d9e <ff_wtoupper+0xfa>
 8008cfe:	a201      	add	r2, pc, #4	; (adr r2, 8008d04 <ff_wtoupper+0x60>)
 8008d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d04:	08008d29 	.word	0x08008d29
 8008d08:	08008d3b 	.word	0x08008d3b
 8008d0c:	08008d51 	.word	0x08008d51
 8008d10:	08008d59 	.word	0x08008d59
 8008d14:	08008d61 	.word	0x08008d61
 8008d18:	08008d69 	.word	0x08008d69
 8008d1c:	08008d71 	.word	0x08008d71
 8008d20:	08008d79 	.word	0x08008d79
 8008d24:	08008d81 	.word	0x08008d81
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008d28:	88fa      	ldrh	r2, [r7, #6]
 8008d2a:	8a7b      	ldrh	r3, [r7, #18]
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	005b      	lsls	r3, r3, #1
 8008d30:	697a      	ldr	r2, [r7, #20]
 8008d32:	4413      	add	r3, r2
 8008d34:	881b      	ldrh	r3, [r3, #0]
 8008d36:	80fb      	strh	r3, [r7, #6]
 8008d38:	e027      	b.n	8008d8a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008d3a:	88fa      	ldrh	r2, [r7, #6]
 8008d3c:	8a7b      	ldrh	r3, [r7, #18]
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	88fa      	ldrh	r2, [r7, #6]
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	80fb      	strh	r3, [r7, #6]
 8008d4e:	e01c      	b.n	8008d8a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008d50:	88fb      	ldrh	r3, [r7, #6]
 8008d52:	3b10      	subs	r3, #16
 8008d54:	80fb      	strh	r3, [r7, #6]
 8008d56:	e018      	b.n	8008d8a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008d58:	88fb      	ldrh	r3, [r7, #6]
 8008d5a:	3b20      	subs	r3, #32
 8008d5c:	80fb      	strh	r3, [r7, #6]
 8008d5e:	e014      	b.n	8008d8a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008d60:	88fb      	ldrh	r3, [r7, #6]
 8008d62:	3b30      	subs	r3, #48	; 0x30
 8008d64:	80fb      	strh	r3, [r7, #6]
 8008d66:	e010      	b.n	8008d8a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008d68:	88fb      	ldrh	r3, [r7, #6]
 8008d6a:	3b1a      	subs	r3, #26
 8008d6c:	80fb      	strh	r3, [r7, #6]
 8008d6e:	e00c      	b.n	8008d8a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008d70:	88fb      	ldrh	r3, [r7, #6]
 8008d72:	3308      	adds	r3, #8
 8008d74:	80fb      	strh	r3, [r7, #6]
 8008d76:	e008      	b.n	8008d8a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008d78:	88fb      	ldrh	r3, [r7, #6]
 8008d7a:	3b50      	subs	r3, #80	; 0x50
 8008d7c:	80fb      	strh	r3, [r7, #6]
 8008d7e:	e004      	b.n	8008d8a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008d80:	88fb      	ldrh	r3, [r7, #6]
 8008d82:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008d86:	80fb      	strh	r3, [r7, #6]
 8008d88:	bf00      	nop
			}
			break;
 8008d8a:	e008      	b.n	8008d9e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008d8c:	89fb      	ldrh	r3, [r7, #14]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d195      	bne.n	8008cbe <ff_wtoupper+0x1a>
 8008d92:	8a3b      	ldrh	r3, [r7, #16]
 8008d94:	005b      	lsls	r3, r3, #1
 8008d96:	697a      	ldr	r2, [r7, #20]
 8008d98:	4413      	add	r3, r2
 8008d9a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008d9c:	e78f      	b.n	8008cbe <ff_wtoupper+0x1a>
			break;
 8008d9e:	bf00      	nop
	}

	return chr;
 8008da0:	88fb      	ldrh	r3, [r7, #6]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	371c      	adds	r7, #28
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	08009090 	.word	0x08009090
 8008db4:	08009284 	.word	0x08009284

08008db8 <__libc_init_array>:
 8008db8:	b570      	push	{r4, r5, r6, lr}
 8008dba:	4d0d      	ldr	r5, [pc, #52]	; (8008df0 <__libc_init_array+0x38>)
 8008dbc:	4c0d      	ldr	r4, [pc, #52]	; (8008df4 <__libc_init_array+0x3c>)
 8008dbe:	1b64      	subs	r4, r4, r5
 8008dc0:	10a4      	asrs	r4, r4, #2
 8008dc2:	2600      	movs	r6, #0
 8008dc4:	42a6      	cmp	r6, r4
 8008dc6:	d109      	bne.n	8008ddc <__libc_init_array+0x24>
 8008dc8:	4d0b      	ldr	r5, [pc, #44]	; (8008df8 <__libc_init_array+0x40>)
 8008dca:	4c0c      	ldr	r4, [pc, #48]	; (8008dfc <__libc_init_array+0x44>)
 8008dcc:	f000 f820 	bl	8008e10 <_init>
 8008dd0:	1b64      	subs	r4, r4, r5
 8008dd2:	10a4      	asrs	r4, r4, #2
 8008dd4:	2600      	movs	r6, #0
 8008dd6:	42a6      	cmp	r6, r4
 8008dd8:	d105      	bne.n	8008de6 <__libc_init_array+0x2e>
 8008dda:	bd70      	pop	{r4, r5, r6, pc}
 8008ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008de0:	4798      	blx	r3
 8008de2:	3601      	adds	r6, #1
 8008de4:	e7ee      	b.n	8008dc4 <__libc_init_array+0xc>
 8008de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dea:	4798      	blx	r3
 8008dec:	3601      	adds	r6, #1
 8008dee:	e7f2      	b.n	8008dd6 <__libc_init_array+0x1e>
 8008df0:	08009348 	.word	0x08009348
 8008df4:	08009348 	.word	0x08009348
 8008df8:	08009348 	.word	0x08009348
 8008dfc:	0800934c 	.word	0x0800934c

08008e00 <memset>:
 8008e00:	4402      	add	r2, r0
 8008e02:	4603      	mov	r3, r0
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d100      	bne.n	8008e0a <memset+0xa>
 8008e08:	4770      	bx	lr
 8008e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8008e0e:	e7f9      	b.n	8008e04 <memset+0x4>

08008e10 <_init>:
 8008e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e12:	bf00      	nop
 8008e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e16:	bc08      	pop	{r3}
 8008e18:	469e      	mov	lr, r3
 8008e1a:	4770      	bx	lr

08008e1c <_fini>:
 8008e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1e:	bf00      	nop
 8008e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e22:	bc08      	pop	{r3}
 8008e24:	469e      	mov	lr, r3
 8008e26:	4770      	bx	lr
