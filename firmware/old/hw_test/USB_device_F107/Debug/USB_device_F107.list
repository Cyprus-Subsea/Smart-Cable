
USB_device_F107.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066d4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080068b8  080068b8  000168b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006938  08006938  0002017c  2**0
                  CONTENTS
  4 .ARM          00000008  08006938  08006938  00016938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006940  08006940  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006940  08006940  00016940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006944  08006944  00016944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  08006948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001320  2000017c  08006ac4  0002017c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000149c  08006ac4  0002149c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f81  00000000  00000000  000201a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ee2  00000000  00000000  00033126  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d90  00000000  00000000  00036008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c28  00000000  00000000  00036d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021c65  00000000  00000000  000379c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e4a6  00000000  00000000  00059625  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b5b68  00000000  00000000  00067acb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011d633  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003678  00000000  00000000  0011d6b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000017c 	.word	0x2000017c
 8000200:	00000000 	.word	0x00000000
 8000204:	080068a0 	.word	0x080068a0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000180 	.word	0x20000180
 8000220:	080068a0 	.word	0x080068a0

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b974 	b.w	8000524 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	4604      	mov	r4, r0
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d14b      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000262:	428a      	cmp	r2, r1
 8000264:	4615      	mov	r5, r2
 8000266:	d967      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0720 	rsb	r7, r2, #32
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	fa20 f707 	lsr.w	r7, r0, r7
 800027a:	4095      	lsls	r5, r2
 800027c:	ea47 0c03 	orr.w	ip, r7, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000286:	fbbc f7fe 	udiv	r7, ip, lr
 800028a:	fa1f f885 	uxth.w	r8, r5
 800028e:	fb0e c317 	mls	r3, lr, r7, ip
 8000292:	fb07 f908 	mul.w	r9, r7, r8
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029c:	4599      	cmp	r9, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f107 31ff 	add.w	r1, r7, #4294967295
 80002a6:	f080 811c 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002aa:	4599      	cmp	r9, r3
 80002ac:	f240 8119 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	3f02      	subs	r7, #2
 80002b2:	442b      	add	r3, r5
 80002b4:	eba3 0309 	sub.w	r3, r3, r9
 80002b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c0:	fb00 f108 	mul.w	r1, r0, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	42a1      	cmp	r1, r4
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 8107 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002d8:	42a1      	cmp	r1, r4
 80002da:	f240 8104 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002de:	3802      	subs	r0, #2
 80002e0:	442c      	add	r4, r5
 80002e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e6:	2700      	movs	r7, #0
 80002e8:	1a64      	subs	r4, r4, r1
 80002ea:	b11e      	cbz	r6, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	2300      	movs	r3, #0
 80002ee:	40d4      	lsrs	r4, r2
 80002f0:	e9c6 4300 	strd	r4, r3, [r6]
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xbe>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ec 	beq.w	80004dc <__udivmoddi4+0x288>
 8000304:	2700      	movs	r7, #0
 8000306:	e9c6 0100 	strd	r0, r1, [r6]
 800030a:	4638      	mov	r0, r7
 800030c:	4639      	mov	r1, r7
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f783 	clz	r7, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d148      	bne.n	80003ac <__udivmoddi4+0x158>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd0>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fb 	bhi.w	800051a <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469c      	mov	ip, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa0>
 8000332:	e9c6 4c00 	strd	r4, ip, [r6]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xe8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 808f 	bne.w	8000464 <__udivmoddi4+0x210>
 8000346:	2701      	movs	r7, #1
 8000348:	1b49      	subs	r1, r1, r5
 800034a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800034e:	fa1f f985 	uxth.w	r9, r5
 8000352:	fbb1 fef8 	udiv	lr, r1, r8
 8000356:	fb08 111e 	mls	r1, r8, lr, r1
 800035a:	fb09 f00e 	mul.w	r0, r9, lr
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x126>
 800036a:	18eb      	adds	r3, r5, r3
 800036c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4298      	cmp	r0, r3
 8000374:	f200 80cd 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000378:	468e      	mov	lr, r1
 800037a:	1a1b      	subs	r3, r3, r0
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	fb09 f900 	mul.w	r9, r9, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038e:	45a1      	cmp	r9, r4
 8000390:	d907      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000392:	192c      	adds	r4, r5, r4
 8000394:	f100 33ff 	add.w	r3, r0, #4294967295
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f200 80b6 	bhi.w	800050c <__udivmoddi4+0x2b8>
 80003a0:	4618      	mov	r0, r3
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003aa:	e79e      	b.n	80002ea <__udivmoddi4+0x96>
 80003ac:	f1c7 0520 	rsb	r5, r7, #32
 80003b0:	40bb      	lsls	r3, r7
 80003b2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa21 f405 	lsr.w	r4, r1, r5
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003c6:	fa1f f88c 	uxth.w	r8, ip
 80003ca:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ce:	fa20 f305 	lsr.w	r3, r0, r5
 80003d2:	40b9      	lsls	r1, r7
 80003d4:	fb09 fa08 	mul.w	sl, r9, r8
 80003d8:	4319      	orrs	r1, r3
 80003da:	0c0b      	lsrs	r3, r1, #16
 80003dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	fa02 f207 	lsl.w	r2, r2, r7
 80003e6:	fa00 f307 	lsl.w	r3, r0, r7
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	4464      	add	r4, ip
 8000404:	eba4 040a 	sub.w	r4, r4, sl
 8000408:	fbb4 f0fe 	udiv	r0, r4, lr
 800040c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000410:	fb00 fa08 	mul.w	sl, r0, r8
 8000414:	b289      	uxth	r1, r1
 8000416:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295
 8000426:	d26b      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000428:	45a2      	cmp	sl, r4
 800042a:	d969      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042c:	3802      	subs	r0, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000434:	fba0 8902 	umull	r8, r9, r0, r2
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	454c      	cmp	r4, r9
 800043e:	4641      	mov	r1, r8
 8000440:	46ce      	mov	lr, r9
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d069      	beq.n	800051e <__udivmoddi4+0x2ca>
 800044a:	1a5a      	subs	r2, r3, r1
 800044c:	eb64 040e 	sbc.w	r4, r4, lr
 8000450:	fa04 f505 	lsl.w	r5, r4, r5
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	40fc      	lsrs	r4, r7
 800045a:	431d      	orrs	r5, r3
 800045c:	e9c6 5400 	strd	r5, r4, [r6]
 8000460:	2700      	movs	r7, #0
 8000462:	e747      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000464:	4095      	lsls	r5, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa21 f003 	lsr.w	r0, r1, r3
 800046e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000472:	fbb0 f7f8 	udiv	r7, r0, r8
 8000476:	fa1f f985 	uxth.w	r9, r5
 800047a:	fb08 0017 	mls	r0, r8, r7, r0
 800047e:	fa24 f303 	lsr.w	r3, r4, r3
 8000482:	4091      	lsls	r1, r2
 8000484:	fb07 fc09 	mul.w	ip, r7, r9
 8000488:	430b      	orrs	r3, r1
 800048a:	0c19      	lsrs	r1, r3, #16
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	458c      	cmp	ip, r1
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x254>
 8000498:	1869      	adds	r1, r5, r1
 800049a:	f107 30ff 	add.w	r0, r7, #4294967295
 800049e:	d231      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a0:	458c      	cmp	ip, r1
 80004a2:	d92f      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	3f02      	subs	r7, #2
 80004a6:	4429      	add	r1, r5
 80004a8:	eba1 010c 	sub.w	r1, r1, ip
 80004ac:	fbb1 f0f8 	udiv	r0, r1, r8
 80004b0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004b4:	fb00 fe09 	mul.w	lr, r0, r9
 80004b8:	b299      	uxth	r1, r3
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	458e      	cmp	lr, r1
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x27e>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	d218      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d916      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	eba1 010e 	sub.w	r1, r1, lr
 80004d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4637      	mov	r7, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004e2:	460f      	mov	r7, r1
 80004e4:	e6e6      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6fb      	b.n	80002e2 <__udivmoddi4+0x8e>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb8 0102 	subs.w	r1, r8, r2
 80004f2:	eb69 020c 	sbc.w	r2, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	4696      	mov	lr, r2
 80004fa:	e7a4      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e7e8      	b.n	80004d2 <__udivmoddi4+0x27e>
 8000500:	4608      	mov	r0, r1
 8000502:	e795      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000504:	4607      	mov	r7, r0
 8000506:	e7cf      	b.n	80004a8 <__udivmoddi4+0x254>
 8000508:	4681      	mov	r9, r0
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3802      	subs	r0, #2
 800050e:	442c      	add	r4, r5
 8000510:	e747      	b.n	80003a2 <__udivmoddi4+0x14e>
 8000512:	f1ae 0e02 	sub.w	lr, lr, #2
 8000516:	442b      	add	r3, r5
 8000518:	e72f      	b.n	800037a <__udivmoddi4+0x126>
 800051a:	4638      	mov	r0, r7
 800051c:	e707      	b.n	800032e <__udivmoddi4+0xda>
 800051e:	4637      	mov	r7, r6
 8000520:	e6e8      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f000 f9b6 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f808 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000534:	f000 f89a 	bl	800066c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000538:	f000 f86e 	bl	8000618 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 800053c:	f005 fca8 	bl	8005e90 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000540:	e7fe      	b.n	8000540 <main+0x18>
	...

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b09c      	sub	sp, #112	; 0x70
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800054e:	2238      	movs	r2, #56	; 0x38
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f006 f99c 	bl	8006890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2220      	movs	r2, #32
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f006 f98e 	bl	8006890 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800057c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800057e:	2304      	movs	r3, #4
 8000580:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000582:	2301      	movs	r3, #1
 8000584:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8000586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	2302      	movs	r3, #2
 800058e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000594:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000596:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800059a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80005a0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005a4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV2;
 80005a6:	2310      	movs	r3, #16
 80005a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ae:	4618      	mov	r0, r3
 80005b0:	f001 fd92 	bl	80020d8 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80005ba:	f000 f879 	bl	80006b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	230f      	movs	r3, #15
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c2:	2302      	movs	r3, #2
 80005c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80005c6:	2380      	movs	r3, #128	; 0x80
 80005c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d8:	2101      	movs	r1, #1
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 f892 	bl	8002704 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005e6:	f000 f863 	bl	80006b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005ea:	2310      	movs	r3, #16
 80005ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV2;
 80005ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fa7a 	bl	8002af0 <HAL_RCCEx_PeriphCLKConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000602:	f000 f855 	bl	80006b0 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000606:	4b03      	ldr	r3, [pc, #12]	; (8000614 <SystemClock_Config+0xd0>)
 8000608:	2201      	movs	r2, #1
 800060a:	601a      	str	r2, [r3, #0]
}
 800060c:	bf00      	nop
 800060e:	3770      	adds	r7, #112	; 0x70
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	42420070 	.word	0x42420070

08000618 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800061e:	4a12      	ldr	r2, [pc, #72]	; (8000668 <MX_USART1_UART_Init+0x50>)
 8000620:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000628:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800063e:	220c      	movs	r2, #12
 8000640:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_USART1_UART_Init+0x4c>)
 8000650:	f002 fb80 	bl	8002d54 <HAL_UART_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800065a:	f000 f829 	bl	80006b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200003bc 	.word	0x200003bc
 8000668:	40013800 	.word	0x40013800

0800066c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <MX_GPIO_Init+0x40>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <MX_GPIO_Init+0x40>)
 8000678:	f043 0320 	orr.w	r3, r3, #32
 800067c:	6193      	str	r3, [r2, #24]
 800067e:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <MX_GPIO_Init+0x40>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f003 0320 	and.w	r3, r3, #32
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MX_GPIO_Init+0x40>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4a07      	ldr	r2, [pc, #28]	; (80006ac <MX_GPIO_Init+0x40>)
 8000690:	f043 0304 	orr.w	r3, r3, #4
 8000694:	6193      	str	r3, [r2, #24]
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <MX_GPIO_Init+0x40>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f003 0304 	and.w	r3, r3, #4
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	683b      	ldr	r3, [r7, #0]

}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	40021000 	.word	0x40021000

080006b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <HAL_MspInit+0x5c>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	4a14      	ldr	r2, [pc, #80]	; (8000718 <HAL_MspInit+0x5c>)
 80006c8:	f043 0301 	orr.w	r3, r3, #1
 80006cc:	6193      	str	r3, [r2, #24]
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_MspInit+0x5c>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	f003 0301 	and.w	r3, r3, #1
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <HAL_MspInit+0x5c>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	4a0e      	ldr	r2, [pc, #56]	; (8000718 <HAL_MspInit+0x5c>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	61d3      	str	r3, [r2, #28]
 80006e6:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <HAL_MspInit+0x5c>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <HAL_MspInit+0x60>)
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <HAL_MspInit+0x60>)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	bf00      	nop
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	40021000 	.word	0x40021000
 800071c:	40010000 	.word	0x40010000

08000720 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a20      	ldr	r2, [pc, #128]	; (80007bc <HAL_UART_MspInit+0x9c>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d139      	bne.n	80007b4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <HAL_UART_MspInit+0xa0>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a1e      	ldr	r2, [pc, #120]	; (80007c0 <HAL_UART_MspInit+0xa0>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <HAL_UART_MspInit+0xa0>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000758:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <HAL_UART_MspInit+0xa0>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a18      	ldr	r2, [pc, #96]	; (80007c0 <HAL_UART_MspInit+0xa0>)
 800075e:	f043 0304 	orr.w	r3, r3, #4
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <HAL_UART_MspInit+0xa0>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0304 	and.w	r3, r3, #4
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000770:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000774:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800077a:	2303      	movs	r3, #3
 800077c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	4619      	mov	r1, r3
 8000784:	480f      	ldr	r0, [pc, #60]	; (80007c4 <HAL_UART_MspInit+0xa4>)
 8000786:	f000 fb23 	bl	8000dd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800078a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800078e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	f107 0310 	add.w	r3, r7, #16
 800079c:	4619      	mov	r1, r3
 800079e:	4809      	ldr	r0, [pc, #36]	; (80007c4 <HAL_UART_MspInit+0xa4>)
 80007a0:	f000 fb16 	bl	8000dd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2100      	movs	r1, #0
 80007a8:	2025      	movs	r0, #37	; 0x25
 80007aa:	f000 f9d2 	bl	8000b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007ae:	2025      	movs	r0, #37	; 0x25
 80007b0:	f000 f9eb 	bl	8000b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40013800 	.word	0x40013800
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010800 	.word	0x40010800

080007c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <HardFault_Handler+0x4>

080007da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <MemManage_Handler+0x4>

080007e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <BusFault_Handler+0x4>

080007e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <UsageFault_Handler+0x4>

080007ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000814:	f000 f888 	bl	8000928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}

0800081c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <USART1_IRQHandler+0x10>)
 8000822:	f002 fae5 	bl	8002df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200003bc 	.word	0x200003bc

08000830 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000834:	4802      	ldr	r0, [pc, #8]	; (8000840 <OTG_FS_IRQHandler+0x10>)
 8000836:	f000 fd64 	bl	8001302 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000109c 	.word	0x2000109c

08000844 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000850:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000852:	e003      	b.n	800085c <LoopCopyDataInit>

08000854 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000856:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000858:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800085a:	3104      	adds	r1, #4

0800085c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800085c:	480a      	ldr	r0, [pc, #40]	; (8000888 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000860:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000862:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000864:	d3f6      	bcc.n	8000854 <CopyDataInit>
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000868:	e002      	b.n	8000870 <LoopFillZerobss>

0800086a <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800086c:	f842 3b04 	str.w	r3, [r2], #4

08000870 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000870:	4b08      	ldr	r3, [pc, #32]	; (8000894 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000872:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000874:	d3f9      	bcc.n	800086a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000876:	f7ff ffe5 	bl	8000844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800087a:	f005 ffe5 	bl	8006848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800087e:	f7ff fe53 	bl	8000528 <main>
  bx lr
 8000882:	4770      	bx	lr
  ldr r3, =_sidata
 8000884:	08006948 	.word	0x08006948
  ldr r0, =_sdata
 8000888:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800088c:	2000017c 	.word	0x2000017c
  ldr r2, =_sbss
 8000890:	2000017c 	.word	0x2000017c
  ldr r3, = _ebss
 8000894:	2000149c 	.word	0x2000149c

08000898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC1_2_IRQHandler>
	...

0800089c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_Init+0x28>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <HAL_Init+0x28>)
 80008a6:	f043 0310 	orr.w	r3, r3, #16
 80008aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ac:	2003      	movs	r0, #3
 80008ae:	f000 f945 	bl	8000b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f000 f808 	bl	80008c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b8:	f7ff ff00 	bl	80006bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40022000 	.word	0x40022000

080008c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_InitTick+0x54>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_InitTick+0x58>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008de:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f95d 	bl	8000ba6 <HAL_SYSTICK_Config>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00e      	b.n	8000914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b0f      	cmp	r3, #15
 80008fa:	d80a      	bhi.n	8000912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fc:	2200      	movs	r2, #0
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	f04f 30ff 	mov.w	r0, #4294967295
 8000904:	f000 f925 	bl	8000b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <HAL_InitTick+0x5c>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800090e:	2300      	movs	r3, #0
 8000910:	e000      	b.n	8000914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000000 	.word	0x20000000
 8000920:	20000008 	.word	0x20000008
 8000924:	20000004 	.word	0x20000004

08000928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_IncTick+0x1c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_IncTick+0x20>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4413      	add	r3, r2
 8000938:	4a03      	ldr	r2, [pc, #12]	; (8000948 <HAL_IncTick+0x20>)
 800093a:	6013      	str	r3, [r2, #0]
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	20000008 	.word	0x20000008
 8000948:	200003fc 	.word	0x200003fc

0800094c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return uwTick;
 8000950:	4b02      	ldr	r3, [pc, #8]	; (800095c <HAL_GetTick+0x10>)
 8000952:	681b      	ldr	r3, [r3, #0]
}
 8000954:	4618      	mov	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	200003fc 	.word	0x200003fc

08000960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000968:	f7ff fff0 	bl	800094c <HAL_GetTick>
 800096c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000978:	d005      	beq.n	8000986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_Delay+0x40>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	4413      	add	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000986:	bf00      	nop
 8000988:	f7ff ffe0 	bl	800094c <HAL_GetTick>
 800098c:	4602      	mov	r2, r0
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	68fa      	ldr	r2, [r7, #12]
 8000994:	429a      	cmp	r2, r3
 8000996:	d8f7      	bhi.n	8000988 <HAL_Delay+0x28>
  {
  }
}
 8000998:	bf00      	nop
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000008 	.word	0x20000008

080009a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f003 0307 	and.w	r3, r3, #7
 80009b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009c0:	4013      	ands	r3, r2
 80009c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009d6:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <__NVIC_SetPriorityGrouping+0x44>)
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	60d3      	str	r3, [r2, #12]
}
 80009dc:	bf00      	nop
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <__NVIC_GetPriorityGrouping+0x18>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	0a1b      	lsrs	r3, r3, #8
 80009f6:	f003 0307 	and.w	r3, r3, #7
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bc80      	pop	{r7}
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	db0b      	blt.n	8000a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	f003 021f 	and.w	r2, r3, #31
 8000a20:	4906      	ldr	r1, [pc, #24]	; (8000a3c <__NVIC_EnableIRQ+0x34>)
 8000a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a26:	095b      	lsrs	r3, r3, #5
 8000a28:	2001      	movs	r0, #1
 8000a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	e000e100 	.word	0xe000e100

08000a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	6039      	str	r1, [r7, #0]
 8000a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	db0a      	blt.n	8000a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	b2da      	uxtb	r2, r3
 8000a58:	490c      	ldr	r1, [pc, #48]	; (8000a8c <__NVIC_SetPriority+0x4c>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	0112      	lsls	r2, r2, #4
 8000a60:	b2d2      	uxtb	r2, r2
 8000a62:	440b      	add	r3, r1
 8000a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a68:	e00a      	b.n	8000a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	b2da      	uxtb	r2, r3
 8000a6e:	4908      	ldr	r1, [pc, #32]	; (8000a90 <__NVIC_SetPriority+0x50>)
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	f003 030f 	and.w	r3, r3, #15
 8000a76:	3b04      	subs	r3, #4
 8000a78:	0112      	lsls	r2, r2, #4
 8000a7a:	b2d2      	uxtb	r2, r2
 8000a7c:	440b      	add	r3, r1
 8000a7e:	761a      	strb	r2, [r3, #24]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e100 	.word	0xe000e100
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b089      	sub	sp, #36	; 0x24
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	f1c3 0307 	rsb	r3, r3, #7
 8000aae:	2b04      	cmp	r3, #4
 8000ab0:	bf28      	it	cs
 8000ab2:	2304      	movcs	r3, #4
 8000ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	3304      	adds	r3, #4
 8000aba:	2b06      	cmp	r3, #6
 8000abc:	d902      	bls.n	8000ac4 <NVIC_EncodePriority+0x30>
 8000abe:	69fb      	ldr	r3, [r7, #28]
 8000ac0:	3b03      	subs	r3, #3
 8000ac2:	e000      	b.n	8000ac6 <NVIC_EncodePriority+0x32>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43da      	mvns	r2, r3
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000adc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae6:	43d9      	mvns	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	4313      	orrs	r3, r2
         );
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3724      	adds	r7, #36	; 0x24
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b08:	d301      	bcc.n	8000b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e00f      	b.n	8000b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b0e:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <SysTick_Config+0x40>)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b16:	210f      	movs	r1, #15
 8000b18:	f04f 30ff 	mov.w	r0, #4294967295
 8000b1c:	f7ff ff90 	bl	8000a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <SysTick_Config+0x40>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b26:	4b04      	ldr	r3, [pc, #16]	; (8000b38 <SysTick_Config+0x40>)
 8000b28:	2207      	movs	r2, #7
 8000b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	e000e010 	.word	0xe000e010

08000b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f7ff ff2d 	bl	80009a4 <__NVIC_SetPriorityGrouping>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}

08000b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b086      	sub	sp, #24
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	4603      	mov	r3, r0
 8000b5a:	60b9      	str	r1, [r7, #8]
 8000b5c:	607a      	str	r2, [r7, #4]
 8000b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b64:	f7ff ff42 	bl	80009ec <__NVIC_GetPriorityGrouping>
 8000b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	68b9      	ldr	r1, [r7, #8]
 8000b6e:	6978      	ldr	r0, [r7, #20]
 8000b70:	f7ff ff90 	bl	8000a94 <NVIC_EncodePriority>
 8000b74:	4602      	mov	r2, r0
 8000b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff5f 	bl	8000a40 <__NVIC_SetPriority>
}
 8000b82:	bf00      	nop
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	4603      	mov	r3, r0
 8000b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff35 	bl	8000a08 <__NVIC_EnableIRQ>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffa2 	bl	8000af8 <SysTick_Config>
 8000bb4:	4603      	mov	r3, r0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d005      	beq.n	8000be2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2204      	movs	r2, #4
 8000bda:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	73fb      	strb	r3, [r7, #15]
 8000be0:	e0d6      	b.n	8000d90 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f022 020e 	bic.w	r2, r2, #14
 8000bf0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f022 0201 	bic.w	r2, r2, #1
 8000c00:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b64      	ldr	r3, [pc, #400]	; (8000d9c <HAL_DMA_Abort_IT+0x1dc>)
 8000c0a:	429a      	cmp	r2, r3
 8000c0c:	d958      	bls.n	8000cc0 <HAL_DMA_Abort_IT+0x100>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a63      	ldr	r2, [pc, #396]	; (8000da0 <HAL_DMA_Abort_IT+0x1e0>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d04f      	beq.n	8000cb8 <HAL_DMA_Abort_IT+0xf8>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a61      	ldr	r2, [pc, #388]	; (8000da4 <HAL_DMA_Abort_IT+0x1e4>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d048      	beq.n	8000cb4 <HAL_DMA_Abort_IT+0xf4>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a60      	ldr	r2, [pc, #384]	; (8000da8 <HAL_DMA_Abort_IT+0x1e8>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d040      	beq.n	8000cae <HAL_DMA_Abort_IT+0xee>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a5e      	ldr	r2, [pc, #376]	; (8000dac <HAL_DMA_Abort_IT+0x1ec>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d038      	beq.n	8000ca8 <HAL_DMA_Abort_IT+0xe8>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a5d      	ldr	r2, [pc, #372]	; (8000db0 <HAL_DMA_Abort_IT+0x1f0>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d030      	beq.n	8000ca2 <HAL_DMA_Abort_IT+0xe2>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a5b      	ldr	r2, [pc, #364]	; (8000db4 <HAL_DMA_Abort_IT+0x1f4>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d028      	beq.n	8000c9c <HAL_DMA_Abort_IT+0xdc>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a53      	ldr	r2, [pc, #332]	; (8000d9c <HAL_DMA_Abort_IT+0x1dc>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d020      	beq.n	8000c96 <HAL_DMA_Abort_IT+0xd6>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a57      	ldr	r2, [pc, #348]	; (8000db8 <HAL_DMA_Abort_IT+0x1f8>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d019      	beq.n	8000c92 <HAL_DMA_Abort_IT+0xd2>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a56      	ldr	r2, [pc, #344]	; (8000dbc <HAL_DMA_Abort_IT+0x1fc>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d012      	beq.n	8000c8e <HAL_DMA_Abort_IT+0xce>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a54      	ldr	r2, [pc, #336]	; (8000dc0 <HAL_DMA_Abort_IT+0x200>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d00a      	beq.n	8000c88 <HAL_DMA_Abort_IT+0xc8>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a53      	ldr	r2, [pc, #332]	; (8000dc4 <HAL_DMA_Abort_IT+0x204>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d102      	bne.n	8000c82 <HAL_DMA_Abort_IT+0xc2>
 8000c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c80:	e01b      	b.n	8000cba <HAL_DMA_Abort_IT+0xfa>
 8000c82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c86:	e018      	b.n	8000cba <HAL_DMA_Abort_IT+0xfa>
 8000c88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c8c:	e015      	b.n	8000cba <HAL_DMA_Abort_IT+0xfa>
 8000c8e:	2310      	movs	r3, #16
 8000c90:	e013      	b.n	8000cba <HAL_DMA_Abort_IT+0xfa>
 8000c92:	2301      	movs	r3, #1
 8000c94:	e011      	b.n	8000cba <HAL_DMA_Abort_IT+0xfa>
 8000c96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c9a:	e00e      	b.n	8000cba <HAL_DMA_Abort_IT+0xfa>
 8000c9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ca0:	e00b      	b.n	8000cba <HAL_DMA_Abort_IT+0xfa>
 8000ca2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca6:	e008      	b.n	8000cba <HAL_DMA_Abort_IT+0xfa>
 8000ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cac:	e005      	b.n	8000cba <HAL_DMA_Abort_IT+0xfa>
 8000cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cb2:	e002      	b.n	8000cba <HAL_DMA_Abort_IT+0xfa>
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	e000      	b.n	8000cba <HAL_DMA_Abort_IT+0xfa>
 8000cb8:	2301      	movs	r3, #1
 8000cba:	4a43      	ldr	r2, [pc, #268]	; (8000dc8 <HAL_DMA_Abort_IT+0x208>)
 8000cbc:	6053      	str	r3, [r2, #4]
 8000cbe:	e057      	b.n	8000d70 <HAL_DMA_Abort_IT+0x1b0>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a36      	ldr	r2, [pc, #216]	; (8000da0 <HAL_DMA_Abort_IT+0x1e0>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d04f      	beq.n	8000d6a <HAL_DMA_Abort_IT+0x1aa>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a35      	ldr	r2, [pc, #212]	; (8000da4 <HAL_DMA_Abort_IT+0x1e4>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d048      	beq.n	8000d66 <HAL_DMA_Abort_IT+0x1a6>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a33      	ldr	r2, [pc, #204]	; (8000da8 <HAL_DMA_Abort_IT+0x1e8>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d040      	beq.n	8000d60 <HAL_DMA_Abort_IT+0x1a0>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a32      	ldr	r2, [pc, #200]	; (8000dac <HAL_DMA_Abort_IT+0x1ec>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d038      	beq.n	8000d5a <HAL_DMA_Abort_IT+0x19a>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a30      	ldr	r2, [pc, #192]	; (8000db0 <HAL_DMA_Abort_IT+0x1f0>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d030      	beq.n	8000d54 <HAL_DMA_Abort_IT+0x194>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a2f      	ldr	r2, [pc, #188]	; (8000db4 <HAL_DMA_Abort_IT+0x1f4>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d028      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x18e>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a26      	ldr	r2, [pc, #152]	; (8000d9c <HAL_DMA_Abort_IT+0x1dc>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d020      	beq.n	8000d48 <HAL_DMA_Abort_IT+0x188>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a2b      	ldr	r2, [pc, #172]	; (8000db8 <HAL_DMA_Abort_IT+0x1f8>)
 8000d0c:	4293      	cmp	r3, r2
 8000d0e:	d019      	beq.n	8000d44 <HAL_DMA_Abort_IT+0x184>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a29      	ldr	r2, [pc, #164]	; (8000dbc <HAL_DMA_Abort_IT+0x1fc>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d012      	beq.n	8000d40 <HAL_DMA_Abort_IT+0x180>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a28      	ldr	r2, [pc, #160]	; (8000dc0 <HAL_DMA_Abort_IT+0x200>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d00a      	beq.n	8000d3a <HAL_DMA_Abort_IT+0x17a>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a26      	ldr	r2, [pc, #152]	; (8000dc4 <HAL_DMA_Abort_IT+0x204>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d102      	bne.n	8000d34 <HAL_DMA_Abort_IT+0x174>
 8000d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d32:	e01b      	b.n	8000d6c <HAL_DMA_Abort_IT+0x1ac>
 8000d34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d38:	e018      	b.n	8000d6c <HAL_DMA_Abort_IT+0x1ac>
 8000d3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d3e:	e015      	b.n	8000d6c <HAL_DMA_Abort_IT+0x1ac>
 8000d40:	2310      	movs	r3, #16
 8000d42:	e013      	b.n	8000d6c <HAL_DMA_Abort_IT+0x1ac>
 8000d44:	2301      	movs	r3, #1
 8000d46:	e011      	b.n	8000d6c <HAL_DMA_Abort_IT+0x1ac>
 8000d48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d4c:	e00e      	b.n	8000d6c <HAL_DMA_Abort_IT+0x1ac>
 8000d4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d52:	e00b      	b.n	8000d6c <HAL_DMA_Abort_IT+0x1ac>
 8000d54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d58:	e008      	b.n	8000d6c <HAL_DMA_Abort_IT+0x1ac>
 8000d5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5e:	e005      	b.n	8000d6c <HAL_DMA_Abort_IT+0x1ac>
 8000d60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d64:	e002      	b.n	8000d6c <HAL_DMA_Abort_IT+0x1ac>
 8000d66:	2310      	movs	r3, #16
 8000d68:	e000      	b.n	8000d6c <HAL_DMA_Abort_IT+0x1ac>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <HAL_DMA_Abort_IT+0x20c>)
 8000d6e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2201      	movs	r2, #1
 8000d74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d003      	beq.n	8000d90 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	4798      	blx	r3
    } 
  }
  return status;
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40020080 	.word	0x40020080
 8000da0:	40020008 	.word	0x40020008
 8000da4:	4002001c 	.word	0x4002001c
 8000da8:	40020030 	.word	0x40020030
 8000dac:	40020044 	.word	0x40020044
 8000db0:	40020058 	.word	0x40020058
 8000db4:	4002006c 	.word	0x4002006c
 8000db8:	40020408 	.word	0x40020408
 8000dbc:	4002041c 	.word	0x4002041c
 8000dc0:	40020430 	.word	0x40020430
 8000dc4:	40020444 	.word	0x40020444
 8000dc8:	40020400 	.word	0x40020400
 8000dcc:	40020000 	.word	0x40020000

08000dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b08b      	sub	sp, #44	; 0x2c
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000dde:	2300      	movs	r3, #0
 8000de0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de2:	e127      	b.n	8001034 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000de4:	2201      	movs	r2, #1
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	69fa      	ldr	r2, [r7, #28]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	f040 8116 	bne.w	800102e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2b12      	cmp	r3, #18
 8000e08:	d034      	beq.n	8000e74 <HAL_GPIO_Init+0xa4>
 8000e0a:	2b12      	cmp	r3, #18
 8000e0c:	d80d      	bhi.n	8000e2a <HAL_GPIO_Init+0x5a>
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d02b      	beq.n	8000e6a <HAL_GPIO_Init+0x9a>
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d804      	bhi.n	8000e20 <HAL_GPIO_Init+0x50>
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d031      	beq.n	8000e7e <HAL_GPIO_Init+0xae>
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d01c      	beq.n	8000e58 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e1e:	e048      	b.n	8000eb2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d043      	beq.n	8000eac <HAL_GPIO_Init+0xdc>
 8000e24:	2b11      	cmp	r3, #17
 8000e26:	d01b      	beq.n	8000e60 <HAL_GPIO_Init+0x90>
          break;
 8000e28:	e043      	b.n	8000eb2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e2a:	4a89      	ldr	r2, [pc, #548]	; (8001050 <HAL_GPIO_Init+0x280>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d026      	beq.n	8000e7e <HAL_GPIO_Init+0xae>
 8000e30:	4a87      	ldr	r2, [pc, #540]	; (8001050 <HAL_GPIO_Init+0x280>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d806      	bhi.n	8000e44 <HAL_GPIO_Init+0x74>
 8000e36:	4a87      	ldr	r2, [pc, #540]	; (8001054 <HAL_GPIO_Init+0x284>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d020      	beq.n	8000e7e <HAL_GPIO_Init+0xae>
 8000e3c:	4a86      	ldr	r2, [pc, #536]	; (8001058 <HAL_GPIO_Init+0x288>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d01d      	beq.n	8000e7e <HAL_GPIO_Init+0xae>
          break;
 8000e42:	e036      	b.n	8000eb2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e44:	4a85      	ldr	r2, [pc, #532]	; (800105c <HAL_GPIO_Init+0x28c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d019      	beq.n	8000e7e <HAL_GPIO_Init+0xae>
 8000e4a:	4a85      	ldr	r2, [pc, #532]	; (8001060 <HAL_GPIO_Init+0x290>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d016      	beq.n	8000e7e <HAL_GPIO_Init+0xae>
 8000e50:	4a84      	ldr	r2, [pc, #528]	; (8001064 <HAL_GPIO_Init+0x294>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d013      	beq.n	8000e7e <HAL_GPIO_Init+0xae>
          break;
 8000e56:	e02c      	b.n	8000eb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	623b      	str	r3, [r7, #32]
          break;
 8000e5e:	e028      	b.n	8000eb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	3304      	adds	r3, #4
 8000e66:	623b      	str	r3, [r7, #32]
          break;
 8000e68:	e023      	b.n	8000eb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	3308      	adds	r3, #8
 8000e70:	623b      	str	r3, [r7, #32]
          break;
 8000e72:	e01e      	b.n	8000eb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	330c      	adds	r3, #12
 8000e7a:	623b      	str	r3, [r7, #32]
          break;
 8000e7c:	e019      	b.n	8000eb2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d102      	bne.n	8000e8c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e86:	2304      	movs	r3, #4
 8000e88:	623b      	str	r3, [r7, #32]
          break;
 8000e8a:	e012      	b.n	8000eb2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d105      	bne.n	8000ea0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e94:	2308      	movs	r3, #8
 8000e96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69fa      	ldr	r2, [r7, #28]
 8000e9c:	611a      	str	r2, [r3, #16]
          break;
 8000e9e:	e008      	b.n	8000eb2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ea0:	2308      	movs	r3, #8
 8000ea2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	69fa      	ldr	r2, [r7, #28]
 8000ea8:	615a      	str	r2, [r3, #20]
          break;
 8000eaa:	e002      	b.n	8000eb2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000eac:	2300      	movs	r3, #0
 8000eae:	623b      	str	r3, [r7, #32]
          break;
 8000eb0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	2bff      	cmp	r3, #255	; 0xff
 8000eb6:	d801      	bhi.n	8000ebc <HAL_GPIO_Init+0xec>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	e001      	b.n	8000ec0 <HAL_GPIO_Init+0xf0>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3304      	adds	r3, #4
 8000ec0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	2bff      	cmp	r3, #255	; 0xff
 8000ec6:	d802      	bhi.n	8000ece <HAL_GPIO_Init+0xfe>
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	e002      	b.n	8000ed4 <HAL_GPIO_Init+0x104>
 8000ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed0:	3b08      	subs	r3, #8
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	210f      	movs	r1, #15
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	6a39      	ldr	r1, [r7, #32]
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	431a      	orrs	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 8096 	beq.w	800102e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f02:	4b59      	ldr	r3, [pc, #356]	; (8001068 <HAL_GPIO_Init+0x298>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	4a58      	ldr	r2, [pc, #352]	; (8001068 <HAL_GPIO_Init+0x298>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6193      	str	r3, [r2, #24]
 8000f0e:	4b56      	ldr	r3, [pc, #344]	; (8001068 <HAL_GPIO_Init+0x298>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f1a:	4a54      	ldr	r2, [pc, #336]	; (800106c <HAL_GPIO_Init+0x29c>)
 8000f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1e:	089b      	lsrs	r3, r3, #2
 8000f20:	3302      	adds	r3, #2
 8000f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f26:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	220f      	movs	r2, #15
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4b      	ldr	r2, [pc, #300]	; (8001070 <HAL_GPIO_Init+0x2a0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d013      	beq.n	8000f6e <HAL_GPIO_Init+0x19e>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4a      	ldr	r2, [pc, #296]	; (8001074 <HAL_GPIO_Init+0x2a4>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d00d      	beq.n	8000f6a <HAL_GPIO_Init+0x19a>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a49      	ldr	r2, [pc, #292]	; (8001078 <HAL_GPIO_Init+0x2a8>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d007      	beq.n	8000f66 <HAL_GPIO_Init+0x196>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a48      	ldr	r2, [pc, #288]	; (800107c <HAL_GPIO_Init+0x2ac>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d101      	bne.n	8000f62 <HAL_GPIO_Init+0x192>
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x1a0>
 8000f62:	2304      	movs	r3, #4
 8000f64:	e004      	b.n	8000f70 <HAL_GPIO_Init+0x1a0>
 8000f66:	2302      	movs	r3, #2
 8000f68:	e002      	b.n	8000f70 <HAL_GPIO_Init+0x1a0>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <HAL_GPIO_Init+0x1a0>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f72:	f002 0203 	and.w	r2, r2, #3
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	4093      	lsls	r3, r2
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f80:	493a      	ldr	r1, [pc, #232]	; (800106c <HAL_GPIO_Init+0x29c>)
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	3302      	adds	r3, #2
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d006      	beq.n	8000fa8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f9a:	4b39      	ldr	r3, [pc, #228]	; (8001080 <HAL_GPIO_Init+0x2b0>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	4938      	ldr	r1, [pc, #224]	; (8001080 <HAL_GPIO_Init+0x2b0>)
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	600b      	str	r3, [r1, #0]
 8000fa6:	e006      	b.n	8000fb6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fa8:	4b35      	ldr	r3, [pc, #212]	; (8001080 <HAL_GPIO_Init+0x2b0>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	4933      	ldr	r1, [pc, #204]	; (8001080 <HAL_GPIO_Init+0x2b0>)
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d006      	beq.n	8000fd0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fc2:	4b2f      	ldr	r3, [pc, #188]	; (8001080 <HAL_GPIO_Init+0x2b0>)
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	492e      	ldr	r1, [pc, #184]	; (8001080 <HAL_GPIO_Init+0x2b0>)
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	604b      	str	r3, [r1, #4]
 8000fce:	e006      	b.n	8000fde <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fd0:	4b2b      	ldr	r3, [pc, #172]	; (8001080 <HAL_GPIO_Init+0x2b0>)
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	4929      	ldr	r1, [pc, #164]	; (8001080 <HAL_GPIO_Init+0x2b0>)
 8000fda:	4013      	ands	r3, r2
 8000fdc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d006      	beq.n	8000ff8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fea:	4b25      	ldr	r3, [pc, #148]	; (8001080 <HAL_GPIO_Init+0x2b0>)
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	4924      	ldr	r1, [pc, #144]	; (8001080 <HAL_GPIO_Init+0x2b0>)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	608b      	str	r3, [r1, #8]
 8000ff6:	e006      	b.n	8001006 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ff8:	4b21      	ldr	r3, [pc, #132]	; (8001080 <HAL_GPIO_Init+0x2b0>)
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	43db      	mvns	r3, r3
 8001000:	491f      	ldr	r1, [pc, #124]	; (8001080 <HAL_GPIO_Init+0x2b0>)
 8001002:	4013      	ands	r3, r2
 8001004:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d006      	beq.n	8001020 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <HAL_GPIO_Init+0x2b0>)
 8001014:	68da      	ldr	r2, [r3, #12]
 8001016:	491a      	ldr	r1, [pc, #104]	; (8001080 <HAL_GPIO_Init+0x2b0>)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	60cb      	str	r3, [r1, #12]
 800101e:	e006      	b.n	800102e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_GPIO_Init+0x2b0>)
 8001022:	68da      	ldr	r2, [r3, #12]
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	43db      	mvns	r3, r3
 8001028:	4915      	ldr	r1, [pc, #84]	; (8001080 <HAL_GPIO_Init+0x2b0>)
 800102a:	4013      	ands	r3, r2
 800102c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	3301      	adds	r3, #1
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	fa22 f303 	lsr.w	r3, r2, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	f47f aed0 	bne.w	8000de4 <HAL_GPIO_Init+0x14>
  }
}
 8001044:	bf00      	nop
 8001046:	372c      	adds	r7, #44	; 0x2c
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	10210000 	.word	0x10210000
 8001054:	10110000 	.word	0x10110000
 8001058:	10120000 	.word	0x10120000
 800105c:	10310000 	.word	0x10310000
 8001060:	10320000 	.word	0x10320000
 8001064:	10220000 	.word	0x10220000
 8001068:	40021000 	.word	0x40021000
 800106c:	40010000 	.word	0x40010000
 8001070:	40010800 	.word	0x40010800
 8001074:	40010c00 	.word	0x40010c00
 8001078:	40011000 	.word	0x40011000
 800107c:	40011400 	.word	0x40011400
 8001080:	40010400 	.word	0x40010400

08001084 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001086:	b08f      	sub	sp, #60	; 0x3c
 8001088:	af0a      	add	r7, sp, #40	; 0x28
 800108a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e10f      	b.n	80012b6 <HAL_PCD_Init+0x232>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d106      	bne.n	80010b6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f005 f8f9 	bl	80062a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2203      	movs	r2, #3
 80010ba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d102      	bne.n	80010d0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f002 fa41 	bl	800355c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	603b      	str	r3, [r7, #0]
 80010e0:	687e      	ldr	r6, [r7, #4]
 80010e2:	466d      	mov	r5, sp
 80010e4:	f106 0410 	add.w	r4, r6, #16
 80010e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010f4:	e885 0003 	stmia.w	r5, {r0, r1}
 80010f8:	1d33      	adds	r3, r6, #4
 80010fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010fc:	6838      	ldr	r0, [r7, #0]
 80010fe:	f002 f939 	bl	8003374 <USB_CoreInit>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2202      	movs	r2, #2
 800110c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e0d0      	b.n	80012b6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2100      	movs	r1, #0
 800111a:	4618      	mov	r0, r3
 800111c:	f002 fa2e 	bl	800357c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	e04a      	b.n	80011bc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	1a9b      	subs	r3, r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	440b      	add	r3, r1
 8001134:	333d      	adds	r3, #61	; 0x3d
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800113a:	7bfa      	ldrb	r2, [r7, #15]
 800113c:	6879      	ldr	r1, [r7, #4]
 800113e:	4613      	mov	r3, r2
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	1a9b      	subs	r3, r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	440b      	add	r3, r1
 8001148:	333c      	adds	r3, #60	; 0x3c
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	b298      	uxth	r0, r3
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	1a9b      	subs	r3, r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	3342      	adds	r3, #66	; 0x42
 8001162:	4602      	mov	r2, r0
 8001164:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	4613      	mov	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	1a9b      	subs	r3, r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	333f      	adds	r3, #63	; 0x3f
 8001176:	2200      	movs	r2, #0
 8001178:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800117a:	7bfa      	ldrb	r2, [r7, #15]
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	1a9b      	subs	r3, r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	3344      	adds	r3, #68	; 0x44
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800118e:	7bfa      	ldrb	r2, [r7, #15]
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	4613      	mov	r3, r2
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	1a9b      	subs	r3, r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	440b      	add	r3, r1
 800119c:	3348      	adds	r3, #72	; 0x48
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	1a9b      	subs	r3, r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	3350      	adds	r3, #80	; 0x50
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
 80011b8:	3301      	adds	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d3af      	bcc.n	8001126 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	73fb      	strb	r3, [r7, #15]
 80011ca:	e044      	b.n	8001256 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011cc:	7bfa      	ldrb	r2, [r7, #15]
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	00db      	lsls	r3, r3, #3
 80011d4:	1a9b      	subs	r3, r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011e2:	7bfa      	ldrb	r2, [r7, #15]
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	1a9b      	subs	r3, r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	00db      	lsls	r3, r3, #3
 8001200:	1a9b      	subs	r3, r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	440b      	add	r3, r1
 8001206:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	1a9b      	subs	r3, r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	440b      	add	r3, r1
 800121c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001224:	7bfa      	ldrb	r2, [r7, #15]
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	4613      	mov	r3, r2
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	1a9b      	subs	r3, r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	440b      	add	r3, r1
 8001232:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800123a:	7bfa      	ldrb	r2, [r7, #15]
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	1a9b      	subs	r3, r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	3301      	adds	r3, #1
 8001254:	73fb      	strb	r3, [r7, #15]
 8001256:	7bfa      	ldrb	r2, [r7, #15]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	429a      	cmp	r2, r3
 800125e:	d3b5      	bcc.n	80011cc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	687e      	ldr	r6, [r7, #4]
 8001268:	466d      	mov	r5, sp
 800126a:	f106 0410 	add.w	r4, r6, #16
 800126e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800127a:	e885 0003 	stmia.w	r5, {r0, r1}
 800127e:	1d33      	adds	r3, r6, #4
 8001280:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001282:	6838      	ldr	r0, [r7, #0]
 8001284:	f002 f9a4 	bl	80035d0 <USB_DevInit>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2202      	movs	r2, #2
 8001292:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e00d      	b.n	80012b6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 f8fe 	bl	80044b0 <USB_DevDisconnect>

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <HAL_PCD_Start+0x16>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e012      	b.n	80012fa <HAL_PCD_Start+0x3c>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f002 f92b 	bl	800353c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 f8c0 	bl	8004470 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001302:	b590      	push	{r4, r7, lr}
 8001304:	b08d      	sub	sp, #52	; 0x34
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001310:	6a3b      	ldr	r3, [r7, #32]
 8001312:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f003 f977 	bl	800460c <USB_GetMode>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	f040 8354 	bne.w	80019ce <HAL_PCD_IRQHandler+0x6cc>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f003 f8e0 	bl	80044f0 <USB_ReadInterrupts>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 834a 	beq.w	80019cc <HAL_PCD_IRQHandler+0x6ca>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f003 f8d7 	bl	80044f0 <USB_ReadInterrupts>
 8001342:	4603      	mov	r3, r0
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b02      	cmp	r3, #2
 800134a:	d107      	bne.n	800135c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	695a      	ldr	r2, [r3, #20]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f002 0202 	and.w	r2, r2, #2
 800135a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f003 f8c5 	bl	80044f0 <USB_ReadInterrupts>
 8001366:	4603      	mov	r3, r0
 8001368:	f003 0310 	and.w	r3, r3, #16
 800136c:	2b10      	cmp	r3, #16
 800136e:	d161      	bne.n	8001434 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	699a      	ldr	r2, [r3, #24]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f022 0210 	bic.w	r2, r2, #16
 800137e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	f003 020f 	and.w	r2, r3, #15
 800138c:	4613      	mov	r3, r2
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	1a9b      	subs	r3, r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	3304      	adds	r3, #4
 800139e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	0c5b      	lsrs	r3, r3, #17
 80013a4:	f003 030f 	and.w	r3, r3, #15
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d124      	bne.n	80013f6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d035      	beq.n	8001424 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	091b      	lsrs	r3, r3, #4
 80013c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	461a      	mov	r2, r3
 80013ca:	6a38      	ldr	r0, [r7, #32]
 80013cc:	f002 ff31 	bl	8004232 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	091b      	lsrs	r3, r3, #4
 80013d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013dc:	441a      	add	r2, r3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	699a      	ldr	r2, [r3, #24]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ee:	441a      	add	r2, r3
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	619a      	str	r2, [r3, #24]
 80013f4:	e016      	b.n	8001424 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	0c5b      	lsrs	r3, r3, #17
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d110      	bne.n	8001424 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001408:	2208      	movs	r2, #8
 800140a:	4619      	mov	r1, r3
 800140c:	6a38      	ldr	r0, [r7, #32]
 800140e:	f002 ff10 	bl	8004232 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	699a      	ldr	r2, [r3, #24]
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800141e:	441a      	add	r2, r3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	699a      	ldr	r2, [r3, #24]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0210 	orr.w	r2, r2, #16
 8001432:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f003 f859 	bl	80044f0 <USB_ReadInterrupts>
 800143e:	4603      	mov	r3, r0
 8001440:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001444:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001448:	d16e      	bne.n	8001528 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f003 f85e 	bl	8004514 <USB_ReadDevAllOutEpInterrupt>
 8001458:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800145a:	e062      	b.n	8001522 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800145c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d057      	beq.n	8001516 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146c:	b2d2      	uxtb	r2, r2
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f003 f881 	bl	8004578 <USB_ReadDevOutEPInterrupt>
 8001476:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00c      	beq.n	800149c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001484:	015a      	lsls	r2, r3, #5
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	4413      	add	r3, r2
 800148a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800148e:	461a      	mov	r2, r3
 8001490:	2301      	movs	r3, #1
 8001492:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 fd46 	bl	8001f28 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00c      	beq.n	80014c0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	015a      	lsls	r2, r3, #5
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014b2:	461a      	mov	r2, r3
 80014b4:	2308      	movs	r3, #8
 80014b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80014b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 fd82 	bl	8001fc4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d008      	beq.n	80014dc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	015a      	lsls	r2, r3, #5
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	4413      	add	r3, r2
 80014d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014d6:	461a      	mov	r2, r3
 80014d8:	2310      	movs	r3, #16
 80014da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	f003 0320 	and.w	r3, r3, #32
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d008      	beq.n	80014f8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	015a      	lsls	r2, r3, #5
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	4413      	add	r3, r2
 80014ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f2:	461a      	mov	r2, r3
 80014f4:	2320      	movs	r3, #32
 80014f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d009      	beq.n	8001516 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	015a      	lsls	r2, r3, #5
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	4413      	add	r3, r2
 800150a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800150e:	461a      	mov	r2, r3
 8001510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001514:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	3301      	adds	r3, #1
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151e:	085b      	lsrs	r3, r3, #1
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001524:	2b00      	cmp	r3, #0
 8001526:	d199      	bne.n	800145c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f002 ffdf 	bl	80044f0 <USB_ReadInterrupts>
 8001532:	4603      	mov	r3, r0
 8001534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001538:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800153c:	f040 8087 	bne.w	800164e <HAL_PCD_IRQHandler+0x34c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f002 fffe 	bl	8004546 <USB_ReadDevAllInEpInterrupt>
 800154a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001550:	e07a      	b.n	8001648 <HAL_PCD_IRQHandler+0x346>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001554:	f003 0301 	and.w	r3, r3, #1
 8001558:	2b00      	cmp	r3, #0
 800155a:	d06f      	beq.n	800163c <HAL_PCD_IRQHandler+0x33a>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f003 f823 	bl	80045b2 <USB_ReadDevInEPInterrupt>
 800156c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	d020      	beq.n	80015ba <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	2201      	movs	r2, #1
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800158c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43db      	mvns	r3, r3
 8001592:	69f9      	ldr	r1, [r7, #28]
 8001594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001598:	4013      	ands	r3, r2
 800159a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	015a      	lsls	r2, r3, #5
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	4413      	add	r3, r2
 80015a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015a8:	461a      	mov	r2, r3
 80015aa:	2301      	movs	r3, #1
 80015ac:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	4619      	mov	r1, r3
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f004 fec8 	bl	800634a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	f003 0308 	and.w	r3, r3, #8
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d008      	beq.n	80015d6 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	015a      	lsls	r2, r3, #5
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	4413      	add	r3, r2
 80015cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d0:	461a      	mov	r2, r3
 80015d2:	2308      	movs	r3, #8
 80015d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	f003 0310 	and.w	r3, r3, #16
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d008      	beq.n	80015f2 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e2:	015a      	lsls	r2, r3, #5
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ec:	461a      	mov	r2, r3
 80015ee:	2310      	movs	r3, #16
 80015f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d008      	beq.n	800160e <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fe:	015a      	lsls	r2, r3, #5
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	4413      	add	r3, r2
 8001604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001608:	461a      	mov	r2, r3
 800160a:	2340      	movs	r3, #64	; 0x40
 800160c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d008      	beq.n	800162a <HAL_PCD_IRQHandler+0x328>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	015a      	lsls	r2, r3, #5
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	4413      	add	r3, r2
 8001620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001624:	461a      	mov	r2, r3
 8001626:	2302      	movs	r3, #2
 8001628:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_PCD_IRQHandler+0x33a>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001634:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 fbed 	bl	8001e16 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	3301      	adds	r3, #1
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001644:	085b      	lsrs	r3, r3, #1
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164a:	2b00      	cmp	r3, #0
 800164c:	d181      	bne.n	8001552 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f002 ff4c 	bl	80044f0 <USB_ReadInterrupts>
 8001658:	4603      	mov	r3, r0
 800165a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800165e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001662:	d114      	bne.n	800168e <HAL_PCD_IRQHandler+0x38c>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	69fa      	ldr	r2, [r7, #28]
 800166e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001672:	f023 0301 	bic.w	r3, r3, #1
 8001676:	6053      	str	r3, [r2, #4]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResumeCallback(hpcd);
#else
      HAL_PCD_ResumeCallback(hpcd);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f004 fed3 	bl	8006424 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	695a      	ldr	r2, [r3, #20]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800168c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f002 ff2c 	bl	80044f0 <USB_ReadInterrupts>
 8001698:	4603      	mov	r3, r0
 800169a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800169e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016a2:	d112      	bne.n	80016ca <HAL_PCD_IRQHandler+0x3c8>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d102      	bne.n	80016ba <HAL_PCD_IRQHandler+0x3b8>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f004 fe8f 	bl	80063d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	695a      	ldr	r2, [r3, #20]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016c8:	615a      	str	r2, [r3, #20]
    }
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f002 ff0e 	bl	80044f0 <USB_ReadInterrupts>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016de:	f040 80c5 	bne.w	800186c <HAL_PCD_IRQHandler+0x56a>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016f0:	f023 0301 	bic.w	r3, r3, #1
 80016f4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2110      	movs	r1, #16
 80016fc:	4618      	mov	r0, r3
 80016fe:	f002 f893 	bl	8003828 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001702:	2300      	movs	r3, #0
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001706:	e056      	b.n	80017b6 <HAL_PCD_IRQHandler+0x4b4>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170a:	015a      	lsls	r2, r3, #5
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	4413      	add	r3, r2
 8001710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001714:	461a      	mov	r2, r3
 8001716:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800171a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800171c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171e:	015a      	lsls	r2, r3, #5
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	4413      	add	r3, r2
 8001724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800172c:	0151      	lsls	r1, r2, #5
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	440a      	add	r2, r1
 8001732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001736:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800173a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800173c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800173e:	015a      	lsls	r2, r3, #5
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	4413      	add	r3, r2
 8001744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800174c:	0151      	lsls	r1, r2, #5
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	440a      	add	r2, r1
 8001752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001756:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800175a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800175c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175e:	015a      	lsls	r2, r3, #5
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	4413      	add	r3, r2
 8001764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001768:	461a      	mov	r2, r3
 800176a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800176e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001772:	015a      	lsls	r2, r3, #5
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	4413      	add	r3, r2
 8001778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001780:	0151      	lsls	r1, r2, #5
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	440a      	add	r2, r1
 8001786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800178a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800178e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001792:	015a      	lsls	r2, r3, #5
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	4413      	add	r3, r2
 8001798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017a0:	0151      	lsls	r1, r2, #5
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	440a      	add	r2, r1
 80017a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017ae:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b2:	3301      	adds	r3, #1
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017bc:	429a      	cmp	r2, r3
 80017be:	d3a3      	bcc.n	8001708 <HAL_PCD_IRQHandler+0x406>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	69fa      	ldr	r2, [r7, #28]
 80017ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ce:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017d2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d016      	beq.n	800180a <HAL_PCD_IRQHandler+0x508>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017e6:	69fa      	ldr	r2, [r7, #28]
 80017e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ec:	f043 030b 	orr.w	r3, r3, #11
 80017f0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fc:	69fa      	ldr	r2, [r7, #28]
 80017fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001802:	f043 030b 	orr.w	r3, r3, #11
 8001806:	6453      	str	r3, [r2, #68]	; 0x44
 8001808:	e015      	b.n	8001836 <HAL_PCD_IRQHandler+0x534>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	69fa      	ldr	r2, [r7, #28]
 8001814:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001818:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800181c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001820:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	69fa      	ldr	r2, [r7, #28]
 800182c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001830:	f043 030b 	orr.w	r3, r3, #11
 8001834:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	69fa      	ldr	r2, [r7, #28]
 8001840:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001844:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001848:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001854:	4619      	mov	r1, r3
 8001856:	4610      	mov	r0, r2
 8001858:	f002 ff08 	bl	800466c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800186a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f002 fe3d 	bl	80044f0 <USB_ReadInterrupts>
 8001876:	4603      	mov	r3, r0
 8001878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800187c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001880:	d124      	bne.n	80018cc <HAL_PCD_IRQHandler+0x5ca>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f002 fecd 	bl	8004626 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f002 f825 	bl	80038e0 <USB_GetDevSpeed>
 8001896:	4603      	mov	r3, r0
 8001898:	461a      	mov	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681c      	ldr	r4, [r3, #0]
 80018a2:	f001 f8d5 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 80018a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	4620      	mov	r0, r4
 80018b2:	f001 fda7 	bl	8003404 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f004 fd6f 	bl	800639a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	695a      	ldr	r2, [r3, #20]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f002 fe0d 	bl	80044f0 <USB_ReadInterrupts>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b08      	cmp	r3, #8
 80018de:	d10a      	bne.n	80018f6 <HAL_PCD_IRQHandler+0x5f4>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f004 fd4c 	bl	800637e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f002 0208 	and.w	r2, r2, #8
 80018f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f002 fdf8 	bl	80044f0 <USB_ReadInterrupts>
 8001900:	4603      	mov	r3, r0
 8001902:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800190a:	d10f      	bne.n	800192c <HAL_PCD_IRQHandler+0x62a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	b2db      	uxtb	r3, r3
 8001914:	4619      	mov	r1, r3
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f004 fda4 	bl	8006464 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800192a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f002 fddd 	bl	80044f0 <USB_ReadInterrupts>
 8001936:	4603      	mov	r3, r0
 8001938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001940:	d10f      	bne.n	8001962 <HAL_PCD_IRQHandler+0x660>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	b2db      	uxtb	r3, r3
 800194a:	4619      	mov	r1, r3
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f004 fd77 	bl	8006440 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	695a      	ldr	r2, [r3, #20]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001960:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f002 fdc2 	bl	80044f0 <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001976:	d10a      	bne.n	800198e <HAL_PCD_IRQHandler+0x68c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f004 fd85 	bl	8006488 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	695a      	ldr	r2, [r3, #20]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800198c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f002 fdac 	bl	80044f0 <USB_ReadInterrupts>
 8001998:	4603      	mov	r3, r0
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d115      	bne.n	80019ce <HAL_PCD_IRQHandler+0x6cc>
    {
      temp = hpcd->Instance->GOTGINT;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <HAL_PCD_IRQHandler+0x6b8>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f004 fd75 	bl	80064a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6859      	ldr	r1, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	e000      	b.n	80019ce <HAL_PCD_IRQHandler+0x6cc>
      return;
 80019cc:	bf00      	nop
    }
  }
}
 80019ce:	3734      	adds	r7, #52	; 0x34
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd90      	pop	{r4, r7, pc}

080019d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d101      	bne.n	80019ee <HAL_PCD_SetAddress+0x1a>
 80019ea:	2302      	movs	r3, #2
 80019ec:	e013      	b.n	8001a16 <HAL_PCD_SetAddress+0x42>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2201      	movs	r2, #1
 80019f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	78fa      	ldrb	r2, [r7, #3]
 80019fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	78fa      	ldrb	r2, [r7, #3]
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fd0d 	bl	8004426 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	4608      	mov	r0, r1
 8001a28:	4611      	mov	r1, r2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	70fb      	strb	r3, [r7, #3]
 8001a30:	460b      	mov	r3, r1
 8001a32:	803b      	strh	r3, [r7, #0]
 8001a34:	4613      	mov	r3, r2
 8001a36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	da0f      	bge.n	8001a64 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	f003 020f 	and.w	r2, r3, #15
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	3338      	adds	r3, #56	; 0x38
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	4413      	add	r3, r2
 8001a58:	3304      	adds	r3, #4
 8001a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	705a      	strb	r2, [r3, #1]
 8001a62:	e00f      	b.n	8001a84 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	f003 020f 	and.w	r2, r3, #15
 8001a6a:	4613      	mov	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	1a9b      	subs	r3, r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a90:	883a      	ldrh	r2, [r7, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	78ba      	ldrb	r2, [r7, #2]
 8001a9a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	785b      	ldrb	r3, [r3, #1]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d004      	beq.n	8001aae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001aae:	78bb      	ldrb	r3, [r7, #2]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d102      	bne.n	8001aba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_PCD_EP_Open+0xaa>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e00e      	b.n	8001ae6 <HAL_PCD_EP_Open+0xc8>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68f9      	ldr	r1, [r7, #12]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f001 ff20 	bl	800391c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001ae4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	460b      	mov	r3, r1
 8001af8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001afa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	da0f      	bge.n	8001b22 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	f003 020f 	and.w	r2, r3, #15
 8001b08:	4613      	mov	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	1a9b      	subs	r3, r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	3338      	adds	r3, #56	; 0x38
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	4413      	add	r3, r2
 8001b16:	3304      	adds	r3, #4
 8001b18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	705a      	strb	r2, [r3, #1]
 8001b20:	e00f      	b.n	8001b42 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b22:	78fb      	ldrb	r3, [r7, #3]
 8001b24:	f003 020f 	and.w	r2, r3, #15
 8001b28:	4613      	mov	r3, r2
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	1a9b      	subs	r3, r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	3304      	adds	r3, #4
 8001b3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	f003 030f 	and.w	r3, r3, #15
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d101      	bne.n	8001b5c <HAL_PCD_EP_Close+0x6e>
 8001b58:	2302      	movs	r3, #2
 8001b5a:	e00e      	b.n	8001b7a <HAL_PCD_EP_Close+0x8c>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68f9      	ldr	r1, [r7, #12]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f001 ff5c 	bl	8003a28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	60f8      	str	r0, [r7, #12]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	460b      	mov	r3, r1
 8001b90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b92:	7afb      	ldrb	r3, [r7, #11]
 8001b94:	f003 020f 	and.w	r2, r3, #15
 8001b98:	4613      	mov	r3, r2
 8001b9a:	00db      	lsls	r3, r3, #3
 8001b9c:	1a9b      	subs	r3, r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3304      	adds	r3, #4
 8001baa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bc4:	7afb      	ldrb	r3, [r7, #11]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bd0:	7afb      	ldrb	r3, [r7, #11]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6979      	ldr	r1, [r7, #20]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f002 f9d9 	bl	8003f98 <USB_EP0StartXfer>
 8001be6:	e005      	b.n	8001bf4 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6979      	ldr	r1, [r7, #20]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f001 fff6 	bl	8003be0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	460b      	mov	r3, r1
 8001c08:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	f003 020f 	and.w	r2, r3, #15
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	00db      	lsls	r3, r3, #3
 8001c16:	1a9b      	subs	r3, r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001c20:	681b      	ldr	r3, [r3, #0]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c3c:	7afb      	ldrb	r3, [r7, #11]
 8001c3e:	f003 020f 	and.w	r2, r3, #15
 8001c42:	4613      	mov	r3, r2
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	1a9b      	subs	r3, r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	3338      	adds	r3, #56	; 0x38
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4413      	add	r3, r2
 8001c50:	3304      	adds	r3, #4
 8001c52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c6c:	7afb      	ldrb	r3, [r7, #11]
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c78:	7afb      	ldrb	r3, [r7, #11]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d106      	bne.n	8001c90 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6979      	ldr	r1, [r7, #20]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f002 f985 	bl	8003f98 <USB_EP0StartXfer>
 8001c8e:	e005      	b.n	8001c9c <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6979      	ldr	r1, [r7, #20]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f001 ffa2 	bl	8003be0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	460b      	mov	r3, r1
 8001cb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	f003 020f 	and.w	r2, r3, #15
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d901      	bls.n	8001cc4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e04e      	b.n	8001d62 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	da0f      	bge.n	8001cec <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	f003 020f 	and.w	r2, r3, #15
 8001cd2:	4613      	mov	r3, r2
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	1a9b      	subs	r3, r3, r2
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	3338      	adds	r3, #56	; 0x38
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4413      	add	r3, r2
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	705a      	strb	r2, [r3, #1]
 8001cea:	e00d      	b.n	8001d08 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cec:	78fa      	ldrb	r2, [r7, #3]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3304      	adds	r3, #4
 8001d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2200      	movs	r2, #0
 8001d06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d0e:	78fb      	ldrb	r3, [r7, #3]
 8001d10:	f003 030f 	and.w	r3, r3, #15
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_PCD_EP_SetStall+0x82>
 8001d24:	2302      	movs	r3, #2
 8001d26:	e01c      	b.n	8001d62 <HAL_PCD_EP_SetStall+0xbc>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	68f9      	ldr	r1, [r7, #12]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 faa3 	bl	8004282 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d3c:	78fb      	ldrb	r3, [r7, #3]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d108      	bne.n	8001d58 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d50:	4619      	mov	r1, r3
 8001d52:	4610      	mov	r0, r2
 8001d54:	f002 fc8a 	bl	800466c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b084      	sub	sp, #16
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	f003 020f 	and.w	r2, r3, #15
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d901      	bls.n	8001d88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e042      	b.n	8001e0e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	da0f      	bge.n	8001db0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	f003 020f 	and.w	r2, r3, #15
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	1a9b      	subs	r3, r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	3338      	adds	r3, #56	; 0x38
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	3304      	adds	r3, #4
 8001da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2201      	movs	r2, #1
 8001dac:	705a      	strb	r2, [r3, #1]
 8001dae:	e00f      	b.n	8001dd0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db0:	78fb      	ldrb	r3, [r7, #3]
 8001db2:	f003 020f 	and.w	r2, r3, #15
 8001db6:	4613      	mov	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	1a9b      	subs	r3, r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	3304      	adds	r3, #4
 8001dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_PCD_EP_ClrStall+0x86>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e00e      	b.n	8001e0e <HAL_PCD_EP_ClrStall+0xa4>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68f9      	ldr	r1, [r7, #12]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 faac 	bl	800435c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b088      	sub	sp, #32
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
 8001e1e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	3338      	adds	r3, #56	; 0x38
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d901      	bls.n	8001e4e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e067      	b.n	8001f1e <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	695a      	ldr	r2, [r3, #20]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d902      	bls.n	8001e6a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3303      	adds	r3, #3
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e72:	e026      	b.n	8001ec2 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	695a      	ldr	r2, [r3, #20]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	69fa      	ldr	r2, [r7, #28]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d902      	bls.n	8001e90 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	3303      	adds	r3, #3
 8001e94:	089b      	lsrs	r3, r3, #2
 8001e96:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	68d9      	ldr	r1, [r3, #12]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	6978      	ldr	r0, [r7, #20]
 8001ea6:	f002 f994 	bl	80041d2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	441a      	add	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	699a      	ldr	r2, [r3, #24]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	441a      	add	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d809      	bhi.n	8001eec <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	699a      	ldr	r2, [r3, #24]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d203      	bcs.n	8001eec <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1c3      	bne.n	8001e74 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	695a      	ldr	r2, [r3, #20]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d811      	bhi.n	8001f1c <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	2201      	movs	r2, #1
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	6939      	ldr	r1, [r7, #16]
 8001f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f18:	4013      	ands	r3, r2
 8001f1a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3720      	adds	r7, #32
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
	...

08001f28 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	333c      	adds	r3, #60	; 0x3c
 8001f40:	3304      	adds	r3, #4
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	015a      	lsls	r2, r3, #5
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4a19      	ldr	r2, [pc, #100]	; (8001fc0 <PCD_EP_OutXfrComplete_int+0x98>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d124      	bne.n	8001fa8 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00a      	beq.n	8001f7e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f74:	461a      	mov	r2, r3
 8001f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f7a:	6093      	str	r3, [r2, #8]
 8001f7c:	e01a      	b.n	8001fb4 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	f003 0320 	and.w	r3, r3, #32
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d008      	beq.n	8001f9a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f94:	461a      	mov	r2, r3
 8001f96:	2320      	movs	r3, #32
 8001f98:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f004 f9b7 	bl	8006314 <HAL_PCD_DataOutStageCallback>
 8001fa6:	e005      	b.n	8001fb4 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	4619      	mov	r1, r3
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f004 f9b0 	bl	8006314 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	4f54310a 	.word	0x4f54310a

08001fc4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	333c      	adds	r3, #60	; 0x3c
 8001fdc:	3304      	adds	r3, #4
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4a0c      	ldr	r2, [pc, #48]	; (8002028 <PCD_EP_OutSetupPacket_int+0x64>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d90e      	bls.n	8002018 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002000:	2b00      	cmp	r3, #0
 8002002:	d009      	beq.n	8002018 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	015a      	lsls	r2, r3, #5
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4413      	add	r3, r2
 800200c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002010:	461a      	mov	r2, r3
 8002012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002016:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f004 f969 	bl	80062f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	4f54300a 	.word	0x4f54300a

0800202c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
 8002038:	4613      	mov	r3, r2
 800203a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d107      	bne.n	800205a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800204a:	883b      	ldrh	r3, [r7, #0]
 800204c:	0419      	lsls	r1, r3, #16
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	430a      	orrs	r2, r1
 8002056:	629a      	str	r2, [r3, #40]	; 0x28
 8002058:	e028      	b.n	80020ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	68ba      	ldr	r2, [r7, #8]
 8002064:	4413      	add	r3, r2
 8002066:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002068:	2300      	movs	r3, #0
 800206a:	73fb      	strb	r3, [r7, #15]
 800206c:	e00d      	b.n	800208a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	3340      	adds	r3, #64	; 0x40
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	0c1b      	lsrs	r3, r3, #16
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	4413      	add	r3, r2
 8002082:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002084:	7bfb      	ldrb	r3, [r7, #15]
 8002086:	3301      	adds	r3, #1
 8002088:	73fb      	strb	r3, [r7, #15]
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	3b01      	subs	r3, #1
 8002090:	429a      	cmp	r2, r3
 8002092:	d3ec      	bcc.n	800206e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002094:	883b      	ldrh	r3, [r7, #0]
 8002096:	0418      	lsls	r0, r3, #16
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6819      	ldr	r1, [r3, #0]
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	3b01      	subs	r3, #1
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	4302      	orrs	r2, r0
 80020a4:	3340      	adds	r3, #64	; 0x40
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	887a      	ldrh	r2, [r7, #2]
 80020ca:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr

080020d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e304      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8087 	beq.w	8002206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f8:	4b92      	ldr	r3, [pc, #584]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	2b04      	cmp	r3, #4
 8002102:	d00c      	beq.n	800211e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002104:	4b8f      	ldr	r3, [pc, #572]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	2b08      	cmp	r3, #8
 800210e:	d112      	bne.n	8002136 <HAL_RCC_OscConfig+0x5e>
 8002110:	4b8c      	ldr	r3, [pc, #560]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211c:	d10b      	bne.n	8002136 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211e:	4b89      	ldr	r3, [pc, #548]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d06c      	beq.n	8002204 <HAL_RCC_OscConfig+0x12c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d168      	bne.n	8002204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e2de      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213e:	d106      	bne.n	800214e <HAL_RCC_OscConfig+0x76>
 8002140:	4b80      	ldr	r3, [pc, #512]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a7f      	ldr	r2, [pc, #508]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 8002146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	e02e      	b.n	80021ac <HAL_RCC_OscConfig+0xd4>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x98>
 8002156:	4b7b      	ldr	r3, [pc, #492]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a7a      	ldr	r2, [pc, #488]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 800215c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b78      	ldr	r3, [pc, #480]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a77      	ldr	r2, [pc, #476]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 8002168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e01d      	b.n	80021ac <HAL_RCC_OscConfig+0xd4>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0xbc>
 800217a:	4b72      	ldr	r3, [pc, #456]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a71      	ldr	r2, [pc, #452]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 8002180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	4b6f      	ldr	r3, [pc, #444]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a6e      	ldr	r2, [pc, #440]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 800218c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e00b      	b.n	80021ac <HAL_RCC_OscConfig+0xd4>
 8002194:	4b6b      	ldr	r3, [pc, #428]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a6a      	ldr	r2, [pc, #424]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 800219a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b68      	ldr	r3, [pc, #416]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a67      	ldr	r2, [pc, #412]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d013      	beq.n	80021dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b4:	f7fe fbca 	bl	800094c <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7fe fbc6 	bl	800094c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e292      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	4b5d      	ldr	r3, [pc, #372]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0xe4>
 80021da:	e014      	b.n	8002206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7fe fbb6 	bl	800094c <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7fe fbb2 	bl	800094c <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	; 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e27e      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f6:	4b53      	ldr	r3, [pc, #332]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x10c>
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d063      	beq.n	80022da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002212:	4b4c      	ldr	r3, [pc, #304]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00b      	beq.n	8002236 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800221e:	4b49      	ldr	r3, [pc, #292]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b08      	cmp	r3, #8
 8002228:	d11c      	bne.n	8002264 <HAL_RCC_OscConfig+0x18c>
 800222a:	4b46      	ldr	r3, [pc, #280]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d116      	bne.n	8002264 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002236:	4b43      	ldr	r3, [pc, #268]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d005      	beq.n	800224e <HAL_RCC_OscConfig+0x176>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d001      	beq.n	800224e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e252      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800224e:	4b3d      	ldr	r3, [pc, #244]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	4939      	ldr	r1, [pc, #228]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002262:	e03a      	b.n	80022da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d020      	beq.n	80022ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800226c:	4b36      	ldr	r3, [pc, #216]	; (8002348 <HAL_RCC_OscConfig+0x270>)
 800226e:	2201      	movs	r2, #1
 8002270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002272:	f7fe fb6b 	bl	800094c <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800227a:	f7fe fb67 	bl	800094c <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e233      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228c:	4b2d      	ldr	r3, [pc, #180]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002298:	4b2a      	ldr	r3, [pc, #168]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4927      	ldr	r1, [pc, #156]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]
 80022ac:	e015      	b.n	80022da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ae:	4b26      	ldr	r3, [pc, #152]	; (8002348 <HAL_RCC_OscConfig+0x270>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b4:	f7fe fb4a 	bl	800094c <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022bc:	f7fe fb46 	bl	800094c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e212      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ce:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1f0      	bne.n	80022bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d03a      	beq.n	800235c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d019      	beq.n	8002322 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ee:	4b17      	ldr	r3, [pc, #92]	; (800234c <HAL_RCC_OscConfig+0x274>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f4:	f7fe fb2a 	bl	800094c <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fc:	f7fe fb26 	bl	800094c <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e1f2      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230e:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <HAL_RCC_OscConfig+0x26c>)
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800231a:	2001      	movs	r0, #1
 800231c:	f000 fbca 	bl	8002ab4 <RCC_Delay>
 8002320:	e01c      	b.n	800235c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_RCC_OscConfig+0x274>)
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002328:	f7fe fb10 	bl	800094c <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232e:	e00f      	b.n	8002350 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002330:	f7fe fb0c 	bl	800094c <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d908      	bls.n	8002350 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e1d8      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000
 8002348:	42420000 	.word	0x42420000
 800234c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002350:	4b9b      	ldr	r3, [pc, #620]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1e9      	bne.n	8002330 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80a6 	beq.w	80024b6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236e:	4b94      	ldr	r3, [pc, #592]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10d      	bne.n	8002396 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	4b91      	ldr	r3, [pc, #580]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	4a90      	ldr	r2, [pc, #576]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002384:	61d3      	str	r3, [r2, #28]
 8002386:	4b8e      	ldr	r3, [pc, #568]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002392:	2301      	movs	r3, #1
 8002394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002396:	4b8b      	ldr	r3, [pc, #556]	; (80025c4 <HAL_RCC_OscConfig+0x4ec>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d118      	bne.n	80023d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a2:	4b88      	ldr	r3, [pc, #544]	; (80025c4 <HAL_RCC_OscConfig+0x4ec>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a87      	ldr	r2, [pc, #540]	; (80025c4 <HAL_RCC_OscConfig+0x4ec>)
 80023a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ae:	f7fe facd 	bl	800094c <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b6:	f7fe fac9 	bl	800094c <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b64      	cmp	r3, #100	; 0x64
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e195      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	4b7e      	ldr	r3, [pc, #504]	; (80025c4 <HAL_RCC_OscConfig+0x4ec>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d106      	bne.n	80023ea <HAL_RCC_OscConfig+0x312>
 80023dc:	4b78      	ldr	r3, [pc, #480]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	4a77      	ldr	r2, [pc, #476]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6213      	str	r3, [r2, #32]
 80023e8:	e02d      	b.n	8002446 <HAL_RCC_OscConfig+0x36e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0x334>
 80023f2:	4b73      	ldr	r3, [pc, #460]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	4a72      	ldr	r2, [pc, #456]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	6213      	str	r3, [r2, #32]
 80023fe:	4b70      	ldr	r3, [pc, #448]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4a6f      	ldr	r2, [pc, #444]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002404:	f023 0304 	bic.w	r3, r3, #4
 8002408:	6213      	str	r3, [r2, #32]
 800240a:	e01c      	b.n	8002446 <HAL_RCC_OscConfig+0x36e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2b05      	cmp	r3, #5
 8002412:	d10c      	bne.n	800242e <HAL_RCC_OscConfig+0x356>
 8002414:	4b6a      	ldr	r3, [pc, #424]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	4a69      	ldr	r2, [pc, #420]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 800241a:	f043 0304 	orr.w	r3, r3, #4
 800241e:	6213      	str	r3, [r2, #32]
 8002420:	4b67      	ldr	r3, [pc, #412]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	4a66      	ldr	r2, [pc, #408]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6213      	str	r3, [r2, #32]
 800242c:	e00b      	b.n	8002446 <HAL_RCC_OscConfig+0x36e>
 800242e:	4b64      	ldr	r3, [pc, #400]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	4a63      	ldr	r2, [pc, #396]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	6213      	str	r3, [r2, #32]
 800243a:	4b61      	ldr	r3, [pc, #388]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4a60      	ldr	r2, [pc, #384]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002440:	f023 0304 	bic.w	r3, r3, #4
 8002444:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d015      	beq.n	800247a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244e:	f7fe fa7d 	bl	800094c <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002454:	e00a      	b.n	800246c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002456:	f7fe fa79 	bl	800094c <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f241 3288 	movw	r2, #5000	; 0x1388
 8002464:	4293      	cmp	r3, r2
 8002466:	d901      	bls.n	800246c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e143      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800246c:	4b54      	ldr	r3, [pc, #336]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0ee      	beq.n	8002456 <HAL_RCC_OscConfig+0x37e>
 8002478:	e014      	b.n	80024a4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247a:	f7fe fa67 	bl	800094c <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002480:	e00a      	b.n	8002498 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002482:	f7fe fa63 	bl	800094c <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002490:	4293      	cmp	r3, r2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e12d      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002498:	4b49      	ldr	r3, [pc, #292]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1ee      	bne.n	8002482 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024a4:	7dfb      	ldrb	r3, [r7, #23]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d105      	bne.n	80024b6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024aa:	4b45      	ldr	r3, [pc, #276]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	4a44      	ldr	r2, [pc, #272]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 80024b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 808c 	beq.w	80025d8 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80024c0:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024cc:	d10e      	bne.n	80024ec <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80024ce:	4b3c      	ldr	r3, [pc, #240]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d108      	bne.n	80024ec <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80024da:	4b39      	ldr	r3, [pc, #228]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80024e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e103      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d14e      	bne.n	8002592 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80024f4:	4b32      	ldr	r3, [pc, #200]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d009      	beq.n	8002514 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002500:	4b2f      	ldr	r3, [pc, #188]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002504:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0ef      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002514:	4b2c      	ldr	r3, [pc, #176]	; (80025c8 <HAL_RCC_OscConfig+0x4f0>)
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251a:	f7fe fa17 	bl	800094c <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002522:	f7fe fa13 	bl	800094c <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b64      	cmp	r3, #100	; 0x64
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e0df      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002534:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1f0      	bne.n	8002522 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002540:	4b1f      	ldr	r3, [pc, #124]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254c:	491c      	ldr	r1, [pc, #112]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 800254e:	4313      	orrs	r3, r2
 8002550:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002552:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4918      	ldr	r1, [pc, #96]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002560:	4313      	orrs	r3, r2
 8002562:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <HAL_RCC_OscConfig+0x4f0>)
 8002566:	2201      	movs	r2, #1
 8002568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800256a:	f7fe f9ef 	bl	800094c <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002572:	f7fe f9eb 	bl	800094c <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b64      	cmp	r3, #100	; 0x64
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e0b7      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002584:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x49a>
 8002590:	e022      	b.n	80025d8 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002592:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <HAL_RCC_OscConfig+0x4e8>)
 8002598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800259c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_RCC_OscConfig+0x4f0>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7fe f9d2 	bl	800094c <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80025aa:	e00f      	b.n	80025cc <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80025ac:	f7fe f9ce 	bl	800094c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	; 0x64
 80025b8:	d908      	bls.n	80025cc <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e09a      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40007000 	.word	0x40007000
 80025c8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80025cc:	4b4b      	ldr	r3, [pc, #300]	; (80026fc <HAL_RCC_OscConfig+0x624>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d1e9      	bne.n	80025ac <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8088 	beq.w	80026f2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e2:	4b46      	ldr	r3, [pc, #280]	; (80026fc <HAL_RCC_OscConfig+0x624>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d068      	beq.n	80026c0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d14d      	bne.n	8002692 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f6:	4b42      	ldr	r3, [pc, #264]	; (8002700 <HAL_RCC_OscConfig+0x628>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7fe f9a6 	bl	800094c <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002604:	f7fe f9a2 	bl	800094c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e06e      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002616:	4b39      	ldr	r3, [pc, #228]	; (80026fc <HAL_RCC_OscConfig+0x624>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800262a:	d10f      	bne.n	800264c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800262c:	4b33      	ldr	r3, [pc, #204]	; (80026fc <HAL_RCC_OscConfig+0x624>)
 800262e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4931      	ldr	r1, [pc, #196]	; (80026fc <HAL_RCC_OscConfig+0x624>)
 8002636:	4313      	orrs	r3, r2
 8002638:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800263a:	4b30      	ldr	r3, [pc, #192]	; (80026fc <HAL_RCC_OscConfig+0x624>)
 800263c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263e:	f023 020f 	bic.w	r2, r3, #15
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	492d      	ldr	r1, [pc, #180]	; (80026fc <HAL_RCC_OscConfig+0x624>)
 8002648:	4313      	orrs	r3, r2
 800264a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800264c:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <HAL_RCC_OscConfig+0x624>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800265c:	430b      	orrs	r3, r1
 800265e:	4927      	ldr	r1, [pc, #156]	; (80026fc <HAL_RCC_OscConfig+0x624>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002664:	4b26      	ldr	r3, [pc, #152]	; (8002700 <HAL_RCC_OscConfig+0x628>)
 8002666:	2201      	movs	r2, #1
 8002668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266a:	f7fe f96f 	bl	800094c <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002672:	f7fe f96b 	bl	800094c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e037      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002684:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <HAL_RCC_OscConfig+0x624>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x59a>
 8002690:	e02f      	b.n	80026f2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002692:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <HAL_RCC_OscConfig+0x628>)
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe f958 	bl	800094c <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a0:	f7fe f954 	bl	800094c <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e020      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b2:	4b12      	ldr	r3, [pc, #72]	; (80026fc <HAL_RCC_OscConfig+0x624>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f0      	bne.n	80026a0 <HAL_RCC_OscConfig+0x5c8>
 80026be:	e018      	b.n	80026f2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e013      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_RCC_OscConfig+0x624>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	429a      	cmp	r2, r3
 80026de:	d106      	bne.n	80026ee <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d001      	beq.n	80026f2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000
 8002700:	42420060 	.word	0x42420060

08002704 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0d0      	b.n	80028ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002718:	4b6a      	ldr	r3, [pc, #424]	; (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d910      	bls.n	8002748 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b67      	ldr	r3, [pc, #412]	; (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 0207 	bic.w	r2, r3, #7
 800272e:	4965      	ldr	r1, [pc, #404]	; (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b63      	ldr	r3, [pc, #396]	; (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0b8      	b.n	80028ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d020      	beq.n	8002796 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002760:	4b59      	ldr	r3, [pc, #356]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	4a58      	ldr	r2, [pc, #352]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800276a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0308 	and.w	r3, r3, #8
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002778:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	4a52      	ldr	r2, [pc, #328]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002782:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002784:	4b50      	ldr	r3, [pc, #320]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	494d      	ldr	r1, [pc, #308]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	4313      	orrs	r3, r2
 8002794:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d040      	beq.n	8002824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d115      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e07f      	b.n	80028ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d107      	bne.n	80027d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c2:	4b41      	ldr	r3, [pc, #260]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e073      	b.n	80028ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d2:	4b3d      	ldr	r3, [pc, #244]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e06b      	b.n	80028ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027e2:	4b39      	ldr	r3, [pc, #228]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f023 0203 	bic.w	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	4936      	ldr	r1, [pc, #216]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027f4:	f7fe f8aa 	bl	800094c <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fa:	e00a      	b.n	8002812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fc:	f7fe f8a6 	bl	800094c <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	; 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e053      	b.n	80028ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002812:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 020c 	and.w	r2, r3, #12
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	429a      	cmp	r2, r3
 8002822:	d1eb      	bne.n	80027fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002824:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d210      	bcs.n	8002854 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 0207 	bic.w	r2, r3, #7
 800283a:	4922      	ldr	r1, [pc, #136]	; (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b20      	ldr	r3, [pc, #128]	; (80028c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e032      	b.n	80028ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4916      	ldr	r1, [pc, #88]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	4313      	orrs	r3, r2
 8002870:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d009      	beq.n	8002892 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	490e      	ldr	r1, [pc, #56]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002892:	f000 f821 	bl	80028d8 <HAL_RCC_GetSysClockFreq>
 8002896:	4601      	mov	r1, r0
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 80028a4:	5cd3      	ldrb	r3, [r2, r3]
 80028a6:	fa21 f303 	lsr.w	r3, r1, r3
 80028aa:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <HAL_RCC_ClockConfig+0x1cc>)
 80028ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ae:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1d0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe f808 	bl	80008c8 <HAL_InitTick>

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40022000 	.word	0x40022000
 80028c8:	40021000 	.word	0x40021000
 80028cc:	08006920 	.word	0x08006920
 80028d0:	20000000 	.word	0x20000000
 80028d4:	20000004 	.word	0x20000004

080028d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028da:	b091      	sub	sp, #68	; 0x44
 80028dc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80028de:	4b56      	ldr	r3, [pc, #344]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x160>)
 80028e0:	f107 0414 	add.w	r4, r7, #20
 80028e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028e6:	c407      	stmia	r4!, {r0, r1, r2}
 80028e8:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80028ea:	4b54      	ldr	r3, [pc, #336]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x164>)
 80028ec:	1d3c      	adds	r4, r7, #4
 80028ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	637b      	str	r3, [r7, #52]	; 0x34
 80028f8:	2300      	movs	r3, #0
 80028fa:	633b      	str	r3, [r7, #48]	; 0x30
 80028fc:	2300      	movs	r3, #0
 80028fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002900:	2300      	movs	r3, #0
 8002902:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8002904:	2300      	movs	r3, #0
 8002906:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002910:	4b4b      	ldr	r3, [pc, #300]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x168>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002918:	f003 030c 	and.w	r3, r3, #12
 800291c:	2b04      	cmp	r3, #4
 800291e:	d002      	beq.n	8002926 <HAL_RCC_GetSysClockFreq+0x4e>
 8002920:	2b08      	cmp	r3, #8
 8002922:	d003      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x54>
 8002924:	e07f      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002926:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002928:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800292a:	e07f      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800292c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292e:	0c9b      	lsrs	r3, r3, #18
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002938:	4413      	add	r3, r2
 800293a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d065      	beq.n	8002a16 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800294a:	4b3d      	ldr	r3, [pc, #244]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x168>)
 800294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002956:	4413      	add	r3, r2
 8002958:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800295c:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800295e:	4b38      	ldr	r3, [pc, #224]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x168>)
 8002960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d043      	beq.n	80029f2 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800296a:	4b35      	ldr	r3, [pc, #212]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x168>)
 800296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296e:	091b      	lsrs	r3, r3, #4
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	3301      	adds	r3, #1
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002978:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x168>)
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	0a1b      	lsrs	r3, r3, #8
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	3302      	adds	r3, #2
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002988:	4619      	mov	r1, r3
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002990:	f04f 0400 	mov.w	r4, #0
 8002994:	fb03 f502 	mul.w	r5, r3, r2
 8002998:	fb01 f004 	mul.w	r0, r1, r4
 800299c:	4428      	add	r0, r5
 800299e:	fba1 3403 	umull	r3, r4, r1, r3
 80029a2:	1902      	adds	r2, r0, r4
 80029a4:	4614      	mov	r4, r2
 80029a6:	4a27      	ldr	r2, [pc, #156]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x16c>)
 80029a8:	fb02 f104 	mul.w	r1, r2, r4
 80029ac:	2200      	movs	r2, #0
 80029ae:	fb02 f203 	mul.w	r2, r2, r3
 80029b2:	440a      	add	r2, r1
 80029b4:	4923      	ldr	r1, [pc, #140]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x16c>)
 80029b6:	fba3 5601 	umull	r5, r6, r3, r1
 80029ba:	1993      	adds	r3, r2, r6
 80029bc:	461e      	mov	r6, r3
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c0:	4619      	mov	r1, r3
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c8:	f04f 0400 	mov.w	r4, #0
 80029cc:	fb03 fc02 	mul.w	ip, r3, r2
 80029d0:	fb01 f004 	mul.w	r0, r1, r4
 80029d4:	4460      	add	r0, ip
 80029d6:	fba1 3403 	umull	r3, r4, r1, r3
 80029da:	1902      	adds	r2, r0, r4
 80029dc:	4614      	mov	r4, r2
 80029de:	461a      	mov	r2, r3
 80029e0:	4623      	mov	r3, r4
 80029e2:	4628      	mov	r0, r5
 80029e4:	4631      	mov	r1, r6
 80029e6:	f7fd fc1d 	bl	8000224 <__aeabi_uldivmod>
 80029ea:	4603      	mov	r3, r0
 80029ec:	460c      	mov	r4, r1
 80029ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029f0:	e007      	b.n	8002a02 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80029f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f4:	4a13      	ldr	r2, [pc, #76]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x16c>)
 80029f6:	fb02 f203 	mul.w	r2, r2, r3
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002a02:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002a06:	461a      	mov	r2, r3
 8002a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d108      	bne.n	8002a20 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8002a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a10:	085b      	lsrs	r3, r3, #1
 8002a12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a14:	e004      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	4a0b      	ldr	r2, [pc, #44]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x170>)
 8002a1a:	fb02 f303 	mul.w	r3, r2, r3
 8002a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8002a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a22:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a24:	e002      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x174>)
 8002a28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3744      	adds	r7, #68	; 0x44
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a36:	bf00      	nop
 8002a38:	080068b8 	.word	0x080068b8
 8002a3c:	080068c8 	.word	0x080068c8
 8002a40:	40021000 	.word	0x40021000
 8002a44:	00989680 	.word	0x00989680
 8002a48:	003d0900 	.word	0x003d0900
 8002a4c:	007a1200 	.word	0x007a1200

08002a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a54:	4b02      	ldr	r3, [pc, #8]	; (8002a60 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a56:	681b      	ldr	r3, [r3, #0]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	20000000 	.word	0x20000000

08002a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a68:	f7ff fff2 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002a6c:	4601      	mov	r1, r0
 8002a6e:	4b05      	ldr	r3, [pc, #20]	; (8002a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	4a03      	ldr	r2, [pc, #12]	; (8002a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a7a:	5cd3      	ldrb	r3, [r2, r3]
 8002a7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000
 8002a88:	08006930 	.word	0x08006930

08002a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a90:	f7ff ffde 	bl	8002a50 <HAL_RCC_GetHCLKFreq>
 8002a94:	4601      	mov	r1, r0
 8002a96:	4b05      	ldr	r3, [pc, #20]	; (8002aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	0adb      	lsrs	r3, r3, #11
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	4a03      	ldr	r2, [pc, #12]	; (8002ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa2:	5cd3      	ldrb	r3, [r2, r3]
 8002aa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	08006930 	.word	0x08006930

08002ab4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <RCC_Delay+0x34>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <RCC_Delay+0x38>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	0a5b      	lsrs	r3, r3, #9
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	fb02 f303 	mul.w	r3, r2, r3
 8002ace:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ad0:	bf00      	nop
  }
  while (Delay --);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1e5a      	subs	r2, r3, #1
 8002ad6:	60fa      	str	r2, [r7, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1f9      	bne.n	8002ad0 <RCC_Delay+0x1c>
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	10624dd3 	.word	0x10624dd3

08002af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	2300      	movs	r3, #0
 8002afe:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d07d      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b10:	2300      	movs	r3, #0
 8002b12:	76fb      	strb	r3, [r7, #27]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b14:	4b8b      	ldr	r3, [pc, #556]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10d      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b20:	4b88      	ldr	r3, [pc, #544]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	4a87      	ldr	r2, [pc, #540]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b2a:	61d3      	str	r3, [r2, #28]
 8002b2c:	4b85      	ldr	r3, [pc, #532]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b2e:	69db      	ldr	r3, [r3, #28]
 8002b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3c:	4b82      	ldr	r3, [pc, #520]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d118      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b48:	4b7f      	ldr	r3, [pc, #508]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a7e      	ldr	r2, [pc, #504]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b54:	f7fd fefa 	bl	800094c <HAL_GetTick>
 8002b58:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5a:	e008      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5c:	f7fd fef6 	bl	800094c <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	; 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e0e5      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6e:	4b76      	ldr	r3, [pc, #472]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0f0      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b7a:	4b72      	ldr	r3, [pc, #456]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b82:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d02e      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d027      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b98:	4b6a      	ldr	r3, [pc, #424]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ba2:	4b6a      	ldr	r3, [pc, #424]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ba8:	4b68      	ldr	r3, [pc, #416]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bae:	4a65      	ldr	r2, [pc, #404]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d014      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7fd fec5 	bl	800094c <HAL_GetTick>
 8002bc2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc4:	e00a      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc6:	f7fd fec1 	bl	800094c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e0ae      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bdc:	4b59      	ldr	r3, [pc, #356]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0ee      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002be8:	4b56      	ldr	r3, [pc, #344]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4953      	ldr	r1, [pc, #332]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bfa:	7efb      	ldrb	r3, [r7, #27]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c00:	4b50      	ldr	r3, [pc, #320]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	4a4f      	ldr	r2, [pc, #316]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c18:	4b4a      	ldr	r3, [pc, #296]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4947      	ldr	r1, [pc, #284]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0304 	and.w	r3, r3, #4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d008      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002c36:	4b43      	ldr	r3, [pc, #268]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	4940      	ldr	r1, [pc, #256]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8002c54:	4b3b      	ldr	r3, [pc, #236]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c58:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	4938      	ldr	r1, [pc, #224]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8002c66:	4b37      	ldr	r3, [pc, #220]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d105      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x18e>
 8002c72:	4b34      	ldr	r3, [pc, #208]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d148      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8002c88:	4b2e      	ldr	r3, [pc, #184]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d138      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8002c94:	4b2b      	ldr	r3, [pc, #172]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d009      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8002ca0:	4b28      	ldr	r3, [pc, #160]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e042      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8002cb4:	4b23      	ldr	r3, [pc, #140]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	4920      	ldr	r1, [pc, #128]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8002cc6:	4b1f      	ldr	r3, [pc, #124]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	491c      	ldr	r1, [pc, #112]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 8002cd8:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cda:	2201      	movs	r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cde:	f7fd fe35 	bl	800094c <HAL_GetTick>
 8002ce2:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ce6:	f7fd fe31 	bl	800094c <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b64      	cmp	r3, #100	; 0x64
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e020      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f0      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8002d04:	e009      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d001      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e00f      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	4904      	ldr	r1, [pc, #16]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40007000 	.word	0x40007000
 8002d4c:	42420440 	.word	0x42420440
 8002d50:	42420070 	.word	0x42420070

08002d54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e03f      	b.n	8002de6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fd fcd0 	bl	8000720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2224      	movs	r2, #36	; 0x24
 8002d84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 fa5d 	bl	8003258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	695a      	ldr	r2, [r3, #20]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68da      	ldr	r2, [r3, #12]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2220      	movs	r2, #32
 8002de0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10d      	bne.n	8002e42 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	f003 0320 	and.w	r3, r3, #32
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d008      	beq.n	8002e42 <HAL_UART_IRQHandler+0x52>
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 f98b 	bl	8003156 <UART_Receive_IT>
      return;
 8002e40:	e0d1      	b.n	8002fe6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 80b0 	beq.w	8002faa <HAL_UART_IRQHandler+0x1ba>
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d105      	bne.n	8002e60 <HAL_UART_IRQHandler+0x70>
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 80a5 	beq.w	8002faa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_UART_IRQHandler+0x90>
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_UART_IRQHandler+0xb0>
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e98:	f043 0202 	orr.w	r2, r3, #2
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00a      	beq.n	8002ec0 <HAL_UART_IRQHandler+0xd0>
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb8:	f043 0204 	orr.w	r2, r3, #4
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00f      	beq.n	8002eea <HAL_UART_IRQHandler+0xfa>
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	f003 0320 	and.w	r3, r3, #32
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d104      	bne.n	8002ede <HAL_UART_IRQHandler+0xee>
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d005      	beq.n	8002eea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee2:	f043 0208 	orr.w	r2, r3, #8
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d078      	beq.n	8002fe4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d007      	beq.n	8002f0c <HAL_UART_IRQHandler+0x11c>
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f925 	bl	8003156 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bf14      	ite	ne
 8002f1a:	2301      	movne	r3, #1
 8002f1c:	2300      	moveq	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f26:	f003 0308 	and.w	r3, r3, #8
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d102      	bne.n	8002f34 <HAL_UART_IRQHandler+0x144>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d031      	beq.n	8002f98 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f876 	bl	8003026 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d023      	beq.n	8002f90 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f56:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d013      	beq.n	8002f88 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f64:	4a21      	ldr	r2, [pc, #132]	; (8002fec <HAL_UART_IRQHandler+0x1fc>)
 8002f66:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd fe27 	bl	8000bc0 <HAL_DMA_Abort_IT>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d016      	beq.n	8002fa6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f82:	4610      	mov	r0, r2
 8002f84:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f86:	e00e      	b.n	8002fa6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f843 	bl	8003014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f8e:	e00a      	b.n	8002fa6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f83f 	bl	8003014 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f96:	e006      	b.n	8002fa6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f83b 	bl	8003014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002fa4:	e01e      	b.n	8002fe4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa6:	bf00      	nop
    return;
 8002fa8:	e01c      	b.n	8002fe4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x1d6>
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f862 	bl	8003088 <UART_Transmit_IT>
    return;
 8002fc4:	e00f      	b.n	8002fe6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <HAL_UART_IRQHandler+0x1f6>
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f8a3 	bl	8003126 <UART_EndTransmit_IT>
    return;
 8002fe0:	bf00      	nop
 8002fe2:	e000      	b.n	8002fe6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002fe4:	bf00      	nop
  }
}
 8002fe6:	3720      	adds	r7, #32
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	08003061 	.word	0x08003061

08002ff0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr

08003002 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800300a:	bf00      	nop
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	bc80      	pop	{r7}
 8003024:	4770      	bx	lr

08003026 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003026:	b480      	push	{r7}
 8003028:	b083      	sub	sp, #12
 800302a:	af00      	add	r7, sp, #0
 800302c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68da      	ldr	r2, [r3, #12]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800303c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695a      	ldr	r2, [r3, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0201 	bic.w	r2, r2, #1
 800304c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2220      	movs	r2, #32
 8003052:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr

08003060 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f7ff ffca 	bl	8003014 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b21      	cmp	r3, #33	; 0x21
 800309a:	d13e      	bne.n	800311a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a4:	d114      	bne.n	80030d0 <UART_Transmit_IT+0x48>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d110      	bne.n	80030d0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	461a      	mov	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030c2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	1c9a      	adds	r2, r3, #2
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	621a      	str	r2, [r3, #32]
 80030ce:	e008      	b.n	80030e2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	1c59      	adds	r1, r3, #1
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6211      	str	r1, [r2, #32]
 80030da:	781a      	ldrb	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	4619      	mov	r1, r3
 80030f0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d10f      	bne.n	8003116 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003104:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003114:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	e000      	b.n	800311c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800311a:	2302      	movs	r3, #2
  }
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr

08003126 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800313c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff ff52 	bl	8002ff0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b22      	cmp	r3, #34	; 0x22
 8003168:	d170      	bne.n	800324c <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003172:	d117      	bne.n	80031a4 <UART_Receive_IT+0x4e>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d113      	bne.n	80031a4 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800317c:	2300      	movs	r3, #0
 800317e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	b29b      	uxth	r3, r3
 800318e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003192:	b29a      	uxth	r2, r3
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319c:	1c9a      	adds	r2, r3, #2
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	629a      	str	r2, [r3, #40]	; 0x28
 80031a2:	e026      	b.n	80031f2 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b6:	d007      	beq.n	80031c8 <UART_Receive_IT+0x72>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10a      	bne.n	80031d6 <UART_Receive_IT+0x80>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d106      	bne.n	80031d6 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	701a      	strb	r2, [r3, #0]
 80031d4:	e008      	b.n	80031e8 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	4619      	mov	r1, r3
 8003200:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003202:	2b00      	cmp	r3, #0
 8003204:	d120      	bne.n	8003248 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0220 	bic.w	r2, r2, #32
 8003214:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68da      	ldr	r2, [r3, #12]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003224:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695a      	ldr	r2, [r3, #20]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0201 	bic.w	r2, r2, #1
 8003234:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2220      	movs	r2, #32
 800323a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff fedf 	bl	8003002 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	e002      	b.n	800324e <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	e000      	b.n	800324e <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800324c:	2302      	movs	r3, #2
  }
}
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003292:	f023 030c 	bic.w	r3, r3, #12
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	430b      	orrs	r3, r1
 800329e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a2c      	ldr	r2, [pc, #176]	; (800336c <UART_SetConfig+0x114>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d103      	bne.n	80032c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032c0:	f7ff fbe4 	bl	8002a8c <HAL_RCC_GetPCLK2Freq>
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	e002      	b.n	80032ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032c8:	f7ff fbcc 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 80032cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	009a      	lsls	r2, r3, #2
 80032d8:	441a      	add	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	4a22      	ldr	r2, [pc, #136]	; (8003370 <UART_SetConfig+0x118>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	0119      	lsls	r1, r3, #4
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	009a      	lsls	r2, r3, #2
 80032f8:	441a      	add	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	fbb2 f2f3 	udiv	r2, r2, r3
 8003304:	4b1a      	ldr	r3, [pc, #104]	; (8003370 <UART_SetConfig+0x118>)
 8003306:	fba3 0302 	umull	r0, r3, r3, r2
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	2064      	movs	r0, #100	; 0x64
 800330e:	fb00 f303 	mul.w	r3, r0, r3
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	3332      	adds	r3, #50	; 0x32
 8003318:	4a15      	ldr	r2, [pc, #84]	; (8003370 <UART_SetConfig+0x118>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003324:	4419      	add	r1, r3
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	009a      	lsls	r2, r3, #2
 8003330:	441a      	add	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	fbb2 f2f3 	udiv	r2, r2, r3
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <UART_SetConfig+0x118>)
 800333e:	fba3 0302 	umull	r0, r3, r3, r2
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	2064      	movs	r0, #100	; 0x64
 8003346:	fb00 f303 	mul.w	r3, r0, r3
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	3332      	adds	r3, #50	; 0x32
 8003350:	4a07      	ldr	r2, [pc, #28]	; (8003370 <UART_SetConfig+0x118>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	f003 020f 	and.w	r2, r3, #15
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	440a      	add	r2, r1
 8003362:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40013800 	.word	0x40013800
 8003370:	51eb851f 	.word	0x51eb851f

08003374 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003374:	b084      	sub	sp, #16
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	f107 001c 	add.w	r0, r7, #28
 8003382:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	2b01      	cmp	r3, #1
 800338a:	d122      	bne.n	80033d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80033a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80033b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d105      	bne.n	80033c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f001 f998 	bl	80046fc <USB_CoreReset>
 80033cc:	4603      	mov	r3, r0
 80033ce:	73fb      	strb	r3, [r7, #15]
 80033d0:	e010      	b.n	80033f4 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f001 f98c 	bl	80046fc <USB_CoreReset>
 80033e4:	4603      	mov	r3, r0
 80033e6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003400:	b004      	add	sp, #16
 8003402:	4770      	bx	lr

08003404 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	4613      	mov	r3, r2
 8003410:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	2b02      	cmp	r3, #2
 8003416:	d165      	bne.n	80034e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4a3e      	ldr	r2, [pc, #248]	; (8003514 <USB_SetTurnaroundTime+0x110>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d906      	bls.n	800342e <USB_SetTurnaroundTime+0x2a>
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4a3d      	ldr	r2, [pc, #244]	; (8003518 <USB_SetTurnaroundTime+0x114>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d802      	bhi.n	800342e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003428:	230f      	movs	r3, #15
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	e05c      	b.n	80034e8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	4a39      	ldr	r2, [pc, #228]	; (8003518 <USB_SetTurnaroundTime+0x114>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d906      	bls.n	8003444 <USB_SetTurnaroundTime+0x40>
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	4a38      	ldr	r2, [pc, #224]	; (800351c <USB_SetTurnaroundTime+0x118>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d802      	bhi.n	8003444 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800343e:	230e      	movs	r3, #14
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	e051      	b.n	80034e8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4a35      	ldr	r2, [pc, #212]	; (800351c <USB_SetTurnaroundTime+0x118>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d906      	bls.n	800345a <USB_SetTurnaroundTime+0x56>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4a34      	ldr	r2, [pc, #208]	; (8003520 <USB_SetTurnaroundTime+0x11c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d802      	bhi.n	800345a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003454:	230d      	movs	r3, #13
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	e046      	b.n	80034e8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	4a30      	ldr	r2, [pc, #192]	; (8003520 <USB_SetTurnaroundTime+0x11c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d906      	bls.n	8003470 <USB_SetTurnaroundTime+0x6c>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	4a2f      	ldr	r2, [pc, #188]	; (8003524 <USB_SetTurnaroundTime+0x120>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d802      	bhi.n	8003470 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800346a:	230c      	movs	r3, #12
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	e03b      	b.n	80034e8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	4a2c      	ldr	r2, [pc, #176]	; (8003524 <USB_SetTurnaroundTime+0x120>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d906      	bls.n	8003486 <USB_SetTurnaroundTime+0x82>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4a2b      	ldr	r2, [pc, #172]	; (8003528 <USB_SetTurnaroundTime+0x124>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d802      	bhi.n	8003486 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003480:	230b      	movs	r3, #11
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	e030      	b.n	80034e8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	4a27      	ldr	r2, [pc, #156]	; (8003528 <USB_SetTurnaroundTime+0x124>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d906      	bls.n	800349c <USB_SetTurnaroundTime+0x98>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	4a26      	ldr	r2, [pc, #152]	; (800352c <USB_SetTurnaroundTime+0x128>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d802      	bhi.n	800349c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003496:	230a      	movs	r3, #10
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	e025      	b.n	80034e8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4a23      	ldr	r2, [pc, #140]	; (800352c <USB_SetTurnaroundTime+0x128>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d906      	bls.n	80034b2 <USB_SetTurnaroundTime+0xae>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4a22      	ldr	r2, [pc, #136]	; (8003530 <USB_SetTurnaroundTime+0x12c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d802      	bhi.n	80034b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80034ac:	2309      	movs	r3, #9
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	e01a      	b.n	80034e8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4a1e      	ldr	r2, [pc, #120]	; (8003530 <USB_SetTurnaroundTime+0x12c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d906      	bls.n	80034c8 <USB_SetTurnaroundTime+0xc4>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <USB_SetTurnaroundTime+0x130>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d802      	bhi.n	80034c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80034c2:	2308      	movs	r3, #8
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e00f      	b.n	80034e8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4a1a      	ldr	r2, [pc, #104]	; (8003534 <USB_SetTurnaroundTime+0x130>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d906      	bls.n	80034de <USB_SetTurnaroundTime+0xda>
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	4a19      	ldr	r2, [pc, #100]	; (8003538 <USB_SetTurnaroundTime+0x134>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d802      	bhi.n	80034de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80034d8:	2307      	movs	r3, #7
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	e004      	b.n	80034e8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80034de:	2306      	movs	r3, #6
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	e001      	b.n	80034e8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80034e4:	2309      	movs	r3, #9
 80034e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	68da      	ldr	r2, [r3, #12]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	029b      	lsls	r3, r3, #10
 80034fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003500:	431a      	orrs	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	371c      	adds	r7, #28
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	00d8acbf 	.word	0x00d8acbf
 8003518:	00e4e1bf 	.word	0x00e4e1bf
 800351c:	00f423ff 	.word	0x00f423ff
 8003520:	0106737f 	.word	0x0106737f
 8003524:	011a499f 	.word	0x011a499f
 8003528:	01312cff 	.word	0x01312cff
 800352c:	014ca43f 	.word	0x014ca43f
 8003530:	016e35ff 	.word	0x016e35ff
 8003534:	01a6ab1f 	.word	0x01a6ab1f
 8003538:	01e847ff 	.word	0x01e847ff

0800353c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f043 0201 	orr.w	r2, r3, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f023 0201 	bic.w	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003594:	78fb      	ldrb	r3, [r7, #3]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d106      	bne.n	80035a8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	60da      	str	r2, [r3, #12]
 80035a6:	e00b      	b.n	80035c0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80035a8:	78fb      	ldrb	r3, [r7, #3]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	60da      	str	r2, [r3, #12]
 80035ba:	e001      	b.n	80035c0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e003      	b.n	80035c8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80035c0:	2032      	movs	r0, #50	; 0x32
 80035c2:	f7fd f9cd 	bl	8000960 <HAL_Delay>

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80035d0:	b084      	sub	sp, #16
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80035de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80035e2:	2300      	movs	r3, #0
 80035e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80035ea:	2300      	movs	r3, #0
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	e009      	b.n	8003604 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	3340      	adds	r3, #64	; 0x40
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	2200      	movs	r2, #0
 80035fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	3301      	adds	r3, #1
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	2b0e      	cmp	r3, #14
 8003608:	d9f2      	bls.n	80035f0 <USB_DevInit+0x20>
  }

  /* Enable HW VBUS sensing */
  USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	639a      	str	r2, [r3, #56]	; 0x38

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800361c:	461a      	mov	r2, r3
 800361e:	2300      	movs	r3, #0
 8003620:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003628:	4619      	mov	r1, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003630:	461a      	mov	r2, r3
 8003632:	680b      	ldr	r3, [r1, #0]
 8003634:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003636:	2103      	movs	r1, #3
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f939 	bl	80038b0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800363e:	2110      	movs	r1, #16
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f8f1 	bl	8003828 <USB_FlushTxFifo>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <USB_DevInit+0x80>
  {
    ret = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f90d 	bl	8003870 <USB_FlushRxFifo>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <USB_DevInit+0x90>
  {
    ret = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003666:	461a      	mov	r2, r3
 8003668:	2300      	movs	r3, #0
 800366a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003672:	461a      	mov	r2, r3
 8003674:	2300      	movs	r3, #0
 8003676:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367e:	461a      	mov	r2, r3
 8003680:	2300      	movs	r3, #0
 8003682:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003684:	2300      	movs	r3, #0
 8003686:	613b      	str	r3, [r7, #16]
 8003688:	e043      	b.n	8003712 <USB_DevInit+0x142>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800369c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036a0:	d118      	bne.n	80036d4 <USB_DevInit+0x104>
    {
      if (i == 0U)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d10a      	bne.n	80036be <USB_DevInit+0xee>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b4:	461a      	mov	r2, r3
 80036b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	e013      	b.n	80036e6 <USB_DevInit+0x116>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ca:	461a      	mov	r2, r3
 80036cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	e008      	b.n	80036e6 <USB_DevInit+0x116>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e0:	461a      	mov	r2, r3
 80036e2:	2300      	movs	r3, #0
 80036e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f2:	461a      	mov	r2, r3
 80036f4:	2300      	movs	r3, #0
 80036f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003704:	461a      	mov	r2, r3
 8003706:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800370a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	3301      	adds	r3, #1
 8003710:	613b      	str	r3, [r7, #16]
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	429a      	cmp	r2, r3
 8003718:	d3b7      	bcc.n	800368a <USB_DevInit+0xba>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	e043      	b.n	80037a8 <USB_DevInit+0x1d8>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4413      	add	r3, r2
 8003728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003736:	d118      	bne.n	800376a <USB_DevInit+0x19a>
    {
      if (i == 0U)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10a      	bne.n	8003754 <USB_DevInit+0x184>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	015a      	lsls	r2, r3, #5
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4413      	add	r3, r2
 8003746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374a:	461a      	mov	r2, r3
 800374c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	e013      	b.n	800377c <USB_DevInit+0x1ac>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4413      	add	r3, r2
 800375c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003760:	461a      	mov	r2, r3
 8003762:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	e008      	b.n	800377c <USB_DevInit+0x1ac>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4413      	add	r3, r2
 8003772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003776:	461a      	mov	r2, r3
 8003778:	2300      	movs	r3, #0
 800377a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4413      	add	r3, r2
 8003784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003788:	461a      	mov	r2, r3
 800378a:	2300      	movs	r3, #0
 800378c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379a:	461a      	mov	r2, r3
 800379c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	3301      	adds	r3, #1
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d3b7      	bcc.n	8003720 <USB_DevInit+0x150>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80037d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	f043 0210 	orr.w	r2, r3, #16
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699a      	ldr	r2, [r3, #24]
 80037e2:	4b10      	ldr	r3, [pc, #64]	; (8003824 <USB_DevInit+0x254>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80037ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d005      	beq.n	80037fc <USB_DevInit+0x22c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	f043 0208 	orr.w	r2, r3, #8
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80037fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d107      	bne.n	8003812 <USB_DevInit+0x242>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800380a:	f043 0304 	orr.w	r3, r3, #4
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003812:	7dfb      	ldrb	r3, [r7, #23]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800381e:	b004      	add	sp, #16
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	803c3800 	.word	0x803c3800

08003828 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	019b      	lsls	r3, r3, #6
 800383a:	f043 0220 	orr.w	r2, r3, #32
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3301      	adds	r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4a08      	ldr	r2, [pc, #32]	; (800386c <USB_FlushTxFifo+0x44>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d901      	bls.n	8003854 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e006      	b.n	8003862 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b20      	cmp	r3, #32
 800385e:	d0f0      	beq.n	8003842 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	00030d40 	.word	0x00030d40

08003870 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003878:	2300      	movs	r3, #0
 800387a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2210      	movs	r2, #16
 8003880:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3301      	adds	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4a08      	ldr	r2, [pc, #32]	; (80038ac <USB_FlushRxFifo+0x3c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e006      	b.n	80038a2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b10      	cmp	r3, #16
 800389e:	d0f0      	beq.n	8003882 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr
 80038ac:	00030d40 	.word	0x00030d40

080038b0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	68f9      	ldr	r1, [r7, #12]
 80038cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038d0:	4313      	orrs	r3, r2
 80038d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr

080038e0 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f003 0306 	and.w	r3, r3, #6
 80038f8:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d002      	beq.n	8003906 <USB_GetDevSpeed+0x26>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b06      	cmp	r3, #6
 8003904:	d102      	bne.n	800390c <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003906:	2302      	movs	r3, #2
 8003908:	75fb      	strb	r3, [r7, #23]
 800390a:	e001      	b.n	8003910 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800390c:	230f      	movs	r3, #15
 800390e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003910:	7dfb      	ldrb	r3, [r7, #23]
}
 8003912:	4618      	mov	r0, r3
 8003914:	371c      	adds	r7, #28
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr

0800391c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	785b      	ldrb	r3, [r3, #1]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d13a      	bne.n	80039ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	2101      	movs	r1, #1
 800394a:	fa01 f303 	lsl.w	r3, r1, r3
 800394e:	b29b      	uxth	r3, r3
 8003950:	68f9      	ldr	r1, [r7, #12]
 8003952:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003956:	4313      	orrs	r3, r2
 8003958:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d155      	bne.n	8003a1c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	78db      	ldrb	r3, [r3, #3]
 800398a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800398c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	059b      	lsls	r3, r3, #22
 8003992:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003994:	4313      	orrs	r3, r2
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	0151      	lsls	r1, r2, #5
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	440a      	add	r2, r1
 800399e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	e036      	b.n	8003a1c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b4:	69da      	ldr	r2, [r3, #28]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	2101      	movs	r1, #1
 80039c0:	fa01 f303 	lsl.w	r3, r1, r3
 80039c4:	041b      	lsls	r3, r3, #16
 80039c6:	68f9      	ldr	r1, [r7, #12]
 80039c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039cc:	4313      	orrs	r3, r2
 80039ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11a      	bne.n	8003a1c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	78db      	ldrb	r3, [r3, #3]
 8003a00:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003a02:	430b      	orrs	r3, r1
 8003a04:	4313      	orrs	r3, r2
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	0151      	lsls	r1, r2, #5
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	440a      	add	r2, r1
 8003a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a1a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr

08003a28 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	785b      	ldrb	r3, [r3, #1]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d161      	bne.n	8003b08 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a5a:	d11f      	bne.n	8003a9c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	0151      	lsls	r1, r2, #5
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	440a      	add	r2, r1
 8003a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a7a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	0151      	lsls	r1, r2, #5
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	440a      	add	r2, r1
 8003a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	f003 030f 	and.w	r3, r3, #15
 8003aac:	2101      	movs	r1, #1
 8003aae:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	68f9      	ldr	r1, [r7, #12]
 8003ab8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003abc:	4013      	ands	r3, r2
 8003abe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	68f9      	ldr	r1, [r7, #12]
 8003adc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	0159      	lsls	r1, r3, #5
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	440b      	add	r3, r1
 8003afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afe:	4619      	mov	r1, r3
 8003b00:	4b35      	ldr	r3, [pc, #212]	; (8003bd8 <USB_DeactivateEndpoint+0x1b0>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]
 8003b06:	e060      	b.n	8003bca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b1e:	d11f      	bne.n	8003b60 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	0151      	lsls	r1, r2, #5
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	440a      	add	r2, r1
 8003b36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b3e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	0151      	lsls	r1, r2, #5
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	440a      	add	r2, r1
 8003b56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	f003 030f 	and.w	r3, r3, #15
 8003b70:	2101      	movs	r1, #1
 8003b72:	fa01 f303 	lsl.w	r3, r1, r3
 8003b76:	041b      	lsls	r3, r3, #16
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	68f9      	ldr	r1, [r7, #12]
 8003b7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b80:	4013      	ands	r3, r2
 8003b82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b8a:	69da      	ldr	r2, [r3, #28]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	f003 030f 	and.w	r3, r3, #15
 8003b94:	2101      	movs	r1, #1
 8003b96:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9a:	041b      	lsls	r3, r3, #16
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	68f9      	ldr	r1, [r7, #12]
 8003ba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	0159      	lsls	r1, r3, #5
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	440b      	add	r3, r1
 8003bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <USB_DeactivateEndpoint+0x1b4>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc80      	pop	{r7}
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	ec337800 	.word	0xec337800
 8003bdc:	eff37800 	.word	0xeff37800

08003be0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	785b      	ldrb	r3, [r3, #1]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	f040 810a 	bne.w	8003e12 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d132      	bne.n	8003c6c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	0151      	lsls	r1, r2, #5
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	440a      	add	r2, r1
 8003c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	015a      	lsls	r2, r3, #5
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	4413      	add	r3, r2
 8003c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	0151      	lsls	r1, r2, #5
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	440a      	add	r2, r1
 8003c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	0151      	lsls	r1, r2, #5
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	440a      	add	r2, r1
 8003c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c64:	0cdb      	lsrs	r3, r3, #19
 8003c66:	04db      	lsls	r3, r3, #19
 8003c68:	6113      	str	r3, [r2, #16]
 8003c6a:	e074      	b.n	8003d56 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	0151      	lsls	r1, r2, #5
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	440a      	add	r2, r1
 8003c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c86:	0cdb      	lsrs	r3, r3, #19
 8003c88:	04db      	lsls	r3, r3, #19
 8003c8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	0151      	lsls	r1, r2, #5
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	440a      	add	r2, r1
 8003ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ca6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003caa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbc:	691a      	ldr	r2, [r3, #16]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	6959      	ldr	r1, [r3, #20]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	440b      	add	r3, r1
 8003cc8:	1e59      	subs	r1, r3, #1
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cd2:	04d9      	lsls	r1, r3, #19
 8003cd4:	4baf      	ldr	r3, [pc, #700]	; (8003f94 <USB_EPStartXfer+0x3b4>)
 8003cd6:	400b      	ands	r3, r1
 8003cd8:	6939      	ldr	r1, [r7, #16]
 8003cda:	0148      	lsls	r0, r1, #5
 8003cdc:	6979      	ldr	r1, [r7, #20]
 8003cde:	4401      	add	r1, r0
 8003ce0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf4:	691a      	ldr	r2, [r3, #16]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfe:	6939      	ldr	r1, [r7, #16]
 8003d00:	0148      	lsls	r0, r1, #5
 8003d02:	6979      	ldr	r1, [r7, #20]
 8003d04:	4401      	add	r1, r0
 8003d06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	78db      	ldrb	r3, [r3, #3]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d11f      	bne.n	8003d56 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	0151      	lsls	r1, r2, #5
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	440a      	add	r2, r1
 8003d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d30:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003d34:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	015a      	lsls	r2, r3, #5
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	0151      	lsls	r1, r2, #5
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	440a      	add	r2, r1
 8003d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d54:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	0151      	lsls	r1, r2, #5
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	440a      	add	r2, r1
 8003d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d74:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	78db      	ldrb	r3, [r3, #3]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d015      	beq.n	8003daa <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8100 	beq.w	8003f88 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	2101      	movs	r1, #1
 8003d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9e:	6979      	ldr	r1, [r7, #20]
 8003da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003da4:	4313      	orrs	r3, r2
 8003da6:	634b      	str	r3, [r1, #52]	; 0x34
 8003da8:	e0ee      	b.n	8003f88 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d110      	bne.n	8003ddc <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	0151      	lsls	r1, r2, #5
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	440a      	add	r2, r1
 8003dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	e00f      	b.n	8003dfc <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	0151      	lsls	r1, r2, #5
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	440a      	add	r2, r1
 8003df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68d9      	ldr	r1, [r3, #12]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781a      	ldrb	r2, [r3, #0]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f9e1 	bl	80041d2 <USB_WritePacket>
 8003e10:	e0ba      	b.n	8003f88 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	0151      	lsls	r1, r2, #5
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	440a      	add	r2, r1
 8003e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e2c:	0cdb      	lsrs	r3, r3, #19
 8003e2e:	04db      	lsls	r3, r3, #19
 8003e30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	0151      	lsls	r1, r2, #5
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	440a      	add	r2, r1
 8003e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d123      	bne.n	8003ea6 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e74:	6939      	ldr	r1, [r7, #16]
 8003e76:	0148      	lsls	r0, r1, #5
 8003e78:	6979      	ldr	r1, [r7, #20]
 8003e7a:	4401      	add	r1, r0
 8003e7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e80:	4313      	orrs	r3, r2
 8003e82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	0151      	lsls	r1, r2, #5
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	440a      	add	r2, r1
 8003e9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ea2:	6113      	str	r3, [r2, #16]
 8003ea4:	e033      	b.n	8003f0e <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	695a      	ldr	r2, [r3, #20]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	4413      	add	r3, r2
 8003eb0:	1e5a      	subs	r2, r3, #1
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eba:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	89fb      	ldrh	r3, [r7, #14]
 8003ecc:	04d9      	lsls	r1, r3, #19
 8003ece:	4b31      	ldr	r3, [pc, #196]	; (8003f94 <USB_EPStartXfer+0x3b4>)
 8003ed0:	400b      	ands	r3, r1
 8003ed2:	6939      	ldr	r1, [r7, #16]
 8003ed4:	0148      	lsls	r0, r1, #5
 8003ed6:	6979      	ldr	r1, [r7, #20]
 8003ed8:	4401      	add	r1, r0
 8003eda:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	89f9      	ldrh	r1, [r7, #14]
 8003ef6:	fb01 f303 	mul.w	r3, r1, r3
 8003efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003efe:	6939      	ldr	r1, [r7, #16]
 8003f00:	0148      	lsls	r0, r1, #5
 8003f02:	6979      	ldr	r1, [r7, #20]
 8003f04:	4401      	add	r1, r0
 8003f06:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	78db      	ldrb	r3, [r3, #3]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d128      	bne.n	8003f68 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d110      	bne.n	8003f48 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	015a      	lsls	r2, r3, #5
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	0151      	lsls	r1, r2, #5
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	440a      	add	r2, r1
 8003f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f44:	6013      	str	r3, [r2, #0]
 8003f46:	e00f      	b.n	8003f68 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	0151      	lsls	r1, r2, #5
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	440a      	add	r2, r1
 8003f5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	0151      	lsls	r1, r2, #5
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	440a      	add	r2, r1
 8003f7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	1ff80000 	.word	0x1ff80000

08003f98 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	785b      	ldrb	r3, [r3, #1]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	f040 80ab 	bne.w	800410c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d132      	bne.n	8004024 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	0151      	lsls	r1, r2, #5
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	440a      	add	r2, r1
 8003fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fdc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fe0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	0151      	lsls	r1, r2, #5
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	440a      	add	r2, r1
 8003ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ffc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004000:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	0151      	lsls	r1, r2, #5
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	440a      	add	r2, r1
 8004018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800401c:	0cdb      	lsrs	r3, r3, #19
 800401e:	04db      	lsls	r3, r3, #19
 8004020:	6113      	str	r3, [r2, #16]
 8004022:	e04e      	b.n	80040c2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	0151      	lsls	r1, r2, #5
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	440a      	add	r2, r1
 800403a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800403e:	0cdb      	lsrs	r3, r3, #19
 8004040:	04db      	lsls	r3, r3, #19
 8004042:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	0151      	lsls	r1, r2, #5
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	440a      	add	r2, r1
 800405a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800405e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004062:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004066:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	429a      	cmp	r2, r3
 8004072:	d903      	bls.n	800407c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	015a      	lsls	r2, r3, #5
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	0151      	lsls	r1, r2, #5
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	440a      	add	r2, r1
 8004092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004096:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800409a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	0148      	lsls	r0, r1, #5
 80040b6:	68f9      	ldr	r1, [r7, #12]
 80040b8:	4401      	add	r1, r0
 80040ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040be:	4313      	orrs	r3, r2
 80040c0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	0151      	lsls	r1, r2, #5
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	440a      	add	r2, r1
 80040d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040e0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d06d      	beq.n	80041c6 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	2101      	movs	r1, #1
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	68f9      	ldr	r1, [r7, #12]
 8004102:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004106:	4313      	orrs	r3, r2
 8004108:	634b      	str	r3, [r1, #52]	; 0x34
 800410a:	e05c      	b.n	80041c6 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	0151      	lsls	r1, r2, #5
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	440a      	add	r2, r1
 8004122:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004126:	0cdb      	lsrs	r3, r3, #19
 8004128:	04db      	lsls	r3, r3, #19
 800412a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4413      	add	r3, r2
 8004134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	0151      	lsls	r1, r2, #5
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	440a      	add	r2, r1
 8004142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004146:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800414a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800414e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	0151      	lsls	r1, r2, #5
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	440a      	add	r2, r1
 8004176:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800417a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800417e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	015a      	lsls	r2, r3, #5
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	0148      	lsls	r0, r1, #5
 800419a:	68f9      	ldr	r1, [r7, #12]
 800419c:	4401      	add	r1, r0
 800419e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041a2:	4313      	orrs	r3, r2
 80041a4:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	015a      	lsls	r2, r3, #5
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	4413      	add	r3, r2
 80041ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	0151      	lsls	r1, r2, #5
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	440a      	add	r2, r1
 80041bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr

080041d2 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b089      	sub	sp, #36	; 0x24
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	4611      	mov	r1, r2
 80041de:	461a      	mov	r2, r3
 80041e0:	460b      	mov	r3, r1
 80041e2:	71fb      	strb	r3, [r7, #7]
 80041e4:	4613      	mov	r3, r2
 80041e6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80041f0:	88bb      	ldrh	r3, [r7, #4]
 80041f2:	3303      	adds	r3, #3
 80041f4:	089b      	lsrs	r3, r3, #2
 80041f6:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80041f8:	2300      	movs	r3, #0
 80041fa:	61bb      	str	r3, [r7, #24]
 80041fc:	e00f      	b.n	800421e <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	031a      	lsls	r2, r3, #12
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	4413      	add	r3, r2
 8004206:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800420a:	461a      	mov	r2, r3
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	3304      	adds	r3, #4
 8004216:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	3301      	adds	r3, #1
 800421c:	61bb      	str	r3, [r7, #24]
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	429a      	cmp	r2, r3
 8004224:	d3eb      	bcc.n	80041fe <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3724      	adds	r7, #36	; 0x24
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr

08004232 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004232:	b480      	push	{r7}
 8004234:	b089      	sub	sp, #36	; 0x24
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	4613      	mov	r3, r2
 800423e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004248:	88fb      	ldrh	r3, [r7, #6]
 800424a:	3303      	adds	r3, #3
 800424c:	089b      	lsrs	r3, r3, #2
 800424e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004250:	2300      	movs	r3, #0
 8004252:	61bb      	str	r3, [r7, #24]
 8004254:	e00b      	b.n	800426e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	601a      	str	r2, [r3, #0]
    pDest++;
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	3304      	adds	r3, #4
 8004266:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	3301      	adds	r3, #1
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	429a      	cmp	r2, r3
 8004274:	d3ef      	bcc.n	8004256 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004276:	69fb      	ldr	r3, [r7, #28]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3724      	adds	r7, #36	; 0x24
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr

08004282 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004282:	b480      	push	{r7}
 8004284:	b085      	sub	sp, #20
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	785b      	ldrb	r3, [r3, #1]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d12c      	bne.n	80042f8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	db12      	blt.n	80042d6 <USB_EPSetStall+0x54>
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00f      	beq.n	80042d6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	015a      	lsls	r2, r3, #5
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	4413      	add	r3, r2
 80042be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	0151      	lsls	r1, r2, #5
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	440a      	add	r2, r1
 80042cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042d4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68ba      	ldr	r2, [r7, #8]
 80042e6:	0151      	lsls	r1, r2, #5
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	440a      	add	r2, r1
 80042ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	e02b      	b.n	8004350 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	015a      	lsls	r2, r3, #5
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	4413      	add	r3, r2
 8004300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	db12      	blt.n	8004330 <USB_EPSetStall+0xae>
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00f      	beq.n	8004330 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	0151      	lsls	r1, r2, #5
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	440a      	add	r2, r1
 8004326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800432a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800432e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68ba      	ldr	r2, [r7, #8]
 8004340:	0151      	lsls	r1, r2, #5
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	440a      	add	r2, r1
 8004346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800434a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800434e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr

0800435c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	785b      	ldrb	r3, [r3, #1]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d128      	bne.n	80043ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	0151      	lsls	r1, r2, #5
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	440a      	add	r2, r1
 800438e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004392:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004396:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	78db      	ldrb	r3, [r3, #3]
 800439c:	2b03      	cmp	r3, #3
 800439e:	d003      	beq.n	80043a8 <USB_EPClearStall+0x4c>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	78db      	ldrb	r3, [r3, #3]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d138      	bne.n	800441a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	0151      	lsls	r1, r2, #5
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	440a      	add	r2, r1
 80043be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	e027      	b.n	800441a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	0151      	lsls	r1, r2, #5
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	440a      	add	r2, r1
 80043e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	78db      	ldrb	r3, [r3, #3]
 80043ee:	2b03      	cmp	r3, #3
 80043f0:	d003      	beq.n	80043fa <USB_EPClearStall+0x9e>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	78db      	ldrb	r3, [r3, #3]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d10f      	bne.n	800441a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	0151      	lsls	r1, r2, #5
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	440a      	add	r2, r1
 8004410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004418:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	bc80      	pop	{r7}
 8004424:	4770      	bx	lr

08004426 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004426:	b480      	push	{r7}
 8004428:	b085      	sub	sp, #20
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	460b      	mov	r3, r1
 8004430:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004444:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004448:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800445a:	68f9      	ldr	r1, [r7, #12]
 800445c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004460:	4313      	orrs	r3, r2
 8004462:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800448a:	f023 0303 	bic.w	r3, r3, #3
 800448e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800449e:	f023 0302 	bic.w	r3, r3, #2
 80044a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80044ca:	f023 0303 	bic.w	r3, r3, #3
 80044ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044de:	f043 0302 	orr.w	r3, r3, #2
 80044e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr

080044f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	4013      	ands	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004508:	68fb      	ldr	r3, [r7, #12]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	bc80      	pop	{r7}
 8004512:	4770      	bx	lr

08004514 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	4013      	ands	r3, r2
 8004536:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	0c1b      	lsrs	r3, r3, #16
}
 800453c:	4618      	mov	r0, r3
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr

08004546 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004546:	b480      	push	{r7}
 8004548:	b085      	sub	sp, #20
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004562:	69db      	ldr	r3, [r3, #28]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	4013      	ands	r3, r2
 8004568:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	b29b      	uxth	r3, r3
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr

08004578 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004588:	78fb      	ldrb	r3, [r7, #3]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	68ba      	ldr	r2, [r7, #8]
 80045a2:	4013      	ands	r3, r2
 80045a4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80045a6:	68bb      	ldr	r3, [r7, #8]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bc80      	pop	{r7}
 80045b0:	4770      	bx	lr

080045b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b087      	sub	sp, #28
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	460b      	mov	r3, r1
 80045bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80045d6:	78fb      	ldrb	r3, [r7, #3]
 80045d8:	f003 030f 	and.w	r3, r3, #15
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	fa22 f303 	lsr.w	r3, r2, r3
 80045e2:	01db      	lsls	r3, r3, #7
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80045ec:	78fb      	ldrb	r3, [r7, #3]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4013      	ands	r3, r2
 80045fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004600:	68bb      	ldr	r3, [r7, #8]
}
 8004602:	4618      	mov	r0, r3
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	f003 0301 	and.w	r3, r3, #1
}
 800461c:	4618      	mov	r0, r3
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr

08004626 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004626:	b480      	push	{r7}
 8004628:	b085      	sub	sp, #20
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004640:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004644:	f023 0307 	bic.w	r3, r3, #7
 8004648:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	bc80      	pop	{r7}
 8004668:	4770      	bx	lr
	...

0800466c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	333c      	adds	r3, #60	; 0x3c
 800467e:	3304      	adds	r3, #4
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4a1c      	ldr	r2, [pc, #112]	; (80046f8 <USB_EP0_OutStart+0x8c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d90a      	bls.n	80046a2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004698:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800469c:	d101      	bne.n	80046a2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	e024      	b.n	80046ec <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	461a      	mov	r2, r3
 80046aa:	2300      	movs	r3, #0
 80046ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046d0:	f043 0318 	orr.w	r3, r3, #24
 80046d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80046e8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bc80      	pop	{r7}
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	4f54300a 	.word	0x4f54300a

080046fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	3301      	adds	r3, #1
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4a12      	ldr	r2, [pc, #72]	; (800475c <USB_CoreReset+0x60>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d901      	bls.n	800471a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e01b      	b.n	8004752 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	daf2      	bge.n	8004708 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	f043 0201 	orr.w	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3301      	adds	r3, #1
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4a08      	ldr	r2, [pc, #32]	; (800475c <USB_CoreReset+0x60>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d901      	bls.n	8004744 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e006      	b.n	8004752 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b01      	cmp	r3, #1
 800474e:	d0f0      	beq.n	8004732 <USB_CoreReset+0x36>

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr
 800475c:	00030d40 	.word	0x00030d40

08004760 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	7c1b      	ldrb	r3, [r3, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d115      	bne.n	80047a4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800477c:	2202      	movs	r2, #2
 800477e:	2181      	movs	r1, #129	; 0x81
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f001 fef8 	bl	8006576 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800478c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004790:	2202      	movs	r2, #2
 8004792:	2101      	movs	r1, #1
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f001 feee 	bl	8006576 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80047a2:	e012      	b.n	80047ca <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80047a4:	2340      	movs	r3, #64	; 0x40
 80047a6:	2202      	movs	r2, #2
 80047a8:	2181      	movs	r1, #129	; 0x81
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f001 fee3 	bl	8006576 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80047b6:	2340      	movs	r3, #64	; 0x40
 80047b8:	2202      	movs	r2, #2
 80047ba:	2101      	movs	r1, #1
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f001 feda 	bl	8006576 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80047ca:	2308      	movs	r3, #8
 80047cc:	2203      	movs	r2, #3
 80047ce:	2182      	movs	r1, #130	; 0x82
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f001 fed0 	bl	8006576 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80047dc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80047e0:	f001 fff0 	bl	80067c4 <USBD_static_malloc>
 80047e4:	4602      	mov	r2, r0
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80047f6:	2301      	movs	r3, #1
 80047f8:	73fb      	strb	r3, [r7, #15]
 80047fa:	e026      	b.n	800484a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004802:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2200      	movs	r2, #0
 8004812:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	2200      	movs	r2, #0
 800481a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	7c1b      	ldrb	r3, [r3, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d109      	bne.n	800483a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800482c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004830:	2101      	movs	r1, #1
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f001 ff8f 	bl	8006756 <USBD_LL_PrepareReceive>
 8004838:	e007      	b.n	800484a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004840:	2340      	movs	r3, #64	; 0x40
 8004842:	2101      	movs	r1, #1
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f001 ff86 	bl	8006756 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800484a:	7bfb      	ldrb	r3, [r7, #15]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004860:	2300      	movs	r3, #0
 8004862:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004864:	2181      	movs	r1, #129	; 0x81
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f001 feab 	bl	80065c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004872:	2101      	movs	r1, #1
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f001 fea4 	bl	80065c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004882:	2182      	movs	r1, #130	; 0x82
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f001 fe9c 	bl	80065c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00e      	beq.n	80048b8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048aa:	4618      	mov	r0, r3
 80048ac:	f001 ff96 	bl	80067dc <USBD_static_free>
    pdev->pClassData = NULL;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80048b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b086      	sub	sp, #24
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048d2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d039      	beq.n	8004960 <USBD_CDC_Setup+0x9e>
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d17c      	bne.n	80049ea <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	88db      	ldrh	r3, [r3, #6]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d029      	beq.n	800494c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	b25b      	sxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	da11      	bge.n	8004926 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800490e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	88d2      	ldrh	r2, [r2, #6]
 8004914:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004916:	6939      	ldr	r1, [r7, #16]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	88db      	ldrh	r3, [r3, #6]
 800491c:	461a      	mov	r2, r3
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f001 fa32 	bl	8005d88 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004924:	e068      	b.n	80049f8 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	785a      	ldrb	r2, [r3, #1]
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	88db      	ldrh	r3, [r3, #6]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800493c:	6939      	ldr	r1, [r7, #16]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	88db      	ldrh	r3, [r3, #6]
 8004942:	461a      	mov	r2, r3
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f001 fa4d 	bl	8005de4 <USBD_CtlPrepareRx>
      break;
 800494a:	e055      	b.n	80049f8 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	7850      	ldrb	r0, [r2, #1]
 8004958:	2200      	movs	r2, #0
 800495a:	6839      	ldr	r1, [r7, #0]
 800495c:	4798      	blx	r3
      break;
 800495e:	e04b      	b.n	80049f8 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	785b      	ldrb	r3, [r3, #1]
 8004964:	2b0a      	cmp	r3, #10
 8004966:	d017      	beq.n	8004998 <USBD_CDC_Setup+0xd6>
 8004968:	2b0b      	cmp	r3, #11
 800496a:	d029      	beq.n	80049c0 <USBD_CDC_Setup+0xfe>
 800496c:	2b00      	cmp	r3, #0
 800496e:	d133      	bne.n	80049d8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004976:	2b03      	cmp	r3, #3
 8004978:	d107      	bne.n	800498a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800497a:	f107 030c 	add.w	r3, r7, #12
 800497e:	2202      	movs	r2, #2
 8004980:	4619      	mov	r1, r3
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f001 fa00 	bl	8005d88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004988:	e02e      	b.n	80049e8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800498a:	6839      	ldr	r1, [r7, #0]
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f001 f991 	bl	8005cb4 <USBD_CtlError>
            ret = USBD_FAIL;
 8004992:	2302      	movs	r3, #2
 8004994:	75fb      	strb	r3, [r7, #23]
          break;
 8004996:	e027      	b.n	80049e8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d107      	bne.n	80049b2 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80049a2:	f107 030f 	add.w	r3, r7, #15
 80049a6:	2201      	movs	r2, #1
 80049a8:	4619      	mov	r1, r3
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f001 f9ec 	bl	8005d88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80049b0:	e01a      	b.n	80049e8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80049b2:	6839      	ldr	r1, [r7, #0]
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f001 f97d 	bl	8005cb4 <USBD_CtlError>
            ret = USBD_FAIL;
 80049ba:	2302      	movs	r3, #2
 80049bc:	75fb      	strb	r3, [r7, #23]
          break;
 80049be:	e013      	b.n	80049e8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d00d      	beq.n	80049e6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80049ca:	6839      	ldr	r1, [r7, #0]
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f001 f971 	bl	8005cb4 <USBD_CtlError>
            ret = USBD_FAIL;
 80049d2:	2302      	movs	r3, #2
 80049d4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80049d6:	e006      	b.n	80049e6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80049d8:	6839      	ldr	r1, [r7, #0]
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f001 f96a 	bl	8005cb4 <USBD_CtlError>
          ret = USBD_FAIL;
 80049e0:	2302      	movs	r3, #2
 80049e2:	75fb      	strb	r3, [r7, #23]
          break;
 80049e4:	e000      	b.n	80049e8 <USBD_CDC_Setup+0x126>
          break;
 80049e6:	bf00      	nop
      }
      break;
 80049e8:	e006      	b.n	80049f8 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 80049ea:	6839      	ldr	r1, [r7, #0]
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f001 f961 	bl	8005cb4 <USBD_CtlError>
      ret = USBD_FAIL;
 80049f2:	2302      	movs	r3, #2
 80049f4:	75fb      	strb	r3, [r7, #23]
      break;
 80049f6:	bf00      	nop
  }

  return ret;
 80049f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a14:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004a1c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d03a      	beq.n	8004a9e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004a28:	78fa      	ldrb	r2, [r7, #3]
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	331c      	adds	r3, #28
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d029      	beq.n	8004a92 <USBD_CDC_DataIn+0x90>
 8004a3e:	78fa      	ldrb	r2, [r7, #3]
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	331c      	adds	r3, #28
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	78f9      	ldrb	r1, [r7, #3]
 8004a52:	68b8      	ldr	r0, [r7, #8]
 8004a54:	460b      	mov	r3, r1
 8004a56:	00db      	lsls	r3, r3, #3
 8004a58:	1a5b      	subs	r3, r3, r1
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4403      	add	r3, r0
 8004a5e:	3344      	adds	r3, #68	; 0x44
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	fbb2 f1f3 	udiv	r1, r2, r3
 8004a66:	fb03 f301 	mul.w	r3, r3, r1
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d110      	bne.n	8004a92 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004a70:	78fa      	ldrb	r2, [r7, #3]
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	4613      	mov	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4413      	add	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	331c      	adds	r3, #28
 8004a80:	2200      	movs	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004a84:	78f9      	ldrb	r1, [r7, #3]
 8004a86:	2300      	movs	r3, #0
 8004a88:	2200      	movs	r2, #0
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f001 fe40 	bl	8006710 <USBD_LL_Transmit>
 8004a90:	e003      	b.n	8004a9a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e000      	b.n	8004aa0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8004a9e:	2302      	movs	r3, #2
  }
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	4619      	mov	r1, r3
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f001 fe6b 	bl	800679c <USBD_LL_GetRxDataSize>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00d      	beq.n	8004af4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004aec:	4611      	mov	r1, r2
 8004aee:	4798      	blx	r3

    return USBD_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	e000      	b.n	8004af6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004af4:	2302      	movs	r3, #2
  }
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b084      	sub	sp, #16
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b0c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d015      	beq.n	8004b44 <USBD_CDC_EP0_RxReady+0x46>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004b1e:	2bff      	cmp	r3, #255	; 0xff
 8004b20:	d010      	beq.n	8004b44 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8004b30:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004b38:	b292      	uxth	r2, r2
 8004b3a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	22ff      	movs	r2, #255	; 0xff
 8004b40:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2243      	movs	r2, #67	; 0x43
 8004b5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8004b5e:	4b03      	ldr	r3, [pc, #12]	; (8004b6c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	20000094 	.word	0x20000094

08004b70 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2243      	movs	r2, #67	; 0x43
 8004b7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8004b7e:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	370c      	adds	r7, #12
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bc80      	pop	{r7}
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000050 	.word	0x20000050

08004b90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2243      	movs	r2, #67	; 0x43
 8004b9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004b9e:	4b03      	ldr	r3, [pc, #12]	; (8004bac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc80      	pop	{r7}
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	200000d8 	.word	0x200000d8

08004bb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	220a      	movs	r2, #10
 8004bbc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004bbe:	4b03      	ldr	r3, [pc, #12]	; (8004bcc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bc80      	pop	{r7}
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	2000000c 	.word	0x2000000c

08004bd0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8004bda:	2302      	movs	r3, #2
 8004bdc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b087      	sub	sp, #28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	4613      	mov	r3, r2
 8004c08:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c10:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004c1a:	88fa      	ldrh	r2, [r7, #6]
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	371c      	adds	r7, #28
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bc80      	pop	{r7}
 8004c2c:	4770      	bx	lr

08004c2e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b085      	sub	sp, #20
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c3e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bc80      	pop	{r7}
 8004c52:	4770      	bx	lr

08004c54 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c62:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d01c      	beq.n	8004ca8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d115      	bne.n	8004ca4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2181      	movs	r1, #129	; 0x81
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f001 fd38 	bl	8006710 <USBD_LL_Transmit>

      return USBD_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e002      	b.n	8004caa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8004ca8:	2302      	movs	r3, #2
  }
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b084      	sub	sp, #16
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cc0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d017      	beq.n	8004cfc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	7c1b      	ldrb	r3, [r3, #16]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d109      	bne.n	8004ce8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cde:	2101      	movs	r1, #1
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f001 fd38 	bl	8006756 <USBD_LL_PrepareReceive>
 8004ce6:	e007      	b.n	8004cf8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004cee:	2340      	movs	r3, #64	; 0x40
 8004cf0:	2101      	movs	r1, #1
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f001 fd2f 	bl	8006756 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e000      	b.n	8004cfe <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004cfc:	2302      	movs	r3, #2
  }
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b084      	sub	sp, #16
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	4613      	mov	r3, r2
 8004d12:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e01a      	b.n	8004d54 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	79fa      	ldrb	r2, [r7, #7]
 8004d4a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f001 fbb7 	bl	80064c0 <USBD_LL_Init>

  return USBD_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3710      	adds	r7, #16
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d006      	beq.n	8004d7e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	73fb      	strb	r3, [r7, #15]
 8004d7c:	e001      	b.n	8004d82 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004d7e:	2302      	movs	r3, #2
 8004d80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bc80      	pop	{r7}
 8004d8c:	4770      	bx	lr

08004d8e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f001 fbd2 	bl	8006540 <USBD_LL_Start>

  return USBD_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b083      	sub	sp, #12
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bc80      	pop	{r7}
 8004db8:	4770      	bx	lr

08004dba <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00c      	beq.n	8004dee <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	78fa      	ldrb	r2, [r7, #3]
 8004dde:	4611      	mov	r1, r2
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	4798      	blx	r3
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	460b      	mov	r3, r1
 8004e02:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	78fa      	ldrb	r2, [r7, #3]
 8004e0e:	4611      	mov	r1, r2
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	4798      	blx	r3

  return USBD_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	b082      	sub	sp, #8
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
 8004e26:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004e2e:	6839      	ldr	r1, [r7, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f000 ff03 	bl	8005c3c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004e44:	461a      	mov	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e52:	f003 031f 	and.w	r3, r3, #31
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d00c      	beq.n	8004e74 <USBD_LL_SetupStage+0x56>
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d302      	bcc.n	8004e64 <USBD_LL_SetupStage+0x46>
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d010      	beq.n	8004e84 <USBD_LL_SetupStage+0x66>
 8004e62:	e017      	b.n	8004e94 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fa03 	bl	8005278 <USBD_StdDevReq>
      break;
 8004e72:	e01a      	b.n	8004eaa <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 fa65 	bl	800534c <USBD_StdItfReq>
      break;
 8004e82:	e012      	b.n	8004eaa <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 faa3 	bl	80053d8 <USBD_StdEPReq>
      break;
 8004e92:	e00a      	b.n	8004eaa <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004e9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f001 fbac 	bl	8006600 <USBD_LL_StallEP>
      break;
 8004ea8:	bf00      	nop
  }

  return USBD_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004ec2:	7afb      	ldrb	r3, [r7, #11]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d14b      	bne.n	8004f60 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004ece:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d134      	bne.n	8004f44 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	68da      	ldr	r2, [r3, #12]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d919      	bls.n	8004f1a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	1ad2      	subs	r2, r2, r3
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d203      	bcs.n	8004f08 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	e002      	b.n	8004f0e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	461a      	mov	r2, r3
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 ff84 	bl	8005e20 <USBD_CtlContinueRx>
 8004f18:	e038      	b.n	8004f8c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d105      	bne.n	8004f3c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 ff81 	bl	8005e44 <USBD_CtlSendStatus>
 8004f42:	e023      	b.n	8004f8c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004f4a:	2b05      	cmp	r3, #5
 8004f4c:	d11e      	bne.n	8004f8c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004f56:	2100      	movs	r1, #0
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f001 fb51 	bl	8006600 <USBD_LL_StallEP>
 8004f5e:	e015      	b.n	8004f8c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00d      	beq.n	8004f88 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d108      	bne.n	8004f88 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	7afa      	ldrb	r2, [r7, #11]
 8004f80:	4611      	mov	r1, r2
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	4798      	blx	r3
 8004f86:	e001      	b.n	8004f8c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e000      	b.n	8004f8e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b086      	sub	sp, #24
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	60f8      	str	r0, [r7, #12]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	607a      	str	r2, [r7, #4]
 8004fa2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004fa4:	7afb      	ldrb	r3, [r7, #11]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d17f      	bne.n	80050aa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3314      	adds	r3, #20
 8004fae:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d15c      	bne.n	8005074 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d915      	bls.n	8004ff2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	1ad2      	subs	r2, r2, r3
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 feee 	bl	8005dc0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	2100      	movs	r1, #0
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f001 fbb3 	bl	8006756 <USBD_LL_PrepareReceive>
 8004ff0:	e04e      	b.n	8005090 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	6912      	ldr	r2, [r2, #16]
 8004ffa:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ffe:	fb02 f201 	mul.w	r2, r2, r1
 8005002:	1a9b      	subs	r3, r3, r2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d11c      	bne.n	8005042 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005010:	429a      	cmp	r2, r3
 8005012:	d316      	bcc.n	8005042 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800501e:	429a      	cmp	r2, r3
 8005020:	d20f      	bcs.n	8005042 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005022:	2200      	movs	r2, #0
 8005024:	2100      	movs	r1, #0
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 feca 	bl	8005dc0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005034:	2300      	movs	r3, #0
 8005036:	2200      	movs	r2, #0
 8005038:	2100      	movs	r1, #0
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f001 fb8b 	bl	8006756 <USBD_LL_PrepareReceive>
 8005040:	e026      	b.n	8005090 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005054:	2b03      	cmp	r3, #3
 8005056:	d105      	bne.n	8005064 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005064:	2180      	movs	r1, #128	; 0x80
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f001 faca 	bl	8006600 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 fefc 	bl	8005e6a <USBD_CtlReceiveStatus>
 8005072:	e00d      	b.n	8005090 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800507a:	2b04      	cmp	r3, #4
 800507c:	d004      	beq.n	8005088 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005084:	2b00      	cmp	r3, #0
 8005086:	d103      	bne.n	8005090 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005088:	2180      	movs	r1, #128	; 0x80
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f001 fab8 	bl	8006600 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005096:	2b01      	cmp	r3, #1
 8005098:	d11d      	bne.n	80050d6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f7ff fe83 	bl	8004da6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80050a8:	e015      	b.n	80050d6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00d      	beq.n	80050d2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d108      	bne.n	80050d2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	7afa      	ldrb	r2, [r7, #11]
 80050ca:	4611      	mov	r1, r2
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	4798      	blx	r3
 80050d0:	e001      	b.n	80050d6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80050d2:	2302      	movs	r3, #2
 80050d4:	e000      	b.n	80050d8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3718      	adds	r7, #24
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80050e8:	2340      	movs	r3, #64	; 0x40
 80050ea:	2200      	movs	r2, #0
 80050ec:	2100      	movs	r1, #0
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f001 fa41 	bl	8006576 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2240      	movs	r2, #64	; 0x40
 8005100:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005104:	2340      	movs	r3, #64	; 0x40
 8005106:	2200      	movs	r2, #0
 8005108:	2180      	movs	r1, #128	; 0x80
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f001 fa33 	bl	8006576 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2240      	movs	r2, #64	; 0x40
 800511a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005140:	2b00      	cmp	r3, #0
 8005142:	d009      	beq.n	8005158 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	6852      	ldr	r2, [r2, #4]
 8005150:	b2d2      	uxtb	r2, r2
 8005152:	4611      	mov	r1, r2
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	4798      	blx	r3
  }

  return USBD_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
 800516a:	460b      	mov	r3, r1
 800516c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	78fa      	ldrb	r2, [r7, #3]
 8005172:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	bc80      	pop	{r7}
 800517e:	4770      	bx	lr

08005180 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2204      	movs	r2, #4
 8005198:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr

080051a8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d105      	bne.n	80051c6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr

080051d2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b082      	sub	sp, #8
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d10b      	bne.n	80051fc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80051f6:	69db      	ldr	r3, [r3, #28]
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
 800520e:	460b      	mov	r3, r1
 8005210:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	bc80      	pop	{r7}
 800521c:	4770      	bx	lr

0800521e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	460b      	mov	r3, r1
 8005228:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	bc80      	pop	{r7}
 8005234:	4770      	bx	lr

08005236 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	bc80      	pop	{r7}
 8005248:	4770      	bx	lr

0800524a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800524a:	b580      	push	{r7, lr}
 800524c:	b082      	sub	sp, #8
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6852      	ldr	r2, [r2, #4]
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	4611      	mov	r1, r2
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	4798      	blx	r3

  return USBD_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800528e:	2b20      	cmp	r3, #32
 8005290:	d004      	beq.n	800529c <USBD_StdDevReq+0x24>
 8005292:	2b40      	cmp	r3, #64	; 0x40
 8005294:	d002      	beq.n	800529c <USBD_StdDevReq+0x24>
 8005296:	2b00      	cmp	r3, #0
 8005298:	d008      	beq.n	80052ac <USBD_StdDevReq+0x34>
 800529a:	e04c      	b.n	8005336 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	6839      	ldr	r1, [r7, #0]
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	4798      	blx	r3
      break;
 80052aa:	e049      	b.n	8005340 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	785b      	ldrb	r3, [r3, #1]
 80052b0:	2b09      	cmp	r3, #9
 80052b2:	d83a      	bhi.n	800532a <USBD_StdDevReq+0xb2>
 80052b4:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <USBD_StdDevReq+0x44>)
 80052b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ba:	bf00      	nop
 80052bc:	0800530d 	.word	0x0800530d
 80052c0:	08005321 	.word	0x08005321
 80052c4:	0800532b 	.word	0x0800532b
 80052c8:	08005317 	.word	0x08005317
 80052cc:	0800532b 	.word	0x0800532b
 80052d0:	080052ef 	.word	0x080052ef
 80052d4:	080052e5 	.word	0x080052e5
 80052d8:	0800532b 	.word	0x0800532b
 80052dc:	08005303 	.word	0x08005303
 80052e0:	080052f9 	.word	0x080052f9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80052e4:	6839      	ldr	r1, [r7, #0]
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f9d4 	bl	8005694 <USBD_GetDescriptor>
          break;
 80052ec:	e022      	b.n	8005334 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80052ee:	6839      	ldr	r1, [r7, #0]
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fb37 	bl	8005964 <USBD_SetAddress>
          break;
 80052f6:	e01d      	b.n	8005334 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80052f8:	6839      	ldr	r1, [r7, #0]
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fb74 	bl	80059e8 <USBD_SetConfig>
          break;
 8005300:	e018      	b.n	8005334 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005302:	6839      	ldr	r1, [r7, #0]
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fbfd 	bl	8005b04 <USBD_GetConfig>
          break;
 800530a:	e013      	b.n	8005334 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800530c:	6839      	ldr	r1, [r7, #0]
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fc2c 	bl	8005b6c <USBD_GetStatus>
          break;
 8005314:	e00e      	b.n	8005334 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005316:	6839      	ldr	r1, [r7, #0]
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fc5a 	bl	8005bd2 <USBD_SetFeature>
          break;
 800531e:	e009      	b.n	8005334 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005320:	6839      	ldr	r1, [r7, #0]
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 fc69 	bl	8005bfa <USBD_ClrFeature>
          break;
 8005328:	e004      	b.n	8005334 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800532a:	6839      	ldr	r1, [r7, #0]
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fcc1 	bl	8005cb4 <USBD_CtlError>
          break;
 8005332:	bf00      	nop
      }
      break;
 8005334:	e004      	b.n	8005340 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005336:	6839      	ldr	r1, [r7, #0]
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fcbb 	bl	8005cb4 <USBD_CtlError>
      break;
 800533e:	bf00      	nop
  }

  return ret;
 8005340:	7bfb      	ldrb	r3, [r7, #15]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop

0800534c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005356:	2300      	movs	r3, #0
 8005358:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005362:	2b20      	cmp	r3, #32
 8005364:	d003      	beq.n	800536e <USBD_StdItfReq+0x22>
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d001      	beq.n	800536e <USBD_StdItfReq+0x22>
 800536a:	2b00      	cmp	r3, #0
 800536c:	d12a      	bne.n	80053c4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005374:	3b01      	subs	r3, #1
 8005376:	2b02      	cmp	r3, #2
 8005378:	d81d      	bhi.n	80053b6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	889b      	ldrh	r3, [r3, #4]
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2b01      	cmp	r3, #1
 8005382:	d813      	bhi.n	80053ac <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	6839      	ldr	r1, [r7, #0]
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	4798      	blx	r3
 8005392:	4603      	mov	r3, r0
 8005394:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	88db      	ldrh	r3, [r3, #6]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d110      	bne.n	80053c0 <USBD_StdItfReq+0x74>
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10d      	bne.n	80053c0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fd4d 	bl	8005e44 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80053aa:	e009      	b.n	80053c0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80053ac:	6839      	ldr	r1, [r7, #0]
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fc80 	bl	8005cb4 <USBD_CtlError>
          break;
 80053b4:	e004      	b.n	80053c0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80053b6:	6839      	ldr	r1, [r7, #0]
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fc7b 	bl	8005cb4 <USBD_CtlError>
          break;
 80053be:	e000      	b.n	80053c2 <USBD_StdItfReq+0x76>
          break;
 80053c0:	bf00      	nop
      }
      break;
 80053c2:	e004      	b.n	80053ce <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80053c4:	6839      	ldr	r1, [r7, #0]
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 fc74 	bl	8005cb4 <USBD_CtlError>
      break;
 80053cc:	bf00      	nop
  }

  return USBD_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	889b      	ldrh	r3, [r3, #4]
 80053ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053f4:	2b20      	cmp	r3, #32
 80053f6:	d004      	beq.n	8005402 <USBD_StdEPReq+0x2a>
 80053f8:	2b40      	cmp	r3, #64	; 0x40
 80053fa:	d002      	beq.n	8005402 <USBD_StdEPReq+0x2a>
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d008      	beq.n	8005412 <USBD_StdEPReq+0x3a>
 8005400:	e13d      	b.n	800567e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	6839      	ldr	r1, [r7, #0]
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	4798      	blx	r3
      break;
 8005410:	e13a      	b.n	8005688 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800541a:	2b20      	cmp	r3, #32
 800541c:	d10a      	bne.n	8005434 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	6839      	ldr	r1, [r7, #0]
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	4798      	blx	r3
 800542c:	4603      	mov	r3, r0
 800542e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	e12a      	b.n	800568a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	785b      	ldrb	r3, [r3, #1]
 8005438:	2b01      	cmp	r3, #1
 800543a:	d03e      	beq.n	80054ba <USBD_StdEPReq+0xe2>
 800543c:	2b03      	cmp	r3, #3
 800543e:	d002      	beq.n	8005446 <USBD_StdEPReq+0x6e>
 8005440:	2b00      	cmp	r3, #0
 8005442:	d070      	beq.n	8005526 <USBD_StdEPReq+0x14e>
 8005444:	e115      	b.n	8005672 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800544c:	2b02      	cmp	r3, #2
 800544e:	d002      	beq.n	8005456 <USBD_StdEPReq+0x7e>
 8005450:	2b03      	cmp	r3, #3
 8005452:	d015      	beq.n	8005480 <USBD_StdEPReq+0xa8>
 8005454:	e02b      	b.n	80054ae <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005456:	7bbb      	ldrb	r3, [r7, #14]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00c      	beq.n	8005476 <USBD_StdEPReq+0x9e>
 800545c:	7bbb      	ldrb	r3, [r7, #14]
 800545e:	2b80      	cmp	r3, #128	; 0x80
 8005460:	d009      	beq.n	8005476 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005462:	7bbb      	ldrb	r3, [r7, #14]
 8005464:	4619      	mov	r1, r3
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f001 f8ca 	bl	8006600 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800546c:	2180      	movs	r1, #128	; 0x80
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f001 f8c6 	bl	8006600 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005474:	e020      	b.n	80054b8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8005476:	6839      	ldr	r1, [r7, #0]
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fc1b 	bl	8005cb4 <USBD_CtlError>
              break;
 800547e:	e01b      	b.n	80054b8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	885b      	ldrh	r3, [r3, #2]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10e      	bne.n	80054a6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8005488:	7bbb      	ldrb	r3, [r7, #14]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00b      	beq.n	80054a6 <USBD_StdEPReq+0xce>
 800548e:	7bbb      	ldrb	r3, [r7, #14]
 8005490:	2b80      	cmp	r3, #128	; 0x80
 8005492:	d008      	beq.n	80054a6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	88db      	ldrh	r3, [r3, #6]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d104      	bne.n	80054a6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800549c:	7bbb      	ldrb	r3, [r7, #14]
 800549e:	4619      	mov	r1, r3
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f001 f8ad 	bl	8006600 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fccc 	bl	8005e44 <USBD_CtlSendStatus>

              break;
 80054ac:	e004      	b.n	80054b8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80054ae:	6839      	ldr	r1, [r7, #0]
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 fbff 	bl	8005cb4 <USBD_CtlError>
              break;
 80054b6:	bf00      	nop
          }
          break;
 80054b8:	e0e0      	b.n	800567c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d002      	beq.n	80054ca <USBD_StdEPReq+0xf2>
 80054c4:	2b03      	cmp	r3, #3
 80054c6:	d015      	beq.n	80054f4 <USBD_StdEPReq+0x11c>
 80054c8:	e026      	b.n	8005518 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054ca:	7bbb      	ldrb	r3, [r7, #14]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00c      	beq.n	80054ea <USBD_StdEPReq+0x112>
 80054d0:	7bbb      	ldrb	r3, [r7, #14]
 80054d2:	2b80      	cmp	r3, #128	; 0x80
 80054d4:	d009      	beq.n	80054ea <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80054d6:	7bbb      	ldrb	r3, [r7, #14]
 80054d8:	4619      	mov	r1, r3
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f001 f890 	bl	8006600 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80054e0:	2180      	movs	r1, #128	; 0x80
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f001 f88c 	bl	8006600 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80054e8:	e01c      	b.n	8005524 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80054ea:	6839      	ldr	r1, [r7, #0]
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fbe1 	bl	8005cb4 <USBD_CtlError>
              break;
 80054f2:	e017      	b.n	8005524 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	885b      	ldrh	r3, [r3, #2]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d112      	bne.n	8005522 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80054fc:	7bbb      	ldrb	r3, [r7, #14]
 80054fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005506:	7bbb      	ldrb	r3, [r7, #14]
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f001 f897 	bl	800663e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fc97 	bl	8005e44 <USBD_CtlSendStatus>
              }
              break;
 8005516:	e004      	b.n	8005522 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005518:	6839      	ldr	r1, [r7, #0]
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fbca 	bl	8005cb4 <USBD_CtlError>
              break;
 8005520:	e000      	b.n	8005524 <USBD_StdEPReq+0x14c>
              break;
 8005522:	bf00      	nop
          }
          break;
 8005524:	e0aa      	b.n	800567c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800552c:	2b02      	cmp	r3, #2
 800552e:	d002      	beq.n	8005536 <USBD_StdEPReq+0x15e>
 8005530:	2b03      	cmp	r3, #3
 8005532:	d032      	beq.n	800559a <USBD_StdEPReq+0x1c2>
 8005534:	e097      	b.n	8005666 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005536:	7bbb      	ldrb	r3, [r7, #14]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d007      	beq.n	800554c <USBD_StdEPReq+0x174>
 800553c:	7bbb      	ldrb	r3, [r7, #14]
 800553e:	2b80      	cmp	r3, #128	; 0x80
 8005540:	d004      	beq.n	800554c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005542:	6839      	ldr	r1, [r7, #0]
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fbb5 	bl	8005cb4 <USBD_CtlError>
                break;
 800554a:	e091      	b.n	8005670 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800554c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005550:	2b00      	cmp	r3, #0
 8005552:	da0b      	bge.n	800556c <USBD_StdEPReq+0x194>
 8005554:	7bbb      	ldrb	r3, [r7, #14]
 8005556:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	3310      	adds	r3, #16
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	4413      	add	r3, r2
 8005568:	3304      	adds	r3, #4
 800556a:	e00b      	b.n	8005584 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800556c:	7bbb      	ldrb	r3, [r7, #14]
 800556e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	4413      	add	r3, r2
 8005582:	3304      	adds	r3, #4
 8005584:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2202      	movs	r2, #2
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fbf8 	bl	8005d88 <USBD_CtlSendData>
              break;
 8005598:	e06a      	b.n	8005670 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800559a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	da11      	bge.n	80055c6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80055a2:	7bbb      	ldrb	r3, [r7, #14]
 80055a4:	f003 020f 	and.w	r2, r3, #15
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	440b      	add	r3, r1
 80055b4:	3318      	adds	r3, #24
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d117      	bne.n	80055ec <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fb78 	bl	8005cb4 <USBD_CtlError>
                  break;
 80055c4:	e054      	b.n	8005670 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80055c6:	7bbb      	ldrb	r3, [r7, #14]
 80055c8:	f003 020f 	and.w	r2, r3, #15
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d104      	bne.n	80055ec <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80055e2:	6839      	ldr	r1, [r7, #0]
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fb65 	bl	8005cb4 <USBD_CtlError>
                  break;
 80055ea:	e041      	b.n	8005670 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	da0b      	bge.n	800560c <USBD_StdEPReq+0x234>
 80055f4:	7bbb      	ldrb	r3, [r7, #14]
 80055f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	3310      	adds	r3, #16
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	4413      	add	r3, r2
 8005608:	3304      	adds	r3, #4
 800560a:	e00b      	b.n	8005624 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800560c:	7bbb      	ldrb	r3, [r7, #14]
 800560e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005612:	4613      	mov	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	4413      	add	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	4413      	add	r3, r2
 8005622:	3304      	adds	r3, #4
 8005624:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005626:	7bbb      	ldrb	r3, [r7, #14]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <USBD_StdEPReq+0x25a>
 800562c:	7bbb      	ldrb	r3, [r7, #14]
 800562e:	2b80      	cmp	r3, #128	; 0x80
 8005630:	d103      	bne.n	800563a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2200      	movs	r2, #0
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	e00e      	b.n	8005658 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800563a:	7bbb      	ldrb	r3, [r7, #14]
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f001 f81c 	bl	800667c <USBD_LL_IsStallEP>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d003      	beq.n	8005652 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	2201      	movs	r2, #1
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	e002      	b.n	8005658 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	2202      	movs	r2, #2
 800565c:	4619      	mov	r1, r3
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fb92 	bl	8005d88 <USBD_CtlSendData>
              break;
 8005664:	e004      	b.n	8005670 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005666:	6839      	ldr	r1, [r7, #0]
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fb23 	bl	8005cb4 <USBD_CtlError>
              break;
 800566e:	bf00      	nop
          }
          break;
 8005670:	e004      	b.n	800567c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fb1d 	bl	8005cb4 <USBD_CtlError>
          break;
 800567a:	bf00      	nop
      }
      break;
 800567c:	e004      	b.n	8005688 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800567e:	6839      	ldr	r1, [r7, #0]
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fb17 	bl	8005cb4 <USBD_CtlError>
      break;
 8005686:	bf00      	nop
  }

  return ret;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	885b      	ldrh	r3, [r3, #2]
 80056ae:	0a1b      	lsrs	r3, r3, #8
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	2b06      	cmp	r3, #6
 80056b6:	f200 8128 	bhi.w	800590a <USBD_GetDescriptor+0x276>
 80056ba:	a201      	add	r2, pc, #4	; (adr r2, 80056c0 <USBD_GetDescriptor+0x2c>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	080056dd 	.word	0x080056dd
 80056c4:	080056f5 	.word	0x080056f5
 80056c8:	08005735 	.word	0x08005735
 80056cc:	0800590b 	.word	0x0800590b
 80056d0:	0800590b 	.word	0x0800590b
 80056d4:	080058ab 	.word	0x080058ab
 80056d8:	080058d7 	.word	0x080058d7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	7c12      	ldrb	r2, [r2, #16]
 80056e8:	f107 0108 	add.w	r1, r7, #8
 80056ec:	4610      	mov	r0, r2
 80056ee:	4798      	blx	r3
 80056f0:	60f8      	str	r0, [r7, #12]
      break;
 80056f2:	e112      	b.n	800591a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	7c1b      	ldrb	r3, [r3, #16]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10d      	bne.n	8005718 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	f107 0208 	add.w	r2, r7, #8
 8005708:	4610      	mov	r0, r2
 800570a:	4798      	blx	r3
 800570c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3301      	adds	r3, #1
 8005712:	2202      	movs	r2, #2
 8005714:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005716:	e100      	b.n	800591a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800571e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005720:	f107 0208 	add.w	r2, r7, #8
 8005724:	4610      	mov	r0, r2
 8005726:	4798      	blx	r3
 8005728:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	3301      	adds	r3, #1
 800572e:	2202      	movs	r2, #2
 8005730:	701a      	strb	r2, [r3, #0]
      break;
 8005732:	e0f2      	b.n	800591a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	885b      	ldrh	r3, [r3, #2]
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b05      	cmp	r3, #5
 800573c:	f200 80ac 	bhi.w	8005898 <USBD_GetDescriptor+0x204>
 8005740:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <USBD_GetDescriptor+0xb4>)
 8005742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	08005761 	.word	0x08005761
 800574c:	08005795 	.word	0x08005795
 8005750:	080057c9 	.word	0x080057c9
 8005754:	080057fd 	.word	0x080057fd
 8005758:	08005831 	.word	0x08005831
 800575c:	08005865 	.word	0x08005865
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00b      	beq.n	8005784 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	7c12      	ldrb	r2, [r2, #16]
 8005778:	f107 0108 	add.w	r1, r7, #8
 800577c:	4610      	mov	r0, r2
 800577e:	4798      	blx	r3
 8005780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005782:	e091      	b.n	80058a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005784:	6839      	ldr	r1, [r7, #0]
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fa94 	bl	8005cb4 <USBD_CtlError>
            err++;
 800578c:	7afb      	ldrb	r3, [r7, #11]
 800578e:	3301      	adds	r3, #1
 8005790:	72fb      	strb	r3, [r7, #11]
          break;
 8005792:	e089      	b.n	80058a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00b      	beq.n	80057b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	7c12      	ldrb	r2, [r2, #16]
 80057ac:	f107 0108 	add.w	r1, r7, #8
 80057b0:	4610      	mov	r0, r2
 80057b2:	4798      	blx	r3
 80057b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057b6:	e077      	b.n	80058a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fa7a 	bl	8005cb4 <USBD_CtlError>
            err++;
 80057c0:	7afb      	ldrb	r3, [r7, #11]
 80057c2:	3301      	adds	r3, #1
 80057c4:	72fb      	strb	r3, [r7, #11]
          break;
 80057c6:	e06f      	b.n	80058a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00b      	beq.n	80057ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	7c12      	ldrb	r2, [r2, #16]
 80057e0:	f107 0108 	add.w	r1, r7, #8
 80057e4:	4610      	mov	r0, r2
 80057e6:	4798      	blx	r3
 80057e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80057ea:	e05d      	b.n	80058a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80057ec:	6839      	ldr	r1, [r7, #0]
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fa60 	bl	8005cb4 <USBD_CtlError>
            err++;
 80057f4:	7afb      	ldrb	r3, [r7, #11]
 80057f6:	3301      	adds	r3, #1
 80057f8:	72fb      	strb	r3, [r7, #11]
          break;
 80057fa:	e055      	b.n	80058a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00b      	beq.n	8005820 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	7c12      	ldrb	r2, [r2, #16]
 8005814:	f107 0108 	add.w	r1, r7, #8
 8005818:	4610      	mov	r0, r2
 800581a:	4798      	blx	r3
 800581c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800581e:	e043      	b.n	80058a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005820:	6839      	ldr	r1, [r7, #0]
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fa46 	bl	8005cb4 <USBD_CtlError>
            err++;
 8005828:	7afb      	ldrb	r3, [r7, #11]
 800582a:	3301      	adds	r3, #1
 800582c:	72fb      	strb	r3, [r7, #11]
          break;
 800582e:	e03b      	b.n	80058a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00b      	beq.n	8005854 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005842:	695b      	ldr	r3, [r3, #20]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	7c12      	ldrb	r2, [r2, #16]
 8005848:	f107 0108 	add.w	r1, r7, #8
 800584c:	4610      	mov	r0, r2
 800584e:	4798      	blx	r3
 8005850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005852:	e029      	b.n	80058a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fa2c 	bl	8005cb4 <USBD_CtlError>
            err++;
 800585c:	7afb      	ldrb	r3, [r7, #11]
 800585e:	3301      	adds	r3, #1
 8005860:	72fb      	strb	r3, [r7, #11]
          break;
 8005862:	e021      	b.n	80058a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d00b      	beq.n	8005888 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	7c12      	ldrb	r2, [r2, #16]
 800587c:	f107 0108 	add.w	r1, r7, #8
 8005880:	4610      	mov	r0, r2
 8005882:	4798      	blx	r3
 8005884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005886:	e00f      	b.n	80058a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005888:	6839      	ldr	r1, [r7, #0]
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fa12 	bl	8005cb4 <USBD_CtlError>
            err++;
 8005890:	7afb      	ldrb	r3, [r7, #11]
 8005892:	3301      	adds	r3, #1
 8005894:	72fb      	strb	r3, [r7, #11]
          break;
 8005896:	e007      	b.n	80058a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005898:	6839      	ldr	r1, [r7, #0]
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 fa0a 	bl	8005cb4 <USBD_CtlError>
          err++;
 80058a0:	7afb      	ldrb	r3, [r7, #11]
 80058a2:	3301      	adds	r3, #1
 80058a4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80058a6:	e038      	b.n	800591a <USBD_GetDescriptor+0x286>
 80058a8:	e037      	b.n	800591a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	7c1b      	ldrb	r3, [r3, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d109      	bne.n	80058c6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ba:	f107 0208 	add.w	r2, r7, #8
 80058be:	4610      	mov	r0, r2
 80058c0:	4798      	blx	r3
 80058c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80058c4:	e029      	b.n	800591a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80058c6:	6839      	ldr	r1, [r7, #0]
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 f9f3 	bl	8005cb4 <USBD_CtlError>
        err++;
 80058ce:	7afb      	ldrb	r3, [r7, #11]
 80058d0:	3301      	adds	r3, #1
 80058d2:	72fb      	strb	r3, [r7, #11]
      break;
 80058d4:	e021      	b.n	800591a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	7c1b      	ldrb	r3, [r3, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10d      	bne.n	80058fa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e6:	f107 0208 	add.w	r2, r7, #8
 80058ea:	4610      	mov	r0, r2
 80058ec:	4798      	blx	r3
 80058ee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	3301      	adds	r3, #1
 80058f4:	2207      	movs	r2, #7
 80058f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80058f8:	e00f      	b.n	800591a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f9d9 	bl	8005cb4 <USBD_CtlError>
        err++;
 8005902:	7afb      	ldrb	r3, [r7, #11]
 8005904:	3301      	adds	r3, #1
 8005906:	72fb      	strb	r3, [r7, #11]
      break;
 8005908:	e007      	b.n	800591a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800590a:	6839      	ldr	r1, [r7, #0]
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 f9d1 	bl	8005cb4 <USBD_CtlError>
      err++;
 8005912:	7afb      	ldrb	r3, [r7, #11]
 8005914:	3301      	adds	r3, #1
 8005916:	72fb      	strb	r3, [r7, #11]
      break;
 8005918:	bf00      	nop
  }

  if (err != 0U)
 800591a:	7afb      	ldrb	r3, [r7, #11]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d11c      	bne.n	800595a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005920:	893b      	ldrh	r3, [r7, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d011      	beq.n	800594a <USBD_GetDescriptor+0x2b6>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	88db      	ldrh	r3, [r3, #6]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00d      	beq.n	800594a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	88da      	ldrh	r2, [r3, #6]
 8005932:	893b      	ldrh	r3, [r7, #8]
 8005934:	4293      	cmp	r3, r2
 8005936:	bf28      	it	cs
 8005938:	4613      	movcs	r3, r2
 800593a:	b29b      	uxth	r3, r3
 800593c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800593e:	893b      	ldrh	r3, [r7, #8]
 8005940:	461a      	mov	r2, r3
 8005942:	68f9      	ldr	r1, [r7, #12]
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fa1f 	bl	8005d88 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	88db      	ldrh	r3, [r3, #6]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d104      	bne.n	800595c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fa76 	bl	8005e44 <USBD_CtlSendStatus>
 8005958:	e000      	b.n	800595c <USBD_GetDescriptor+0x2c8>
    return;
 800595a:	bf00      	nop
    }
  }
}
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop

08005964 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	889b      	ldrh	r3, [r3, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d130      	bne.n	80059d8 <USBD_SetAddress+0x74>
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	88db      	ldrh	r3, [r3, #6]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d12c      	bne.n	80059d8 <USBD_SetAddress+0x74>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	885b      	ldrh	r3, [r3, #2]
 8005982:	2b7f      	cmp	r3, #127	; 0x7f
 8005984:	d828      	bhi.n	80059d8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	885b      	ldrh	r3, [r3, #2]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005990:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005998:	2b03      	cmp	r3, #3
 800599a:	d104      	bne.n	80059a6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800599c:	6839      	ldr	r1, [r7, #0]
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f988 	bl	8005cb4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059a4:	e01c      	b.n	80059e0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	7bfa      	ldrb	r2, [r7, #15]
 80059aa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
 80059b0:	4619      	mov	r1, r3
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fe8d 	bl	80066d2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f000 fa43 	bl	8005e44 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059cc:	e008      	b.n	80059e0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059d6:	e003      	b.n	80059e0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80059d8:	6839      	ldr	r1, [r7, #0]
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f96a 	bl	8005cb4 <USBD_CtlError>
  }
}
 80059e0:	bf00      	nop
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	885b      	ldrh	r3, [r3, #2]
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	4b41      	ldr	r3, [pc, #260]	; (8005b00 <USBD_SetConfig+0x118>)
 80059fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80059fc:	4b40      	ldr	r3, [pc, #256]	; (8005b00 <USBD_SetConfig+0x118>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d904      	bls.n	8005a0e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005a04:	6839      	ldr	r1, [r7, #0]
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f954 	bl	8005cb4 <USBD_CtlError>
 8005a0c:	e075      	b.n	8005afa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d002      	beq.n	8005a1e <USBD_SetConfig+0x36>
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d023      	beq.n	8005a64 <USBD_SetConfig+0x7c>
 8005a1c:	e062      	b.n	8005ae4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005a1e:	4b38      	ldr	r3, [pc, #224]	; (8005b00 <USBD_SetConfig+0x118>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d01a      	beq.n	8005a5c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005a26:	4b36      	ldr	r3, [pc, #216]	; (8005b00 <USBD_SetConfig+0x118>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2203      	movs	r2, #3
 8005a34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005a38:	4b31      	ldr	r3, [pc, #196]	; (8005b00 <USBD_SetConfig+0x118>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff f9bb 	bl	8004dba <USBD_SetClassConfig>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d104      	bne.n	8005a54 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005a4a:	6839      	ldr	r1, [r7, #0]
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f931 	bl	8005cb4 <USBD_CtlError>
            return;
 8005a52:	e052      	b.n	8005afa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f9f5 	bl	8005e44 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005a5a:	e04e      	b.n	8005afa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f9f1 	bl	8005e44 <USBD_CtlSendStatus>
        break;
 8005a62:	e04a      	b.n	8005afa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005a64:	4b26      	ldr	r3, [pc, #152]	; (8005b00 <USBD_SetConfig+0x118>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d112      	bne.n	8005a92 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005a74:	4b22      	ldr	r3, [pc, #136]	; (8005b00 <USBD_SetConfig+0x118>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005a7e:	4b20      	ldr	r3, [pc, #128]	; (8005b00 <USBD_SetConfig+0x118>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff f9b7 	bl	8004df8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f9da 	bl	8005e44 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005a90:	e033      	b.n	8005afa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005a92:	4b1b      	ldr	r3, [pc, #108]	; (8005b00 <USBD_SetConfig+0x118>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	461a      	mov	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d01d      	beq.n	8005adc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7ff f9a5 	bl	8004df8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005aae:	4b14      	ldr	r3, [pc, #80]	; (8005b00 <USBD_SetConfig+0x118>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005ab8:	4b11      	ldr	r3, [pc, #68]	; (8005b00 <USBD_SetConfig+0x118>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff f97b 	bl	8004dba <USBD_SetClassConfig>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d104      	bne.n	8005ad4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 f8f1 	bl	8005cb4 <USBD_CtlError>
            return;
 8005ad2:	e012      	b.n	8005afa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f9b5 	bl	8005e44 <USBD_CtlSendStatus>
        break;
 8005ada:	e00e      	b.n	8005afa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f000 f9b1 	bl	8005e44 <USBD_CtlSendStatus>
        break;
 8005ae2:	e00a      	b.n	8005afa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f8e4 	bl	8005cb4 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005aec:	4b04      	ldr	r3, [pc, #16]	; (8005b00 <USBD_SetConfig+0x118>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	4619      	mov	r1, r3
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7ff f980 	bl	8004df8 <USBD_ClrClassConfig>
        break;
 8005af8:	bf00      	nop
    }
  }
}
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	20000198 	.word	0x20000198

08005b04 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	88db      	ldrh	r3, [r3, #6]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d004      	beq.n	8005b20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f8cb 	bl	8005cb4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005b1e:	e021      	b.n	8005b64 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	db17      	blt.n	8005b5a <USBD_GetConfig+0x56>
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	dd02      	ble.n	8005b34 <USBD_GetConfig+0x30>
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d00b      	beq.n	8005b4a <USBD_GetConfig+0x46>
 8005b32:	e012      	b.n	8005b5a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	2201      	movs	r2, #1
 8005b40:	4619      	mov	r1, r3
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f920 	bl	8005d88 <USBD_CtlSendData>
        break;
 8005b48:	e00c      	b.n	8005b64 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	2201      	movs	r2, #1
 8005b50:	4619      	mov	r1, r3
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f918 	bl	8005d88 <USBD_CtlSendData>
        break;
 8005b58:	e004      	b.n	8005b64 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8005b5a:	6839      	ldr	r1, [r7, #0]
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f8a9 	bl	8005cb4 <USBD_CtlError>
        break;
 8005b62:	bf00      	nop
}
 8005b64:	bf00      	nop
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d81e      	bhi.n	8005bc0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	88db      	ldrh	r3, [r3, #6]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d004      	beq.n	8005b94 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8005b8a:	6839      	ldr	r1, [r7, #0]
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f891 	bl	8005cb4 <USBD_CtlError>
        break;
 8005b92:	e01a      	b.n	8005bca <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d005      	beq.n	8005bb0 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f043 0202 	orr.w	r2, r3, #2
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	330c      	adds	r3, #12
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f8e5 	bl	8005d88 <USBD_CtlSendData>
      break;
 8005bbe:	e004      	b.n	8005bca <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005bc0:	6839      	ldr	r1, [r7, #0]
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f876 	bl	8005cb4 <USBD_CtlError>
      break;
 8005bc8:	bf00      	nop
  }
}
 8005bca:	bf00      	nop
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b082      	sub	sp, #8
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	885b      	ldrh	r3, [r3, #2]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d106      	bne.n	8005bf2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f929 	bl	8005e44 <USBD_CtlSendStatus>
  }
}
 8005bf2:	bf00      	nop
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b082      	sub	sp, #8
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d80b      	bhi.n	8005c28 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	885b      	ldrh	r3, [r3, #2]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d10c      	bne.n	8005c32 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f90f 	bl	8005e44 <USBD_CtlSendStatus>
      }
      break;
 8005c26:	e004      	b.n	8005c32 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f842 	bl	8005cb4 <USBD_CtlError>
      break;
 8005c30:	e000      	b.n	8005c34 <USBD_ClrFeature+0x3a>
      break;
 8005c32:	bf00      	nop
  }
}
 8005c34:	bf00      	nop
 8005c36:	3708      	adds	r7, #8
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	781a      	ldrb	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	785a      	ldrb	r2, [r3, #1]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	3302      	adds	r3, #2
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	3303      	adds	r3, #3
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	b29b      	uxth	r3, r3
 8005c6a:	4413      	add	r3, r2
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	3304      	adds	r3, #4
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	3305      	adds	r3, #5
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	021b      	lsls	r3, r3, #8
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	4413      	add	r3, r2
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	3306      	adds	r3, #6
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	3307      	adds	r3, #7
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	021b      	lsls	r3, r3, #8
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	4413      	add	r3, r2
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	80da      	strh	r2, [r3, #6]

}
 8005caa:	bf00      	nop
 8005cac:	370c      	adds	r7, #12
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bc80      	pop	{r7}
 8005cb2:	4770      	bx	lr

08005cb4 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005cbe:	2180      	movs	r1, #128	; 0x80
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fc9d 	bl	8006600 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fc99 	bl	8006600 <USBD_LL_StallEP>
}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b086      	sub	sp, #24
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d032      	beq.n	8005d52 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f834 	bl	8005d5a <USBD_GetLen>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005d00:	7dfb      	ldrb	r3, [r7, #23]
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	75fa      	strb	r2, [r7, #23]
 8005d06:	461a      	mov	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	7812      	ldrb	r2, [r2, #0]
 8005d10:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	75fa      	strb	r2, [r7, #23]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	2203      	movs	r2, #3
 8005d20:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005d22:	e012      	b.n	8005d4a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	60fa      	str	r2, [r7, #12]
 8005d2a:	7dfa      	ldrb	r2, [r7, #23]
 8005d2c:	1c51      	adds	r1, r2, #1
 8005d2e:	75f9      	strb	r1, [r7, #23]
 8005d30:	4611      	mov	r1, r2
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	440a      	add	r2, r1
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	75fa      	strb	r2, [r7, #23]
 8005d40:	461a      	mov	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	4413      	add	r3, r2
 8005d46:	2200      	movs	r2, #0
 8005d48:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e8      	bne.n	8005d24 <USBD_GetString+0x4e>
    }
  }
}
 8005d52:	bf00      	nop
 8005d54:	3718      	adds	r7, #24
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005d5a:	b480      	push	{r7}
 8005d5c:	b085      	sub	sp, #20
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005d66:	e005      	b.n	8005d74 <USBD_GetLen+0x1a>
  {
    len++;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	3301      	adds	r3, #1
 8005d72:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1f5      	bne.n	8005d68 <USBD_GetLen+0xe>
  }

  return len;
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bc80      	pop	{r7}
 8005d86:	4770      	bx	lr

08005d88 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	4613      	mov	r3, r2
 8005d94:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2202      	movs	r2, #2
 8005d9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005d9e:	88fa      	ldrh	r2, [r7, #6]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005da4:	88fa      	ldrh	r2, [r7, #6]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005daa:	88fb      	ldrh	r3, [r7, #6]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	2100      	movs	r1, #0
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 fcad 	bl	8006710 <USBD_LL_Transmit>

  return USBD_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 fc9b 	bl	8006710 <USBD_LL_Transmit>

  return USBD_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	4613      	mov	r3, r2
 8005df0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2203      	movs	r2, #3
 8005df6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005dfa:	88fa      	ldrh	r2, [r7, #6]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8005e02:	88fa      	ldrh	r2, [r7, #6]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	2100      	movs	r1, #0
 8005e10:	68f8      	ldr	r0, [r7, #12]
 8005e12:	f000 fca0 	bl	8006756 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005e2e:	88fb      	ldrh	r3, [r7, #6]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	2100      	movs	r1, #0
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 fc8e 	bl	8006756 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2204      	movs	r2, #4
 8005e50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005e54:	2300      	movs	r3, #0
 8005e56:	2200      	movs	r2, #0
 8005e58:	2100      	movs	r1, #0
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fc58 	bl	8006710 <USBD_LL_Transmit>

  return USBD_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b082      	sub	sp, #8
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2205      	movs	r2, #5
 8005e76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2100      	movs	r1, #0
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fc68 	bl	8006756 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3708      	adds	r7, #8
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}

08005e90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005e94:	2200      	movs	r2, #0
 8005e96:	4912      	ldr	r1, [pc, #72]	; (8005ee0 <MX_USB_DEVICE_Init+0x50>)
 8005e98:	4812      	ldr	r0, [pc, #72]	; (8005ee4 <MX_USB_DEVICE_Init+0x54>)
 8005e9a:	f7fe ff34 	bl	8004d06 <USBD_Init>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d001      	beq.n	8005ea8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005ea4:	f7fa fc04 	bl	80006b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005ea8:	490f      	ldr	r1, [pc, #60]	; (8005ee8 <MX_USB_DEVICE_Init+0x58>)
 8005eaa:	480e      	ldr	r0, [pc, #56]	; (8005ee4 <MX_USB_DEVICE_Init+0x54>)
 8005eac:	f7fe ff56 	bl	8004d5c <USBD_RegisterClass>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005eb6:	f7fa fbfb 	bl	80006b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005eba:	490c      	ldr	r1, [pc, #48]	; (8005eec <MX_USB_DEVICE_Init+0x5c>)
 8005ebc:	4809      	ldr	r0, [pc, #36]	; (8005ee4 <MX_USB_DEVICE_Init+0x54>)
 8005ebe:	f7fe fe87 	bl	8004bd0 <USBD_CDC_RegisterInterface>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005ec8:	f7fa fbf2 	bl	80006b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005ecc:	4805      	ldr	r0, [pc, #20]	; (8005ee4 <MX_USB_DEVICE_Init+0x54>)
 8005ece:	f7fe ff5e 	bl	8004d8e <USBD_Start>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005ed8:	f7fa fbea 	bl	80006b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005edc:	bf00      	nop
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	2000012c 	.word	0x2000012c
 8005ee4:	20000400 	.word	0x20000400
 8005ee8:	20000018 	.word	0x20000018
 8005eec:	2000011c 	.word	0x2000011c

08005ef0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	4905      	ldr	r1, [pc, #20]	; (8005f0c <CDC_Init_FS+0x1c>)
 8005ef8:	4805      	ldr	r0, [pc, #20]	; (8005f10 <CDC_Init_FS+0x20>)
 8005efa:	f7fe fe7f 	bl	8004bfc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005efe:	4905      	ldr	r1, [pc, #20]	; (8005f14 <CDC_Init_FS+0x24>)
 8005f00:	4803      	ldr	r0, [pc, #12]	; (8005f10 <CDC_Init_FS+0x20>)
 8005f02:	f7fe fe94 	bl	8004c2e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005f06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	20000aac 	.word	0x20000aac
 8005f10:	20000400 	.word	0x20000400
 8005f14:	200006c4 	.word	0x200006c4

08005f18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005f1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bc80      	pop	{r7}
 8005f24:	4770      	bx	lr
	...

08005f28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	4603      	mov	r3, r0
 8005f30:	6039      	str	r1, [r7, #0]
 8005f32:	71fb      	strb	r3, [r7, #7]
 8005f34:	4613      	mov	r3, r2
 8005f36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	2b23      	cmp	r3, #35	; 0x23
 8005f3c:	d85c      	bhi.n	8005ff8 <CDC_Control_FS+0xd0>
 8005f3e:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <CDC_Control_FS+0x1c>)
 8005f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f44:	08005ff9 	.word	0x08005ff9
 8005f48:	08005ff9 	.word	0x08005ff9
 8005f4c:	08005ff9 	.word	0x08005ff9
 8005f50:	08005ff9 	.word	0x08005ff9
 8005f54:	08005ff9 	.word	0x08005ff9
 8005f58:	08005ff9 	.word	0x08005ff9
 8005f5c:	08005ff9 	.word	0x08005ff9
 8005f60:	08005ff9 	.word	0x08005ff9
 8005f64:	08005ff9 	.word	0x08005ff9
 8005f68:	08005ff9 	.word	0x08005ff9
 8005f6c:	08005ff9 	.word	0x08005ff9
 8005f70:	08005ff9 	.word	0x08005ff9
 8005f74:	08005ff9 	.word	0x08005ff9
 8005f78:	08005ff9 	.word	0x08005ff9
 8005f7c:	08005ff9 	.word	0x08005ff9
 8005f80:	08005ff9 	.word	0x08005ff9
 8005f84:	08005ff9 	.word	0x08005ff9
 8005f88:	08005ff9 	.word	0x08005ff9
 8005f8c:	08005ff9 	.word	0x08005ff9
 8005f90:	08005ff9 	.word	0x08005ff9
 8005f94:	08005ff9 	.word	0x08005ff9
 8005f98:	08005ff9 	.word	0x08005ff9
 8005f9c:	08005ff9 	.word	0x08005ff9
 8005fa0:	08005ff9 	.word	0x08005ff9
 8005fa4:	08005ff9 	.word	0x08005ff9
 8005fa8:	08005ff9 	.word	0x08005ff9
 8005fac:	08005ff9 	.word	0x08005ff9
 8005fb0:	08005ff9 	.word	0x08005ff9
 8005fb4:	08005ff9 	.word	0x08005ff9
 8005fb8:	08005ff9 	.word	0x08005ff9
 8005fbc:	08005ff9 	.word	0x08005ff9
 8005fc0:	08005ff9 	.word	0x08005ff9
 8005fc4:	08005fd5 	.word	0x08005fd5
 8005fc8:	08005fe7 	.word	0x08005fe7
 8005fcc:	08005ff9 	.word	0x08005ff9
 8005fd0:	08005ff9 	.word	0x08005ff9
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
       	memcpy(buffer,pbuf,7);
 8005fd4:	4b0c      	ldr	r3, [pc, #48]	; (8006008 <CDC_Control_FS+0xe0>)
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	6811      	ldr	r1, [r2, #0]
 8005fda:	6019      	str	r1, [r3, #0]
 8005fdc:	8891      	ldrh	r1, [r2, #4]
 8005fde:	7992      	ldrb	r2, [r2, #6]
 8005fe0:	8099      	strh	r1, [r3, #4]
 8005fe2:	719a      	strb	r2, [r3, #6]
      break;
 8005fe4:	e009      	b.n	8005ffa <CDC_Control_FS+0xd2>

      case CDC_GET_LINE_CODING:
       	memcpy(pbuf,buffer,7);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	4a07      	ldr	r2, [pc, #28]	; (8006008 <CDC_Control_FS+0xe0>)
 8005fea:	6811      	ldr	r1, [r2, #0]
 8005fec:	6019      	str	r1, [r3, #0]
 8005fee:	8891      	ldrh	r1, [r2, #4]
 8005ff0:	7992      	ldrb	r2, [r2, #6]
 8005ff2:	8099      	strh	r1, [r3, #4]
 8005ff4:	719a      	strb	r2, [r3, #6]
      break;
 8005ff6:	e000      	b.n	8005ffa <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005ff8:	bf00      	nop
  }

  return (USBD_OK);
 8005ffa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	bc80      	pop	{r7}
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	20000e94 	.word	0x20000e94

0800600c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006016:	6879      	ldr	r1, [r7, #4]
 8006018:	4808      	ldr	r0, [pc, #32]	; (800603c <CDC_Receive_FS+0x30>)
 800601a:	f7fe fe08 	bl	8004c2e <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800601e:	4807      	ldr	r0, [pc, #28]	; (800603c <CDC_Receive_FS+0x30>)
 8006020:	f7fe fe47 	bl	8004cb2 <USBD_CDC_ReceivePacket>
	  CDC_Transmit_FS(Buf,*Len);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	4619      	mov	r1, r3
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f807 	bl	8006040 <CDC_Transmit_FS>
	  return (USBD_OK);
 8006032:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006034:	4618      	mov	r0, r3
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	20000400 	.word	0x20000400

08006040 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	807b      	strh	r3, [r7, #2]
	  uint8_t result = USBD_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	73fb      	strb	r3, [r7, #15]
	  /* USER CODE BEGIN 7 */
	  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006050:	4b0d      	ldr	r3, [pc, #52]	; (8006088 <CDC_Transmit_FS+0x48>)
 8006052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006056:	60bb      	str	r3, [r7, #8]
	  if (hcdc->TxState != 0){
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <CDC_Transmit_FS+0x26>
	    return USBD_BUSY;
 8006062:	2301      	movs	r3, #1
 8006064:	e00b      	b.n	800607e <CDC_Transmit_FS+0x3e>
	  }
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006066:	887b      	ldrh	r3, [r7, #2]
 8006068:	461a      	mov	r2, r3
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	4806      	ldr	r0, [pc, #24]	; (8006088 <CDC_Transmit_FS+0x48>)
 800606e:	f7fe fdc5 	bl	8004bfc <USBD_CDC_SetTxBuffer>
	  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006072:	4805      	ldr	r0, [pc, #20]	; (8006088 <CDC_Transmit_FS+0x48>)
 8006074:	f7fe fdee 	bl	8004c54 <USBD_CDC_TransmitPacket>
 8006078:	4603      	mov	r3, r0
 800607a:	73fb      	strb	r3, [r7, #15]
	  /* USER CODE END 7 */
	  return result;
 800607c:	7bfb      	ldrb	r3, [r7, #15]
}
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop
 8006088:	20000400 	.word	0x20000400

0800608c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	4603      	mov	r3, r0
 8006094:	6039      	str	r1, [r7, #0]
 8006096:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2212      	movs	r2, #18
 800609c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800609e:	4b03      	ldr	r3, [pc, #12]	; (80060ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bc80      	pop	{r7}
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	20000148 	.word	0x20000148

080060b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	4603      	mov	r3, r0
 80060b8:	6039      	str	r1, [r7, #0]
 80060ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	2204      	movs	r2, #4
 80060c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80060c2:	4b03      	ldr	r3, [pc, #12]	; (80060d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	370c      	adds	r7, #12
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bc80      	pop	{r7}
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	2000015c 	.word	0x2000015c

080060d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	4603      	mov	r3, r0
 80060dc:	6039      	str	r1, [r7, #0]
 80060de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80060e0:	79fb      	ldrb	r3, [r7, #7]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d105      	bne.n	80060f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	4907      	ldr	r1, [pc, #28]	; (8006108 <USBD_FS_ProductStrDescriptor+0x34>)
 80060ea:	4808      	ldr	r0, [pc, #32]	; (800610c <USBD_FS_ProductStrDescriptor+0x38>)
 80060ec:	f7ff fdf3 	bl	8005cd6 <USBD_GetString>
 80060f0:	e004      	b.n	80060fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	4904      	ldr	r1, [pc, #16]	; (8006108 <USBD_FS_ProductStrDescriptor+0x34>)
 80060f6:	4805      	ldr	r0, [pc, #20]	; (800610c <USBD_FS_ProductStrDescriptor+0x38>)
 80060f8:	f7ff fded 	bl	8005cd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80060fc:	4b02      	ldr	r3, [pc, #8]	; (8006108 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20000e9c 	.word	0x20000e9c
 800610c:	080068d8 	.word	0x080068d8

08006110 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	6039      	str	r1, [r7, #0]
 800611a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	4904      	ldr	r1, [pc, #16]	; (8006130 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006120:	4804      	ldr	r0, [pc, #16]	; (8006134 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006122:	f7ff fdd8 	bl	8005cd6 <USBD_GetString>
  return USBD_StrDesc;
 8006126:	4b02      	ldr	r3, [pc, #8]	; (8006130 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}
 8006130:	20000e9c 	.word	0x20000e9c
 8006134:	080068f0 	.word	0x080068f0

08006138 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	4603      	mov	r3, r0
 8006140:	6039      	str	r1, [r7, #0]
 8006142:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	221a      	movs	r2, #26
 8006148:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800614a:	f000 f843 	bl	80061d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800614e:	4b02      	ldr	r3, [pc, #8]	; (8006158 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006150:	4618      	mov	r0, r3
 8006152:	3708      	adds	r7, #8
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	20000160 	.word	0x20000160

0800615c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	4603      	mov	r3, r0
 8006164:	6039      	str	r1, [r7, #0]
 8006166:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006168:	79fb      	ldrb	r3, [r7, #7]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d105      	bne.n	800617a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800616e:	683a      	ldr	r2, [r7, #0]
 8006170:	4907      	ldr	r1, [pc, #28]	; (8006190 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006172:	4808      	ldr	r0, [pc, #32]	; (8006194 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006174:	f7ff fdaf 	bl	8005cd6 <USBD_GetString>
 8006178:	e004      	b.n	8006184 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	4904      	ldr	r1, [pc, #16]	; (8006190 <USBD_FS_ConfigStrDescriptor+0x34>)
 800617e:	4805      	ldr	r0, [pc, #20]	; (8006194 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006180:	f7ff fda9 	bl	8005cd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006184:	4b02      	ldr	r3, [pc, #8]	; (8006190 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006186:	4618      	mov	r0, r3
 8006188:	3708      	adds	r7, #8
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20000e9c 	.word	0x20000e9c
 8006194:	08006904 	.word	0x08006904

08006198 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	4603      	mov	r3, r0
 80061a0:	6039      	str	r1, [r7, #0]
 80061a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80061a4:	79fb      	ldrb	r3, [r7, #7]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d105      	bne.n	80061b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	4907      	ldr	r1, [pc, #28]	; (80061cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80061ae:	4808      	ldr	r0, [pc, #32]	; (80061d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80061b0:	f7ff fd91 	bl	8005cd6 <USBD_GetString>
 80061b4:	e004      	b.n	80061c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	4904      	ldr	r1, [pc, #16]	; (80061cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80061ba:	4805      	ldr	r0, [pc, #20]	; (80061d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80061bc:	f7ff fd8b 	bl	8005cd6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80061c0:	4b02      	ldr	r3, [pc, #8]	; (80061cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	20000e9c 	.word	0x20000e9c
 80061d0:	08006910 	.word	0x08006910

080061d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80061da:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <Get_SerialNum+0x44>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80061e0:	4b0e      	ldr	r3, [pc, #56]	; (800621c <Get_SerialNum+0x48>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80061e6:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <Get_SerialNum+0x4c>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4413      	add	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d009      	beq.n	800620e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80061fa:	2208      	movs	r2, #8
 80061fc:	4909      	ldr	r1, [pc, #36]	; (8006224 <Get_SerialNum+0x50>)
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 f814 	bl	800622c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006204:	2204      	movs	r2, #4
 8006206:	4908      	ldr	r1, [pc, #32]	; (8006228 <Get_SerialNum+0x54>)
 8006208:	68b8      	ldr	r0, [r7, #8]
 800620a:	f000 f80f 	bl	800622c <IntToUnicode>
  }
}
 800620e:	bf00      	nop
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	1ffff7e8 	.word	0x1ffff7e8
 800621c:	1ffff7ec 	.word	0x1ffff7ec
 8006220:	1ffff7f0 	.word	0x1ffff7f0
 8006224:	20000162 	.word	0x20000162
 8006228:	20000172 	.word	0x20000172

0800622c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800622c:	b480      	push	{r7}
 800622e:	b087      	sub	sp, #28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	4613      	mov	r3, r2
 8006238:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800623a:	2300      	movs	r3, #0
 800623c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800623e:	2300      	movs	r3, #0
 8006240:	75fb      	strb	r3, [r7, #23]
 8006242:	e027      	b.n	8006294 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	0f1b      	lsrs	r3, r3, #28
 8006248:	2b09      	cmp	r3, #9
 800624a:	d80b      	bhi.n	8006264 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	0f1b      	lsrs	r3, r3, #28
 8006250:	b2da      	uxtb	r2, r3
 8006252:	7dfb      	ldrb	r3, [r7, #23]
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	4619      	mov	r1, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	440b      	add	r3, r1
 800625c:	3230      	adds	r2, #48	; 0x30
 800625e:	b2d2      	uxtb	r2, r2
 8006260:	701a      	strb	r2, [r3, #0]
 8006262:	e00a      	b.n	800627a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	0f1b      	lsrs	r3, r3, #28
 8006268:	b2da      	uxtb	r2, r3
 800626a:	7dfb      	ldrb	r3, [r7, #23]
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	4619      	mov	r1, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	440b      	add	r3, r1
 8006274:	3237      	adds	r2, #55	; 0x37
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	011b      	lsls	r3, r3, #4
 800627e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006280:	7dfb      	ldrb	r3, [r7, #23]
 8006282:	005b      	lsls	r3, r3, #1
 8006284:	3301      	adds	r3, #1
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	4413      	add	r3, r2
 800628a:	2200      	movs	r2, #0
 800628c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800628e:	7dfb      	ldrb	r3, [r7, #23]
 8006290:	3301      	adds	r3, #1
 8006292:	75fb      	strb	r3, [r7, #23]
 8006294:	7dfa      	ldrb	r2, [r7, #23]
 8006296:	79fb      	ldrb	r3, [r7, #7]
 8006298:	429a      	cmp	r2, r3
 800629a:	d3d3      	bcc.n	8006244 <IntToUnicode+0x18>
  }
}
 800629c:	bf00      	nop
 800629e:	371c      	adds	r7, #28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bc80      	pop	{r7}
 80062a4:	4770      	bx	lr
	...

080062a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB_OTG_FS)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062b8:	d113      	bne.n	80062e2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80062ba:	4b0c      	ldr	r3, [pc, #48]	; (80062ec <HAL_PCD_MspInit+0x44>)
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	4a0b      	ldr	r2, [pc, #44]	; (80062ec <HAL_PCD_MspInit+0x44>)
 80062c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062c4:	6153      	str	r3, [r2, #20]
 80062c6:	4b09      	ldr	r3, [pc, #36]	; (80062ec <HAL_PCD_MspInit+0x44>)
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80062d2:	2200      	movs	r2, #0
 80062d4:	2100      	movs	r1, #0
 80062d6:	2043      	movs	r0, #67	; 0x43
 80062d8:	f7fa fc3b 	bl	8000b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80062dc:	2043      	movs	r0, #67	; 0x43
 80062de:	f7fa fc54 	bl	8000b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80062e2:	bf00      	nop
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	40021000 	.word	0x40021000

080062f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 23fc 	ldr.w	r2, [r3, #1020]	; 0x3fc
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006304:	4619      	mov	r1, r3
 8006306:	4610      	mov	r0, r2
 8006308:	f7fe fd89 	bl	8004e1e <USBD_LL_SetupStage>
}
 800630c:	bf00      	nop
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 8006326:	78fa      	ldrb	r2, [r7, #3]
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	4613      	mov	r3, r2
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	1a9b      	subs	r3, r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	440b      	add	r3, r1
 8006334:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	78fb      	ldrb	r3, [r7, #3]
 800633c:	4619      	mov	r1, r3
 800633e:	f7fe fdb9 	bl	8004eb4 <USBD_LL_DataOutStage>
}
 8006342:	bf00      	nop
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}

0800634a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b082      	sub	sp, #8
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
 8006352:	460b      	mov	r3, r1
 8006354:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	; 0x3fc
 800635c:	78fa      	ldrb	r2, [r7, #3]
 800635e:	6879      	ldr	r1, [r7, #4]
 8006360:	4613      	mov	r3, r2
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	1a9b      	subs	r3, r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	440b      	add	r3, r1
 800636a:	3348      	adds	r3, #72	; 0x48
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	78fb      	ldrb	r3, [r7, #3]
 8006370:	4619      	mov	r1, r3
 8006372:	f7fe fe10 	bl	8004f96 <USBD_LL_DataInStage>
}
 8006376:	bf00      	nop
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b082      	sub	sp, #8
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 800638c:	4618      	mov	r0, r3
 800638e:	f7fe ff20 	bl	80051d2 <USBD_LL_SOF>
}
 8006392:	bf00      	nop
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800639a:	b580      	push	{r7, lr}
 800639c:	b084      	sub	sp, #16
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80063a2:	2301      	movs	r3, #1
 80063a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d001      	beq.n	80063b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80063ae:	f7fa f97f 	bl	80006b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80063b8:	7bfa      	ldrb	r2, [r7, #15]
 80063ba:	4611      	mov	r1, r2
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fe fed0 	bl	8005162 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fe fe89 	bl	80050e0 <USBD_LL_Reset>
}
 80063ce:	bf00      	nop
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
	...

080063d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fe feca 	bl	8005180 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	6812      	ldr	r2, [r2, #0]
 80063fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063fe:	f043 0301 	orr.w	r3, r3, #1
 8006402:	6013      	str	r3, [r2, #0]
  if (hpcd->Init.low_power_enable)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a1b      	ldr	r3, [r3, #32]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d005      	beq.n	8006418 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800640c:	4b04      	ldr	r3, [pc, #16]	; (8006420 <HAL_PCD_SuspendCallback+0x48>)
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	4a03      	ldr	r2, [pc, #12]	; (8006420 <HAL_PCD_SuspendCallback+0x48>)
 8006412:	f043 0306 	orr.w	r3, r3, #6
 8006416:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006418:	bf00      	nop
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	e000ed00 	.word	0xe000ed00

08006424 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe feb8 	bl	80051a8 <USBD_LL_Resume>
}
 8006438:	bf00      	nop
 800643a:	3708      	adds	r7, #8
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006452:	78fa      	ldrb	r2, [r7, #3]
 8006454:	4611      	mov	r1, r2
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe fee1 	bl	800521e <USBD_LL_IsoOUTIncomplete>
}
 800645c:	bf00      	nop
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006476:	78fa      	ldrb	r2, [r7, #3]
 8006478:	4611      	mov	r1, r2
 800647a:	4618      	mov	r0, r3
 800647c:	f7fe fec3 	bl	8005206 <USBD_LL_IsoINIncomplete>
}
 8006480:	bf00      	nop
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 8006496:	4618      	mov	r0, r3
 8006498:	f7fe fecd 	bl	8005236 <USBD_LL_DevConnected>
}
 800649c:	bf00      	nop
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	; 0x3fc
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fe fec9 	bl	800524a <USBD_LL_DevDisconnected>
}
 80064b8:	bf00      	nop
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d130      	bne.n	8006532 <USBD_LL_Init+0x72>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80064d0:	4a1a      	ldr	r2, [pc, #104]	; (800653c <USBD_LL_Init+0x7c>)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8c2 33fc 	str.w	r3, [r2, #1020]	; 0x3fc
  pdev->pData = &hpcd_USB_OTG_FS;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a18      	ldr	r2, [pc, #96]	; (800653c <USBD_LL_Init+0x7c>)
 80064dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80064e0:	4b16      	ldr	r3, [pc, #88]	; (800653c <USBD_LL_Init+0x7c>)
 80064e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80064e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80064e8:	4b14      	ldr	r3, [pc, #80]	; (800653c <USBD_LL_Init+0x7c>)
 80064ea:	2204      	movs	r2, #4
 80064ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80064ee:	4b13      	ldr	r3, [pc, #76]	; (800653c <USBD_LL_Init+0x7c>)
 80064f0:	2202      	movs	r2, #2
 80064f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80064f4:	4b11      	ldr	r3, [pc, #68]	; (800653c <USBD_LL_Init+0x7c>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80064fa:	4b10      	ldr	r3, [pc, #64]	; (800653c <USBD_LL_Init+0x7c>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006500:	4b0e      	ldr	r3, [pc, #56]	; (800653c <USBD_LL_Init+0x7c>)
 8006502:	2200      	movs	r2, #0
 8006504:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006506:	480d      	ldr	r0, [pc, #52]	; (800653c <USBD_LL_Init+0x7c>)
 8006508:	f7fa fdbc 	bl	8001084 <HAL_PCD_Init>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8006512:	f7fa f8cd 	bl	80006b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006516:	2180      	movs	r1, #128	; 0x80
 8006518:	4808      	ldr	r0, [pc, #32]	; (800653c <USBD_LL_Init+0x7c>)
 800651a:	f7fb fdcd 	bl	80020b8 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800651e:	2240      	movs	r2, #64	; 0x40
 8006520:	2100      	movs	r1, #0
 8006522:	4806      	ldr	r0, [pc, #24]	; (800653c <USBD_LL_Init+0x7c>)
 8006524:	f7fb fd82 	bl	800202c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006528:	2280      	movs	r2, #128	; 0x80
 800652a:	2101      	movs	r1, #1
 800652c:	4803      	ldr	r0, [pc, #12]	; (800653c <USBD_LL_Init+0x7c>)
 800652e:	f7fb fd7d 	bl	800202c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	2000109c 	.word	0x2000109c

08006540 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006556:	4618      	mov	r0, r3
 8006558:	f7fa feb1 	bl	80012be <HAL_PCD_Start>
 800655c:	4603      	mov	r3, r0
 800655e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	4618      	mov	r0, r3
 8006564:	f000 f944 	bl	80067f0 <USBD_Get_USB_Status>
 8006568:	4603      	mov	r3, r0
 800656a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800656c:	7bbb      	ldrb	r3, [r7, #14]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b084      	sub	sp, #16
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	4608      	mov	r0, r1
 8006580:	4611      	mov	r1, r2
 8006582:	461a      	mov	r2, r3
 8006584:	4603      	mov	r3, r0
 8006586:	70fb      	strb	r3, [r7, #3]
 8006588:	460b      	mov	r3, r1
 800658a:	70bb      	strb	r3, [r7, #2]
 800658c:	4613      	mov	r3, r2
 800658e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006590:	2300      	movs	r3, #0
 8006592:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800659e:	78bb      	ldrb	r3, [r7, #2]
 80065a0:	883a      	ldrh	r2, [r7, #0]
 80065a2:	78f9      	ldrb	r1, [r7, #3]
 80065a4:	f7fb fa3b 	bl	8001a1e <HAL_PCD_EP_Open>
 80065a8:	4603      	mov	r3, r0
 80065aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065ac:	7bfb      	ldrb	r3, [r7, #15]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f000 f91e 	bl	80067f0 <USBD_Get_USB_Status>
 80065b4:	4603      	mov	r3, r0
 80065b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b084      	sub	sp, #16
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	460b      	mov	r3, r1
 80065cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065dc:	78fa      	ldrb	r2, [r7, #3]
 80065de:	4611      	mov	r1, r2
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fb fa84 	bl	8001aee <HAL_PCD_EP_Close>
 80065e6:	4603      	mov	r3, r0
 80065e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 f8ff 	bl	80067f0 <USBD_Get_USB_Status>
 80065f2:	4603      	mov	r3, r0
 80065f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800660c:	2300      	movs	r3, #0
 800660e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006610:	2300      	movs	r3, #0
 8006612:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800661a:	78fa      	ldrb	r2, [r7, #3]
 800661c:	4611      	mov	r1, r2
 800661e:	4618      	mov	r0, r3
 8006620:	f7fb fb41 	bl	8001ca6 <HAL_PCD_EP_SetStall>
 8006624:	4603      	mov	r3, r0
 8006626:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006628:	7bfb      	ldrb	r3, [r7, #15]
 800662a:	4618      	mov	r0, r3
 800662c:	f000 f8e0 	bl	80067f0 <USBD_Get_USB_Status>
 8006630:	4603      	mov	r3, r0
 8006632:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006634:	7bbb      	ldrb	r3, [r7, #14]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b084      	sub	sp, #16
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
 8006646:	460b      	mov	r3, r1
 8006648:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006658:	78fa      	ldrb	r2, [r7, #3]
 800665a:	4611      	mov	r1, r2
 800665c:	4618      	mov	r0, r3
 800665e:	f7fb fb84 	bl	8001d6a <HAL_PCD_EP_ClrStall>
 8006662:	4603      	mov	r3, r0
 8006664:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006666:	7bfb      	ldrb	r3, [r7, #15]
 8006668:	4618      	mov	r0, r3
 800666a:	f000 f8c1 	bl	80067f0 <USBD_Get_USB_Status>
 800666e:	4603      	mov	r3, r0
 8006670:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006672:	7bbb      	ldrb	r3, [r7, #14]
}
 8006674:	4618      	mov	r0, r3
 8006676:	3710      	adds	r7, #16
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	460b      	mov	r3, r1
 8006686:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800668e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006690:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006694:	2b00      	cmp	r3, #0
 8006696:	da0b      	bge.n	80066b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006698:	78fb      	ldrb	r3, [r7, #3]
 800669a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800669e:	68f9      	ldr	r1, [r7, #12]
 80066a0:	4613      	mov	r3, r2
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	1a9b      	subs	r3, r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	440b      	add	r3, r1
 80066aa:	333e      	adds	r3, #62	; 0x3e
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	e00b      	b.n	80066c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80066b0:	78fb      	ldrb	r3, [r7, #3]
 80066b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066b6:	68f9      	ldr	r1, [r7, #12]
 80066b8:	4613      	mov	r3, r2
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	1a9b      	subs	r3, r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	440b      	add	r3, r1
 80066c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80066c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bc80      	pop	{r7}
 80066d0:	4770      	bx	lr

080066d2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
 80066da:	460b      	mov	r3, r1
 80066dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066ec:	78fa      	ldrb	r2, [r7, #3]
 80066ee:	4611      	mov	r1, r2
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7fb f96f 	bl	80019d4 <HAL_PCD_SetAddress>
 80066f6:	4603      	mov	r3, r0
 80066f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 f877 	bl	80067f0 <USBD_Get_USB_Status>
 8006702:	4603      	mov	r3, r0
 8006704:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006706:	7bbb      	ldrb	r3, [r7, #14]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	607a      	str	r2, [r7, #4]
 800671a:	461a      	mov	r2, r3
 800671c:	460b      	mov	r3, r1
 800671e:	72fb      	strb	r3, [r7, #11]
 8006720:	4613      	mov	r3, r2
 8006722:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006732:	893b      	ldrh	r3, [r7, #8]
 8006734:	7af9      	ldrb	r1, [r7, #11]
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	f7fb fa78 	bl	8001c2c <HAL_PCD_EP_Transmit>
 800673c:	4603      	mov	r3, r0
 800673e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006740:	7dfb      	ldrb	r3, [r7, #23]
 8006742:	4618      	mov	r0, r3
 8006744:	f000 f854 	bl	80067f0 <USBD_Get_USB_Status>
 8006748:	4603      	mov	r3, r0
 800674a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800674c:	7dbb      	ldrb	r3, [r7, #22]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b086      	sub	sp, #24
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	607a      	str	r2, [r7, #4]
 8006760:	461a      	mov	r2, r3
 8006762:	460b      	mov	r3, r1
 8006764:	72fb      	strb	r3, [r7, #11]
 8006766:	4613      	mov	r3, r2
 8006768:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006778:	893b      	ldrh	r3, [r7, #8]
 800677a:	7af9      	ldrb	r1, [r7, #11]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	f7fb fa00 	bl	8001b82 <HAL_PCD_EP_Receive>
 8006782:	4603      	mov	r3, r0
 8006784:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006786:	7dfb      	ldrb	r3, [r7, #23]
 8006788:	4618      	mov	r0, r3
 800678a:	f000 f831 	bl	80067f0 <USBD_Get_USB_Status>
 800678e:	4603      	mov	r3, r0
 8006790:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006792:	7dbb      	ldrb	r3, [r7, #22]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80067ae:	78fa      	ldrb	r2, [r7, #3]
 80067b0:	4611      	mov	r1, r2
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fb fa23 	bl	8001bfe <HAL_PCD_EP_GetRxCount>
 80067b8:	4603      	mov	r3, r0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
	...

080067c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80067cc:	4b02      	ldr	r3, [pc, #8]	; (80067d8 <USBD_static_malloc+0x14>)
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr
 80067d8:	2000019c 	.word	0x2000019c

080067dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]

}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bc80      	pop	{r7}
 80067ec:	4770      	bx	lr
	...

080067f0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	4603      	mov	r3, r0
 80067f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	2b03      	cmp	r3, #3
 8006802:	d817      	bhi.n	8006834 <USBD_Get_USB_Status+0x44>
 8006804:	a201      	add	r2, pc, #4	; (adr r2, 800680c <USBD_Get_USB_Status+0x1c>)
 8006806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680a:	bf00      	nop
 800680c:	0800681d 	.word	0x0800681d
 8006810:	08006823 	.word	0x08006823
 8006814:	08006829 	.word	0x08006829
 8006818:	0800682f 	.word	0x0800682f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	73fb      	strb	r3, [r7, #15]
    break;
 8006820:	e00b      	b.n	800683a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006822:	2302      	movs	r3, #2
 8006824:	73fb      	strb	r3, [r7, #15]
    break;
 8006826:	e008      	b.n	800683a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006828:	2301      	movs	r3, #1
 800682a:	73fb      	strb	r3, [r7, #15]
    break;
 800682c:	e005      	b.n	800683a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800682e:	2302      	movs	r3, #2
 8006830:	73fb      	strb	r3, [r7, #15]
    break;
 8006832:	e002      	b.n	800683a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006834:	2302      	movs	r3, #2
 8006836:	73fb      	strb	r3, [r7, #15]
    break;
 8006838:	bf00      	nop
  }
  return usb_status;
 800683a:	7bfb      	ldrb	r3, [r7, #15]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	bc80      	pop	{r7}
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop

08006848 <__libc_init_array>:
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	2500      	movs	r5, #0
 800684c:	4e0c      	ldr	r6, [pc, #48]	; (8006880 <__libc_init_array+0x38>)
 800684e:	4c0d      	ldr	r4, [pc, #52]	; (8006884 <__libc_init_array+0x3c>)
 8006850:	1ba4      	subs	r4, r4, r6
 8006852:	10a4      	asrs	r4, r4, #2
 8006854:	42a5      	cmp	r5, r4
 8006856:	d109      	bne.n	800686c <__libc_init_array+0x24>
 8006858:	f000 f822 	bl	80068a0 <_init>
 800685c:	2500      	movs	r5, #0
 800685e:	4e0a      	ldr	r6, [pc, #40]	; (8006888 <__libc_init_array+0x40>)
 8006860:	4c0a      	ldr	r4, [pc, #40]	; (800688c <__libc_init_array+0x44>)
 8006862:	1ba4      	subs	r4, r4, r6
 8006864:	10a4      	asrs	r4, r4, #2
 8006866:	42a5      	cmp	r5, r4
 8006868:	d105      	bne.n	8006876 <__libc_init_array+0x2e>
 800686a:	bd70      	pop	{r4, r5, r6, pc}
 800686c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006870:	4798      	blx	r3
 8006872:	3501      	adds	r5, #1
 8006874:	e7ee      	b.n	8006854 <__libc_init_array+0xc>
 8006876:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800687a:	4798      	blx	r3
 800687c:	3501      	adds	r5, #1
 800687e:	e7f2      	b.n	8006866 <__libc_init_array+0x1e>
 8006880:	08006940 	.word	0x08006940
 8006884:	08006940 	.word	0x08006940
 8006888:	08006940 	.word	0x08006940
 800688c:	08006944 	.word	0x08006944

08006890 <memset>:
 8006890:	4603      	mov	r3, r0
 8006892:	4402      	add	r2, r0
 8006894:	4293      	cmp	r3, r2
 8006896:	d100      	bne.n	800689a <memset+0xa>
 8006898:	4770      	bx	lr
 800689a:	f803 1b01 	strb.w	r1, [r3], #1
 800689e:	e7f9      	b.n	8006894 <memset+0x4>

080068a0 <_init>:
 80068a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068a2:	bf00      	nop
 80068a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a6:	bc08      	pop	{r3}
 80068a8:	469e      	mov	lr, r3
 80068aa:	4770      	bx	lr

080068ac <_fini>:
 80068ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ae:	bf00      	nop
 80068b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068b2:	bc08      	pop	{r3}
 80068b4:	469e      	mov	lr, r3
 80068b6:	4770      	bx	lr
