
ADC_F405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009da0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08009f30  08009f30  00019f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a424  0800a424  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a424  0800a424  0001a424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a42c  0800a42c  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a42c  0800a42c  0001a42c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a430  0800a430  0001a430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0800a434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043a4  200000c4  0800a4f8  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004468  0800a4f8  00024468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027405  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e03  00000000  00000000  000474f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a8  00000000  00000000  0004c300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001808  00000000  00000000  0004dca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000247eb  00000000  00000000  0004f4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f803  00000000  00000000  00073c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce7a9  00000000  00000000  0009349e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00161c47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007724  00000000  00000000  00161c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c4 	.word	0x200000c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009f18 	.word	0x08009f18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	08009f18 	.word	0x08009f18

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <adc_init>:

adc_object adc_main;


void adc_init(I2C_HandleTypeDef* hi2c)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	adc_main.hi2c=hi2c;
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <adc_init+0x1c>)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	6013      	str	r3, [r2, #0]
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	200040f4 	.word	0x200040f4

080005b8 <adc_loop>:


void adc_loop()
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
 while(1)
 {
   adc_read_value(&adc_main);
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <adc_loop+0x14>)
 80005be:	f000 f807 	bl	80005d0 <adc_read_value>
   osDelay(ADC_UPDATE_INTERVAL);
 80005c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c6:	f005 f95e 	bl	8005886 <osDelay>
   adc_read_value(&adc_main);
 80005ca:	e7f7      	b.n	80005bc <adc_loop+0x4>
 80005cc:	200040f4 	.word	0x200040f4

080005d0 <adc_read_value>:
 }
}


void adc_read_value(adc_object* self_object)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Receive(self_object->hi2c,ADC_I2C_ADDR,(uint8_t*)&self_object->adc_ch1_value,sizeof(self_object->adc_ch1_value),1000);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	6818      	ldr	r0, [r3, #0]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	1d1a      	adds	r2, r3, #4
 80005e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2302      	movs	r3, #2
 80005e8:	2169      	movs	r1, #105	; 0x69
 80005ea:	f002 fcb1 	bl	8002f50 <HAL_I2C_Master_Receive>
}
 80005ee:	bf00      	nop
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <puck_event_callback>:
	 free(p);
 }
 */

void puck_event_callback(smac_event event_id)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	switch(event_id)
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d10e      	bne.n	8000626 <puck_event_callback+0x2e>
	{
	  case SMAC_EVNT_RX_OUT_Q_CHANGED:
		  puck_main.rx_message[0]=0;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <puck_event_callback+0x38>)
 800060a:	2200      	movs	r2, #0
 800060c:	761a      	strb	r2, [r3, #24]
		  puck_main.rx_message_last_byte_index=0;
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <puck_event_callback+0x38>)
 8000610:	2200      	movs	r2, #0
 8000612:	64da      	str	r2, [r3, #76]	; 0x4c
		  xQueueReset(puck_main.rxQ);
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <puck_event_callback+0x38>)
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f005 fa64 	bl	8005ae8 <xQueueGenericReset>
		  PUCK_f();
 8000620:	f000 fb9c 	bl	8000d5c <PUCK_f>
	  break;
 8000624:	bf00      	nop
	};
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200040fc 	.word	0x200040fc

08000634 <puck_analyzer>:

analyzer_err_code puck_analyzer(uint8_t new_byte)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]
  switch(puck_main.analyzer.stage)
 800063e:	4b4b      	ldr	r3, [pc, #300]	; (800076c <puck_analyzer+0x138>)
 8000640:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8000644:	2b03      	cmp	r3, #3
 8000646:	f200 808c 	bhi.w	8000762 <puck_analyzer+0x12e>
 800064a:	a201      	add	r2, pc, #4	; (adr r2, 8000650 <puck_analyzer+0x1c>)
 800064c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000650:	08000661 	.word	0x08000661
 8000654:	080006c1 	.word	0x080006c1
 8000658:	080006df 	.word	0x080006df
 800065c:	0800073f 	.word	0x0800073f
  {
     case PUCK_ANALYZER_STAGE1:
    	 if(puck_main.analyzer.stage1_msg[puck_main.analyzer.byte_counter]==new_byte){
 8000660:	4b42      	ldr	r3, [pc, #264]	; (800076c <puck_analyzer+0x138>)
 8000662:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000666:	4a41      	ldr	r2, [pc, #260]	; (800076c <puck_analyzer+0x138>)
 8000668:	4413      	add	r3, r2
 800066a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800066e:	79fa      	ldrb	r2, [r7, #7]
 8000670:	429a      	cmp	r2, r3
 8000672:	d11b      	bne.n	80006ac <puck_analyzer+0x78>
    		 puck_main.analyzer.byte_counter++;
 8000674:	4b3d      	ldr	r3, [pc, #244]	; (800076c <puck_analyzer+0x138>)
 8000676:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800067a:	3301      	adds	r3, #1
 800067c:	4a3b      	ldr	r2, [pc, #236]	; (800076c <puck_analyzer+0x138>)
 800067e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    		 if(puck_main.analyzer.byte_counter==PUCK_CMD_LEN){
 8000682:	4b3a      	ldr	r3, [pc, #232]	; (800076c <puck_analyzer+0x138>)
 8000684:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000688:	2b06      	cmp	r3, #6
 800068a:	d167      	bne.n	800075c <puck_analyzer+0x128>
    			 puck_main.analyzer.byte_counter=0;
 800068c:	4b37      	ldr	r3, [pc, #220]	; (800076c <puck_analyzer+0x138>)
 800068e:	2200      	movs	r2, #0
 8000690:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    			 puck_main.analyzer.stage=PUCK_ANALYZER_STAGE1_DELAY;
 8000694:	4b35      	ldr	r3, [pc, #212]	; (800076c <puck_analyzer+0x138>)
 8000696:	2201      	movs	r2, #1
 8000698:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    			 timed_callback_set(puck_main.analyzer.stage1_timed_callback,75);
 800069c:	4b33      	ldr	r3, [pc, #204]	; (800076c <puck_analyzer+0x138>)
 800069e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80006a2:	214b      	movs	r1, #75	; 0x4b
 80006a4:	4618      	mov	r0, r3
 80006a6:	f001 fc83 	bl	8001fb0 <timed_callback_set>
    		 }
    	 }
    	 else {
    		 if(puck_main.analyzer.byte_counter!=0) puck_main.analyzer.byte_counter=0;
    	 }
    	break;
 80006aa:	e057      	b.n	800075c <puck_analyzer+0x128>
    		 if(puck_main.analyzer.byte_counter!=0) puck_main.analyzer.byte_counter=0;
 80006ac:	4b2f      	ldr	r3, [pc, #188]	; (800076c <puck_analyzer+0x138>)
 80006ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d052      	beq.n	800075c <puck_analyzer+0x128>
 80006b6:	4b2d      	ldr	r3, [pc, #180]	; (800076c <puck_analyzer+0x138>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    	break;
 80006be:	e04d      	b.n	800075c <puck_analyzer+0x128>
    case PUCK_ANALYZER_STAGE1_DELAY:
    	timed_callback_off(puck_main.analyzer.stage1_timed_callback);
 80006c0:	4b2a      	ldr	r3, [pc, #168]	; (800076c <puck_analyzer+0x138>)
 80006c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fc88 	bl	8001fdc <timed_callback_off>
    	puck_main.analyzer.byte_counter=0;
 80006cc:	4b27      	ldr	r3, [pc, #156]	; (800076c <puck_analyzer+0x138>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    	puck_main.analyzer.stage=PUCK_ANALYZER_STAGE1;
 80006d4:	4b25      	ldr	r3, [pc, #148]	; (800076c <puck_analyzer+0x138>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    	break;
 80006dc:	e041      	b.n	8000762 <puck_analyzer+0x12e>
    case PUCK_ANALYZER_STAGE2:
		 if(puck_main.analyzer.stage2_msg[puck_main.analyzer.byte_counter]==new_byte){
 80006de:	4b23      	ldr	r3, [pc, #140]	; (800076c <puck_analyzer+0x138>)
 80006e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80006e4:	4a21      	ldr	r2, [pc, #132]	; (800076c <puck_analyzer+0x138>)
 80006e6:	4413      	add	r3, r2
 80006e8:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 80006ec:	79fa      	ldrb	r2, [r7, #7]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d11b      	bne.n	800072a <puck_analyzer+0xf6>
			 puck_main.analyzer.byte_counter++;
 80006f2:	4b1e      	ldr	r3, [pc, #120]	; (800076c <puck_analyzer+0x138>)
 80006f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80006f8:	3301      	adds	r3, #1
 80006fa:	4a1c      	ldr	r2, [pc, #112]	; (800076c <puck_analyzer+0x138>)
 80006fc:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
			 if(puck_main.analyzer.byte_counter==PUCK_CMD_LEN){
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <puck_analyzer+0x138>)
 8000702:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000706:	2b06      	cmp	r3, #6
 8000708:	d12a      	bne.n	8000760 <puck_analyzer+0x12c>
				 puck_main.analyzer.byte_counter=0;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <puck_analyzer+0x138>)
 800070c:	2200      	movs	r2, #0
 800070e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				 puck_main.analyzer.stage=PUCK_ANALYZER_STAGE2_DELAY;
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <puck_analyzer+0x138>)
 8000714:	2203      	movs	r2, #3
 8000716:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
				 timed_callback_set(puck_main.analyzer.stage2_timed_callback,50);
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <puck_analyzer+0x138>)
 800071c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000720:	2132      	movs	r1, #50	; 0x32
 8000722:	4618      	mov	r0, r3
 8000724:	f001 fc44 	bl	8001fb0 <timed_callback_set>
			 }
		 }
		 else {
			 if(puck_main.analyzer.byte_counter!=0) puck_main.analyzer.byte_counter=0;
		 }
    	break;
 8000728:	e01a      	b.n	8000760 <puck_analyzer+0x12c>
			 if(puck_main.analyzer.byte_counter!=0) puck_main.analyzer.byte_counter=0;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <puck_analyzer+0x138>)
 800072c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000730:	2b00      	cmp	r3, #0
 8000732:	d015      	beq.n	8000760 <puck_analyzer+0x12c>
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <puck_analyzer+0x138>)
 8000736:	2200      	movs	r2, #0
 8000738:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    	break;
 800073c:	e010      	b.n	8000760 <puck_analyzer+0x12c>
    case PUCK_ANALYZER_STAGE2_DELAY:
    	timed_callback_off(puck_main.analyzer.stage2_timed_callback);
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <puck_analyzer+0x138>)
 8000740:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8000744:	4618      	mov	r0, r3
 8000746:	f001 fc49 	bl	8001fdc <timed_callback_off>
    	puck_main.analyzer.byte_counter=0;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <puck_analyzer+0x138>)
 800074c:	2200      	movs	r2, #0
 800074e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
    	puck_main.analyzer.stage=PUCK_ANALYZER_STAGE1;
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <puck_analyzer+0x138>)
 8000754:	2200      	movs	r2, #0
 8000756:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    	break;
 800075a:	e002      	b.n	8000762 <puck_analyzer+0x12e>
    	break;
 800075c:	bf00      	nop
 800075e:	e000      	b.n	8000762 <puck_analyzer+0x12e>
    	break;
 8000760:	bf00      	nop
  };
  return SMAC_ANALYZER_OK;
 8000762:	2300      	movs	r3, #0
}
 8000764:	4618      	mov	r0, r3
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	200040fc 	.word	0x200040fc

08000770 <puck_stage1_timed_callback>:

void puck_stage1_timed_callback()
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  if(puck_main.analyzer.stage==PUCK_ANALYZER_STAGE1_DELAY) {
 8000774:	4b08      	ldr	r3, [pc, #32]	; (8000798 <puck_stage1_timed_callback+0x28>)
 8000776:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800077a:	2b01      	cmp	r3, #1
 800077c:	d107      	bne.n	800078e <puck_stage1_timed_callback+0x1e>
	  puck_main.analyzer.stage=PUCK_ANALYZER_STAGE2;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <puck_stage1_timed_callback+0x28>)
 8000780:	2202      	movs	r2, #2
 8000782:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	  puck_main.analyzer.byte_counter=0;
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <puck_stage1_timed_callback+0x28>)
 8000788:	2200      	movs	r2, #0
 800078a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	200040fc 	.word	0x200040fc

0800079c <puck_stage2_timed_callback>:

void puck_stage2_timed_callback()
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  if(puck_main.analyzer.stage==PUCK_ANALYZER_STAGE2_DELAY) {
 80007a0:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <puck_stage2_timed_callback+0x3c>)
 80007a2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80007a6:	2b03      	cmp	r3, #3
 80007a8:	d111      	bne.n	80007ce <puck_stage2_timed_callback+0x32>
	puck_main.analyzer.stage=PUCK_ANALYZER_STAGE1;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <puck_stage2_timed_callback+0x3c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	puck_main.analyzer.byte_counter=0;
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <puck_stage2_timed_callback+0x3c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	puck_main.smac->active_rx_outQ=puck_main.rxQ;
 80007ba:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <puck_stage2_timed_callback+0x3c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a06      	ldr	r2, [pc, #24]	; (80007d8 <puck_stage2_timed_callback+0x3c>)
 80007c0:	6912      	ldr	r2, [r2, #16]
 80007c2:	631a      	str	r2, [r3, #48]	; 0x30
	puck_main.smac->event_status=SMAC_EVNT_RX_OUT_Q_CHANGED;
 80007c4:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <puck_stage2_timed_callback+0x3c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2201      	movs	r2, #1
 80007ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	200040fc 	.word	0x200040fc

080007dc <puck_init>:


void puck_init( smac_controller* smac,osMessageQId rxQ,osMessageQId instrument_rxQ)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	60f8      	str	r0, [r7, #12]
 80007e4:	60b9      	str	r1, [r7, #8]
 80007e6:	607a      	str	r2, [r7, #4]
	puck_commands_init();
 80007e8:	f000 f85c 	bl	80008a4 <puck_commands_init>

	puck_main.smac=smac;                                                                                  // standard initializations steps
 80007ec:	4a26      	ldr	r2, [pc, #152]	; (8000888 <puck_init+0xac>)
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	6013      	str	r3, [r2, #0]
	puck_main.rxQ=rxQ;                                                                                    // standard initializations steps
 80007f2:	4a25      	ldr	r2, [pc, #148]	; (8000888 <puck_init+0xac>)
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	6113      	str	r3, [r2, #16]
	smac_register_rx_outQ(puck_main.smac,puck_main.rxQ,INACTIVE_QUEUE_FLAG,&puck_event_callback);         // standard initializations steps
 80007f8:	4b23      	ldr	r3, [pc, #140]	; (8000888 <puck_init+0xac>)
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	4b22      	ldr	r3, [pc, #136]	; (8000888 <puck_init+0xac>)
 80007fe:	6919      	ldr	r1, [r3, #16]
 8000800:	4b22      	ldr	r3, [pc, #136]	; (800088c <puck_init+0xb0>)
 8000802:	2214      	movs	r2, #20
 8000804:	f001 f868 	bl	80018d8 <smac_register_rx_outQ>

	puck_main.rx_message_last_byte_index=0;
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <puck_init+0xac>)
 800080a:	2200      	movs	r2, #0
 800080c:	64da      	str	r2, [r3, #76]	; 0x4c
	puck_main.rx_mode=PUCK_RX_ASCII_MODE;
 800080e:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <puck_init+0xac>)
 8000810:	2200      	movs	r2, #0
 8000812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	puck_main.instrument_rxQ=instrument_rxQ;
 8000816:	4a1c      	ldr	r2, [pc, #112]	; (8000888 <puck_init+0xac>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6153      	str	r3, [r2, #20]
	puck_main.smac->analyzer=&puck_analyzer;
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <puck_init+0xac>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a1b      	ldr	r2, [pc, #108]	; (8000890 <puck_init+0xb4>)
 8000822:	639a      	str	r2, [r3, #56]	; 0x38


	puck_main.analyzer.stage1_delay=750;
 8000824:	4b18      	ldr	r3, [pc, #96]	; (8000888 <puck_init+0xac>)
 8000826:	f240 22ee 	movw	r2, #750	; 0x2ee
 800082a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	puck_main.analyzer.stage1_delay=500;
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <puck_init+0xac>)
 8000830:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000834:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	memcpy(puck_main.analyzer.stage1_msg,"@@@@@@",6);
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <puck_init+0xac>)
 800083a:	4a16      	ldr	r2, [pc, #88]	; (8000894 <puck_init+0xb8>)
 800083c:	33a1      	adds	r3, #161	; 0xa1
 800083e:	6810      	ldr	r0, [r2, #0]
 8000840:	6018      	str	r0, [r3, #0]
 8000842:	8892      	ldrh	r2, [r2, #4]
 8000844:	809a      	strh	r2, [r3, #4]
	memcpy(puck_main.analyzer.stage2_msg,"!!!!!!",6);
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <puck_init+0xac>)
 8000848:	4a13      	ldr	r2, [pc, #76]	; (8000898 <puck_init+0xbc>)
 800084a:	33a7      	adds	r3, #167	; 0xa7
 800084c:	6810      	ldr	r0, [r2, #0]
 800084e:	6018      	str	r0, [r3, #0]
 8000850:	8892      	ldrh	r2, [r2, #4]
 8000852:	809a      	strh	r2, [r3, #4]

	puck_main.analyzer.stage=PUCK_ANALYZER_STAGE1;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <puck_init+0xac>)
 8000856:	2200      	movs	r2, #0
 8000858:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	puck_main.analyzer.byte_counter=0;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <puck_init+0xac>)
 800085e:	2200      	movs	r2, #0
 8000860:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	puck_main.analyzer.stage1_timed_callback=timed_callback_register_new(&puck_stage1_timed_callback);
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <puck_init+0xc0>)
 8000866:	f001 fb0d 	bl	8001e84 <timed_callback_register_new>
 800086a:	4603      	mov	r3, r0
 800086c:	4a06      	ldr	r2, [pc, #24]	; (8000888 <puck_init+0xac>)
 800086e:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	puck_main.analyzer.stage2_timed_callback=timed_callback_register_new(&puck_stage2_timed_callback);
 8000872:	480b      	ldr	r0, [pc, #44]	; (80008a0 <puck_init+0xc4>)
 8000874:	f001 fb06 	bl	8001e84 <timed_callback_register_new>
 8000878:	4603      	mov	r3, r0
 800087a:	4a03      	ldr	r2, [pc, #12]	; (8000888 <puck_init+0xac>)
 800087c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200040fc 	.word	0x200040fc
 800088c:	080005f9 	.word	0x080005f9
 8000890:	08000635 	.word	0x08000635
 8000894:	08009fec 	.word	0x08009fec
 8000898:	08009ff4 	.word	0x08009ff4
 800089c:	08000771 	.word	0x08000771
 80008a0:	0800079d 	.word	0x0800079d

080008a4 <puck_commands_init>:


err_code puck_commands_init(void){
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0


	puck_main.cmd_functions[0] =PUCKRM_f;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <puck_commands_init+0x74>)
 80008aa:	4a1c      	ldr	r2, [pc, #112]	; (800091c <puck_commands_init+0x78>)
 80008ac:	655a      	str	r2, [r3, #84]	; 0x54
	puck_main.cmd_functions[1] =PUCKWM_f;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <puck_commands_init+0x74>)
 80008b0:	4a1b      	ldr	r2, [pc, #108]	; (8000920 <puck_commands_init+0x7c>)
 80008b2:	659a      	str	r2, [r3, #88]	; 0x58
	puck_main.cmd_functions[2] =PUCKFM_f;
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <puck_commands_init+0x74>)
 80008b6:	4a1b      	ldr	r2, [pc, #108]	; (8000924 <puck_commands_init+0x80>)
 80008b8:	65da      	str	r2, [r3, #92]	; 0x5c
	puck_main.cmd_functions[3] =PUCKEM_f;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <puck_commands_init+0x74>)
 80008bc:	4a1a      	ldr	r2, [pc, #104]	; (8000928 <puck_commands_init+0x84>)
 80008be:	661a      	str	r2, [r3, #96]	; 0x60
	puck_main.cmd_functions[4] =PUCKGA_f;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <puck_commands_init+0x74>)
 80008c2:	4a1a      	ldr	r2, [pc, #104]	; (800092c <puck_commands_init+0x88>)
 80008c4:	665a      	str	r2, [r3, #100]	; 0x64
	puck_main.cmd_functions[5] =PUCKSA_f;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <puck_commands_init+0x74>)
 80008c8:	4a19      	ldr	r2, [pc, #100]	; (8000930 <puck_commands_init+0x8c>)
 80008ca:	669a      	str	r2, [r3, #104]	; 0x68
	puck_main.cmd_functions[6] =PUCKSZ_f;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <puck_commands_init+0x74>)
 80008ce:	4a19      	ldr	r2, [pc, #100]	; (8000934 <puck_commands_init+0x90>)
 80008d0:	66da      	str	r2, [r3, #108]	; 0x6c
	puck_main.cmd_functions[7] =PUCK_f;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <puck_commands_init+0x74>)
 80008d4:	4a18      	ldr	r2, [pc, #96]	; (8000938 <puck_commands_init+0x94>)
 80008d6:	671a      	str	r2, [r3, #112]	; 0x70
	puck_main.cmd_functions[8] =PUCKTY_f;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <puck_commands_init+0x74>)
 80008da:	4a18      	ldr	r2, [pc, #96]	; (800093c <puck_commands_init+0x98>)
 80008dc:	675a      	str	r2, [r3, #116]	; 0x74
	puck_main.cmd_functions[9] =PUCKVR_f;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <puck_commands_init+0x74>)
 80008e0:	4a17      	ldr	r2, [pc, #92]	; (8000940 <puck_commands_init+0x9c>)
 80008e2:	679a      	str	r2, [r3, #120]	; 0x78
	puck_main.cmd_functions[10] =PUCKIM_f;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <puck_commands_init+0x74>)
 80008e6:	4a17      	ldr	r2, [pc, #92]	; (8000944 <puck_commands_init+0xa0>)
 80008e8:	67da      	str	r2, [r3, #124]	; 0x7c
	puck_main.cmd_functions[11] =PUCKVB_f;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <puck_commands_init+0x74>)
 80008ec:	4a16      	ldr	r2, [pc, #88]	; (8000948 <puck_commands_init+0xa4>)
 80008ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	puck_main.cmd_functions[12] =PUCKSB_f;
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <puck_commands_init+0x74>)
 80008f4:	4a15      	ldr	r2, [pc, #84]	; (800094c <puck_commands_init+0xa8>)
 80008f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	puck_main.datasheet.start_addr=(uint8_t*)&sensor_default_datasheet;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <puck_commands_init+0x74>)
 80008fc:	4a14      	ldr	r2, [pc, #80]	; (8000950 <puck_commands_init+0xac>)
 80008fe:	60da      	str	r2, [r3, #12]
	puck_main.datasheet.size=PUCK_DATASHEET_SIZE;
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <puck_commands_init+0x74>)
 8000902:	2260      	movs	r2, #96	; 0x60
 8000904:	605a      	str	r2, [r3, #4]
	puck_main.datasheet.data_pointer_offset=0;
 8000906:	4b04      	ldr	r3, [pc, #16]	; (8000918 <puck_commands_init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]

	return RES_OK;
 800090c:	2300      	movs	r3, #0
  }
 800090e:	4618      	mov	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	200040fc 	.word	0x200040fc
 800091c:	08000be5 	.word	0x08000be5
 8000920:	08000cad 	.word	0x08000cad
 8000924:	08000cbd 	.word	0x08000cbd
 8000928:	08000ccd 	.word	0x08000ccd
 800092c:	08000cdd 	.word	0x08000cdd
 8000930:	08000cf9 	.word	0x08000cf9
 8000934:	08000d41 	.word	0x08000d41
 8000938:	08000d5d 	.word	0x08000d5d
 800093c:	08000d79 	.word	0x08000d79
 8000940:	08000d89 	.word	0x08000d89
 8000944:	08000d99 	.word	0x08000d99
 8000948:	08000da9 	.word	0x08000da9
 800094c:	08000db9 	.word	0x08000db9
 8000950:	0800a158 	.word	0x0800a158

08000954 <puck_loop>:


void puck_loop()
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
  uint8_t b;
  while(1)
  {
	  if(xQueueReceive(puck_main.rxQ,&b,1)==pdTRUE){
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <puck_loop+0x38>)
 800095c:	691b      	ldr	r3, [r3, #16]
 800095e:	1df9      	adds	r1, r7, #7
 8000960:	2201      	movs	r2, #1
 8000962:	4618      	mov	r0, r3
 8000964:	f005 fb94 	bl	8006090 <xQueueReceive>
 8000968:	4603      	mov	r3, r0
 800096a:	2b01      	cmp	r3, #1
 800096c:	d109      	bne.n	8000982 <puck_loop+0x2e>
		  switch(puck_main.rx_mode)
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <puck_loop+0x38>)
 8000970:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000974:	2b00      	cmp	r3, #0
 8000976:	d105      	bne.n	8000984 <puck_loop+0x30>
		  {
		   case PUCK_RX_ASCII_MODE:
		    puck_new_byte_processing(b);
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	4618      	mov	r0, r3
 800097c:	f000 f808 	bl	8000990 <puck_new_byte_processing>
		   break;
 8000980:	e000      	b.n	8000984 <puck_loop+0x30>
		  };
 8000982:	bf00      	nop
	  }
	  osDelay(1);
 8000984:	2001      	movs	r0, #1
 8000986:	f004 ff7e 	bl	8005886 <osDelay>
	  if(xQueueReceive(puck_main.rxQ,&b,1)==pdTRUE){
 800098a:	e7e6      	b.n	800095a <puck_loop+0x6>
 800098c:	200040fc 	.word	0x200040fc

08000990 <puck_new_byte_processing>:
}



err_code puck_new_byte_processing(uint8_t new_byte)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
	int func_index;

	if(puck_update_rx_message(new_byte)==PUCK_MSG_COMPLETE){
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	4618      	mov	r0, r3
 800099e:	f000 f835 	bl	8000a0c <puck_update_rx_message>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d126      	bne.n	80009f6 <puck_new_byte_processing+0x66>
		for(int i=0;i<PUCK_CMD_LEN;i++) puck_main.rx_msg_params[i]=0x00;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	e008      	b.n	80009c0 <puck_new_byte_processing+0x30>
 80009ae:	4a14      	ldr	r2, [pc, #80]	; (8000a00 <puck_new_byte_processing+0x70>)
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	3322      	adds	r3, #34	; 0x22
 80009b4:	2100      	movs	r1, #0
 80009b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	3301      	adds	r3, #1
 80009be:	617b      	str	r3, [r7, #20]
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	2b05      	cmp	r3, #5
 80009c4:	ddf3      	ble.n	80009ae <puck_new_byte_processing+0x1e>
		puck_split_rx_message(puck_main.rx_msg_params," ");
 80009c6:	490f      	ldr	r1, [pc, #60]	; (8000a04 <puck_new_byte_processing+0x74>)
 80009c8:	480f      	ldr	r0, [pc, #60]	; (8000a08 <puck_new_byte_processing+0x78>)
 80009ca:	f000 f855 	bl	8000a78 <puck_split_rx_message>
		func_index=puck_get_cmd_pattern_index(puck_main.rx_msg_params[0]);
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <puck_new_byte_processing+0x70>)
 80009d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009d4:	4618      	mov	r0, r3
 80009d6:	f000 f877 	bl	8000ac8 <puck_get_cmd_pattern_index>
 80009da:	4603      	mov	r3, r0
 80009dc:	613b      	str	r3, [r7, #16]
		if(func_index!=PUCK_CMD_UNKNOWN)
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	2b0d      	cmp	r3, #13
 80009e2:	d008      	beq.n	80009f6 <puck_new_byte_processing+0x66>
		{
			puck_err_code error_num=puck_main.cmd_functions[func_index]();
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <puck_new_byte_processing+0x70>)
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	3314      	adds	r3, #20
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	4413      	add	r3, r2
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	4798      	blx	r3
 80009f2:	4603      	mov	r3, r0
 80009f4:	73fb      	strb	r3, [r7, #15]
    	      //puck_err_patterns[puck_err_code];
             }
		    //uart_send_str("PUCKRDY\r");
		}
	}
	return 0;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3718      	adds	r7, #24
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200040fc 	.word	0x200040fc
 8000a04:	08009ffc 	.word	0x08009ffc
 8000a08:	20004184 	.word	0x20004184

08000a0c <puck_update_rx_message>:

puck_message_status puck_update_rx_message(uint8_t new_byte)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]

		if(new_byte==0x0D){ //end of string detected "\n" or "\r", replace it with 0x00
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	2b0d      	cmp	r3, #13
 8000a1a:	d10a      	bne.n	8000a32 <puck_update_rx_message+0x26>
			puck_main.rx_message[puck_main.rx_message_last_byte_index]=0x00;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <puck_update_rx_message+0x64>)
 8000a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a20:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <puck_update_rx_message+0x64>)
 8000a22:	4413      	add	r3, r2
 8000a24:	2200      	movs	r2, #0
 8000a26:	761a      	strb	r2, [r3, #24]
			puck_main.rx_message_last_byte_index=0;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <puck_update_rx_message+0x64>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	64da      	str	r2, [r3, #76]	; 0x4c
			return PUCK_MSG_COMPLETE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e017      	b.n	8000a62 <puck_update_rx_message+0x56>
		}

		puck_main.rx_message[puck_main.rx_message_last_byte_index]=new_byte;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <puck_update_rx_message+0x64>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a0e      	ldr	r2, [pc, #56]	; (8000a70 <puck_update_rx_message+0x64>)
 8000a38:	4413      	add	r3, r2
 8000a3a:	79fa      	ldrb	r2, [r7, #7]
 8000a3c:	761a      	strb	r2, [r3, #24]
		puck_main.rx_message_last_byte_index++;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <puck_update_rx_message+0x64>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	3301      	adds	r3, #1
 8000a44:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <puck_update_rx_message+0x64>)
 8000a46:	64d3      	str	r3, [r2, #76]	; 0x4c
		puck_main.rx_message_last_byte_index %= PUCK_MSG_BUFFER_SIZE;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <puck_update_rx_message+0x64>)
 8000a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <puck_update_rx_message+0x68>)
 8000a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000a52:	091b      	lsrs	r3, r3, #4
 8000a54:	2132      	movs	r1, #50	; 0x32
 8000a56:	fb01 f303 	mul.w	r3, r1, r3
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	4a04      	ldr	r2, [pc, #16]	; (8000a70 <puck_update_rx_message+0x64>)
 8000a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
		return PUCK_MSG_INCOMPLETE;
 8000a60:	2301      	movs	r3, #1

}
 8000a62:	4618      	mov	r0, r3
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	200040fc 	.word	0x200040fc
 8000a74:	51eb851f 	.word	0x51eb851f

08000a78 <puck_split_rx_message>:


err_code puck_split_rx_message(char** s_array,char* delimiter)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
    char* p = strtok ((char*)puck_main.rx_message,delimiter);
 8000a82:	6839      	ldr	r1, [r7, #0]
 8000a84:	480f      	ldr	r0, [pc, #60]	; (8000ac4 <puck_split_rx_message+0x4c>)
 8000a86:	f008 f9f5 	bl	8008e74 <strtok>
 8000a8a:	60f8      	str	r0, [r7, #12]
	  s_array[0]=p;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	601a      	str	r2, [r3, #0]
	for(int i=1;p!= NULL;i++){
 8000a92:	2301      	movs	r3, #1
 8000a94:	60bb      	str	r3, [r7, #8]
 8000a96:	e00d      	b.n	8000ab4 <puck_split_rx_message+0x3c>
    p = strtok (NULL,delimiter);
 8000a98:	6839      	ldr	r1, [r7, #0]
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f008 f9ea 	bl	8008e74 <strtok>
 8000aa0:	60f8      	str	r0, [r7, #12]
	  s_array[i]=p;
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	601a      	str	r2, [r3, #0]
	for(int i=1;p!= NULL;i++){
 8000aae:	68bb      	ldr	r3, [r7, #8]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1ee      	bne.n	8000a98 <puck_split_rx_message+0x20>
	}
	return 0;
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20004114 	.word	0x20004114

08000ac8 <puck_get_cmd_pattern_index>:


puck_func_index puck_get_cmd_pattern_index(char* cmd_string){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]

  for(int i=0;i<PUCK_NUM_OF_COMMANDS;i++) if (strcmp(puck_cmd_patterns[i],cmd_string)==0) return i;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	e010      	b.n	8000af8 <puck_get_cmd_pattern_index+0x30>
 8000ad6:	4a0c      	ldr	r2, [pc, #48]	; (8000b08 <puck_get_cmd_pattern_index+0x40>)
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fb75 	bl	80001d0 <strcmp>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d102      	bne.n	8000af2 <puck_get_cmd_pattern_index+0x2a>
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	e006      	b.n	8000b00 <puck_get_cmd_pattern_index+0x38>
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3301      	adds	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b0c      	cmp	r3, #12
 8000afc:	ddeb      	ble.n	8000ad6 <puck_get_cmd_pattern_index+0xe>
  return PUCK_CMD_UNKNOWN;
 8000afe:	230d      	movs	r3, #13

}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000000 	.word	0x20000000

08000b0c <puck_send_integer>:


void puck_send_integer(uint32_t msg)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	char* tt=(char*)malloc(10);
 8000b14:	200a      	movs	r0, #10
 8000b16:	f007 ffe5 	bl	8008ae4 <malloc>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	60fb      	str	r3, [r7, #12]
    sprintf(tt,"%d\r",msg);
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	490c      	ldr	r1, [pc, #48]	; (8000b54 <puck_send_integer+0x48>)
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f008 f928 	bl	8008d78 <siprintf>

    if(smac_send(puck_main.smac,tt,strlen(tt),FREE_MEMORY_FLAG)!=RES_OK)
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <puck_send_integer+0x4c>)
 8000b2a:	681c      	ldr	r4, [r3, #0]
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f7ff fb59 	bl	80001e4 <strlen>
 8000b32:	4603      	mov	r3, r0
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	2300      	movs	r3, #0
 8000b38:	68f9      	ldr	r1, [r7, #12]
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	f000 fe9a 	bl	8001874 <smac_send>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <puck_send_integer+0x40>
    {
    	free(tt);
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f007 ffd4 	bl	8008af4 <free>
    }
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd90      	pop	{r4, r7, pc}
 8000b54:	0800a000 	.word	0x0800a000
 8000b58:	200040fc 	.word	0x200040fc

08000b5c <puck_send_raw>:
void puck_send_raw(uint8_t* msg,uint32_t len,uint8_t mem_free_flag)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	4613      	mov	r3, r2
 8000b68:	71fb      	strb	r3, [r7, #7]
	err_code res=smac_send(puck_main.smac,msg,len,mem_free_flag);
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <puck_send_raw+0x3c>)
 8000b6c:	6818      	ldr	r0, [r3, #0]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	68f9      	ldr	r1, [r7, #12]
 8000b76:	f000 fe7d 	bl	8001874 <smac_send>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	75fb      	strb	r3, [r7, #23]
    if(res!=RES_OK && mem_free_flag==FREE_MEMORY_FLAG)
 8000b7e:	7dfb      	ldrb	r3, [r7, #23]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d005      	beq.n	8000b90 <puck_send_raw+0x34>
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <puck_send_raw+0x34>
    {
    	free(msg);
 8000b8a:	68f8      	ldr	r0, [r7, #12]
 8000b8c:	f007 ffb2 	bl	8008af4 <free>
    }
}
 8000b90:	bf00      	nop
 8000b92:	3718      	adds	r7, #24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200040fc 	.word	0x200040fc

08000b9c <puck_send_string>:
void puck_send_string(char* msg,uint8_t mem_free_flag)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	70fb      	strb	r3, [r7, #3]
	err_code res=smac_send(puck_main.smac,msg,strlen(msg), mem_free_flag);
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <puck_send_string+0x44>)
 8000baa:	681c      	ldr	r4, [r3, #0]
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f7ff fb19 	bl	80001e4 <strlen>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	78fb      	ldrb	r3, [r7, #3]
 8000bb8:	6879      	ldr	r1, [r7, #4]
 8000bba:	4620      	mov	r0, r4
 8000bbc:	f000 fe5a 	bl	8001874 <smac_send>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	73fb      	strb	r3, [r7, #15]
    if(res!=RES_OK && mem_free_flag==FREE_MEMORY_FLAG)
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d005      	beq.n	8000bd6 <puck_send_string+0x3a>
 8000bca:	78fb      	ldrb	r3, [r7, #3]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d102      	bne.n	8000bd6 <puck_send_string+0x3a>
    {
    	free(msg);
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f007 ff8f 	bl	8008af4 <free>
    }

}
 8000bd6:	bf00      	nop
 8000bd8:	3714      	adds	r7, #20
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd90      	pop	{r4, r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200040fc 	.word	0x200040fc

08000be4 <PUCKRM_f>:



puck_err_code PUCKRM_f()
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
	unsigned long num_of_rx_bytes=atol(puck_main.rx_msg_params[1]);
 8000bea:	4b2d      	ldr	r3, [pc, #180]	; (8000ca0 <PUCKRM_f+0xbc>)
 8000bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f007 fe4f 	bl	8008894 <atol>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	60bb      	str	r3, [r7, #8]
	if(num_of_rx_bytes<=PUCK_MAX_READ_BYTES){
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c00:	d840      	bhi.n	8000c84 <PUCKRM_f+0xa0>
         uint8_t* new_ptr=(uint8_t*)malloc(num_of_rx_bytes+2);
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	3302      	adds	r3, #2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f007 ff6c 	bl	8008ae4 <malloc>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	607b      	str	r3, [r7, #4]
         new_ptr[0]='[';
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	225b      	movs	r2, #91	; 0x5b
 8000c14:	701a      	strb	r2, [r3, #0]
         new_ptr[num_of_rx_bytes+1]=']';
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	225d      	movs	r2, #93	; 0x5d
 8000c20:	701a      	strb	r2, [r3, #0]
         if(new_ptr){
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d025      	beq.n	8000c74 <PUCKRM_f+0x90>
        	 for(int i=1;i<=num_of_rx_bytes;i++){
 8000c28:	2301      	movs	r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	e01e      	b.n	8000c6c <PUCKRM_f+0x88>
        		 new_ptr[i]=*(puck_main.datasheet.start_addr+puck_main.datasheet.data_pointer_offset);
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <PUCKRM_f+0xbc>)
 8000c30:	68da      	ldr	r2, [r3, #12]
 8000c32:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <PUCKRM_f+0xbc>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	441a      	add	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	440b      	add	r3, r1
 8000c3e:	7812      	ldrb	r2, [r2, #0]
 8000c40:	701a      	strb	r2, [r3, #0]
        		 puck_main.datasheet.data_pointer_offset++;
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <PUCKRM_f+0xbc>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	3301      	adds	r3, #1
 8000c48:	4a15      	ldr	r2, [pc, #84]	; (8000ca0 <PUCKRM_f+0xbc>)
 8000c4a:	6093      	str	r3, [r2, #8]
        		 puck_main.datasheet.data_pointer_offset%=PUCK_DATASHEET_SIZE;
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <PUCKRM_f+0xbc>)
 8000c4e:	6899      	ldr	r1, [r3, #8]
 8000c50:	4b14      	ldr	r3, [pc, #80]	; (8000ca4 <PUCKRM_f+0xc0>)
 8000c52:	fba3 2301 	umull	r2, r3, r3, r1
 8000c56:	099a      	lsrs	r2, r3, #6
 8000c58:	4613      	mov	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	015b      	lsls	r3, r3, #5
 8000c60:	1aca      	subs	r2, r1, r3
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <PUCKRM_f+0xbc>)
 8000c64:	609a      	str	r2, [r3, #8]
        	 for(int i=1;i<=num_of_rx_bytes;i++){
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d2dc      	bcs.n	8000c2e <PUCKRM_f+0x4a>
        	 }
         }
         puck_send_raw(new_ptr,num_of_rx_bytes+2,FREE_MEMORY_FLAG);
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	3302      	adds	r3, #2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ff6d 	bl	8000b5c <puck_send_raw>
 8000c82:	e005      	b.n	8000c90 <PUCKRM_f+0xac>
	}
	else{
		puck_send_string(puck_error_messages[PUCK_ERR_ERR020],KEEP_MEMORY_FLAG);
 8000c84:	4b08      	ldr	r3, [pc, #32]	; (8000ca8 <PUCKRM_f+0xc4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2101      	movs	r1, #1
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff86 	bl	8000b9c <puck_send_string>
	}
	PUCK_f();
 8000c90:	f000 f864 	bl	8000d5c <PUCK_f>
    return PUCK_ERR_NO_ERR;
 8000c94:	2306      	movs	r3, #6
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200040fc 	.word	0x200040fc
 8000ca4:	aaaaaaab 	.word	0xaaaaaaab
 8000ca8:	20000034 	.word	0x20000034

08000cac <PUCKWM_f>:
puck_err_code PUCKWM_f()
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return PUCK_ERR_NO_ERR;
 8000cb0:	2306      	movs	r3, #6
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <PUCKFM_f>:
puck_err_code PUCKFM_f()
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return PUCK_ERR_NO_ERR;
 8000cc0:	2306      	movs	r3, #6
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <PUCKEM_f>:
puck_err_code PUCKEM_f()
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return PUCK_ERR_NO_ERR;
 8000cd0:	2306      	movs	r3, #6
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <PUCKGA_f>:
puck_err_code PUCKGA_f()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  puck_send_integer(puck_main.datasheet.data_pointer_offset);
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <PUCKGA_f+0x18>)
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff11 	bl	8000b0c <puck_send_integer>
  PUCK_f();
 8000cea:	f000 f837 	bl	8000d5c <PUCK_f>
  return PUCK_ERR_NO_ERR;
 8000cee:	2306      	movs	r3, #6
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200040fc 	.word	0x200040fc

08000cf8 <PUCKSA_f>:
puck_err_code PUCKSA_f()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
	unsigned long new_ptr=atol(puck_main.rx_msg_params[1]);
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <PUCKSA_f+0x40>)
 8000d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d04:	4618      	mov	r0, r3
 8000d06:	f007 fdc5 	bl	8008894 <atol>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	607b      	str	r3, [r7, #4]
	if(new_ptr>=PUCK_DATASHEET_SIZE){
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b5f      	cmp	r3, #95	; 0x5f
 8000d12:	d906      	bls.n	8000d22 <PUCKSA_f+0x2a>
		puck_send_string(puck_error_messages[PUCK_ERR_ERR021],KEEP_MEMORY_FLAG);
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <PUCKSA_f+0x44>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	2101      	movs	r1, #1
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff3e 	bl	8000b9c <puck_send_string>
 8000d20:	e002      	b.n	8000d28 <PUCKSA_f+0x30>
	}
	else{
		puck_main.datasheet.data_pointer_offset=new_ptr;
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <PUCKSA_f+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6093      	str	r3, [r2, #8]
	}
	PUCK_f();
 8000d28:	f000 f818 	bl	8000d5c <PUCK_f>
	return PUCK_ERR_NO_ERR;
 8000d2c:	2306      	movs	r3, #6
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	200040fc 	.word	0x200040fc
 8000d3c:	20000034 	.word	0x20000034

08000d40 <PUCKSZ_f>:
puck_err_code PUCKSZ_f()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
    puck_send_integer(puck_main.datasheet.size);
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <PUCKSZ_f+0x18>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fedf 	bl	8000b0c <puck_send_integer>
	PUCK_f();
 8000d4e:	f000 f805 	bl	8000d5c <PUCK_f>
	return PUCK_ERR_NO_ERR;
 8000d52:	2306      	movs	r3, #6
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200040fc 	.word	0x200040fc

08000d5c <PUCK_f>:
puck_err_code PUCK_f()//done
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	puck_send_string(puck_messages[PUCK_MSG_PUCKRDY],KEEP_MEMORY_FLAG);
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <PUCK_f+0x18>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2101      	movs	r1, #1
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff18 	bl	8000b9c <puck_send_string>
    return PUCK_ERR_NO_ERR;
 8000d6c:	2306      	movs	r3, #6
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	2000004c 	.word	0x2000004c

08000d78 <PUCKTY_f>:
puck_err_code PUCKTY_f()
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return PUCK_ERR_NO_ERR;
 8000d7c:	2306      	movs	r3, #6
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <PUCKVR_f>:
puck_err_code PUCKVR_f()
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return PUCK_ERR_NO_ERR;
 8000d8c:	2306      	movs	r3, #6
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <PUCKIM_f>:
puck_err_code PUCKIM_f()
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return PUCK_ERR_NO_ERR;
 8000d9c:	2306      	movs	r3, #6
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <PUCKVB_f>:
puck_err_code PUCKVB_f()
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  {
   uart_send_str("NO\r");
  }
  return 0;
  */
  return PUCK_ERR_NO_ERR;
 8000dac:	2306      	movs	r3, #6
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <PUCKSB_f>:
puck_err_code PUCKSB_f()
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
    // return error 0010
    return 6;
  }
  return 0;
  */
  return PUCK_ERR_NO_ERR;
 8000dbc:	2306      	movs	r3, #6
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <ssp_init>:

ssp_str ssp_main;
extern adc_object adc_main;

void ssp_init(smac_controller* smac,osMessageQId rxQ)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
	ssp_main.smac=smac;                                                                              // standard initializations steps
 8000dd2:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <ssp_init+0x30>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6013      	str	r3, [r2, #0]
	ssp_main.rxQ=rxQ;                                                                                // standard initializations steps
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <ssp_init+0x30>)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	6053      	str	r3, [r2, #4]
	smac_register_rx_outQ(ssp_main.smac,ssp_main.rxQ,ACTIVE_QUEUE_FLAG,&ssp_event_callback);         // standard initializations steps
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <ssp_init+0x30>)
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <ssp_init+0x30>)
 8000de4:	6859      	ldr	r1, [r3, #4]
 8000de6:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <ssp_init+0x34>)
 8000de8:	220a      	movs	r2, #10
 8000dea:	f000 fd75 	bl	80018d8 <smac_register_rx_outQ>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200041f4 	.word	0x200041f4
 8000dfc:	08000e01 	.word	0x08000e01

08000e00 <ssp_event_callback>:


void ssp_event_callback(smac_event event_id)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
	switch(event_id)
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d10c      	bne.n	8000e2a <ssp_event_callback+0x2a>
	{
	  case SMAC_EVNT_RX_OUT_Q_CHANGED:
		  ssp_main.rx_message_last_byte_index=0;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <ssp_event_callback+0x34>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	63da      	str	r2, [r3, #60]	; 0x3c
		  ssp_main.rx_message[0]=0;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <ssp_event_callback+0x34>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	721a      	strb	r2, [r3, #8]
		  xQueueReset(ssp_main.rxQ);
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <ssp_event_callback+0x34>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f004 fe60 	bl	8005ae8 <xQueueGenericReset>
	  break;
 8000e28:	bf00      	nop
	};
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200041f4 	.word	0x200041f4

08000e38 <ssp_loop>:


void ssp_loop()
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
	uint8_t b;
	while(1)
    {
	  while(xQueueReceive(ssp_main.rxQ,&b,1)==pdTRUE){
 8000e3e:	e003      	b.n	8000e48 <ssp_loop+0x10>
			ssp_new_byte_processing(b);
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f810 	bl	8000e68 <ssp_new_byte_processing>
	  while(xQueueReceive(ssp_main.rxQ,&b,1)==pdTRUE){
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <ssp_loop+0x2c>)
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	1df9      	adds	r1, r7, #7
 8000e4e:	2201      	movs	r2, #1
 8000e50:	4618      	mov	r0, r3
 8000e52:	f005 f91d 	bl	8006090 <xQueueReceive>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d0f1      	beq.n	8000e40 <ssp_loop+0x8>
	  }
      osDelay(1);
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f004 fd12 	bl	8005886 <osDelay>
	  while(xQueueReceive(ssp_main.rxQ,&b,1)==pdTRUE){
 8000e62:	e7f1      	b.n	8000e48 <ssp_loop+0x10>
 8000e64:	200041f4 	.word	0x200041f4

08000e68 <ssp_new_byte_processing>:
    }
}


err_code ssp_new_byte_processing(uint8_t new_byte)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
	char *path[2];
	path[0] = "action";
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <ssp_new_byte_processing+0x60>)
 8000e74:	613b      	str	r3, [r7, #16]
	path[1] = NULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]

	int action_type=0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]

	if(ssp_update_rx_message(new_byte)==SSP_MSG_COMPLETE){
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f000 f879 	bl	8000f78 <ssp_update_rx_message>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d117      	bne.n	8000ebc <ssp_new_byte_processing+0x54>
		ssp_main.jsonMsg.string=ssp_main.rx_message;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <ssp_new_byte_processing+0x64>)
 8000e8e:	4a10      	ldr	r2, [pc, #64]	; (8000ed0 <ssp_new_byte_processing+0x68>)
 8000e90:	645a      	str	r2, [r3, #68]	; 0x44
		ssp_main.jsonMsg.len = strlen(ssp_main.jsonMsg.string);
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <ssp_new_byte_processing+0x64>)
 8000e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff f9a4 	bl	80001e4 <strlen>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <ssp_new_byte_processing+0x64>)
 8000ea0:	6493      	str	r3, [r2, #72]	; 0x48
		lwJsonGetInt(path, &ssp_main.jsonMsg, &action_type);
 8000ea2:	f107 020c 	add.w	r2, r7, #12
 8000ea6:	f107 0310 	add.w	r3, r7, #16
 8000eaa:	490a      	ldr	r1, [pc, #40]	; (8000ed4 <ssp_new_byte_processing+0x6c>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f007 f881 	bl	8007fb4 <lwJsonGetInt>
		if(action_type==1){
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d101      	bne.n	8000ebc <ssp_new_byte_processing+0x54>
			ssp_send_data();
 8000eb8:	f000 f80e 	bl	8000ed8 <ssp_send_data>
		}
	}
	return RES_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	0800a004 	.word	0x0800a004
 8000ecc:	200041f4 	.word	0x200041f4
 8000ed0:	200041fc 	.word	0x200041fc
 8000ed4:	20004238 	.word	0x20004238

08000ed8 <ssp_send_data>:

char json_buffer[50];

void ssp_send_data()
{
 8000ed8:	b598      	push	{r3, r4, r7, lr}
 8000eda:	af00      	add	r7, sp, #0


	ssp_main.jsonMsg.string = json_buffer;
 8000edc:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <ssp_send_data+0x84>)
 8000ede:	4a20      	ldr	r2, [pc, #128]	; (8000f60 <ssp_send_data+0x88>)
 8000ee0:	645a      	str	r2, [r3, #68]	; 0x44
	ssp_main.jsonMsg.len = 45;
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <ssp_send_data+0x84>)
 8000ee4:	222d      	movs	r2, #45	; 0x2d
 8000ee6:	649a      	str	r2, [r3, #72]	; 0x48
	json_buffer[0]=0;
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	; (8000f60 <ssp_send_data+0x88>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
	lwJsonWriteStart(&ssp_main.jsonMsg);
 8000eee:	481d      	ldr	r0, [pc, #116]	; (8000f64 <ssp_send_data+0x8c>)
 8000ef0:	f006 fe0c 	bl	8007b0c <lwJsonWriteStart>
	lwJsonStartObject(&ssp_main.jsonMsg);
 8000ef4:	481b      	ldr	r0, [pc, #108]	; (8000f64 <ssp_send_data+0x8c>)
 8000ef6:	f006 fe4d 	bl	8007b94 <lwJsonStartObject>
	lwJsonAddIntToObject(&ssp_main.jsonMsg, "adc_channel",1);
 8000efa:	2201      	movs	r2, #1
 8000efc:	491a      	ldr	r1, [pc, #104]	; (8000f68 <ssp_send_data+0x90>)
 8000efe:	4819      	ldr	r0, [pc, #100]	; (8000f64 <ssp_send_data+0x8c>)
 8000f00:	f006 fe84 	bl	8007c0c <lwJsonAddIntToObject>
	lwJsonAddIntToObject(&ssp_main.jsonMsg, "adc_value",adc_main.adc_ch1_value);
 8000f04:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <ssp_send_data+0x94>)
 8000f06:	889b      	ldrh	r3, [r3, #4]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4919      	ldr	r1, [pc, #100]	; (8000f70 <ssp_send_data+0x98>)
 8000f0c:	4815      	ldr	r0, [pc, #84]	; (8000f64 <ssp_send_data+0x8c>)
 8000f0e:	f006 fe7d 	bl	8007c0c <lwJsonAddIntToObject>
	lwJsonCloseObject(&ssp_main.jsonMsg);
 8000f12:	4814      	ldr	r0, [pc, #80]	; (8000f64 <ssp_send_data+0x8c>)
 8000f14:	f006 fe5c 	bl	8007bd0 <lwJsonCloseObject>
	lwJsonWriteEnd(&ssp_main.jsonMsg);
 8000f18:	4812      	ldr	r0, [pc, #72]	; (8000f64 <ssp_send_data+0x8c>)
 8000f1a:	f006 fe15 	bl	8007b48 <lwJsonWriteEnd>
    strcat(json_buffer,"\r");
 8000f1e:	4810      	ldr	r0, [pc, #64]	; (8000f60 <ssp_send_data+0x88>)
 8000f20:	f7ff f960 	bl	80001e4 <strlen>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <ssp_send_data+0x88>)
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4911      	ldr	r1, [pc, #68]	; (8000f74 <ssp_send_data+0x9c>)
 8000f2e:	461a      	mov	r2, r3
 8000f30:	460b      	mov	r3, r1
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	8013      	strh	r3, [r2, #0]
	smac_send(ssp_main.smac,json_buffer,strlen(json_buffer),KEEP_MEMORY_FLAG);json_buffer[49]=0;
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <ssp_send_data+0x84>)
 8000f38:	681c      	ldr	r4, [r3, #0]
 8000f3a:	4809      	ldr	r0, [pc, #36]	; (8000f60 <ssp_send_data+0x88>)
 8000f3c:	f7ff f952 	bl	80001e4 <strlen>
 8000f40:	4603      	mov	r3, r0
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	2301      	movs	r3, #1
 8000f46:	4906      	ldr	r1, [pc, #24]	; (8000f60 <ssp_send_data+0x88>)
 8000f48:	4620      	mov	r0, r4
 8000f4a:	f000 fc93 	bl	8001874 <smac_send>
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <ssp_send_data+0x88>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8000f56:	bf00      	nop
 8000f58:	bd98      	pop	{r3, r4, r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200041f4 	.word	0x200041f4
 8000f60:	200041c0 	.word	0x200041c0
 8000f64:	20004238 	.word	0x20004238
 8000f68:	0800a00c 	.word	0x0800a00c
 8000f6c:	200040f4 	.word	0x200040f4
 8000f70:	0800a018 	.word	0x0800a018
 8000f74:	0800a024 	.word	0x0800a024

08000f78 <ssp_update_rx_message>:


ssp_message_status ssp_update_rx_message(uint8_t new_byte)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]

		if(new_byte==0x0D){ //end of string detected "\r", replace it with 0x00
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b0d      	cmp	r3, #13
 8000f86:	d10a      	bne.n	8000f9e <ssp_update_rx_message+0x26>
			ssp_main.rx_message[ssp_main.rx_message_last_byte_index]=0x00;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <ssp_update_rx_message+0x64>)
 8000f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f8c:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <ssp_update_rx_message+0x64>)
 8000f8e:	4413      	add	r3, r2
 8000f90:	2200      	movs	r2, #0
 8000f92:	721a      	strb	r2, [r3, #8]
			ssp_main.rx_message_last_byte_index=0;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <ssp_update_rx_message+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	63da      	str	r2, [r3, #60]	; 0x3c
			return SSP_MSG_COMPLETE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e017      	b.n	8000fce <ssp_update_rx_message+0x56>
		}

		ssp_main.rx_message[ssp_main.rx_message_last_byte_index]=new_byte;
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <ssp_update_rx_message+0x64>)
 8000fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <ssp_update_rx_message+0x64>)
 8000fa4:	4413      	add	r3, r2
 8000fa6:	79fa      	ldrb	r2, [r7, #7]
 8000fa8:	721a      	strb	r2, [r3, #8]
		ssp_main.rx_message_last_byte_index++;
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <ssp_update_rx_message+0x64>)
 8000fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fae:	3301      	adds	r3, #1
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <ssp_update_rx_message+0x64>)
 8000fb2:	63d3      	str	r3, [r2, #60]	; 0x3c
		ssp_main.rx_message_last_byte_index %= SSP_MSG_BUFFER_SIZE;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <ssp_update_rx_message+0x64>)
 8000fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <ssp_update_rx_message+0x68>)
 8000fba:	fba3 1302 	umull	r1, r3, r3, r2
 8000fbe:	091b      	lsrs	r3, r3, #4
 8000fc0:	2132      	movs	r1, #50	; 0x32
 8000fc2:	fb01 f303 	mul.w	r3, r1, r3
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <ssp_update_rx_message+0x64>)
 8000fca:	63d3      	str	r3, [r2, #60]	; 0x3c
		return SSP_MSG_INCOMPLETE;
 8000fcc:	2301      	movs	r3, #1

}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	200041f4 	.word	0x200041f4
 8000fe0:	51eb851f 	.word	0x51eb851f

08000fe4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4a07      	ldr	r2, [pc, #28]	; (8001010 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ff4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	4a06      	ldr	r2, [pc, #24]	; (8001014 <vApplicationGetIdleTaskMemory+0x30>)
 8000ffa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2280      	movs	r2, #128	; 0x80
 8001000:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	200000e0 	.word	0x200000e0
 8001014:	20000194 	.word	0x20000194

08001018 <uart_start_rx_it>:
extern smac_list smac_main_list;



void uart_start_rx_it(UART_HandleTypeDef* huart,uint8_t* rx_byte_ptr)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]

   HAL_UART_Receive_IT(huart,rx_byte_ptr,1);
 8001022:	2201      	movs	r2, #1
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f003 fd40 	bl	8004aac <HAL_UART_Receive_IT>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <uart_rx_it>:




void uart_rx_it(UART_HandleTypeDef *huart)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	for(int i=0;i<smac_main_list.new_smac_index;i++){
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	e027      	b.n	8001092 <uart_rx_it+0x5e>
		if(huart==smac_main_list.items[i]->huart){
 8001042:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <uart_rx_it+0x70>)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	429a      	cmp	r2, r3
 8001050:	d11c      	bne.n	800108c <uart_rx_it+0x58>
			osMessagePut(smac_main_list.items[i]->rx_inQ,smac_main_list.items[i]->rx_byte_raw,1);
 8001052:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <uart_rx_it+0x70>)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105a:	6858      	ldr	r0, [r3, #4]
 800105c:	4a11      	ldr	r2, [pc, #68]	; (80010a4 <uart_rx_it+0x70>)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001064:	7a1b      	ldrb	r3, [r3, #8]
 8001066:	2201      	movs	r2, #1
 8001068:	4619      	mov	r1, r3
 800106a:	f004 fc49 	bl	8005900 <osMessagePut>
			uart_start_rx_it(smac_main_list.items[i]->huart,&smac_main_list.items[i]->rx_byte_raw);
 800106e:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <uart_rx_it+0x70>)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	490a      	ldr	r1, [pc, #40]	; (80010a4 <uart_rx_it+0x70>)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001080:	3308      	adds	r3, #8
 8001082:	4619      	mov	r1, r3
 8001084:	4610      	mov	r0, r2
 8001086:	f7ff ffc7 	bl	8001018 <uart_start_rx_it>
			return;
 800108a:	e008      	b.n	800109e <uart_rx_it+0x6a>
	for(int i=0;i<smac_main_list.new_smac_index;i++){
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	3301      	adds	r3, #1
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <uart_rx_it+0x70>)
 8001094:	7b1b      	ldrb	r3, [r3, #12]
 8001096:	461a      	mov	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	4293      	cmp	r3, r2
 800109c:	dbd1      	blt.n	8001042 <uart_rx_it+0xe>
		}
	}

}
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200043b0 	.word	0x200043b0

080010a8 <uart_tx_it>:

void uart_tx_it(UART_HandleTypeDef *huart)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	for(int i=0;i<smac_main_list.new_smac_index;i++){
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	e02a      	b.n	800110c <uart_tx_it+0x64>
		if(huart==smac_main_list.items[i]->huart){
 80010b6:	4a1a      	ldr	r2, [pc, #104]	; (8001120 <uart_tx_it+0x78>)
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d11f      	bne.n	8001106 <uart_tx_it+0x5e>
			if(smac_main_list.items[i]->last_tx_message->free_after_use == 	FREE_MEMORY_FLAG) {
 80010c6:	4a16      	ldr	r2, [pc, #88]	; (8001120 <uart_tx_it+0x78>)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	799b      	ldrb	r3, [r3, #6]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d108      	bne.n	80010e8 <uart_tx_it+0x40>
			  free(smac_main_list.items[i]->last_tx_message->data_pointer);
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <uart_tx_it+0x78>)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f007 fd06 	bl	8008af4 <free>
			}
			free(smac_main_list.items[i]->last_tx_message);
 80010e8:	4a0d      	ldr	r2, [pc, #52]	; (8001120 <uart_tx_it+0x78>)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f007 fcfe 	bl	8008af4 <free>
			smac_main_list.items[i]->tx_media_status=TX_MEDIA_READY;
 80010f8:	4a09      	ldr	r2, [pc, #36]	; (8001120 <uart_tx_it+0x78>)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001100:	2200      	movs	r2, #0
 8001102:	751a      	strb	r2, [r3, #20]
			return;
 8001104:	e008      	b.n	8001118 <uart_tx_it+0x70>
	for(int i=0;i<smac_main_list.new_smac_index;i++){
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3301      	adds	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <uart_tx_it+0x78>)
 800110e:	7b1b      	ldrb	r3, [r3, #12]
 8001110:	461a      	mov	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4293      	cmp	r3, r2
 8001116:	dbce      	blt.n	80010b6 <uart_tx_it+0xe>
		}
	}
}
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200043b0 	.word	0x200043b0

08001124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001124:	b5b0      	push	{r4, r5, r7, lr}
 8001126:	b0b4      	sub	sp, #208	; 0xd0
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112a:	f000 ff91 	bl	8002050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112e:	f000 f8c9 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001132:	f000 f9f5 	bl	8001520 <MX_GPIO_Init>
  MX_DMA_Init();
 8001136:	f000 f9d3 	bl	80014e0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800113a:	f000 f9a7 	bl	800148c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800113e:	f000 f929 	bl	8001394 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001142:	f000 f955 	bl	80013f0 <MX_TIM2_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of uart1_smac_rx_inQ */
  osMessageQDef(uart1_smac_rx_inQ, 100, uint8_t);
 8001146:	4b4e      	ldr	r3, [pc, #312]	; (8001280 <main+0x15c>)
 8001148:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 800114c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800114e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uart1_smac_rx_inQHandle = osMessageCreate(osMessageQ(uart1_smac_rx_inQ), NULL);
 8001152:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f004 fba8 	bl	80058ae <osMessageCreate>
 800115e:	4603      	mov	r3, r0
 8001160:	4a48      	ldr	r2, [pc, #288]	; (8001284 <main+0x160>)
 8001162:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart1_smac_tx_outQ */
  osMessageQDef(uart1_smac_tx_outQ, 10, uint8_t*);
 8001164:	4b48      	ldr	r3, [pc, #288]	; (8001288 <main+0x164>)
 8001166:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 800116a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800116c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uart1_smac_tx_outQHandle = osMessageCreate(osMessageQ(uart1_smac_tx_outQ), NULL);
 8001170:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f004 fb99 	bl	80058ae <osMessageCreate>
 800117c:	4603      	mov	r3, r0
 800117e:	4a43      	ldr	r2, [pc, #268]	; (800128c <main+0x168>)
 8001180:	6013      	str	r3, [r2, #0]

  /* definition and creation of puck_rxQ */
  osMessageQDef(puck_rxQ, 50, uint8_t);
 8001182:	4b43      	ldr	r3, [pc, #268]	; (8001290 <main+0x16c>)
 8001184:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8001188:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800118a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  puck_rxQHandle = osMessageCreate(osMessageQ(puck_rxQ), NULL);
 800118e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f004 fb8a 	bl	80058ae <osMessageCreate>
 800119a:	4603      	mov	r3, r0
 800119c:	4a3d      	ldr	r2, [pc, #244]	; (8001294 <main+0x170>)
 800119e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ssp_rxQ */
  osMessageQDef(ssp_rxQ, 50, uint8_t);
 80011a0:	4b3b      	ldr	r3, [pc, #236]	; (8001290 <main+0x16c>)
 80011a2:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80011a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ssp_rxQHandle = osMessageCreate(osMessageQ(ssp_rxQ), NULL);
 80011ac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f004 fb7b 	bl	80058ae <osMessageCreate>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4a37      	ldr	r2, [pc, #220]	; (8001298 <main+0x174>)
 80011bc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80011be:	4b37      	ldr	r3, [pc, #220]	; (800129c <main+0x178>)
 80011c0:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80011c4:	461d      	mov	r5, r3
 80011c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80011d2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f004 fb08 	bl	80057ee <osThreadCreate>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a2f      	ldr	r2, [pc, #188]	; (80012a0 <main+0x17c>)
 80011e2:	6013      	str	r3, [r2, #0]

  /* definition and creation of uart1_smac_t */
  osThreadDef(uart1_smac_t, uart1_smac_f, osPriorityIdle, 0, 128);
 80011e4:	4b2f      	ldr	r3, [pc, #188]	; (80012a4 <main+0x180>)
 80011e6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80011ea:	461d      	mov	r5, r3
 80011ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uart1_smac_tHandle = osThreadCreate(osThread(uart1_smac_t), NULL);
 80011f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f004 faf5 	bl	80057ee <osThreadCreate>
 8001204:	4603      	mov	r3, r0
 8001206:	4a28      	ldr	r2, [pc, #160]	; (80012a8 <main+0x184>)
 8001208:	6013      	str	r3, [r2, #0]

  /* definition and creation of puck_t */
  osThreadDef(puck_t, puck_f, osPriorityIdle, 0, 128);
 800120a:	4b28      	ldr	r3, [pc, #160]	; (80012ac <main+0x188>)
 800120c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001210:	461d      	mov	r5, r3
 8001212:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001216:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800121a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  puck_tHandle = osThreadCreate(osThread(puck_t), NULL);
 800121e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f004 fae2 	bl	80057ee <osThreadCreate>
 800122a:	4603      	mov	r3, r0
 800122c:	4a20      	ldr	r2, [pc, #128]	; (80012b0 <main+0x18c>)
 800122e:	6013      	str	r3, [r2, #0]

  /* definition and creation of ssp_t */
  osThreadDef(ssp_t, ssp_f, osPriorityIdle, 0, 256);
 8001230:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <main+0x190>)
 8001232:	f107 0420 	add.w	r4, r7, #32
 8001236:	461d      	mov	r5, r3
 8001238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800123c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001240:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ssp_tHandle = osThreadCreate(osThread(ssp_t), NULL);
 8001244:	f107 0320 	add.w	r3, r7, #32
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f004 facf 	bl	80057ee <osThreadCreate>
 8001250:	4603      	mov	r3, r0
 8001252:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <main+0x194>)
 8001254:	6013      	str	r3, [r2, #0]

  /* definition and creation of adc_t */
  osThreadDef(adc_t, adc_f, osPriorityIdle, 0, 128);
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <main+0x198>)
 8001258:	1d3c      	adds	r4, r7, #4
 800125a:	461d      	mov	r5, r3
 800125c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800125e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001260:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001264:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  adc_tHandle = osThreadCreate(osThread(adc_t), NULL);
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f004 fabe 	bl	80057ee <osThreadCreate>
 8001272:	4603      	mov	r3, r0
 8001274:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <main+0x19c>)
 8001276:	6013      	str	r3, [r2, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001278:	f004 fab2 	bl	80057e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800127c:	e7fe      	b.n	800127c <main+0x158>
 800127e:	bf00      	nop
 8001280:	0800a05c 	.word	0x0800a05c
 8001284:	200043ac 	.word	0x200043ac
 8001288:	0800a06c 	.word	0x0800a06c
 800128c:	20004250 	.word	0x20004250
 8001290:	0800a07c 	.word	0x0800a07c
 8001294:	200043a8 	.word	0x200043a8
 8001298:	20004248 	.word	0x20004248
 800129c:	0800a08c 	.word	0x0800a08c
 80012a0:	2000424c 	.word	0x2000424c
 80012a4:	0800a0a8 	.word	0x0800a0a8
 80012a8:	200042a8 	.word	0x200042a8
 80012ac:	0800a0c4 	.word	0x0800a0c4
 80012b0:	200043a4 	.word	0x200043a4
 80012b4:	0800a0e0 	.word	0x0800a0e0
 80012b8:	20004358 	.word	0x20004358
 80012bc:	0800a0fc 	.word	0x0800a0fc
 80012c0:	2000430c 	.word	0x2000430c

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b094      	sub	sp, #80	; 0x50
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	2230      	movs	r2, #48	; 0x30
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f007 fc24 	bl	8008b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <SystemClock_Config+0xc8>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	4a26      	ldr	r2, [pc, #152]	; (800138c <SystemClock_Config+0xc8>)
 80012f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f6:	6413      	str	r3, [r2, #64]	; 0x40
 80012f8:	4b24      	ldr	r3, [pc, #144]	; (800138c <SystemClock_Config+0xc8>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <SystemClock_Config+0xcc>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a20      	ldr	r2, [pc, #128]	; (8001390 <SystemClock_Config+0xcc>)
 800130e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <SystemClock_Config+0xcc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001320:	2301      	movs	r3, #1
 8001322:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001324:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132a:	2302      	movs	r3, #2
 800132c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800132e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001332:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001334:	2319      	movs	r3, #25
 8001336:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001338:	23a0      	movs	r3, #160	; 0xa0
 800133a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800133c:	2302      	movs	r3, #2
 800133e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001340:	2304      	movs	r3, #4
 8001342:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001344:	f107 0320 	add.w	r3, r7, #32
 8001348:	4618      	mov	r0, r3
 800134a:	f002 fa21 	bl	8003790 <HAL_RCC_OscConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001354:	f000 f9c6 	bl	80016e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001358:	230f      	movs	r3, #15
 800135a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135c:	2302      	movs	r3, #2
 800135e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001368:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	2102      	movs	r1, #2
 8001374:	4618      	mov	r0, r3
 8001376:	f002 fc83 	bl	8003c80 <HAL_RCC_ClockConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001380:	f000 f9b0 	bl	80016e4 <Error_Handler>
  }
}
 8001384:	bf00      	nop
 8001386:	3750      	adds	r7, #80	; 0x50
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40023800 	.word	0x40023800
 8001390:	40007000 	.word	0x40007000

08001394 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <MX_I2C1_Init+0x50>)
 800139a:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <MX_I2C1_Init+0x54>)
 800139c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_I2C1_Init+0x50>)
 80013a0:	4a12      	ldr	r2, [pc, #72]	; (80013ec <MX_I2C1_Init+0x58>)
 80013a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <MX_I2C1_Init+0x50>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <MX_I2C1_Init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_I2C1_Init+0x50>)
 80013b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b8:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <MX_I2C1_Init+0x50>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_I2C1_Init+0x50>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c4:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <MX_I2C1_Init+0x50>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_I2C1_Init+0x50>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013d0:	4804      	ldr	r0, [pc, #16]	; (80013e4 <MX_I2C1_Init+0x50>)
 80013d2:	f001 fc79 	bl	8002cc8 <HAL_I2C_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013dc:	f000 f982 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20004254 	.word	0x20004254
 80013e8:	40005400 	.word	0x40005400
 80013ec:	000186a0 	.word	0x000186a0

080013f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	463b      	mov	r3, r7
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <MX_TIM2_Init+0x94>)
 800140e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001412:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <MX_TIM2_Init+0x94>)
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_TIM2_Init+0x94>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800000;
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MX_TIM2_Init+0x94>)
 8001422:	4a19      	ldr	r2, [pc, #100]	; (8001488 <MX_TIM2_Init+0x98>)
 8001424:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <MX_TIM2_Init+0x94>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142c:	4b15      	ldr	r3, [pc, #84]	; (8001484 <MX_TIM2_Init+0x94>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001432:	4814      	ldr	r0, [pc, #80]	; (8001484 <MX_TIM2_Init+0x94>)
 8001434:	f002 fe26 	bl	8004084 <HAL_TIM_Base_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800143e:	f000 f951 	bl	80016e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001442:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001446:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	4619      	mov	r1, r3
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_TIM2_Init+0x94>)
 8001450:	f002 ffe0 	bl	8004414 <HAL_TIM_ConfigClockSource>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800145a:	f000 f943 	bl	80016e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145e:	2300      	movs	r3, #0
 8001460:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001466:	463b      	mov	r3, r7
 8001468:	4619      	mov	r1, r3
 800146a:	4806      	ldr	r0, [pc, #24]	; (8001484 <MX_TIM2_Init+0x94>)
 800146c:	f003 f9fc 	bl	8004868 <HAL_TIMEx_MasterConfigSynchronization>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001476:	f000 f935 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2000435c 	.word	0x2000435c
 8001488:	000c3500 	.word	0x000c3500

0800148c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_USART1_UART_Init+0x4c>)
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <MX_USART1_UART_Init+0x50>)
 8001494:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <MX_USART1_UART_Init+0x4c>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_USART1_UART_Init+0x4c>)
 80014c4:	f003 fa60 	bl	8004988 <HAL_UART_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014ce:	f000 f909 	bl	80016e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20004310 	.word	0x20004310
 80014dc:	40011000 	.word	0x40011000

080014e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_DMA_Init+0x3c>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a0b      	ldr	r2, [pc, #44]	; (800151c <MX_DMA_Init+0x3c>)
 80014f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_DMA_Init+0x3c>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2105      	movs	r1, #5
 8001506:	2046      	movs	r0, #70	; 0x46
 8001508:	f000 fe9c 	bl	8002244 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800150c:	2046      	movs	r0, #70	; 0x46
 800150e:	f000 feb5 	bl	800227c <HAL_NVIC_EnableIRQ>

}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800

08001520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <MX_GPIO_Init+0x68>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a16      	ldr	r2, [pc, #88]	; (8001588 <MX_GPIO_Init+0x68>)
 8001530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b14      	ldr	r3, [pc, #80]	; (8001588 <MX_GPIO_Init+0x68>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MX_GPIO_Init+0x68>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <MX_GPIO_Init+0x68>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <MX_GPIO_Init+0x68>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_GPIO_Init+0x68>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a08      	ldr	r2, [pc, #32]	; (8001588 <MX_GPIO_Init+0x68>)
 8001568:	f043 0302 	orr.w	r3, r3, #2
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_GPIO_Init+0x68>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]

}
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800

0800158c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uart_rx_it(huart);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff fd4d 	bl	8001034 <uart_rx_it>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b082      	sub	sp, #8
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  uart_tx_it(huart);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fd7c 	bl	80010a8 <uart_tx_it>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  timed_callbacks_list_init(&htim2);
 80015c0:	4814      	ldr	r0, [pc, #80]	; (8001614 <StartDefaultTask+0x5c>)
 80015c2:	f000 fc49 	bl	8001e58 <timed_callbacks_list_init>
  smac_list_init();
 80015c6:	f000 f893 	bl	80016f0 <smac_list_init>
  uart1_smac=smac_create_new(&huart1,uart1_smac_rx_inQHandle,uart1_smac_tx_outQHandle);
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <StartDefaultTask+0x60>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a13      	ldr	r2, [pc, #76]	; (800161c <StartDefaultTask+0x64>)
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	4619      	mov	r1, r3
 80015d4:	4812      	ldr	r0, [pc, #72]	; (8001620 <StartDefaultTask+0x68>)
 80015d6:	f000 f897 	bl	8001708 <smac_create_new>
 80015da:	4603      	mov	r3, r0
 80015dc:	4a11      	ldr	r2, [pc, #68]	; (8001624 <StartDefaultTask+0x6c>)
 80015de:	6013      	str	r3, [r2, #0]
  puck_init(uart1_smac,puck_rxQHandle,ssp_rxQHandle);
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <StartDefaultTask+0x6c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a10      	ldr	r2, [pc, #64]	; (8001628 <StartDefaultTask+0x70>)
 80015e6:	6811      	ldr	r1, [r2, #0]
 80015e8:	4a10      	ldr	r2, [pc, #64]	; (800162c <StartDefaultTask+0x74>)
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff f8f5 	bl	80007dc <puck_init>
  ssp_init(uart1_smac,ssp_rxQHandle);
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <StartDefaultTask+0x6c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a0d      	ldr	r2, [pc, #52]	; (800162c <StartDefaultTask+0x74>)
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fbe3 	bl	8000dc8 <ssp_init>
  adc_init(&hi2c1);
 8001602:	480b      	ldr	r0, [pc, #44]	; (8001630 <StartDefaultTask+0x78>)
 8001604:	f7fe ffc8 	bl	8000598 <adc_init>
	 */
	 //smac_send(uart1_smac,tt,10,KEEP_MEMORY_FLAG);

	 //sprintf(uart_buf,"adc:%d\r",adc_main.adc_ch1_value);
	 //HAL_UART_Transmit(&huart1,uart_buf,strlen(uart_buf),100);
	 osDelay(1000);
 8001608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800160c:	f004 f93b 	bl	8005886 <osDelay>
 8001610:	e7fa      	b.n	8001608 <StartDefaultTask+0x50>
 8001612:	bf00      	nop
 8001614:	2000435c 	.word	0x2000435c
 8001618:	200043ac 	.word	0x200043ac
 800161c:	20004250 	.word	0x20004250
 8001620:	20004310 	.word	0x20004310
 8001624:	20004354 	.word	0x20004354
 8001628:	200043a8 	.word	0x200043a8
 800162c:	20004248 	.word	0x20004248
 8001630:	20004254 	.word	0x20004254

08001634 <uart1_smac_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_uart1_smac_f */
void uart1_smac_f(void const * argument)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN uart1_smac_f */
  /* Infinite loop */
  osDelay(500);
 800163c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001640:	f004 f921 	bl	8005886 <osDelay>
  smac_loop(uart1_smac);
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <uart1_smac_f+0x24>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f000 f8a7 	bl	800179c <smac_loop>
  /* USER CODE END uart1_smac_f */
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20004354 	.word	0x20004354

0800165c <puck_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_puck_f */
void puck_f(void const * argument)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN puck_f */
  /* Infinite loop */
  osDelay(500);
 8001664:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001668:	f004 f90d 	bl	8005886 <osDelay>
  puck_loop();
 800166c:	f7ff f972 	bl	8000954 <puck_loop>
  /* USER CODE END puck_f */
}
 8001670:	bf00      	nop
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <ssp_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ssp_f */
void ssp_f(void const * argument)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ssp_f */
  /* Infinite loop */
  osDelay(500);
 8001680:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001684:	f004 f8ff 	bl	8005886 <osDelay>
  ssp_loop();
 8001688:	f7ff fbd6 	bl	8000e38 <ssp_loop>
  /* USER CODE END ssp_f */
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <adc_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_adc_f */
void adc_f(void const * argument)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN adc_f */
  /* Infinite loop */
  osDelay(500);
 800169c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016a0:	f004 f8f1 	bl	8005886 <osDelay>
  adc_loop();
 80016a4:	f7fe ff88 	bl	80005b8 <adc_loop>
  /* USER CODE END adc_f */
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d102      	bne.n	80016c8 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80016c2:	f000 fce7 	bl	8002094 <HAL_IncTick>
  else if (htim->Instance == TIM2) { // should be every 10 ms
	  timed_callbacks_update();
   }

  /* USER CODE END Callback 1 */
}
 80016c6:	e006      	b.n	80016d6 <HAL_TIM_PeriodElapsedCallback+0x26>
  else if (htim->Instance == TIM2) { // should be every 10 ms
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d0:	d101      	bne.n	80016d6 <HAL_TIM_PeriodElapsedCallback+0x26>
	  timed_callbacks_update();
 80016d2:	f000 fc0f 	bl	8001ef4 <timed_callbacks_update>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40010000 	.word	0x40010000

080016e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e8:	b672      	cpsid	i
}
 80016ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ec:	e7fe      	b.n	80016ec <Error_Handler+0x8>
	...

080016f0 <smac_list_init>:
HAL_UART_Transmit(&huart1,"t1",2,100);
}
*/

void smac_list_init()
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
	smac_main_list.new_smac_index=0;
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <smac_list_init+0x14>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	731a      	strb	r2, [r3, #12]
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	200043b0 	.word	0x200043b0

08001708 <smac_create_new>:



smac_controller* smac_create_new(UART_HandleTypeDef* huart,osMessageQId uart_rxQHandle,osMessageQId uart_txQHandle)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
	if(smac_main_list.new_smac_index<NUM_OF_SMAC_CONTROLLERS){
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <smac_create_new+0x90>)
 8001716:	7b1b      	ldrb	r3, [r3, #12]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d838      	bhi.n	800178e <smac_create_new+0x86>
	  smac_controller* new_dispatcher = (smac_controller*) malloc(sizeof(smac_controller));
 800171c:	2040      	movs	r0, #64	; 0x40
 800171e:	f007 f9e1 	bl	8008ae4 <malloc>
 8001722:	4603      	mov	r3, r0
 8001724:	617b      	str	r3, [r7, #20]
	  smac_main_list.items[smac_main_list.new_smac_index]=new_dispatcher;
 8001726:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <smac_create_new+0x90>)
 8001728:	7b1b      	ldrb	r3, [r3, #12]
 800172a:	4619      	mov	r1, r3
 800172c:	4a1a      	ldr	r2, [pc, #104]	; (8001798 <smac_create_new+0x90>)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	  new_dispatcher->huart=huart;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	601a      	str	r2, [r3, #0]
	  new_dispatcher->rx_inQ=uart_rxQHandle;
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	605a      	str	r2, [r3, #4]
	  new_dispatcher->tx_outQ=uart_txQHandle;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	60da      	str	r2, [r3, #12]
	  new_dispatcher->last_tx_message=0;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
	  new_dispatcher->tx_media_status=TX_MEDIA_READY;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2200      	movs	r2, #0
 8001750:	751a      	strb	r2, [r3, #20]
	  new_dispatcher->new_rx_outQ_index=0;
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	  new_dispatcher->active_rx_outQ=0;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	2200      	movs	r2, #0
 800175e:	631a      	str	r2, [r3, #48]	; 0x30
	  new_dispatcher->analyzer=0;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	2200      	movs	r2, #0
 8001764:	639a      	str	r2, [r3, #56]	; 0x38
	  new_dispatcher->event_status=SMAC_EVNT_NONE;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	  smac_main_list.new_smac_index++;
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <smac_create_new+0x90>)
 8001770:	7b1b      	ldrb	r3, [r3, #12]
 8001772:	3301      	adds	r3, #1
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <smac_create_new+0x90>)
 8001778:	731a      	strb	r2, [r3, #12]


	  uart_start_rx_it(new_dispatcher->huart,&new_dispatcher->rx_byte_raw);
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3308      	adds	r3, #8
 8001782:	4619      	mov	r1, r3
 8001784:	4610      	mov	r0, r2
 8001786:	f7ff fc47 	bl	8001018 <uart_start_rx_it>

      return new_dispatcher;
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	e000      	b.n	8001790 <smac_create_new+0x88>
	}
	return 0;
 800178e:	2300      	movs	r3, #0

}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200043b0 	.word	0x200043b0

0800179c <smac_loop>:


void smac_loop(smac_controller* self_object)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
   uint8_t b;
   while(1)
   {
	  //Events
	  if(self_object->event_status!=SMAC_EVNT_NONE){
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d02d      	beq.n	800180a <smac_loop+0x6e>
		  for(int i=0;i<self_object->new_rx_outQ_index;i++){
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	e00d      	b.n	80017d0 <smac_loop+0x34>
			  self_object->event_callback[i](self_object->event_status);
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	3308      	adds	r3, #8
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 80017c6:	4610      	mov	r0, r2
 80017c8:	4798      	blx	r3
		  for(int i=0;i<self_object->new_rx_outQ_index;i++){
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3301      	adds	r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017d6:	461a      	mov	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4293      	cmp	r3, r2
 80017dc:	dbea      	blt.n	80017b4 <smac_loop+0x18>
		  }
		  self_object->event_status=SMAC_EVNT_NONE;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	  }

	  //RX part
      while(xQueueReceive(self_object->rx_inQ,&b,1)==pdTRUE){
 80017e6:	e010      	b.n	800180a <smac_loop+0x6e>
    	  if(self_object->analyzer!=0) self_object->analyzer(b);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d004      	beq.n	80017fa <smac_loop+0x5e>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f4:	7afa      	ldrb	r2, [r7, #11]
 80017f6:	4610      	mov	r0, r2
 80017f8:	4798      	blx	r3
    	  osMessagePut(self_object->active_rx_outQ,b,1);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	7afa      	ldrb	r2, [r7, #11]
 8001800:	4611      	mov	r1, r2
 8001802:	2201      	movs	r2, #1
 8001804:	4618      	mov	r0, r3
 8001806:	f004 f87b 	bl	8005900 <osMessagePut>
      while(xQueueReceive(self_object->rx_inQ,&b,1)==pdTRUE){
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f107 010b 	add.w	r1, r7, #11
 8001812:	2201      	movs	r2, #1
 8001814:	4618      	mov	r0, r3
 8001816:	f004 fc3b 	bl	8006090 <xQueueReceive>
 800181a:	4603      	mov	r3, r0
 800181c:	2b01      	cmp	r3, #1
 800181e:	d0e3      	beq.n	80017e8 <smac_loop+0x4c>
	  }

      //TX part
      while(uxQueueMessagesWaiting(self_object->tx_outQ)>0){
 8001820:	e01c      	b.n	800185c <smac_loop+0xc0>
        if(self_object->tx_media_status==TX_MEDIA_READY){
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	7d1b      	ldrb	r3, [r3, #20]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d118      	bne.n	800185c <smac_loop+0xc0>
          if(xQueueReceive(self_object->tx_outQ,&self_object->last_tx_message,1)==pdTRUE){
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	68d8      	ldr	r0, [r3, #12]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3310      	adds	r3, #16
 8001832:	2201      	movs	r2, #1
 8001834:	4619      	mov	r1, r3
 8001836:	f004 fc2b 	bl	8006090 <xQueueReceive>
 800183a:	4603      	mov	r3, r0
 800183c:	2b01      	cmp	r3, #1
 800183e:	d10d      	bne.n	800185c <smac_loop+0xc0>
    	       self_object->tx_media_status=TX_MEDIA_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	751a      	strb	r2, [r3, #20]
               HAL_UART_Transmit_IT(self_object->huart,self_object->last_tx_message->data_pointer,self_object->last_tx_message->data_size);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6818      	ldr	r0, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	6819      	ldr	r1, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	889b      	ldrh	r3, [r3, #4]
 8001856:	461a      	mov	r2, r3
 8001858:	f003 f8e3 	bl	8004a22 <HAL_UART_Transmit_IT>
      while(uxQueueMessagesWaiting(self_object->tx_outQ)>0){
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4618      	mov	r0, r3
 8001862:	f004 fcf5 	bl	8006250 <uxQueueMessagesWaiting>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1da      	bne.n	8001822 <smac_loop+0x86>
           }
         }
      }

     osDelay(1);
 800186c:	2001      	movs	r0, #1
 800186e:	f004 f80a 	bl	8005886 <osDelay>
	  if(self_object->event_status!=SMAC_EVNT_NONE){
 8001872:	e797      	b.n	80017a4 <smac_loop+0x8>

08001874 <smac_send>:
   }
}

err_code smac_send(smac_controller* self_object,void* mem_ptr,uint16_t mem_size, uint8_t mem_free_after_use_flag)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	4611      	mov	r1, r2
 8001880:	461a      	mov	r2, r3
 8001882:	460b      	mov	r3, r1
 8001884:	80fb      	strh	r3, [r7, #6]
 8001886:	4613      	mov	r3, r2
 8001888:	717b      	strb	r3, [r7, #5]
   if(mem_size>0){
 800188a:	88fb      	ldrh	r3, [r7, #6]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d01e      	beq.n	80018ce <smac_send+0x5a>
	memory_block_ptr* new_memory_block_pointer=(memory_block_ptr*) malloc(sizeof(memory_block_ptr));
 8001890:	2008      	movs	r0, #8
 8001892:	f007 f927 	bl	8008ae4 <malloc>
 8001896:	4603      	mov	r3, r0
 8001898:	617b      	str	r3, [r7, #20]

	new_memory_block_pointer->data_pointer=mem_ptr;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	601a      	str	r2, [r3, #0]
	new_memory_block_pointer->data_size=mem_size;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	88fa      	ldrh	r2, [r7, #6]
 80018a4:	809a      	strh	r2, [r3, #4]
	new_memory_block_pointer->free_after_use=mem_free_after_use_flag;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	797a      	ldrb	r2, [r7, #5]
 80018aa:	719a      	strb	r2, [r3, #6]

	if(osMessagePut(self_object->tx_outQ,(uint32_t)new_memory_block_pointer,1)==osOK){
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	6979      	ldr	r1, [r7, #20]
 80018b2:	2201      	movs	r2, #1
 80018b4:	4618      	mov	r0, r3
 80018b6:	f004 f823 	bl	8005900 <osMessagePut>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <smac_send+0x50>
	 return RES_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	e005      	b.n	80018d0 <smac_send+0x5c>
	}
	else{
	 free(new_memory_block_pointer);
 80018c4:	6978      	ldr	r0, [r7, #20]
 80018c6:	f007 f915 	bl	8008af4 <free>
	 return RES_ERR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <smac_send+0x5c>
	}
   }
   else{
		return RES_ERR;
 80018ce:	2301      	movs	r3, #1
   }
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <smac_register_rx_outQ>:

err_code smac_register_rx_outQ(smac_controller* self_object, osMessageQId   rx_outQ, uint8_t activeQ_flag, void (*event_callback)(smac_event event_id))
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	4613      	mov	r3, r2
 80018e6:	71fb      	strb	r3, [r7, #7]
	if(self_object->new_rx_outQ_index<NUM_OF_RX_OUT_QUEUES){
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d821      	bhi.n	8001936 <smac_register_rx_outQ+0x5e>
		 self_object->rx_outQ[self_object->new_rx_outQ_index]=rx_outQ;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018f8:	461a      	mov	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	3206      	adds	r2, #6
 80018fe:	68b9      	ldr	r1, [r7, #8]
 8001900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		 if(activeQ_flag==ACTIVE_QUEUE_FLAG) self_object->active_rx_outQ=rx_outQ;
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	2b0a      	cmp	r3, #10
 8001908:	d102      	bne.n	8001910 <smac_register_rx_outQ+0x38>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	631a      	str	r2, [r3, #48]	; 0x30
		 self_object->event_callback[self_object->new_rx_outQ_index]=event_callback;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	3308      	adds	r3, #8
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	605a      	str	r2, [r3, #4]
		 self_object->new_rx_outQ_index++;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001928:	3301      	adds	r3, #1
 800192a:	b2da      	uxtb	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	     return RES_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	e000      	b.n	8001938 <smac_register_rx_outQ+0x60>
	}
	return RES_ERR;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_MspInit+0x54>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	4a11      	ldr	r2, [pc, #68]	; (8001998 <HAL_MspInit+0x54>)
 8001954:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001958:	6453      	str	r3, [r2, #68]	; 0x44
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <HAL_MspInit+0x54>)
 800195c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	603b      	str	r3, [r7, #0]
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_MspInit+0x54>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <HAL_MspInit+0x54>)
 8001970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001974:	6413      	str	r3, [r2, #64]	; 0x40
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <HAL_MspInit+0x54>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	210f      	movs	r1, #15
 8001986:	f06f 0001 	mvn.w	r0, #1
 800198a:	f000 fc5b 	bl	8002244 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023800 	.word	0x40023800

0800199c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a19      	ldr	r2, [pc, #100]	; (8001a20 <HAL_I2C_MspInit+0x84>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d12b      	bne.n	8001a16 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <HAL_I2C_MspInit+0x88>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <HAL_I2C_MspInit+0x88>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_I2C_MspInit+0x88>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019da:	23c0      	movs	r3, #192	; 0xc0
 80019dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019de:	2312      	movs	r3, #18
 80019e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ea:	2304      	movs	r3, #4
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ee:	f107 0314 	add.w	r3, r7, #20
 80019f2:	4619      	mov	r1, r3
 80019f4:	480c      	ldr	r0, [pc, #48]	; (8001a28 <HAL_I2C_MspInit+0x8c>)
 80019f6:	f000 ffcb 	bl	8002990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_I2C_MspInit+0x88>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	4a08      	ldr	r2, [pc, #32]	; (8001a24 <HAL_I2C_MspInit+0x88>)
 8001a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a08:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_I2C_MspInit+0x88>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a16:	bf00      	nop
 8001a18:	3728      	adds	r7, #40	; 0x28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40005400 	.word	0x40005400
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020400 	.word	0x40020400

08001a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a3c:	d115      	bne.n	8001a6a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <HAL_TIM_Base_MspInit+0x48>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	4a0b      	ldr	r2, [pc, #44]	; (8001a74 <HAL_TIM_Base_MspInit+0x48>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_TIM_Base_MspInit+0x48>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2105      	movs	r1, #5
 8001a5e:	201c      	movs	r0, #28
 8001a60:	f000 fbf0 	bl	8002244 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a64:	201c      	movs	r0, #28
 8001a66:	f000 fc09 	bl	800227c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800

08001a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a34      	ldr	r2, [pc, #208]	; (8001b68 <HAL_UART_MspInit+0xf0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d162      	bne.n	8001b60 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <HAL_UART_MspInit+0xf4>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	4a32      	ldr	r2, [pc, #200]	; (8001b6c <HAL_UART_MspInit+0xf4>)
 8001aa4:	f043 0310 	orr.w	r3, r3, #16
 8001aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aaa:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <HAL_UART_MspInit+0xf4>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f003 0310 	and.w	r3, r3, #16
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b2c      	ldr	r3, [pc, #176]	; (8001b6c <HAL_UART_MspInit+0xf4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	4a2b      	ldr	r2, [pc, #172]	; (8001b6c <HAL_UART_MspInit+0xf4>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac6:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <HAL_UART_MspInit+0xf4>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ad2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ae4:	2307      	movs	r3, #7
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	4619      	mov	r1, r3
 8001aee:	4820      	ldr	r0, [pc, #128]	; (8001b70 <HAL_UART_MspInit+0xf8>)
 8001af0:	f000 ff4e 	bl	8002990 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001af4:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <HAL_UART_MspInit+0xfc>)
 8001af6:	4a20      	ldr	r2, [pc, #128]	; (8001b78 <HAL_UART_MspInit+0x100>)
 8001af8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001afa:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <HAL_UART_MspInit+0xfc>)
 8001afc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b00:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b02:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <HAL_UART_MspInit+0xfc>)
 8001b04:	2240      	movs	r2, #64	; 0x40
 8001b06:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b08:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <HAL_UART_MspInit+0xfc>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_UART_MspInit+0xfc>)
 8001b10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b14:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b16:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_UART_MspInit+0xfc>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <HAL_UART_MspInit+0xfc>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <HAL_UART_MspInit+0xfc>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b28:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_UART_MspInit+0xfc>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <HAL_UART_MspInit+0xfc>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b34:	480f      	ldr	r0, [pc, #60]	; (8001b74 <HAL_UART_MspInit+0xfc>)
 8001b36:	f000 fbaf 	bl	8002298 <HAL_DMA_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001b40:	f7ff fdd0 	bl	80016e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a0b      	ldr	r2, [pc, #44]	; (8001b74 <HAL_UART_MspInit+0xfc>)
 8001b48:	635a      	str	r2, [r3, #52]	; 0x34
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <HAL_UART_MspInit+0xfc>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2105      	movs	r1, #5
 8001b54:	2025      	movs	r0, #37	; 0x25
 8001b56:	f000 fb75 	bl	8002244 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b5a:	2025      	movs	r0, #37	; 0x25
 8001b5c:	f000 fb8e 	bl	800227c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b60:	bf00      	nop
 8001b62:	3728      	adds	r7, #40	; 0x28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40011000 	.word	0x40011000
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	200042ac 	.word	0x200042ac
 8001b78:	400264b8 	.word	0x400264b8

08001b7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	; 0x30
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	2019      	movs	r0, #25
 8001b92:	f000 fb57 	bl	8002244 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b96:	2019      	movs	r0, #25
 8001b98:	f000 fb70 	bl	800227c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	; (8001c1c <HAL_InitTick+0xa0>)
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba4:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <HAL_InitTick+0xa0>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6453      	str	r3, [r2, #68]	; 0x44
 8001bac:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <HAL_InitTick+0xa0>)
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bb8:	f107 0210 	add.w	r2, r7, #16
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4611      	mov	r1, r2
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f002 fa2c 	bl	8004020 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001bc8:	f002 fa16 	bl	8003ff8 <HAL_RCC_GetPCLK2Freq>
 8001bcc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd0:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <HAL_InitTick+0xa4>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	0c9b      	lsrs	r3, r3, #18
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <HAL_InitTick+0xa8>)
 8001bde:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <HAL_InitTick+0xac>)
 8001be0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_InitTick+0xa8>)
 8001be4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001be8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001bea:	4a0e      	ldr	r2, [pc, #56]	; (8001c24 <HAL_InitTick+0xa8>)
 8001bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <HAL_InitTick+0xa8>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_InitTick+0xa8>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001bfc:	4809      	ldr	r0, [pc, #36]	; (8001c24 <HAL_InitTick+0xa8>)
 8001bfe:	f002 fa41 	bl	8004084 <HAL_TIM_Base_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d104      	bne.n	8001c12 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001c08:	4806      	ldr	r0, [pc, #24]	; (8001c24 <HAL_InitTick+0xa8>)
 8001c0a:	f002 fa8b 	bl	8004124 <HAL_TIM_Base_Start_IT>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	e000      	b.n	8001c14 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3730      	adds	r7, #48	; 0x30
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	431bde83 	.word	0x431bde83
 8001c24:	200043c0 	.word	0x200043c0
 8001c28:	40010000 	.word	0x40010000

08001c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <NMI_Handler+0x4>

08001c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <HardFault_Handler+0x4>

08001c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <MemManage_Handler+0x4>

08001c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <BusFault_Handler+0x4>

08001c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <UsageFault_Handler+0x4>

08001c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c5e:	f002 fad1 	bl	8004204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200043c0 	.word	0x200043c0

08001c6c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <TIM2_IRQHandler+0x10>)
 8001c72:	f002 fac7 	bl	8004204 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	2000435c 	.word	0x2000435c

08001c80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c84:	4802      	ldr	r0, [pc, #8]	; (8001c90 <USART1_IRQHandler+0x10>)
 8001c86:	f002 ff41 	bl	8004b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20004310 	.word	0x20004310

08001c94 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <DMA2_Stream7_IRQHandler+0x10>)
 8001c9a:	f000 fc3d 	bl	8002518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200042ac 	.word	0x200042ac

08001ca8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
	return 1;
 8001cac:	2301      	movs	r3, #1
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <_kill>:

int _kill(int pid, int sig)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cc2:	f006 fdeb 	bl	800889c <__errno>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2216      	movs	r2, #22
 8001cca:	601a      	str	r2, [r3, #0]
	return -1;
 8001ccc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_exit>:

void _exit (int status)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ffe7 	bl	8001cb8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cea:	e7fe      	b.n	8001cea <_exit+0x12>

08001cec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	e00a      	b.n	8001d14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cfe:	f3af 8000 	nop.w
 8001d02:	4601      	mov	r1, r0
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	60ba      	str	r2, [r7, #8]
 8001d0a:	b2ca      	uxtb	r2, r1
 8001d0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	3301      	adds	r3, #1
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	dbf0      	blt.n	8001cfe <_read+0x12>
	}

return len;
 8001d1c:	687b      	ldr	r3, [r7, #4]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	e009      	b.n	8001d4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	60ba      	str	r2, [r7, #8]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dbf1      	blt.n	8001d38 <_write+0x12>
	}
	return len;
 8001d54:	687b      	ldr	r3, [r7, #4]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <_close>:

int _close(int file)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
	return -1;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d86:	605a      	str	r2, [r3, #4]
	return 0;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <_isatty>:

int _isatty(int file)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d9e:	2301      	movs	r3, #1
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
	return 0;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd0:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <_sbrk+0x5c>)
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <_sbrk+0x60>)
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <_sbrk+0x64>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d102      	bne.n	8001dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <_sbrk+0x64>)
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <_sbrk+0x68>)
 8001de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <_sbrk+0x64>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d207      	bcs.n	8001e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df8:	f006 fd50 	bl	800889c <__errno>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	220c      	movs	r2, #12
 8001e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	e009      	b.n	8001e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <_sbrk+0x64>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e0e:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <_sbrk+0x64>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <_sbrk+0x64>)
 8001e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20020000 	.word	0x20020000
 8001e28:	00000400 	.word	0x00000400
 8001e2c:	20000394 	.word	0x20000394
 8001e30:	20004468 	.word	0x20004468

08001e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <SystemInit+0x20>)
 8001e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3e:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <SystemInit+0x20>)
 8001e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e48:	bf00      	nop
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <timed_callbacks_list_init>:


timed_callbacks_list_t  timed_callbacks_list;

void timed_callbacks_list_init(TIM_HandleTypeDef* htim)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	timed_callbacks_list.new_callback_index=0;
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <timed_callbacks_list_init+0x28>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	751a      	strb	r2, [r3, #20]
	timed_callbacks_list.htim=htim;
 8001e66:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <timed_callbacks_list_init+0x28>)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6193      	str	r3, [r2, #24]
	HAL_TIM_Base_Start_IT(timed_callbacks_list.htim);
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <timed_callbacks_list_init+0x28>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f002 f957 	bl	8004124 <HAL_TIM_Base_Start_IT>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20004408 	.word	0x20004408

08001e84 <timed_callback_register_new>:

timed_callback_t* timed_callback_register_new(void (*callback)(void))
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	if(timed_callbacks_list.new_callback_index<NUM_OF_TIMERS){
 8001e8c:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <timed_callback_register_new+0x6c>)
 8001e8e:	7d1b      	ldrb	r3, [r3, #20]
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d828      	bhi.n	8001ee6 <timed_callback_register_new+0x62>
		timed_callback_t* new_chronometer = (timed_callback_t*) malloc(sizeof(timed_callback_t));
 8001e94:	2010      	movs	r0, #16
 8001e96:	f006 fe25 	bl	8008ae4 <malloc>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	60fb      	str	r3, [r7, #12]
		timed_callbacks_list.callbacks[timed_callbacks_list.new_callback_index]=new_chronometer;
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <timed_callback_register_new+0x6c>)
 8001ea0:	7d1b      	ldrb	r3, [r3, #20]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <timed_callback_register_new+0x6c>)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

		new_chronometer->status=TIMER_TIMED_OUT;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
		new_chronometer->value=0;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	605a      	str	r2, [r3, #4]
		new_chronometer->target_time=0;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
		if(callback!=0) new_chronometer->callback=callback=callback;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <timed_callback_register_new+0x48>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	e004      	b.n	8001ed6 <timed_callback_register_new+0x52>
		else new_chronometer->callback=callback=0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	60da      	str	r2, [r3, #12]

		timed_callbacks_list.new_callback_index++;
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <timed_callback_register_new+0x6c>)
 8001ed8:	7d1b      	ldrb	r3, [r3, #20]
 8001eda:	3301      	adds	r3, #1
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4b04      	ldr	r3, [pc, #16]	; (8001ef0 <timed_callback_register_new+0x6c>)
 8001ee0:	751a      	strb	r2, [r3, #20]

		return new_chronometer;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	e000      	b.n	8001ee8 <timed_callback_register_new+0x64>
	}
	return 0;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20004408 	.word	0x20004408

08001ef4 <timed_callbacks_update>:

void timed_callbacks_update()
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0

 for(int i=0;i<timed_callbacks_list.new_callback_index;i++){
 8001efa:	2300      	movs	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	e049      	b.n	8001f94 <timed_callbacks_update+0xa0>

  if(timed_callbacks_list.callbacks[i]->status==TIMER_UPDATE_REQUIRED)
 8001f00:	4a2a      	ldr	r2, [pc, #168]	; (8001fac <timed_callbacks_update+0xb8>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d116      	bne.n	8001f3c <timed_callbacks_update+0x48>
  {
	  timed_callbacks_list.callbacks[i]->value=timed_callbacks_list.callbacks[i]->target_time;
 8001f0e:	4a27      	ldr	r2, [pc, #156]	; (8001fac <timed_callbacks_update+0xb8>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001f16:	4925      	ldr	r1, [pc, #148]	; (8001fac <timed_callbacks_update+0xb8>)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	605a      	str	r2, [r3, #4]
	  timed_callbacks_list.callbacks[i]->target_time=0;
 8001f22:	4a22      	ldr	r2, [pc, #136]	; (8001fac <timed_callbacks_update+0xb8>)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
	  timed_callbacks_list.callbacks[i]->status=TIMER_ACTIVE;
 8001f2e:	4a1f      	ldr	r2, [pc, #124]	; (8001fac <timed_callbacks_update+0xb8>)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f36:	2201      	movs	r2, #1
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	e028      	b.n	8001f8e <timed_callbacks_update+0x9a>
  }
  else if(timed_callbacks_list.callbacks[i]->status!=TIMER_TIMED_OUT)
 8001f3c:	4a1b      	ldr	r2, [pc, #108]	; (8001fac <timed_callbacks_update+0xb8>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d021      	beq.n	8001f8e <timed_callbacks_update+0x9a>
  {
	  if(timed_callbacks_list.callbacks[i]->status==TIMER_ACTIVE)
 8001f4a:	4a18      	ldr	r2, [pc, #96]	; (8001fac <timed_callbacks_update+0xb8>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d11a      	bne.n	8001f8e <timed_callbacks_update+0x9a>
	  {
		  if(timed_callbacks_list.callbacks[i]->value==0)
 8001f58:	4a14      	ldr	r2, [pc, #80]	; (8001fac <timed_callbacks_update+0xb8>)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10c      	bne.n	8001f80 <timed_callbacks_update+0x8c>
			  {
			    timed_callbacks_list.callbacks[i]->status=TIMER_TIMED_OUT;
 8001f66:	4a11      	ldr	r2, [pc, #68]	; (8001fac <timed_callbacks_update+0xb8>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
			    timed_callbacks_list.callbacks[i]->callback();
 8001f72:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <timed_callbacks_update+0xb8>)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4798      	blx	r3
 8001f7e:	e006      	b.n	8001f8e <timed_callbacks_update+0x9a>
			  }
		  else timed_callbacks_list.callbacks[i]->value--;
 8001f80:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <timed_callbacks_update+0xb8>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	3a01      	subs	r2, #1
 8001f8c:	605a      	str	r2, [r3, #4]
 for(int i=0;i<timed_callbacks_list.new_callback_index;i++){
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3301      	adds	r3, #1
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <timed_callbacks_update+0xb8>)
 8001f96:	7d1b      	ldrb	r3, [r3, #20]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	dbaf      	blt.n	8001f00 <timed_callbacks_update+0xc>
	  }
  }
 }
}
 8001fa0:	bf00      	nop
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20004408 	.word	0x20004408

08001fb0 <timed_callback_set>:

void timed_callback_set(timed_callback_t* self_object,uint32_t value)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  while(self_object->status==TIMER_UPDATE_REQUIRED){}
 8001fba:	bf00      	nop
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d0fb      	beq.n	8001fbc <timed_callback_set+0xc>

  self_object->target_time=value;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	601a      	str	r2, [r3, #0]
  self_object->status=TIMER_UPDATE_REQUIRED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	609a      	str	r2, [r3, #8]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <timed_callback_off>:

void timed_callback_off(timed_callback_t* self_object)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
	self_object->value=0;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	605a      	str	r2, [r3, #4]
	self_object->status=TIMER_TIMED_OUT;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002034 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002000:	480d      	ldr	r0, [pc, #52]	; (8002038 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002002:	490e      	ldr	r1, [pc, #56]	; (800203c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002004:	4a0e      	ldr	r2, [pc, #56]	; (8002040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002008:	e002      	b.n	8002010 <LoopCopyDataInit>

0800200a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800200c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800200e:	3304      	adds	r3, #4

08002010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002014:	d3f9      	bcc.n	800200a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002016:	4a0b      	ldr	r2, [pc, #44]	; (8002044 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002018:	4c0b      	ldr	r4, [pc, #44]	; (8002048 <LoopFillZerobss+0x26>)
  movs r3, #0
 800201a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800201c:	e001      	b.n	8002022 <LoopFillZerobss>

0800201e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800201e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002020:	3204      	adds	r2, #4

08002022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002024:	d3fb      	bcc.n	800201e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002026:	f7ff ff05 	bl	8001e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800202a:	f006 fd33 	bl	8008a94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800202e:	f7ff f879 	bl	8001124 <main>
  bx  lr    
 8002032:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002034:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800203c:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8002040:	0800a434 	.word	0x0800a434
  ldr r2, =_sbss
 8002044:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8002048:	20004468 	.word	0x20004468

0800204c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800204c:	e7fe      	b.n	800204c <ADC_IRQHandler>
	...

08002050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_Init+0x40>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0d      	ldr	r2, [pc, #52]	; (8002090 <HAL_Init+0x40>)
 800205a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800205e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002060:	4b0b      	ldr	r3, [pc, #44]	; (8002090 <HAL_Init+0x40>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <HAL_Init+0x40>)
 8002066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800206a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <HAL_Init+0x40>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a07      	ldr	r2, [pc, #28]	; (8002090 <HAL_Init+0x40>)
 8002072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002078:	2003      	movs	r0, #3
 800207a:	f000 f8d8 	bl	800222e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800207e:	2000      	movs	r0, #0
 8002080:	f7ff fd7c 	bl	8001b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002084:	f7ff fc5e 	bl	8001944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40023c00 	.word	0x40023c00

08002094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_IncTick+0x20>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_IncTick+0x24>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <HAL_IncTick+0x24>)
 80020a6:	6013      	str	r3, [r2, #0]
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000058 	.word	0x20000058
 80020b8:	20004424 	.word	0x20004424

080020bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return uwTick;
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <HAL_GetTick+0x14>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	20004424 	.word	0x20004424

080020d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f0:	4013      	ands	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002106:	4a04      	ldr	r2, [pc, #16]	; (8002118 <__NVIC_SetPriorityGrouping+0x44>)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	60d3      	str	r3, [r2, #12]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000ed00 	.word	0xe000ed00

0800211c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <__NVIC_GetPriorityGrouping+0x18>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	f003 0307 	and.w	r3, r3, #7
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	2b00      	cmp	r3, #0
 8002148:	db0b      	blt.n	8002162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214a:	79fb      	ldrb	r3, [r7, #7]
 800214c:	f003 021f 	and.w	r2, r3, #31
 8002150:	4907      	ldr	r1, [pc, #28]	; (8002170 <__NVIC_EnableIRQ+0x38>)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	2001      	movs	r0, #1
 800215a:	fa00 f202 	lsl.w	r2, r0, r2
 800215e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	e000e100 	.word	0xe000e100

08002174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	6039      	str	r1, [r7, #0]
 800217e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	2b00      	cmp	r3, #0
 8002186:	db0a      	blt.n	800219e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	b2da      	uxtb	r2, r3
 800218c:	490c      	ldr	r1, [pc, #48]	; (80021c0 <__NVIC_SetPriority+0x4c>)
 800218e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002192:	0112      	lsls	r2, r2, #4
 8002194:	b2d2      	uxtb	r2, r2
 8002196:	440b      	add	r3, r1
 8002198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800219c:	e00a      	b.n	80021b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	4908      	ldr	r1, [pc, #32]	; (80021c4 <__NVIC_SetPriority+0x50>)
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	3b04      	subs	r3, #4
 80021ac:	0112      	lsls	r2, r2, #4
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	440b      	add	r3, r1
 80021b2:	761a      	strb	r2, [r3, #24]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000e100 	.word	0xe000e100
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f1c3 0307 	rsb	r3, r3, #7
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	bf28      	it	cs
 80021e6:	2304      	movcs	r3, #4
 80021e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	3304      	adds	r3, #4
 80021ee:	2b06      	cmp	r3, #6
 80021f0:	d902      	bls.n	80021f8 <NVIC_EncodePriority+0x30>
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3b03      	subs	r3, #3
 80021f6:	e000      	b.n	80021fa <NVIC_EncodePriority+0x32>
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43da      	mvns	r2, r3
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	401a      	ands	r2, r3
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002210:	f04f 31ff 	mov.w	r1, #4294967295
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43d9      	mvns	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	4313      	orrs	r3, r2
         );
}
 8002222:	4618      	mov	r0, r3
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b082      	sub	sp, #8
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ff4c 	bl	80020d4 <__NVIC_SetPriorityGrouping>
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002256:	f7ff ff61 	bl	800211c <__NVIC_GetPriorityGrouping>
 800225a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	68b9      	ldr	r1, [r7, #8]
 8002260:	6978      	ldr	r0, [r7, #20]
 8002262:	f7ff ffb1 	bl	80021c8 <NVIC_EncodePriority>
 8002266:	4602      	mov	r2, r0
 8002268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226c:	4611      	mov	r1, r2
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff ff80 	bl	8002174 <__NVIC_SetPriority>
}
 8002274:	bf00      	nop
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ff54 	bl	8002138 <__NVIC_EnableIRQ>
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022a4:	f7ff ff0a 	bl	80020bc <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e099      	b.n	80023e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2202      	movs	r2, #2
 80022b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f022 0201 	bic.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022d4:	e00f      	b.n	80022f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022d6:	f7ff fef1 	bl	80020bc <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b05      	cmp	r3, #5
 80022e2:	d908      	bls.n	80022f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2220      	movs	r2, #32
 80022e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2203      	movs	r2, #3
 80022ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e078      	b.n	80023e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1e8      	bne.n	80022d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4b38      	ldr	r3, [pc, #224]	; (80023f0 <HAL_DMA_Init+0x158>)
 8002310:	4013      	ands	r3, r2
 8002312:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002322:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800232e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4313      	orrs	r3, r2
 8002346:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	2b04      	cmp	r3, #4
 800234e:	d107      	bne.n	8002360 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002358:	4313      	orrs	r3, r2
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	4313      	orrs	r3, r2
 800235e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f023 0307 	bic.w	r3, r3, #7
 8002376:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	4313      	orrs	r3, r2
 8002380:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	2b04      	cmp	r3, #4
 8002388:	d117      	bne.n	80023ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4313      	orrs	r3, r2
 8002392:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00e      	beq.n	80023ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fa7b 	bl	8002898 <DMA_CheckFifoParam>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2240      	movs	r2, #64	; 0x40
 80023ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023b6:	2301      	movs	r3, #1
 80023b8:	e016      	b.n	80023e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fa32 	bl	800282c <DMA_CalcBaseAndBitshift>
 80023c8:	4603      	mov	r3, r0
 80023ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d0:	223f      	movs	r2, #63	; 0x3f
 80023d2:	409a      	lsls	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	f010803f 	.word	0xf010803f

080023f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002400:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002402:	f7ff fe5b 	bl	80020bc <HAL_GetTick>
 8002406:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d008      	beq.n	8002426 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2280      	movs	r2, #128	; 0x80
 8002418:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e052      	b.n	80024cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0216 	bic.w	r2, r2, #22
 8002434:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	695a      	ldr	r2, [r3, #20]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002444:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	2b00      	cmp	r3, #0
 800244c:	d103      	bne.n	8002456 <HAL_DMA_Abort+0x62>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002452:	2b00      	cmp	r3, #0
 8002454:	d007      	beq.n	8002466 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0208 	bic.w	r2, r2, #8
 8002464:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0201 	bic.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002476:	e013      	b.n	80024a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002478:	f7ff fe20 	bl	80020bc <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b05      	cmp	r3, #5
 8002484:	d90c      	bls.n	80024a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2220      	movs	r2, #32
 800248a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2203      	movs	r2, #3
 8002490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e015      	b.n	80024cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1e4      	bne.n	8002478 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b2:	223f      	movs	r2, #63	; 0x3f
 80024b4:	409a      	lsls	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2201      	movs	r2, #1
 80024be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d004      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2280      	movs	r2, #128	; 0x80
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e00c      	b.n	800250c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2205      	movs	r2, #5
 80024f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0201 	bic.w	r2, r2, #1
 8002508:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002524:	4b92      	ldr	r3, [pc, #584]	; (8002770 <HAL_DMA_IRQHandler+0x258>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a92      	ldr	r2, [pc, #584]	; (8002774 <HAL_DMA_IRQHandler+0x25c>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	0a9b      	lsrs	r3, r3, #10
 8002530:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002542:	2208      	movs	r2, #8
 8002544:	409a      	lsls	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4013      	ands	r3, r2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01a      	beq.n	8002584 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d013      	beq.n	8002584 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0204 	bic.w	r2, r2, #4
 800256a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002570:	2208      	movs	r2, #8
 8002572:	409a      	lsls	r2, r3
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257c:	f043 0201 	orr.w	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	2201      	movs	r2, #1
 800258a:	409a      	lsls	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d012      	beq.n	80025ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00b      	beq.n	80025ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	2201      	movs	r2, #1
 80025a8:	409a      	lsls	r2, r3
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f043 0202 	orr.w	r2, r3, #2
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025be:	2204      	movs	r2, #4
 80025c0:	409a      	lsls	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4013      	ands	r3, r2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d012      	beq.n	80025f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00b      	beq.n	80025f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	2204      	movs	r2, #4
 80025de:	409a      	lsls	r2, r3
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e8:	f043 0204 	orr.w	r2, r3, #4
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	2210      	movs	r2, #16
 80025f6:	409a      	lsls	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d043      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0308 	and.w	r3, r3, #8
 800260a:	2b00      	cmp	r3, #0
 800260c:	d03c      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002612:	2210      	movs	r2, #16
 8002614:	409a      	lsls	r2, r3
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d018      	beq.n	800265a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d108      	bne.n	8002648 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	2b00      	cmp	r3, #0
 800263c:	d024      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	4798      	blx	r3
 8002646:	e01f      	b.n	8002688 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800264c:	2b00      	cmp	r3, #0
 800264e:	d01b      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	4798      	blx	r3
 8002658:	e016      	b.n	8002688 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d107      	bne.n	8002678 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0208 	bic.w	r2, r2, #8
 8002676:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268c:	2220      	movs	r2, #32
 800268e:	409a      	lsls	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	f000 808e 	beq.w	80027b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 8086 	beq.w	80027b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	2220      	movs	r2, #32
 80026b0:	409a      	lsls	r2, r3
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b05      	cmp	r3, #5
 80026c0:	d136      	bne.n	8002730 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0216 	bic.w	r2, r2, #22
 80026d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d103      	bne.n	80026f2 <HAL_DMA_IRQHandler+0x1da>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f022 0208 	bic.w	r2, r2, #8
 8002700:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002706:	223f      	movs	r2, #63	; 0x3f
 8002708:	409a      	lsls	r2, r3
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002722:	2b00      	cmp	r3, #0
 8002724:	d07d      	beq.n	8002822 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	4798      	blx	r3
        }
        return;
 800272e:	e078      	b.n	8002822 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d01c      	beq.n	8002778 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d108      	bne.n	800275e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002750:	2b00      	cmp	r3, #0
 8002752:	d030      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4798      	blx	r3
 800275c:	e02b      	b.n	80027b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d027      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	4798      	blx	r3
 800276e:	e022      	b.n	80027b6 <HAL_DMA_IRQHandler+0x29e>
 8002770:	20000050 	.word	0x20000050
 8002774:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10f      	bne.n	80027a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0210 	bic.w	r2, r2, #16
 8002794:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d032      	beq.n	8002824 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d022      	beq.n	8002810 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2205      	movs	r2, #5
 80027ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0201 	bic.w	r2, r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	3301      	adds	r3, #1
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d307      	bcc.n	80027fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1f2      	bne.n	80027e2 <HAL_DMA_IRQHandler+0x2ca>
 80027fc:	e000      	b.n	8002800 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80027fe:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002814:	2b00      	cmp	r3, #0
 8002816:	d005      	beq.n	8002824 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	4798      	blx	r3
 8002820:	e000      	b.n	8002824 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002822:	bf00      	nop
    }
  }
}
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop

0800282c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	3b10      	subs	r3, #16
 800283c:	4a14      	ldr	r2, [pc, #80]	; (8002890 <DMA_CalcBaseAndBitshift+0x64>)
 800283e:	fba2 2303 	umull	r2, r3, r2, r3
 8002842:	091b      	lsrs	r3, r3, #4
 8002844:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002846:	4a13      	ldr	r2, [pc, #76]	; (8002894 <DMA_CalcBaseAndBitshift+0x68>)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4413      	add	r3, r2
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b03      	cmp	r3, #3
 8002858:	d909      	bls.n	800286e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002862:	f023 0303 	bic.w	r3, r3, #3
 8002866:	1d1a      	adds	r2, r3, #4
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	659a      	str	r2, [r3, #88]	; 0x58
 800286c:	e007      	b.n	800287e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002876:	f023 0303 	bic.w	r3, r3, #3
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002882:	4618      	mov	r0, r3
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	aaaaaaab 	.word	0xaaaaaaab
 8002894:	0800a1d0 	.word	0x0800a1d0

08002898 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d11f      	bne.n	80028f2 <DMA_CheckFifoParam+0x5a>
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d856      	bhi.n	8002966 <DMA_CheckFifoParam+0xce>
 80028b8:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <DMA_CheckFifoParam+0x28>)
 80028ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028be:	bf00      	nop
 80028c0:	080028d1 	.word	0x080028d1
 80028c4:	080028e3 	.word	0x080028e3
 80028c8:	080028d1 	.word	0x080028d1
 80028cc:	08002967 	.word	0x08002967
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d046      	beq.n	800296a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e0:	e043      	b.n	800296a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028ea:	d140      	bne.n	800296e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f0:	e03d      	b.n	800296e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028fa:	d121      	bne.n	8002940 <DMA_CheckFifoParam+0xa8>
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d837      	bhi.n	8002972 <DMA_CheckFifoParam+0xda>
 8002902:	a201      	add	r2, pc, #4	; (adr r2, 8002908 <DMA_CheckFifoParam+0x70>)
 8002904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002908:	08002919 	.word	0x08002919
 800290c:	0800291f 	.word	0x0800291f
 8002910:	08002919 	.word	0x08002919
 8002914:	08002931 	.word	0x08002931
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	73fb      	strb	r3, [r7, #15]
      break;
 800291c:	e030      	b.n	8002980 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d025      	beq.n	8002976 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800292e:	e022      	b.n	8002976 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002938:	d11f      	bne.n	800297a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800293e:	e01c      	b.n	800297a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d903      	bls.n	800294e <DMA_CheckFifoParam+0xb6>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b03      	cmp	r3, #3
 800294a:	d003      	beq.n	8002954 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800294c:	e018      	b.n	8002980 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	73fb      	strb	r3, [r7, #15]
      break;
 8002952:	e015      	b.n	8002980 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00e      	beq.n	800297e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	73fb      	strb	r3, [r7, #15]
      break;
 8002964:	e00b      	b.n	800297e <DMA_CheckFifoParam+0xe6>
      break;
 8002966:	bf00      	nop
 8002968:	e00a      	b.n	8002980 <DMA_CheckFifoParam+0xe8>
      break;
 800296a:	bf00      	nop
 800296c:	e008      	b.n	8002980 <DMA_CheckFifoParam+0xe8>
      break;
 800296e:	bf00      	nop
 8002970:	e006      	b.n	8002980 <DMA_CheckFifoParam+0xe8>
      break;
 8002972:	bf00      	nop
 8002974:	e004      	b.n	8002980 <DMA_CheckFifoParam+0xe8>
      break;
 8002976:	bf00      	nop
 8002978:	e002      	b.n	8002980 <DMA_CheckFifoParam+0xe8>
      break;   
 800297a:	bf00      	nop
 800297c:	e000      	b.n	8002980 <DMA_CheckFifoParam+0xe8>
      break;
 800297e:	bf00      	nop
    }
  } 
  
  return status; 
 8002980:	7bfb      	ldrb	r3, [r7, #15]
}
 8002982:	4618      	mov	r0, r3
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop

08002990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002990:	b480      	push	{r7}
 8002992:	b089      	sub	sp, #36	; 0x24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	e16b      	b.n	8002c84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029ac:	2201      	movs	r2, #1
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	f040 815a 	bne.w	8002c7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d005      	beq.n	80029e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d130      	bne.n	8002a44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	2203      	movs	r2, #3
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	4013      	ands	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a18:	2201      	movs	r2, #1
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4013      	ands	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 0201 	and.w	r2, r3, #1
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d017      	beq.n	8002a80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d123      	bne.n	8002ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	08da      	lsrs	r2, r3, #3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3208      	adds	r2, #8
 8002a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	220f      	movs	r2, #15
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	08da      	lsrs	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3208      	adds	r2, #8
 8002ace:	69b9      	ldr	r1, [r7, #24]
 8002ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	2203      	movs	r2, #3
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0203 	and.w	r2, r3, #3
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80b4 	beq.w	8002c7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	4b60      	ldr	r3, [pc, #384]	; (8002c9c <HAL_GPIO_Init+0x30c>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	4a5f      	ldr	r2, [pc, #380]	; (8002c9c <HAL_GPIO_Init+0x30c>)
 8002b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b24:	6453      	str	r3, [r2, #68]	; 0x44
 8002b26:	4b5d      	ldr	r3, [pc, #372]	; (8002c9c <HAL_GPIO_Init+0x30c>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b32:	4a5b      	ldr	r2, [pc, #364]	; (8002ca0 <HAL_GPIO_Init+0x310>)
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	089b      	lsrs	r3, r3, #2
 8002b38:	3302      	adds	r3, #2
 8002b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	220f      	movs	r2, #15
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a52      	ldr	r2, [pc, #328]	; (8002ca4 <HAL_GPIO_Init+0x314>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d02b      	beq.n	8002bb6 <HAL_GPIO_Init+0x226>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a51      	ldr	r2, [pc, #324]	; (8002ca8 <HAL_GPIO_Init+0x318>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d025      	beq.n	8002bb2 <HAL_GPIO_Init+0x222>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a50      	ldr	r2, [pc, #320]	; (8002cac <HAL_GPIO_Init+0x31c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d01f      	beq.n	8002bae <HAL_GPIO_Init+0x21e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a4f      	ldr	r2, [pc, #316]	; (8002cb0 <HAL_GPIO_Init+0x320>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d019      	beq.n	8002baa <HAL_GPIO_Init+0x21a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a4e      	ldr	r2, [pc, #312]	; (8002cb4 <HAL_GPIO_Init+0x324>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d013      	beq.n	8002ba6 <HAL_GPIO_Init+0x216>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a4d      	ldr	r2, [pc, #308]	; (8002cb8 <HAL_GPIO_Init+0x328>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d00d      	beq.n	8002ba2 <HAL_GPIO_Init+0x212>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a4c      	ldr	r2, [pc, #304]	; (8002cbc <HAL_GPIO_Init+0x32c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d007      	beq.n	8002b9e <HAL_GPIO_Init+0x20e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a4b      	ldr	r2, [pc, #300]	; (8002cc0 <HAL_GPIO_Init+0x330>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d101      	bne.n	8002b9a <HAL_GPIO_Init+0x20a>
 8002b96:	2307      	movs	r3, #7
 8002b98:	e00e      	b.n	8002bb8 <HAL_GPIO_Init+0x228>
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	e00c      	b.n	8002bb8 <HAL_GPIO_Init+0x228>
 8002b9e:	2306      	movs	r3, #6
 8002ba0:	e00a      	b.n	8002bb8 <HAL_GPIO_Init+0x228>
 8002ba2:	2305      	movs	r3, #5
 8002ba4:	e008      	b.n	8002bb8 <HAL_GPIO_Init+0x228>
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	e006      	b.n	8002bb8 <HAL_GPIO_Init+0x228>
 8002baa:	2303      	movs	r3, #3
 8002bac:	e004      	b.n	8002bb8 <HAL_GPIO_Init+0x228>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e002      	b.n	8002bb8 <HAL_GPIO_Init+0x228>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_GPIO_Init+0x228>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	f002 0203 	and.w	r2, r2, #3
 8002bbe:	0092      	lsls	r2, r2, #2
 8002bc0:	4093      	lsls	r3, r2
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc8:	4935      	ldr	r1, [pc, #212]	; (8002ca0 <HAL_GPIO_Init+0x310>)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <HAL_GPIO_Init+0x334>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bfa:	4a32      	ldr	r2, [pc, #200]	; (8002cc4 <HAL_GPIO_Init+0x334>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c00:	4b30      	ldr	r3, [pc, #192]	; (8002cc4 <HAL_GPIO_Init+0x334>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c24:	4a27      	ldr	r2, [pc, #156]	; (8002cc4 <HAL_GPIO_Init+0x334>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c2a:	4b26      	ldr	r3, [pc, #152]	; (8002cc4 <HAL_GPIO_Init+0x334>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c4e:	4a1d      	ldr	r2, [pc, #116]	; (8002cc4 <HAL_GPIO_Init+0x334>)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c54:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <HAL_GPIO_Init+0x334>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c78:	4a12      	ldr	r2, [pc, #72]	; (8002cc4 <HAL_GPIO_Init+0x334>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3301      	adds	r3, #1
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b0f      	cmp	r3, #15
 8002c88:	f67f ae90 	bls.w	80029ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3724      	adds	r7, #36	; 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40013800 	.word	0x40013800
 8002ca4:	40020000 	.word	0x40020000
 8002ca8:	40020400 	.word	0x40020400
 8002cac:	40020800 	.word	0x40020800
 8002cb0:	40020c00 	.word	0x40020c00
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40021400 	.word	0x40021400
 8002cbc:	40021800 	.word	0x40021800
 8002cc0:	40021c00 	.word	0x40021c00
 8002cc4:	40013c00 	.word	0x40013c00

08002cc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e12b      	b.n	8002f32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe fe54 	bl	800199c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2224      	movs	r2, #36	; 0x24
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d2c:	f001 f950 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8002d30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4a81      	ldr	r2, [pc, #516]	; (8002f3c <HAL_I2C_Init+0x274>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d807      	bhi.n	8002d4c <HAL_I2C_Init+0x84>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4a80      	ldr	r2, [pc, #512]	; (8002f40 <HAL_I2C_Init+0x278>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	bf94      	ite	ls
 8002d44:	2301      	movls	r3, #1
 8002d46:	2300      	movhi	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	e006      	b.n	8002d5a <HAL_I2C_Init+0x92>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a7d      	ldr	r2, [pc, #500]	; (8002f44 <HAL_I2C_Init+0x27c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	bf94      	ite	ls
 8002d54:	2301      	movls	r3, #1
 8002d56:	2300      	movhi	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e0e7      	b.n	8002f32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4a78      	ldr	r2, [pc, #480]	; (8002f48 <HAL_I2C_Init+0x280>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	0c9b      	lsrs	r3, r3, #18
 8002d6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6a1b      	ldr	r3, [r3, #32]
 8002d88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4a6a      	ldr	r2, [pc, #424]	; (8002f3c <HAL_I2C_Init+0x274>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d802      	bhi.n	8002d9c <HAL_I2C_Init+0xd4>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	e009      	b.n	8002db0 <HAL_I2C_Init+0xe8>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	4a69      	ldr	r2, [pc, #420]	; (8002f4c <HAL_I2C_Init+0x284>)
 8002da8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dac:	099b      	lsrs	r3, r3, #6
 8002dae:	3301      	adds	r3, #1
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6812      	ldr	r2, [r2, #0]
 8002db4:	430b      	orrs	r3, r1
 8002db6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002dc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	495c      	ldr	r1, [pc, #368]	; (8002f3c <HAL_I2C_Init+0x274>)
 8002dcc:	428b      	cmp	r3, r1
 8002dce:	d819      	bhi.n	8002e04 <HAL_I2C_Init+0x13c>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1e59      	subs	r1, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dde:	1c59      	adds	r1, r3, #1
 8002de0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002de4:	400b      	ands	r3, r1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_I2C_Init+0x138>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1e59      	subs	r1, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002df8:	3301      	adds	r3, #1
 8002dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dfe:	e051      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e00:	2304      	movs	r3, #4
 8002e02:	e04f      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d111      	bne.n	8002e30 <HAL_I2C_Init+0x168>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1e58      	subs	r0, r3, #1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	440b      	add	r3, r1
 8002e1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e012      	b.n	8002e56 <HAL_I2C_Init+0x18e>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	1e58      	subs	r0, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6859      	ldr	r1, [r3, #4]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	0099      	lsls	r1, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e46:	3301      	adds	r3, #1
 8002e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf0c      	ite	eq
 8002e50:	2301      	moveq	r3, #1
 8002e52:	2300      	movne	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Init+0x196>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e022      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10e      	bne.n	8002e84 <HAL_I2C_Init+0x1bc>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	1e58      	subs	r0, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	440b      	add	r3, r1
 8002e74:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e82:	e00f      	b.n	8002ea4 <HAL_I2C_Init+0x1dc>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	1e58      	subs	r0, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	0099      	lsls	r1, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	6809      	ldr	r1, [r1, #0]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	69da      	ldr	r2, [r3, #28]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ed2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6911      	ldr	r1, [r2, #16]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	68d2      	ldr	r2, [r2, #12]
 8002ede:	4311      	orrs	r1, r2
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	430b      	orrs	r3, r1
 8002ee6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	000186a0 	.word	0x000186a0
 8002f40:	001e847f 	.word	0x001e847f
 8002f44:	003d08ff 	.word	0x003d08ff
 8002f48:	431bde83 	.word	0x431bde83
 8002f4c:	10624dd3 	.word	0x10624dd3

08002f50 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08c      	sub	sp, #48	; 0x30
 8002f54:	af02      	add	r7, sp, #8
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	817b      	strh	r3, [r7, #10]
 8002f60:	4613      	mov	r3, r2
 8002f62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f64:	f7ff f8aa 	bl	80020bc <HAL_GetTick>
 8002f68:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	f040 820b 	bne.w	800338e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	2319      	movs	r3, #25
 8002f7e:	2201      	movs	r2, #1
 8002f80:	497c      	ldr	r1, [pc, #496]	; (8003174 <HAL_I2C_Master_Receive+0x224>)
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fad8 	bl	8003538 <I2C_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e1fe      	b.n	8003390 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d101      	bne.n	8002fa0 <HAL_I2C_Master_Receive+0x50>
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	e1f7      	b.n	8003390 <HAL_I2C_Master_Receive+0x440>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d007      	beq.n	8002fc6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0201 	orr.w	r2, r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2222      	movs	r2, #34	; 0x22
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	893a      	ldrh	r2, [r7, #8]
 8002ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4a5c      	ldr	r2, [pc, #368]	; (8003178 <HAL_I2C_Master_Receive+0x228>)
 8003006:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003008:	8979      	ldrh	r1, [r7, #10]
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f9c4 	bl	800339c <I2C_MasterRequestRead>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e1b8      	b.n	8003390 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003022:	2b00      	cmp	r3, #0
 8003024:	d113      	bne.n	800304e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003026:	2300      	movs	r3, #0
 8003028:	623b      	str	r3, [r7, #32]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	623b      	str	r3, [r7, #32]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	623b      	str	r3, [r7, #32]
 800303a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	e18c      	b.n	8003368 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003052:	2b01      	cmp	r3, #1
 8003054:	d11b      	bne.n	800308e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003064:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	61fb      	str	r3, [r7, #28]
 800307a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	e16c      	b.n	8003368 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003092:	2b02      	cmp	r3, #2
 8003094:	d11b      	bne.n	80030ce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b6:	2300      	movs	r3, #0
 80030b8:	61bb      	str	r3, [r7, #24]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	e14c      	b.n	8003368 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030f4:	e138      	b.n	8003368 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	f200 80f1 	bhi.w	80032e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003104:	2b01      	cmp	r3, #1
 8003106:	d123      	bne.n	8003150 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 fae9 	bl	80036e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e139      	b.n	8003390 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800314e:	e10b      	b.n	8003368 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003154:	2b02      	cmp	r3, #2
 8003156:	d14e      	bne.n	80031f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	2200      	movs	r2, #0
 8003160:	4906      	ldr	r1, [pc, #24]	; (800317c <HAL_I2C_Master_Receive+0x22c>)
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f9e8 	bl	8003538 <I2C_WaitOnFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d008      	beq.n	8003180 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e10e      	b.n	8003390 <HAL_I2C_Master_Receive+0x440>
 8003172:	bf00      	nop
 8003174:	00100002 	.word	0x00100002
 8003178:	ffff0000 	.word	0xffff0000
 800317c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	b2d2      	uxtb	r2, r2
 800319c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	691a      	ldr	r2, [r3, #16]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031f4:	e0b8      	b.n	8003368 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fc:	2200      	movs	r2, #0
 80031fe:	4966      	ldr	r1, [pc, #408]	; (8003398 <HAL_I2C_Master_Receive+0x448>)
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f999 	bl	8003538 <I2C_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0bf      	b.n	8003390 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800321e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	1c5a      	adds	r2, r3, #1
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003248:	b29b      	uxth	r3, r3
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003258:	2200      	movs	r2, #0
 800325a:	494f      	ldr	r1, [pc, #316]	; (8003398 <HAL_I2C_Master_Receive+0x448>)
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f96b 	bl	8003538 <I2C_WaitOnFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e091      	b.n	8003390 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003298:	3b01      	subs	r3, #1
 800329a:	b29a      	uxth	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	691a      	ldr	r2, [r3, #16]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ca:	3b01      	subs	r3, #1
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	3b01      	subs	r3, #1
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032e0:	e042      	b.n	8003368 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f9fc 	bl	80036e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e04c      	b.n	8003390 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	b2d2      	uxtb	r2, r2
 8003302:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	1c5a      	adds	r2, r3, #1
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331e:	b29b      	uxth	r3, r3
 8003320:	3b01      	subs	r3, #1
 8003322:	b29a      	uxth	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b04      	cmp	r3, #4
 8003334:	d118      	bne.n	8003368 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	691a      	ldr	r2, [r3, #16]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	b2d2      	uxtb	r2, r2
 8003342:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336c:	2b00      	cmp	r3, #0
 800336e:	f47f aec2 	bne.w	80030f6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	e000      	b.n	8003390 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800338e:	2302      	movs	r3, #2
  }
}
 8003390:	4618      	mov	r0, r3
 8003392:	3728      	adds	r7, #40	; 0x28
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	00010004 	.word	0x00010004

0800339c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	460b      	mov	r3, r1
 80033aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d006      	beq.n	80033d6 <I2C_MasterRequestRead+0x3a>
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d003      	beq.n	80033d6 <I2C_MasterRequestRead+0x3a>
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033d4:	d108      	bne.n	80033e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	e00b      	b.n	8003400 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	2b11      	cmp	r3, #17
 80033ee:	d107      	bne.n	8003400 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 f893 	bl	8003538 <I2C_WaitOnFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00d      	beq.n	8003434 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003426:	d103      	bne.n	8003430 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800342e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e079      	b.n	8003528 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800343c:	d108      	bne.n	8003450 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800343e:	897b      	ldrh	r3, [r7, #10]
 8003440:	b2db      	uxtb	r3, r3
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	b2da      	uxtb	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	611a      	str	r2, [r3, #16]
 800344e:	e05f      	b.n	8003510 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003450:	897b      	ldrh	r3, [r7, #10]
 8003452:	11db      	asrs	r3, r3, #7
 8003454:	b2db      	uxtb	r3, r3
 8003456:	f003 0306 	and.w	r3, r3, #6
 800345a:	b2db      	uxtb	r3, r3
 800345c:	f063 030f 	orn	r3, r3, #15
 8003460:	b2da      	uxtb	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4930      	ldr	r1, [pc, #192]	; (8003530 <I2C_MasterRequestRead+0x194>)
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f8b9 	bl	80035e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e054      	b.n	8003528 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800347e:	897b      	ldrh	r3, [r7, #10]
 8003480:	b2da      	uxtb	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	4929      	ldr	r1, [pc, #164]	; (8003534 <I2C_MasterRequestRead+0x198>)
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f8a9 	bl	80035e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e044      	b.n	8003528 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800349e:	2300      	movs	r3, #0
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f831 	bl	8003538 <I2C_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00d      	beq.n	80034f8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ea:	d103      	bne.n	80034f4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034f2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e017      	b.n	8003528 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80034f8:	897b      	ldrh	r3, [r7, #10]
 80034fa:	11db      	asrs	r3, r3, #7
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	f003 0306 	and.w	r3, r3, #6
 8003502:	b2db      	uxtb	r3, r3
 8003504:	f063 030e 	orn	r3, r3, #14
 8003508:	b2da      	uxtb	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	4907      	ldr	r1, [pc, #28]	; (8003534 <I2C_MasterRequestRead+0x198>)
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f865 	bl	80035e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	00010008 	.word	0x00010008
 8003534:	00010002 	.word	0x00010002

08003538 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003548:	e025      	b.n	8003596 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003550:	d021      	beq.n	8003596 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003552:	f7fe fdb3 	bl	80020bc <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d302      	bcc.n	8003568 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d116      	bne.n	8003596 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f043 0220 	orr.w	r2, r3, #32
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e023      	b.n	80035de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d10d      	bne.n	80035bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	43da      	mvns	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4013      	ands	r3, r2
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	bf0c      	ite	eq
 80035b2:	2301      	moveq	r3, #1
 80035b4:	2300      	movne	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	e00c      	b.n	80035d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	43da      	mvns	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	4013      	ands	r3, r2
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	bf0c      	ite	eq
 80035ce:	2301      	moveq	r3, #1
 80035d0:	2300      	movne	r3, #0
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	461a      	mov	r2, r3
 80035d6:	79fb      	ldrb	r3, [r7, #7]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d0b6      	beq.n	800354a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035f4:	e051      	b.n	800369a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003604:	d123      	bne.n	800364e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003614:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800361e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f043 0204 	orr.w	r2, r3, #4
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e046      	b.n	80036dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d021      	beq.n	800369a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003656:	f7fe fd31 	bl	80020bc <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d116      	bne.n	800369a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f043 0220 	orr.w	r2, r3, #32
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e020      	b.n	80036dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d10c      	bne.n	80036be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	43da      	mvns	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4013      	ands	r3, r2
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	bf14      	ite	ne
 80036b6:	2301      	movne	r3, #1
 80036b8:	2300      	moveq	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	e00b      	b.n	80036d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	43da      	mvns	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4013      	ands	r3, r2
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf14      	ite	ne
 80036d0:	2301      	movne	r3, #1
 80036d2:	2300      	moveq	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d18d      	bne.n	80035f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036f0:	e042      	b.n	8003778 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	2b10      	cmp	r3, #16
 80036fe:	d119      	bne.n	8003734 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f06f 0210 	mvn.w	r2, #16
 8003708:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e029      	b.n	8003788 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003734:	f7fe fcc2 	bl	80020bc <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	429a      	cmp	r2, r3
 8003742:	d302      	bcc.n	800374a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d116      	bne.n	8003778 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	f043 0220 	orr.w	r2, r3, #32
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e007      	b.n	8003788 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003782:	2b40      	cmp	r3, #64	; 0x40
 8003784:	d1b5      	bne.n	80036f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e264      	b.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d075      	beq.n	800389a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ae:	4ba3      	ldr	r3, [pc, #652]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d00c      	beq.n	80037d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ba:	4ba0      	ldr	r3, [pc, #640]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d112      	bne.n	80037ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037c6:	4b9d      	ldr	r3, [pc, #628]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037d2:	d10b      	bne.n	80037ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d4:	4b99      	ldr	r3, [pc, #612]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d05b      	beq.n	8003898 <HAL_RCC_OscConfig+0x108>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d157      	bne.n	8003898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e23f      	b.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f4:	d106      	bne.n	8003804 <HAL_RCC_OscConfig+0x74>
 80037f6:	4b91      	ldr	r3, [pc, #580]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a90      	ldr	r2, [pc, #576]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 80037fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003800:	6013      	str	r3, [r2, #0]
 8003802:	e01d      	b.n	8003840 <HAL_RCC_OscConfig+0xb0>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800380c:	d10c      	bne.n	8003828 <HAL_RCC_OscConfig+0x98>
 800380e:	4b8b      	ldr	r3, [pc, #556]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a8a      	ldr	r2, [pc, #552]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 8003814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	4b88      	ldr	r3, [pc, #544]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a87      	ldr	r2, [pc, #540]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 8003820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	e00b      	b.n	8003840 <HAL_RCC_OscConfig+0xb0>
 8003828:	4b84      	ldr	r3, [pc, #528]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a83      	ldr	r2, [pc, #524]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 800382e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	4b81      	ldr	r3, [pc, #516]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a80      	ldr	r2, [pc, #512]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 800383a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800383e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d013      	beq.n	8003870 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fe fc38 	bl	80020bc <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003850:	f7fe fc34 	bl	80020bc <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b64      	cmp	r3, #100	; 0x64
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e204      	b.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003862:	4b76      	ldr	r3, [pc, #472]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0xc0>
 800386e:	e014      	b.n	800389a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fe fc24 	bl	80020bc <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003878:	f7fe fc20 	bl	80020bc <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	; 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e1f0      	b.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388a:	4b6c      	ldr	r3, [pc, #432]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0xe8>
 8003896:	e000      	b.n	800389a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d063      	beq.n	800396e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038a6:	4b65      	ldr	r3, [pc, #404]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 030c 	and.w	r3, r3, #12
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038b2:	4b62      	ldr	r3, [pc, #392]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d11c      	bne.n	80038f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038be:	4b5f      	ldr	r3, [pc, #380]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d116      	bne.n	80038f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ca:	4b5c      	ldr	r3, [pc, #368]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d005      	beq.n	80038e2 <HAL_RCC_OscConfig+0x152>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d001      	beq.n	80038e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e1c4      	b.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e2:	4b56      	ldr	r3, [pc, #344]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4952      	ldr	r1, [pc, #328]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f6:	e03a      	b.n	800396e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d020      	beq.n	8003942 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003900:	4b4f      	ldr	r3, [pc, #316]	; (8003a40 <HAL_RCC_OscConfig+0x2b0>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003906:	f7fe fbd9 	bl	80020bc <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800390e:	f7fe fbd5 	bl	80020bc <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e1a5      	b.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003920:	4b46      	ldr	r3, [pc, #280]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800392c:	4b43      	ldr	r3, [pc, #268]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	4940      	ldr	r1, [pc, #256]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 800393c:	4313      	orrs	r3, r2
 800393e:	600b      	str	r3, [r1, #0]
 8003940:	e015      	b.n	800396e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003942:	4b3f      	ldr	r3, [pc, #252]	; (8003a40 <HAL_RCC_OscConfig+0x2b0>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003948:	f7fe fbb8 	bl	80020bc <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003950:	f7fe fbb4 	bl	80020bc <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e184      	b.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003962:	4b36      	ldr	r3, [pc, #216]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1f0      	bne.n	8003950 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d030      	beq.n	80039dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d016      	beq.n	80039b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003982:	4b30      	ldr	r3, [pc, #192]	; (8003a44 <HAL_RCC_OscConfig+0x2b4>)
 8003984:	2201      	movs	r2, #1
 8003986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003988:	f7fe fb98 	bl	80020bc <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003990:	f7fe fb94 	bl	80020bc <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e164      	b.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a2:	4b26      	ldr	r3, [pc, #152]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 80039a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0f0      	beq.n	8003990 <HAL_RCC_OscConfig+0x200>
 80039ae:	e015      	b.n	80039dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b0:	4b24      	ldr	r3, [pc, #144]	; (8003a44 <HAL_RCC_OscConfig+0x2b4>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b6:	f7fe fb81 	bl	80020bc <HAL_GetTick>
 80039ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039bc:	e008      	b.n	80039d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039be:	f7fe fb7d 	bl	80020bc <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	d901      	bls.n	80039d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e14d      	b.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d0:	4b1a      	ldr	r3, [pc, #104]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 80039d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1f0      	bne.n	80039be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80a0 	beq.w	8003b2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ea:	2300      	movs	r3, #0
 80039ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ee:	4b13      	ldr	r3, [pc, #76]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10f      	bne.n	8003a1a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	4b0f      	ldr	r3, [pc, #60]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	4a0e      	ldr	r2, [pc, #56]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 8003a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a08:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0a:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a16:	2301      	movs	r3, #1
 8003a18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1a:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <HAL_RCC_OscConfig+0x2b8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d121      	bne.n	8003a6a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a26:	4b08      	ldr	r3, [pc, #32]	; (8003a48 <HAL_RCC_OscConfig+0x2b8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a07      	ldr	r2, [pc, #28]	; (8003a48 <HAL_RCC_OscConfig+0x2b8>)
 8003a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a32:	f7fe fb43 	bl	80020bc <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a38:	e011      	b.n	8003a5e <HAL_RCC_OscConfig+0x2ce>
 8003a3a:	bf00      	nop
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	42470000 	.word	0x42470000
 8003a44:	42470e80 	.word	0x42470e80
 8003a48:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4c:	f7fe fb36 	bl	80020bc <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e106      	b.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5e:	4b85      	ldr	r3, [pc, #532]	; (8003c74 <HAL_RCC_OscConfig+0x4e4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0f0      	beq.n	8003a4c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d106      	bne.n	8003a80 <HAL_RCC_OscConfig+0x2f0>
 8003a72:	4b81      	ldr	r3, [pc, #516]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	4a80      	ldr	r2, [pc, #512]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003a78:	f043 0301 	orr.w	r3, r3, #1
 8003a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a7e:	e01c      	b.n	8003aba <HAL_RCC_OscConfig+0x32a>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b05      	cmp	r3, #5
 8003a86:	d10c      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x312>
 8003a88:	4b7b      	ldr	r3, [pc, #492]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	4a7a      	ldr	r2, [pc, #488]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003a8e:	f043 0304 	orr.w	r3, r3, #4
 8003a92:	6713      	str	r3, [r2, #112]	; 0x70
 8003a94:	4b78      	ldr	r3, [pc, #480]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	4a77      	ldr	r2, [pc, #476]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003a9a:	f043 0301 	orr.w	r3, r3, #1
 8003a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa0:	e00b      	b.n	8003aba <HAL_RCC_OscConfig+0x32a>
 8003aa2:	4b75      	ldr	r3, [pc, #468]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa6:	4a74      	ldr	r2, [pc, #464]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003aa8:	f023 0301 	bic.w	r3, r3, #1
 8003aac:	6713      	str	r3, [r2, #112]	; 0x70
 8003aae:	4b72      	ldr	r3, [pc, #456]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab2:	4a71      	ldr	r2, [pc, #452]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003ab4:	f023 0304 	bic.w	r3, r3, #4
 8003ab8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d015      	beq.n	8003aee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac2:	f7fe fafb 	bl	80020bc <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac8:	e00a      	b.n	8003ae0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aca:	f7fe faf7 	bl	80020bc <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e0c5      	b.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae0:	4b65      	ldr	r3, [pc, #404]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0ee      	beq.n	8003aca <HAL_RCC_OscConfig+0x33a>
 8003aec:	e014      	b.n	8003b18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aee:	f7fe fae5 	bl	80020bc <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af4:	e00a      	b.n	8003b0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003af6:	f7fe fae1 	bl	80020bc <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e0af      	b.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0c:	4b5a      	ldr	r3, [pc, #360]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1ee      	bne.n	8003af6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b18:	7dfb      	ldrb	r3, [r7, #23]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d105      	bne.n	8003b2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b1e:	4b56      	ldr	r3, [pc, #344]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	4a55      	ldr	r2, [pc, #340]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	f000 809b 	beq.w	8003c6a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b34:	4b50      	ldr	r3, [pc, #320]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 030c 	and.w	r3, r3, #12
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d05c      	beq.n	8003bfa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d141      	bne.n	8003bcc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b48:	4b4c      	ldr	r3, [pc, #304]	; (8003c7c <HAL_RCC_OscConfig+0x4ec>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4e:	f7fe fab5 	bl	80020bc <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b54:	e008      	b.n	8003b68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b56:	f7fe fab1 	bl	80020bc <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d901      	bls.n	8003b68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e081      	b.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b68:	4b43      	ldr	r3, [pc, #268]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f0      	bne.n	8003b56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	019b      	lsls	r3, r3, #6
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8a:	085b      	lsrs	r3, r3, #1
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	041b      	lsls	r3, r3, #16
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	061b      	lsls	r3, r3, #24
 8003b98:	4937      	ldr	r1, [pc, #220]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b9e:	4b37      	ldr	r3, [pc, #220]	; (8003c7c <HAL_RCC_OscConfig+0x4ec>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fe fa8a 	bl	80020bc <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fe fa86 	bl	80020bc <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e056      	b.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bbe:	4b2e      	ldr	r3, [pc, #184]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f0      	beq.n	8003bac <HAL_RCC_OscConfig+0x41c>
 8003bca:	e04e      	b.n	8003c6a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bcc:	4b2b      	ldr	r3, [pc, #172]	; (8003c7c <HAL_RCC_OscConfig+0x4ec>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd2:	f7fe fa73 	bl	80020bc <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bda:	f7fe fa6f 	bl	80020bc <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e03f      	b.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bec:	4b22      	ldr	r3, [pc, #136]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1f0      	bne.n	8003bda <HAL_RCC_OscConfig+0x44a>
 8003bf8:	e037      	b.n	8003c6a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e032      	b.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c06:	4b1c      	ldr	r3, [pc, #112]	; (8003c78 <HAL_RCC_OscConfig+0x4e8>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d028      	beq.n	8003c66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d121      	bne.n	8003c66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d11a      	bne.n	8003c66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c36:	4013      	ands	r3, r2
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c3c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d111      	bne.n	8003c66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	085b      	lsrs	r3, r3, #1
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d107      	bne.n	8003c66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d001      	beq.n	8003c6a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40007000 	.word	0x40007000
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	42470060 	.word	0x42470060

08003c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e0cc      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c94:	4b68      	ldr	r3, [pc, #416]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d90c      	bls.n	8003cbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	4b65      	ldr	r3, [pc, #404]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003caa:	4b63      	ldr	r3, [pc, #396]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0b8      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d020      	beq.n	8003d0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d005      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd4:	4b59      	ldr	r3, [pc, #356]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	4a58      	ldr	r2, [pc, #352]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003cec:	4b53      	ldr	r3, [pc, #332]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4a52      	ldr	r2, [pc, #328]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf8:	4b50      	ldr	r3, [pc, #320]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	494d      	ldr	r1, [pc, #308]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d044      	beq.n	8003da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d107      	bne.n	8003d2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1e:	4b47      	ldr	r3, [pc, #284]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d119      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e07f      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d003      	beq.n	8003d3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3e:	4b3f      	ldr	r3, [pc, #252]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d109      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e06f      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4e:	4b3b      	ldr	r3, [pc, #236]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e067      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d5e:	4b37      	ldr	r3, [pc, #220]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f023 0203 	bic.w	r2, r3, #3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4934      	ldr	r1, [pc, #208]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d70:	f7fe f9a4 	bl	80020bc <HAL_GetTick>
 8003d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d76:	e00a      	b.n	8003d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d78:	f7fe f9a0 	bl	80020bc <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e04f      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	4b2b      	ldr	r3, [pc, #172]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 020c 	and.w	r2, r3, #12
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d1eb      	bne.n	8003d78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003da0:	4b25      	ldr	r3, [pc, #148]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0307 	and.w	r3, r3, #7
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d20c      	bcs.n	8003dc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dae:	4b22      	ldr	r3, [pc, #136]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db6:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <HAL_RCC_ClockConfig+0x1b8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e032      	b.n	8003e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0304 	and.w	r3, r3, #4
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d008      	beq.n	8003de6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd4:	4b19      	ldr	r3, [pc, #100]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	4916      	ldr	r1, [pc, #88]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d009      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003df2:	4b12      	ldr	r3, [pc, #72]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	490e      	ldr	r1, [pc, #56]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e06:	f000 f821 	bl	8003e4c <HAL_RCC_GetSysClockFreq>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	490a      	ldr	r1, [pc, #40]	; (8003e40 <HAL_RCC_ClockConfig+0x1c0>)
 8003e18:	5ccb      	ldrb	r3, [r1, r3]
 8003e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1e:	4a09      	ldr	r2, [pc, #36]	; (8003e44 <HAL_RCC_ClockConfig+0x1c4>)
 8003e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e22:	4b09      	ldr	r3, [pc, #36]	; (8003e48 <HAL_RCC_ClockConfig+0x1c8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fd fea8 	bl	8001b7c <HAL_InitTick>

  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40023c00 	.word	0x40023c00
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	0800a1b8 	.word	0x0800a1b8
 8003e44:	20000050 	.word	0x20000050
 8003e48:	20000054 	.word	0x20000054

08003e4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e4c:	b5b0      	push	{r4, r5, r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e52:	2100      	movs	r1, #0
 8003e54:	6079      	str	r1, [r7, #4]
 8003e56:	2100      	movs	r1, #0
 8003e58:	60f9      	str	r1, [r7, #12]
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e5e:	2100      	movs	r1, #0
 8003e60:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e62:	4952      	ldr	r1, [pc, #328]	; (8003fac <HAL_RCC_GetSysClockFreq+0x160>)
 8003e64:	6889      	ldr	r1, [r1, #8]
 8003e66:	f001 010c 	and.w	r1, r1, #12
 8003e6a:	2908      	cmp	r1, #8
 8003e6c:	d00d      	beq.n	8003e8a <HAL_RCC_GetSysClockFreq+0x3e>
 8003e6e:	2908      	cmp	r1, #8
 8003e70:	f200 8094 	bhi.w	8003f9c <HAL_RCC_GetSysClockFreq+0x150>
 8003e74:	2900      	cmp	r1, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_RCC_GetSysClockFreq+0x32>
 8003e78:	2904      	cmp	r1, #4
 8003e7a:	d003      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x38>
 8003e7c:	e08e      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e7e:	4b4c      	ldr	r3, [pc, #304]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003e80:	60bb      	str	r3, [r7, #8]
       break;
 8003e82:	e08e      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e84:	4b4b      	ldr	r3, [pc, #300]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003e86:	60bb      	str	r3, [r7, #8]
      break;
 8003e88:	e08b      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e8a:	4948      	ldr	r1, [pc, #288]	; (8003fac <HAL_RCC_GetSysClockFreq+0x160>)
 8003e8c:	6849      	ldr	r1, [r1, #4]
 8003e8e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003e92:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e94:	4945      	ldr	r1, [pc, #276]	; (8003fac <HAL_RCC_GetSysClockFreq+0x160>)
 8003e96:	6849      	ldr	r1, [r1, #4]
 8003e98:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003e9c:	2900      	cmp	r1, #0
 8003e9e:	d024      	beq.n	8003eea <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea0:	4942      	ldr	r1, [pc, #264]	; (8003fac <HAL_RCC_GetSysClockFreq+0x160>)
 8003ea2:	6849      	ldr	r1, [r1, #4]
 8003ea4:	0989      	lsrs	r1, r1, #6
 8003ea6:	4608      	mov	r0, r1
 8003ea8:	f04f 0100 	mov.w	r1, #0
 8003eac:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003eb0:	f04f 0500 	mov.w	r5, #0
 8003eb4:	ea00 0204 	and.w	r2, r0, r4
 8003eb8:	ea01 0305 	and.w	r3, r1, r5
 8003ebc:	493d      	ldr	r1, [pc, #244]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ebe:	fb01 f003 	mul.w	r0, r1, r3
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	fb01 f102 	mul.w	r1, r1, r2
 8003ec8:	1844      	adds	r4, r0, r1
 8003eca:	493a      	ldr	r1, [pc, #232]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003ecc:	fba2 0101 	umull	r0, r1, r2, r1
 8003ed0:	1863      	adds	r3, r4, r1
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	f04f 0300 	mov.w	r3, #0
 8003edc:	f7fc f9e0 	bl	80002a0 <__aeabi_uldivmod>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	e04a      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eea:	4b30      	ldr	r3, [pc, #192]	; (8003fac <HAL_RCC_GetSysClockFreq+0x160>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	099b      	lsrs	r3, r3, #6
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	f04f 0300 	mov.w	r3, #0
 8003ef6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003efa:	f04f 0100 	mov.w	r1, #0
 8003efe:	ea02 0400 	and.w	r4, r2, r0
 8003f02:	ea03 0501 	and.w	r5, r3, r1
 8003f06:	4620      	mov	r0, r4
 8003f08:	4629      	mov	r1, r5
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	014b      	lsls	r3, r1, #5
 8003f14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f18:	0142      	lsls	r2, r0, #5
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	1b00      	subs	r0, r0, r4
 8003f20:	eb61 0105 	sbc.w	r1, r1, r5
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	018b      	lsls	r3, r1, #6
 8003f2e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f32:	0182      	lsls	r2, r0, #6
 8003f34:	1a12      	subs	r2, r2, r0
 8003f36:	eb63 0301 	sbc.w	r3, r3, r1
 8003f3a:	f04f 0000 	mov.w	r0, #0
 8003f3e:	f04f 0100 	mov.w	r1, #0
 8003f42:	00d9      	lsls	r1, r3, #3
 8003f44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f48:	00d0      	lsls	r0, r2, #3
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	1912      	adds	r2, r2, r4
 8003f50:	eb45 0303 	adc.w	r3, r5, r3
 8003f54:	f04f 0000 	mov.w	r0, #0
 8003f58:	f04f 0100 	mov.w	r1, #0
 8003f5c:	0299      	lsls	r1, r3, #10
 8003f5e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003f62:	0290      	lsls	r0, r2, #10
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4610      	mov	r0, r2
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	f7fc f994 	bl	80002a0 <__aeabi_uldivmod>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f80:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <HAL_RCC_GetSysClockFreq+0x160>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	0c1b      	lsrs	r3, r3, #16
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	60bb      	str	r3, [r7, #8]
      break;
 8003f9a:	e002      	b.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f9c:	4b04      	ldr	r3, [pc, #16]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003f9e:	60bb      	str	r3, [r7, #8]
      break;
 8003fa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bdb0      	pop	{r4, r5, r7, pc}
 8003fac:	40023800 	.word	0x40023800
 8003fb0:	00f42400 	.word	0x00f42400
 8003fb4:	017d7840 	.word	0x017d7840

08003fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fbc:	4b03      	ldr	r3, [pc, #12]	; (8003fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	20000050 	.word	0x20000050

08003fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fd4:	f7ff fff0 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	0a9b      	lsrs	r3, r3, #10
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	4903      	ldr	r1, [pc, #12]	; (8003ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fe6:	5ccb      	ldrb	r3, [r1, r3]
 8003fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40023800 	.word	0x40023800
 8003ff4:	0800a1c8 	.word	0x0800a1c8

08003ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ffc:	f7ff ffdc 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8004000:	4602      	mov	r2, r0
 8004002:	4b05      	ldr	r3, [pc, #20]	; (8004018 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	0b5b      	lsrs	r3, r3, #13
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	4903      	ldr	r1, [pc, #12]	; (800401c <HAL_RCC_GetPCLK2Freq+0x24>)
 800400e:	5ccb      	ldrb	r3, [r1, r3]
 8004010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004014:	4618      	mov	r0, r3
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40023800 	.word	0x40023800
 800401c:	0800a1c8 	.word	0x0800a1c8

08004020 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	220f      	movs	r2, #15
 800402e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004030:	4b12      	ldr	r3, [pc, #72]	; (800407c <HAL_RCC_GetClockConfig+0x5c>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 0203 	and.w	r2, r3, #3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800403c:	4b0f      	ldr	r3, [pc, #60]	; (800407c <HAL_RCC_GetClockConfig+0x5c>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004048:	4b0c      	ldr	r3, [pc, #48]	; (800407c <HAL_RCC_GetClockConfig+0x5c>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004054:	4b09      	ldr	r3, [pc, #36]	; (800407c <HAL_RCC_GetClockConfig+0x5c>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	08db      	lsrs	r3, r3, #3
 800405a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004062:	4b07      	ldr	r3, [pc, #28]	; (8004080 <HAL_RCC_GetClockConfig+0x60>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0207 	and.w	r2, r3, #7
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	601a      	str	r2, [r3, #0]
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800
 8004080:	40023c00 	.word	0x40023c00

08004084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e041      	b.n	800411a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d106      	bne.n	80040b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fd fcbe 	bl	8001a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2202      	movs	r2, #2
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3304      	adds	r3, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	4610      	mov	r0, r2
 80040c4:	f000 fa96 	bl	80045f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b01      	cmp	r3, #1
 8004136:	d001      	beq.n	800413c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e04e      	b.n	80041da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0201 	orr.w	r2, r2, #1
 8004152:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a23      	ldr	r2, [pc, #140]	; (80041e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d022      	beq.n	80041a4 <HAL_TIM_Base_Start_IT+0x80>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004166:	d01d      	beq.n	80041a4 <HAL_TIM_Base_Start_IT+0x80>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a1f      	ldr	r2, [pc, #124]	; (80041ec <HAL_TIM_Base_Start_IT+0xc8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d018      	beq.n	80041a4 <HAL_TIM_Base_Start_IT+0x80>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a1e      	ldr	r2, [pc, #120]	; (80041f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d013      	beq.n	80041a4 <HAL_TIM_Base_Start_IT+0x80>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a1c      	ldr	r2, [pc, #112]	; (80041f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00e      	beq.n	80041a4 <HAL_TIM_Base_Start_IT+0x80>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a1b      	ldr	r2, [pc, #108]	; (80041f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d009      	beq.n	80041a4 <HAL_TIM_Base_Start_IT+0x80>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a19      	ldr	r2, [pc, #100]	; (80041fc <HAL_TIM_Base_Start_IT+0xd8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d004      	beq.n	80041a4 <HAL_TIM_Base_Start_IT+0x80>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a18      	ldr	r2, [pc, #96]	; (8004200 <HAL_TIM_Base_Start_IT+0xdc>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d111      	bne.n	80041c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2b06      	cmp	r3, #6
 80041b4:	d010      	beq.n	80041d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f042 0201 	orr.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c6:	e007      	b.n	80041d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3714      	adds	r7, #20
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40010000 	.word	0x40010000
 80041ec:	40000400 	.word	0x40000400
 80041f0:	40000800 	.word	0x40000800
 80041f4:	40000c00 	.word	0x40000c00
 80041f8:	40010400 	.word	0x40010400
 80041fc:	40014000 	.word	0x40014000
 8004200:	40001800 	.word	0x40001800

08004204 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b02      	cmp	r3, #2
 8004218:	d122      	bne.n	8004260 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b02      	cmp	r3, #2
 8004226:	d11b      	bne.n	8004260 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f06f 0202 	mvn.w	r2, #2
 8004230:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d003      	beq.n	800424e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f9b5 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 800424c:	e005      	b.n	800425a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 f9a7 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f9b8 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f003 0304 	and.w	r3, r3, #4
 800426a:	2b04      	cmp	r3, #4
 800426c:	d122      	bne.n	80042b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b04      	cmp	r3, #4
 800427a:	d11b      	bne.n	80042b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0204 	mvn.w	r2, #4
 8004284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2202      	movs	r2, #2
 800428a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f98b 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 80042a0:	e005      	b.n	80042ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f97d 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f98e 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d122      	bne.n	8004308 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d11b      	bne.n	8004308 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f06f 0208 	mvn.w	r2, #8
 80042d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2204      	movs	r2, #4
 80042de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	f003 0303 	and.w	r3, r3, #3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f961 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 80042f4:	e005      	b.n	8004302 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f953 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f964 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0310 	and.w	r3, r3, #16
 8004312:	2b10      	cmp	r3, #16
 8004314:	d122      	bne.n	800435c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b10      	cmp	r3, #16
 8004322:	d11b      	bne.n	800435c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0210 	mvn.w	r2, #16
 800432c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2208      	movs	r2, #8
 8004332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f937 	bl	80045b6 <HAL_TIM_IC_CaptureCallback>
 8004348:	e005      	b.n	8004356 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f929 	bl	80045a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 f93a 	bl	80045ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b01      	cmp	r3, #1
 8004368:	d10e      	bne.n	8004388 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b01      	cmp	r3, #1
 8004376:	d107      	bne.n	8004388 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0201 	mvn.w	r2, #1
 8004380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fd f994 	bl	80016b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004392:	2b80      	cmp	r3, #128	; 0x80
 8004394:	d10e      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a0:	2b80      	cmp	r3, #128	; 0x80
 80043a2:	d107      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fae0 	bl	8004974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043be:	2b40      	cmp	r3, #64	; 0x40
 80043c0:	d10e      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043cc:	2b40      	cmp	r3, #64	; 0x40
 80043ce:	d107      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f8ff 	bl	80045de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	d10e      	bne.n	800440c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0320 	and.w	r3, r3, #32
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d107      	bne.n	800440c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0220 	mvn.w	r2, #32
 8004404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 faaa 	bl	8004960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800440c:	bf00      	nop
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_TIM_ConfigClockSource+0x1c>
 800442c:	2302      	movs	r3, #2
 800442e:	e0b4      	b.n	800459a <HAL_TIM_ConfigClockSource+0x186>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800444e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004468:	d03e      	beq.n	80044e8 <HAL_TIM_ConfigClockSource+0xd4>
 800446a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446e:	f200 8087 	bhi.w	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004476:	f000 8086 	beq.w	8004586 <HAL_TIM_ConfigClockSource+0x172>
 800447a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447e:	d87f      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004480:	2b70      	cmp	r3, #112	; 0x70
 8004482:	d01a      	beq.n	80044ba <HAL_TIM_ConfigClockSource+0xa6>
 8004484:	2b70      	cmp	r3, #112	; 0x70
 8004486:	d87b      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004488:	2b60      	cmp	r3, #96	; 0x60
 800448a:	d050      	beq.n	800452e <HAL_TIM_ConfigClockSource+0x11a>
 800448c:	2b60      	cmp	r3, #96	; 0x60
 800448e:	d877      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004490:	2b50      	cmp	r3, #80	; 0x50
 8004492:	d03c      	beq.n	800450e <HAL_TIM_ConfigClockSource+0xfa>
 8004494:	2b50      	cmp	r3, #80	; 0x50
 8004496:	d873      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 8004498:	2b40      	cmp	r3, #64	; 0x40
 800449a:	d058      	beq.n	800454e <HAL_TIM_ConfigClockSource+0x13a>
 800449c:	2b40      	cmp	r3, #64	; 0x40
 800449e:	d86f      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 80044a0:	2b30      	cmp	r3, #48	; 0x30
 80044a2:	d064      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15a>
 80044a4:	2b30      	cmp	r3, #48	; 0x30
 80044a6:	d86b      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d060      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15a>
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d867      	bhi.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d05c      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15a>
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d05a      	beq.n	800456e <HAL_TIM_ConfigClockSource+0x15a>
 80044b8:	e062      	b.n	8004580 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6899      	ldr	r1, [r3, #8]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f000 f9ad 	bl	8004828 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	609a      	str	r2, [r3, #8]
      break;
 80044e6:	e04f      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6818      	ldr	r0, [r3, #0]
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	6899      	ldr	r1, [r3, #8]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	f000 f996 	bl	8004828 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800450a:	609a      	str	r2, [r3, #8]
      break;
 800450c:	e03c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6859      	ldr	r1, [r3, #4]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	461a      	mov	r2, r3
 800451c:	f000 f90a 	bl	8004734 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2150      	movs	r1, #80	; 0x50
 8004526:	4618      	mov	r0, r3
 8004528:	f000 f963 	bl	80047f2 <TIM_ITRx_SetConfig>
      break;
 800452c:	e02c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6859      	ldr	r1, [r3, #4]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	461a      	mov	r2, r3
 800453c:	f000 f929 	bl	8004792 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2160      	movs	r1, #96	; 0x60
 8004546:	4618      	mov	r0, r3
 8004548:	f000 f953 	bl	80047f2 <TIM_ITRx_SetConfig>
      break;
 800454c:	e01c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6859      	ldr	r1, [r3, #4]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	461a      	mov	r2, r3
 800455c:	f000 f8ea 	bl	8004734 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2140      	movs	r1, #64	; 0x40
 8004566:	4618      	mov	r0, r3
 8004568:	f000 f943 	bl	80047f2 <TIM_ITRx_SetConfig>
      break;
 800456c:	e00c      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4619      	mov	r1, r3
 8004578:	4610      	mov	r0, r2
 800457a:	f000 f93a 	bl	80047f2 <TIM_ITRx_SetConfig>
      break;
 800457e:	e003      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	73fb      	strb	r3, [r7, #15]
      break;
 8004584:	e000      	b.n	8004588 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045b6:	b480      	push	{r7}
 80045b8:	b083      	sub	sp, #12
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045de:	b480      	push	{r7}
 80045e0:	b083      	sub	sp, #12
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045e6:	bf00      	nop
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a40      	ldr	r2, [pc, #256]	; (8004708 <TIM_Base_SetConfig+0x114>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d013      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004612:	d00f      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a3d      	ldr	r2, [pc, #244]	; (800470c <TIM_Base_SetConfig+0x118>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00b      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a3c      	ldr	r2, [pc, #240]	; (8004710 <TIM_Base_SetConfig+0x11c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d007      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a3b      	ldr	r2, [pc, #236]	; (8004714 <TIM_Base_SetConfig+0x120>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_Base_SetConfig+0x40>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a3a      	ldr	r2, [pc, #232]	; (8004718 <TIM_Base_SetConfig+0x124>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d108      	bne.n	8004646 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a2f      	ldr	r2, [pc, #188]	; (8004708 <TIM_Base_SetConfig+0x114>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d02b      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004654:	d027      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a2c      	ldr	r2, [pc, #176]	; (800470c <TIM_Base_SetConfig+0x118>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d023      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a2b      	ldr	r2, [pc, #172]	; (8004710 <TIM_Base_SetConfig+0x11c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d01f      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a2a      	ldr	r2, [pc, #168]	; (8004714 <TIM_Base_SetConfig+0x120>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d01b      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a29      	ldr	r2, [pc, #164]	; (8004718 <TIM_Base_SetConfig+0x124>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d017      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a28      	ldr	r2, [pc, #160]	; (800471c <TIM_Base_SetConfig+0x128>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a27      	ldr	r2, [pc, #156]	; (8004720 <TIM_Base_SetConfig+0x12c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d00f      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a26      	ldr	r2, [pc, #152]	; (8004724 <TIM_Base_SetConfig+0x130>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00b      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a25      	ldr	r2, [pc, #148]	; (8004728 <TIM_Base_SetConfig+0x134>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a24      	ldr	r2, [pc, #144]	; (800472c <TIM_Base_SetConfig+0x138>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d003      	beq.n	80046a6 <TIM_Base_SetConfig+0xb2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a23      	ldr	r2, [pc, #140]	; (8004730 <TIM_Base_SetConfig+0x13c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d108      	bne.n	80046b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a0a      	ldr	r2, [pc, #40]	; (8004708 <TIM_Base_SetConfig+0x114>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d003      	beq.n	80046ec <TIM_Base_SetConfig+0xf8>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a0c      	ldr	r2, [pc, #48]	; (8004718 <TIM_Base_SetConfig+0x124>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d103      	bne.n	80046f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	615a      	str	r2, [r3, #20]
}
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	40010000 	.word	0x40010000
 800470c:	40000400 	.word	0x40000400
 8004710:	40000800 	.word	0x40000800
 8004714:	40000c00 	.word	0x40000c00
 8004718:	40010400 	.word	0x40010400
 800471c:	40014000 	.word	0x40014000
 8004720:	40014400 	.word	0x40014400
 8004724:	40014800 	.word	0x40014800
 8004728:	40001800 	.word	0x40001800
 800472c:	40001c00 	.word	0x40001c00
 8004730:	40002000 	.word	0x40002000

08004734 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f023 0201 	bic.w	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800475e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f023 030a 	bic.w	r3, r3, #10
 8004770:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	621a      	str	r2, [r3, #32]
}
 8004786:	bf00      	nop
 8004788:	371c      	adds	r7, #28
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004792:	b480      	push	{r7}
 8004794:	b087      	sub	sp, #28
 8004796:	af00      	add	r7, sp, #0
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6a1b      	ldr	r3, [r3, #32]
 80047a2:	f023 0210 	bic.w	r2, r3, #16
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	031b      	lsls	r3, r3, #12
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	621a      	str	r2, [r3, #32]
}
 80047e6:	bf00      	nop
 80047e8:	371c      	adds	r7, #28
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	f043 0307 	orr.w	r3, r3, #7
 8004814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	609a      	str	r2, [r3, #8]
}
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004828:	b480      	push	{r7}
 800482a:	b087      	sub	sp, #28
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004842:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	021a      	lsls	r2, r3, #8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	431a      	orrs	r2, r3
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	4313      	orrs	r3, r2
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	609a      	str	r2, [r3, #8]
}
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800487c:	2302      	movs	r3, #2
 800487e:	e05a      	b.n	8004936 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a21      	ldr	r2, [pc, #132]	; (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d022      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048cc:	d01d      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1d      	ldr	r2, [pc, #116]	; (8004948 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d018      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1b      	ldr	r2, [pc, #108]	; (800494c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d013      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a1a      	ldr	r2, [pc, #104]	; (8004950 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00e      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a18      	ldr	r2, [pc, #96]	; (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d009      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a17      	ldr	r2, [pc, #92]	; (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d004      	beq.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a15      	ldr	r2, [pc, #84]	; (800495c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d10c      	bne.n	8004924 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	4313      	orrs	r3, r2
 800491a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	40010000 	.word	0x40010000
 8004948:	40000400 	.word	0x40000400
 800494c:	40000800 	.word	0x40000800
 8004950:	40000c00 	.word	0x40000c00
 8004954:	40010400 	.word	0x40010400
 8004958:	40014000 	.word	0x40014000
 800495c:	40001800 	.word	0x40001800

08004960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e03f      	b.n	8004a1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fd f862 	bl	8001a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2224      	movs	r2, #36	; 0x24
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fd15 	bl	80053fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695a      	ldr	r2, [r3, #20]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b085      	sub	sp, #20
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	60f8      	str	r0, [r7, #12]
 8004a2a:	60b9      	str	r1, [r7, #8]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b20      	cmp	r3, #32
 8004a3a:	d130      	bne.n	8004a9e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <HAL_UART_Transmit_IT+0x26>
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e029      	b.n	8004aa0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_UART_Transmit_IT+0x38>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e022      	b.n	8004aa0 <HAL_UART_Transmit_IT+0x7e>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	88fa      	ldrh	r2, [r7, #6]
 8004a6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	88fa      	ldrh	r2, [r7, #6]
 8004a72:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2221      	movs	r2, #33	; 0x21
 8004a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a98:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e000      	b.n	8004aa0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004a9e:	2302      	movs	r3, #2
  }
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3714      	adds	r7, #20
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b20      	cmp	r3, #32
 8004ac4:	d11d      	bne.n	8004b02 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d002      	beq.n	8004ad2 <HAL_UART_Receive_IT+0x26>
 8004acc:	88fb      	ldrh	r3, [r7, #6]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e016      	b.n	8004b04 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_UART_Receive_IT+0x38>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e00f      	b.n	8004b04 <HAL_UART_Receive_IT+0x58>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	461a      	mov	r2, r3
 8004af6:	68b9      	ldr	r1, [r7, #8]
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 faab 	bl	8005054 <UART_Start_Receive_IT>
 8004afe:	4603      	mov	r3, r0
 8004b00:	e000      	b.n	8004b04 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004b02:	2302      	movs	r3, #2
  }
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3710      	adds	r7, #16
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b0ba      	sub	sp, #232	; 0xe8
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	695b      	ldr	r3, [r3, #20]
 8004b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10f      	bne.n	8004b72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b56:	f003 0320 	and.w	r3, r3, #32
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d009      	beq.n	8004b72 <HAL_UART_IRQHandler+0x66>
 8004b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fb8b 	bl	8005286 <UART_Receive_IT>
      return;
 8004b70:	e256      	b.n	8005020 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f000 80de 	beq.w	8004d38 <HAL_UART_IRQHandler+0x22c>
 8004b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d106      	bne.n	8004b96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b8c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80d1 	beq.w	8004d38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9a:	f003 0301 	and.w	r3, r3, #1
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00b      	beq.n	8004bba <HAL_UART_IRQHandler+0xae>
 8004ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d005      	beq.n	8004bba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	f043 0201 	orr.w	r2, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00b      	beq.n	8004bde <HAL_UART_IRQHandler+0xd2>
 8004bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bca:	f003 0301 	and.w	r3, r3, #1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d005      	beq.n	8004bde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd6:	f043 0202 	orr.w	r2, r3, #2
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <HAL_UART_IRQHandler+0xf6>
 8004bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d005      	beq.n	8004c02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	f043 0204 	orr.w	r2, r3, #4
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d011      	beq.n	8004c32 <HAL_UART_IRQHandler+0x126>
 8004c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d105      	bne.n	8004c26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2a:	f043 0208 	orr.w	r2, r3, #8
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 81ed 	beq.w	8005016 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c40:	f003 0320 	and.w	r3, r3, #32
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d008      	beq.n	8004c5a <HAL_UART_IRQHandler+0x14e>
 8004c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c4c:	f003 0320 	and.w	r3, r3, #32
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fb16 	bl	8005286 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c64:	2b40      	cmp	r3, #64	; 0x40
 8004c66:	bf0c      	ite	eq
 8004c68:	2301      	moveq	r3, #1
 8004c6a:	2300      	movne	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <HAL_UART_IRQHandler+0x17a>
 8004c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d04f      	beq.n	8004d26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 fa1e 	bl	80050c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c96:	2b40      	cmp	r3, #64	; 0x40
 8004c98:	d141      	bne.n	8004d1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3314      	adds	r3, #20
 8004ca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3314      	adds	r3, #20
 8004cc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004cc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004cca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004cd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1d9      	bne.n	8004c9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d013      	beq.n	8004d16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	4a7d      	ldr	r2, [pc, #500]	; (8004ee8 <HAL_UART_IRQHandler+0x3dc>)
 8004cf4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fd fbea 	bl	80024d4 <HAL_DMA_Abort_IT>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d016      	beq.n	8004d34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d10:	4610      	mov	r0, r2
 8004d12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d14:	e00e      	b.n	8004d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f986 	bl	8005028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d1c:	e00a      	b.n	8004d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f982 	bl	8005028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d24:	e006      	b.n	8004d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f97e 	bl	8005028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d32:	e170      	b.n	8005016 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d34:	bf00      	nop
    return;
 8004d36:	e16e      	b.n	8005016 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	f040 814a 	bne.w	8004fd6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	f000 8143 	beq.w	8004fd6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d54:	f003 0310 	and.w	r3, r3, #16
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 813c 	beq.w	8004fd6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60bb      	str	r3, [r7, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60bb      	str	r3, [r7, #8]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b40      	cmp	r3, #64	; 0x40
 8004d80:	f040 80b4 	bne.w	8004eec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 8140 	beq.w	800501a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004da2:	429a      	cmp	r2, r3
 8004da4:	f080 8139 	bcs.w	800501a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004dae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dba:	f000 8088 	beq.w	8004ece <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	330c      	adds	r3, #12
 8004dc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	330c      	adds	r3, #12
 8004de6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004dea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004df6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004dfa:	e841 2300 	strex	r3, r2, [r1]
 8004dfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004e02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1d9      	bne.n	8004dbe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3314      	adds	r3, #20
 8004e10:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e14:	e853 3f00 	ldrex	r3, [r3]
 8004e18:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	3314      	adds	r3, #20
 8004e2a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e32:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e34:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e36:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e1      	bne.n	8004e0a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3314      	adds	r3, #20
 8004e4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3314      	adds	r3, #20
 8004e66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e6a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e6c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e70:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e72:	e841 2300 	strex	r3, r2, [r1]
 8004e76:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1e3      	bne.n	8004e46 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	330c      	adds	r3, #12
 8004e92:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9e:	f023 0310 	bic.w	r3, r3, #16
 8004ea2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	330c      	adds	r3, #12
 8004eac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004eb0:	65ba      	str	r2, [r7, #88]	; 0x58
 8004eb2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004eb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004eb8:	e841 2300 	strex	r3, r2, [r1]
 8004ebc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1e3      	bne.n	8004e8c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fd fa93 	bl	80023f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	4619      	mov	r1, r3
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f000 f8ac 	bl	800503c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ee4:	e099      	b.n	800501a <HAL_UART_IRQHandler+0x50e>
 8004ee6:	bf00      	nop
 8004ee8:	0800518f 	.word	0x0800518f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 808b 	beq.w	800501e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 8086 	beq.w	800501e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	330c      	adds	r3, #12
 8004f18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1c:	e853 3f00 	ldrex	r3, [r3]
 8004f20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	330c      	adds	r3, #12
 8004f32:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f36:	647a      	str	r2, [r7, #68]	; 0x44
 8004f38:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f3e:	e841 2300 	strex	r3, r2, [r1]
 8004f42:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1e3      	bne.n	8004f12 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3314      	adds	r3, #20
 8004f50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	623b      	str	r3, [r7, #32]
   return(result);
 8004f5a:	6a3b      	ldr	r3, [r7, #32]
 8004f5c:	f023 0301 	bic.w	r3, r3, #1
 8004f60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3314      	adds	r3, #20
 8004f6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f6e:	633a      	str	r2, [r7, #48]	; 0x30
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f76:	e841 2300 	strex	r3, r2, [r1]
 8004f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1e3      	bne.n	8004f4a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	330c      	adds	r3, #12
 8004f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0310 	bic.w	r3, r3, #16
 8004fa6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	330c      	adds	r3, #12
 8004fb0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004fb4:	61fa      	str	r2, [r7, #28]
 8004fb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb8:	69b9      	ldr	r1, [r7, #24]
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	e841 2300 	strex	r3, r2, [r1]
 8004fc0:	617b      	str	r3, [r7, #20]
   return(result);
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e3      	bne.n	8004f90 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fcc:	4619      	mov	r1, r3
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f834 	bl	800503c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fd4:	e023      	b.n	800501e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d009      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x4ea>
 8004fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f8e1 	bl	80051b6 <UART_Transmit_IT>
    return;
 8004ff4:	e014      	b.n	8005020 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00e      	beq.n	8005020 <HAL_UART_IRQHandler+0x514>
 8005002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d008      	beq.n	8005020 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f921 	bl	8005256 <UART_EndTransmit_IT>
    return;
 8005014:	e004      	b.n	8005020 <HAL_UART_IRQHandler+0x514>
    return;
 8005016:	bf00      	nop
 8005018:	e002      	b.n	8005020 <HAL_UART_IRQHandler+0x514>
      return;
 800501a:	bf00      	nop
 800501c:	e000      	b.n	8005020 <HAL_UART_IRQHandler+0x514>
      return;
 800501e:	bf00      	nop
  }
}
 8005020:	37e8      	adds	r7, #232	; 0xe8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop

08005028 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	4613      	mov	r3, r2
 8005060:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	88fa      	ldrh	r2, [r7, #6]
 800506c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	88fa      	ldrh	r2, [r7, #6]
 8005072:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2222      	movs	r2, #34	; 0x22
 800507e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005098:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695a      	ldr	r2, [r3, #20]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f042 0201 	orr.w	r2, r2, #1
 80050a8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0220 	orr.w	r2, r2, #32
 80050b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b095      	sub	sp, #84	; 0x54
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	330c      	adds	r3, #12
 80050d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	330c      	adds	r3, #12
 80050ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050f0:	643a      	str	r2, [r7, #64]	; 0x40
 80050f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e5      	bne.n	80050d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3314      	adds	r3, #20
 800510a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	e853 3f00 	ldrex	r3, [r3]
 8005112:	61fb      	str	r3, [r7, #28]
   return(result);
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	f023 0301 	bic.w	r3, r3, #1
 800511a:	64bb      	str	r3, [r7, #72]	; 0x48
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3314      	adds	r3, #20
 8005122:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005124:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005126:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800512a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800512c:	e841 2300 	strex	r3, r2, [r1]
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e5      	bne.n	8005104 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	2b01      	cmp	r3, #1
 800513e:	d119      	bne.n	8005174 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	330c      	adds	r3, #12
 8005146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	e853 3f00 	ldrex	r3, [r3]
 800514e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f023 0310 	bic.w	r3, r3, #16
 8005156:	647b      	str	r3, [r7, #68]	; 0x44
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	330c      	adds	r3, #12
 800515e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005160:	61ba      	str	r2, [r7, #24]
 8005162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005164:	6979      	ldr	r1, [r7, #20]
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	e841 2300 	strex	r3, r2, [r1]
 800516c:	613b      	str	r3, [r7, #16]
   return(result);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e5      	bne.n	8005140 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005182:	bf00      	nop
 8005184:	3754      	adds	r7, #84	; 0x54
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f7ff ff3d 	bl	8005028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b085      	sub	sp, #20
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b21      	cmp	r3, #33	; 0x21
 80051c8:	d13e      	bne.n	8005248 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d2:	d114      	bne.n	80051fe <UART_Transmit_IT+0x48>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d110      	bne.n	80051fe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	1c9a      	adds	r2, r3, #2
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	621a      	str	r2, [r3, #32]
 80051fc:	e008      	b.n	8005210 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	1c59      	adds	r1, r3, #1
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6211      	str	r1, [r2, #32]
 8005208:	781a      	ldrb	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005214:	b29b      	uxth	r3, r3
 8005216:	3b01      	subs	r3, #1
 8005218:	b29b      	uxth	r3, r3
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	4619      	mov	r1, r3
 800521e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10f      	bne.n	8005244 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005232:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005242:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e000      	b.n	800524a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005248:	2302      	movs	r3, #2
  }
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b082      	sub	sp, #8
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800526c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7fc f993 	bl	80015a2 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b08c      	sub	sp, #48	; 0x30
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b22      	cmp	r3, #34	; 0x22
 8005298:	f040 80ab 	bne.w	80053f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052a4:	d117      	bne.n	80052d6 <UART_Receive_IT+0x50>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d113      	bne.n	80052d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	1c9a      	adds	r2, r3, #2
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	629a      	str	r2, [r3, #40]	; 0x28
 80052d4:	e026      	b.n	8005324 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80052dc:	2300      	movs	r3, #0
 80052de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e8:	d007      	beq.n	80052fa <UART_Receive_IT+0x74>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10a      	bne.n	8005308 <UART_Receive_IT+0x82>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	b2da      	uxtb	r2, r3
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	e008      	b.n	800531a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	b2db      	uxtb	r3, r3
 8005310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005314:	b2da      	uxtb	r2, r3
 8005316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005318:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005328:	b29b      	uxth	r3, r3
 800532a:	3b01      	subs	r3, #1
 800532c:	b29b      	uxth	r3, r3
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	4619      	mov	r1, r3
 8005332:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005334:	2b00      	cmp	r3, #0
 8005336:	d15a      	bne.n	80053ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0220 	bic.w	r2, r2, #32
 8005346:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005356:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695a      	ldr	r2, [r3, #20]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0201 	bic.w	r2, r2, #1
 8005366:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005374:	2b01      	cmp	r3, #1
 8005376:	d135      	bne.n	80053e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	330c      	adds	r3, #12
 8005384:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	613b      	str	r3, [r7, #16]
   return(result);
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	f023 0310 	bic.w	r3, r3, #16
 8005394:	627b      	str	r3, [r7, #36]	; 0x24
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	330c      	adds	r3, #12
 800539c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539e:	623a      	str	r2, [r7, #32]
 80053a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	69f9      	ldr	r1, [r7, #28]
 80053a4:	6a3a      	ldr	r2, [r7, #32]
 80053a6:	e841 2300 	strex	r3, r2, [r1]
 80053aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1e5      	bne.n	800537e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	2b10      	cmp	r3, #16
 80053be:	d10a      	bne.n	80053d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053da:	4619      	mov	r1, r3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f7ff fe2d 	bl	800503c <HAL_UARTEx_RxEventCallback>
 80053e2:	e002      	b.n	80053ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7fc f8d1 	bl	800158c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053ea:	2300      	movs	r3, #0
 80053ec:	e002      	b.n	80053f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	e000      	b.n	80053f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80053f2:	2302      	movs	r3, #2
  }
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3730      	adds	r7, #48	; 0x30
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005400:	b09f      	sub	sp, #124	; 0x7c
 8005402:	af00      	add	r7, sp, #0
 8005404:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005410:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005412:	68d9      	ldr	r1, [r3, #12]
 8005414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	ea40 0301 	orr.w	r3, r0, r1
 800541c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800541e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	431a      	orrs	r2, r3
 8005428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	431a      	orrs	r2, r3
 800542e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	4313      	orrs	r3, r2
 8005434:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005440:	f021 010c 	bic.w	r1, r1, #12
 8005444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800544a:	430b      	orrs	r3, r1
 800544c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800544e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800545a:	6999      	ldr	r1, [r3, #24]
 800545c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	ea40 0301 	orr.w	r3, r0, r1
 8005464:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	4bc5      	ldr	r3, [pc, #788]	; (8005780 <UART_SetConfig+0x384>)
 800546c:	429a      	cmp	r2, r3
 800546e:	d004      	beq.n	800547a <UART_SetConfig+0x7e>
 8005470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	4bc3      	ldr	r3, [pc, #780]	; (8005784 <UART_SetConfig+0x388>)
 8005476:	429a      	cmp	r2, r3
 8005478:	d103      	bne.n	8005482 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800547a:	f7fe fdbd 	bl	8003ff8 <HAL_RCC_GetPCLK2Freq>
 800547e:	6778      	str	r0, [r7, #116]	; 0x74
 8005480:	e002      	b.n	8005488 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005482:	f7fe fda5 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 8005486:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005490:	f040 80b6 	bne.w	8005600 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005494:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005496:	461c      	mov	r4, r3
 8005498:	f04f 0500 	mov.w	r5, #0
 800549c:	4622      	mov	r2, r4
 800549e:	462b      	mov	r3, r5
 80054a0:	1891      	adds	r1, r2, r2
 80054a2:	6439      	str	r1, [r7, #64]	; 0x40
 80054a4:	415b      	adcs	r3, r3
 80054a6:	647b      	str	r3, [r7, #68]	; 0x44
 80054a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054ac:	1912      	adds	r2, r2, r4
 80054ae:	eb45 0303 	adc.w	r3, r5, r3
 80054b2:	f04f 0000 	mov.w	r0, #0
 80054b6:	f04f 0100 	mov.w	r1, #0
 80054ba:	00d9      	lsls	r1, r3, #3
 80054bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054c0:	00d0      	lsls	r0, r2, #3
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	1911      	adds	r1, r2, r4
 80054c8:	6639      	str	r1, [r7, #96]	; 0x60
 80054ca:	416b      	adcs	r3, r5
 80054cc:	667b      	str	r3, [r7, #100]	; 0x64
 80054ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	461a      	mov	r2, r3
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	1891      	adds	r1, r2, r2
 80054da:	63b9      	str	r1, [r7, #56]	; 0x38
 80054dc:	415b      	adcs	r3, r3
 80054de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80054e8:	f7fa feda 	bl	80002a0 <__aeabi_uldivmod>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4ba5      	ldr	r3, [pc, #660]	; (8005788 <UART_SetConfig+0x38c>)
 80054f2:	fba3 2302 	umull	r2, r3, r3, r2
 80054f6:	095b      	lsrs	r3, r3, #5
 80054f8:	011e      	lsls	r6, r3, #4
 80054fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054fc:	461c      	mov	r4, r3
 80054fe:	f04f 0500 	mov.w	r5, #0
 8005502:	4622      	mov	r2, r4
 8005504:	462b      	mov	r3, r5
 8005506:	1891      	adds	r1, r2, r2
 8005508:	6339      	str	r1, [r7, #48]	; 0x30
 800550a:	415b      	adcs	r3, r3
 800550c:	637b      	str	r3, [r7, #52]	; 0x34
 800550e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005512:	1912      	adds	r2, r2, r4
 8005514:	eb45 0303 	adc.w	r3, r5, r3
 8005518:	f04f 0000 	mov.w	r0, #0
 800551c:	f04f 0100 	mov.w	r1, #0
 8005520:	00d9      	lsls	r1, r3, #3
 8005522:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005526:	00d0      	lsls	r0, r2, #3
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	1911      	adds	r1, r2, r4
 800552e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005530:	416b      	adcs	r3, r5
 8005532:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005534:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	461a      	mov	r2, r3
 800553a:	f04f 0300 	mov.w	r3, #0
 800553e:	1891      	adds	r1, r2, r2
 8005540:	62b9      	str	r1, [r7, #40]	; 0x28
 8005542:	415b      	adcs	r3, r3
 8005544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005546:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800554a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800554e:	f7fa fea7 	bl	80002a0 <__aeabi_uldivmod>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4b8c      	ldr	r3, [pc, #560]	; (8005788 <UART_SetConfig+0x38c>)
 8005558:	fba3 1302 	umull	r1, r3, r3, r2
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	2164      	movs	r1, #100	; 0x64
 8005560:	fb01 f303 	mul.w	r3, r1, r3
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	3332      	adds	r3, #50	; 0x32
 800556a:	4a87      	ldr	r2, [pc, #540]	; (8005788 <UART_SetConfig+0x38c>)
 800556c:	fba2 2303 	umull	r2, r3, r2, r3
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	005b      	lsls	r3, r3, #1
 8005574:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005578:	441e      	add	r6, r3
 800557a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800557c:	4618      	mov	r0, r3
 800557e:	f04f 0100 	mov.w	r1, #0
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	1894      	adds	r4, r2, r2
 8005588:	623c      	str	r4, [r7, #32]
 800558a:	415b      	adcs	r3, r3
 800558c:	627b      	str	r3, [r7, #36]	; 0x24
 800558e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005592:	1812      	adds	r2, r2, r0
 8005594:	eb41 0303 	adc.w	r3, r1, r3
 8005598:	f04f 0400 	mov.w	r4, #0
 800559c:	f04f 0500 	mov.w	r5, #0
 80055a0:	00dd      	lsls	r5, r3, #3
 80055a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80055a6:	00d4      	lsls	r4, r2, #3
 80055a8:	4622      	mov	r2, r4
 80055aa:	462b      	mov	r3, r5
 80055ac:	1814      	adds	r4, r2, r0
 80055ae:	653c      	str	r4, [r7, #80]	; 0x50
 80055b0:	414b      	adcs	r3, r1
 80055b2:	657b      	str	r3, [r7, #84]	; 0x54
 80055b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	461a      	mov	r2, r3
 80055ba:	f04f 0300 	mov.w	r3, #0
 80055be:	1891      	adds	r1, r2, r2
 80055c0:	61b9      	str	r1, [r7, #24]
 80055c2:	415b      	adcs	r3, r3
 80055c4:	61fb      	str	r3, [r7, #28]
 80055c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80055ce:	f7fa fe67 	bl	80002a0 <__aeabi_uldivmod>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4b6c      	ldr	r3, [pc, #432]	; (8005788 <UART_SetConfig+0x38c>)
 80055d8:	fba3 1302 	umull	r1, r3, r3, r2
 80055dc:	095b      	lsrs	r3, r3, #5
 80055de:	2164      	movs	r1, #100	; 0x64
 80055e0:	fb01 f303 	mul.w	r3, r1, r3
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	3332      	adds	r3, #50	; 0x32
 80055ea:	4a67      	ldr	r2, [pc, #412]	; (8005788 <UART_SetConfig+0x38c>)
 80055ec:	fba2 2303 	umull	r2, r3, r2, r3
 80055f0:	095b      	lsrs	r3, r3, #5
 80055f2:	f003 0207 	and.w	r2, r3, #7
 80055f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4432      	add	r2, r6
 80055fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80055fe:	e0b9      	b.n	8005774 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005602:	461c      	mov	r4, r3
 8005604:	f04f 0500 	mov.w	r5, #0
 8005608:	4622      	mov	r2, r4
 800560a:	462b      	mov	r3, r5
 800560c:	1891      	adds	r1, r2, r2
 800560e:	6139      	str	r1, [r7, #16]
 8005610:	415b      	adcs	r3, r3
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005618:	1912      	adds	r2, r2, r4
 800561a:	eb45 0303 	adc.w	r3, r5, r3
 800561e:	f04f 0000 	mov.w	r0, #0
 8005622:	f04f 0100 	mov.w	r1, #0
 8005626:	00d9      	lsls	r1, r3, #3
 8005628:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800562c:	00d0      	lsls	r0, r2, #3
 800562e:	4602      	mov	r2, r0
 8005630:	460b      	mov	r3, r1
 8005632:	eb12 0804 	adds.w	r8, r2, r4
 8005636:	eb43 0905 	adc.w	r9, r3, r5
 800563a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	4618      	mov	r0, r3
 8005640:	f04f 0100 	mov.w	r1, #0
 8005644:	f04f 0200 	mov.w	r2, #0
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	008b      	lsls	r3, r1, #2
 800564e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005652:	0082      	lsls	r2, r0, #2
 8005654:	4640      	mov	r0, r8
 8005656:	4649      	mov	r1, r9
 8005658:	f7fa fe22 	bl	80002a0 <__aeabi_uldivmod>
 800565c:	4602      	mov	r2, r0
 800565e:	460b      	mov	r3, r1
 8005660:	4b49      	ldr	r3, [pc, #292]	; (8005788 <UART_SetConfig+0x38c>)
 8005662:	fba3 2302 	umull	r2, r3, r3, r2
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	011e      	lsls	r6, r3, #4
 800566a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800566c:	4618      	mov	r0, r3
 800566e:	f04f 0100 	mov.w	r1, #0
 8005672:	4602      	mov	r2, r0
 8005674:	460b      	mov	r3, r1
 8005676:	1894      	adds	r4, r2, r2
 8005678:	60bc      	str	r4, [r7, #8]
 800567a:	415b      	adcs	r3, r3
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005682:	1812      	adds	r2, r2, r0
 8005684:	eb41 0303 	adc.w	r3, r1, r3
 8005688:	f04f 0400 	mov.w	r4, #0
 800568c:	f04f 0500 	mov.w	r5, #0
 8005690:	00dd      	lsls	r5, r3, #3
 8005692:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005696:	00d4      	lsls	r4, r2, #3
 8005698:	4622      	mov	r2, r4
 800569a:	462b      	mov	r3, r5
 800569c:	1814      	adds	r4, r2, r0
 800569e:	64bc      	str	r4, [r7, #72]	; 0x48
 80056a0:	414b      	adcs	r3, r1
 80056a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f04f 0100 	mov.w	r1, #0
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	f04f 0300 	mov.w	r3, #0
 80056b6:	008b      	lsls	r3, r1, #2
 80056b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80056bc:	0082      	lsls	r2, r0, #2
 80056be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80056c2:	f7fa fded 	bl	80002a0 <__aeabi_uldivmod>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4b2f      	ldr	r3, [pc, #188]	; (8005788 <UART_SetConfig+0x38c>)
 80056cc:	fba3 1302 	umull	r1, r3, r3, r2
 80056d0:	095b      	lsrs	r3, r3, #5
 80056d2:	2164      	movs	r1, #100	; 0x64
 80056d4:	fb01 f303 	mul.w	r3, r1, r3
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	3332      	adds	r3, #50	; 0x32
 80056de:	4a2a      	ldr	r2, [pc, #168]	; (8005788 <UART_SetConfig+0x38c>)
 80056e0:	fba2 2303 	umull	r2, r3, r2, r3
 80056e4:	095b      	lsrs	r3, r3, #5
 80056e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056ea:	441e      	add	r6, r3
 80056ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056ee:	4618      	mov	r0, r3
 80056f0:	f04f 0100 	mov.w	r1, #0
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	1894      	adds	r4, r2, r2
 80056fa:	603c      	str	r4, [r7, #0]
 80056fc:	415b      	adcs	r3, r3
 80056fe:	607b      	str	r3, [r7, #4]
 8005700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005704:	1812      	adds	r2, r2, r0
 8005706:	eb41 0303 	adc.w	r3, r1, r3
 800570a:	f04f 0400 	mov.w	r4, #0
 800570e:	f04f 0500 	mov.w	r5, #0
 8005712:	00dd      	lsls	r5, r3, #3
 8005714:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005718:	00d4      	lsls	r4, r2, #3
 800571a:	4622      	mov	r2, r4
 800571c:	462b      	mov	r3, r5
 800571e:	eb12 0a00 	adds.w	sl, r2, r0
 8005722:	eb43 0b01 	adc.w	fp, r3, r1
 8005726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	4618      	mov	r0, r3
 800572c:	f04f 0100 	mov.w	r1, #0
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	008b      	lsls	r3, r1, #2
 800573a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800573e:	0082      	lsls	r2, r0, #2
 8005740:	4650      	mov	r0, sl
 8005742:	4659      	mov	r1, fp
 8005744:	f7fa fdac 	bl	80002a0 <__aeabi_uldivmod>
 8005748:	4602      	mov	r2, r0
 800574a:	460b      	mov	r3, r1
 800574c:	4b0e      	ldr	r3, [pc, #56]	; (8005788 <UART_SetConfig+0x38c>)
 800574e:	fba3 1302 	umull	r1, r3, r3, r2
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	2164      	movs	r1, #100	; 0x64
 8005756:	fb01 f303 	mul.w	r3, r1, r3
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	011b      	lsls	r3, r3, #4
 800575e:	3332      	adds	r3, #50	; 0x32
 8005760:	4a09      	ldr	r2, [pc, #36]	; (8005788 <UART_SetConfig+0x38c>)
 8005762:	fba2 2303 	umull	r2, r3, r2, r3
 8005766:	095b      	lsrs	r3, r3, #5
 8005768:	f003 020f 	and.w	r2, r3, #15
 800576c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4432      	add	r2, r6
 8005772:	609a      	str	r2, [r3, #8]
}
 8005774:	bf00      	nop
 8005776:	377c      	adds	r7, #124	; 0x7c
 8005778:	46bd      	mov	sp, r7
 800577a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800577e:	bf00      	nop
 8005780:	40011000 	.word	0x40011000
 8005784:	40011400 	.word	0x40011400
 8005788:	51eb851f 	.word	0x51eb851f

0800578c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	4603      	mov	r3, r0
 8005794:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005796:	2300      	movs	r3, #0
 8005798:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800579a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800579e:	2b84      	cmp	r3, #132	; 0x84
 80057a0:	d005      	beq.n	80057ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80057a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4413      	add	r3, r2
 80057aa:	3303      	adds	r3, #3
 80057ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80057ae:	68fb      	ldr	r3, [r7, #12]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057c2:	f3ef 8305 	mrs	r3, IPSR
 80057c6:	607b      	str	r3, [r7, #4]
  return(result);
 80057c8:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	bf14      	ite	ne
 80057ce:	2301      	movne	r3, #1
 80057d0:	2300      	moveq	r3, #0
 80057d2:	b2db      	uxtb	r3, r3
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80057e4:	f001 f840 	bl	8006868 <vTaskStartScheduler>
  
  return osOK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	bd80      	pop	{r7, pc}

080057ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80057ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057f0:	b089      	sub	sp, #36	; 0x24
 80057f2:	af04      	add	r7, sp, #16
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d020      	beq.n	8005842 <osThreadCreate+0x54>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d01c      	beq.n	8005842 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685c      	ldr	r4, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681d      	ldr	r5, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691e      	ldr	r6, [r3, #16]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff ffb6 	bl	800578c <makeFreeRtosPriority>
 8005820:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	695b      	ldr	r3, [r3, #20]
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800582a:	9202      	str	r2, [sp, #8]
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	9100      	str	r1, [sp, #0]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	4632      	mov	r2, r6
 8005834:	4629      	mov	r1, r5
 8005836:	4620      	mov	r0, r4
 8005838:	f000 fe38 	bl	80064ac <xTaskCreateStatic>
 800583c:	4603      	mov	r3, r0
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	e01c      	b.n	800587c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685c      	ldr	r4, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800584e:	b29e      	uxth	r6, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff ff98 	bl	800578c <makeFreeRtosPriority>
 800585c:	4602      	mov	r2, r0
 800585e:	f107 030c 	add.w	r3, r7, #12
 8005862:	9301      	str	r3, [sp, #4]
 8005864:	9200      	str	r2, [sp, #0]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	4632      	mov	r2, r6
 800586a:	4629      	mov	r1, r5
 800586c:	4620      	mov	r0, r4
 800586e:	f000 fe7a 	bl	8006566 <xTaskCreate>
 8005872:	4603      	mov	r3, r0
 8005874:	2b01      	cmp	r3, #1
 8005876:	d001      	beq.n	800587c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005878:	2300      	movs	r3, #0
 800587a:	e000      	b.n	800587e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800587c:	68fb      	ldr	r3, [r7, #12]
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005886 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005886:	b580      	push	{r7, lr}
 8005888:	b084      	sub	sp, #16
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <osDelay+0x16>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	e000      	b.n	800589e <osDelay+0x18>
 800589c:	2301      	movs	r3, #1
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 ffae 	bl	8006800 <vTaskDelay>
  
  return osOK;
 80058a4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80058ae:	b590      	push	{r4, r7, lr}
 80058b0:	b085      	sub	sp, #20
 80058b2:	af02      	add	r7, sp, #8
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d011      	beq.n	80058e4 <osMessageCreate+0x36>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00d      	beq.n	80058e4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6818      	ldr	r0, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6859      	ldr	r1, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	2400      	movs	r4, #0
 80058da:	9400      	str	r4, [sp, #0]
 80058dc:	f000 f96c 	bl	8005bb8 <xQueueGenericCreateStatic>
 80058e0:	4603      	mov	r3, r0
 80058e2:	e008      	b.n	80058f6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6818      	ldr	r0, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	4619      	mov	r1, r3
 80058f0:	f000 f9da 	bl	8005ca8 <xQueueGenericCreate>
 80058f4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd90      	pop	{r4, r7, pc}
	...

08005900 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800590c:	2300      	movs	r3, #0
 800590e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <osMessagePut+0x1e>
    ticks = 1;
 800591a:	2301      	movs	r3, #1
 800591c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800591e:	f7ff ff4d 	bl	80057bc <inHandlerMode>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d018      	beq.n	800595a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005928:	f107 0210 	add.w	r2, r7, #16
 800592c:	f107 0108 	add.w	r1, r7, #8
 8005930:	2300      	movs	r3, #0
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 fb10 	bl	8005f58 <xQueueGenericSendFromISR>
 8005938:	4603      	mov	r3, r0
 800593a:	2b01      	cmp	r3, #1
 800593c:	d001      	beq.n	8005942 <osMessagePut+0x42>
      return osErrorOS;
 800593e:	23ff      	movs	r3, #255	; 0xff
 8005940:	e018      	b.n	8005974 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d014      	beq.n	8005972 <osMessagePut+0x72>
 8005948:	4b0c      	ldr	r3, [pc, #48]	; (800597c <osMessagePut+0x7c>)
 800594a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	e00b      	b.n	8005972 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800595a:	f107 0108 	add.w	r1, r7, #8
 800595e:	2300      	movs	r3, #0
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 f9fa 	bl	8005d5c <xQueueGenericSend>
 8005968:	4603      	mov	r3, r0
 800596a:	2b01      	cmp	r3, #1
 800596c:	d001      	beq.n	8005972 <osMessagePut+0x72>
      return osErrorOS;
 800596e:	23ff      	movs	r3, #255	; 0xff
 8005970:	e000      	b.n	8005974 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3718      	adds	r7, #24
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	e000ed04 	.word	0xe000ed04

08005980 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f103 0208 	add.w	r2, r3, #8
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f04f 32ff 	mov.w	r2, #4294967295
 8005998:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f103 0208 	add.w	r2, r3, #8
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f103 0208 	add.w	r2, r3, #8
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059da:	b480      	push	{r7}
 80059dc:	b085      	sub	sp, #20
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	683a      	ldr	r2, [r7, #0]
 8005a04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	601a      	str	r2, [r3, #0]
}
 8005a16:	bf00      	nop
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a22:	b480      	push	{r7}
 8005a24:	b085      	sub	sp, #20
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a38:	d103      	bne.n	8005a42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	e00c      	b.n	8005a5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3308      	adds	r3, #8
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	e002      	b.n	8005a50 <vListInsert+0x2e>
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d2f6      	bcs.n	8005a4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	601a      	str	r2, [r3, #0]
}
 8005a88:	bf00      	nop
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6892      	ldr	r2, [r2, #8]
 8005aaa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6852      	ldr	r2, [r2, #4]
 8005ab4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d103      	bne.n	8005ac8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	1e5a      	subs	r2, r3, #1
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10a      	bne.n	8005b12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b12:	f001 fcef 	bl	80074f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1e:	68f9      	ldr	r1, [r7, #12]
 8005b20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b22:	fb01 f303 	mul.w	r3, r1, r3
 8005b26:	441a      	add	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b42:	3b01      	subs	r3, #1
 8005b44:	68f9      	ldr	r1, [r7, #12]
 8005b46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005b48:	fb01 f303 	mul.w	r3, r1, r3
 8005b4c:	441a      	add	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	22ff      	movs	r2, #255	; 0xff
 8005b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	22ff      	movs	r2, #255	; 0xff
 8005b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d114      	bne.n	8005b92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01a      	beq.n	8005ba6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3310      	adds	r3, #16
 8005b74:	4618      	mov	r0, r3
 8005b76:	f001 f8c9 	bl	8006d0c <xTaskRemoveFromEventList>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d012      	beq.n	8005ba6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b80:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <xQueueGenericReset+0xcc>)
 8005b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	e009      	b.n	8005ba6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3310      	adds	r3, #16
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff fef2 	bl	8005980 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	3324      	adds	r3, #36	; 0x24
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff feed 	bl	8005980 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005ba6:	f001 fcd5 	bl	8007554 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005baa:	2301      	movs	r3, #1
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	e000ed04 	.word	0xe000ed04

08005bb8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b08e      	sub	sp, #56	; 0x38
 8005bbc:	af02      	add	r7, sp, #8
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
 8005bc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10a      	bne.n	8005be2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd0:	f383 8811 	msr	BASEPRI, r3
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	f3bf 8f4f 	dsb	sy
 8005bdc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005bde:	bf00      	nop
 8005be0:	e7fe      	b.n	8005be0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10a      	bne.n	8005bfe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bec:	f383 8811 	msr	BASEPRI, r3
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	f3bf 8f4f 	dsb	sy
 8005bf8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005bfa:	bf00      	nop
 8005bfc:	e7fe      	b.n	8005bfc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <xQueueGenericCreateStatic+0x52>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <xQueueGenericCreateStatic+0x56>
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e000      	b.n	8005c10 <xQueueGenericCreateStatic+0x58>
 8005c0e:	2300      	movs	r3, #0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10a      	bne.n	8005c2a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	623b      	str	r3, [r7, #32]
}
 8005c26:	bf00      	nop
 8005c28:	e7fe      	b.n	8005c28 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d102      	bne.n	8005c36 <xQueueGenericCreateStatic+0x7e>
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <xQueueGenericCreateStatic+0x82>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <xQueueGenericCreateStatic+0x84>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10a      	bne.n	8005c56 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	61fb      	str	r3, [r7, #28]
}
 8005c52:	bf00      	nop
 8005c54:	e7fe      	b.n	8005c54 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c56:	2348      	movs	r3, #72	; 0x48
 8005c58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b48      	cmp	r3, #72	; 0x48
 8005c5e:	d00a      	beq.n	8005c76 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	61bb      	str	r3, [r7, #24]
}
 8005c72:	bf00      	nop
 8005c74:	e7fe      	b.n	8005c74 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005c76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00d      	beq.n	8005c9e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c90:	9300      	str	r3, [sp, #0]
 8005c92:	4613      	mov	r3, r2
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	68b9      	ldr	r1, [r7, #8]
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f83f 	bl	8005d1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3730      	adds	r7, #48	; 0x30
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08a      	sub	sp, #40	; 0x28
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	613b      	str	r3, [r7, #16]
}
 8005cce:	bf00      	nop
 8005cd0:	e7fe      	b.n	8005cd0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	fb02 f303 	mul.w	r3, r2, r3
 8005cda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	3348      	adds	r3, #72	; 0x48
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f001 fd29 	bl	8007738 <pvPortMalloc>
 8005ce6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d011      	beq.n	8005d12 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	3348      	adds	r3, #72	; 0x48
 8005cf6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d00:	79fa      	ldrb	r2, [r7, #7]
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	4613      	mov	r3, r2
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f805 	bl	8005d1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d12:	69bb      	ldr	r3, [r7, #24]
	}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3720      	adds	r7, #32
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d103      	bne.n	8005d38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	e002      	b.n	8005d3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	69b8      	ldr	r0, [r7, #24]
 8005d4e:	f7ff fecb 	bl	8005ae8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d52:	bf00      	nop
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
	...

08005d5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08e      	sub	sp, #56	; 0x38
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10a      	bne.n	8005d8e <xQueueGenericSend+0x32>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d103      	bne.n	8005d9c <xQueueGenericSend+0x40>
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <xQueueGenericSend+0x44>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e000      	b.n	8005da2 <xQueueGenericSend+0x46>
 8005da0:	2300      	movs	r3, #0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10a      	bne.n	8005dbc <xQueueGenericSend+0x60>
	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005db8:	bf00      	nop
 8005dba:	e7fe      	b.n	8005dba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d103      	bne.n	8005dca <xQueueGenericSend+0x6e>
 8005dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d101      	bne.n	8005dce <xQueueGenericSend+0x72>
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e000      	b.n	8005dd0 <xQueueGenericSend+0x74>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10a      	bne.n	8005dea <xQueueGenericSend+0x8e>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	623b      	str	r3, [r7, #32]
}
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dea:	f001 f94f 	bl	800708c <xTaskGetSchedulerState>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d102      	bne.n	8005dfa <xQueueGenericSend+0x9e>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <xQueueGenericSend+0xa2>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e000      	b.n	8005e00 <xQueueGenericSend+0xa4>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10a      	bne.n	8005e1a <xQueueGenericSend+0xbe>
	__asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	61fb      	str	r3, [r7, #28]
}
 8005e16:	bf00      	nop
 8005e18:	e7fe      	b.n	8005e18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e1a:	f001 fb6b 	bl	80074f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d302      	bcc.n	8005e30 <xQueueGenericSend+0xd4>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d129      	bne.n	8005e84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e36:	f000 fa29 	bl	800628c <prvCopyDataToQueue>
 8005e3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d010      	beq.n	8005e66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	3324      	adds	r3, #36	; 0x24
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 ff5f 	bl	8006d0c <xTaskRemoveFromEventList>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d013      	beq.n	8005e7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005e54:	4b3f      	ldr	r3, [pc, #252]	; (8005f54 <xQueueGenericSend+0x1f8>)
 8005e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e5a:	601a      	str	r2, [r3, #0]
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	f3bf 8f6f 	isb	sy
 8005e64:	e00a      	b.n	8005e7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d007      	beq.n	8005e7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005e6c:	4b39      	ldr	r3, [pc, #228]	; (8005f54 <xQueueGenericSend+0x1f8>)
 8005e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005e7c:	f001 fb6a 	bl	8007554 <vPortExitCritical>
				return pdPASS;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e063      	b.n	8005f4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d103      	bne.n	8005e92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e8a:	f001 fb63 	bl	8007554 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e05c      	b.n	8005f4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d106      	bne.n	8005ea6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e98:	f107 0314 	add.w	r3, r7, #20
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f000 ff97 	bl	8006dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ea6:	f001 fb55 	bl	8007554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005eaa:	f000 fd47 	bl	800693c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005eae:	f001 fb21 	bl	80074f4 <vPortEnterCritical>
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eb8:	b25b      	sxtb	r3, r3
 8005eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ebe:	d103      	bne.n	8005ec8 <xQueueGenericSend+0x16c>
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ece:	b25b      	sxtb	r3, r3
 8005ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed4:	d103      	bne.n	8005ede <xQueueGenericSend+0x182>
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ede:	f001 fb39 	bl	8007554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ee2:	1d3a      	adds	r2, r7, #4
 8005ee4:	f107 0314 	add.w	r3, r7, #20
 8005ee8:	4611      	mov	r1, r2
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 ff86 	bl	8006dfc <xTaskCheckForTimeOut>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d124      	bne.n	8005f40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ef8:	f000 fac0 	bl	800647c <prvIsQueueFull>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d018      	beq.n	8005f34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	3310      	adds	r3, #16
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	4611      	mov	r1, r2
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 feda 	bl	8006cc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f12:	f000 fa4b 	bl	80063ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005f16:	f000 fd1f 	bl	8006958 <xTaskResumeAll>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f47f af7c 	bne.w	8005e1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005f22:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <xQueueGenericSend+0x1f8>)
 8005f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	e772      	b.n	8005e1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f36:	f000 fa39 	bl	80063ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f3a:	f000 fd0d 	bl	8006958 <xTaskResumeAll>
 8005f3e:	e76c      	b.n	8005e1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005f40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f42:	f000 fa33 	bl	80063ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f46:	f000 fd07 	bl	8006958 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005f4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3738      	adds	r7, #56	; 0x38
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	e000ed04 	.word	0xe000ed04

08005f58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b090      	sub	sp, #64	; 0x40
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10a      	bne.n	8005f86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f82:	bf00      	nop
 8005f84:	e7fe      	b.n	8005f84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d103      	bne.n	8005f94 <xQueueGenericSendFromISR+0x3c>
 8005f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <xQueueGenericSendFromISR+0x40>
 8005f94:	2301      	movs	r3, #1
 8005f96:	e000      	b.n	8005f9a <xQueueGenericSendFromISR+0x42>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10a      	bne.n	8005fb4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa2:	f383 8811 	msr	BASEPRI, r3
 8005fa6:	f3bf 8f6f 	isb	sy
 8005faa:	f3bf 8f4f 	dsb	sy
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005fb0:	bf00      	nop
 8005fb2:	e7fe      	b.n	8005fb2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d103      	bne.n	8005fc2 <xQueueGenericSendFromISR+0x6a>
 8005fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <xQueueGenericSendFromISR+0x6e>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <xQueueGenericSendFromISR+0x70>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10a      	bne.n	8005fe2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	623b      	str	r3, [r7, #32]
}
 8005fde:	bf00      	nop
 8005fe0:	e7fe      	b.n	8005fe0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fe2:	f001 fb69 	bl	80076b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005fe6:	f3ef 8211 	mrs	r2, BASEPRI
 8005fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	61fa      	str	r2, [r7, #28]
 8005ffc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ffe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006000:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600a:	429a      	cmp	r2, r3
 800600c:	d302      	bcc.n	8006014 <xQueueGenericSendFromISR+0xbc>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b02      	cmp	r3, #2
 8006012:	d12f      	bne.n	8006074 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006016:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800601a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800601e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006022:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	68b9      	ldr	r1, [r7, #8]
 8006028:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800602a:	f000 f92f 	bl	800628c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800602e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006036:	d112      	bne.n	800605e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	2b00      	cmp	r3, #0
 800603e:	d016      	beq.n	800606e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006042:	3324      	adds	r3, #36	; 0x24
 8006044:	4618      	mov	r0, r3
 8006046:	f000 fe61 	bl	8006d0c <xTaskRemoveFromEventList>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00e      	beq.n	800606e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00b      	beq.n	800606e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	e007      	b.n	800606e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800605e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006062:	3301      	adds	r3, #1
 8006064:	b2db      	uxtb	r3, r3
 8006066:	b25a      	sxtb	r2, r3
 8006068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800606e:	2301      	movs	r3, #1
 8006070:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006072:	e001      	b.n	8006078 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006074:	2300      	movs	r3, #0
 8006076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800607a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006082:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006086:	4618      	mov	r0, r3
 8006088:	3740      	adds	r7, #64	; 0x40
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08c      	sub	sp, #48	; 0x30
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800609c:	2300      	movs	r3, #0
 800609e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10a      	bne.n	80060c0 <xQueueReceive+0x30>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	623b      	str	r3, [r7, #32]
}
 80060bc:	bf00      	nop
 80060be:	e7fe      	b.n	80060be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d103      	bne.n	80060ce <xQueueReceive+0x3e>
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <xQueueReceive+0x42>
 80060ce:	2301      	movs	r3, #1
 80060d0:	e000      	b.n	80060d4 <xQueueReceive+0x44>
 80060d2:	2300      	movs	r3, #0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d10a      	bne.n	80060ee <xQueueReceive+0x5e>
	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	61fb      	str	r3, [r7, #28]
}
 80060ea:	bf00      	nop
 80060ec:	e7fe      	b.n	80060ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060ee:	f000 ffcd 	bl	800708c <xTaskGetSchedulerState>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d102      	bne.n	80060fe <xQueueReceive+0x6e>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <xQueueReceive+0x72>
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <xQueueReceive+0x74>
 8006102:	2300      	movs	r3, #0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <xQueueReceive+0x8e>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	61bb      	str	r3, [r7, #24]
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800611e:	f001 f9e9 	bl	80074f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006126:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	2b00      	cmp	r3, #0
 800612c:	d01f      	beq.n	800616e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800612e:	68b9      	ldr	r1, [r7, #8]
 8006130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006132:	f000 f915 	bl	8006360 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	1e5a      	subs	r2, r3, #1
 800613a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00f      	beq.n	8006166 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	3310      	adds	r3, #16
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fdde 	bl	8006d0c <xTaskRemoveFromEventList>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d007      	beq.n	8006166 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006156:	4b3d      	ldr	r3, [pc, #244]	; (800624c <xQueueReceive+0x1bc>)
 8006158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006166:	f001 f9f5 	bl	8007554 <vPortExitCritical>
				return pdPASS;
 800616a:	2301      	movs	r3, #1
 800616c:	e069      	b.n	8006242 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d103      	bne.n	800617c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006174:	f001 f9ee 	bl	8007554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006178:	2300      	movs	r3, #0
 800617a:	e062      	b.n	8006242 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800617c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006182:	f107 0310 	add.w	r3, r7, #16
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fe22 	bl	8006dd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800618c:	2301      	movs	r3, #1
 800618e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006190:	f001 f9e0 	bl	8007554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006194:	f000 fbd2 	bl	800693c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006198:	f001 f9ac 	bl	80074f4 <vPortEnterCritical>
 800619c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061a2:	b25b      	sxtb	r3, r3
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d103      	bne.n	80061b2 <xQueueReceive+0x122>
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061b8:	b25b      	sxtb	r3, r3
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061be:	d103      	bne.n	80061c8 <xQueueReceive+0x138>
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061c8:	f001 f9c4 	bl	8007554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061cc:	1d3a      	adds	r2, r7, #4
 80061ce:	f107 0310 	add.w	r3, r7, #16
 80061d2:	4611      	mov	r1, r2
 80061d4:	4618      	mov	r0, r3
 80061d6:	f000 fe11 	bl	8006dfc <xTaskCheckForTimeOut>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d123      	bne.n	8006228 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061e2:	f000 f935 	bl	8006450 <prvIsQueueEmpty>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d017      	beq.n	800621c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ee:	3324      	adds	r3, #36	; 0x24
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	4611      	mov	r1, r2
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 fd65 	bl	8006cc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061fc:	f000 f8d6 	bl	80063ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006200:	f000 fbaa 	bl	8006958 <xTaskResumeAll>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d189      	bne.n	800611e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800620a:	4b10      	ldr	r3, [pc, #64]	; (800624c <xQueueReceive+0x1bc>)
 800620c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	e780      	b.n	800611e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800621c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800621e:	f000 f8c5 	bl	80063ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006222:	f000 fb99 	bl	8006958 <xTaskResumeAll>
 8006226:	e77a      	b.n	800611e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006228:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800622a:	f000 f8bf 	bl	80063ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800622e:	f000 fb93 	bl	8006958 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006234:	f000 f90c 	bl	8006450 <prvIsQueueEmpty>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	f43f af6f 	beq.w	800611e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006240:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006242:	4618      	mov	r0, r3
 8006244:	3730      	adds	r7, #48	; 0x30
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	e000ed04 	.word	0xe000ed04

08006250 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10a      	bne.n	8006274 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	60bb      	str	r3, [r7, #8]
}
 8006270:	bf00      	nop
 8006272:	e7fe      	b.n	8006272 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006274:	f001 f93e 	bl	80074f4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800627e:	f001 f969 	bl	8007554 <vPortExitCritical>

	return uxReturn;
 8006282:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b086      	sub	sp, #24
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006298:	2300      	movs	r3, #0
 800629a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10d      	bne.n	80062c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d14d      	bne.n	800634e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 ff06 	bl	80070c8 <xTaskPriorityDisinherit>
 80062bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	609a      	str	r2, [r3, #8]
 80062c4:	e043      	b.n	800634e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d119      	bne.n	8006300 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6858      	ldr	r0, [r3, #4]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d4:	461a      	mov	r2, r3
 80062d6:	68b9      	ldr	r1, [r7, #8]
 80062d8:	f002 fc14 	bl	8008b04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e4:	441a      	add	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d32b      	bcc.n	800634e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	605a      	str	r2, [r3, #4]
 80062fe:	e026      	b.n	800634e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	68d8      	ldr	r0, [r3, #12]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	461a      	mov	r2, r3
 800630a:	68b9      	ldr	r1, [r7, #8]
 800630c:	f002 fbfa 	bl	8008b04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	68da      	ldr	r2, [r3, #12]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006318:	425b      	negs	r3, r3
 800631a:	441a      	add	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	68da      	ldr	r2, [r3, #12]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	429a      	cmp	r2, r3
 800632a:	d207      	bcs.n	800633c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	689a      	ldr	r2, [r3, #8]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	425b      	negs	r3, r3
 8006336:	441a      	add	r2, r3
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b02      	cmp	r3, #2
 8006340:	d105      	bne.n	800634e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d002      	beq.n	800634e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	3b01      	subs	r3, #1
 800634c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006356:	697b      	ldr	r3, [r7, #20]
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d018      	beq.n	80063a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	441a      	add	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	68da      	ldr	r2, [r3, #12]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	429a      	cmp	r2, r3
 800638a:	d303      	bcc.n	8006394 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68d9      	ldr	r1, [r3, #12]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639c:	461a      	mov	r2, r3
 800639e:	6838      	ldr	r0, [r7, #0]
 80063a0:	f002 fbb0 	bl	8008b04 <memcpy>
	}
}
 80063a4:	bf00      	nop
 80063a6:	3708      	adds	r7, #8
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80063b4:	f001 f89e 	bl	80074f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063c0:	e011      	b.n	80063e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d012      	beq.n	80063f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	3324      	adds	r3, #36	; 0x24
 80063ce:	4618      	mov	r0, r3
 80063d0:	f000 fc9c 	bl	8006d0c <xTaskRemoveFromEventList>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80063da:	f000 fd71 	bl	8006ec0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	3b01      	subs	r3, #1
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80063e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	dce9      	bgt.n	80063c2 <prvUnlockQueue+0x16>
 80063ee:	e000      	b.n	80063f2 <prvUnlockQueue+0x46>
					break;
 80063f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	22ff      	movs	r2, #255	; 0xff
 80063f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80063fa:	f001 f8ab 	bl	8007554 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80063fe:	f001 f879 	bl	80074f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006408:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800640a:	e011      	b.n	8006430 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d012      	beq.n	800643a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3310      	adds	r3, #16
 8006418:	4618      	mov	r0, r3
 800641a:	f000 fc77 	bl	8006d0c <xTaskRemoveFromEventList>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006424:	f000 fd4c 	bl	8006ec0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006428:	7bbb      	ldrb	r3, [r7, #14]
 800642a:	3b01      	subs	r3, #1
 800642c:	b2db      	uxtb	r3, r3
 800642e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006430:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006434:	2b00      	cmp	r3, #0
 8006436:	dce9      	bgt.n	800640c <prvUnlockQueue+0x60>
 8006438:	e000      	b.n	800643c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800643a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	22ff      	movs	r2, #255	; 0xff
 8006440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006444:	f001 f886 	bl	8007554 <vPortExitCritical>
}
 8006448:	bf00      	nop
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006458:	f001 f84c 	bl	80074f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006460:	2b00      	cmp	r3, #0
 8006462:	d102      	bne.n	800646a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006464:	2301      	movs	r3, #1
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	e001      	b.n	800646e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800646a:	2300      	movs	r3, #0
 800646c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800646e:	f001 f871 	bl	8007554 <vPortExitCritical>

	return xReturn;
 8006472:	68fb      	ldr	r3, [r7, #12]
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006484:	f001 f836 	bl	80074f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006490:	429a      	cmp	r2, r3
 8006492:	d102      	bne.n	800649a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006494:	2301      	movs	r3, #1
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	e001      	b.n	800649e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800649a:	2300      	movs	r3, #0
 800649c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800649e:	f001 f859 	bl	8007554 <vPortExitCritical>

	return xReturn;
 80064a2:	68fb      	ldr	r3, [r7, #12]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08e      	sub	sp, #56	; 0x38
 80064b0:	af04      	add	r7, sp, #16
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
 80064b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80064ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10a      	bne.n	80064d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	623b      	str	r3, [r7, #32]
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80064d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10a      	bne.n	80064f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80064dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	61fb      	str	r3, [r7, #28]
}
 80064ee:	bf00      	nop
 80064f0:	e7fe      	b.n	80064f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064f2:	23b4      	movs	r3, #180	; 0xb4
 80064f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	2bb4      	cmp	r3, #180	; 0xb4
 80064fa:	d00a      	beq.n	8006512 <xTaskCreateStatic+0x66>
	__asm volatile
 80064fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006500:	f383 8811 	msr	BASEPRI, r3
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	61bb      	str	r3, [r7, #24]
}
 800650e:	bf00      	nop
 8006510:	e7fe      	b.n	8006510 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006512:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006516:	2b00      	cmp	r3, #0
 8006518:	d01e      	beq.n	8006558 <xTaskCreateStatic+0xac>
 800651a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651c:	2b00      	cmp	r3, #0
 800651e:	d01b      	beq.n	8006558 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006528:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	2202      	movs	r2, #2
 800652e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006532:	2300      	movs	r3, #0
 8006534:	9303      	str	r3, [sp, #12]
 8006536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006538:	9302      	str	r3, [sp, #8]
 800653a:	f107 0314 	add.w	r3, r7, #20
 800653e:	9301      	str	r3, [sp, #4]
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f000 f850 	bl	80065f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006550:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006552:	f000 f8eb 	bl	800672c <prvAddNewTaskToReadyList>
 8006556:	e001      	b.n	800655c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006558:	2300      	movs	r3, #0
 800655a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800655c:	697b      	ldr	r3, [r7, #20]
	}
 800655e:	4618      	mov	r0, r3
 8006560:	3728      	adds	r7, #40	; 0x28
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006566:	b580      	push	{r7, lr}
 8006568:	b08c      	sub	sp, #48	; 0x30
 800656a:	af04      	add	r7, sp, #16
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	603b      	str	r3, [r7, #0]
 8006572:	4613      	mov	r3, r2
 8006574:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006576:	88fb      	ldrh	r3, [r7, #6]
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4618      	mov	r0, r3
 800657c:	f001 f8dc 	bl	8007738 <pvPortMalloc>
 8006580:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00e      	beq.n	80065a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006588:	20b4      	movs	r0, #180	; 0xb4
 800658a:	f001 f8d5 	bl	8007738 <pvPortMalloc>
 800658e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	631a      	str	r2, [r3, #48]	; 0x30
 800659c:	e005      	b.n	80065aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800659e:	6978      	ldr	r0, [r7, #20]
 80065a0:	f001 f996 	bl	80078d0 <vPortFree>
 80065a4:	e001      	b.n	80065aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d017      	beq.n	80065e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065b8:	88fa      	ldrh	r2, [r7, #6]
 80065ba:	2300      	movs	r3, #0
 80065bc:	9303      	str	r3, [sp, #12]
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	9302      	str	r3, [sp, #8]
 80065c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c4:	9301      	str	r3, [sp, #4]
 80065c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68b9      	ldr	r1, [r7, #8]
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f000 f80e 	bl	80065f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065d4:	69f8      	ldr	r0, [r7, #28]
 80065d6:	f000 f8a9 	bl	800672c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065da:	2301      	movs	r3, #1
 80065dc:	61bb      	str	r3, [r7, #24]
 80065de:	e002      	b.n	80065e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065e0:	f04f 33ff 	mov.w	r3, #4294967295
 80065e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80065e6:	69bb      	ldr	r3, [r7, #24]
	}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3720      	adds	r7, #32
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006608:	3b01      	subs	r3, #1
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	f023 0307 	bic.w	r3, r3, #7
 8006616:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00a      	beq.n	8006638 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	617b      	str	r3, [r7, #20]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d01f      	beq.n	800667e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800663e:	2300      	movs	r3, #0
 8006640:	61fb      	str	r3, [r7, #28]
 8006642:	e012      	b.n	800666a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	4413      	add	r3, r2
 800664a:	7819      	ldrb	r1, [r3, #0]
 800664c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	4413      	add	r3, r2
 8006652:	3334      	adds	r3, #52	; 0x34
 8006654:	460a      	mov	r2, r1
 8006656:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	4413      	add	r3, r2
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d006      	beq.n	8006672 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	3301      	adds	r3, #1
 8006668:	61fb      	str	r3, [r7, #28]
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	2b0f      	cmp	r3, #15
 800666e:	d9e9      	bls.n	8006644 <prvInitialiseNewTask+0x54>
 8006670:	e000      	b.n	8006674 <prvInitialiseNewTask+0x84>
			{
				break;
 8006672:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006676:	2200      	movs	r2, #0
 8006678:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800667c:	e003      	b.n	8006686 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800667e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006688:	2b06      	cmp	r3, #6
 800668a:	d901      	bls.n	8006690 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800668c:	2306      	movs	r3, #6
 800668e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006694:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006698:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800669a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669e:	2200      	movs	r2, #0
 80066a0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	3304      	adds	r3, #4
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7ff f98a 	bl	80059c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80066ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ae:	3318      	adds	r3, #24
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7ff f985 	bl	80059c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80066b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	f1c3 0207 	rsb	r2, r3, #7
 80066c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	334c      	adds	r3, #76	; 0x4c
 80066e0:	2260      	movs	r2, #96	; 0x60
 80066e2:	2100      	movs	r1, #0
 80066e4:	4618      	mov	r0, r3
 80066e6:	f002 fa1b 	bl	8008b20 <memset>
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	4a0c      	ldr	r2, [pc, #48]	; (8006720 <prvInitialiseNewTask+0x130>)
 80066ee:	651a      	str	r2, [r3, #80]	; 0x50
 80066f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f2:	4a0c      	ldr	r2, [pc, #48]	; (8006724 <prvInitialiseNewTask+0x134>)
 80066f4:	655a      	str	r2, [r3, #84]	; 0x54
 80066f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f8:	4a0b      	ldr	r2, [pc, #44]	; (8006728 <prvInitialiseNewTask+0x138>)
 80066fa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	68f9      	ldr	r1, [r7, #12]
 8006700:	69b8      	ldr	r0, [r7, #24]
 8006702:	f000 fdcd 	bl	80072a0 <pxPortInitialiseStack>
 8006706:	4602      	mov	r2, r0
 8006708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006716:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006718:	bf00      	nop
 800671a:	3720      	adds	r7, #32
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	0800a1f8 	.word	0x0800a1f8
 8006724:	0800a218 	.word	0x0800a218
 8006728:	0800a1d8 	.word	0x0800a1d8

0800672c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006734:	f000 fede 	bl	80074f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006738:	4b2a      	ldr	r3, [pc, #168]	; (80067e4 <prvAddNewTaskToReadyList+0xb8>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3301      	adds	r3, #1
 800673e:	4a29      	ldr	r2, [pc, #164]	; (80067e4 <prvAddNewTaskToReadyList+0xb8>)
 8006740:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006742:	4b29      	ldr	r3, [pc, #164]	; (80067e8 <prvAddNewTaskToReadyList+0xbc>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d109      	bne.n	800675e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800674a:	4a27      	ldr	r2, [pc, #156]	; (80067e8 <prvAddNewTaskToReadyList+0xbc>)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006750:	4b24      	ldr	r3, [pc, #144]	; (80067e4 <prvAddNewTaskToReadyList+0xb8>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d110      	bne.n	800677a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006758:	f000 fbd6 	bl	8006f08 <prvInitialiseTaskLists>
 800675c:	e00d      	b.n	800677a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800675e:	4b23      	ldr	r3, [pc, #140]	; (80067ec <prvAddNewTaskToReadyList+0xc0>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d109      	bne.n	800677a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006766:	4b20      	ldr	r3, [pc, #128]	; (80067e8 <prvAddNewTaskToReadyList+0xbc>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006770:	429a      	cmp	r2, r3
 8006772:	d802      	bhi.n	800677a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006774:	4a1c      	ldr	r2, [pc, #112]	; (80067e8 <prvAddNewTaskToReadyList+0xbc>)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800677a:	4b1d      	ldr	r3, [pc, #116]	; (80067f0 <prvAddNewTaskToReadyList+0xc4>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3301      	adds	r3, #1
 8006780:	4a1b      	ldr	r2, [pc, #108]	; (80067f0 <prvAddNewTaskToReadyList+0xc4>)
 8006782:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	2201      	movs	r2, #1
 800678a:	409a      	lsls	r2, r3
 800678c:	4b19      	ldr	r3, [pc, #100]	; (80067f4 <prvAddNewTaskToReadyList+0xc8>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4313      	orrs	r3, r2
 8006792:	4a18      	ldr	r2, [pc, #96]	; (80067f4 <prvAddNewTaskToReadyList+0xc8>)
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	4a15      	ldr	r2, [pc, #84]	; (80067f8 <prvAddNewTaskToReadyList+0xcc>)
 80067a4:	441a      	add	r2, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3304      	adds	r3, #4
 80067aa:	4619      	mov	r1, r3
 80067ac:	4610      	mov	r0, r2
 80067ae:	f7ff f914 	bl	80059da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80067b2:	f000 fecf 	bl	8007554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80067b6:	4b0d      	ldr	r3, [pc, #52]	; (80067ec <prvAddNewTaskToReadyList+0xc0>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00e      	beq.n	80067dc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80067be:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <prvAddNewTaskToReadyList+0xbc>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d207      	bcs.n	80067dc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067cc:	4b0b      	ldr	r3, [pc, #44]	; (80067fc <prvAddNewTaskToReadyList+0xd0>)
 80067ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	f3bf 8f4f 	dsb	sy
 80067d8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067dc:	bf00      	nop
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	20000498 	.word	0x20000498
 80067e8:	20000398 	.word	0x20000398
 80067ec:	200004a4 	.word	0x200004a4
 80067f0:	200004b4 	.word	0x200004b4
 80067f4:	200004a0 	.word	0x200004a0
 80067f8:	2000039c 	.word	0x2000039c
 80067fc:	e000ed04 	.word	0xe000ed04

08006800 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d017      	beq.n	8006842 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006812:	4b13      	ldr	r3, [pc, #76]	; (8006860 <vTaskDelay+0x60>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00a      	beq.n	8006830 <vTaskDelay+0x30>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	60bb      	str	r3, [r7, #8]
}
 800682c:	bf00      	nop
 800682e:	e7fe      	b.n	800682e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006830:	f000 f884 	bl	800693c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006834:	2100      	movs	r1, #0
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fccc 	bl	80071d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800683c:	f000 f88c 	bl	8006958 <xTaskResumeAll>
 8006840:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d107      	bne.n	8006858 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006848:	4b06      	ldr	r3, [pc, #24]	; (8006864 <vTaskDelay+0x64>)
 800684a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006858:	bf00      	nop
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	200004c0 	.word	0x200004c0
 8006864:	e000ed04 	.word	0xe000ed04

08006868 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b08a      	sub	sp, #40	; 0x28
 800686c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800686e:	2300      	movs	r3, #0
 8006870:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006872:	2300      	movs	r3, #0
 8006874:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006876:	463a      	mov	r2, r7
 8006878:	1d39      	adds	r1, r7, #4
 800687a:	f107 0308 	add.w	r3, r7, #8
 800687e:	4618      	mov	r0, r3
 8006880:	f7fa fbb0 	bl	8000fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006884:	6839      	ldr	r1, [r7, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	9202      	str	r2, [sp, #8]
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	2300      	movs	r3, #0
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	2300      	movs	r3, #0
 8006894:	460a      	mov	r2, r1
 8006896:	4921      	ldr	r1, [pc, #132]	; (800691c <vTaskStartScheduler+0xb4>)
 8006898:	4821      	ldr	r0, [pc, #132]	; (8006920 <vTaskStartScheduler+0xb8>)
 800689a:	f7ff fe07 	bl	80064ac <xTaskCreateStatic>
 800689e:	4603      	mov	r3, r0
 80068a0:	4a20      	ldr	r2, [pc, #128]	; (8006924 <vTaskStartScheduler+0xbc>)
 80068a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80068a4:	4b1f      	ldr	r3, [pc, #124]	; (8006924 <vTaskStartScheduler+0xbc>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80068ac:	2301      	movs	r3, #1
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	e001      	b.n	80068b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80068b2:	2300      	movs	r3, #0
 80068b4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d11b      	bne.n	80068f4 <vTaskStartScheduler+0x8c>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	613b      	str	r3, [r7, #16]
}
 80068ce:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068d0:	4b15      	ldr	r3, [pc, #84]	; (8006928 <vTaskStartScheduler+0xc0>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	334c      	adds	r3, #76	; 0x4c
 80068d6:	4a15      	ldr	r2, [pc, #84]	; (800692c <vTaskStartScheduler+0xc4>)
 80068d8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068da:	4b15      	ldr	r3, [pc, #84]	; (8006930 <vTaskStartScheduler+0xc8>)
 80068dc:	f04f 32ff 	mov.w	r2, #4294967295
 80068e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068e2:	4b14      	ldr	r3, [pc, #80]	; (8006934 <vTaskStartScheduler+0xcc>)
 80068e4:	2201      	movs	r2, #1
 80068e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068e8:	4b13      	ldr	r3, [pc, #76]	; (8006938 <vTaskStartScheduler+0xd0>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80068ee:	f000 fd5f 	bl	80073b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068f2:	e00e      	b.n	8006912 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fa:	d10a      	bne.n	8006912 <vTaskStartScheduler+0xaa>
	__asm volatile
 80068fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006900:	f383 8811 	msr	BASEPRI, r3
 8006904:	f3bf 8f6f 	isb	sy
 8006908:	f3bf 8f4f 	dsb	sy
 800690c:	60fb      	str	r3, [r7, #12]
}
 800690e:	bf00      	nop
 8006910:	e7fe      	b.n	8006910 <vTaskStartScheduler+0xa8>
}
 8006912:	bf00      	nop
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	0800a118 	.word	0x0800a118
 8006920:	08006ed9 	.word	0x08006ed9
 8006924:	200004bc 	.word	0x200004bc
 8006928:	20000398 	.word	0x20000398
 800692c:	20000060 	.word	0x20000060
 8006930:	200004b8 	.word	0x200004b8
 8006934:	200004a4 	.word	0x200004a4
 8006938:	2000049c 	.word	0x2000049c

0800693c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800693c:	b480      	push	{r7}
 800693e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006940:	4b04      	ldr	r3, [pc, #16]	; (8006954 <vTaskSuspendAll+0x18>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3301      	adds	r3, #1
 8006946:	4a03      	ldr	r2, [pc, #12]	; (8006954 <vTaskSuspendAll+0x18>)
 8006948:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800694a:	bf00      	nop
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr
 8006954:	200004c0 	.word	0x200004c0

08006958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800695e:	2300      	movs	r3, #0
 8006960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006962:	2300      	movs	r3, #0
 8006964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006966:	4b41      	ldr	r3, [pc, #260]	; (8006a6c <xTaskResumeAll+0x114>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10a      	bne.n	8006984 <xTaskResumeAll+0x2c>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	603b      	str	r3, [r7, #0]
}
 8006980:	bf00      	nop
 8006982:	e7fe      	b.n	8006982 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006984:	f000 fdb6 	bl	80074f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006988:	4b38      	ldr	r3, [pc, #224]	; (8006a6c <xTaskResumeAll+0x114>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3b01      	subs	r3, #1
 800698e:	4a37      	ldr	r2, [pc, #220]	; (8006a6c <xTaskResumeAll+0x114>)
 8006990:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006992:	4b36      	ldr	r3, [pc, #216]	; (8006a6c <xTaskResumeAll+0x114>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d161      	bne.n	8006a5e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800699a:	4b35      	ldr	r3, [pc, #212]	; (8006a70 <xTaskResumeAll+0x118>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d05d      	beq.n	8006a5e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069a2:	e02e      	b.n	8006a02 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069a4:	4b33      	ldr	r3, [pc, #204]	; (8006a74 <xTaskResumeAll+0x11c>)
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	3318      	adds	r3, #24
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7ff f86f 	bl	8005a94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3304      	adds	r3, #4
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7ff f86a 	bl	8005a94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c4:	2201      	movs	r2, #1
 80069c6:	409a      	lsls	r2, r3
 80069c8:	4b2b      	ldr	r3, [pc, #172]	; (8006a78 <xTaskResumeAll+0x120>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	4a2a      	ldr	r2, [pc, #168]	; (8006a78 <xTaskResumeAll+0x120>)
 80069d0:	6013      	str	r3, [r2, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d6:	4613      	mov	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4a27      	ldr	r2, [pc, #156]	; (8006a7c <xTaskResumeAll+0x124>)
 80069e0:	441a      	add	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	3304      	adds	r3, #4
 80069e6:	4619      	mov	r1, r3
 80069e8:	4610      	mov	r0, r2
 80069ea:	f7fe fff6 	bl	80059da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f2:	4b23      	ldr	r3, [pc, #140]	; (8006a80 <xTaskResumeAll+0x128>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d302      	bcc.n	8006a02 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80069fc:	4b21      	ldr	r3, [pc, #132]	; (8006a84 <xTaskResumeAll+0x12c>)
 80069fe:	2201      	movs	r2, #1
 8006a00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a02:	4b1c      	ldr	r3, [pc, #112]	; (8006a74 <xTaskResumeAll+0x11c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1cc      	bne.n	80069a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006a10:	f000 fb1c 	bl	800704c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a14:	4b1c      	ldr	r3, [pc, #112]	; (8006a88 <xTaskResumeAll+0x130>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d010      	beq.n	8006a42 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a20:	f000 f836 	bl	8006a90 <xTaskIncrementTick>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006a2a:	4b16      	ldr	r3, [pc, #88]	; (8006a84 <xTaskResumeAll+0x12c>)
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	3b01      	subs	r3, #1
 8006a34:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1f1      	bne.n	8006a20 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006a3c:	4b12      	ldr	r3, [pc, #72]	; (8006a88 <xTaskResumeAll+0x130>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a42:	4b10      	ldr	r3, [pc, #64]	; (8006a84 <xTaskResumeAll+0x12c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d009      	beq.n	8006a5e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a4e:	4b0f      	ldr	r3, [pc, #60]	; (8006a8c <xTaskResumeAll+0x134>)
 8006a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a5e:	f000 fd79 	bl	8007554 <vPortExitCritical>

	return xAlreadyYielded;
 8006a62:	68bb      	ldr	r3, [r7, #8]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	200004c0 	.word	0x200004c0
 8006a70:	20000498 	.word	0x20000498
 8006a74:	20000458 	.word	0x20000458
 8006a78:	200004a0 	.word	0x200004a0
 8006a7c:	2000039c 	.word	0x2000039c
 8006a80:	20000398 	.word	0x20000398
 8006a84:	200004ac 	.word	0x200004ac
 8006a88:	200004a8 	.word	0x200004a8
 8006a8c:	e000ed04 	.word	0xe000ed04

08006a90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a96:	2300      	movs	r3, #0
 8006a98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a9a:	4b4e      	ldr	r3, [pc, #312]	; (8006bd4 <xTaskIncrementTick+0x144>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f040 808e 	bne.w	8006bc0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006aa4:	4b4c      	ldr	r3, [pc, #304]	; (8006bd8 <xTaskIncrementTick+0x148>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006aac:	4a4a      	ldr	r2, [pc, #296]	; (8006bd8 <xTaskIncrementTick+0x148>)
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d120      	bne.n	8006afa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ab8:	4b48      	ldr	r3, [pc, #288]	; (8006bdc <xTaskIncrementTick+0x14c>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00a      	beq.n	8006ad8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	603b      	str	r3, [r7, #0]
}
 8006ad4:	bf00      	nop
 8006ad6:	e7fe      	b.n	8006ad6 <xTaskIncrementTick+0x46>
 8006ad8:	4b40      	ldr	r3, [pc, #256]	; (8006bdc <xTaskIncrementTick+0x14c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	4b40      	ldr	r3, [pc, #256]	; (8006be0 <xTaskIncrementTick+0x150>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a3e      	ldr	r2, [pc, #248]	; (8006bdc <xTaskIncrementTick+0x14c>)
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	4a3e      	ldr	r2, [pc, #248]	; (8006be0 <xTaskIncrementTick+0x150>)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	4b3d      	ldr	r3, [pc, #244]	; (8006be4 <xTaskIncrementTick+0x154>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3301      	adds	r3, #1
 8006af2:	4a3c      	ldr	r2, [pc, #240]	; (8006be4 <xTaskIncrementTick+0x154>)
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	f000 faa9 	bl	800704c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006afa:	4b3b      	ldr	r3, [pc, #236]	; (8006be8 <xTaskIncrementTick+0x158>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d348      	bcc.n	8006b96 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b04:	4b35      	ldr	r3, [pc, #212]	; (8006bdc <xTaskIncrementTick+0x14c>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d104      	bne.n	8006b18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b0e:	4b36      	ldr	r3, [pc, #216]	; (8006be8 <xTaskIncrementTick+0x158>)
 8006b10:	f04f 32ff 	mov.w	r2, #4294967295
 8006b14:	601a      	str	r2, [r3, #0]
					break;
 8006b16:	e03e      	b.n	8006b96 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b18:	4b30      	ldr	r3, [pc, #192]	; (8006bdc <xTaskIncrementTick+0x14c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d203      	bcs.n	8006b38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b30:	4a2d      	ldr	r2, [pc, #180]	; (8006be8 <xTaskIncrementTick+0x158>)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b36:	e02e      	b.n	8006b96 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	3304      	adds	r3, #4
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7fe ffa9 	bl	8005a94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d004      	beq.n	8006b54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	3318      	adds	r3, #24
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fe ffa0 	bl	8005a94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b58:	2201      	movs	r2, #1
 8006b5a:	409a      	lsls	r2, r3
 8006b5c:	4b23      	ldr	r3, [pc, #140]	; (8006bec <xTaskIncrementTick+0x15c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	4a22      	ldr	r2, [pc, #136]	; (8006bec <xTaskIncrementTick+0x15c>)
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	4a1f      	ldr	r2, [pc, #124]	; (8006bf0 <xTaskIncrementTick+0x160>)
 8006b74:	441a      	add	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	f7fe ff2c 	bl	80059da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b86:	4b1b      	ldr	r3, [pc, #108]	; (8006bf4 <xTaskIncrementTick+0x164>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d3b9      	bcc.n	8006b04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b90:	2301      	movs	r3, #1
 8006b92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b94:	e7b6      	b.n	8006b04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b96:	4b17      	ldr	r3, [pc, #92]	; (8006bf4 <xTaskIncrementTick+0x164>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9c:	4914      	ldr	r1, [pc, #80]	; (8006bf0 <xTaskIncrementTick+0x160>)
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4413      	add	r3, r2
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	440b      	add	r3, r1
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d901      	bls.n	8006bb2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006bb2:	4b11      	ldr	r3, [pc, #68]	; (8006bf8 <xTaskIncrementTick+0x168>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d007      	beq.n	8006bca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	617b      	str	r3, [r7, #20]
 8006bbe:	e004      	b.n	8006bca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006bc0:	4b0e      	ldr	r3, [pc, #56]	; (8006bfc <xTaskIncrementTick+0x16c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	4a0d      	ldr	r2, [pc, #52]	; (8006bfc <xTaskIncrementTick+0x16c>)
 8006bc8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006bca:	697b      	ldr	r3, [r7, #20]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	200004c0 	.word	0x200004c0
 8006bd8:	2000049c 	.word	0x2000049c
 8006bdc:	20000450 	.word	0x20000450
 8006be0:	20000454 	.word	0x20000454
 8006be4:	200004b0 	.word	0x200004b0
 8006be8:	200004b8 	.word	0x200004b8
 8006bec:	200004a0 	.word	0x200004a0
 8006bf0:	2000039c 	.word	0x2000039c
 8006bf4:	20000398 	.word	0x20000398
 8006bf8:	200004ac 	.word	0x200004ac
 8006bfc:	200004a8 	.word	0x200004a8

08006c00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c00:	b480      	push	{r7}
 8006c02:	b087      	sub	sp, #28
 8006c04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c06:	4b29      	ldr	r3, [pc, #164]	; (8006cac <vTaskSwitchContext+0xac>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c0e:	4b28      	ldr	r3, [pc, #160]	; (8006cb0 <vTaskSwitchContext+0xb0>)
 8006c10:	2201      	movs	r2, #1
 8006c12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c14:	e044      	b.n	8006ca0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8006c16:	4b26      	ldr	r3, [pc, #152]	; (8006cb0 <vTaskSwitchContext+0xb0>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c1c:	4b25      	ldr	r3, [pc, #148]	; (8006cb4 <vTaskSwitchContext+0xb4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	fab3 f383 	clz	r3, r3
 8006c28:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006c2a:	7afb      	ldrb	r3, [r7, #11]
 8006c2c:	f1c3 031f 	rsb	r3, r3, #31
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	4921      	ldr	r1, [pc, #132]	; (8006cb8 <vTaskSwitchContext+0xb8>)
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	4613      	mov	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4413      	add	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	440b      	add	r3, r1
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d10a      	bne.n	8006c5c <vTaskSwitchContext+0x5c>
	__asm volatile
 8006c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4a:	f383 8811 	msr	BASEPRI, r3
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f3bf 8f4f 	dsb	sy
 8006c56:	607b      	str	r3, [r7, #4]
}
 8006c58:	bf00      	nop
 8006c5a:	e7fe      	b.n	8006c5a <vTaskSwitchContext+0x5a>
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4a14      	ldr	r2, [pc, #80]	; (8006cb8 <vTaskSwitchContext+0xb8>)
 8006c68:	4413      	add	r3, r2
 8006c6a:	613b      	str	r3, [r7, #16]
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	605a      	str	r2, [r3, #4]
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	685a      	ldr	r2, [r3, #4]
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	3308      	adds	r3, #8
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d104      	bne.n	8006c8c <vTaskSwitchContext+0x8c>
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	605a      	str	r2, [r3, #4]
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	4a0a      	ldr	r2, [pc, #40]	; (8006cbc <vTaskSwitchContext+0xbc>)
 8006c94:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c96:	4b09      	ldr	r3, [pc, #36]	; (8006cbc <vTaskSwitchContext+0xbc>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	334c      	adds	r3, #76	; 0x4c
 8006c9c:	4a08      	ldr	r2, [pc, #32]	; (8006cc0 <vTaskSwitchContext+0xc0>)
 8006c9e:	6013      	str	r3, [r2, #0]
}
 8006ca0:	bf00      	nop
 8006ca2:	371c      	adds	r7, #28
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	200004c0 	.word	0x200004c0
 8006cb0:	200004ac 	.word	0x200004ac
 8006cb4:	200004a0 	.word	0x200004a0
 8006cb8:	2000039c 	.word	0x2000039c
 8006cbc:	20000398 	.word	0x20000398
 8006cc0:	20000060 	.word	0x20000060

08006cc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d10a      	bne.n	8006cea <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	60fb      	str	r3, [r7, #12]
}
 8006ce6:	bf00      	nop
 8006ce8:	e7fe      	b.n	8006ce8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cea:	4b07      	ldr	r3, [pc, #28]	; (8006d08 <vTaskPlaceOnEventList+0x44>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	3318      	adds	r3, #24
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f7fe fe95 	bl	8005a22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cf8:	2101      	movs	r1, #1
 8006cfa:	6838      	ldr	r0, [r7, #0]
 8006cfc:	f000 fa6a 	bl	80071d4 <prvAddCurrentTaskToDelayedList>
}
 8006d00:	bf00      	nop
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20000398 	.word	0x20000398

08006d0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d10a      	bne.n	8006d38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	60fb      	str	r3, [r7, #12]
}
 8006d34:	bf00      	nop
 8006d36:	e7fe      	b.n	8006d36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	3318      	adds	r3, #24
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f7fe fea9 	bl	8005a94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d42:	4b1d      	ldr	r3, [pc, #116]	; (8006db8 <xTaskRemoveFromEventList+0xac>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d11c      	bne.n	8006d84 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe fea0 	bl	8005a94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d58:	2201      	movs	r2, #1
 8006d5a:	409a      	lsls	r2, r3
 8006d5c:	4b17      	ldr	r3, [pc, #92]	; (8006dbc <xTaskRemoveFromEventList+0xb0>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	4a16      	ldr	r2, [pc, #88]	; (8006dbc <xTaskRemoveFromEventList+0xb0>)
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4a13      	ldr	r2, [pc, #76]	; (8006dc0 <xTaskRemoveFromEventList+0xb4>)
 8006d74:	441a      	add	r2, r3
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	f7fe fe2c 	bl	80059da <vListInsertEnd>
 8006d82:	e005      	b.n	8006d90 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	3318      	adds	r3, #24
 8006d88:	4619      	mov	r1, r3
 8006d8a:	480e      	ldr	r0, [pc, #56]	; (8006dc4 <xTaskRemoveFromEventList+0xb8>)
 8006d8c:	f7fe fe25 	bl	80059da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d94:	4b0c      	ldr	r3, [pc, #48]	; (8006dc8 <xTaskRemoveFromEventList+0xbc>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d905      	bls.n	8006daa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006da2:	4b0a      	ldr	r3, [pc, #40]	; (8006dcc <xTaskRemoveFromEventList+0xc0>)
 8006da4:	2201      	movs	r2, #1
 8006da6:	601a      	str	r2, [r3, #0]
 8006da8:	e001      	b.n	8006dae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006daa:	2300      	movs	r3, #0
 8006dac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006dae:	697b      	ldr	r3, [r7, #20]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	200004c0 	.word	0x200004c0
 8006dbc:	200004a0 	.word	0x200004a0
 8006dc0:	2000039c 	.word	0x2000039c
 8006dc4:	20000458 	.word	0x20000458
 8006dc8:	20000398 	.word	0x20000398
 8006dcc:	200004ac 	.word	0x200004ac

08006dd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006dd8:	4b06      	ldr	r3, [pc, #24]	; (8006df4 <vTaskInternalSetTimeOutState+0x24>)
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006de0:	4b05      	ldr	r3, [pc, #20]	; (8006df8 <vTaskInternalSetTimeOutState+0x28>)
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	605a      	str	r2, [r3, #4]
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	200004b0 	.word	0x200004b0
 8006df8:	2000049c 	.word	0x2000049c

08006dfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b088      	sub	sp, #32
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10a      	bne.n	8006e22 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e10:	f383 8811 	msr	BASEPRI, r3
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	f3bf 8f4f 	dsb	sy
 8006e1c:	613b      	str	r3, [r7, #16]
}
 8006e1e:	bf00      	nop
 8006e20:	e7fe      	b.n	8006e20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10a      	bne.n	8006e3e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	60fb      	str	r3, [r7, #12]
}
 8006e3a:	bf00      	nop
 8006e3c:	e7fe      	b.n	8006e3c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006e3e:	f000 fb59 	bl	80074f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e42:	4b1d      	ldr	r3, [pc, #116]	; (8006eb8 <xTaskCheckForTimeOut+0xbc>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5a:	d102      	bne.n	8006e62 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	61fb      	str	r3, [r7, #28]
 8006e60:	e023      	b.n	8006eaa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	4b15      	ldr	r3, [pc, #84]	; (8006ebc <xTaskCheckForTimeOut+0xc0>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d007      	beq.n	8006e7e <xTaskCheckForTimeOut+0x82>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d302      	bcc.n	8006e7e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	61fb      	str	r3, [r7, #28]
 8006e7c:	e015      	b.n	8006eaa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d20b      	bcs.n	8006ea0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	1ad2      	subs	r2, r2, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7ff ff9b 	bl	8006dd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	61fb      	str	r3, [r7, #28]
 8006e9e:	e004      	b.n	8006eaa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006eaa:	f000 fb53 	bl	8007554 <vPortExitCritical>

	return xReturn;
 8006eae:	69fb      	ldr	r3, [r7, #28]
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3720      	adds	r7, #32
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	2000049c 	.word	0x2000049c
 8006ebc:	200004b0 	.word	0x200004b0

08006ec0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ec4:	4b03      	ldr	r3, [pc, #12]	; (8006ed4 <vTaskMissedYield+0x14>)
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	601a      	str	r2, [r3, #0]
}
 8006eca:	bf00      	nop
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr
 8006ed4:	200004ac 	.word	0x200004ac

08006ed8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ee0:	f000 f852 	bl	8006f88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ee4:	4b06      	ldr	r3, [pc, #24]	; (8006f00 <prvIdleTask+0x28>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d9f9      	bls.n	8006ee0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006eec:	4b05      	ldr	r3, [pc, #20]	; (8006f04 <prvIdleTask+0x2c>)
 8006eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006efc:	e7f0      	b.n	8006ee0 <prvIdleTask+0x8>
 8006efe:	bf00      	nop
 8006f00:	2000039c 	.word	0x2000039c
 8006f04:	e000ed04 	.word	0xe000ed04

08006f08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f0e:	2300      	movs	r3, #0
 8006f10:	607b      	str	r3, [r7, #4]
 8006f12:	e00c      	b.n	8006f2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	4613      	mov	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4a12      	ldr	r2, [pc, #72]	; (8006f68 <prvInitialiseTaskLists+0x60>)
 8006f20:	4413      	add	r3, r2
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fe fd2c 	bl	8005980 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	607b      	str	r3, [r7, #4]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b06      	cmp	r3, #6
 8006f32:	d9ef      	bls.n	8006f14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f34:	480d      	ldr	r0, [pc, #52]	; (8006f6c <prvInitialiseTaskLists+0x64>)
 8006f36:	f7fe fd23 	bl	8005980 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f3a:	480d      	ldr	r0, [pc, #52]	; (8006f70 <prvInitialiseTaskLists+0x68>)
 8006f3c:	f7fe fd20 	bl	8005980 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f40:	480c      	ldr	r0, [pc, #48]	; (8006f74 <prvInitialiseTaskLists+0x6c>)
 8006f42:	f7fe fd1d 	bl	8005980 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f46:	480c      	ldr	r0, [pc, #48]	; (8006f78 <prvInitialiseTaskLists+0x70>)
 8006f48:	f7fe fd1a 	bl	8005980 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f4c:	480b      	ldr	r0, [pc, #44]	; (8006f7c <prvInitialiseTaskLists+0x74>)
 8006f4e:	f7fe fd17 	bl	8005980 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f52:	4b0b      	ldr	r3, [pc, #44]	; (8006f80 <prvInitialiseTaskLists+0x78>)
 8006f54:	4a05      	ldr	r2, [pc, #20]	; (8006f6c <prvInitialiseTaskLists+0x64>)
 8006f56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f58:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <prvInitialiseTaskLists+0x7c>)
 8006f5a:	4a05      	ldr	r2, [pc, #20]	; (8006f70 <prvInitialiseTaskLists+0x68>)
 8006f5c:	601a      	str	r2, [r3, #0]
}
 8006f5e:	bf00      	nop
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	2000039c 	.word	0x2000039c
 8006f6c:	20000428 	.word	0x20000428
 8006f70:	2000043c 	.word	0x2000043c
 8006f74:	20000458 	.word	0x20000458
 8006f78:	2000046c 	.word	0x2000046c
 8006f7c:	20000484 	.word	0x20000484
 8006f80:	20000450 	.word	0x20000450
 8006f84:	20000454 	.word	0x20000454

08006f88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f8e:	e019      	b.n	8006fc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f90:	f000 fab0 	bl	80074f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f94:	4b10      	ldr	r3, [pc, #64]	; (8006fd8 <prvCheckTasksWaitingTermination+0x50>)
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fe fd77 	bl	8005a94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006fa6:	4b0d      	ldr	r3, [pc, #52]	; (8006fdc <prvCheckTasksWaitingTermination+0x54>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	4a0b      	ldr	r2, [pc, #44]	; (8006fdc <prvCheckTasksWaitingTermination+0x54>)
 8006fae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fb0:	4b0b      	ldr	r3, [pc, #44]	; (8006fe0 <prvCheckTasksWaitingTermination+0x58>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	4a0a      	ldr	r2, [pc, #40]	; (8006fe0 <prvCheckTasksWaitingTermination+0x58>)
 8006fb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fba:	f000 facb 	bl	8007554 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f810 	bl	8006fe4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fc4:	4b06      	ldr	r3, [pc, #24]	; (8006fe0 <prvCheckTasksWaitingTermination+0x58>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e1      	bne.n	8006f90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fcc:	bf00      	nop
 8006fce:	bf00      	nop
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	2000046c 	.word	0x2000046c
 8006fdc:	20000498 	.word	0x20000498
 8006fe0:	20000480 	.word	0x20000480

08006fe4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	334c      	adds	r3, #76	; 0x4c
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f001 fe55 	bl	8008ca0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d108      	bne.n	8007012 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007004:	4618      	mov	r0, r3
 8007006:	f000 fc63 	bl	80078d0 <vPortFree>
				vPortFree( pxTCB );
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fc60 	bl	80078d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007010:	e018      	b.n	8007044 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007018:	2b01      	cmp	r3, #1
 800701a:	d103      	bne.n	8007024 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fc57 	bl	80078d0 <vPortFree>
	}
 8007022:	e00f      	b.n	8007044 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800702a:	2b02      	cmp	r3, #2
 800702c:	d00a      	beq.n	8007044 <prvDeleteTCB+0x60>
	__asm volatile
 800702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007032:	f383 8811 	msr	BASEPRI, r3
 8007036:	f3bf 8f6f 	isb	sy
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	60fb      	str	r3, [r7, #12]
}
 8007040:	bf00      	nop
 8007042:	e7fe      	b.n	8007042 <prvDeleteTCB+0x5e>
	}
 8007044:	bf00      	nop
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007052:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <prvResetNextTaskUnblockTime+0x38>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d104      	bne.n	8007066 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800705c:	4b0a      	ldr	r3, [pc, #40]	; (8007088 <prvResetNextTaskUnblockTime+0x3c>)
 800705e:	f04f 32ff 	mov.w	r2, #4294967295
 8007062:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007064:	e008      	b.n	8007078 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007066:	4b07      	ldr	r3, [pc, #28]	; (8007084 <prvResetNextTaskUnblockTime+0x38>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	4a04      	ldr	r2, [pc, #16]	; (8007088 <prvResetNextTaskUnblockTime+0x3c>)
 8007076:	6013      	str	r3, [r2, #0]
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	20000450 	.word	0x20000450
 8007088:	200004b8 	.word	0x200004b8

0800708c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007092:	4b0b      	ldr	r3, [pc, #44]	; (80070c0 <xTaskGetSchedulerState+0x34>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d102      	bne.n	80070a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800709a:	2301      	movs	r3, #1
 800709c:	607b      	str	r3, [r7, #4]
 800709e:	e008      	b.n	80070b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070a0:	4b08      	ldr	r3, [pc, #32]	; (80070c4 <xTaskGetSchedulerState+0x38>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d102      	bne.n	80070ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070a8:	2302      	movs	r3, #2
 80070aa:	607b      	str	r3, [r7, #4]
 80070ac:	e001      	b.n	80070b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070ae:	2300      	movs	r3, #0
 80070b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070b2:	687b      	ldr	r3, [r7, #4]
	}
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr
 80070c0:	200004a4 	.word	0x200004a4
 80070c4:	200004c0 	.word	0x200004c0

080070c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070d4:	2300      	movs	r3, #0
 80070d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d06e      	beq.n	80071bc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070de:	4b3a      	ldr	r3, [pc, #232]	; (80071c8 <xTaskPriorityDisinherit+0x100>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d00a      	beq.n	80070fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80070e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	60fb      	str	r3, [r7, #12]
}
 80070fa:	bf00      	nop
 80070fc:	e7fe      	b.n	80070fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10a      	bne.n	800711c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	60bb      	str	r3, [r7, #8]
}
 8007118:	bf00      	nop
 800711a:	e7fe      	b.n	800711a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007120:	1e5a      	subs	r2, r3, #1
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712e:	429a      	cmp	r2, r3
 8007130:	d044      	beq.n	80071bc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007136:	2b00      	cmp	r3, #0
 8007138:	d140      	bne.n	80071bc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	3304      	adds	r3, #4
 800713e:	4618      	mov	r0, r3
 8007140:	f7fe fca8 	bl	8005a94 <uxListRemove>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d115      	bne.n	8007176 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800714a:	693b      	ldr	r3, [r7, #16]
 800714c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800714e:	491f      	ldr	r1, [pc, #124]	; (80071cc <xTaskPriorityDisinherit+0x104>)
 8007150:	4613      	mov	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	440b      	add	r3, r1
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d10a      	bne.n	8007176 <xTaskPriorityDisinherit+0xae>
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007164:	2201      	movs	r2, #1
 8007166:	fa02 f303 	lsl.w	r3, r2, r3
 800716a:	43da      	mvns	r2, r3
 800716c:	4b18      	ldr	r3, [pc, #96]	; (80071d0 <xTaskPriorityDisinherit+0x108>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4013      	ands	r3, r2
 8007172:	4a17      	ldr	r2, [pc, #92]	; (80071d0 <xTaskPriorityDisinherit+0x108>)
 8007174:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	f1c3 0207 	rsb	r2, r3, #7
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	2201      	movs	r2, #1
 8007190:	409a      	lsls	r2, r3
 8007192:	4b0f      	ldr	r3, [pc, #60]	; (80071d0 <xTaskPriorityDisinherit+0x108>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4313      	orrs	r3, r2
 8007198:	4a0d      	ldr	r2, [pc, #52]	; (80071d0 <xTaskPriorityDisinherit+0x108>)
 800719a:	6013      	str	r3, [r2, #0]
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071a0:	4613      	mov	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4a08      	ldr	r2, [pc, #32]	; (80071cc <xTaskPriorityDisinherit+0x104>)
 80071aa:	441a      	add	r2, r3
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	3304      	adds	r3, #4
 80071b0:	4619      	mov	r1, r3
 80071b2:	4610      	mov	r0, r2
 80071b4:	f7fe fc11 	bl	80059da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071b8:	2301      	movs	r3, #1
 80071ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071bc:	697b      	ldr	r3, [r7, #20]
	}
 80071be:	4618      	mov	r0, r3
 80071c0:	3718      	adds	r7, #24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20000398 	.word	0x20000398
 80071cc:	2000039c 	.word	0x2000039c
 80071d0:	200004a0 	.word	0x200004a0

080071d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071de:	4b29      	ldr	r3, [pc, #164]	; (8007284 <prvAddCurrentTaskToDelayedList+0xb0>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071e4:	4b28      	ldr	r3, [pc, #160]	; (8007288 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3304      	adds	r3, #4
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7fe fc52 	bl	8005a94 <uxListRemove>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10b      	bne.n	800720e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80071f6:	4b24      	ldr	r3, [pc, #144]	; (8007288 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fc:	2201      	movs	r2, #1
 80071fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007202:	43da      	mvns	r2, r3
 8007204:	4b21      	ldr	r3, [pc, #132]	; (800728c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4013      	ands	r3, r2
 800720a:	4a20      	ldr	r2, [pc, #128]	; (800728c <prvAddCurrentTaskToDelayedList+0xb8>)
 800720c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007214:	d10a      	bne.n	800722c <prvAddCurrentTaskToDelayedList+0x58>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d007      	beq.n	800722c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800721c:	4b1a      	ldr	r3, [pc, #104]	; (8007288 <prvAddCurrentTaskToDelayedList+0xb4>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	3304      	adds	r3, #4
 8007222:	4619      	mov	r1, r3
 8007224:	481a      	ldr	r0, [pc, #104]	; (8007290 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007226:	f7fe fbd8 	bl	80059da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800722a:	e026      	b.n	800727a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4413      	add	r3, r2
 8007232:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007234:	4b14      	ldr	r3, [pc, #80]	; (8007288 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	429a      	cmp	r2, r3
 8007242:	d209      	bcs.n	8007258 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007244:	4b13      	ldr	r3, [pc, #76]	; (8007294 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	4b0f      	ldr	r3, [pc, #60]	; (8007288 <prvAddCurrentTaskToDelayedList+0xb4>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3304      	adds	r3, #4
 800724e:	4619      	mov	r1, r3
 8007250:	4610      	mov	r0, r2
 8007252:	f7fe fbe6 	bl	8005a22 <vListInsert>
}
 8007256:	e010      	b.n	800727a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007258:	4b0f      	ldr	r3, [pc, #60]	; (8007298 <prvAddCurrentTaskToDelayedList+0xc4>)
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	4b0a      	ldr	r3, [pc, #40]	; (8007288 <prvAddCurrentTaskToDelayedList+0xb4>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3304      	adds	r3, #4
 8007262:	4619      	mov	r1, r3
 8007264:	4610      	mov	r0, r2
 8007266:	f7fe fbdc 	bl	8005a22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800726a:	4b0c      	ldr	r3, [pc, #48]	; (800729c <prvAddCurrentTaskToDelayedList+0xc8>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	429a      	cmp	r2, r3
 8007272:	d202      	bcs.n	800727a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007274:	4a09      	ldr	r2, [pc, #36]	; (800729c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	6013      	str	r3, [r2, #0]
}
 800727a:	bf00      	nop
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	2000049c 	.word	0x2000049c
 8007288:	20000398 	.word	0x20000398
 800728c:	200004a0 	.word	0x200004a0
 8007290:	20000484 	.word	0x20000484
 8007294:	20000454 	.word	0x20000454
 8007298:	20000450 	.word	0x20000450
 800729c:	200004b8 	.word	0x200004b8

080072a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	3b04      	subs	r3, #4
 80072b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3b04      	subs	r3, #4
 80072be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f023 0201 	bic.w	r2, r3, #1
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	3b04      	subs	r3, #4
 80072ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072d0:	4a0c      	ldr	r2, [pc, #48]	; (8007304 <pxPortInitialiseStack+0x64>)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	3b14      	subs	r3, #20
 80072da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3b04      	subs	r3, #4
 80072e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f06f 0202 	mvn.w	r2, #2
 80072ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3b20      	subs	r3, #32
 80072f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072f6:	68fb      	ldr	r3, [r7, #12]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	08007309 	.word	0x08007309

08007308 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007312:	4b12      	ldr	r3, [pc, #72]	; (800735c <prvTaskExitError+0x54>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731a:	d00a      	beq.n	8007332 <prvTaskExitError+0x2a>
	__asm volatile
 800731c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007320:	f383 8811 	msr	BASEPRI, r3
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	60fb      	str	r3, [r7, #12]
}
 800732e:	bf00      	nop
 8007330:	e7fe      	b.n	8007330 <prvTaskExitError+0x28>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	60bb      	str	r3, [r7, #8]
}
 8007344:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007346:	bf00      	nop
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0fc      	beq.n	8007348 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800734e:	bf00      	nop
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	2000005c 	.word	0x2000005c

08007360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007360:	4b07      	ldr	r3, [pc, #28]	; (8007380 <pxCurrentTCBConst2>)
 8007362:	6819      	ldr	r1, [r3, #0]
 8007364:	6808      	ldr	r0, [r1, #0]
 8007366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736a:	f380 8809 	msr	PSP, r0
 800736e:	f3bf 8f6f 	isb	sy
 8007372:	f04f 0000 	mov.w	r0, #0
 8007376:	f380 8811 	msr	BASEPRI, r0
 800737a:	4770      	bx	lr
 800737c:	f3af 8000 	nop.w

08007380 <pxCurrentTCBConst2>:
 8007380:	20000398 	.word	0x20000398
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007384:	bf00      	nop
 8007386:	bf00      	nop

08007388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007388:	4808      	ldr	r0, [pc, #32]	; (80073ac <prvPortStartFirstTask+0x24>)
 800738a:	6800      	ldr	r0, [r0, #0]
 800738c:	6800      	ldr	r0, [r0, #0]
 800738e:	f380 8808 	msr	MSP, r0
 8007392:	f04f 0000 	mov.w	r0, #0
 8007396:	f380 8814 	msr	CONTROL, r0
 800739a:	b662      	cpsie	i
 800739c:	b661      	cpsie	f
 800739e:	f3bf 8f4f 	dsb	sy
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	df00      	svc	0
 80073a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073aa:	bf00      	nop
 80073ac:	e000ed08 	.word	0xe000ed08

080073b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073b6:	4b46      	ldr	r3, [pc, #280]	; (80074d0 <xPortStartScheduler+0x120>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a46      	ldr	r2, [pc, #280]	; (80074d4 <xPortStartScheduler+0x124>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d10a      	bne.n	80073d6 <xPortStartScheduler+0x26>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	613b      	str	r3, [r7, #16]
}
 80073d2:	bf00      	nop
 80073d4:	e7fe      	b.n	80073d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073d6:	4b3e      	ldr	r3, [pc, #248]	; (80074d0 <xPortStartScheduler+0x120>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a3f      	ldr	r2, [pc, #252]	; (80074d8 <xPortStartScheduler+0x128>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d10a      	bne.n	80073f6 <xPortStartScheduler+0x46>
	__asm volatile
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	60fb      	str	r3, [r7, #12]
}
 80073f2:	bf00      	nop
 80073f4:	e7fe      	b.n	80073f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80073f6:	4b39      	ldr	r3, [pc, #228]	; (80074dc <xPortStartScheduler+0x12c>)
 80073f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	22ff      	movs	r2, #255	; 0xff
 8007406:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	b2db      	uxtb	r3, r3
 800740e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007410:	78fb      	ldrb	r3, [r7, #3]
 8007412:	b2db      	uxtb	r3, r3
 8007414:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007418:	b2da      	uxtb	r2, r3
 800741a:	4b31      	ldr	r3, [pc, #196]	; (80074e0 <xPortStartScheduler+0x130>)
 800741c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800741e:	4b31      	ldr	r3, [pc, #196]	; (80074e4 <xPortStartScheduler+0x134>)
 8007420:	2207      	movs	r2, #7
 8007422:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007424:	e009      	b.n	800743a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007426:	4b2f      	ldr	r3, [pc, #188]	; (80074e4 <xPortStartScheduler+0x134>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3b01      	subs	r3, #1
 800742c:	4a2d      	ldr	r2, [pc, #180]	; (80074e4 <xPortStartScheduler+0x134>)
 800742e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	b2db      	uxtb	r3, r3
 8007434:	005b      	lsls	r3, r3, #1
 8007436:	b2db      	uxtb	r3, r3
 8007438:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800743a:	78fb      	ldrb	r3, [r7, #3]
 800743c:	b2db      	uxtb	r3, r3
 800743e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007442:	2b80      	cmp	r3, #128	; 0x80
 8007444:	d0ef      	beq.n	8007426 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007446:	4b27      	ldr	r3, [pc, #156]	; (80074e4 <xPortStartScheduler+0x134>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f1c3 0307 	rsb	r3, r3, #7
 800744e:	2b04      	cmp	r3, #4
 8007450:	d00a      	beq.n	8007468 <xPortStartScheduler+0xb8>
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	60bb      	str	r3, [r7, #8]
}
 8007464:	bf00      	nop
 8007466:	e7fe      	b.n	8007466 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007468:	4b1e      	ldr	r3, [pc, #120]	; (80074e4 <xPortStartScheduler+0x134>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	021b      	lsls	r3, r3, #8
 800746e:	4a1d      	ldr	r2, [pc, #116]	; (80074e4 <xPortStartScheduler+0x134>)
 8007470:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007472:	4b1c      	ldr	r3, [pc, #112]	; (80074e4 <xPortStartScheduler+0x134>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800747a:	4a1a      	ldr	r2, [pc, #104]	; (80074e4 <xPortStartScheduler+0x134>)
 800747c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	b2da      	uxtb	r2, r3
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007486:	4b18      	ldr	r3, [pc, #96]	; (80074e8 <xPortStartScheduler+0x138>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a17      	ldr	r2, [pc, #92]	; (80074e8 <xPortStartScheduler+0x138>)
 800748c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007490:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007492:	4b15      	ldr	r3, [pc, #84]	; (80074e8 <xPortStartScheduler+0x138>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4a14      	ldr	r2, [pc, #80]	; (80074e8 <xPortStartScheduler+0x138>)
 8007498:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800749c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800749e:	f000 f8dd 	bl	800765c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074a2:	4b12      	ldr	r3, [pc, #72]	; (80074ec <xPortStartScheduler+0x13c>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074a8:	f000 f8fc 	bl	80076a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074ac:	4b10      	ldr	r3, [pc, #64]	; (80074f0 <xPortStartScheduler+0x140>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a0f      	ldr	r2, [pc, #60]	; (80074f0 <xPortStartScheduler+0x140>)
 80074b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80074b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074b8:	f7ff ff66 	bl	8007388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074bc:	f7ff fba0 	bl	8006c00 <vTaskSwitchContext>
	prvTaskExitError();
 80074c0:	f7ff ff22 	bl	8007308 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	e000ed00 	.word	0xe000ed00
 80074d4:	410fc271 	.word	0x410fc271
 80074d8:	410fc270 	.word	0x410fc270
 80074dc:	e000e400 	.word	0xe000e400
 80074e0:	200004c4 	.word	0x200004c4
 80074e4:	200004c8 	.word	0x200004c8
 80074e8:	e000ed20 	.word	0xe000ed20
 80074ec:	2000005c 	.word	0x2000005c
 80074f0:	e000ef34 	.word	0xe000ef34

080074f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
	__asm volatile
 80074fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	607b      	str	r3, [r7, #4]
}
 800750c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800750e:	4b0f      	ldr	r3, [pc, #60]	; (800754c <vPortEnterCritical+0x58>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3301      	adds	r3, #1
 8007514:	4a0d      	ldr	r2, [pc, #52]	; (800754c <vPortEnterCritical+0x58>)
 8007516:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007518:	4b0c      	ldr	r3, [pc, #48]	; (800754c <vPortEnterCritical+0x58>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d10f      	bne.n	8007540 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007520:	4b0b      	ldr	r3, [pc, #44]	; (8007550 <vPortEnterCritical+0x5c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00a      	beq.n	8007540 <vPortEnterCritical+0x4c>
	__asm volatile
 800752a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752e:	f383 8811 	msr	BASEPRI, r3
 8007532:	f3bf 8f6f 	isb	sy
 8007536:	f3bf 8f4f 	dsb	sy
 800753a:	603b      	str	r3, [r7, #0]
}
 800753c:	bf00      	nop
 800753e:	e7fe      	b.n	800753e <vPortEnterCritical+0x4a>
	}
}
 8007540:	bf00      	nop
 8007542:	370c      	adds	r7, #12
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	2000005c 	.word	0x2000005c
 8007550:	e000ed04 	.word	0xe000ed04

08007554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007554:	b480      	push	{r7}
 8007556:	b083      	sub	sp, #12
 8007558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800755a:	4b12      	ldr	r3, [pc, #72]	; (80075a4 <vPortExitCritical+0x50>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10a      	bne.n	8007578 <vPortExitCritical+0x24>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	607b      	str	r3, [r7, #4]
}
 8007574:	bf00      	nop
 8007576:	e7fe      	b.n	8007576 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007578:	4b0a      	ldr	r3, [pc, #40]	; (80075a4 <vPortExitCritical+0x50>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3b01      	subs	r3, #1
 800757e:	4a09      	ldr	r2, [pc, #36]	; (80075a4 <vPortExitCritical+0x50>)
 8007580:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007582:	4b08      	ldr	r3, [pc, #32]	; (80075a4 <vPortExitCritical+0x50>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d105      	bne.n	8007596 <vPortExitCritical+0x42>
 800758a:	2300      	movs	r3, #0
 800758c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	f383 8811 	msr	BASEPRI, r3
}
 8007594:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	2000005c 	.word	0x2000005c
	...

080075b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075b0:	f3ef 8009 	mrs	r0, PSP
 80075b4:	f3bf 8f6f 	isb	sy
 80075b8:	4b15      	ldr	r3, [pc, #84]	; (8007610 <pxCurrentTCBConst>)
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	f01e 0f10 	tst.w	lr, #16
 80075c0:	bf08      	it	eq
 80075c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ca:	6010      	str	r0, [r2, #0]
 80075cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075d4:	f380 8811 	msr	BASEPRI, r0
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f7ff fb0e 	bl	8006c00 <vTaskSwitchContext>
 80075e4:	f04f 0000 	mov.w	r0, #0
 80075e8:	f380 8811 	msr	BASEPRI, r0
 80075ec:	bc09      	pop	{r0, r3}
 80075ee:	6819      	ldr	r1, [r3, #0]
 80075f0:	6808      	ldr	r0, [r1, #0]
 80075f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f6:	f01e 0f10 	tst.w	lr, #16
 80075fa:	bf08      	it	eq
 80075fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007600:	f380 8809 	msr	PSP, r0
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	f3af 8000 	nop.w

08007610 <pxCurrentTCBConst>:
 8007610:	20000398 	.word	0x20000398
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop

08007618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	607b      	str	r3, [r7, #4]
}
 8007630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007632:	f7ff fa2d 	bl	8006a90 <xTaskIncrementTick>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d003      	beq.n	8007644 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800763c:	4b06      	ldr	r3, [pc, #24]	; (8007658 <SysTick_Handler+0x40>)
 800763e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	2300      	movs	r3, #0
 8007646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	f383 8811 	msr	BASEPRI, r3
}
 800764e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007650:	bf00      	nop
 8007652:	3708      	adds	r7, #8
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	e000ed04 	.word	0xe000ed04

0800765c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800765c:	b480      	push	{r7}
 800765e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007660:	4b0b      	ldr	r3, [pc, #44]	; (8007690 <vPortSetupTimerInterrupt+0x34>)
 8007662:	2200      	movs	r2, #0
 8007664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007666:	4b0b      	ldr	r3, [pc, #44]	; (8007694 <vPortSetupTimerInterrupt+0x38>)
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800766c:	4b0a      	ldr	r3, [pc, #40]	; (8007698 <vPortSetupTimerInterrupt+0x3c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a0a      	ldr	r2, [pc, #40]	; (800769c <vPortSetupTimerInterrupt+0x40>)
 8007672:	fba2 2303 	umull	r2, r3, r2, r3
 8007676:	099b      	lsrs	r3, r3, #6
 8007678:	4a09      	ldr	r2, [pc, #36]	; (80076a0 <vPortSetupTimerInterrupt+0x44>)
 800767a:	3b01      	subs	r3, #1
 800767c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800767e:	4b04      	ldr	r3, [pc, #16]	; (8007690 <vPortSetupTimerInterrupt+0x34>)
 8007680:	2207      	movs	r2, #7
 8007682:	601a      	str	r2, [r3, #0]
}
 8007684:	bf00      	nop
 8007686:	46bd      	mov	sp, r7
 8007688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	e000e010 	.word	0xe000e010
 8007694:	e000e018 	.word	0xe000e018
 8007698:	20000050 	.word	0x20000050
 800769c:	10624dd3 	.word	0x10624dd3
 80076a0:	e000e014 	.word	0xe000e014

080076a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80076b4 <vPortEnableVFP+0x10>
 80076a8:	6801      	ldr	r1, [r0, #0]
 80076aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80076ae:	6001      	str	r1, [r0, #0]
 80076b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80076b2:	bf00      	nop
 80076b4:	e000ed88 	.word	0xe000ed88

080076b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076be:	f3ef 8305 	mrs	r3, IPSR
 80076c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2b0f      	cmp	r3, #15
 80076c8:	d914      	bls.n	80076f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076ca:	4a17      	ldr	r2, [pc, #92]	; (8007728 <vPortValidateInterruptPriority+0x70>)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4413      	add	r3, r2
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076d4:	4b15      	ldr	r3, [pc, #84]	; (800772c <vPortValidateInterruptPriority+0x74>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	7afa      	ldrb	r2, [r7, #11]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d20a      	bcs.n	80076f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	607b      	str	r3, [r7, #4]
}
 80076f0:	bf00      	nop
 80076f2:	e7fe      	b.n	80076f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80076f4:	4b0e      	ldr	r3, [pc, #56]	; (8007730 <vPortValidateInterruptPriority+0x78>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80076fc:	4b0d      	ldr	r3, [pc, #52]	; (8007734 <vPortValidateInterruptPriority+0x7c>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	429a      	cmp	r2, r3
 8007702:	d90a      	bls.n	800771a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	603b      	str	r3, [r7, #0]
}
 8007716:	bf00      	nop
 8007718:	e7fe      	b.n	8007718 <vPortValidateInterruptPriority+0x60>
	}
 800771a:	bf00      	nop
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	e000e3f0 	.word	0xe000e3f0
 800772c:	200004c4 	.word	0x200004c4
 8007730:	e000ed0c 	.word	0xe000ed0c
 8007734:	200004c8 	.word	0x200004c8

08007738 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08a      	sub	sp, #40	; 0x28
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007740:	2300      	movs	r3, #0
 8007742:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007744:	f7ff f8fa 	bl	800693c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007748:	4b5b      	ldr	r3, [pc, #364]	; (80078b8 <pvPortMalloc+0x180>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007750:	f000 f920 	bl	8007994 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007754:	4b59      	ldr	r3, [pc, #356]	; (80078bc <pvPortMalloc+0x184>)
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4013      	ands	r3, r2
 800775c:	2b00      	cmp	r3, #0
 800775e:	f040 8093 	bne.w	8007888 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d01d      	beq.n	80077a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007768:	2208      	movs	r2, #8
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4413      	add	r3, r2
 800776e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f003 0307 	and.w	r3, r3, #7
 8007776:	2b00      	cmp	r3, #0
 8007778:	d014      	beq.n	80077a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f023 0307 	bic.w	r3, r3, #7
 8007780:	3308      	adds	r3, #8
 8007782:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00a      	beq.n	80077a4 <pvPortMalloc+0x6c>
	__asm volatile
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	f383 8811 	msr	BASEPRI, r3
 8007796:	f3bf 8f6f 	isb	sy
 800779a:	f3bf 8f4f 	dsb	sy
 800779e:	617b      	str	r3, [r7, #20]
}
 80077a0:	bf00      	nop
 80077a2:	e7fe      	b.n	80077a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d06e      	beq.n	8007888 <pvPortMalloc+0x150>
 80077aa:	4b45      	ldr	r3, [pc, #276]	; (80078c0 <pvPortMalloc+0x188>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d869      	bhi.n	8007888 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077b4:	4b43      	ldr	r3, [pc, #268]	; (80078c4 <pvPortMalloc+0x18c>)
 80077b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077b8:	4b42      	ldr	r3, [pc, #264]	; (80078c4 <pvPortMalloc+0x18c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077be:	e004      	b.n	80077ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d903      	bls.n	80077dc <pvPortMalloc+0xa4>
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1f1      	bne.n	80077c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077dc:	4b36      	ldr	r3, [pc, #216]	; (80078b8 <pvPortMalloc+0x180>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d050      	beq.n	8007888 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80077e6:	6a3b      	ldr	r3, [r7, #32]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2208      	movs	r2, #8
 80077ec:	4413      	add	r3, r2
 80077ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	6a3b      	ldr	r3, [r7, #32]
 80077f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	685a      	ldr	r2, [r3, #4]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	1ad2      	subs	r2, r2, r3
 8007800:	2308      	movs	r3, #8
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	429a      	cmp	r2, r3
 8007806:	d91f      	bls.n	8007848 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4413      	add	r3, r2
 800780e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	f003 0307 	and.w	r3, r3, #7
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <pvPortMalloc+0xf8>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	613b      	str	r3, [r7, #16]
}
 800782c:	bf00      	nop
 800782e:	e7fe      	b.n	800782e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	1ad2      	subs	r2, r2, r3
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007842:	69b8      	ldr	r0, [r7, #24]
 8007844:	f000 f908 	bl	8007a58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007848:	4b1d      	ldr	r3, [pc, #116]	; (80078c0 <pvPortMalloc+0x188>)
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	4a1b      	ldr	r2, [pc, #108]	; (80078c0 <pvPortMalloc+0x188>)
 8007854:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007856:	4b1a      	ldr	r3, [pc, #104]	; (80078c0 <pvPortMalloc+0x188>)
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	4b1b      	ldr	r3, [pc, #108]	; (80078c8 <pvPortMalloc+0x190>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	429a      	cmp	r2, r3
 8007860:	d203      	bcs.n	800786a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007862:	4b17      	ldr	r3, [pc, #92]	; (80078c0 <pvPortMalloc+0x188>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a18      	ldr	r2, [pc, #96]	; (80078c8 <pvPortMalloc+0x190>)
 8007868:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	4b13      	ldr	r3, [pc, #76]	; (80078bc <pvPortMalloc+0x184>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	431a      	orrs	r2, r3
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800787e:	4b13      	ldr	r3, [pc, #76]	; (80078cc <pvPortMalloc+0x194>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3301      	adds	r3, #1
 8007884:	4a11      	ldr	r2, [pc, #68]	; (80078cc <pvPortMalloc+0x194>)
 8007886:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007888:	f7ff f866 	bl	8006958 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	f003 0307 	and.w	r3, r3, #7
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00a      	beq.n	80078ac <pvPortMalloc+0x174>
	__asm volatile
 8007896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789a:	f383 8811 	msr	BASEPRI, r3
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f3bf 8f4f 	dsb	sy
 80078a6:	60fb      	str	r3, [r7, #12]
}
 80078a8:	bf00      	nop
 80078aa:	e7fe      	b.n	80078aa <pvPortMalloc+0x172>
	return pvReturn;
 80078ac:	69fb      	ldr	r3, [r7, #28]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3728      	adds	r7, #40	; 0x28
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	200040d4 	.word	0x200040d4
 80078bc:	200040e8 	.word	0x200040e8
 80078c0:	200040d8 	.word	0x200040d8
 80078c4:	200040cc 	.word	0x200040cc
 80078c8:	200040dc 	.word	0x200040dc
 80078cc:	200040e0 	.word	0x200040e0

080078d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b086      	sub	sp, #24
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d04d      	beq.n	800797e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80078e2:	2308      	movs	r3, #8
 80078e4:	425b      	negs	r3, r3
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	4413      	add	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	4b24      	ldr	r3, [pc, #144]	; (8007988 <vPortFree+0xb8>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4013      	ands	r3, r2
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d10a      	bne.n	8007914 <vPortFree+0x44>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	60fb      	str	r3, [r7, #12]
}
 8007910:	bf00      	nop
 8007912:	e7fe      	b.n	8007912 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <vPortFree+0x62>
	__asm volatile
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	60bb      	str	r3, [r7, #8]
}
 800792e:	bf00      	nop
 8007930:	e7fe      	b.n	8007930 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	4b14      	ldr	r3, [pc, #80]	; (8007988 <vPortFree+0xb8>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4013      	ands	r3, r2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01e      	beq.n	800797e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d11a      	bne.n	800797e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	685a      	ldr	r2, [r3, #4]
 800794c:	4b0e      	ldr	r3, [pc, #56]	; (8007988 <vPortFree+0xb8>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	43db      	mvns	r3, r3
 8007952:	401a      	ands	r2, r3
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007958:	f7fe fff0 	bl	800693c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	4b0a      	ldr	r3, [pc, #40]	; (800798c <vPortFree+0xbc>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4413      	add	r3, r2
 8007966:	4a09      	ldr	r2, [pc, #36]	; (800798c <vPortFree+0xbc>)
 8007968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800796a:	6938      	ldr	r0, [r7, #16]
 800796c:	f000 f874 	bl	8007a58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007970:	4b07      	ldr	r3, [pc, #28]	; (8007990 <vPortFree+0xc0>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3301      	adds	r3, #1
 8007976:	4a06      	ldr	r2, [pc, #24]	; (8007990 <vPortFree+0xc0>)
 8007978:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800797a:	f7fe ffed 	bl	8006958 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800797e:	bf00      	nop
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	200040e8 	.word	0x200040e8
 800798c:	200040d8 	.word	0x200040d8
 8007990:	200040e4 	.word	0x200040e4

08007994 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800799a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800799e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079a0:	4b27      	ldr	r3, [pc, #156]	; (8007a40 <prvHeapInit+0xac>)
 80079a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f003 0307 	and.w	r3, r3, #7
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00c      	beq.n	80079c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	3307      	adds	r3, #7
 80079b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0307 	bic.w	r3, r3, #7
 80079ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	4a1f      	ldr	r2, [pc, #124]	; (8007a40 <prvHeapInit+0xac>)
 80079c4:	4413      	add	r3, r2
 80079c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079cc:	4a1d      	ldr	r2, [pc, #116]	; (8007a44 <prvHeapInit+0xb0>)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079d2:	4b1c      	ldr	r3, [pc, #112]	; (8007a44 <prvHeapInit+0xb0>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68ba      	ldr	r2, [r7, #8]
 80079dc:	4413      	add	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80079e0:	2208      	movs	r2, #8
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	1a9b      	subs	r3, r3, r2
 80079e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f023 0307 	bic.w	r3, r3, #7
 80079ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	4a15      	ldr	r2, [pc, #84]	; (8007a48 <prvHeapInit+0xb4>)
 80079f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80079f6:	4b14      	ldr	r3, [pc, #80]	; (8007a48 <prvHeapInit+0xb4>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2200      	movs	r2, #0
 80079fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80079fe:	4b12      	ldr	r3, [pc, #72]	; (8007a48 <prvHeapInit+0xb4>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	1ad2      	subs	r2, r2, r3
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a14:	4b0c      	ldr	r3, [pc, #48]	; (8007a48 <prvHeapInit+0xb4>)
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	4a0a      	ldr	r2, [pc, #40]	; (8007a4c <prvHeapInit+0xb8>)
 8007a22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	4a09      	ldr	r2, [pc, #36]	; (8007a50 <prvHeapInit+0xbc>)
 8007a2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a2c:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <prvHeapInit+0xc0>)
 8007a2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a32:	601a      	str	r2, [r3, #0]
}
 8007a34:	bf00      	nop
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	200004cc 	.word	0x200004cc
 8007a44:	200040cc 	.word	0x200040cc
 8007a48:	200040d4 	.word	0x200040d4
 8007a4c:	200040dc 	.word	0x200040dc
 8007a50:	200040d8 	.word	0x200040d8
 8007a54:	200040e8 	.word	0x200040e8

08007a58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a60:	4b28      	ldr	r3, [pc, #160]	; (8007b04 <prvInsertBlockIntoFreeList+0xac>)
 8007a62:	60fb      	str	r3, [r7, #12]
 8007a64:	e002      	b.n	8007a6c <prvInsertBlockIntoFreeList+0x14>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60fb      	str	r3, [r7, #12]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d8f7      	bhi.n	8007a66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	4413      	add	r3, r2
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d108      	bne.n	8007a9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	441a      	add	r2, r3
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	441a      	add	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d118      	bne.n	8007ae0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	4b15      	ldr	r3, [pc, #84]	; (8007b08 <prvInsertBlockIntoFreeList+0xb0>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d00d      	beq.n	8007ad6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	685a      	ldr	r2, [r3, #4]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	441a      	add	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	e008      	b.n	8007ae8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ad6:	4b0c      	ldr	r3, [pc, #48]	; (8007b08 <prvInsertBlockIntoFreeList+0xb0>)
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	e003      	b.n	8007ae8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d002      	beq.n	8007af6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	687a      	ldr	r2, [r7, #4]
 8007af4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007af6:	bf00      	nop
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	200040cc 	.word	0x200040cc
 8007b08:	200040d4 	.word	0x200040d4

08007b0c <lwJsonWriteStart>:
static int lwJsonCheckWriteError(LwJsonMsg *msg);
static int lwJsonAddNameAndValuePair(LwJsonMsg *msg, const char *name, LwJsonValueType type, LwJsonValue *value);
static int lwJsonAddValueToArray(LwJsonMsg *msg, LwJsonValueType type, LwJsonValue *value);
static int lwJsonIsValidUTF8String(const char *string);

int lwJsonWriteStart(LwJsonMsg *msg) {
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
    if (msg == NULL) {
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d102      	bne.n	8007b20 <lwJsonWriteStart+0x14>
        return -EINVAL;
 8007b1a:	f06f 0315 	mvn.w	r3, #21
 8007b1e:	e00d      	b.n	8007b3c <lwJsonWriteStart+0x30>
    }
    if (msg->string == NULL) {
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d102      	bne.n	8007b2e <lwJsonWriteStart+0x22>
        return -EINVAL;
 8007b28:	f06f 0315 	mvn.w	r3, #21
 8007b2c:	e006      	b.n	8007b3c <lwJsonWriteStart+0x30>
    }

    msg->_offset = 0;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	609a      	str	r2, [r3, #8]
    msg->_lastError = 0;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	60da      	str	r2, [r3, #12]
    return 0;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <lwJsonWriteEnd>:

int lwJsonWriteEnd(LwJsonMsg *msg) {
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
    if (msg == NULL) {
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d102      	bne.n	8007b5c <lwJsonWriteEnd+0x14>
        return -EPERM;
 8007b56:	f04f 33ff 	mov.w	r3, #4294967295
 8007b5a:	e015      	b.n	8007b88 <lwJsonWriteEnd+0x40>
    }
    if (msg->string == NULL) {
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d102      	bne.n	8007b6a <lwJsonWriteEnd+0x22>
        return -EINVAL;
 8007b64:	f06f 0315 	mvn.w	r3, #21
 8007b68:	e00e      	b.n	8007b88 <lwJsonWriteEnd+0x40>
    }

    if (msg->_lastError < 0) {
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	da02      	bge.n	8007b78 <lwJsonWriteEnd+0x30>
        return msg->_lastError;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	e007      	b.n	8007b88 <lwJsonWriteEnd+0x40>
    }

    msg->string[msg->_offset] = 0;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	4413      	add	r3, r2
 8007b82:	2200      	movs	r2, #0
 8007b84:	701a      	strb	r2, [r3, #0]

    return 0;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <lwJsonStartObject>:
    }

    msg->_offset += offset;
}

int lwJsonStartObject(LwJsonMsg *msg) {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
    if (lwJsonCheckWriteError(msg) != 0) {
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f8ab 	bl	8007cf8 <lwJsonCheckWriteError>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d002      	beq.n	8007bae <lwJsonStartObject+0x1a>
        return msg->_lastError;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	e00c      	b.n	8007bc8 <lwJsonStartObject+0x34>
    }

    msg->string[msg->_offset] = '{';
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	227b      	movs	r2, #123	; 0x7b
 8007bba:	701a      	strb	r2, [r3, #0]
    msg->_offset++;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	1c5a      	adds	r2, r3, #1
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	609a      	str	r2, [r3, #8]
    return 0;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3708      	adds	r7, #8
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <lwJsonCloseObject>:
    msg->string[msg->_offset] = '[';
    msg->_offset++;
    return 0;
}

int lwJsonCloseObject(LwJsonMsg *msg) {
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
    if (lwJsonCheckWriteError(msg) != 0) {
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 f88d 	bl	8007cf8 <lwJsonCheckWriteError>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <lwJsonCloseObject+0x1a>
        return msg->_lastError;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	e00c      	b.n	8007c04 <lwJsonCloseObject+0x34>
    }

    msg->string[msg->_offset] = '}';
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	227d      	movs	r2, #125	; 0x7d
 8007bf6:	701a      	strb	r2, [r3, #0]
    msg->_offset++;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	609a      	str	r2, [r3, #8]
    return 0;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <lwJsonAddIntToObject>:
    }

    return lwJsonAddValueToArray(msg, type, &jsonValue);
}

int lwJsonAddIntToObject(LwJsonMsg *msg, const char *name, int32_t value) {
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b086      	sub	sp, #24
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
    LwJsonValueType type = LWJSON_VAL_NUMBER;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	75fb      	strb	r3, [r7, #23]
    LwJsonValue jsonValue;
    jsonValue.valueInt = value;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	613b      	str	r3, [r7, #16]
    return lwJsonAddNameAndValuePair(msg, name, type, &jsonValue);
 8007c20:	f107 0310 	add.w	r3, r7, #16
 8007c24:	7dfa      	ldrb	r2, [r7, #23]
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 f887 	bl	8007d3c <lwJsonAddNameAndValuePair>
 8007c2e:	4603      	mov	r3, r0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3718      	adds	r7, #24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <lwJsonCalculateValueStringLength>:

    return 0;
}


static int lwJsonCalculateValueStringLength(LwJsonValueType type, LwJsonValue *value) {
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	4603      	mov	r3, r0
 8007c40:	6039      	str	r1, [r7, #0]
 8007c42:	71fb      	strb	r3, [r7, #7]
    unsigned int valueLen = 0;
 8007c44:	2300      	movs	r3, #0
 8007c46:	60fb      	str	r3, [r7, #12]
    auxString[0]=0;
 8007c48:	4b29      	ldr	r3, [pc, #164]	; (8007cf0 <lwJsonCalculateValueStringLength+0xb8>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	701a      	strb	r2, [r3, #0]

    switch (type) {
 8007c4e:	79fb      	ldrb	r3, [r7, #7]
 8007c50:	2b05      	cmp	r3, #5
 8007c52:	d848      	bhi.n	8007ce6 <lwJsonCalculateValueStringLength+0xae>
 8007c54:	a201      	add	r2, pc, #4	; (adr r2, 8007c5c <lwJsonCalculateValueStringLength+0x24>)
 8007c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5a:	bf00      	nop
 8007c5c:	08007c75 	.word	0x08007c75
 8007c60:	08007c93 	.word	0x08007c93
 8007c64:	08007cb7 	.word	0x08007cb7
 8007c68:	08007cdb 	.word	0x08007cdb
 8007c6c:	08007cdb 	.word	0x08007cdb
 8007c70:	08007ce1 	.word	0x08007ce1
    case LWJSON_VAL_STRING:
        if (value == NULL) {
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d102      	bne.n	8007c80 <lwJsonCalculateValueStringLength+0x48>
            return -EINVAL;
 8007c7a:	f06f 0315 	mvn.w	r3, #21
 8007c7e:	e033      	b.n	8007ce8 <lwJsonCalculateValueStringLength+0xb0>
        }
        valueLen = strlen(value->valueString) + 2;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7f8 faad 	bl	80001e4 <strlen>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	3302      	adds	r3, #2
 8007c8e:	60fb      	str	r3, [r7, #12]
        break;
 8007c90:	e029      	b.n	8007ce6 <lwJsonCalculateValueStringLength+0xae>
    case LWJSON_VAL_NUMBER:
        if (value == NULL) {
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d102      	bne.n	8007c9e <lwJsonCalculateValueStringLength+0x66>
            return -EINVAL;
 8007c98:	f06f 0315 	mvn.w	r3, #21
 8007c9c:	e024      	b.n	8007ce8 <lwJsonCalculateValueStringLength+0xb0>
        }
        sprintf(auxString, "%ld", value->valueInt);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	4913      	ldr	r1, [pc, #76]	; (8007cf4 <lwJsonCalculateValueStringLength+0xbc>)
 8007ca6:	4812      	ldr	r0, [pc, #72]	; (8007cf0 <lwJsonCalculateValueStringLength+0xb8>)
 8007ca8:	f001 f866 	bl	8008d78 <siprintf>
        valueLen = strlen(auxString);
 8007cac:	4810      	ldr	r0, [pc, #64]	; (8007cf0 <lwJsonCalculateValueStringLength+0xb8>)
 8007cae:	f7f8 fa99 	bl	80001e4 <strlen>
 8007cb2:	60f8      	str	r0, [r7, #12]
        break;
 8007cb4:	e017      	b.n	8007ce6 <lwJsonCalculateValueStringLength+0xae>
    case LWJSON_VAL_BOOLEAN:
        if (value == NULL) {
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d102      	bne.n	8007cc2 <lwJsonCalculateValueStringLength+0x8a>
            return -EINVAL;
 8007cbc:	f06f 0315 	mvn.w	r3, #21
 8007cc0:	e012      	b.n	8007ce8 <lwJsonCalculateValueStringLength+0xb0>
        }
        if(value->valueBool == true) {
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <lwJsonCalculateValueStringLength+0x9a>
            // true
            valueLen += 4;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	60fb      	str	r3, [r7, #12]
        } else {
            // false
            valueLen += 5;
        }
        break;
 8007cd0:	e009      	b.n	8007ce6 <lwJsonCalculateValueStringLength+0xae>
            valueLen += 5;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	3305      	adds	r3, #5
 8007cd6:	60fb      	str	r3, [r7, #12]
        break;
 8007cd8:	e005      	b.n	8007ce6 <lwJsonCalculateValueStringLength+0xae>
    case LWJSON_VAL_OBJECT:
    case LWJSON_VAL_ARRAY:
        valueLen = 1;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	60fb      	str	r3, [r7, #12]
        break;
 8007cde:	e002      	b.n	8007ce6 <lwJsonCalculateValueStringLength+0xae>
    case LWJSON_VAL_NULL:
        valueLen = 4;
 8007ce0:	2304      	movs	r3, #4
 8007ce2:	60fb      	str	r3, [r7, #12]
        break;
 8007ce4:	bf00      	nop
    }

    return valueLen;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	20004428 	.word	0x20004428
 8007cf4:	0800a124 	.word	0x0800a124

08007cf8 <lwJsonCheckWriteError>:

static int lwJsonCheckWriteError(LwJsonMsg *msg) {
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
    if (msg == NULL) {
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d106      	bne.n	8007d14 <lwJsonCheckWriteError+0x1c>
        msg->_lastError = (-EINVAL);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f06f 0215 	mvn.w	r2, #21
 8007d0c:	60da      	str	r2, [r3, #12]
        return -EINVAL;
 8007d0e:	f06f 0315 	mvn.w	r3, #21
 8007d12:	e00d      	b.n	8007d30 <lwJsonCheckWriteError+0x38>
    }
    if (msg->_offset >= msg->len) {
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	689a      	ldr	r2, [r3, #8]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d306      	bcc.n	8007d2e <lwJsonCheckWriteError+0x36>
        msg->_lastError = (-ENOMEM);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f06f 020b 	mvn.w	r2, #11
 8007d26:	60da      	str	r2, [r3, #12]
        return -ENOMEM;
 8007d28:	f06f 030b 	mvn.w	r3, #11
 8007d2c:	e000      	b.n	8007d30 <lwJsonCheckWriteError+0x38>
    }

    return 0;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <lwJsonAddNameAndValuePair>:

static int lwJsonAddNameAndValuePair(LwJsonMsg *msg, const char *name, LwJsonValueType type, LwJsonValue *value) {
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b088      	sub	sp, #32
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	60b9      	str	r1, [r7, #8]
 8007d46:	603b      	str	r3, [r7, #0]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	71fb      	strb	r3, [r7, #7]
    unsigned int entryLen = 0;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	61fb      	str	r3, [r7, #28]
    unsigned int nameLen;
    unsigned int valueLen = 0;
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]
    unsigned char flagSeparator = 0;
 8007d54:	2300      	movs	r3, #0
 8007d56:	76fb      	strb	r3, [r7, #27]
    auxString[0]=0;
 8007d58:	4b90      	ldr	r3, [pc, #576]	; (8007f9c <lwJsonAddNameAndValuePair+0x260>)
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	701a      	strb	r2, [r3, #0]

    if (lwJsonCheckWriteError(msg) != 0) {
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f7ff ffca 	bl	8007cf8 <lwJsonCheckWriteError>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d002      	beq.n	8007d70 <lwJsonAddNameAndValuePair+0x34>
        return msg->_lastError;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	e111      	b.n	8007f94 <lwJsonAddNameAndValuePair+0x258>
    }
    if (name == NULL) {
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d106      	bne.n	8007d84 <lwJsonAddNameAndValuePair+0x48>
        msg->_lastError = (-EINVAL);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f06f 0215 	mvn.w	r2, #21
 8007d7c:	60da      	str	r2, [r3, #12]
        return -EINVAL;
 8007d7e:	f06f 0315 	mvn.w	r3, #21
 8007d82:	e107      	b.n	8007f94 <lwJsonAddNameAndValuePair+0x258>
    }

    // Calculate and check len
    valueLen = lwJsonCalculateValueStringLength(type, value);
 8007d84:	79fb      	ldrb	r3, [r7, #7]
 8007d86:	6839      	ldr	r1, [r7, #0]
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7ff ff55 	bl	8007c38 <lwJsonCalculateValueStringLength>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	617b      	str	r3, [r7, #20]
    if (valueLen < 0) {
        return -EINVAL;
    }

    // Calculate space
    nameLen = strlen(name);
 8007d92:	68b8      	ldr	r0, [r7, #8]
 8007d94:	f7f8 fa26 	bl	80001e4 <strlen>
 8007d98:	6138      	str	r0, [r7, #16]
    entryLen = nameLen + valueLen + 3;
 8007d9a:	693a      	ldr	r2, [r7, #16]
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	4413      	add	r3, r2
 8007da0:	3303      	adds	r3, #3
 8007da2:	61fb      	str	r3, [r7, #28]
    if (msg->string[msg->_offset - 1] != '{') {
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	4413      	add	r3, r2
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	2b7b      	cmp	r3, #123	; 0x7b
 8007db4:	d004      	beq.n	8007dc0 <lwJsonAddNameAndValuePair+0x84>
        entryLen ++;
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	3301      	adds	r3, #1
 8007dba:	61fb      	str	r3, [r7, #28]
        flagSeparator = 1;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	76fb      	strb	r3, [r7, #27]
    }

    // Check space
    if (msg->_offset > (msg->len - entryLen)) {
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	689a      	ldr	r2, [r3, #8]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6859      	ldr	r1, [r3, #4]
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	1acb      	subs	r3, r1, r3
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d906      	bls.n	8007dde <lwJsonAddNameAndValuePair+0xa2>
        msg->_lastError = (-ENOMEM);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f06f 020b 	mvn.w	r2, #11
 8007dd6:	60da      	str	r2, [r3, #12]
        return -ENOMEM;
 8007dd8:	f06f 030b 	mvn.w	r3, #11
 8007ddc:	e0da      	b.n	8007f94 <lwJsonAddNameAndValuePair+0x258>
    }

    // Add separator if necessary
    if (flagSeparator != 0) {
 8007dde:	7efb      	ldrb	r3, [r7, #27]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00b      	beq.n	8007dfc <lwJsonAddNameAndValuePair+0xc0>
        msg->string[msg->_offset] = ',';
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	4413      	add	r3, r2
 8007dee:	222c      	movs	r2, #44	; 0x2c
 8007df0:	701a      	strb	r2, [r3, #0]
        msg->_offset++;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	1c5a      	adds	r2, r3, #1
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	609a      	str	r2, [r3, #8]
    }

    // Add name
    msg->string[msg->_offset] = '"';
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	4413      	add	r3, r2
 8007e06:	2222      	movs	r2, #34	; 0x22
 8007e08:	701a      	strb	r2, [r3, #0]
    msg->_offset++;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	609a      	str	r2, [r3, #8]
    strcpy(msg->string + msg->_offset, name);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	4413      	add	r3, r2
 8007e1e:	68b9      	ldr	r1, [r7, #8]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f001 f80c 	bl	8008e3e <strcpy>
    msg->_offset += nameLen;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	689a      	ldr	r2, [r3, #8]
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	441a      	add	r2, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	609a      	str	r2, [r3, #8]
    strcpy(msg->string + msg->_offset, "\":");
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	4a58      	ldr	r2, [pc, #352]	; (8007fa0 <lwJsonAddNameAndValuePair+0x264>)
 8007e3e:	8811      	ldrh	r1, [r2, #0]
 8007e40:	7892      	ldrb	r2, [r2, #2]
 8007e42:	8019      	strh	r1, [r3, #0]
 8007e44:	709a      	strb	r2, [r3, #2]
    msg->_offset += 2;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	1c9a      	adds	r2, r3, #2
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	609a      	str	r2, [r3, #8]

    // Add value
    switch (type) {
 8007e50:	79fb      	ldrb	r3, [r7, #7]
 8007e52:	2b05      	cmp	r3, #5
 8007e54:	f200 809d 	bhi.w	8007f92 <lwJsonAddNameAndValuePair+0x256>
 8007e58:	a201      	add	r2, pc, #4	; (adr r2, 8007e60 <lwJsonAddNameAndValuePair+0x124>)
 8007e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5e:	bf00      	nop
 8007e60:	08007e79 	.word	0x08007e79
 8007e64:	08007ecf 	.word	0x08007ecf
 8007e68:	08007efd 	.word	0x08007efd
 8007e6c:	08007f3d 	.word	0x08007f3d
 8007e70:	08007f57 	.word	0x08007f57
 8007e74:	08007f71 	.word	0x08007f71
    case LWJSON_VAL_STRING:
        msg->string[msg->_offset] = '"';
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	4413      	add	r3, r2
 8007e82:	2222      	movs	r2, #34	; 0x22
 8007e84:	701a      	strb	r2, [r3, #0]
        msg->_offset++;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	1c5a      	adds	r2, r3, #1
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	609a      	str	r2, [r3, #8]
        strcpy(msg->string + msg->_offset, value->valueString);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	441a      	add	r2, r3
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	4610      	mov	r0, r2
 8007ea2:	f000 ffcc 	bl	8008e3e <strcpy>
        msg->_offset += valueLen - 2;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	4413      	add	r3, r2
 8007eae:	1e9a      	subs	r2, r3, #2
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	609a      	str	r2, [r3, #8]
        msg->string[msg->_offset] = '"';
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	2222      	movs	r2, #34	; 0x22
 8007ec0:	701a      	strb	r2, [r3, #0]
        msg->_offset++;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	1c5a      	adds	r2, r3, #1
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	609a      	str	r2, [r3, #8]
        break;
 8007ecc:	e061      	b.n	8007f92 <lwJsonAddNameAndValuePair+0x256>
    case LWJSON_VAL_NUMBER:
        sprintf(auxString, "%ld", value->valueInt);
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	4933      	ldr	r1, [pc, #204]	; (8007fa4 <lwJsonAddNameAndValuePair+0x268>)
 8007ed6:	4831      	ldr	r0, [pc, #196]	; (8007f9c <lwJsonAddNameAndValuePair+0x260>)
 8007ed8:	f000 ff4e 	bl	8008d78 <siprintf>
        strcpy(msg->string + msg->_offset, auxString);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	492d      	ldr	r1, [pc, #180]	; (8007f9c <lwJsonAddNameAndValuePair+0x260>)
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 ffa8 	bl	8008e3e <strcpy>
        msg->_offset += valueLen;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	689a      	ldr	r2, [r3, #8]
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	441a      	add	r2, r3
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	609a      	str	r2, [r3, #8]
        break;
 8007efa:	e04a      	b.n	8007f92 <lwJsonAddNameAndValuePair+0x256>
    case LWJSON_VAL_BOOLEAN:
        if (value->valueBool == true) {
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00a      	beq.n	8007f1a <lwJsonAddNameAndValuePair+0x1de>
            strcpy(msg->string + msg->_offset, "true");
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	4a26      	ldr	r2, [pc, #152]	; (8007fa8 <lwJsonAddNameAndValuePair+0x26c>)
 8007f10:	6810      	ldr	r0, [r2, #0]
 8007f12:	6018      	str	r0, [r3, #0]
 8007f14:	7912      	ldrb	r2, [r2, #4]
 8007f16:	711a      	strb	r2, [r3, #4]
 8007f18:	e009      	b.n	8007f2e <lwJsonAddNameAndValuePair+0x1f2>
        } else {
            strcpy(msg->string + msg->_offset, "false");
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	4413      	add	r3, r2
 8007f24:	4a21      	ldr	r2, [pc, #132]	; (8007fac <lwJsonAddNameAndValuePair+0x270>)
 8007f26:	6810      	ldr	r0, [r2, #0]
 8007f28:	6018      	str	r0, [r3, #0]
 8007f2a:	8892      	ldrh	r2, [r2, #4]
 8007f2c:	809a      	strh	r2, [r3, #4]
        }
        msg->_offset += valueLen;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	689a      	ldr	r2, [r3, #8]
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	441a      	add	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	609a      	str	r2, [r3, #8]
        break;
 8007f3a:	e02a      	b.n	8007f92 <lwJsonAddNameAndValuePair+0x256>
    case LWJSON_VAL_OBJECT:
        msg->string[msg->_offset] = '{';
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	4413      	add	r3, r2
 8007f46:	227b      	movs	r2, #123	; 0x7b
 8007f48:	701a      	strb	r2, [r3, #0]
        msg->_offset++;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	1c5a      	adds	r2, r3, #1
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	609a      	str	r2, [r3, #8]
        break;
 8007f54:	e01d      	b.n	8007f92 <lwJsonAddNameAndValuePair+0x256>
    case LWJSON_VAL_ARRAY:
        msg->string[msg->_offset] = '[';
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	4413      	add	r3, r2
 8007f60:	225b      	movs	r2, #91	; 0x5b
 8007f62:	701a      	strb	r2, [r3, #0]
        msg->_offset++;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	609a      	str	r2, [r3, #8]
        break;
 8007f6e:	e010      	b.n	8007f92 <lwJsonAddNameAndValuePair+0x256>
    case LWJSON_VAL_NULL:
        strcpy(msg->string + msg->_offset, "null");
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	4413      	add	r3, r2
 8007f7a:	4a0d      	ldr	r2, [pc, #52]	; (8007fb0 <lwJsonAddNameAndValuePair+0x274>)
 8007f7c:	6810      	ldr	r0, [r2, #0]
 8007f7e:	6018      	str	r0, [r3, #0]
 8007f80:	7912      	ldrb	r2, [r2, #4]
 8007f82:	711a      	strb	r2, [r3, #4]
        msg->_offset += valueLen;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	441a      	add	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	609a      	str	r2, [r3, #8]
        break;
 8007f90:	bf00      	nop
    }

    return 0;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3720      	adds	r7, #32
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	20004428 	.word	0x20004428
 8007fa0:	0800a120 	.word	0x0800a120
 8007fa4:	0800a124 	.word	0x0800a124
 8007fa8:	0800a128 	.word	0x0800a128
 8007fac:	0800a130 	.word	0x0800a130
 8007fb0:	0800a138 	.word	0x0800a138

08007fb4 <lwJsonGetInt>:
    value[stringLen] = 0;

    return 0;
}

int lwJsonGetInt(const char **path, const LwJsonMsg *msg, int *value) {
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b08a      	sub	sp, #40	; 0x28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
    int result;
    LwJsonMsg jsonNumber;

    result = lwJsonFindValue(path, msg, LWJSON_VAL_NUMBER, &jsonNumber);
 8007fc0:	f107 0314 	add.w	r3, r7, #20
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	68b9      	ldr	r1, [r7, #8]
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f000 f812 	bl	8007ff2 <lwJsonFindValue>
 8007fce:	6278      	str	r0, [r7, #36]	; 0x24
    if (result != 0) {
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <lwJsonGetInt+0x26>
        return result;
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd8:	e007      	b.n	8007fea <lwJsonGetInt+0x36>
    }

    // Get integer
    (*value) = atoi(jsonNumber.string);
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 fc55 	bl	800888c <atoi>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	601a      	str	r2, [r3, #0]

    return 0;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3728      	adds	r7, #40	; 0x28
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <lwJsonFindValue>:

    return 0;
}


static int lwJsonFindValue(const char **path, const LwJsonMsg *msg, LwJsonValueType expectedType, LwJsonMsg *value) {
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b088      	sub	sp, #32
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	60f8      	str	r0, [r7, #12]
 8007ffa:	60b9      	str	r1, [r7, #8]
 8007ffc:	603b      	str	r3, [r7, #0]
 8007ffe:	4613      	mov	r3, r2
 8008000:	71fb      	strb	r3, [r7, #7]
    int result;
    LwJsonFindResult findResult;

    if (msg == NULL || value == NULL) {
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d002      	beq.n	800800e <lwJsonFindValue+0x1c>
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d102      	bne.n	8008014 <lwJsonFindValue+0x22>
        return -EINVAL;
 800800e:	f06f 0315 	mvn.w	r3, #21
 8008012:	e01d      	b.n	8008050 <lwJsonFindValue+0x5e>
    }

    result = lwJsonFind(path, msg, &findResult);
 8008014:	f107 0310 	add.w	r3, r7, #16
 8008018:	461a      	mov	r2, r3
 800801a:	68b9      	ldr	r1, [r7, #8]
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f000 f81b 	bl	8008058 <lwJsonFind>
 8008022:	61f8      	str	r0, [r7, #28]
    if (result != 0) {
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <lwJsonFindValue+0x3c>
        return result;
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	e010      	b.n	8008050 <lwJsonFindValue+0x5e>
    }
    if (findResult.type != expectedType) {
 800802e:	7e3b      	ldrb	r3, [r7, #24]
 8008030:	79fa      	ldrb	r2, [r7, #7]
 8008032:	429a      	cmp	r2, r3
 8008034:	d002      	beq.n	800803c <lwJsonFindValue+0x4a>
        return -EPERM;
 8008036:	f04f 33ff 	mov.w	r3, #4294967295
 800803a:	e009      	b.n	8008050 <lwJsonFindValue+0x5e>
    }

    value->string = &msg->string[findResult.offset];
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	441a      	add	r2, r3
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	601a      	str	r2, [r3, #0]
    value->len = findResult.len;
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	605a      	str	r2, [r3, #4]

    return 0;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3720      	adds	r7, #32
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <lwJsonFind>:

static int lwJsonFind(const char **path, const LwJsonMsg *msg, LwJsonFindResult *findResult) {
 8008058:	b580      	push	{r7, lr}
 800805a:	b092      	sub	sp, #72	; 0x48
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
    LwJsonParser parser;

    if (path == NULL || msg == NULL || findResult == NULL) {
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d005      	beq.n	8008076 <lwJsonFind+0x1e>
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <lwJsonFind+0x1e>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d102      	bne.n	800807c <lwJsonFind+0x24>
        return -EINVAL;
 8008076:	f06f 0315 	mvn.w	r3, #21
 800807a:	e0a4      	b.n	80081c6 <lwJsonFind+0x16e>
    }

    // Init Parser
    parser.searchDepth = lwJsonCalculatePathDepth(path);
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 fb99 	bl	80087b4 <lwJsonCalculatePathDepth>
 8008082:	4603      	mov	r3, r0
 8008084:	633b      	str	r3, [r7, #48]	; 0x30
    if (parser.searchDepth > LWJSON_DEPTH_MAX) {
 8008086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008088:	2b08      	cmp	r3, #8
 800808a:	d902      	bls.n	8008092 <lwJsonFind+0x3a>
        return -EPERM;
 800808c:	f04f 33ff 	mov.w	r3, #4294967295
 8008090:	e099      	b.n	80081c6 <lwJsonFind+0x16e>
    }
    parser.path = path;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	617b      	str	r3, [r7, #20]
    parser.msg = msg;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	61bb      	str	r3, [r7, #24]
    parser.depth = 0;
 800809a:	2300      	movs	r3, #0
 800809c:	62bb      	str	r3, [r7, #40]	; 0x28
    parser.findDepth = 0;
 800809e:	2300      	movs	r3, #0
 80080a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    parser.state = LWJSON_SM_START;
 80080a2:	2300      	movs	r3, #0
 80080a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    parser.findResult = findResult;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	647b      	str	r3, [r7, #68]	; 0x44

    for (parser.p = msg->string; (parser.p[0] != 0) && ((parser.p - msg->string) < msg->len); parser.p++) {
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	643b      	str	r3, [r7, #64]	; 0x40
 80080b2:	e06c      	b.n	800818e <lwJsonFind+0x136>
        // Filter chars
        PrefilterChar(parser.p);
 80080b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 f88a 	bl	80081d0 <PrefilterChar>
        if (SkippableChar(parser.p[0])) {
 80080bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	4618      	mov	r0, r3
 80080c2:	f000 f89a 	bl	80081fa <SkippableChar>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d15c      	bne.n	8008186 <lwJsonFind+0x12e>
            continue;
        }

        switch (parser.state) {
 80080cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80080d0:	2b0a      	cmp	r3, #10
 80080d2:	d855      	bhi.n	8008180 <lwJsonFind+0x128>
 80080d4:	a201      	add	r2, pc, #4	; (adr r2, 80080dc <lwJsonFind+0x84>)
 80080d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080da:	bf00      	nop
 80080dc:	08008109 	.word	0x08008109
 80080e0:	08008115 	.word	0x08008115
 80080e4:	0800812d 	.word	0x0800812d
 80080e8:	08008139 	.word	0x08008139
 80080ec:	08008145 	.word	0x08008145
 80080f0:	08008121 	.word	0x08008121
 80080f4:	08008151 	.word	0x08008151
 80080f8:	08008169 	.word	0x08008169
 80080fc:	0800815d 	.word	0x0800815d
 8008100:	08008175 	.word	0x08008175
 8008104:	08008175 	.word	0x08008175
        case LWJSON_SM_START:
            FindSmStartHandler(&parser);
 8008108:	f107 0314 	add.w	r3, r7, #20
 800810c:	4618      	mov	r0, r3
 800810e:	f000 f888 	bl	8008222 <FindSmStartHandler>
            break;
 8008112:	e039      	b.n	8008188 <lwJsonFind+0x130>
        case LWJSON_SM_OBJECT:
            FindSmObjectHandler(&parser);
 8008114:	f107 0314 	add.w	r3, r7, #20
 8008118:	4618      	mov	r0, r3
 800811a:	f000 f8a7 	bl	800826c <FindSmObjectHandler>
            break;
 800811e:	e033      	b.n	8008188 <lwJsonFind+0x130>
        case LWJSON_SM_ARRAY:
            FindSmArrayHandler(&parser);
 8008120:	f107 0314 	add.w	r3, r7, #20
 8008124:	4618      	mov	r0, r3
 8008126:	f000 f8ca 	bl	80082be <FindSmArrayHandler>
            break;
 800812a:	e02d      	b.n	8008188 <lwJsonFind+0x130>
        case LWJSON_SM_NAME:
            FindSmNameHandler(&parser);
 800812c:	f107 0314 	add.w	r3, r7, #20
 8008130:	4618      	mov	r0, r3
 8008132:	f000 f8df 	bl	80082f4 <FindSmNameHandler>
            break;
 8008136:	e027      	b.n	8008188 <lwJsonFind+0x130>
        case LWJSON_SM_NAME_END:
            FindSmNameEndHandler(&parser);
 8008138:	f107 0314 	add.w	r3, r7, #20
 800813c:	4618      	mov	r0, r3
 800813e:	f000 f93e 	bl	80083be <FindSmNameEndHandler>
            break;
 8008142:	e021      	b.n	8008188 <lwJsonFind+0x130>
        case LWJSON_SM_VALUE:
            FindSmValueHandler(&parser);
 8008144:	f107 0314 	add.w	r3, r7, #20
 8008148:	4618      	mov	r0, r3
 800814a:	f000 f94f 	bl	80083ec <FindSmValueHandler>
            break;
 800814e:	e01b      	b.n	8008188 <lwJsonFind+0x130>
        case LWJSON_SM_STRING:
            FindSmStringHandler(&parser);
 8008150:	f107 0314 	add.w	r3, r7, #20
 8008154:	4618      	mov	r0, r3
 8008156:	f000 fa03 	bl	8008560 <FindSmStringHandler>
            break;
 800815a:	e015      	b.n	8008188 <lwJsonFind+0x130>
        case LWJSON_SM_NUMBER:
            FindSmNumberHandler(&parser);
 800815c:	f107 0314 	add.w	r3, r7, #20
 8008160:	4618      	mov	r0, r3
 8008162:	f000 fa24 	bl	80085ae <FindSmNumberHandler>
            break;
 8008166:	e00f      	b.n	8008188 <lwJsonFind+0x130>
        case LWJSON_SM_VALUE_END:
            FindSmValueEndHandler(&parser);
 8008168:	f107 0314 	add.w	r3, r7, #20
 800816c:	4618      	mov	r0, r3
 800816e:	f000 fa47 	bl	8008600 <FindSmValueEndHandler>
            break;
 8008172:	e009      	b.n	8008188 <lwJsonFind+0x130>
        case LWJSON_SM_OBJECT_END:
        case LWJSON_SM_ARRAY_END:
            FindSmLevelEndHandler(&parser);
 8008174:	f107 0314 	add.w	r3, r7, #20
 8008178:	4618      	mov	r0, r3
 800817a:	f000 fadd 	bl	8008738 <FindSmLevelEndHandler>
            break;
 800817e:	e003      	b.n	8008188 <lwJsonFind+0x130>
        default:
            return -EPERM;
 8008180:	f04f 33ff 	mov.w	r3, #4294967295
 8008184:	e01f      	b.n	80081c6 <lwJsonFind+0x16e>
            continue;
 8008186:	bf00      	nop
    for (parser.p = msg->string; (parser.p[0] != 0) && ((parser.p - msg->string) < msg->len); parser.p++) {
 8008188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800818a:	3301      	adds	r3, #1
 800818c:	643b      	str	r3, [r7, #64]	; 0x40
 800818e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d008      	beq.n	80081a8 <lwJsonFind+0x150>
 8008196:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	1ad3      	subs	r3, r2, r3
 800819e:	461a      	mov	r2, r3
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d385      	bcc.n	80080b4 <lwJsonFind+0x5c>
        }
    }

    if (parser.state != LWJSON_SM_END) {
 80081a8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80081ac:	2b0b      	cmp	r3, #11
 80081ae:	d002      	beq.n	80081b6 <lwJsonFind+0x15e>
        return -EPERM;
 80081b0:	f04f 33ff 	mov.w	r3, #4294967295
 80081b4:	e007      	b.n	80081c6 <lwJsonFind+0x16e>
    }
    //Comprobar si no se ha encontrado
    if (parser.findDepth < parser.searchDepth) {
 80081b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d202      	bcs.n	80081c4 <lwJsonFind+0x16c>
        return -ENOENT;
 80081be:	f06f 0301 	mvn.w	r3, #1
 80081c2:	e000      	b.n	80081c6 <lwJsonFind+0x16e>
    }
    return 0;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3748      	adds	r7, #72	; 0x48
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop

080081d0 <PrefilterChar>:

static void PrefilterChar(char *p) {
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
    // Substitute LF and CR with space. It avoids problems in array parsing
    if ((*p) == '\r' || (*p) == '\n') {
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	2b0d      	cmp	r3, #13
 80081de:	d003      	beq.n	80081e8 <PrefilterChar+0x18>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	2b0a      	cmp	r3, #10
 80081e6:	d102      	bne.n	80081ee <PrefilterChar+0x1e>
        (*p) = ' ';
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2220      	movs	r2, #32
 80081ec:	701a      	strb	r2, [r3, #0]
    }
}
 80081ee:	bf00      	nop
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <SkippableChar>:

static bool SkippableChar(char c) {
 80081fa:	b480      	push	{r7}
 80081fc:	b083      	sub	sp, #12
 80081fe:	af00      	add	r7, sp, #0
 8008200:	4603      	mov	r3, r0
 8008202:	71fb      	strb	r3, [r7, #7]

    if (c == '\t' || c == ' ') {
 8008204:	79fb      	ldrb	r3, [r7, #7]
 8008206:	2b09      	cmp	r3, #9
 8008208:	d002      	beq.n	8008210 <SkippableChar+0x16>
 800820a:	79fb      	ldrb	r3, [r7, #7]
 800820c:	2b20      	cmp	r3, #32
 800820e:	d101      	bne.n	8008214 <SkippableChar+0x1a>
        return true;
 8008210:	2301      	movs	r3, #1
 8008212:	e000      	b.n	8008216 <SkippableChar+0x1c>
    }

    return false;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <FindSmStartHandler>:

static void FindSmStartHandler(LwJsonParser *parser) {
 8008222:	b580      	push	{r7, lr}
 8008224:	b082      	sub	sp, #8
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
    // Inicio. Se debe encontrar '{'
    if (parser->p[0] == '{') {
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	2b7b      	cmp	r3, #123	; 0x7b
 8008232:	d107      	bne.n	8008244 <FindSmStartHandler+0x22>
        parser->state = LWJSON_SM_OBJECT;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	745a      	strb	r2, [r3, #17]
        lwJsonParserPush(parser, LWJSON_PARENT_OBJECT);
 800823a:	2100      	movs	r1, #0
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f000 fad6 	bl	80087ee <lwJsonParserPush>
        parser->state = LWJSON_SM_ARRAY;
        lwJsonParserPush(parser, LWJSON_PARENT_ARRAY);
    } else {
        parser->state = LWJSON_SM_ERROR;
    }
}
 8008242:	e00f      	b.n	8008264 <FindSmStartHandler+0x42>
    } else if (parser->p[0] == '[') {
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	2b5b      	cmp	r3, #91	; 0x5b
 800824c:	d107      	bne.n	800825e <FindSmStartHandler+0x3c>
        parser->state = LWJSON_SM_ARRAY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2205      	movs	r2, #5
 8008252:	745a      	strb	r2, [r3, #17]
        lwJsonParserPush(parser, LWJSON_PARENT_ARRAY);
 8008254:	2101      	movs	r1, #1
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fac9 	bl	80087ee <lwJsonParserPush>
}
 800825c:	e002      	b.n	8008264 <FindSmStartHandler+0x42>
        parser->state = LWJSON_SM_ERROR;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	220c      	movs	r2, #12
 8008262:	745a      	strb	r2, [r3, #17]
}
 8008264:	bf00      	nop
 8008266:	3708      	adds	r7, #8
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <FindSmObjectHandler>:

static void FindSmObjectHandler(LwJsonParser *parser) {
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]

    // Inicio de objeto. Se debe encontrar el incio del nombre '"'
    if (parser->p[0] == '"') {
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	2b22      	cmp	r3, #34	; 0x22
 800827c:	d108      	bne.n	8008290 <FindSmObjectHandler+0x24>
        parser->state = LWJSON_SM_NAME;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2202      	movs	r2, #2
 8008282:	745a      	strb	r2, [r3, #17]
        parser->lastName = &parser->p[1];
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008288:	1c5a      	adds	r2, r3, #1
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	625a      	str	r2, [r3, #36]	; 0x24
        parser->state = LWJSON_SM_OBJECT_END;
        parser->p--;
    } else {
        parser->state = LWJSON_SM_ERROR;
    }
}
 800828e:	e010      	b.n	80082b2 <FindSmObjectHandler+0x46>
    } else if (parser->p[0] == '}') {
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	2b7d      	cmp	r3, #125	; 0x7d
 8008298:	d108      	bne.n	80082ac <FindSmObjectHandler+0x40>
        parser->state = LWJSON_SM_OBJECT_END;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2209      	movs	r2, #9
 800829e:	745a      	strb	r2, [r3, #17]
        parser->p--;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a4:	1e5a      	subs	r2, r3, #1
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80082aa:	e002      	b.n	80082b2 <FindSmObjectHandler+0x46>
        parser->state = LWJSON_SM_ERROR;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	220c      	movs	r2, #12
 80082b0:	745a      	strb	r2, [r3, #17]
}
 80082b2:	bf00      	nop
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <FindSmArrayHandler>:

static void FindSmArrayHandler(LwJsonParser *parser) {
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]

    if (parser->p[0] == ']') {
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2b5d      	cmp	r3, #93	; 0x5d
 80082ce:	d103      	bne.n	80082d8 <FindSmArrayHandler+0x1a>
        parser->state = LWJSON_SM_ARRAY_END;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	220a      	movs	r2, #10
 80082d4:	745a      	strb	r2, [r3, #17]
 80082d6:	e002      	b.n	80082de <FindSmArrayHandler+0x20>
    } else {
        parser->state = LWJSON_SM_VALUE;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2204      	movs	r2, #4
 80082dc:	745a      	strb	r2, [r3, #17]
    }
    parser->p--;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e2:	1e5a      	subs	r2, r3, #1
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <FindSmNameHandler>:

static void FindSmNameHandler(LwJsonParser *parser) {
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
    uint32_t nameLen;

    while (parser->state == LWJSON_SM_NAME) {
 80082fc:	e056      	b.n	80083ac <FindSmNameHandler+0xb8>
        // Nombre. Puede encontrarse un car�cter v�lido o el fin de nombre
        if ((parser->p[0]) == '"') {
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	2b22      	cmp	r3, #34	; 0x22
 8008306:	d143      	bne.n	8008390 <FindSmNameHandler+0x9c>
            parser->state = LWJSON_SM_NAME_END;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2203      	movs	r2, #3
 800830c:	745a      	strb	r2, [r3, #17]
            if ((parser->depth == (parser->findDepth + 1)) && (parser->findDepth < parser->searchDepth)) {
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	695a      	ldr	r2, [r3, #20]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	3301      	adds	r3, #1
 8008318:	429a      	cmp	r2, r3
 800831a:	d147      	bne.n	80083ac <FindSmNameHandler+0xb8>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	699a      	ldr	r2, [r3, #24]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	429a      	cmp	r2, r3
 8008326:	d241      	bcs.n	80083ac <FindSmNameHandler+0xb8>
                // Comprobar que las longitudes coinciden
                nameLen = parser->p - parser->lastName;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	60fb      	str	r3, [r7, #12]
                if (strlen(parser->path[parser->findDepth]) == nameLen) {
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4618      	mov	r0, r3
 8008344:	f7f7 ff4e 	bl	80001e4 <strlen>
 8008348:	4602      	mov	r2, r0
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	4293      	cmp	r3, r2
 800834e:	d12d      	bne.n	80083ac <FindSmNameHandler+0xb8>
                    // Comprobar que las cadenas coinciden
                    if (strncmp(parser->path[parser->findDepth], parser->lastName, nameLen) == 0) {
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	6818      	ldr	r0, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	4619      	mov	r1, r3
 8008366:	f000 fd72 	bl	8008e4e <strncmp>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d11d      	bne.n	80083ac <FindSmNameHandler+0xb8>
                        parser->findDepth++;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	699b      	ldr	r3, [r3, #24]
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	619a      	str	r2, [r3, #24]
                        if (parser->findDepth == parser->searchDepth) {
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	699a      	ldr	r2, [r3, #24]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	69db      	ldr	r3, [r3, #28]
 8008382:	429a      	cmp	r2, r3
 8008384:	d112      	bne.n	80083ac <FindSmNameHandler+0xb8>
                            parser->searchValuePending = true;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 2020 	strb.w	r2, [r3, #32]
 800838e:	e00d      	b.n	80083ac <FindSmNameHandler+0xb8>
                        }
                    }
                }
            }
        } else if ((parser->p[0]) < 32) {
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	2b1f      	cmp	r3, #31
 8008398:	d803      	bhi.n	80083a2 <FindSmNameHandler+0xae>
            parser->state = LWJSON_SM_ERROR;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	220c      	movs	r2, #12
 800839e:	745a      	strb	r2, [r3, #17]
 80083a0:	e004      	b.n	80083ac <FindSmNameHandler+0xb8>
        } else {
            parser->p++;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a6:	1c5a      	adds	r2, r3, #1
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	62da      	str	r2, [r3, #44]	; 0x2c
    while (parser->state == LWJSON_SM_NAME) {
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	7c5b      	ldrb	r3, [r3, #17]
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d0a4      	beq.n	80082fe <FindSmNameHandler+0xa>
        }
    }
}
 80083b4:	bf00      	nop
 80083b6:	bf00      	nop
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <FindSmNameEndHandler>:

static void FindSmNameEndHandler(LwJsonParser *parser) {
 80083be:	b480      	push	{r7}
 80083c0:	b083      	sub	sp, #12
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
    if((parser->p[0]) == ':') {
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	2b3a      	cmp	r3, #58	; 0x3a
 80083ce:	d103      	bne.n	80083d8 <FindSmNameEndHandler+0x1a>
        parser->state = LWJSON_SM_VALUE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2204      	movs	r2, #4
 80083d4:	745a      	strb	r2, [r3, #17]
    } else {
        parser->state = LWJSON_SM_ERROR;
    }
}
 80083d6:	e002      	b.n	80083de <FindSmNameEndHandler+0x20>
        parser->state = LWJSON_SM_ERROR;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	220c      	movs	r2, #12
 80083dc:	745a      	strb	r2, [r3, #17]
}
 80083de:	bf00      	nop
 80083e0:	370c      	adds	r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
	...

080083ec <FindSmValueHandler>:

static void FindSmValueHandler(LwJsonParser *parser) {
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b086      	sub	sp, #24
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
    char currentChar;
    LwJsonValueType tempType;
    char findArrayString[10];

    // Guardar offset si es necesario
    if (parser->searchValuePending) {
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d008      	beq.n	8008410 <FindSmValueHandler+0x24>
        parser->findResult->offset = (parser->p - parser->msg->string);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	1ad2      	subs	r2, r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840e:	601a      	str	r2, [r3, #0]
    }

    currentChar = parser->p[0];
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	75bb      	strb	r3, [r7, #22]

    // Valor. Varias opciones
    if (currentChar == '\"') {
 8008418:	7dbb      	ldrb	r3, [r7, #22]
 800841a:	2b22      	cmp	r3, #34	; 0x22
 800841c:	d105      	bne.n	800842a <FindSmValueHandler+0x3e>
        parser->state = LWJSON_SM_STRING;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2206      	movs	r2, #6
 8008422:	745a      	strb	r2, [r3, #17]
        tempType = LWJSON_VAL_STRING;
 8008424:	2300      	movs	r3, #0
 8008426:	75fb      	strb	r3, [r7, #23]
 8008428:	e07f      	b.n	800852a <FindSmValueHandler+0x13e>
    } else if ((currentChar == '-') || ((currentChar >= '0') && (currentChar <='9'))) {
 800842a:	7dbb      	ldrb	r3, [r7, #22]
 800842c:	2b2d      	cmp	r3, #45	; 0x2d
 800842e:	d005      	beq.n	800843c <FindSmValueHandler+0x50>
 8008430:	7dbb      	ldrb	r3, [r7, #22]
 8008432:	2b2f      	cmp	r3, #47	; 0x2f
 8008434:	d908      	bls.n	8008448 <FindSmValueHandler+0x5c>
 8008436:	7dbb      	ldrb	r3, [r7, #22]
 8008438:	2b39      	cmp	r3, #57	; 0x39
 800843a:	d805      	bhi.n	8008448 <FindSmValueHandler+0x5c>
        // S�lo soporta enteros
        parser->state = LWJSON_SM_NUMBER;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2208      	movs	r2, #8
 8008440:	745a      	strb	r2, [r3, #17]
        tempType = LWJSON_VAL_NUMBER;
 8008442:	2301      	movs	r3, #1
 8008444:	75fb      	strb	r3, [r7, #23]
 8008446:	e070      	b.n	800852a <FindSmValueHandler+0x13e>
    } else if (currentChar == '[') {
 8008448:	7dbb      	ldrb	r3, [r7, #22]
 800844a:	2b5b      	cmp	r3, #91	; 0x5b
 800844c:	d133      	bne.n	80084b6 <FindSmValueHandler+0xca>
        tempType = LWJSON_VAL_ARRAY;
 800844e:	2304      	movs	r3, #4
 8008450:	75fb      	strb	r3, [r7, #23]
        parser->state = LWJSON_SM_ARRAY;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2205      	movs	r2, #5
 8008456:	745a      	strb	r2, [r3, #17]
        lwJsonParserPush(parser, LWJSON_PARENT_ARRAY);
 8008458:	2101      	movs	r1, #1
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f9c7 	bl	80087ee <lwJsonParserPush>
        if ((parser->depth == (parser->findDepth + 1)) && (parser->findDepth < parser->searchDepth)) {
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	695a      	ldr	r2, [r3, #20]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	3301      	adds	r3, #1
 800846a:	429a      	cmp	r2, r3
 800846c:	d15d      	bne.n	800852a <FindSmValueHandler+0x13e>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	699a      	ldr	r2, [r3, #24]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	429a      	cmp	r2, r3
 8008478:	d257      	bcs.n	800852a <FindSmValueHandler+0x13e>
            // Comprobar si se busca este �ndice de array
            sprintf(findArrayString, "[%u]", parser->currentArrayIndex);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800847e:	f107 030c 	add.w	r3, r7, #12
 8008482:	4934      	ldr	r1, [pc, #208]	; (8008554 <FindSmValueHandler+0x168>)
 8008484:	4618      	mov	r0, r3
 8008486:	f000 fc77 	bl	8008d78 <siprintf>
            if (strcmp(parser->path[parser->findDepth], findArrayString) == 0) {
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	699b      	ldr	r3, [r3, #24]
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f107 020c 	add.w	r2, r7, #12
 800849c:	4611      	mov	r1, r2
 800849e:	4618      	mov	r0, r3
 80084a0:	f7f7 fe96 	bl	80001d0 <strcmp>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d13f      	bne.n	800852a <FindSmValueHandler+0x13e>
                parser->findDepth++;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	1c5a      	adds	r2, r3, #1
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	619a      	str	r2, [r3, #24]
 80084b4:	e039      	b.n	800852a <FindSmValueHandler+0x13e>
            }
        }
    } else if (currentChar == '{') {
 80084b6:	7dbb      	ldrb	r3, [r7, #22]
 80084b8:	2b7b      	cmp	r3, #123	; 0x7b
 80084ba:	d109      	bne.n	80084d0 <FindSmValueHandler+0xe4>
        tempType = LWJSON_VAL_OBJECT;
 80084bc:	2303      	movs	r3, #3
 80084be:	75fb      	strb	r3, [r7, #23]
        parser->state = LWJSON_SM_OBJECT;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	745a      	strb	r2, [r3, #17]
        lwJsonParserPush(parser, LWJSON_PARENT_OBJECT);
 80084c6:	2100      	movs	r1, #0
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f990 	bl	80087ee <lwJsonParserPush>
 80084ce:	e02c      	b.n	800852a <FindSmValueHandler+0x13e>
    } else if (strncmp(parser->p, "true", strlen("true")) == 0) {
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d4:	2204      	movs	r2, #4
 80084d6:	4920      	ldr	r1, [pc, #128]	; (8008558 <FindSmValueHandler+0x16c>)
 80084d8:	4618      	mov	r0, r3
 80084da:	f000 fcb8 	bl	8008e4e <strncmp>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10a      	bne.n	80084fa <FindSmValueHandler+0x10e>
        tempType = LWJSON_VAL_BOOLEAN;
 80084e4:	2302      	movs	r3, #2
 80084e6:	75fb      	strb	r3, [r7, #23]
        parser->p += strlen("true") - 1;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	1cda      	adds	r2, r3, #3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	62da      	str	r2, [r3, #44]	; 0x2c
        parser->state = LWJSON_SM_VALUE_END;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2207      	movs	r2, #7
 80084f6:	745a      	strb	r2, [r3, #17]
 80084f8:	e017      	b.n	800852a <FindSmValueHandler+0x13e>
    } else if (strncmp(parser->p, "false", strlen("false")) == 0) {
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fe:	2205      	movs	r2, #5
 8008500:	4916      	ldr	r1, [pc, #88]	; (800855c <FindSmValueHandler+0x170>)
 8008502:	4618      	mov	r0, r3
 8008504:	f000 fca3 	bl	8008e4e <strncmp>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <FindSmValueHandler+0x138>
        tempType = LWJSON_VAL_BOOLEAN;
 800850e:	2302      	movs	r3, #2
 8008510:	75fb      	strb	r3, [r7, #23]
        parser->p += strlen("false") - 1;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008516:	1d1a      	adds	r2, r3, #4
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	62da      	str	r2, [r3, #44]	; 0x2c
        parser->state = LWJSON_SM_VALUE_END;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2207      	movs	r2, #7
 8008520:	745a      	strb	r2, [r3, #17]
 8008522:	e002      	b.n	800852a <FindSmValueHandler+0x13e>
    } else {
        parser->state = LWJSON_SM_ERROR;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	220c      	movs	r2, #12
 8008528:	745a      	strb	r2, [r3, #17]
    }

    // Actualizar tipo e indicar fin
    if (parser->searchValuePending) {
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00b      	beq.n	800854c <FindSmValueHandler+0x160>
        parser->searchValuePending = false;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 2020 	strb.w	r2, [r3, #32]
        parser->found = true;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        parser->findResult->type = tempType;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008548:	7dfa      	ldrb	r2, [r7, #23]
 800854a:	721a      	strb	r2, [r3, #8]
    }
}
 800854c:	bf00      	nop
 800854e:	3718      	adds	r7, #24
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	0800a150 	.word	0x0800a150
 8008558:	0800a140 	.word	0x0800a140
 800855c:	0800a148 	.word	0x0800a148

08008560 <FindSmStringHandler>:

static void FindSmStringHandler(LwJsonParser *parser) {
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
    // Valor string. Puede encontrarse un car�cter v�lido o el fin de nombre
    while (parser->state == LWJSON_SM_STRING) {
 8008568:	e016      	b.n	8008598 <FindSmStringHandler+0x38>
        if ((parser->p[0]) == '"') {
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	2b22      	cmp	r3, #34	; 0x22
 8008572:	d103      	bne.n	800857c <FindSmStringHandler+0x1c>
            parser->state = LWJSON_SM_VALUE_END;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2207      	movs	r2, #7
 8008578:	745a      	strb	r2, [r3, #17]
 800857a:	e00d      	b.n	8008598 <FindSmStringHandler+0x38>
        } else if ((parser->p[0]) < 32) {
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	2b1f      	cmp	r3, #31
 8008584:	d803      	bhi.n	800858e <FindSmStringHandler+0x2e>
            parser->state = LWJSON_SM_ERROR;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	220c      	movs	r2, #12
 800858a:	745a      	strb	r2, [r3, #17]
 800858c:	e004      	b.n	8008598 <FindSmStringHandler+0x38>
        } else {
            parser->p++;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008592:	1c5a      	adds	r2, r3, #1
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	62da      	str	r2, [r3, #44]	; 0x2c
    while (parser->state == LWJSON_SM_STRING) {
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	7c5b      	ldrb	r3, [r3, #17]
 800859c:	2b06      	cmp	r3, #6
 800859e:	d0e4      	beq.n	800856a <FindSmStringHandler+0xa>
        }
    }
}
 80085a0:	bf00      	nop
 80085a2:	bf00      	nop
 80085a4:	370c      	adds	r7, #12
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <FindSmNumberHandler>:

static void FindSmNumberHandler(LwJsonParser *parser) {
 80085ae:	b480      	push	{r7}
 80085b0:	b083      	sub	sp, #12
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
    while (parser->state == LWJSON_SM_NUMBER) {
 80085b6:	e017      	b.n	80085e8 <FindSmNumberHandler+0x3a>
        // S�lo se soportan enteros. Si no se encuentra un entero, se pasa directamente a VALUE_END
        if (((parser->p[0]) >= '0') && ((parser->p[0]) <= '9')) {
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	2b2f      	cmp	r3, #47	; 0x2f
 80085c0:	d90a      	bls.n	80085d8 <FindSmNumberHandler+0x2a>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	2b39      	cmp	r3, #57	; 0x39
 80085ca:	d805      	bhi.n	80085d8 <FindSmNumberHandler+0x2a>
            parser->p++;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d0:	1c5a      	adds	r2, r3, #1
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80085d6:	e007      	b.n	80085e8 <FindSmNumberHandler+0x3a>
        } else {
            parser->state = LWJSON_SM_VALUE_END;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2207      	movs	r2, #7
 80085dc:	745a      	strb	r2, [r3, #17]
            parser->p--;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e2:	1e5a      	subs	r2, r3, #1
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	62da      	str	r2, [r3, #44]	; 0x2c
    while (parser->state == LWJSON_SM_NUMBER) {
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	7c5b      	ldrb	r3, [r3, #17]
 80085ec:	2b08      	cmp	r3, #8
 80085ee:	d0e3      	beq.n	80085b8 <FindSmNumberHandler+0xa>
        }
    }
}
 80085f0:	bf00      	nop
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
	...

08008600 <FindSmValueEndHandler>:

static void FindSmValueEndHandler(LwJsonParser *parser) {
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
    char findArrayString[10];
    char c;

    if (parser->found) {
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800860e:	2b00      	cmp	r3, #0
 8008610:	d017      	beq.n	8008642 <FindSmValueEndHandler+0x42>
        if (parser->depth == parser->searchDepth) {
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	695a      	ldr	r2, [r3, #20]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	429a      	cmp	r2, r3
 800861c:	d111      	bne.n	8008642 <FindSmValueEndHandler+0x42>
            parser->findResult->len = (parser->p - parser->msg->string) - parser->findResult->offset;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	4619      	mov	r1, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008636:	1a8a      	subs	r2, r1, r2
 8008638:	605a      	str	r2, [r3, #4]
            parser->found = false;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
    }

    // Sanity check
    if (parser->depth == 0) {
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d06f      	beq.n	800872a <FindSmValueEndHandler+0x12a>
        return;
    }

    c = parser->stack[parser->depth - 1];
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	3b01      	subs	r3, #1
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	4413      	add	r3, r2
 8008654:	7a1b      	ldrb	r3, [r3, #8]
 8008656:	75fb      	strb	r3, [r7, #23]
    if (c == LWJSON_PARENT_OBJECT) {
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d119      	bne.n	8008692 <FindSmValueEndHandler+0x92>
        // Another attribute or object end accepted
        if ((*parser->p) == ',') {
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b2c      	cmp	r3, #44	; 0x2c
 8008666:	d103      	bne.n	8008670 <FindSmValueEndHandler+0x70>
            parser->state = LWJSON_SM_OBJECT;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	745a      	strb	r2, [r3, #17]
 800866e:	e05d      	b.n	800872c <FindSmValueEndHandler+0x12c>
        } else if((*parser->p) == '}') {
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	2b7d      	cmp	r3, #125	; 0x7d
 8008678:	d107      	bne.n	800868a <FindSmValueEndHandler+0x8a>
            parser->state = LWJSON_SM_OBJECT_END;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2209      	movs	r2, #9
 800867e:	745a      	strb	r2, [r3, #17]
            lwJsonParserPop(parser, LWJSON_PARENT_OBJECT);
 8008680:	2100      	movs	r1, #0
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f8d7 	bl	8008836 <lwJsonParserPop>
 8008688:	e050      	b.n	800872c <FindSmValueEndHandler+0x12c>
        } else {
            parser->state = LWJSON_SM_ERROR;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	220c      	movs	r2, #12
 800868e:	745a      	strb	r2, [r3, #17]
 8008690:	e04c      	b.n	800872c <FindSmValueEndHandler+0x12c>
        }
    } else if (c == LWJSON_PARENT_ARRAY) {
 8008692:	7dfb      	ldrb	r3, [r7, #23]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d149      	bne.n	800872c <FindSmValueEndHandler+0x12c>
        // Another item or array end accepted
        if ((*parser->p) == ',') {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	2b2c      	cmp	r3, #44	; 0x2c
 80086a0:	d132      	bne.n	8008708 <FindSmValueEndHandler+0x108>
            parser->state = LWJSON_SM_VALUE;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2204      	movs	r2, #4
 80086a6:	745a      	strb	r2, [r3, #17]
            if ((parser->depth == (parser->findDepth + 1)) && (parser->findDepth < parser->searchDepth)) {
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	695a      	ldr	r2, [r3, #20]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	3301      	adds	r3, #1
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d13a      	bne.n	800872c <FindSmValueEndHandler+0x12c>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	699a      	ldr	r2, [r3, #24]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d234      	bcs.n	800872c <FindSmValueEndHandler+0x12c>
                // Update array search Index
                parser->currentArrayIndex++;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c6:	1c5a      	adds	r2, r3, #1
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	629a      	str	r2, [r3, #40]	; 0x28
                // Comprobar si se busca este �ndice de array
                sprintf(findArrayString, "[%u]", parser->currentArrayIndex);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086d0:	f107 030c 	add.w	r3, r7, #12
 80086d4:	4917      	ldr	r1, [pc, #92]	; (8008734 <FindSmValueEndHandler+0x134>)
 80086d6:	4618      	mov	r0, r3
 80086d8:	f000 fb4e 	bl	8008d78 <siprintf>
                if (strcmp(parser->path[parser->findDepth], findArrayString) == 0) {
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f107 020c 	add.w	r2, r7, #12
 80086ee:	4611      	mov	r1, r2
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7f7 fd6d 	bl	80001d0 <strcmp>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d117      	bne.n	800872c <FindSmValueEndHandler+0x12c>
                    parser->findDepth++;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	699b      	ldr	r3, [r3, #24]
 8008700:	1c5a      	adds	r2, r3, #1
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	619a      	str	r2, [r3, #24]
 8008706:	e011      	b.n	800872c <FindSmValueEndHandler+0x12c>
                }
            }
        } else if ((*parser->p) == ']') {
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	2b5d      	cmp	r3, #93	; 0x5d
 8008710:	d107      	bne.n	8008722 <FindSmValueEndHandler+0x122>
            parser->state = LWJSON_SM_ARRAY_END;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	220a      	movs	r2, #10
 8008716:	745a      	strb	r2, [r3, #17]
            lwJsonParserPop(parser, LWJSON_PARENT_ARRAY);
 8008718:	2101      	movs	r1, #1
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f88b 	bl	8008836 <lwJsonParserPop>
 8008720:	e004      	b.n	800872c <FindSmValueEndHandler+0x12c>
        } else {
            parser->state = LWJSON_SM_ERROR;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	220c      	movs	r2, #12
 8008726:	745a      	strb	r2, [r3, #17]
 8008728:	e000      	b.n	800872c <FindSmValueEndHandler+0x12c>
        return;
 800872a:	bf00      	nop
        }
    }
}
 800872c:	3718      	adds	r7, #24
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	0800a150 	.word	0x0800a150

08008738 <FindSmLevelEndHandler>:

static void FindSmLevelEndHandler(LwJsonParser *parser) {
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
    if ((parser->findDepth < parser->searchDepth) && (parser->depth == parser->findDepth)) {
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	699a      	ldr	r2, [r3, #24]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	69db      	ldr	r3, [r3, #28]
 8008748:	429a      	cmp	r2, r3
 800874a:	d208      	bcs.n	800875e <FindSmLevelEndHandler+0x26>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	695a      	ldr	r2, [r3, #20]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	699b      	ldr	r3, [r3, #24]
 8008754:	429a      	cmp	r2, r3
 8008756:	d102      	bne.n	800875e <FindSmLevelEndHandler+0x26>
        // Start search again
        parser->findDepth = 0;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	619a      	str	r2, [r3, #24]
    }
    if(parser->found) {
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008764:	2b00      	cmp	r3, #0
 8008766:	d017      	beq.n	8008798 <FindSmLevelEndHandler+0x60>
        if(parser->depth == parser->searchDepth) {
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	695a      	ldr	r2, [r3, #20]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	429a      	cmp	r2, r3
 8008772:	d111      	bne.n	8008798 <FindSmLevelEndHandler+0x60>
            parser->findResult->len = (parser->p - parser->msg->string) - parser->findResult->offset;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	1ad3      	subs	r3, r2, r3
 8008780:	4619      	mov	r1, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800878c:	1a8a      	subs	r2, r1, r2
 800878e:	605a      	str	r2, [r3, #4]
            parser->found = false;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        }
    }
    parser->p--;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879c:	1e5a      	subs	r2, r3, #1
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	62da      	str	r2, [r3, #44]	; 0x2c
    parser->state = LWJSON_SM_VALUE_END;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2207      	movs	r2, #7
 80087a6:	745a      	strb	r2, [r3, #17]
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <lwJsonCalculatePathDepth>:

static uint32_t lwJsonCalculatePathDepth(const char **path) {
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
    uint32_t result = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	60fb      	str	r3, [r7, #12]

    while (result <= LWJSON_DEPTH_MAX) {
 80087c0:	e009      	b.n	80087d6 <lwJsonCalculatePathDepth+0x22>
        if (path[result] == NULL) {
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	4413      	add	r3, r2
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d006      	beq.n	80087de <lwJsonCalculatePathDepth+0x2a>
            break;
        }
        result++;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	3301      	adds	r3, #1
 80087d4:	60fb      	str	r3, [r7, #12]
    while (result <= LWJSON_DEPTH_MAX) {
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2b08      	cmp	r3, #8
 80087da:	d9f2      	bls.n	80087c2 <lwJsonCalculatePathDepth+0xe>
 80087dc:	e000      	b.n	80087e0 <lwJsonCalculatePathDepth+0x2c>
            break;
 80087de:	bf00      	nop
    }

    return result;
 80087e0:	68fb      	ldr	r3, [r7, #12]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3714      	adds	r7, #20
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <lwJsonParserPush>:

static void lwJsonParserPush(LwJsonParser *parser, LwJsonParentType parent) {
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	460b      	mov	r3, r1
 80087f8:	70fb      	strb	r3, [r7, #3]
    // Actualizar parser path
    parser->stack[parser->depth] = parent;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	4413      	add	r3, r2
 8008802:	78fa      	ldrb	r2, [r7, #3]
 8008804:	721a      	strb	r2, [r3, #8]
    parser->depth++;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	1c5a      	adds	r2, r3, #1
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	615a      	str	r2, [r3, #20]

    if (parent == LWJSON_PARENT_ARRAY) {
 8008810:	78fb      	ldrb	r3, [r7, #3]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d102      	bne.n	800881c <lwJsonParserPush+0x2e>
        parser->currentArrayIndex = 0;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (parser->depth > LWJSON_DEPTH_MAX) {
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	695b      	ldr	r3, [r3, #20]
 8008820:	2b08      	cmp	r3, #8
 8008822:	d902      	bls.n	800882a <lwJsonParserPush+0x3c>
        parser->state = LWJSON_SM_ERROR;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	220c      	movs	r2, #12
 8008828:	745a      	strb	r2, [r3, #17]
    }
}
 800882a:	bf00      	nop
 800882c:	370c      	adds	r7, #12
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <lwJsonParserPop>:

static void lwJsonParserPop(LwJsonParser *parser, LwJsonParentType expectedParent) {
 8008836:	b480      	push	{r7}
 8008838:	b083      	sub	sp, #12
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
 800883e:	460b      	mov	r3, r1
 8008840:	70fb      	strb	r3, [r7, #3]
    if (parser->depth == 0) {
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	695b      	ldr	r3, [r3, #20]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d102      	bne.n	8008850 <lwJsonParserPop+0x1a>
        parser->state = LWJSON_SM_ERROR;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	220c      	movs	r2, #12
 800884e:	745a      	strb	r2, [r3, #17]
    }
    parser->depth--;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	695b      	ldr	r3, [r3, #20]
 8008854:	1e5a      	subs	r2, r3, #1
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	615a      	str	r2, [r3, #20]

    if (parser->stack[parser->depth] != expectedParent) {
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	4413      	add	r3, r2
 8008862:	7a1b      	ldrb	r3, [r3, #8]
 8008864:	78fa      	ldrb	r2, [r7, #3]
 8008866:	429a      	cmp	r2, r3
 8008868:	d003      	beq.n	8008872 <lwJsonParserPop+0x3c>
        parser->state = LWJSON_SM_ERROR;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	220c      	movs	r2, #12
 800886e:	745a      	strb	r2, [r3, #17]
    } else if (parser->depth == 0) {
        // End
        parser->state = LWJSON_SM_END;
    }
}
 8008870:	e006      	b.n	8008880 <lwJsonParserPop+0x4a>
    } else if (parser->depth == 0) {
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d102      	bne.n	8008880 <lwJsonParserPop+0x4a>
        parser->state = LWJSON_SM_END;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	220b      	movs	r2, #11
 800887e:	745a      	strb	r2, [r3, #17]
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <atoi>:
 800888c:	220a      	movs	r2, #10
 800888e:	2100      	movs	r1, #0
 8008890:	f000 bbd0 	b.w	8009034 <strtol>

08008894 <atol>:
 8008894:	220a      	movs	r2, #10
 8008896:	2100      	movs	r1, #0
 8008898:	f000 bbcc 	b.w	8009034 <strtol>

0800889c <__errno>:
 800889c:	4b01      	ldr	r3, [pc, #4]	; (80088a4 <__errno+0x8>)
 800889e:	6818      	ldr	r0, [r3, #0]
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	20000060 	.word	0x20000060

080088a8 <std>:
 80088a8:	2300      	movs	r3, #0
 80088aa:	b510      	push	{r4, lr}
 80088ac:	4604      	mov	r4, r0
 80088ae:	e9c0 3300 	strd	r3, r3, [r0]
 80088b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088b6:	6083      	str	r3, [r0, #8]
 80088b8:	8181      	strh	r1, [r0, #12]
 80088ba:	6643      	str	r3, [r0, #100]	; 0x64
 80088bc:	81c2      	strh	r2, [r0, #14]
 80088be:	6183      	str	r3, [r0, #24]
 80088c0:	4619      	mov	r1, r3
 80088c2:	2208      	movs	r2, #8
 80088c4:	305c      	adds	r0, #92	; 0x5c
 80088c6:	f000 f92b 	bl	8008b20 <memset>
 80088ca:	4b05      	ldr	r3, [pc, #20]	; (80088e0 <std+0x38>)
 80088cc:	6263      	str	r3, [r4, #36]	; 0x24
 80088ce:	4b05      	ldr	r3, [pc, #20]	; (80088e4 <std+0x3c>)
 80088d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80088d2:	4b05      	ldr	r3, [pc, #20]	; (80088e8 <std+0x40>)
 80088d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088d6:	4b05      	ldr	r3, [pc, #20]	; (80088ec <std+0x44>)
 80088d8:	6224      	str	r4, [r4, #32]
 80088da:	6323      	str	r3, [r4, #48]	; 0x30
 80088dc:	bd10      	pop	{r4, pc}
 80088de:	bf00      	nop
 80088e0:	08008db9 	.word	0x08008db9
 80088e4:	08008ddb 	.word	0x08008ddb
 80088e8:	08008e13 	.word	0x08008e13
 80088ec:	08008e37 	.word	0x08008e37

080088f0 <_cleanup_r>:
 80088f0:	4901      	ldr	r1, [pc, #4]	; (80088f8 <_cleanup_r+0x8>)
 80088f2:	f000 b8af 	b.w	8008a54 <_fwalk_reent>
 80088f6:	bf00      	nop
 80088f8:	080091d5 	.word	0x080091d5

080088fc <__sfmoreglue>:
 80088fc:	b570      	push	{r4, r5, r6, lr}
 80088fe:	1e4a      	subs	r2, r1, #1
 8008900:	2568      	movs	r5, #104	; 0x68
 8008902:	4355      	muls	r5, r2
 8008904:	460e      	mov	r6, r1
 8008906:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800890a:	f000 f961 	bl	8008bd0 <_malloc_r>
 800890e:	4604      	mov	r4, r0
 8008910:	b140      	cbz	r0, 8008924 <__sfmoreglue+0x28>
 8008912:	2100      	movs	r1, #0
 8008914:	e9c0 1600 	strd	r1, r6, [r0]
 8008918:	300c      	adds	r0, #12
 800891a:	60a0      	str	r0, [r4, #8]
 800891c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008920:	f000 f8fe 	bl	8008b20 <memset>
 8008924:	4620      	mov	r0, r4
 8008926:	bd70      	pop	{r4, r5, r6, pc}

08008928 <__sfp_lock_acquire>:
 8008928:	4801      	ldr	r0, [pc, #4]	; (8008930 <__sfp_lock_acquire+0x8>)
 800892a:	f000 b8d8 	b.w	8008ade <__retarget_lock_acquire_recursive>
 800892e:	bf00      	nop
 8008930:	20004462 	.word	0x20004462

08008934 <__sfp_lock_release>:
 8008934:	4801      	ldr	r0, [pc, #4]	; (800893c <__sfp_lock_release+0x8>)
 8008936:	f000 b8d3 	b.w	8008ae0 <__retarget_lock_release_recursive>
 800893a:	bf00      	nop
 800893c:	20004462 	.word	0x20004462

08008940 <__sinit_lock_acquire>:
 8008940:	4801      	ldr	r0, [pc, #4]	; (8008948 <__sinit_lock_acquire+0x8>)
 8008942:	f000 b8cc 	b.w	8008ade <__retarget_lock_acquire_recursive>
 8008946:	bf00      	nop
 8008948:	2000445d 	.word	0x2000445d

0800894c <__sinit_lock_release>:
 800894c:	4801      	ldr	r0, [pc, #4]	; (8008954 <__sinit_lock_release+0x8>)
 800894e:	f000 b8c7 	b.w	8008ae0 <__retarget_lock_release_recursive>
 8008952:	bf00      	nop
 8008954:	2000445d 	.word	0x2000445d

08008958 <__sinit>:
 8008958:	b510      	push	{r4, lr}
 800895a:	4604      	mov	r4, r0
 800895c:	f7ff fff0 	bl	8008940 <__sinit_lock_acquire>
 8008960:	69a3      	ldr	r3, [r4, #24]
 8008962:	b11b      	cbz	r3, 800896c <__sinit+0x14>
 8008964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008968:	f7ff bff0 	b.w	800894c <__sinit_lock_release>
 800896c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008970:	6523      	str	r3, [r4, #80]	; 0x50
 8008972:	4b13      	ldr	r3, [pc, #76]	; (80089c0 <__sinit+0x68>)
 8008974:	4a13      	ldr	r2, [pc, #76]	; (80089c4 <__sinit+0x6c>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	62a2      	str	r2, [r4, #40]	; 0x28
 800897a:	42a3      	cmp	r3, r4
 800897c:	bf04      	itt	eq
 800897e:	2301      	moveq	r3, #1
 8008980:	61a3      	streq	r3, [r4, #24]
 8008982:	4620      	mov	r0, r4
 8008984:	f000 f820 	bl	80089c8 <__sfp>
 8008988:	6060      	str	r0, [r4, #4]
 800898a:	4620      	mov	r0, r4
 800898c:	f000 f81c 	bl	80089c8 <__sfp>
 8008990:	60a0      	str	r0, [r4, #8]
 8008992:	4620      	mov	r0, r4
 8008994:	f000 f818 	bl	80089c8 <__sfp>
 8008998:	2200      	movs	r2, #0
 800899a:	60e0      	str	r0, [r4, #12]
 800899c:	2104      	movs	r1, #4
 800899e:	6860      	ldr	r0, [r4, #4]
 80089a0:	f7ff ff82 	bl	80088a8 <std>
 80089a4:	68a0      	ldr	r0, [r4, #8]
 80089a6:	2201      	movs	r2, #1
 80089a8:	2109      	movs	r1, #9
 80089aa:	f7ff ff7d 	bl	80088a8 <std>
 80089ae:	68e0      	ldr	r0, [r4, #12]
 80089b0:	2202      	movs	r2, #2
 80089b2:	2112      	movs	r1, #18
 80089b4:	f7ff ff78 	bl	80088a8 <std>
 80089b8:	2301      	movs	r3, #1
 80089ba:	61a3      	str	r3, [r4, #24]
 80089bc:	e7d2      	b.n	8008964 <__sinit+0xc>
 80089be:	bf00      	nop
 80089c0:	0800a238 	.word	0x0800a238
 80089c4:	080088f1 	.word	0x080088f1

080089c8 <__sfp>:
 80089c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ca:	4607      	mov	r7, r0
 80089cc:	f7ff ffac 	bl	8008928 <__sfp_lock_acquire>
 80089d0:	4b1e      	ldr	r3, [pc, #120]	; (8008a4c <__sfp+0x84>)
 80089d2:	681e      	ldr	r6, [r3, #0]
 80089d4:	69b3      	ldr	r3, [r6, #24]
 80089d6:	b913      	cbnz	r3, 80089de <__sfp+0x16>
 80089d8:	4630      	mov	r0, r6
 80089da:	f7ff ffbd 	bl	8008958 <__sinit>
 80089de:	3648      	adds	r6, #72	; 0x48
 80089e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80089e4:	3b01      	subs	r3, #1
 80089e6:	d503      	bpl.n	80089f0 <__sfp+0x28>
 80089e8:	6833      	ldr	r3, [r6, #0]
 80089ea:	b30b      	cbz	r3, 8008a30 <__sfp+0x68>
 80089ec:	6836      	ldr	r6, [r6, #0]
 80089ee:	e7f7      	b.n	80089e0 <__sfp+0x18>
 80089f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80089f4:	b9d5      	cbnz	r5, 8008a2c <__sfp+0x64>
 80089f6:	4b16      	ldr	r3, [pc, #88]	; (8008a50 <__sfp+0x88>)
 80089f8:	60e3      	str	r3, [r4, #12]
 80089fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80089fe:	6665      	str	r5, [r4, #100]	; 0x64
 8008a00:	f000 f86c 	bl	8008adc <__retarget_lock_init_recursive>
 8008a04:	f7ff ff96 	bl	8008934 <__sfp_lock_release>
 8008a08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a10:	6025      	str	r5, [r4, #0]
 8008a12:	61a5      	str	r5, [r4, #24]
 8008a14:	2208      	movs	r2, #8
 8008a16:	4629      	mov	r1, r5
 8008a18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a1c:	f000 f880 	bl	8008b20 <memset>
 8008a20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a28:	4620      	mov	r0, r4
 8008a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a2c:	3468      	adds	r4, #104	; 0x68
 8008a2e:	e7d9      	b.n	80089e4 <__sfp+0x1c>
 8008a30:	2104      	movs	r1, #4
 8008a32:	4638      	mov	r0, r7
 8008a34:	f7ff ff62 	bl	80088fc <__sfmoreglue>
 8008a38:	4604      	mov	r4, r0
 8008a3a:	6030      	str	r0, [r6, #0]
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	d1d5      	bne.n	80089ec <__sfp+0x24>
 8008a40:	f7ff ff78 	bl	8008934 <__sfp_lock_release>
 8008a44:	230c      	movs	r3, #12
 8008a46:	603b      	str	r3, [r7, #0]
 8008a48:	e7ee      	b.n	8008a28 <__sfp+0x60>
 8008a4a:	bf00      	nop
 8008a4c:	0800a238 	.word	0x0800a238
 8008a50:	ffff0001 	.word	0xffff0001

08008a54 <_fwalk_reent>:
 8008a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a58:	4606      	mov	r6, r0
 8008a5a:	4688      	mov	r8, r1
 8008a5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a60:	2700      	movs	r7, #0
 8008a62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a66:	f1b9 0901 	subs.w	r9, r9, #1
 8008a6a:	d505      	bpl.n	8008a78 <_fwalk_reent+0x24>
 8008a6c:	6824      	ldr	r4, [r4, #0]
 8008a6e:	2c00      	cmp	r4, #0
 8008a70:	d1f7      	bne.n	8008a62 <_fwalk_reent+0xe>
 8008a72:	4638      	mov	r0, r7
 8008a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a78:	89ab      	ldrh	r3, [r5, #12]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d907      	bls.n	8008a8e <_fwalk_reent+0x3a>
 8008a7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a82:	3301      	adds	r3, #1
 8008a84:	d003      	beq.n	8008a8e <_fwalk_reent+0x3a>
 8008a86:	4629      	mov	r1, r5
 8008a88:	4630      	mov	r0, r6
 8008a8a:	47c0      	blx	r8
 8008a8c:	4307      	orrs	r7, r0
 8008a8e:	3568      	adds	r5, #104	; 0x68
 8008a90:	e7e9      	b.n	8008a66 <_fwalk_reent+0x12>
	...

08008a94 <__libc_init_array>:
 8008a94:	b570      	push	{r4, r5, r6, lr}
 8008a96:	4d0d      	ldr	r5, [pc, #52]	; (8008acc <__libc_init_array+0x38>)
 8008a98:	4c0d      	ldr	r4, [pc, #52]	; (8008ad0 <__libc_init_array+0x3c>)
 8008a9a:	1b64      	subs	r4, r4, r5
 8008a9c:	10a4      	asrs	r4, r4, #2
 8008a9e:	2600      	movs	r6, #0
 8008aa0:	42a6      	cmp	r6, r4
 8008aa2:	d109      	bne.n	8008ab8 <__libc_init_array+0x24>
 8008aa4:	4d0b      	ldr	r5, [pc, #44]	; (8008ad4 <__libc_init_array+0x40>)
 8008aa6:	4c0c      	ldr	r4, [pc, #48]	; (8008ad8 <__libc_init_array+0x44>)
 8008aa8:	f001 fa36 	bl	8009f18 <_init>
 8008aac:	1b64      	subs	r4, r4, r5
 8008aae:	10a4      	asrs	r4, r4, #2
 8008ab0:	2600      	movs	r6, #0
 8008ab2:	42a6      	cmp	r6, r4
 8008ab4:	d105      	bne.n	8008ac2 <__libc_init_array+0x2e>
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}
 8008ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008abc:	4798      	blx	r3
 8008abe:	3601      	adds	r6, #1
 8008ac0:	e7ee      	b.n	8008aa0 <__libc_init_array+0xc>
 8008ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ac6:	4798      	blx	r3
 8008ac8:	3601      	adds	r6, #1
 8008aca:	e7f2      	b.n	8008ab2 <__libc_init_array+0x1e>
 8008acc:	0800a42c 	.word	0x0800a42c
 8008ad0:	0800a42c 	.word	0x0800a42c
 8008ad4:	0800a42c 	.word	0x0800a42c
 8008ad8:	0800a430 	.word	0x0800a430

08008adc <__retarget_lock_init_recursive>:
 8008adc:	4770      	bx	lr

08008ade <__retarget_lock_acquire_recursive>:
 8008ade:	4770      	bx	lr

08008ae0 <__retarget_lock_release_recursive>:
 8008ae0:	4770      	bx	lr
	...

08008ae4 <malloc>:
 8008ae4:	4b02      	ldr	r3, [pc, #8]	; (8008af0 <malloc+0xc>)
 8008ae6:	4601      	mov	r1, r0
 8008ae8:	6818      	ldr	r0, [r3, #0]
 8008aea:	f000 b871 	b.w	8008bd0 <_malloc_r>
 8008aee:	bf00      	nop
 8008af0:	20000060 	.word	0x20000060

08008af4 <free>:
 8008af4:	4b02      	ldr	r3, [pc, #8]	; (8008b00 <free+0xc>)
 8008af6:	4601      	mov	r1, r0
 8008af8:	6818      	ldr	r0, [r3, #0]
 8008afa:	f000 b819 	b.w	8008b30 <_free_r>
 8008afe:	bf00      	nop
 8008b00:	20000060 	.word	0x20000060

08008b04 <memcpy>:
 8008b04:	440a      	add	r2, r1
 8008b06:	4291      	cmp	r1, r2
 8008b08:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b0c:	d100      	bne.n	8008b10 <memcpy+0xc>
 8008b0e:	4770      	bx	lr
 8008b10:	b510      	push	{r4, lr}
 8008b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b1a:	4291      	cmp	r1, r2
 8008b1c:	d1f9      	bne.n	8008b12 <memcpy+0xe>
 8008b1e:	bd10      	pop	{r4, pc}

08008b20 <memset>:
 8008b20:	4402      	add	r2, r0
 8008b22:	4603      	mov	r3, r0
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d100      	bne.n	8008b2a <memset+0xa>
 8008b28:	4770      	bx	lr
 8008b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b2e:	e7f9      	b.n	8008b24 <memset+0x4>

08008b30 <_free_r>:
 8008b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b32:	2900      	cmp	r1, #0
 8008b34:	d048      	beq.n	8008bc8 <_free_r+0x98>
 8008b36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b3a:	9001      	str	r0, [sp, #4]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f1a1 0404 	sub.w	r4, r1, #4
 8008b42:	bfb8      	it	lt
 8008b44:	18e4      	addlt	r4, r4, r3
 8008b46:	f000 fba5 	bl	8009294 <__malloc_lock>
 8008b4a:	4a20      	ldr	r2, [pc, #128]	; (8008bcc <_free_r+0x9c>)
 8008b4c:	9801      	ldr	r0, [sp, #4]
 8008b4e:	6813      	ldr	r3, [r2, #0]
 8008b50:	4615      	mov	r5, r2
 8008b52:	b933      	cbnz	r3, 8008b62 <_free_r+0x32>
 8008b54:	6063      	str	r3, [r4, #4]
 8008b56:	6014      	str	r4, [r2, #0]
 8008b58:	b003      	add	sp, #12
 8008b5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b5e:	f000 bb9f 	b.w	80092a0 <__malloc_unlock>
 8008b62:	42a3      	cmp	r3, r4
 8008b64:	d90b      	bls.n	8008b7e <_free_r+0x4e>
 8008b66:	6821      	ldr	r1, [r4, #0]
 8008b68:	1862      	adds	r2, r4, r1
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	bf04      	itt	eq
 8008b6e:	681a      	ldreq	r2, [r3, #0]
 8008b70:	685b      	ldreq	r3, [r3, #4]
 8008b72:	6063      	str	r3, [r4, #4]
 8008b74:	bf04      	itt	eq
 8008b76:	1852      	addeq	r2, r2, r1
 8008b78:	6022      	streq	r2, [r4, #0]
 8008b7a:	602c      	str	r4, [r5, #0]
 8008b7c:	e7ec      	b.n	8008b58 <_free_r+0x28>
 8008b7e:	461a      	mov	r2, r3
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	b10b      	cbz	r3, 8008b88 <_free_r+0x58>
 8008b84:	42a3      	cmp	r3, r4
 8008b86:	d9fa      	bls.n	8008b7e <_free_r+0x4e>
 8008b88:	6811      	ldr	r1, [r2, #0]
 8008b8a:	1855      	adds	r5, r2, r1
 8008b8c:	42a5      	cmp	r5, r4
 8008b8e:	d10b      	bne.n	8008ba8 <_free_r+0x78>
 8008b90:	6824      	ldr	r4, [r4, #0]
 8008b92:	4421      	add	r1, r4
 8008b94:	1854      	adds	r4, r2, r1
 8008b96:	42a3      	cmp	r3, r4
 8008b98:	6011      	str	r1, [r2, #0]
 8008b9a:	d1dd      	bne.n	8008b58 <_free_r+0x28>
 8008b9c:	681c      	ldr	r4, [r3, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	6053      	str	r3, [r2, #4]
 8008ba2:	4421      	add	r1, r4
 8008ba4:	6011      	str	r1, [r2, #0]
 8008ba6:	e7d7      	b.n	8008b58 <_free_r+0x28>
 8008ba8:	d902      	bls.n	8008bb0 <_free_r+0x80>
 8008baa:	230c      	movs	r3, #12
 8008bac:	6003      	str	r3, [r0, #0]
 8008bae:	e7d3      	b.n	8008b58 <_free_r+0x28>
 8008bb0:	6825      	ldr	r5, [r4, #0]
 8008bb2:	1961      	adds	r1, r4, r5
 8008bb4:	428b      	cmp	r3, r1
 8008bb6:	bf04      	itt	eq
 8008bb8:	6819      	ldreq	r1, [r3, #0]
 8008bba:	685b      	ldreq	r3, [r3, #4]
 8008bbc:	6063      	str	r3, [r4, #4]
 8008bbe:	bf04      	itt	eq
 8008bc0:	1949      	addeq	r1, r1, r5
 8008bc2:	6021      	streq	r1, [r4, #0]
 8008bc4:	6054      	str	r4, [r2, #4]
 8008bc6:	e7c7      	b.n	8008b58 <_free_r+0x28>
 8008bc8:	b003      	add	sp, #12
 8008bca:	bd30      	pop	{r4, r5, pc}
 8008bcc:	200040ec 	.word	0x200040ec

08008bd0 <_malloc_r>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	1ccd      	adds	r5, r1, #3
 8008bd4:	f025 0503 	bic.w	r5, r5, #3
 8008bd8:	3508      	adds	r5, #8
 8008bda:	2d0c      	cmp	r5, #12
 8008bdc:	bf38      	it	cc
 8008bde:	250c      	movcc	r5, #12
 8008be0:	2d00      	cmp	r5, #0
 8008be2:	4606      	mov	r6, r0
 8008be4:	db01      	blt.n	8008bea <_malloc_r+0x1a>
 8008be6:	42a9      	cmp	r1, r5
 8008be8:	d903      	bls.n	8008bf2 <_malloc_r+0x22>
 8008bea:	230c      	movs	r3, #12
 8008bec:	6033      	str	r3, [r6, #0]
 8008bee:	2000      	movs	r0, #0
 8008bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bf2:	f000 fb4f 	bl	8009294 <__malloc_lock>
 8008bf6:	4921      	ldr	r1, [pc, #132]	; (8008c7c <_malloc_r+0xac>)
 8008bf8:	680a      	ldr	r2, [r1, #0]
 8008bfa:	4614      	mov	r4, r2
 8008bfc:	b99c      	cbnz	r4, 8008c26 <_malloc_r+0x56>
 8008bfe:	4f20      	ldr	r7, [pc, #128]	; (8008c80 <_malloc_r+0xb0>)
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	b923      	cbnz	r3, 8008c0e <_malloc_r+0x3e>
 8008c04:	4621      	mov	r1, r4
 8008c06:	4630      	mov	r0, r6
 8008c08:	f000 f8a6 	bl	8008d58 <_sbrk_r>
 8008c0c:	6038      	str	r0, [r7, #0]
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4630      	mov	r0, r6
 8008c12:	f000 f8a1 	bl	8008d58 <_sbrk_r>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d123      	bne.n	8008c62 <_malloc_r+0x92>
 8008c1a:	230c      	movs	r3, #12
 8008c1c:	6033      	str	r3, [r6, #0]
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f000 fb3e 	bl	80092a0 <__malloc_unlock>
 8008c24:	e7e3      	b.n	8008bee <_malloc_r+0x1e>
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	1b5b      	subs	r3, r3, r5
 8008c2a:	d417      	bmi.n	8008c5c <_malloc_r+0x8c>
 8008c2c:	2b0b      	cmp	r3, #11
 8008c2e:	d903      	bls.n	8008c38 <_malloc_r+0x68>
 8008c30:	6023      	str	r3, [r4, #0]
 8008c32:	441c      	add	r4, r3
 8008c34:	6025      	str	r5, [r4, #0]
 8008c36:	e004      	b.n	8008c42 <_malloc_r+0x72>
 8008c38:	6863      	ldr	r3, [r4, #4]
 8008c3a:	42a2      	cmp	r2, r4
 8008c3c:	bf0c      	ite	eq
 8008c3e:	600b      	streq	r3, [r1, #0]
 8008c40:	6053      	strne	r3, [r2, #4]
 8008c42:	4630      	mov	r0, r6
 8008c44:	f000 fb2c 	bl	80092a0 <__malloc_unlock>
 8008c48:	f104 000b 	add.w	r0, r4, #11
 8008c4c:	1d23      	adds	r3, r4, #4
 8008c4e:	f020 0007 	bic.w	r0, r0, #7
 8008c52:	1ac2      	subs	r2, r0, r3
 8008c54:	d0cc      	beq.n	8008bf0 <_malloc_r+0x20>
 8008c56:	1a1b      	subs	r3, r3, r0
 8008c58:	50a3      	str	r3, [r4, r2]
 8008c5a:	e7c9      	b.n	8008bf0 <_malloc_r+0x20>
 8008c5c:	4622      	mov	r2, r4
 8008c5e:	6864      	ldr	r4, [r4, #4]
 8008c60:	e7cc      	b.n	8008bfc <_malloc_r+0x2c>
 8008c62:	1cc4      	adds	r4, r0, #3
 8008c64:	f024 0403 	bic.w	r4, r4, #3
 8008c68:	42a0      	cmp	r0, r4
 8008c6a:	d0e3      	beq.n	8008c34 <_malloc_r+0x64>
 8008c6c:	1a21      	subs	r1, r4, r0
 8008c6e:	4630      	mov	r0, r6
 8008c70:	f000 f872 	bl	8008d58 <_sbrk_r>
 8008c74:	3001      	adds	r0, #1
 8008c76:	d1dd      	bne.n	8008c34 <_malloc_r+0x64>
 8008c78:	e7cf      	b.n	8008c1a <_malloc_r+0x4a>
 8008c7a:	bf00      	nop
 8008c7c:	200040ec 	.word	0x200040ec
 8008c80:	200040f0 	.word	0x200040f0

08008c84 <cleanup_glue>:
 8008c84:	b538      	push	{r3, r4, r5, lr}
 8008c86:	460c      	mov	r4, r1
 8008c88:	6809      	ldr	r1, [r1, #0]
 8008c8a:	4605      	mov	r5, r0
 8008c8c:	b109      	cbz	r1, 8008c92 <cleanup_glue+0xe>
 8008c8e:	f7ff fff9 	bl	8008c84 <cleanup_glue>
 8008c92:	4621      	mov	r1, r4
 8008c94:	4628      	mov	r0, r5
 8008c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c9a:	f7ff bf49 	b.w	8008b30 <_free_r>
	...

08008ca0 <_reclaim_reent>:
 8008ca0:	4b2c      	ldr	r3, [pc, #176]	; (8008d54 <_reclaim_reent+0xb4>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4283      	cmp	r3, r0
 8008ca6:	b570      	push	{r4, r5, r6, lr}
 8008ca8:	4604      	mov	r4, r0
 8008caa:	d051      	beq.n	8008d50 <_reclaim_reent+0xb0>
 8008cac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008cae:	b143      	cbz	r3, 8008cc2 <_reclaim_reent+0x22>
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d14a      	bne.n	8008d4c <_reclaim_reent+0xac>
 8008cb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cb8:	6819      	ldr	r1, [r3, #0]
 8008cba:	b111      	cbz	r1, 8008cc2 <_reclaim_reent+0x22>
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f7ff ff37 	bl	8008b30 <_free_r>
 8008cc2:	6961      	ldr	r1, [r4, #20]
 8008cc4:	b111      	cbz	r1, 8008ccc <_reclaim_reent+0x2c>
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f7ff ff32 	bl	8008b30 <_free_r>
 8008ccc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008cce:	b111      	cbz	r1, 8008cd6 <_reclaim_reent+0x36>
 8008cd0:	4620      	mov	r0, r4
 8008cd2:	f7ff ff2d 	bl	8008b30 <_free_r>
 8008cd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008cd8:	b111      	cbz	r1, 8008ce0 <_reclaim_reent+0x40>
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f7ff ff28 	bl	8008b30 <_free_r>
 8008ce0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008ce2:	b111      	cbz	r1, 8008cea <_reclaim_reent+0x4a>
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f7ff ff23 	bl	8008b30 <_free_r>
 8008cea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008cec:	b111      	cbz	r1, 8008cf4 <_reclaim_reent+0x54>
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f7ff ff1e 	bl	8008b30 <_free_r>
 8008cf4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008cf6:	b111      	cbz	r1, 8008cfe <_reclaim_reent+0x5e>
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f7ff ff19 	bl	8008b30 <_free_r>
 8008cfe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008d00:	b111      	cbz	r1, 8008d08 <_reclaim_reent+0x68>
 8008d02:	4620      	mov	r0, r4
 8008d04:	f7ff ff14 	bl	8008b30 <_free_r>
 8008d08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d0a:	b111      	cbz	r1, 8008d12 <_reclaim_reent+0x72>
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f7ff ff0f 	bl	8008b30 <_free_r>
 8008d12:	69a3      	ldr	r3, [r4, #24]
 8008d14:	b1e3      	cbz	r3, 8008d50 <_reclaim_reent+0xb0>
 8008d16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d18:	4620      	mov	r0, r4
 8008d1a:	4798      	blx	r3
 8008d1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008d1e:	b1b9      	cbz	r1, 8008d50 <_reclaim_reent+0xb0>
 8008d20:	4620      	mov	r0, r4
 8008d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008d26:	f7ff bfad 	b.w	8008c84 <cleanup_glue>
 8008d2a:	5949      	ldr	r1, [r1, r5]
 8008d2c:	b941      	cbnz	r1, 8008d40 <_reclaim_reent+0xa0>
 8008d2e:	3504      	adds	r5, #4
 8008d30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d32:	2d80      	cmp	r5, #128	; 0x80
 8008d34:	68d9      	ldr	r1, [r3, #12]
 8008d36:	d1f8      	bne.n	8008d2a <_reclaim_reent+0x8a>
 8008d38:	4620      	mov	r0, r4
 8008d3a:	f7ff fef9 	bl	8008b30 <_free_r>
 8008d3e:	e7ba      	b.n	8008cb6 <_reclaim_reent+0x16>
 8008d40:	680e      	ldr	r6, [r1, #0]
 8008d42:	4620      	mov	r0, r4
 8008d44:	f7ff fef4 	bl	8008b30 <_free_r>
 8008d48:	4631      	mov	r1, r6
 8008d4a:	e7ef      	b.n	8008d2c <_reclaim_reent+0x8c>
 8008d4c:	2500      	movs	r5, #0
 8008d4e:	e7ef      	b.n	8008d30 <_reclaim_reent+0x90>
 8008d50:	bd70      	pop	{r4, r5, r6, pc}
 8008d52:	bf00      	nop
 8008d54:	20000060 	.word	0x20000060

08008d58 <_sbrk_r>:
 8008d58:	b538      	push	{r3, r4, r5, lr}
 8008d5a:	4d06      	ldr	r5, [pc, #24]	; (8008d74 <_sbrk_r+0x1c>)
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	4604      	mov	r4, r0
 8008d60:	4608      	mov	r0, r1
 8008d62:	602b      	str	r3, [r5, #0]
 8008d64:	f7f9 f830 	bl	8001dc8 <_sbrk>
 8008d68:	1c43      	adds	r3, r0, #1
 8008d6a:	d102      	bne.n	8008d72 <_sbrk_r+0x1a>
 8008d6c:	682b      	ldr	r3, [r5, #0]
 8008d6e:	b103      	cbz	r3, 8008d72 <_sbrk_r+0x1a>
 8008d70:	6023      	str	r3, [r4, #0]
 8008d72:	bd38      	pop	{r3, r4, r5, pc}
 8008d74:	20004464 	.word	0x20004464

08008d78 <siprintf>:
 8008d78:	b40e      	push	{r1, r2, r3}
 8008d7a:	b500      	push	{lr}
 8008d7c:	b09c      	sub	sp, #112	; 0x70
 8008d7e:	ab1d      	add	r3, sp, #116	; 0x74
 8008d80:	9002      	str	r0, [sp, #8]
 8008d82:	9006      	str	r0, [sp, #24]
 8008d84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d88:	4809      	ldr	r0, [pc, #36]	; (8008db0 <siprintf+0x38>)
 8008d8a:	9107      	str	r1, [sp, #28]
 8008d8c:	9104      	str	r1, [sp, #16]
 8008d8e:	4909      	ldr	r1, [pc, #36]	; (8008db4 <siprintf+0x3c>)
 8008d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d94:	9105      	str	r1, [sp, #20]
 8008d96:	6800      	ldr	r0, [r0, #0]
 8008d98:	9301      	str	r3, [sp, #4]
 8008d9a:	a902      	add	r1, sp, #8
 8008d9c:	f000 fae2 	bl	8009364 <_svfiprintf_r>
 8008da0:	9b02      	ldr	r3, [sp, #8]
 8008da2:	2200      	movs	r2, #0
 8008da4:	701a      	strb	r2, [r3, #0]
 8008da6:	b01c      	add	sp, #112	; 0x70
 8008da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dac:	b003      	add	sp, #12
 8008dae:	4770      	bx	lr
 8008db0:	20000060 	.word	0x20000060
 8008db4:	ffff0208 	.word	0xffff0208

08008db8 <__sread>:
 8008db8:	b510      	push	{r4, lr}
 8008dba:	460c      	mov	r4, r1
 8008dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc0:	f000 febe 	bl	8009b40 <_read_r>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	bfab      	itete	ge
 8008dc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008dca:	89a3      	ldrhlt	r3, [r4, #12]
 8008dcc:	181b      	addge	r3, r3, r0
 8008dce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008dd2:	bfac      	ite	ge
 8008dd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8008dd6:	81a3      	strhlt	r3, [r4, #12]
 8008dd8:	bd10      	pop	{r4, pc}

08008dda <__swrite>:
 8008dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dde:	461f      	mov	r7, r3
 8008de0:	898b      	ldrh	r3, [r1, #12]
 8008de2:	05db      	lsls	r3, r3, #23
 8008de4:	4605      	mov	r5, r0
 8008de6:	460c      	mov	r4, r1
 8008de8:	4616      	mov	r6, r2
 8008dea:	d505      	bpl.n	8008df8 <__swrite+0x1e>
 8008dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008df0:	2302      	movs	r3, #2
 8008df2:	2200      	movs	r2, #0
 8008df4:	f000 fa3c 	bl	8009270 <_lseek_r>
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e02:	81a3      	strh	r3, [r4, #12]
 8008e04:	4632      	mov	r2, r6
 8008e06:	463b      	mov	r3, r7
 8008e08:	4628      	mov	r0, r5
 8008e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0e:	f000 b91b 	b.w	8009048 <_write_r>

08008e12 <__sseek>:
 8008e12:	b510      	push	{r4, lr}
 8008e14:	460c      	mov	r4, r1
 8008e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e1a:	f000 fa29 	bl	8009270 <_lseek_r>
 8008e1e:	1c43      	adds	r3, r0, #1
 8008e20:	89a3      	ldrh	r3, [r4, #12]
 8008e22:	bf15      	itete	ne
 8008e24:	6560      	strne	r0, [r4, #84]	; 0x54
 8008e26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008e2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008e2e:	81a3      	strheq	r3, [r4, #12]
 8008e30:	bf18      	it	ne
 8008e32:	81a3      	strhne	r3, [r4, #12]
 8008e34:	bd10      	pop	{r4, pc}

08008e36 <__sclose>:
 8008e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e3a:	f000 b935 	b.w	80090a8 <_close_r>

08008e3e <strcpy>:
 8008e3e:	4603      	mov	r3, r0
 8008e40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e44:	f803 2b01 	strb.w	r2, [r3], #1
 8008e48:	2a00      	cmp	r2, #0
 8008e4a:	d1f9      	bne.n	8008e40 <strcpy+0x2>
 8008e4c:	4770      	bx	lr

08008e4e <strncmp>:
 8008e4e:	b510      	push	{r4, lr}
 8008e50:	b16a      	cbz	r2, 8008e6e <strncmp+0x20>
 8008e52:	3901      	subs	r1, #1
 8008e54:	1884      	adds	r4, r0, r2
 8008e56:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008e5a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d103      	bne.n	8008e6a <strncmp+0x1c>
 8008e62:	42a0      	cmp	r0, r4
 8008e64:	d001      	beq.n	8008e6a <strncmp+0x1c>
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1f5      	bne.n	8008e56 <strncmp+0x8>
 8008e6a:	1a98      	subs	r0, r3, r2
 8008e6c:	bd10      	pop	{r4, pc}
 8008e6e:	4610      	mov	r0, r2
 8008e70:	e7fc      	b.n	8008e6c <strncmp+0x1e>
	...

08008e74 <strtok>:
 8008e74:	4b16      	ldr	r3, [pc, #88]	; (8008ed0 <strtok+0x5c>)
 8008e76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e78:	681e      	ldr	r6, [r3, #0]
 8008e7a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8008e7c:	4605      	mov	r5, r0
 8008e7e:	b9fc      	cbnz	r4, 8008ec0 <strtok+0x4c>
 8008e80:	2050      	movs	r0, #80	; 0x50
 8008e82:	9101      	str	r1, [sp, #4]
 8008e84:	f7ff fe2e 	bl	8008ae4 <malloc>
 8008e88:	9901      	ldr	r1, [sp, #4]
 8008e8a:	65b0      	str	r0, [r6, #88]	; 0x58
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	b920      	cbnz	r0, 8008e9a <strtok+0x26>
 8008e90:	4b10      	ldr	r3, [pc, #64]	; (8008ed4 <strtok+0x60>)
 8008e92:	4811      	ldr	r0, [pc, #68]	; (8008ed8 <strtok+0x64>)
 8008e94:	2157      	movs	r1, #87	; 0x57
 8008e96:	f000 f8e9 	bl	800906c <__assert_func>
 8008e9a:	e9c0 4400 	strd	r4, r4, [r0]
 8008e9e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008ea2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008ea6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008eaa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008eae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008eb2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008eb6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008eba:	6184      	str	r4, [r0, #24]
 8008ebc:	7704      	strb	r4, [r0, #28]
 8008ebe:	6244      	str	r4, [r0, #36]	; 0x24
 8008ec0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	b002      	add	sp, #8
 8008ec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008ecc:	f000 b806 	b.w	8008edc <__strtok_r>
 8008ed0:	20000060 	.word	0x20000060
 8008ed4:	0800a23c 	.word	0x0800a23c
 8008ed8:	0800a253 	.word	0x0800a253

08008edc <__strtok_r>:
 8008edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ede:	b908      	cbnz	r0, 8008ee4 <__strtok_r+0x8>
 8008ee0:	6810      	ldr	r0, [r2, #0]
 8008ee2:	b188      	cbz	r0, 8008f08 <__strtok_r+0x2c>
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008eec:	460f      	mov	r7, r1
 8008eee:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008ef2:	b91e      	cbnz	r6, 8008efc <__strtok_r+0x20>
 8008ef4:	b965      	cbnz	r5, 8008f10 <__strtok_r+0x34>
 8008ef6:	6015      	str	r5, [r2, #0]
 8008ef8:	4628      	mov	r0, r5
 8008efa:	e005      	b.n	8008f08 <__strtok_r+0x2c>
 8008efc:	42b5      	cmp	r5, r6
 8008efe:	d1f6      	bne.n	8008eee <__strtok_r+0x12>
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d1f0      	bne.n	8008ee6 <__strtok_r+0xa>
 8008f04:	6014      	str	r4, [r2, #0]
 8008f06:	7003      	strb	r3, [r0, #0]
 8008f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f0a:	461c      	mov	r4, r3
 8008f0c:	e00c      	b.n	8008f28 <__strtok_r+0x4c>
 8008f0e:	b915      	cbnz	r5, 8008f16 <__strtok_r+0x3a>
 8008f10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f14:	460e      	mov	r6, r1
 8008f16:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008f1a:	42ab      	cmp	r3, r5
 8008f1c:	d1f7      	bne.n	8008f0e <__strtok_r+0x32>
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d0f3      	beq.n	8008f0a <__strtok_r+0x2e>
 8008f22:	2300      	movs	r3, #0
 8008f24:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008f28:	6014      	str	r4, [r2, #0]
 8008f2a:	e7ed      	b.n	8008f08 <__strtok_r+0x2c>

08008f2c <_strtol_l.isra.0>:
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f32:	d001      	beq.n	8008f38 <_strtol_l.isra.0+0xc>
 8008f34:	2b24      	cmp	r3, #36	; 0x24
 8008f36:	d906      	bls.n	8008f46 <_strtol_l.isra.0+0x1a>
 8008f38:	f7ff fcb0 	bl	800889c <__errno>
 8008f3c:	2316      	movs	r3, #22
 8008f3e:	6003      	str	r3, [r0, #0]
 8008f40:	2000      	movs	r0, #0
 8008f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f46:	4f3a      	ldr	r7, [pc, #232]	; (8009030 <_strtol_l.isra.0+0x104>)
 8008f48:	468e      	mov	lr, r1
 8008f4a:	4676      	mov	r6, lr
 8008f4c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008f50:	5de5      	ldrb	r5, [r4, r7]
 8008f52:	f015 0508 	ands.w	r5, r5, #8
 8008f56:	d1f8      	bne.n	8008f4a <_strtol_l.isra.0+0x1e>
 8008f58:	2c2d      	cmp	r4, #45	; 0x2d
 8008f5a:	d134      	bne.n	8008fc6 <_strtol_l.isra.0+0x9a>
 8008f5c:	f89e 4000 	ldrb.w	r4, [lr]
 8008f60:	f04f 0801 	mov.w	r8, #1
 8008f64:	f106 0e02 	add.w	lr, r6, #2
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d05c      	beq.n	8009026 <_strtol_l.isra.0+0xfa>
 8008f6c:	2b10      	cmp	r3, #16
 8008f6e:	d10c      	bne.n	8008f8a <_strtol_l.isra.0+0x5e>
 8008f70:	2c30      	cmp	r4, #48	; 0x30
 8008f72:	d10a      	bne.n	8008f8a <_strtol_l.isra.0+0x5e>
 8008f74:	f89e 4000 	ldrb.w	r4, [lr]
 8008f78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008f7c:	2c58      	cmp	r4, #88	; 0x58
 8008f7e:	d14d      	bne.n	800901c <_strtol_l.isra.0+0xf0>
 8008f80:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008f84:	2310      	movs	r3, #16
 8008f86:	f10e 0e02 	add.w	lr, lr, #2
 8008f8a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008f8e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008f92:	2600      	movs	r6, #0
 8008f94:	fbbc f9f3 	udiv	r9, ip, r3
 8008f98:	4635      	mov	r5, r6
 8008f9a:	fb03 ca19 	mls	sl, r3, r9, ip
 8008f9e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008fa2:	2f09      	cmp	r7, #9
 8008fa4:	d818      	bhi.n	8008fd8 <_strtol_l.isra.0+0xac>
 8008fa6:	463c      	mov	r4, r7
 8008fa8:	42a3      	cmp	r3, r4
 8008faa:	dd24      	ble.n	8008ff6 <_strtol_l.isra.0+0xca>
 8008fac:	2e00      	cmp	r6, #0
 8008fae:	db1f      	blt.n	8008ff0 <_strtol_l.isra.0+0xc4>
 8008fb0:	45a9      	cmp	r9, r5
 8008fb2:	d31d      	bcc.n	8008ff0 <_strtol_l.isra.0+0xc4>
 8008fb4:	d101      	bne.n	8008fba <_strtol_l.isra.0+0x8e>
 8008fb6:	45a2      	cmp	sl, r4
 8008fb8:	db1a      	blt.n	8008ff0 <_strtol_l.isra.0+0xc4>
 8008fba:	fb05 4503 	mla	r5, r5, r3, r4
 8008fbe:	2601      	movs	r6, #1
 8008fc0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008fc4:	e7eb      	b.n	8008f9e <_strtol_l.isra.0+0x72>
 8008fc6:	2c2b      	cmp	r4, #43	; 0x2b
 8008fc8:	bf08      	it	eq
 8008fca:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008fce:	46a8      	mov	r8, r5
 8008fd0:	bf08      	it	eq
 8008fd2:	f106 0e02 	addeq.w	lr, r6, #2
 8008fd6:	e7c7      	b.n	8008f68 <_strtol_l.isra.0+0x3c>
 8008fd8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008fdc:	2f19      	cmp	r7, #25
 8008fde:	d801      	bhi.n	8008fe4 <_strtol_l.isra.0+0xb8>
 8008fe0:	3c37      	subs	r4, #55	; 0x37
 8008fe2:	e7e1      	b.n	8008fa8 <_strtol_l.isra.0+0x7c>
 8008fe4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008fe8:	2f19      	cmp	r7, #25
 8008fea:	d804      	bhi.n	8008ff6 <_strtol_l.isra.0+0xca>
 8008fec:	3c57      	subs	r4, #87	; 0x57
 8008fee:	e7db      	b.n	8008fa8 <_strtol_l.isra.0+0x7c>
 8008ff0:	f04f 36ff 	mov.w	r6, #4294967295
 8008ff4:	e7e4      	b.n	8008fc0 <_strtol_l.isra.0+0x94>
 8008ff6:	2e00      	cmp	r6, #0
 8008ff8:	da05      	bge.n	8009006 <_strtol_l.isra.0+0xda>
 8008ffa:	2322      	movs	r3, #34	; 0x22
 8008ffc:	6003      	str	r3, [r0, #0]
 8008ffe:	4665      	mov	r5, ip
 8009000:	b942      	cbnz	r2, 8009014 <_strtol_l.isra.0+0xe8>
 8009002:	4628      	mov	r0, r5
 8009004:	e79d      	b.n	8008f42 <_strtol_l.isra.0+0x16>
 8009006:	f1b8 0f00 	cmp.w	r8, #0
 800900a:	d000      	beq.n	800900e <_strtol_l.isra.0+0xe2>
 800900c:	426d      	negs	r5, r5
 800900e:	2a00      	cmp	r2, #0
 8009010:	d0f7      	beq.n	8009002 <_strtol_l.isra.0+0xd6>
 8009012:	b10e      	cbz	r6, 8009018 <_strtol_l.isra.0+0xec>
 8009014:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009018:	6011      	str	r1, [r2, #0]
 800901a:	e7f2      	b.n	8009002 <_strtol_l.isra.0+0xd6>
 800901c:	2430      	movs	r4, #48	; 0x30
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1b3      	bne.n	8008f8a <_strtol_l.isra.0+0x5e>
 8009022:	2308      	movs	r3, #8
 8009024:	e7b1      	b.n	8008f8a <_strtol_l.isra.0+0x5e>
 8009026:	2c30      	cmp	r4, #48	; 0x30
 8009028:	d0a4      	beq.n	8008f74 <_strtol_l.isra.0+0x48>
 800902a:	230a      	movs	r3, #10
 800902c:	e7ad      	b.n	8008f8a <_strtol_l.isra.0+0x5e>
 800902e:	bf00      	nop
 8009030:	0800a2f1 	.word	0x0800a2f1

08009034 <strtol>:
 8009034:	4613      	mov	r3, r2
 8009036:	460a      	mov	r2, r1
 8009038:	4601      	mov	r1, r0
 800903a:	4802      	ldr	r0, [pc, #8]	; (8009044 <strtol+0x10>)
 800903c:	6800      	ldr	r0, [r0, #0]
 800903e:	f7ff bf75 	b.w	8008f2c <_strtol_l.isra.0>
 8009042:	bf00      	nop
 8009044:	20000060 	.word	0x20000060

08009048 <_write_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	4d07      	ldr	r5, [pc, #28]	; (8009068 <_write_r+0x20>)
 800904c:	4604      	mov	r4, r0
 800904e:	4608      	mov	r0, r1
 8009050:	4611      	mov	r1, r2
 8009052:	2200      	movs	r2, #0
 8009054:	602a      	str	r2, [r5, #0]
 8009056:	461a      	mov	r2, r3
 8009058:	f7f8 fe65 	bl	8001d26 <_write>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d102      	bne.n	8009066 <_write_r+0x1e>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	b103      	cbz	r3, 8009066 <_write_r+0x1e>
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	20004464 	.word	0x20004464

0800906c <__assert_func>:
 800906c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800906e:	4614      	mov	r4, r2
 8009070:	461a      	mov	r2, r3
 8009072:	4b09      	ldr	r3, [pc, #36]	; (8009098 <__assert_func+0x2c>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4605      	mov	r5, r0
 8009078:	68d8      	ldr	r0, [r3, #12]
 800907a:	b14c      	cbz	r4, 8009090 <__assert_func+0x24>
 800907c:	4b07      	ldr	r3, [pc, #28]	; (800909c <__assert_func+0x30>)
 800907e:	9100      	str	r1, [sp, #0]
 8009080:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009084:	4906      	ldr	r1, [pc, #24]	; (80090a0 <__assert_func+0x34>)
 8009086:	462b      	mov	r3, r5
 8009088:	f000 f8e0 	bl	800924c <fiprintf>
 800908c:	f000 fe2a 	bl	8009ce4 <abort>
 8009090:	4b04      	ldr	r3, [pc, #16]	; (80090a4 <__assert_func+0x38>)
 8009092:	461c      	mov	r4, r3
 8009094:	e7f3      	b.n	800907e <__assert_func+0x12>
 8009096:	bf00      	nop
 8009098:	20000060 	.word	0x20000060
 800909c:	0800a2b4 	.word	0x0800a2b4
 80090a0:	0800a2c1 	.word	0x0800a2c1
 80090a4:	0800a2ef 	.word	0x0800a2ef

080090a8 <_close_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	4d06      	ldr	r5, [pc, #24]	; (80090c4 <_close_r+0x1c>)
 80090ac:	2300      	movs	r3, #0
 80090ae:	4604      	mov	r4, r0
 80090b0:	4608      	mov	r0, r1
 80090b2:	602b      	str	r3, [r5, #0]
 80090b4:	f7f8 fe53 	bl	8001d5e <_close>
 80090b8:	1c43      	adds	r3, r0, #1
 80090ba:	d102      	bne.n	80090c2 <_close_r+0x1a>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	b103      	cbz	r3, 80090c2 <_close_r+0x1a>
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	bd38      	pop	{r3, r4, r5, pc}
 80090c4:	20004464 	.word	0x20004464

080090c8 <__sflush_r>:
 80090c8:	898a      	ldrh	r2, [r1, #12]
 80090ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090ce:	4605      	mov	r5, r0
 80090d0:	0710      	lsls	r0, r2, #28
 80090d2:	460c      	mov	r4, r1
 80090d4:	d458      	bmi.n	8009188 <__sflush_r+0xc0>
 80090d6:	684b      	ldr	r3, [r1, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	dc05      	bgt.n	80090e8 <__sflush_r+0x20>
 80090dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090de:	2b00      	cmp	r3, #0
 80090e0:	dc02      	bgt.n	80090e8 <__sflush_r+0x20>
 80090e2:	2000      	movs	r0, #0
 80090e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090ea:	2e00      	cmp	r6, #0
 80090ec:	d0f9      	beq.n	80090e2 <__sflush_r+0x1a>
 80090ee:	2300      	movs	r3, #0
 80090f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090f4:	682f      	ldr	r7, [r5, #0]
 80090f6:	602b      	str	r3, [r5, #0]
 80090f8:	d032      	beq.n	8009160 <__sflush_r+0x98>
 80090fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090fc:	89a3      	ldrh	r3, [r4, #12]
 80090fe:	075a      	lsls	r2, r3, #29
 8009100:	d505      	bpl.n	800910e <__sflush_r+0x46>
 8009102:	6863      	ldr	r3, [r4, #4]
 8009104:	1ac0      	subs	r0, r0, r3
 8009106:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009108:	b10b      	cbz	r3, 800910e <__sflush_r+0x46>
 800910a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800910c:	1ac0      	subs	r0, r0, r3
 800910e:	2300      	movs	r3, #0
 8009110:	4602      	mov	r2, r0
 8009112:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009114:	6a21      	ldr	r1, [r4, #32]
 8009116:	4628      	mov	r0, r5
 8009118:	47b0      	blx	r6
 800911a:	1c43      	adds	r3, r0, #1
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	d106      	bne.n	800912e <__sflush_r+0x66>
 8009120:	6829      	ldr	r1, [r5, #0]
 8009122:	291d      	cmp	r1, #29
 8009124:	d82c      	bhi.n	8009180 <__sflush_r+0xb8>
 8009126:	4a2a      	ldr	r2, [pc, #168]	; (80091d0 <__sflush_r+0x108>)
 8009128:	40ca      	lsrs	r2, r1
 800912a:	07d6      	lsls	r6, r2, #31
 800912c:	d528      	bpl.n	8009180 <__sflush_r+0xb8>
 800912e:	2200      	movs	r2, #0
 8009130:	6062      	str	r2, [r4, #4]
 8009132:	04d9      	lsls	r1, r3, #19
 8009134:	6922      	ldr	r2, [r4, #16]
 8009136:	6022      	str	r2, [r4, #0]
 8009138:	d504      	bpl.n	8009144 <__sflush_r+0x7c>
 800913a:	1c42      	adds	r2, r0, #1
 800913c:	d101      	bne.n	8009142 <__sflush_r+0x7a>
 800913e:	682b      	ldr	r3, [r5, #0]
 8009140:	b903      	cbnz	r3, 8009144 <__sflush_r+0x7c>
 8009142:	6560      	str	r0, [r4, #84]	; 0x54
 8009144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009146:	602f      	str	r7, [r5, #0]
 8009148:	2900      	cmp	r1, #0
 800914a:	d0ca      	beq.n	80090e2 <__sflush_r+0x1a>
 800914c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009150:	4299      	cmp	r1, r3
 8009152:	d002      	beq.n	800915a <__sflush_r+0x92>
 8009154:	4628      	mov	r0, r5
 8009156:	f7ff fceb 	bl	8008b30 <_free_r>
 800915a:	2000      	movs	r0, #0
 800915c:	6360      	str	r0, [r4, #52]	; 0x34
 800915e:	e7c1      	b.n	80090e4 <__sflush_r+0x1c>
 8009160:	6a21      	ldr	r1, [r4, #32]
 8009162:	2301      	movs	r3, #1
 8009164:	4628      	mov	r0, r5
 8009166:	47b0      	blx	r6
 8009168:	1c41      	adds	r1, r0, #1
 800916a:	d1c7      	bne.n	80090fc <__sflush_r+0x34>
 800916c:	682b      	ldr	r3, [r5, #0]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d0c4      	beq.n	80090fc <__sflush_r+0x34>
 8009172:	2b1d      	cmp	r3, #29
 8009174:	d001      	beq.n	800917a <__sflush_r+0xb2>
 8009176:	2b16      	cmp	r3, #22
 8009178:	d101      	bne.n	800917e <__sflush_r+0xb6>
 800917a:	602f      	str	r7, [r5, #0]
 800917c:	e7b1      	b.n	80090e2 <__sflush_r+0x1a>
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009184:	81a3      	strh	r3, [r4, #12]
 8009186:	e7ad      	b.n	80090e4 <__sflush_r+0x1c>
 8009188:	690f      	ldr	r7, [r1, #16]
 800918a:	2f00      	cmp	r7, #0
 800918c:	d0a9      	beq.n	80090e2 <__sflush_r+0x1a>
 800918e:	0793      	lsls	r3, r2, #30
 8009190:	680e      	ldr	r6, [r1, #0]
 8009192:	bf08      	it	eq
 8009194:	694b      	ldreq	r3, [r1, #20]
 8009196:	600f      	str	r7, [r1, #0]
 8009198:	bf18      	it	ne
 800919a:	2300      	movne	r3, #0
 800919c:	eba6 0807 	sub.w	r8, r6, r7
 80091a0:	608b      	str	r3, [r1, #8]
 80091a2:	f1b8 0f00 	cmp.w	r8, #0
 80091a6:	dd9c      	ble.n	80090e2 <__sflush_r+0x1a>
 80091a8:	6a21      	ldr	r1, [r4, #32]
 80091aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091ac:	4643      	mov	r3, r8
 80091ae:	463a      	mov	r2, r7
 80091b0:	4628      	mov	r0, r5
 80091b2:	47b0      	blx	r6
 80091b4:	2800      	cmp	r0, #0
 80091b6:	dc06      	bgt.n	80091c6 <__sflush_r+0xfe>
 80091b8:	89a3      	ldrh	r3, [r4, #12]
 80091ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091be:	81a3      	strh	r3, [r4, #12]
 80091c0:	f04f 30ff 	mov.w	r0, #4294967295
 80091c4:	e78e      	b.n	80090e4 <__sflush_r+0x1c>
 80091c6:	4407      	add	r7, r0
 80091c8:	eba8 0800 	sub.w	r8, r8, r0
 80091cc:	e7e9      	b.n	80091a2 <__sflush_r+0xda>
 80091ce:	bf00      	nop
 80091d0:	20400001 	.word	0x20400001

080091d4 <_fflush_r>:
 80091d4:	b538      	push	{r3, r4, r5, lr}
 80091d6:	690b      	ldr	r3, [r1, #16]
 80091d8:	4605      	mov	r5, r0
 80091da:	460c      	mov	r4, r1
 80091dc:	b913      	cbnz	r3, 80091e4 <_fflush_r+0x10>
 80091de:	2500      	movs	r5, #0
 80091e0:	4628      	mov	r0, r5
 80091e2:	bd38      	pop	{r3, r4, r5, pc}
 80091e4:	b118      	cbz	r0, 80091ee <_fflush_r+0x1a>
 80091e6:	6983      	ldr	r3, [r0, #24]
 80091e8:	b90b      	cbnz	r3, 80091ee <_fflush_r+0x1a>
 80091ea:	f7ff fbb5 	bl	8008958 <__sinit>
 80091ee:	4b14      	ldr	r3, [pc, #80]	; (8009240 <_fflush_r+0x6c>)
 80091f0:	429c      	cmp	r4, r3
 80091f2:	d11b      	bne.n	800922c <_fflush_r+0x58>
 80091f4:	686c      	ldr	r4, [r5, #4]
 80091f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d0ef      	beq.n	80091de <_fflush_r+0xa>
 80091fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009200:	07d0      	lsls	r0, r2, #31
 8009202:	d404      	bmi.n	800920e <_fflush_r+0x3a>
 8009204:	0599      	lsls	r1, r3, #22
 8009206:	d402      	bmi.n	800920e <_fflush_r+0x3a>
 8009208:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800920a:	f7ff fc68 	bl	8008ade <__retarget_lock_acquire_recursive>
 800920e:	4628      	mov	r0, r5
 8009210:	4621      	mov	r1, r4
 8009212:	f7ff ff59 	bl	80090c8 <__sflush_r>
 8009216:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009218:	07da      	lsls	r2, r3, #31
 800921a:	4605      	mov	r5, r0
 800921c:	d4e0      	bmi.n	80091e0 <_fflush_r+0xc>
 800921e:	89a3      	ldrh	r3, [r4, #12]
 8009220:	059b      	lsls	r3, r3, #22
 8009222:	d4dd      	bmi.n	80091e0 <_fflush_r+0xc>
 8009224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009226:	f7ff fc5b 	bl	8008ae0 <__retarget_lock_release_recursive>
 800922a:	e7d9      	b.n	80091e0 <_fflush_r+0xc>
 800922c:	4b05      	ldr	r3, [pc, #20]	; (8009244 <_fflush_r+0x70>)
 800922e:	429c      	cmp	r4, r3
 8009230:	d101      	bne.n	8009236 <_fflush_r+0x62>
 8009232:	68ac      	ldr	r4, [r5, #8]
 8009234:	e7df      	b.n	80091f6 <_fflush_r+0x22>
 8009236:	4b04      	ldr	r3, [pc, #16]	; (8009248 <_fflush_r+0x74>)
 8009238:	429c      	cmp	r4, r3
 800923a:	bf08      	it	eq
 800923c:	68ec      	ldreq	r4, [r5, #12]
 800923e:	e7da      	b.n	80091f6 <_fflush_r+0x22>
 8009240:	0800a1f8 	.word	0x0800a1f8
 8009244:	0800a218 	.word	0x0800a218
 8009248:	0800a1d8 	.word	0x0800a1d8

0800924c <fiprintf>:
 800924c:	b40e      	push	{r1, r2, r3}
 800924e:	b503      	push	{r0, r1, lr}
 8009250:	4601      	mov	r1, r0
 8009252:	ab03      	add	r3, sp, #12
 8009254:	4805      	ldr	r0, [pc, #20]	; (800926c <fiprintf+0x20>)
 8009256:	f853 2b04 	ldr.w	r2, [r3], #4
 800925a:	6800      	ldr	r0, [r0, #0]
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	f000 f9ab 	bl	80095b8 <_vfiprintf_r>
 8009262:	b002      	add	sp, #8
 8009264:	f85d eb04 	ldr.w	lr, [sp], #4
 8009268:	b003      	add	sp, #12
 800926a:	4770      	bx	lr
 800926c:	20000060 	.word	0x20000060

08009270 <_lseek_r>:
 8009270:	b538      	push	{r3, r4, r5, lr}
 8009272:	4d07      	ldr	r5, [pc, #28]	; (8009290 <_lseek_r+0x20>)
 8009274:	4604      	mov	r4, r0
 8009276:	4608      	mov	r0, r1
 8009278:	4611      	mov	r1, r2
 800927a:	2200      	movs	r2, #0
 800927c:	602a      	str	r2, [r5, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	f7f8 fd94 	bl	8001dac <_lseek>
 8009284:	1c43      	adds	r3, r0, #1
 8009286:	d102      	bne.n	800928e <_lseek_r+0x1e>
 8009288:	682b      	ldr	r3, [r5, #0]
 800928a:	b103      	cbz	r3, 800928e <_lseek_r+0x1e>
 800928c:	6023      	str	r3, [r4, #0]
 800928e:	bd38      	pop	{r3, r4, r5, pc}
 8009290:	20004464 	.word	0x20004464

08009294 <__malloc_lock>:
 8009294:	4801      	ldr	r0, [pc, #4]	; (800929c <__malloc_lock+0x8>)
 8009296:	f7ff bc22 	b.w	8008ade <__retarget_lock_acquire_recursive>
 800929a:	bf00      	nop
 800929c:	2000445e 	.word	0x2000445e

080092a0 <__malloc_unlock>:
 80092a0:	4801      	ldr	r0, [pc, #4]	; (80092a8 <__malloc_unlock+0x8>)
 80092a2:	f7ff bc1d 	b.w	8008ae0 <__retarget_lock_release_recursive>
 80092a6:	bf00      	nop
 80092a8:	2000445e 	.word	0x2000445e

080092ac <__ssputs_r>:
 80092ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092b0:	688e      	ldr	r6, [r1, #8]
 80092b2:	429e      	cmp	r6, r3
 80092b4:	4682      	mov	sl, r0
 80092b6:	460c      	mov	r4, r1
 80092b8:	4690      	mov	r8, r2
 80092ba:	461f      	mov	r7, r3
 80092bc:	d838      	bhi.n	8009330 <__ssputs_r+0x84>
 80092be:	898a      	ldrh	r2, [r1, #12]
 80092c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80092c4:	d032      	beq.n	800932c <__ssputs_r+0x80>
 80092c6:	6825      	ldr	r5, [r4, #0]
 80092c8:	6909      	ldr	r1, [r1, #16]
 80092ca:	eba5 0901 	sub.w	r9, r5, r1
 80092ce:	6965      	ldr	r5, [r4, #20]
 80092d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092d8:	3301      	adds	r3, #1
 80092da:	444b      	add	r3, r9
 80092dc:	106d      	asrs	r5, r5, #1
 80092de:	429d      	cmp	r5, r3
 80092e0:	bf38      	it	cc
 80092e2:	461d      	movcc	r5, r3
 80092e4:	0553      	lsls	r3, r2, #21
 80092e6:	d531      	bpl.n	800934c <__ssputs_r+0xa0>
 80092e8:	4629      	mov	r1, r5
 80092ea:	f7ff fc71 	bl	8008bd0 <_malloc_r>
 80092ee:	4606      	mov	r6, r0
 80092f0:	b950      	cbnz	r0, 8009308 <__ssputs_r+0x5c>
 80092f2:	230c      	movs	r3, #12
 80092f4:	f8ca 3000 	str.w	r3, [sl]
 80092f8:	89a3      	ldrh	r3, [r4, #12]
 80092fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092fe:	81a3      	strh	r3, [r4, #12]
 8009300:	f04f 30ff 	mov.w	r0, #4294967295
 8009304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009308:	6921      	ldr	r1, [r4, #16]
 800930a:	464a      	mov	r2, r9
 800930c:	f7ff fbfa 	bl	8008b04 <memcpy>
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	6126      	str	r6, [r4, #16]
 800931e:	6165      	str	r5, [r4, #20]
 8009320:	444e      	add	r6, r9
 8009322:	eba5 0509 	sub.w	r5, r5, r9
 8009326:	6026      	str	r6, [r4, #0]
 8009328:	60a5      	str	r5, [r4, #8]
 800932a:	463e      	mov	r6, r7
 800932c:	42be      	cmp	r6, r7
 800932e:	d900      	bls.n	8009332 <__ssputs_r+0x86>
 8009330:	463e      	mov	r6, r7
 8009332:	4632      	mov	r2, r6
 8009334:	6820      	ldr	r0, [r4, #0]
 8009336:	4641      	mov	r1, r8
 8009338:	f000 fd40 	bl	8009dbc <memmove>
 800933c:	68a3      	ldr	r3, [r4, #8]
 800933e:	6822      	ldr	r2, [r4, #0]
 8009340:	1b9b      	subs	r3, r3, r6
 8009342:	4432      	add	r2, r6
 8009344:	60a3      	str	r3, [r4, #8]
 8009346:	6022      	str	r2, [r4, #0]
 8009348:	2000      	movs	r0, #0
 800934a:	e7db      	b.n	8009304 <__ssputs_r+0x58>
 800934c:	462a      	mov	r2, r5
 800934e:	f000 fd4f 	bl	8009df0 <_realloc_r>
 8009352:	4606      	mov	r6, r0
 8009354:	2800      	cmp	r0, #0
 8009356:	d1e1      	bne.n	800931c <__ssputs_r+0x70>
 8009358:	6921      	ldr	r1, [r4, #16]
 800935a:	4650      	mov	r0, sl
 800935c:	f7ff fbe8 	bl	8008b30 <_free_r>
 8009360:	e7c7      	b.n	80092f2 <__ssputs_r+0x46>
	...

08009364 <_svfiprintf_r>:
 8009364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009368:	4698      	mov	r8, r3
 800936a:	898b      	ldrh	r3, [r1, #12]
 800936c:	061b      	lsls	r3, r3, #24
 800936e:	b09d      	sub	sp, #116	; 0x74
 8009370:	4607      	mov	r7, r0
 8009372:	460d      	mov	r5, r1
 8009374:	4614      	mov	r4, r2
 8009376:	d50e      	bpl.n	8009396 <_svfiprintf_r+0x32>
 8009378:	690b      	ldr	r3, [r1, #16]
 800937a:	b963      	cbnz	r3, 8009396 <_svfiprintf_r+0x32>
 800937c:	2140      	movs	r1, #64	; 0x40
 800937e:	f7ff fc27 	bl	8008bd0 <_malloc_r>
 8009382:	6028      	str	r0, [r5, #0]
 8009384:	6128      	str	r0, [r5, #16]
 8009386:	b920      	cbnz	r0, 8009392 <_svfiprintf_r+0x2e>
 8009388:	230c      	movs	r3, #12
 800938a:	603b      	str	r3, [r7, #0]
 800938c:	f04f 30ff 	mov.w	r0, #4294967295
 8009390:	e0d1      	b.n	8009536 <_svfiprintf_r+0x1d2>
 8009392:	2340      	movs	r3, #64	; 0x40
 8009394:	616b      	str	r3, [r5, #20]
 8009396:	2300      	movs	r3, #0
 8009398:	9309      	str	r3, [sp, #36]	; 0x24
 800939a:	2320      	movs	r3, #32
 800939c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80093a4:	2330      	movs	r3, #48	; 0x30
 80093a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009550 <_svfiprintf_r+0x1ec>
 80093aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80093ae:	f04f 0901 	mov.w	r9, #1
 80093b2:	4623      	mov	r3, r4
 80093b4:	469a      	mov	sl, r3
 80093b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093ba:	b10a      	cbz	r2, 80093c0 <_svfiprintf_r+0x5c>
 80093bc:	2a25      	cmp	r2, #37	; 0x25
 80093be:	d1f9      	bne.n	80093b4 <_svfiprintf_r+0x50>
 80093c0:	ebba 0b04 	subs.w	fp, sl, r4
 80093c4:	d00b      	beq.n	80093de <_svfiprintf_r+0x7a>
 80093c6:	465b      	mov	r3, fp
 80093c8:	4622      	mov	r2, r4
 80093ca:	4629      	mov	r1, r5
 80093cc:	4638      	mov	r0, r7
 80093ce:	f7ff ff6d 	bl	80092ac <__ssputs_r>
 80093d2:	3001      	adds	r0, #1
 80093d4:	f000 80aa 	beq.w	800952c <_svfiprintf_r+0x1c8>
 80093d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093da:	445a      	add	r2, fp
 80093dc:	9209      	str	r2, [sp, #36]	; 0x24
 80093de:	f89a 3000 	ldrb.w	r3, [sl]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 80a2 	beq.w	800952c <_svfiprintf_r+0x1c8>
 80093e8:	2300      	movs	r3, #0
 80093ea:	f04f 32ff 	mov.w	r2, #4294967295
 80093ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093f2:	f10a 0a01 	add.w	sl, sl, #1
 80093f6:	9304      	str	r3, [sp, #16]
 80093f8:	9307      	str	r3, [sp, #28]
 80093fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093fe:	931a      	str	r3, [sp, #104]	; 0x68
 8009400:	4654      	mov	r4, sl
 8009402:	2205      	movs	r2, #5
 8009404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009408:	4851      	ldr	r0, [pc, #324]	; (8009550 <_svfiprintf_r+0x1ec>)
 800940a:	f7f6 fef9 	bl	8000200 <memchr>
 800940e:	9a04      	ldr	r2, [sp, #16]
 8009410:	b9d8      	cbnz	r0, 800944a <_svfiprintf_r+0xe6>
 8009412:	06d0      	lsls	r0, r2, #27
 8009414:	bf44      	itt	mi
 8009416:	2320      	movmi	r3, #32
 8009418:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800941c:	0711      	lsls	r1, r2, #28
 800941e:	bf44      	itt	mi
 8009420:	232b      	movmi	r3, #43	; 0x2b
 8009422:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009426:	f89a 3000 	ldrb.w	r3, [sl]
 800942a:	2b2a      	cmp	r3, #42	; 0x2a
 800942c:	d015      	beq.n	800945a <_svfiprintf_r+0xf6>
 800942e:	9a07      	ldr	r2, [sp, #28]
 8009430:	4654      	mov	r4, sl
 8009432:	2000      	movs	r0, #0
 8009434:	f04f 0c0a 	mov.w	ip, #10
 8009438:	4621      	mov	r1, r4
 800943a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800943e:	3b30      	subs	r3, #48	; 0x30
 8009440:	2b09      	cmp	r3, #9
 8009442:	d94e      	bls.n	80094e2 <_svfiprintf_r+0x17e>
 8009444:	b1b0      	cbz	r0, 8009474 <_svfiprintf_r+0x110>
 8009446:	9207      	str	r2, [sp, #28]
 8009448:	e014      	b.n	8009474 <_svfiprintf_r+0x110>
 800944a:	eba0 0308 	sub.w	r3, r0, r8
 800944e:	fa09 f303 	lsl.w	r3, r9, r3
 8009452:	4313      	orrs	r3, r2
 8009454:	9304      	str	r3, [sp, #16]
 8009456:	46a2      	mov	sl, r4
 8009458:	e7d2      	b.n	8009400 <_svfiprintf_r+0x9c>
 800945a:	9b03      	ldr	r3, [sp, #12]
 800945c:	1d19      	adds	r1, r3, #4
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	9103      	str	r1, [sp, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	bfbb      	ittet	lt
 8009466:	425b      	neglt	r3, r3
 8009468:	f042 0202 	orrlt.w	r2, r2, #2
 800946c:	9307      	strge	r3, [sp, #28]
 800946e:	9307      	strlt	r3, [sp, #28]
 8009470:	bfb8      	it	lt
 8009472:	9204      	strlt	r2, [sp, #16]
 8009474:	7823      	ldrb	r3, [r4, #0]
 8009476:	2b2e      	cmp	r3, #46	; 0x2e
 8009478:	d10c      	bne.n	8009494 <_svfiprintf_r+0x130>
 800947a:	7863      	ldrb	r3, [r4, #1]
 800947c:	2b2a      	cmp	r3, #42	; 0x2a
 800947e:	d135      	bne.n	80094ec <_svfiprintf_r+0x188>
 8009480:	9b03      	ldr	r3, [sp, #12]
 8009482:	1d1a      	adds	r2, r3, #4
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	9203      	str	r2, [sp, #12]
 8009488:	2b00      	cmp	r3, #0
 800948a:	bfb8      	it	lt
 800948c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009490:	3402      	adds	r4, #2
 8009492:	9305      	str	r3, [sp, #20]
 8009494:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009560 <_svfiprintf_r+0x1fc>
 8009498:	7821      	ldrb	r1, [r4, #0]
 800949a:	2203      	movs	r2, #3
 800949c:	4650      	mov	r0, sl
 800949e:	f7f6 feaf 	bl	8000200 <memchr>
 80094a2:	b140      	cbz	r0, 80094b6 <_svfiprintf_r+0x152>
 80094a4:	2340      	movs	r3, #64	; 0x40
 80094a6:	eba0 000a 	sub.w	r0, r0, sl
 80094aa:	fa03 f000 	lsl.w	r0, r3, r0
 80094ae:	9b04      	ldr	r3, [sp, #16]
 80094b0:	4303      	orrs	r3, r0
 80094b2:	3401      	adds	r4, #1
 80094b4:	9304      	str	r3, [sp, #16]
 80094b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ba:	4826      	ldr	r0, [pc, #152]	; (8009554 <_svfiprintf_r+0x1f0>)
 80094bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094c0:	2206      	movs	r2, #6
 80094c2:	f7f6 fe9d 	bl	8000200 <memchr>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	d038      	beq.n	800953c <_svfiprintf_r+0x1d8>
 80094ca:	4b23      	ldr	r3, [pc, #140]	; (8009558 <_svfiprintf_r+0x1f4>)
 80094cc:	bb1b      	cbnz	r3, 8009516 <_svfiprintf_r+0x1b2>
 80094ce:	9b03      	ldr	r3, [sp, #12]
 80094d0:	3307      	adds	r3, #7
 80094d2:	f023 0307 	bic.w	r3, r3, #7
 80094d6:	3308      	adds	r3, #8
 80094d8:	9303      	str	r3, [sp, #12]
 80094da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094dc:	4433      	add	r3, r6
 80094de:	9309      	str	r3, [sp, #36]	; 0x24
 80094e0:	e767      	b.n	80093b2 <_svfiprintf_r+0x4e>
 80094e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80094e6:	460c      	mov	r4, r1
 80094e8:	2001      	movs	r0, #1
 80094ea:	e7a5      	b.n	8009438 <_svfiprintf_r+0xd4>
 80094ec:	2300      	movs	r3, #0
 80094ee:	3401      	adds	r4, #1
 80094f0:	9305      	str	r3, [sp, #20]
 80094f2:	4619      	mov	r1, r3
 80094f4:	f04f 0c0a 	mov.w	ip, #10
 80094f8:	4620      	mov	r0, r4
 80094fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094fe:	3a30      	subs	r2, #48	; 0x30
 8009500:	2a09      	cmp	r2, #9
 8009502:	d903      	bls.n	800950c <_svfiprintf_r+0x1a8>
 8009504:	2b00      	cmp	r3, #0
 8009506:	d0c5      	beq.n	8009494 <_svfiprintf_r+0x130>
 8009508:	9105      	str	r1, [sp, #20]
 800950a:	e7c3      	b.n	8009494 <_svfiprintf_r+0x130>
 800950c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009510:	4604      	mov	r4, r0
 8009512:	2301      	movs	r3, #1
 8009514:	e7f0      	b.n	80094f8 <_svfiprintf_r+0x194>
 8009516:	ab03      	add	r3, sp, #12
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	462a      	mov	r2, r5
 800951c:	4b0f      	ldr	r3, [pc, #60]	; (800955c <_svfiprintf_r+0x1f8>)
 800951e:	a904      	add	r1, sp, #16
 8009520:	4638      	mov	r0, r7
 8009522:	f3af 8000 	nop.w
 8009526:	1c42      	adds	r2, r0, #1
 8009528:	4606      	mov	r6, r0
 800952a:	d1d6      	bne.n	80094da <_svfiprintf_r+0x176>
 800952c:	89ab      	ldrh	r3, [r5, #12]
 800952e:	065b      	lsls	r3, r3, #25
 8009530:	f53f af2c 	bmi.w	800938c <_svfiprintf_r+0x28>
 8009534:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009536:	b01d      	add	sp, #116	; 0x74
 8009538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800953c:	ab03      	add	r3, sp, #12
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	462a      	mov	r2, r5
 8009542:	4b06      	ldr	r3, [pc, #24]	; (800955c <_svfiprintf_r+0x1f8>)
 8009544:	a904      	add	r1, sp, #16
 8009546:	4638      	mov	r0, r7
 8009548:	f000 f9d4 	bl	80098f4 <_printf_i>
 800954c:	e7eb      	b.n	8009526 <_svfiprintf_r+0x1c2>
 800954e:	bf00      	nop
 8009550:	0800a3f1 	.word	0x0800a3f1
 8009554:	0800a3fb 	.word	0x0800a3fb
 8009558:	00000000 	.word	0x00000000
 800955c:	080092ad 	.word	0x080092ad
 8009560:	0800a3f7 	.word	0x0800a3f7

08009564 <__sfputc_r>:
 8009564:	6893      	ldr	r3, [r2, #8]
 8009566:	3b01      	subs	r3, #1
 8009568:	2b00      	cmp	r3, #0
 800956a:	b410      	push	{r4}
 800956c:	6093      	str	r3, [r2, #8]
 800956e:	da08      	bge.n	8009582 <__sfputc_r+0x1e>
 8009570:	6994      	ldr	r4, [r2, #24]
 8009572:	42a3      	cmp	r3, r4
 8009574:	db01      	blt.n	800957a <__sfputc_r+0x16>
 8009576:	290a      	cmp	r1, #10
 8009578:	d103      	bne.n	8009582 <__sfputc_r+0x1e>
 800957a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800957e:	f000 baf1 	b.w	8009b64 <__swbuf_r>
 8009582:	6813      	ldr	r3, [r2, #0]
 8009584:	1c58      	adds	r0, r3, #1
 8009586:	6010      	str	r0, [r2, #0]
 8009588:	7019      	strb	r1, [r3, #0]
 800958a:	4608      	mov	r0, r1
 800958c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009590:	4770      	bx	lr

08009592 <__sfputs_r>:
 8009592:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009594:	4606      	mov	r6, r0
 8009596:	460f      	mov	r7, r1
 8009598:	4614      	mov	r4, r2
 800959a:	18d5      	adds	r5, r2, r3
 800959c:	42ac      	cmp	r4, r5
 800959e:	d101      	bne.n	80095a4 <__sfputs_r+0x12>
 80095a0:	2000      	movs	r0, #0
 80095a2:	e007      	b.n	80095b4 <__sfputs_r+0x22>
 80095a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095a8:	463a      	mov	r2, r7
 80095aa:	4630      	mov	r0, r6
 80095ac:	f7ff ffda 	bl	8009564 <__sfputc_r>
 80095b0:	1c43      	adds	r3, r0, #1
 80095b2:	d1f3      	bne.n	800959c <__sfputs_r+0xa>
 80095b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095b8 <_vfiprintf_r>:
 80095b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	460d      	mov	r5, r1
 80095be:	b09d      	sub	sp, #116	; 0x74
 80095c0:	4614      	mov	r4, r2
 80095c2:	4698      	mov	r8, r3
 80095c4:	4606      	mov	r6, r0
 80095c6:	b118      	cbz	r0, 80095d0 <_vfiprintf_r+0x18>
 80095c8:	6983      	ldr	r3, [r0, #24]
 80095ca:	b90b      	cbnz	r3, 80095d0 <_vfiprintf_r+0x18>
 80095cc:	f7ff f9c4 	bl	8008958 <__sinit>
 80095d0:	4b89      	ldr	r3, [pc, #548]	; (80097f8 <_vfiprintf_r+0x240>)
 80095d2:	429d      	cmp	r5, r3
 80095d4:	d11b      	bne.n	800960e <_vfiprintf_r+0x56>
 80095d6:	6875      	ldr	r5, [r6, #4]
 80095d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095da:	07d9      	lsls	r1, r3, #31
 80095dc:	d405      	bmi.n	80095ea <_vfiprintf_r+0x32>
 80095de:	89ab      	ldrh	r3, [r5, #12]
 80095e0:	059a      	lsls	r2, r3, #22
 80095e2:	d402      	bmi.n	80095ea <_vfiprintf_r+0x32>
 80095e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095e6:	f7ff fa7a 	bl	8008ade <__retarget_lock_acquire_recursive>
 80095ea:	89ab      	ldrh	r3, [r5, #12]
 80095ec:	071b      	lsls	r3, r3, #28
 80095ee:	d501      	bpl.n	80095f4 <_vfiprintf_r+0x3c>
 80095f0:	692b      	ldr	r3, [r5, #16]
 80095f2:	b9eb      	cbnz	r3, 8009630 <_vfiprintf_r+0x78>
 80095f4:	4629      	mov	r1, r5
 80095f6:	4630      	mov	r0, r6
 80095f8:	f000 fb06 	bl	8009c08 <__swsetup_r>
 80095fc:	b1c0      	cbz	r0, 8009630 <_vfiprintf_r+0x78>
 80095fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009600:	07dc      	lsls	r4, r3, #31
 8009602:	d50e      	bpl.n	8009622 <_vfiprintf_r+0x6a>
 8009604:	f04f 30ff 	mov.w	r0, #4294967295
 8009608:	b01d      	add	sp, #116	; 0x74
 800960a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800960e:	4b7b      	ldr	r3, [pc, #492]	; (80097fc <_vfiprintf_r+0x244>)
 8009610:	429d      	cmp	r5, r3
 8009612:	d101      	bne.n	8009618 <_vfiprintf_r+0x60>
 8009614:	68b5      	ldr	r5, [r6, #8]
 8009616:	e7df      	b.n	80095d8 <_vfiprintf_r+0x20>
 8009618:	4b79      	ldr	r3, [pc, #484]	; (8009800 <_vfiprintf_r+0x248>)
 800961a:	429d      	cmp	r5, r3
 800961c:	bf08      	it	eq
 800961e:	68f5      	ldreq	r5, [r6, #12]
 8009620:	e7da      	b.n	80095d8 <_vfiprintf_r+0x20>
 8009622:	89ab      	ldrh	r3, [r5, #12]
 8009624:	0598      	lsls	r0, r3, #22
 8009626:	d4ed      	bmi.n	8009604 <_vfiprintf_r+0x4c>
 8009628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800962a:	f7ff fa59 	bl	8008ae0 <__retarget_lock_release_recursive>
 800962e:	e7e9      	b.n	8009604 <_vfiprintf_r+0x4c>
 8009630:	2300      	movs	r3, #0
 8009632:	9309      	str	r3, [sp, #36]	; 0x24
 8009634:	2320      	movs	r3, #32
 8009636:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800963a:	f8cd 800c 	str.w	r8, [sp, #12]
 800963e:	2330      	movs	r3, #48	; 0x30
 8009640:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009804 <_vfiprintf_r+0x24c>
 8009644:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009648:	f04f 0901 	mov.w	r9, #1
 800964c:	4623      	mov	r3, r4
 800964e:	469a      	mov	sl, r3
 8009650:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009654:	b10a      	cbz	r2, 800965a <_vfiprintf_r+0xa2>
 8009656:	2a25      	cmp	r2, #37	; 0x25
 8009658:	d1f9      	bne.n	800964e <_vfiprintf_r+0x96>
 800965a:	ebba 0b04 	subs.w	fp, sl, r4
 800965e:	d00b      	beq.n	8009678 <_vfiprintf_r+0xc0>
 8009660:	465b      	mov	r3, fp
 8009662:	4622      	mov	r2, r4
 8009664:	4629      	mov	r1, r5
 8009666:	4630      	mov	r0, r6
 8009668:	f7ff ff93 	bl	8009592 <__sfputs_r>
 800966c:	3001      	adds	r0, #1
 800966e:	f000 80aa 	beq.w	80097c6 <_vfiprintf_r+0x20e>
 8009672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009674:	445a      	add	r2, fp
 8009676:	9209      	str	r2, [sp, #36]	; 0x24
 8009678:	f89a 3000 	ldrb.w	r3, [sl]
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 80a2 	beq.w	80097c6 <_vfiprintf_r+0x20e>
 8009682:	2300      	movs	r3, #0
 8009684:	f04f 32ff 	mov.w	r2, #4294967295
 8009688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800968c:	f10a 0a01 	add.w	sl, sl, #1
 8009690:	9304      	str	r3, [sp, #16]
 8009692:	9307      	str	r3, [sp, #28]
 8009694:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009698:	931a      	str	r3, [sp, #104]	; 0x68
 800969a:	4654      	mov	r4, sl
 800969c:	2205      	movs	r2, #5
 800969e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096a2:	4858      	ldr	r0, [pc, #352]	; (8009804 <_vfiprintf_r+0x24c>)
 80096a4:	f7f6 fdac 	bl	8000200 <memchr>
 80096a8:	9a04      	ldr	r2, [sp, #16]
 80096aa:	b9d8      	cbnz	r0, 80096e4 <_vfiprintf_r+0x12c>
 80096ac:	06d1      	lsls	r1, r2, #27
 80096ae:	bf44      	itt	mi
 80096b0:	2320      	movmi	r3, #32
 80096b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096b6:	0713      	lsls	r3, r2, #28
 80096b8:	bf44      	itt	mi
 80096ba:	232b      	movmi	r3, #43	; 0x2b
 80096bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096c0:	f89a 3000 	ldrb.w	r3, [sl]
 80096c4:	2b2a      	cmp	r3, #42	; 0x2a
 80096c6:	d015      	beq.n	80096f4 <_vfiprintf_r+0x13c>
 80096c8:	9a07      	ldr	r2, [sp, #28]
 80096ca:	4654      	mov	r4, sl
 80096cc:	2000      	movs	r0, #0
 80096ce:	f04f 0c0a 	mov.w	ip, #10
 80096d2:	4621      	mov	r1, r4
 80096d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096d8:	3b30      	subs	r3, #48	; 0x30
 80096da:	2b09      	cmp	r3, #9
 80096dc:	d94e      	bls.n	800977c <_vfiprintf_r+0x1c4>
 80096de:	b1b0      	cbz	r0, 800970e <_vfiprintf_r+0x156>
 80096e0:	9207      	str	r2, [sp, #28]
 80096e2:	e014      	b.n	800970e <_vfiprintf_r+0x156>
 80096e4:	eba0 0308 	sub.w	r3, r0, r8
 80096e8:	fa09 f303 	lsl.w	r3, r9, r3
 80096ec:	4313      	orrs	r3, r2
 80096ee:	9304      	str	r3, [sp, #16]
 80096f0:	46a2      	mov	sl, r4
 80096f2:	e7d2      	b.n	800969a <_vfiprintf_r+0xe2>
 80096f4:	9b03      	ldr	r3, [sp, #12]
 80096f6:	1d19      	adds	r1, r3, #4
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	9103      	str	r1, [sp, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	bfbb      	ittet	lt
 8009700:	425b      	neglt	r3, r3
 8009702:	f042 0202 	orrlt.w	r2, r2, #2
 8009706:	9307      	strge	r3, [sp, #28]
 8009708:	9307      	strlt	r3, [sp, #28]
 800970a:	bfb8      	it	lt
 800970c:	9204      	strlt	r2, [sp, #16]
 800970e:	7823      	ldrb	r3, [r4, #0]
 8009710:	2b2e      	cmp	r3, #46	; 0x2e
 8009712:	d10c      	bne.n	800972e <_vfiprintf_r+0x176>
 8009714:	7863      	ldrb	r3, [r4, #1]
 8009716:	2b2a      	cmp	r3, #42	; 0x2a
 8009718:	d135      	bne.n	8009786 <_vfiprintf_r+0x1ce>
 800971a:	9b03      	ldr	r3, [sp, #12]
 800971c:	1d1a      	adds	r2, r3, #4
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	9203      	str	r2, [sp, #12]
 8009722:	2b00      	cmp	r3, #0
 8009724:	bfb8      	it	lt
 8009726:	f04f 33ff 	movlt.w	r3, #4294967295
 800972a:	3402      	adds	r4, #2
 800972c:	9305      	str	r3, [sp, #20]
 800972e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009814 <_vfiprintf_r+0x25c>
 8009732:	7821      	ldrb	r1, [r4, #0]
 8009734:	2203      	movs	r2, #3
 8009736:	4650      	mov	r0, sl
 8009738:	f7f6 fd62 	bl	8000200 <memchr>
 800973c:	b140      	cbz	r0, 8009750 <_vfiprintf_r+0x198>
 800973e:	2340      	movs	r3, #64	; 0x40
 8009740:	eba0 000a 	sub.w	r0, r0, sl
 8009744:	fa03 f000 	lsl.w	r0, r3, r0
 8009748:	9b04      	ldr	r3, [sp, #16]
 800974a:	4303      	orrs	r3, r0
 800974c:	3401      	adds	r4, #1
 800974e:	9304      	str	r3, [sp, #16]
 8009750:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009754:	482c      	ldr	r0, [pc, #176]	; (8009808 <_vfiprintf_r+0x250>)
 8009756:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800975a:	2206      	movs	r2, #6
 800975c:	f7f6 fd50 	bl	8000200 <memchr>
 8009760:	2800      	cmp	r0, #0
 8009762:	d03f      	beq.n	80097e4 <_vfiprintf_r+0x22c>
 8009764:	4b29      	ldr	r3, [pc, #164]	; (800980c <_vfiprintf_r+0x254>)
 8009766:	bb1b      	cbnz	r3, 80097b0 <_vfiprintf_r+0x1f8>
 8009768:	9b03      	ldr	r3, [sp, #12]
 800976a:	3307      	adds	r3, #7
 800976c:	f023 0307 	bic.w	r3, r3, #7
 8009770:	3308      	adds	r3, #8
 8009772:	9303      	str	r3, [sp, #12]
 8009774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009776:	443b      	add	r3, r7
 8009778:	9309      	str	r3, [sp, #36]	; 0x24
 800977a:	e767      	b.n	800964c <_vfiprintf_r+0x94>
 800977c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009780:	460c      	mov	r4, r1
 8009782:	2001      	movs	r0, #1
 8009784:	e7a5      	b.n	80096d2 <_vfiprintf_r+0x11a>
 8009786:	2300      	movs	r3, #0
 8009788:	3401      	adds	r4, #1
 800978a:	9305      	str	r3, [sp, #20]
 800978c:	4619      	mov	r1, r3
 800978e:	f04f 0c0a 	mov.w	ip, #10
 8009792:	4620      	mov	r0, r4
 8009794:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009798:	3a30      	subs	r2, #48	; 0x30
 800979a:	2a09      	cmp	r2, #9
 800979c:	d903      	bls.n	80097a6 <_vfiprintf_r+0x1ee>
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d0c5      	beq.n	800972e <_vfiprintf_r+0x176>
 80097a2:	9105      	str	r1, [sp, #20]
 80097a4:	e7c3      	b.n	800972e <_vfiprintf_r+0x176>
 80097a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80097aa:	4604      	mov	r4, r0
 80097ac:	2301      	movs	r3, #1
 80097ae:	e7f0      	b.n	8009792 <_vfiprintf_r+0x1da>
 80097b0:	ab03      	add	r3, sp, #12
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	462a      	mov	r2, r5
 80097b6:	4b16      	ldr	r3, [pc, #88]	; (8009810 <_vfiprintf_r+0x258>)
 80097b8:	a904      	add	r1, sp, #16
 80097ba:	4630      	mov	r0, r6
 80097bc:	f3af 8000 	nop.w
 80097c0:	4607      	mov	r7, r0
 80097c2:	1c78      	adds	r0, r7, #1
 80097c4:	d1d6      	bne.n	8009774 <_vfiprintf_r+0x1bc>
 80097c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097c8:	07d9      	lsls	r1, r3, #31
 80097ca:	d405      	bmi.n	80097d8 <_vfiprintf_r+0x220>
 80097cc:	89ab      	ldrh	r3, [r5, #12]
 80097ce:	059a      	lsls	r2, r3, #22
 80097d0:	d402      	bmi.n	80097d8 <_vfiprintf_r+0x220>
 80097d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097d4:	f7ff f984 	bl	8008ae0 <__retarget_lock_release_recursive>
 80097d8:	89ab      	ldrh	r3, [r5, #12]
 80097da:	065b      	lsls	r3, r3, #25
 80097dc:	f53f af12 	bmi.w	8009604 <_vfiprintf_r+0x4c>
 80097e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097e2:	e711      	b.n	8009608 <_vfiprintf_r+0x50>
 80097e4:	ab03      	add	r3, sp, #12
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	462a      	mov	r2, r5
 80097ea:	4b09      	ldr	r3, [pc, #36]	; (8009810 <_vfiprintf_r+0x258>)
 80097ec:	a904      	add	r1, sp, #16
 80097ee:	4630      	mov	r0, r6
 80097f0:	f000 f880 	bl	80098f4 <_printf_i>
 80097f4:	e7e4      	b.n	80097c0 <_vfiprintf_r+0x208>
 80097f6:	bf00      	nop
 80097f8:	0800a1f8 	.word	0x0800a1f8
 80097fc:	0800a218 	.word	0x0800a218
 8009800:	0800a1d8 	.word	0x0800a1d8
 8009804:	0800a3f1 	.word	0x0800a3f1
 8009808:	0800a3fb 	.word	0x0800a3fb
 800980c:	00000000 	.word	0x00000000
 8009810:	08009593 	.word	0x08009593
 8009814:	0800a3f7 	.word	0x0800a3f7

08009818 <_printf_common>:
 8009818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800981c:	4616      	mov	r6, r2
 800981e:	4699      	mov	r9, r3
 8009820:	688a      	ldr	r2, [r1, #8]
 8009822:	690b      	ldr	r3, [r1, #16]
 8009824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009828:	4293      	cmp	r3, r2
 800982a:	bfb8      	it	lt
 800982c:	4613      	movlt	r3, r2
 800982e:	6033      	str	r3, [r6, #0]
 8009830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009834:	4607      	mov	r7, r0
 8009836:	460c      	mov	r4, r1
 8009838:	b10a      	cbz	r2, 800983e <_printf_common+0x26>
 800983a:	3301      	adds	r3, #1
 800983c:	6033      	str	r3, [r6, #0]
 800983e:	6823      	ldr	r3, [r4, #0]
 8009840:	0699      	lsls	r1, r3, #26
 8009842:	bf42      	ittt	mi
 8009844:	6833      	ldrmi	r3, [r6, #0]
 8009846:	3302      	addmi	r3, #2
 8009848:	6033      	strmi	r3, [r6, #0]
 800984a:	6825      	ldr	r5, [r4, #0]
 800984c:	f015 0506 	ands.w	r5, r5, #6
 8009850:	d106      	bne.n	8009860 <_printf_common+0x48>
 8009852:	f104 0a19 	add.w	sl, r4, #25
 8009856:	68e3      	ldr	r3, [r4, #12]
 8009858:	6832      	ldr	r2, [r6, #0]
 800985a:	1a9b      	subs	r3, r3, r2
 800985c:	42ab      	cmp	r3, r5
 800985e:	dc26      	bgt.n	80098ae <_printf_common+0x96>
 8009860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009864:	1e13      	subs	r3, r2, #0
 8009866:	6822      	ldr	r2, [r4, #0]
 8009868:	bf18      	it	ne
 800986a:	2301      	movne	r3, #1
 800986c:	0692      	lsls	r2, r2, #26
 800986e:	d42b      	bmi.n	80098c8 <_printf_common+0xb0>
 8009870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009874:	4649      	mov	r1, r9
 8009876:	4638      	mov	r0, r7
 8009878:	47c0      	blx	r8
 800987a:	3001      	adds	r0, #1
 800987c:	d01e      	beq.n	80098bc <_printf_common+0xa4>
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	68e5      	ldr	r5, [r4, #12]
 8009882:	6832      	ldr	r2, [r6, #0]
 8009884:	f003 0306 	and.w	r3, r3, #6
 8009888:	2b04      	cmp	r3, #4
 800988a:	bf08      	it	eq
 800988c:	1aad      	subeq	r5, r5, r2
 800988e:	68a3      	ldr	r3, [r4, #8]
 8009890:	6922      	ldr	r2, [r4, #16]
 8009892:	bf0c      	ite	eq
 8009894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009898:	2500      	movne	r5, #0
 800989a:	4293      	cmp	r3, r2
 800989c:	bfc4      	itt	gt
 800989e:	1a9b      	subgt	r3, r3, r2
 80098a0:	18ed      	addgt	r5, r5, r3
 80098a2:	2600      	movs	r6, #0
 80098a4:	341a      	adds	r4, #26
 80098a6:	42b5      	cmp	r5, r6
 80098a8:	d11a      	bne.n	80098e0 <_printf_common+0xc8>
 80098aa:	2000      	movs	r0, #0
 80098ac:	e008      	b.n	80098c0 <_printf_common+0xa8>
 80098ae:	2301      	movs	r3, #1
 80098b0:	4652      	mov	r2, sl
 80098b2:	4649      	mov	r1, r9
 80098b4:	4638      	mov	r0, r7
 80098b6:	47c0      	blx	r8
 80098b8:	3001      	adds	r0, #1
 80098ba:	d103      	bne.n	80098c4 <_printf_common+0xac>
 80098bc:	f04f 30ff 	mov.w	r0, #4294967295
 80098c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c4:	3501      	adds	r5, #1
 80098c6:	e7c6      	b.n	8009856 <_printf_common+0x3e>
 80098c8:	18e1      	adds	r1, r4, r3
 80098ca:	1c5a      	adds	r2, r3, #1
 80098cc:	2030      	movs	r0, #48	; 0x30
 80098ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098d2:	4422      	add	r2, r4
 80098d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098dc:	3302      	adds	r3, #2
 80098de:	e7c7      	b.n	8009870 <_printf_common+0x58>
 80098e0:	2301      	movs	r3, #1
 80098e2:	4622      	mov	r2, r4
 80098e4:	4649      	mov	r1, r9
 80098e6:	4638      	mov	r0, r7
 80098e8:	47c0      	blx	r8
 80098ea:	3001      	adds	r0, #1
 80098ec:	d0e6      	beq.n	80098bc <_printf_common+0xa4>
 80098ee:	3601      	adds	r6, #1
 80098f0:	e7d9      	b.n	80098a6 <_printf_common+0x8e>
	...

080098f4 <_printf_i>:
 80098f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098f8:	460c      	mov	r4, r1
 80098fa:	4691      	mov	r9, r2
 80098fc:	7e27      	ldrb	r7, [r4, #24]
 80098fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009900:	2f78      	cmp	r7, #120	; 0x78
 8009902:	4680      	mov	r8, r0
 8009904:	469a      	mov	sl, r3
 8009906:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800990a:	d807      	bhi.n	800991c <_printf_i+0x28>
 800990c:	2f62      	cmp	r7, #98	; 0x62
 800990e:	d80a      	bhi.n	8009926 <_printf_i+0x32>
 8009910:	2f00      	cmp	r7, #0
 8009912:	f000 80d8 	beq.w	8009ac6 <_printf_i+0x1d2>
 8009916:	2f58      	cmp	r7, #88	; 0x58
 8009918:	f000 80a3 	beq.w	8009a62 <_printf_i+0x16e>
 800991c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009924:	e03a      	b.n	800999c <_printf_i+0xa8>
 8009926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800992a:	2b15      	cmp	r3, #21
 800992c:	d8f6      	bhi.n	800991c <_printf_i+0x28>
 800992e:	a001      	add	r0, pc, #4	; (adr r0, 8009934 <_printf_i+0x40>)
 8009930:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009934:	0800998d 	.word	0x0800998d
 8009938:	080099a1 	.word	0x080099a1
 800993c:	0800991d 	.word	0x0800991d
 8009940:	0800991d 	.word	0x0800991d
 8009944:	0800991d 	.word	0x0800991d
 8009948:	0800991d 	.word	0x0800991d
 800994c:	080099a1 	.word	0x080099a1
 8009950:	0800991d 	.word	0x0800991d
 8009954:	0800991d 	.word	0x0800991d
 8009958:	0800991d 	.word	0x0800991d
 800995c:	0800991d 	.word	0x0800991d
 8009960:	08009aad 	.word	0x08009aad
 8009964:	080099d1 	.word	0x080099d1
 8009968:	08009a8f 	.word	0x08009a8f
 800996c:	0800991d 	.word	0x0800991d
 8009970:	0800991d 	.word	0x0800991d
 8009974:	08009acf 	.word	0x08009acf
 8009978:	0800991d 	.word	0x0800991d
 800997c:	080099d1 	.word	0x080099d1
 8009980:	0800991d 	.word	0x0800991d
 8009984:	0800991d 	.word	0x0800991d
 8009988:	08009a97 	.word	0x08009a97
 800998c:	680b      	ldr	r3, [r1, #0]
 800998e:	1d1a      	adds	r2, r3, #4
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	600a      	str	r2, [r1, #0]
 8009994:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800999c:	2301      	movs	r3, #1
 800999e:	e0a3      	b.n	8009ae8 <_printf_i+0x1f4>
 80099a0:	6825      	ldr	r5, [r4, #0]
 80099a2:	6808      	ldr	r0, [r1, #0]
 80099a4:	062e      	lsls	r6, r5, #24
 80099a6:	f100 0304 	add.w	r3, r0, #4
 80099aa:	d50a      	bpl.n	80099c2 <_printf_i+0xce>
 80099ac:	6805      	ldr	r5, [r0, #0]
 80099ae:	600b      	str	r3, [r1, #0]
 80099b0:	2d00      	cmp	r5, #0
 80099b2:	da03      	bge.n	80099bc <_printf_i+0xc8>
 80099b4:	232d      	movs	r3, #45	; 0x2d
 80099b6:	426d      	negs	r5, r5
 80099b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099bc:	485e      	ldr	r0, [pc, #376]	; (8009b38 <_printf_i+0x244>)
 80099be:	230a      	movs	r3, #10
 80099c0:	e019      	b.n	80099f6 <_printf_i+0x102>
 80099c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80099c6:	6805      	ldr	r5, [r0, #0]
 80099c8:	600b      	str	r3, [r1, #0]
 80099ca:	bf18      	it	ne
 80099cc:	b22d      	sxthne	r5, r5
 80099ce:	e7ef      	b.n	80099b0 <_printf_i+0xbc>
 80099d0:	680b      	ldr	r3, [r1, #0]
 80099d2:	6825      	ldr	r5, [r4, #0]
 80099d4:	1d18      	adds	r0, r3, #4
 80099d6:	6008      	str	r0, [r1, #0]
 80099d8:	0628      	lsls	r0, r5, #24
 80099da:	d501      	bpl.n	80099e0 <_printf_i+0xec>
 80099dc:	681d      	ldr	r5, [r3, #0]
 80099de:	e002      	b.n	80099e6 <_printf_i+0xf2>
 80099e0:	0669      	lsls	r1, r5, #25
 80099e2:	d5fb      	bpl.n	80099dc <_printf_i+0xe8>
 80099e4:	881d      	ldrh	r5, [r3, #0]
 80099e6:	4854      	ldr	r0, [pc, #336]	; (8009b38 <_printf_i+0x244>)
 80099e8:	2f6f      	cmp	r7, #111	; 0x6f
 80099ea:	bf0c      	ite	eq
 80099ec:	2308      	moveq	r3, #8
 80099ee:	230a      	movne	r3, #10
 80099f0:	2100      	movs	r1, #0
 80099f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80099f6:	6866      	ldr	r6, [r4, #4]
 80099f8:	60a6      	str	r6, [r4, #8]
 80099fa:	2e00      	cmp	r6, #0
 80099fc:	bfa2      	ittt	ge
 80099fe:	6821      	ldrge	r1, [r4, #0]
 8009a00:	f021 0104 	bicge.w	r1, r1, #4
 8009a04:	6021      	strge	r1, [r4, #0]
 8009a06:	b90d      	cbnz	r5, 8009a0c <_printf_i+0x118>
 8009a08:	2e00      	cmp	r6, #0
 8009a0a:	d04d      	beq.n	8009aa8 <_printf_i+0x1b4>
 8009a0c:	4616      	mov	r6, r2
 8009a0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a12:	fb03 5711 	mls	r7, r3, r1, r5
 8009a16:	5dc7      	ldrb	r7, [r0, r7]
 8009a18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a1c:	462f      	mov	r7, r5
 8009a1e:	42bb      	cmp	r3, r7
 8009a20:	460d      	mov	r5, r1
 8009a22:	d9f4      	bls.n	8009a0e <_printf_i+0x11a>
 8009a24:	2b08      	cmp	r3, #8
 8009a26:	d10b      	bne.n	8009a40 <_printf_i+0x14c>
 8009a28:	6823      	ldr	r3, [r4, #0]
 8009a2a:	07df      	lsls	r7, r3, #31
 8009a2c:	d508      	bpl.n	8009a40 <_printf_i+0x14c>
 8009a2e:	6923      	ldr	r3, [r4, #16]
 8009a30:	6861      	ldr	r1, [r4, #4]
 8009a32:	4299      	cmp	r1, r3
 8009a34:	bfde      	ittt	le
 8009a36:	2330      	movle	r3, #48	; 0x30
 8009a38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a40:	1b92      	subs	r2, r2, r6
 8009a42:	6122      	str	r2, [r4, #16]
 8009a44:	f8cd a000 	str.w	sl, [sp]
 8009a48:	464b      	mov	r3, r9
 8009a4a:	aa03      	add	r2, sp, #12
 8009a4c:	4621      	mov	r1, r4
 8009a4e:	4640      	mov	r0, r8
 8009a50:	f7ff fee2 	bl	8009818 <_printf_common>
 8009a54:	3001      	adds	r0, #1
 8009a56:	d14c      	bne.n	8009af2 <_printf_i+0x1fe>
 8009a58:	f04f 30ff 	mov.w	r0, #4294967295
 8009a5c:	b004      	add	sp, #16
 8009a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a62:	4835      	ldr	r0, [pc, #212]	; (8009b38 <_printf_i+0x244>)
 8009a64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	680e      	ldr	r6, [r1, #0]
 8009a6c:	061f      	lsls	r7, r3, #24
 8009a6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009a72:	600e      	str	r6, [r1, #0]
 8009a74:	d514      	bpl.n	8009aa0 <_printf_i+0x1ac>
 8009a76:	07d9      	lsls	r1, r3, #31
 8009a78:	bf44      	itt	mi
 8009a7a:	f043 0320 	orrmi.w	r3, r3, #32
 8009a7e:	6023      	strmi	r3, [r4, #0]
 8009a80:	b91d      	cbnz	r5, 8009a8a <_printf_i+0x196>
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	f023 0320 	bic.w	r3, r3, #32
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	2310      	movs	r3, #16
 8009a8c:	e7b0      	b.n	80099f0 <_printf_i+0xfc>
 8009a8e:	6823      	ldr	r3, [r4, #0]
 8009a90:	f043 0320 	orr.w	r3, r3, #32
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	2378      	movs	r3, #120	; 0x78
 8009a98:	4828      	ldr	r0, [pc, #160]	; (8009b3c <_printf_i+0x248>)
 8009a9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a9e:	e7e3      	b.n	8009a68 <_printf_i+0x174>
 8009aa0:	065e      	lsls	r6, r3, #25
 8009aa2:	bf48      	it	mi
 8009aa4:	b2ad      	uxthmi	r5, r5
 8009aa6:	e7e6      	b.n	8009a76 <_printf_i+0x182>
 8009aa8:	4616      	mov	r6, r2
 8009aaa:	e7bb      	b.n	8009a24 <_printf_i+0x130>
 8009aac:	680b      	ldr	r3, [r1, #0]
 8009aae:	6826      	ldr	r6, [r4, #0]
 8009ab0:	6960      	ldr	r0, [r4, #20]
 8009ab2:	1d1d      	adds	r5, r3, #4
 8009ab4:	600d      	str	r5, [r1, #0]
 8009ab6:	0635      	lsls	r5, r6, #24
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	d501      	bpl.n	8009ac0 <_printf_i+0x1cc>
 8009abc:	6018      	str	r0, [r3, #0]
 8009abe:	e002      	b.n	8009ac6 <_printf_i+0x1d2>
 8009ac0:	0671      	lsls	r1, r6, #25
 8009ac2:	d5fb      	bpl.n	8009abc <_printf_i+0x1c8>
 8009ac4:	8018      	strh	r0, [r3, #0]
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	6123      	str	r3, [r4, #16]
 8009aca:	4616      	mov	r6, r2
 8009acc:	e7ba      	b.n	8009a44 <_printf_i+0x150>
 8009ace:	680b      	ldr	r3, [r1, #0]
 8009ad0:	1d1a      	adds	r2, r3, #4
 8009ad2:	600a      	str	r2, [r1, #0]
 8009ad4:	681e      	ldr	r6, [r3, #0]
 8009ad6:	6862      	ldr	r2, [r4, #4]
 8009ad8:	2100      	movs	r1, #0
 8009ada:	4630      	mov	r0, r6
 8009adc:	f7f6 fb90 	bl	8000200 <memchr>
 8009ae0:	b108      	cbz	r0, 8009ae6 <_printf_i+0x1f2>
 8009ae2:	1b80      	subs	r0, r0, r6
 8009ae4:	6060      	str	r0, [r4, #4]
 8009ae6:	6863      	ldr	r3, [r4, #4]
 8009ae8:	6123      	str	r3, [r4, #16]
 8009aea:	2300      	movs	r3, #0
 8009aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009af0:	e7a8      	b.n	8009a44 <_printf_i+0x150>
 8009af2:	6923      	ldr	r3, [r4, #16]
 8009af4:	4632      	mov	r2, r6
 8009af6:	4649      	mov	r1, r9
 8009af8:	4640      	mov	r0, r8
 8009afa:	47d0      	blx	sl
 8009afc:	3001      	adds	r0, #1
 8009afe:	d0ab      	beq.n	8009a58 <_printf_i+0x164>
 8009b00:	6823      	ldr	r3, [r4, #0]
 8009b02:	079b      	lsls	r3, r3, #30
 8009b04:	d413      	bmi.n	8009b2e <_printf_i+0x23a>
 8009b06:	68e0      	ldr	r0, [r4, #12]
 8009b08:	9b03      	ldr	r3, [sp, #12]
 8009b0a:	4298      	cmp	r0, r3
 8009b0c:	bfb8      	it	lt
 8009b0e:	4618      	movlt	r0, r3
 8009b10:	e7a4      	b.n	8009a5c <_printf_i+0x168>
 8009b12:	2301      	movs	r3, #1
 8009b14:	4632      	mov	r2, r6
 8009b16:	4649      	mov	r1, r9
 8009b18:	4640      	mov	r0, r8
 8009b1a:	47d0      	blx	sl
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	d09b      	beq.n	8009a58 <_printf_i+0x164>
 8009b20:	3501      	adds	r5, #1
 8009b22:	68e3      	ldr	r3, [r4, #12]
 8009b24:	9903      	ldr	r1, [sp, #12]
 8009b26:	1a5b      	subs	r3, r3, r1
 8009b28:	42ab      	cmp	r3, r5
 8009b2a:	dcf2      	bgt.n	8009b12 <_printf_i+0x21e>
 8009b2c:	e7eb      	b.n	8009b06 <_printf_i+0x212>
 8009b2e:	2500      	movs	r5, #0
 8009b30:	f104 0619 	add.w	r6, r4, #25
 8009b34:	e7f5      	b.n	8009b22 <_printf_i+0x22e>
 8009b36:	bf00      	nop
 8009b38:	0800a402 	.word	0x0800a402
 8009b3c:	0800a413 	.word	0x0800a413

08009b40 <_read_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4d07      	ldr	r5, [pc, #28]	; (8009b60 <_read_r+0x20>)
 8009b44:	4604      	mov	r4, r0
 8009b46:	4608      	mov	r0, r1
 8009b48:	4611      	mov	r1, r2
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	602a      	str	r2, [r5, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f7f8 f8cc 	bl	8001cec <_read>
 8009b54:	1c43      	adds	r3, r0, #1
 8009b56:	d102      	bne.n	8009b5e <_read_r+0x1e>
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	b103      	cbz	r3, 8009b5e <_read_r+0x1e>
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	bd38      	pop	{r3, r4, r5, pc}
 8009b60:	20004464 	.word	0x20004464

08009b64 <__swbuf_r>:
 8009b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b66:	460e      	mov	r6, r1
 8009b68:	4614      	mov	r4, r2
 8009b6a:	4605      	mov	r5, r0
 8009b6c:	b118      	cbz	r0, 8009b76 <__swbuf_r+0x12>
 8009b6e:	6983      	ldr	r3, [r0, #24]
 8009b70:	b90b      	cbnz	r3, 8009b76 <__swbuf_r+0x12>
 8009b72:	f7fe fef1 	bl	8008958 <__sinit>
 8009b76:	4b21      	ldr	r3, [pc, #132]	; (8009bfc <__swbuf_r+0x98>)
 8009b78:	429c      	cmp	r4, r3
 8009b7a:	d12b      	bne.n	8009bd4 <__swbuf_r+0x70>
 8009b7c:	686c      	ldr	r4, [r5, #4]
 8009b7e:	69a3      	ldr	r3, [r4, #24]
 8009b80:	60a3      	str	r3, [r4, #8]
 8009b82:	89a3      	ldrh	r3, [r4, #12]
 8009b84:	071a      	lsls	r2, r3, #28
 8009b86:	d52f      	bpl.n	8009be8 <__swbuf_r+0x84>
 8009b88:	6923      	ldr	r3, [r4, #16]
 8009b8a:	b36b      	cbz	r3, 8009be8 <__swbuf_r+0x84>
 8009b8c:	6923      	ldr	r3, [r4, #16]
 8009b8e:	6820      	ldr	r0, [r4, #0]
 8009b90:	1ac0      	subs	r0, r0, r3
 8009b92:	6963      	ldr	r3, [r4, #20]
 8009b94:	b2f6      	uxtb	r6, r6
 8009b96:	4283      	cmp	r3, r0
 8009b98:	4637      	mov	r7, r6
 8009b9a:	dc04      	bgt.n	8009ba6 <__swbuf_r+0x42>
 8009b9c:	4621      	mov	r1, r4
 8009b9e:	4628      	mov	r0, r5
 8009ba0:	f7ff fb18 	bl	80091d4 <_fflush_r>
 8009ba4:	bb30      	cbnz	r0, 8009bf4 <__swbuf_r+0x90>
 8009ba6:	68a3      	ldr	r3, [r4, #8]
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	60a3      	str	r3, [r4, #8]
 8009bac:	6823      	ldr	r3, [r4, #0]
 8009bae:	1c5a      	adds	r2, r3, #1
 8009bb0:	6022      	str	r2, [r4, #0]
 8009bb2:	701e      	strb	r6, [r3, #0]
 8009bb4:	6963      	ldr	r3, [r4, #20]
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	4283      	cmp	r3, r0
 8009bba:	d004      	beq.n	8009bc6 <__swbuf_r+0x62>
 8009bbc:	89a3      	ldrh	r3, [r4, #12]
 8009bbe:	07db      	lsls	r3, r3, #31
 8009bc0:	d506      	bpl.n	8009bd0 <__swbuf_r+0x6c>
 8009bc2:	2e0a      	cmp	r6, #10
 8009bc4:	d104      	bne.n	8009bd0 <__swbuf_r+0x6c>
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	4628      	mov	r0, r5
 8009bca:	f7ff fb03 	bl	80091d4 <_fflush_r>
 8009bce:	b988      	cbnz	r0, 8009bf4 <__swbuf_r+0x90>
 8009bd0:	4638      	mov	r0, r7
 8009bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bd4:	4b0a      	ldr	r3, [pc, #40]	; (8009c00 <__swbuf_r+0x9c>)
 8009bd6:	429c      	cmp	r4, r3
 8009bd8:	d101      	bne.n	8009bde <__swbuf_r+0x7a>
 8009bda:	68ac      	ldr	r4, [r5, #8]
 8009bdc:	e7cf      	b.n	8009b7e <__swbuf_r+0x1a>
 8009bde:	4b09      	ldr	r3, [pc, #36]	; (8009c04 <__swbuf_r+0xa0>)
 8009be0:	429c      	cmp	r4, r3
 8009be2:	bf08      	it	eq
 8009be4:	68ec      	ldreq	r4, [r5, #12]
 8009be6:	e7ca      	b.n	8009b7e <__swbuf_r+0x1a>
 8009be8:	4621      	mov	r1, r4
 8009bea:	4628      	mov	r0, r5
 8009bec:	f000 f80c 	bl	8009c08 <__swsetup_r>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d0cb      	beq.n	8009b8c <__swbuf_r+0x28>
 8009bf4:	f04f 37ff 	mov.w	r7, #4294967295
 8009bf8:	e7ea      	b.n	8009bd0 <__swbuf_r+0x6c>
 8009bfa:	bf00      	nop
 8009bfc:	0800a1f8 	.word	0x0800a1f8
 8009c00:	0800a218 	.word	0x0800a218
 8009c04:	0800a1d8 	.word	0x0800a1d8

08009c08 <__swsetup_r>:
 8009c08:	4b32      	ldr	r3, [pc, #200]	; (8009cd4 <__swsetup_r+0xcc>)
 8009c0a:	b570      	push	{r4, r5, r6, lr}
 8009c0c:	681d      	ldr	r5, [r3, #0]
 8009c0e:	4606      	mov	r6, r0
 8009c10:	460c      	mov	r4, r1
 8009c12:	b125      	cbz	r5, 8009c1e <__swsetup_r+0x16>
 8009c14:	69ab      	ldr	r3, [r5, #24]
 8009c16:	b913      	cbnz	r3, 8009c1e <__swsetup_r+0x16>
 8009c18:	4628      	mov	r0, r5
 8009c1a:	f7fe fe9d 	bl	8008958 <__sinit>
 8009c1e:	4b2e      	ldr	r3, [pc, #184]	; (8009cd8 <__swsetup_r+0xd0>)
 8009c20:	429c      	cmp	r4, r3
 8009c22:	d10f      	bne.n	8009c44 <__swsetup_r+0x3c>
 8009c24:	686c      	ldr	r4, [r5, #4]
 8009c26:	89a3      	ldrh	r3, [r4, #12]
 8009c28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c2c:	0719      	lsls	r1, r3, #28
 8009c2e:	d42c      	bmi.n	8009c8a <__swsetup_r+0x82>
 8009c30:	06dd      	lsls	r5, r3, #27
 8009c32:	d411      	bmi.n	8009c58 <__swsetup_r+0x50>
 8009c34:	2309      	movs	r3, #9
 8009c36:	6033      	str	r3, [r6, #0]
 8009c38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009c3c:	81a3      	strh	r3, [r4, #12]
 8009c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c42:	e03e      	b.n	8009cc2 <__swsetup_r+0xba>
 8009c44:	4b25      	ldr	r3, [pc, #148]	; (8009cdc <__swsetup_r+0xd4>)
 8009c46:	429c      	cmp	r4, r3
 8009c48:	d101      	bne.n	8009c4e <__swsetup_r+0x46>
 8009c4a:	68ac      	ldr	r4, [r5, #8]
 8009c4c:	e7eb      	b.n	8009c26 <__swsetup_r+0x1e>
 8009c4e:	4b24      	ldr	r3, [pc, #144]	; (8009ce0 <__swsetup_r+0xd8>)
 8009c50:	429c      	cmp	r4, r3
 8009c52:	bf08      	it	eq
 8009c54:	68ec      	ldreq	r4, [r5, #12]
 8009c56:	e7e6      	b.n	8009c26 <__swsetup_r+0x1e>
 8009c58:	0758      	lsls	r0, r3, #29
 8009c5a:	d512      	bpl.n	8009c82 <__swsetup_r+0x7a>
 8009c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c5e:	b141      	cbz	r1, 8009c72 <__swsetup_r+0x6a>
 8009c60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c64:	4299      	cmp	r1, r3
 8009c66:	d002      	beq.n	8009c6e <__swsetup_r+0x66>
 8009c68:	4630      	mov	r0, r6
 8009c6a:	f7fe ff61 	bl	8008b30 <_free_r>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	6363      	str	r3, [r4, #52]	; 0x34
 8009c72:	89a3      	ldrh	r3, [r4, #12]
 8009c74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c78:	81a3      	strh	r3, [r4, #12]
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	6063      	str	r3, [r4, #4]
 8009c7e:	6923      	ldr	r3, [r4, #16]
 8009c80:	6023      	str	r3, [r4, #0]
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	f043 0308 	orr.w	r3, r3, #8
 8009c88:	81a3      	strh	r3, [r4, #12]
 8009c8a:	6923      	ldr	r3, [r4, #16]
 8009c8c:	b94b      	cbnz	r3, 8009ca2 <__swsetup_r+0x9a>
 8009c8e:	89a3      	ldrh	r3, [r4, #12]
 8009c90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c98:	d003      	beq.n	8009ca2 <__swsetup_r+0x9a>
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	f000 f84d 	bl	8009d3c <__smakebuf_r>
 8009ca2:	89a0      	ldrh	r0, [r4, #12]
 8009ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ca8:	f010 0301 	ands.w	r3, r0, #1
 8009cac:	d00a      	beq.n	8009cc4 <__swsetup_r+0xbc>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	60a3      	str	r3, [r4, #8]
 8009cb2:	6963      	ldr	r3, [r4, #20]
 8009cb4:	425b      	negs	r3, r3
 8009cb6:	61a3      	str	r3, [r4, #24]
 8009cb8:	6923      	ldr	r3, [r4, #16]
 8009cba:	b943      	cbnz	r3, 8009cce <__swsetup_r+0xc6>
 8009cbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009cc0:	d1ba      	bne.n	8009c38 <__swsetup_r+0x30>
 8009cc2:	bd70      	pop	{r4, r5, r6, pc}
 8009cc4:	0781      	lsls	r1, r0, #30
 8009cc6:	bf58      	it	pl
 8009cc8:	6963      	ldrpl	r3, [r4, #20]
 8009cca:	60a3      	str	r3, [r4, #8]
 8009ccc:	e7f4      	b.n	8009cb8 <__swsetup_r+0xb0>
 8009cce:	2000      	movs	r0, #0
 8009cd0:	e7f7      	b.n	8009cc2 <__swsetup_r+0xba>
 8009cd2:	bf00      	nop
 8009cd4:	20000060 	.word	0x20000060
 8009cd8:	0800a1f8 	.word	0x0800a1f8
 8009cdc:	0800a218 	.word	0x0800a218
 8009ce0:	0800a1d8 	.word	0x0800a1d8

08009ce4 <abort>:
 8009ce4:	b508      	push	{r3, lr}
 8009ce6:	2006      	movs	r0, #6
 8009ce8:	f000 f8d0 	bl	8009e8c <raise>
 8009cec:	2001      	movs	r0, #1
 8009cee:	f7f7 fff3 	bl	8001cd8 <_exit>

08009cf2 <__swhatbuf_r>:
 8009cf2:	b570      	push	{r4, r5, r6, lr}
 8009cf4:	460e      	mov	r6, r1
 8009cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cfa:	2900      	cmp	r1, #0
 8009cfc:	b096      	sub	sp, #88	; 0x58
 8009cfe:	4614      	mov	r4, r2
 8009d00:	461d      	mov	r5, r3
 8009d02:	da07      	bge.n	8009d14 <__swhatbuf_r+0x22>
 8009d04:	2300      	movs	r3, #0
 8009d06:	602b      	str	r3, [r5, #0]
 8009d08:	89b3      	ldrh	r3, [r6, #12]
 8009d0a:	061a      	lsls	r2, r3, #24
 8009d0c:	d410      	bmi.n	8009d30 <__swhatbuf_r+0x3e>
 8009d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d12:	e00e      	b.n	8009d32 <__swhatbuf_r+0x40>
 8009d14:	466a      	mov	r2, sp
 8009d16:	f000 f8d5 	bl	8009ec4 <_fstat_r>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	dbf2      	blt.n	8009d04 <__swhatbuf_r+0x12>
 8009d1e:	9a01      	ldr	r2, [sp, #4]
 8009d20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d28:	425a      	negs	r2, r3
 8009d2a:	415a      	adcs	r2, r3
 8009d2c:	602a      	str	r2, [r5, #0]
 8009d2e:	e7ee      	b.n	8009d0e <__swhatbuf_r+0x1c>
 8009d30:	2340      	movs	r3, #64	; 0x40
 8009d32:	2000      	movs	r0, #0
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	b016      	add	sp, #88	; 0x58
 8009d38:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d3c <__smakebuf_r>:
 8009d3c:	898b      	ldrh	r3, [r1, #12]
 8009d3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d40:	079d      	lsls	r5, r3, #30
 8009d42:	4606      	mov	r6, r0
 8009d44:	460c      	mov	r4, r1
 8009d46:	d507      	bpl.n	8009d58 <__smakebuf_r+0x1c>
 8009d48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	6123      	str	r3, [r4, #16]
 8009d50:	2301      	movs	r3, #1
 8009d52:	6163      	str	r3, [r4, #20]
 8009d54:	b002      	add	sp, #8
 8009d56:	bd70      	pop	{r4, r5, r6, pc}
 8009d58:	ab01      	add	r3, sp, #4
 8009d5a:	466a      	mov	r2, sp
 8009d5c:	f7ff ffc9 	bl	8009cf2 <__swhatbuf_r>
 8009d60:	9900      	ldr	r1, [sp, #0]
 8009d62:	4605      	mov	r5, r0
 8009d64:	4630      	mov	r0, r6
 8009d66:	f7fe ff33 	bl	8008bd0 <_malloc_r>
 8009d6a:	b948      	cbnz	r0, 8009d80 <__smakebuf_r+0x44>
 8009d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d70:	059a      	lsls	r2, r3, #22
 8009d72:	d4ef      	bmi.n	8009d54 <__smakebuf_r+0x18>
 8009d74:	f023 0303 	bic.w	r3, r3, #3
 8009d78:	f043 0302 	orr.w	r3, r3, #2
 8009d7c:	81a3      	strh	r3, [r4, #12]
 8009d7e:	e7e3      	b.n	8009d48 <__smakebuf_r+0xc>
 8009d80:	4b0d      	ldr	r3, [pc, #52]	; (8009db8 <__smakebuf_r+0x7c>)
 8009d82:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d84:	89a3      	ldrh	r3, [r4, #12]
 8009d86:	6020      	str	r0, [r4, #0]
 8009d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d8c:	81a3      	strh	r3, [r4, #12]
 8009d8e:	9b00      	ldr	r3, [sp, #0]
 8009d90:	6163      	str	r3, [r4, #20]
 8009d92:	9b01      	ldr	r3, [sp, #4]
 8009d94:	6120      	str	r0, [r4, #16]
 8009d96:	b15b      	cbz	r3, 8009db0 <__smakebuf_r+0x74>
 8009d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	f000 f8a3 	bl	8009ee8 <_isatty_r>
 8009da2:	b128      	cbz	r0, 8009db0 <__smakebuf_r+0x74>
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	f023 0303 	bic.w	r3, r3, #3
 8009daa:	f043 0301 	orr.w	r3, r3, #1
 8009dae:	81a3      	strh	r3, [r4, #12]
 8009db0:	89a0      	ldrh	r0, [r4, #12]
 8009db2:	4305      	orrs	r5, r0
 8009db4:	81a5      	strh	r5, [r4, #12]
 8009db6:	e7cd      	b.n	8009d54 <__smakebuf_r+0x18>
 8009db8:	080088f1 	.word	0x080088f1

08009dbc <memmove>:
 8009dbc:	4288      	cmp	r0, r1
 8009dbe:	b510      	push	{r4, lr}
 8009dc0:	eb01 0402 	add.w	r4, r1, r2
 8009dc4:	d902      	bls.n	8009dcc <memmove+0x10>
 8009dc6:	4284      	cmp	r4, r0
 8009dc8:	4623      	mov	r3, r4
 8009dca:	d807      	bhi.n	8009ddc <memmove+0x20>
 8009dcc:	1e43      	subs	r3, r0, #1
 8009dce:	42a1      	cmp	r1, r4
 8009dd0:	d008      	beq.n	8009de4 <memmove+0x28>
 8009dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dda:	e7f8      	b.n	8009dce <memmove+0x12>
 8009ddc:	4402      	add	r2, r0
 8009dde:	4601      	mov	r1, r0
 8009de0:	428a      	cmp	r2, r1
 8009de2:	d100      	bne.n	8009de6 <memmove+0x2a>
 8009de4:	bd10      	pop	{r4, pc}
 8009de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dee:	e7f7      	b.n	8009de0 <memmove+0x24>

08009df0 <_realloc_r>:
 8009df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df2:	4607      	mov	r7, r0
 8009df4:	4614      	mov	r4, r2
 8009df6:	460e      	mov	r6, r1
 8009df8:	b921      	cbnz	r1, 8009e04 <_realloc_r+0x14>
 8009dfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009dfe:	4611      	mov	r1, r2
 8009e00:	f7fe bee6 	b.w	8008bd0 <_malloc_r>
 8009e04:	b922      	cbnz	r2, 8009e10 <_realloc_r+0x20>
 8009e06:	f7fe fe93 	bl	8008b30 <_free_r>
 8009e0a:	4625      	mov	r5, r4
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e10:	f000 f87a 	bl	8009f08 <_malloc_usable_size_r>
 8009e14:	42a0      	cmp	r0, r4
 8009e16:	d20f      	bcs.n	8009e38 <_realloc_r+0x48>
 8009e18:	4621      	mov	r1, r4
 8009e1a:	4638      	mov	r0, r7
 8009e1c:	f7fe fed8 	bl	8008bd0 <_malloc_r>
 8009e20:	4605      	mov	r5, r0
 8009e22:	2800      	cmp	r0, #0
 8009e24:	d0f2      	beq.n	8009e0c <_realloc_r+0x1c>
 8009e26:	4631      	mov	r1, r6
 8009e28:	4622      	mov	r2, r4
 8009e2a:	f7fe fe6b 	bl	8008b04 <memcpy>
 8009e2e:	4631      	mov	r1, r6
 8009e30:	4638      	mov	r0, r7
 8009e32:	f7fe fe7d 	bl	8008b30 <_free_r>
 8009e36:	e7e9      	b.n	8009e0c <_realloc_r+0x1c>
 8009e38:	4635      	mov	r5, r6
 8009e3a:	e7e7      	b.n	8009e0c <_realloc_r+0x1c>

08009e3c <_raise_r>:
 8009e3c:	291f      	cmp	r1, #31
 8009e3e:	b538      	push	{r3, r4, r5, lr}
 8009e40:	4604      	mov	r4, r0
 8009e42:	460d      	mov	r5, r1
 8009e44:	d904      	bls.n	8009e50 <_raise_r+0x14>
 8009e46:	2316      	movs	r3, #22
 8009e48:	6003      	str	r3, [r0, #0]
 8009e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e4e:	bd38      	pop	{r3, r4, r5, pc}
 8009e50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e52:	b112      	cbz	r2, 8009e5a <_raise_r+0x1e>
 8009e54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e58:	b94b      	cbnz	r3, 8009e6e <_raise_r+0x32>
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f000 f830 	bl	8009ec0 <_getpid_r>
 8009e60:	462a      	mov	r2, r5
 8009e62:	4601      	mov	r1, r0
 8009e64:	4620      	mov	r0, r4
 8009e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e6a:	f000 b817 	b.w	8009e9c <_kill_r>
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d00a      	beq.n	8009e88 <_raise_r+0x4c>
 8009e72:	1c59      	adds	r1, r3, #1
 8009e74:	d103      	bne.n	8009e7e <_raise_r+0x42>
 8009e76:	2316      	movs	r3, #22
 8009e78:	6003      	str	r3, [r0, #0]
 8009e7a:	2001      	movs	r0, #1
 8009e7c:	e7e7      	b.n	8009e4e <_raise_r+0x12>
 8009e7e:	2400      	movs	r4, #0
 8009e80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e84:	4628      	mov	r0, r5
 8009e86:	4798      	blx	r3
 8009e88:	2000      	movs	r0, #0
 8009e8a:	e7e0      	b.n	8009e4e <_raise_r+0x12>

08009e8c <raise>:
 8009e8c:	4b02      	ldr	r3, [pc, #8]	; (8009e98 <raise+0xc>)
 8009e8e:	4601      	mov	r1, r0
 8009e90:	6818      	ldr	r0, [r3, #0]
 8009e92:	f7ff bfd3 	b.w	8009e3c <_raise_r>
 8009e96:	bf00      	nop
 8009e98:	20000060 	.word	0x20000060

08009e9c <_kill_r>:
 8009e9c:	b538      	push	{r3, r4, r5, lr}
 8009e9e:	4d07      	ldr	r5, [pc, #28]	; (8009ebc <_kill_r+0x20>)
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	4608      	mov	r0, r1
 8009ea6:	4611      	mov	r1, r2
 8009ea8:	602b      	str	r3, [r5, #0]
 8009eaa:	f7f7 ff05 	bl	8001cb8 <_kill>
 8009eae:	1c43      	adds	r3, r0, #1
 8009eb0:	d102      	bne.n	8009eb8 <_kill_r+0x1c>
 8009eb2:	682b      	ldr	r3, [r5, #0]
 8009eb4:	b103      	cbz	r3, 8009eb8 <_kill_r+0x1c>
 8009eb6:	6023      	str	r3, [r4, #0]
 8009eb8:	bd38      	pop	{r3, r4, r5, pc}
 8009eba:	bf00      	nop
 8009ebc:	20004464 	.word	0x20004464

08009ec0 <_getpid_r>:
 8009ec0:	f7f7 bef2 	b.w	8001ca8 <_getpid>

08009ec4 <_fstat_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	4d07      	ldr	r5, [pc, #28]	; (8009ee4 <_fstat_r+0x20>)
 8009ec8:	2300      	movs	r3, #0
 8009eca:	4604      	mov	r4, r0
 8009ecc:	4608      	mov	r0, r1
 8009ece:	4611      	mov	r1, r2
 8009ed0:	602b      	str	r3, [r5, #0]
 8009ed2:	f7f7 ff50 	bl	8001d76 <_fstat>
 8009ed6:	1c43      	adds	r3, r0, #1
 8009ed8:	d102      	bne.n	8009ee0 <_fstat_r+0x1c>
 8009eda:	682b      	ldr	r3, [r5, #0]
 8009edc:	b103      	cbz	r3, 8009ee0 <_fstat_r+0x1c>
 8009ede:	6023      	str	r3, [r4, #0]
 8009ee0:	bd38      	pop	{r3, r4, r5, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20004464 	.word	0x20004464

08009ee8 <_isatty_r>:
 8009ee8:	b538      	push	{r3, r4, r5, lr}
 8009eea:	4d06      	ldr	r5, [pc, #24]	; (8009f04 <_isatty_r+0x1c>)
 8009eec:	2300      	movs	r3, #0
 8009eee:	4604      	mov	r4, r0
 8009ef0:	4608      	mov	r0, r1
 8009ef2:	602b      	str	r3, [r5, #0]
 8009ef4:	f7f7 ff4f 	bl	8001d96 <_isatty>
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	d102      	bne.n	8009f02 <_isatty_r+0x1a>
 8009efc:	682b      	ldr	r3, [r5, #0]
 8009efe:	b103      	cbz	r3, 8009f02 <_isatty_r+0x1a>
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	bd38      	pop	{r3, r4, r5, pc}
 8009f04:	20004464 	.word	0x20004464

08009f08 <_malloc_usable_size_r>:
 8009f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f0c:	1f18      	subs	r0, r3, #4
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	bfbc      	itt	lt
 8009f12:	580b      	ldrlt	r3, [r1, r0]
 8009f14:	18c0      	addlt	r0, r0, r3
 8009f16:	4770      	bx	lr

08009f18 <_init>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	bf00      	nop
 8009f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f1e:	bc08      	pop	{r3}
 8009f20:	469e      	mov	lr, r3
 8009f22:	4770      	bx	lr

08009f24 <_fini>:
 8009f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f26:	bf00      	nop
 8009f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f2a:	bc08      	pop	{r3}
 8009f2c:	469e      	mov	lr, r3
 8009f2e:	4770      	bx	lr
