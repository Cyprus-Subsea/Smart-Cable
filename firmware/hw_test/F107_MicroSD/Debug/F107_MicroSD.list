
F107_MicroSD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af34  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800b124  0800b124  0001b124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b720  0800b720  000200c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b720  0800b720  0001b720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b728  0800b728  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b728  0800b728  0001b728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b72c  0800b72c  0001b72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  0800b730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004490  200000c4  0800b7f4  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004554  0800b7f4  00024554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ce7  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d36  00000000  00000000  00039dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f8  00000000  00000000  0003db10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001680  00000000  00000000  0003f308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242ce  00000000  00000000  00040988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d8cb  00000000  00000000  00064c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6e55  00000000  00000000  00082521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149376  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006970  00000000  00000000  001493c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200000c4 	.word	0x200000c4
 800020c:	00000000 	.word	0x00000000
 8000210:	0800b10c 	.word	0x0800b10c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200000c8 	.word	0x200000c8
 800022c:	0800b10c 	.word	0x0800b10c

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b976 	b.w	8000544 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	460d      	mov	r5, r1
 8000278:	4604      	mov	r4, r0
 800027a:	4688      	mov	r8, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14d      	bne.n	800031c <__udivmoddi4+0xac>
 8000280:	428a      	cmp	r2, r1
 8000282:	4694      	mov	ip, r2
 8000284:	d968      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000286:	fab2 f282 	clz	r2, r2
 800028a:	b152      	cbz	r2, 80002a2 <__udivmoddi4+0x32>
 800028c:	fa01 f302 	lsl.w	r3, r1, r2
 8000290:	f1c2 0120 	rsb	r1, r2, #32
 8000294:	fa20 f101 	lsr.w	r1, r0, r1
 8000298:	fa0c fc02 	lsl.w	ip, ip, r2
 800029c:	ea41 0803 	orr.w	r8, r1, r3
 80002a0:	4094      	lsls	r4, r2
 80002a2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002a6:	fbb8 f7f1 	udiv	r7, r8, r1
 80002aa:	fa1f fe8c 	uxth.w	lr, ip
 80002ae:	fb01 8817 	mls	r8, r1, r7, r8
 80002b2:	fb07 f00e 	mul.w	r0, r7, lr
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002bc:	4298      	cmp	r0, r3
 80002be:	d90a      	bls.n	80002d6 <__udivmoddi4+0x66>
 80002c0:	eb1c 0303 	adds.w	r3, ip, r3
 80002c4:	f107 35ff 	add.w	r5, r7, #4294967295
 80002c8:	f080 811e 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002cc:	4298      	cmp	r0, r3
 80002ce:	f240 811b 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d2:	3f02      	subs	r7, #2
 80002d4:	4463      	add	r3, ip
 80002d6:	1a1b      	subs	r3, r3, r0
 80002d8:	fbb3 f0f1 	udiv	r0, r3, r1
 80002dc:	fb01 3310 	mls	r3, r1, r0, r3
 80002e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002e4:	b2a4      	uxth	r4, r4
 80002e6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0404 	adds.w	r4, ip, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8109 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8106 	bls.w	800050c <__udivmoddi4+0x29c>
 8000300:	4464      	add	r4, ip
 8000302:	3802      	subs	r0, #2
 8000304:	2100      	movs	r1, #0
 8000306:	eba4 040e 	sub.w	r4, r4, lr
 800030a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800030e:	b11e      	cbz	r6, 8000318 <__udivmoddi4+0xa8>
 8000310:	2300      	movs	r3, #0
 8000312:	40d4      	lsrs	r4, r2
 8000314:	e9c6 4300 	strd	r4, r3, [r6]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d908      	bls.n	8000332 <__udivmoddi4+0xc2>
 8000320:	2e00      	cmp	r6, #0
 8000322:	f000 80ee 	beq.w	8000502 <__udivmoddi4+0x292>
 8000326:	2100      	movs	r1, #0
 8000328:	e9c6 0500 	strd	r0, r5, [r6]
 800032c:	4608      	mov	r0, r1
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f183 	clz	r1, r3
 8000336:	2900      	cmp	r1, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fc 	bhi.w	800053c <__udivmoddi4+0x2cc>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0303 	sbc.w	r3, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	4698      	mov	r8, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d0e2      	beq.n	8000318 <__udivmoddi4+0xa8>
 8000352:	e9c6 4800 	strd	r4, r8, [r6]
 8000356:	e7df      	b.n	8000318 <__udivmoddi4+0xa8>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8091 	bne.w	8000488 <__udivmoddi4+0x218>
 8000366:	eba1 000c 	sub.w	r0, r1, ip
 800036a:	2101      	movs	r1, #1
 800036c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000370:	fa1f fe8c 	uxth.w	lr, ip
 8000374:	fbb0 f3f7 	udiv	r3, r0, r7
 8000378:	fb07 0013 	mls	r0, r7, r3, r0
 800037c:	0c25      	lsrs	r5, r4, #16
 800037e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	42a8      	cmp	r0, r5
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0505 	adds.w	r5, ip, r5
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	42a8      	cmp	r0, r5
 8000396:	f200 80ce 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 800039a:	4643      	mov	r3, r8
 800039c:	1a2d      	subs	r5, r5, r0
 800039e:	fbb5 f0f7 	udiv	r0, r5, r7
 80003a2:	fb07 5510 	mls	r5, r7, r0, r5
 80003a6:	fb0e fe00 	mul.w	lr, lr, r0
 80003aa:	b2a4      	uxth	r4, r4
 80003ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80b6 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 80003c4:	4628      	mov	r0, r5
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79e      	b.n	800030e <__udivmoddi4+0x9e>
 80003d0:	f1c1 0720 	rsb	r7, r1, #32
 80003d4:	408b      	lsls	r3, r1
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa25 fa07 	lsr.w	sl, r5, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	fbba f8f9 	udiv	r8, sl, r9
 80003ea:	fa20 f307 	lsr.w	r3, r0, r7
 80003ee:	fb09 aa18 	mls	sl, r9, r8, sl
 80003f2:	408d      	lsls	r5, r1
 80003f4:	fa1f fe8c 	uxth.w	lr, ip
 80003f8:	431d      	orrs	r5, r3
 80003fa:	fa00 f301 	lsl.w	r3, r0, r1
 80003fe:	fb08 f00e 	mul.w	r0, r8, lr
 8000402:	0c2c      	lsrs	r4, r5, #16
 8000404:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000408:	42a0      	cmp	r0, r4
 800040a:	fa02 f201 	lsl.w	r2, r2, r1
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	42a0      	cmp	r0, r4
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4464      	add	r4, ip
 8000428:	1a24      	subs	r4, r4, r0
 800042a:	fbb4 f0f9 	udiv	r0, r4, r9
 800042e:	fb09 4410 	mls	r4, r9, r0, r4
 8000432:	fb00 fe0e 	mul.w	lr, r0, lr
 8000436:	b2ad      	uxth	r5, r5
 8000438:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800043c:	45a6      	cmp	lr, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0404 	adds.w	r4, ip, r4
 8000444:	f100 35ff 	add.w	r5, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	45a6      	cmp	lr, r4
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4464      	add	r4, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9502 	umull	r9, r5, r0, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	42ac      	cmp	r4, r5
 8000460:	46c8      	mov	r8, r9
 8000462:	46ae      	mov	lr, r5
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	2e00      	cmp	r6, #0
 800046a:	d069      	beq.n	8000540 <__udivmoddi4+0x2d0>
 800046c:	ebb3 0208 	subs.w	r2, r3, r8
 8000470:	eb64 040e 	sbc.w	r4, r4, lr
 8000474:	fa22 f301 	lsr.w	r3, r2, r1
 8000478:	fa04 f707 	lsl.w	r7, r4, r7
 800047c:	431f      	orrs	r7, r3
 800047e:	40cc      	lsrs	r4, r1
 8000480:	e9c6 7400 	strd	r7, r4, [r6]
 8000484:	2100      	movs	r1, #0
 8000486:	e747      	b.n	8000318 <__udivmoddi4+0xa8>
 8000488:	fa0c fc02 	lsl.w	ip, ip, r2
 800048c:	f1c2 0120 	rsb	r1, r2, #32
 8000490:	fa25 f301 	lsr.w	r3, r5, r1
 8000494:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000498:	fa20 f101 	lsr.w	r1, r0, r1
 800049c:	4095      	lsls	r5, r2
 800049e:	430d      	orrs	r5, r1
 80004a0:	fbb3 f1f7 	udiv	r1, r3, r7
 80004a4:	fb07 3311 	mls	r3, r7, r1, r3
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	0c28      	lsrs	r0, r5, #16
 80004ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004b2:	fb01 f30e 	mul.w	r3, r1, lr
 80004b6:	4283      	cmp	r3, r0
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0000 	adds.w	r0, ip, r0
 80004c2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	4283      	cmp	r3, r0
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3902      	subs	r1, #2
 80004ce:	4460      	add	r0, ip
 80004d0:	1ac0      	subs	r0, r0, r3
 80004d2:	fbb0 f3f7 	udiv	r3, r0, r7
 80004d6:	fb07 0013 	mls	r0, r7, r3, r0
 80004da:	b2ad      	uxth	r5, r5
 80004dc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80004e0:	fb03 f00e 	mul.w	r0, r3, lr
 80004e4:	42a8      	cmp	r0, r5
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0505 	adds.w	r5, ip, r5
 80004ec:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	42a8      	cmp	r0, r5
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4465      	add	r5, ip
 80004fa:	1a28      	subs	r0, r5, r0
 80004fc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	4631      	mov	r1, r6
 8000504:	4630      	mov	r0, r6
 8000506:	e707      	b.n	8000318 <__udivmoddi4+0xa8>
 8000508:	462f      	mov	r7, r5
 800050a:	e6e4      	b.n	80002d6 <__udivmoddi4+0x66>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f9      	b.n	8000304 <__udivmoddi4+0x94>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb65 0e0c 	sbc.w	lr, r5, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4643      	mov	r3, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4628      	mov	r0, r5
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4641      	mov	r1, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	4464      	add	r4, ip
 8000532:	3802      	subs	r0, #2
 8000534:	e747      	b.n	80003c6 <__udivmoddi4+0x156>
 8000536:	3b02      	subs	r3, #2
 8000538:	4465      	add	r5, ip
 800053a:	e72f      	b.n	800039c <__udivmoddi4+0x12c>
 800053c:	4608      	mov	r0, r1
 800053e:	e706      	b.n	800034e <__udivmoddi4+0xde>
 8000540:	4631      	mov	r1, r6
 8000542:	e6e9      	b.n	8000318 <__udivmoddi4+0xa8>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <sd_storage_disk_init>:

extern ss_pp sd_cards_ss[4];
extern UART_HandleTypeDef huart1;

F_RES sd_storage_disk_init(FATFS* fs,char* path)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	6039      	str	r1, [r7, #0]
	if(f_mount(fs,path,1)==FR_OK) return F_OK;
 8000552:	2201      	movs	r2, #1
 8000554:	6839      	ldr	r1, [r7, #0]
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f007 fd14 	bl	8007f84 <f_mount>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <sd_storage_disk_init+0x1e>
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <sd_storage_disk_init+0x20>
	else return F_ERR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <sd_storage_init>:
F_RES sd_storage_init(sd_storage_t* self_object)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08c      	sub	sp, #48	; 0x30
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  char tt[10];
  FRESULT res;
  DWORD fre_clust, fre_sect, tot_sect;
  FATFS*  fs;
  self_object->active_disk_indx=0;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2200      	movs	r2, #0
 800057c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
  self_object->num_of_discs=0;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2200      	movs	r2, #0
 8000584:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
  self_object->status=STORAGE_NOT_INITTIALIZED;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919

  MX_FATFS_Init();
 8000590:	f003 ff4a 	bl	8004428 <MX_FATFS_Init>

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000594:	2300      	movs	r3, #0
 8000596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000598:	e080      	b.n	800069c <sd_storage_init+0x12c>
  {
   sprintf(tt,"%d:",i);
 800059a:	f107 0314 	add.w	r3, r7, #20
 800059e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005a0:	4953      	ldr	r1, [pc, #332]	; (80006f0 <sd_storage_init+0x180>)
 80005a2:	4618      	mov	r0, r3
 80005a4:	f00a f9ec 	bl	800a980 <siprintf>
   if(sd_storage_disk_init(&self_object->disks[i].fs,tt)==F_OK){
 80005a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005aa:	f44f 7211 	mov.w	r2, #580	; 0x244
 80005ae:	fb02 f303 	mul.w	r3, r2, r3
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	f107 0214 	add.w	r2, r7, #20
 80005ba:	4611      	mov	r1, r2
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff ffc3 	bl	8000548 <sd_storage_disk_init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d15b      	bne.n	8000680 <sd_storage_init+0x110>
		  self_object->disks[i].status=DISK_PRESENT;
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005cc:	f44f 7111 	mov.w	r1, #580	; 0x244
 80005d0:	fb01 f303 	mul.w	r3, r1, r3
 80005d4:	4413      	add	r3, r2
 80005d6:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
		  self_object->num_of_discs++;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f893 3918 	ldrb.w	r3, [r3, #2328]	; 0x918
 80005e4:	3301      	adds	r3, #1
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f883 2918 	strb.w	r2, [r3, #2328]	; 0x918
  		  if(f_getfree(tt, &fre_clust, &fs)==FR_OK){
 80005ee:	f107 020c 	add.w	r2, r7, #12
 80005f2:	f107 0110 	add.w	r1, r7, #16
 80005f6:	f107 0314 	add.w	r3, r7, #20
 80005fa:	4618      	mov	r0, r3
 80005fc:	f008 fc3f 	bl	8008e7e <f_getfree>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d147      	bne.n	8000696 <sd_storage_init+0x126>
		    tot_sect = (self_object->disks[i].fs.n_fatent - 2) * self_object->disks[i].fs.csize;
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800060a:	f44f 7111 	mov.w	r1, #580	; 0x244
 800060e:	fb01 f303 	mul.w	r3, r1, r3
 8000612:	4413      	add	r3, r2
 8000614:	331c      	adds	r3, #28
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	3b02      	subs	r3, #2
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800061e:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000622:	fb00 f202 	mul.w	r2, r0, r2
 8000626:	440a      	add	r2, r1
 8000628:	320a      	adds	r2, #10
 800062a:	8812      	ldrh	r2, [r2, #0]
 800062c:	fb02 f303 	mul.w	r3, r2, r3
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
			fre_sect = fre_clust * self_object->disks[i].fs.csize;
 8000632:	687a      	ldr	r2, [r7, #4]
 8000634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000636:	f44f 7111 	mov.w	r1, #580	; 0x244
 800063a:	fb01 f303 	mul.w	r3, r1, r3
 800063e:	4413      	add	r3, r2
 8000640:	330a      	adds	r3, #10
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	461a      	mov	r2, r3
 8000646:	693b      	ldr	r3, [r7, #16]
 8000648:	fb02 f303 	mul.w	r3, r2, r3
 800064c:	623b      	str	r3, [r7, #32]
			self_object->disks[i].size=tot_sect/2;
 800064e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000650:	085a      	lsrs	r2, r3, #1
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000656:	f44f 7011 	mov.w	r0, #580	; 0x244
 800065a:	fb00 f303 	mul.w	r3, r0, r3
 800065e:	440b      	add	r3, r1
 8000660:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8000664:	601a      	str	r2, [r3, #0]
			self_object->disks[i].free_space=fre_sect/2;
 8000666:	6a3b      	ldr	r3, [r7, #32]
 8000668:	085a      	lsrs	r2, r3, #1
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800066e:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000672:	fb00 f303 	mul.w	r3, r0, r3
 8000676:	440b      	add	r3, r1
 8000678:	f503 7310 	add.w	r3, r3, #576	; 0x240
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	e00a      	b.n	8000696 <sd_storage_init+0x126>
		  }
   }
   else{
		 self_object->disks[i].status=DISK_ABSENT;
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000684:	f44f 7111 	mov.w	r1, #580	; 0x244
 8000688:	fb01 f303 	mul.w	r3, r1, r3
 800068c:	4413      	add	r3, r2
 800068e:	f503 730e 	add.w	r3, r3, #568	; 0x238
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 8000696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000698:	3301      	adds	r3, #1
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800069c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800069e:	2b03      	cmp	r3, #3
 80006a0:	f77f af7b 	ble.w	800059a <sd_storage_init+0x2a>
   }
  }

  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 80006a4:	2300      	movs	r3, #0
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80006a8:	e019      	b.n	80006de <sd_storage_init+0x16e>
  {
   if(self_object->disks[i].status==DISK_PRESENT){
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006ae:	f44f 7111 	mov.w	r1, #580	; 0x244
 80006b2:	fb01 f303 	mul.w	r3, r1, r3
 80006b6:	4413      	add	r3, r2
 80006b8:	f503 730e 	add.w	r3, r3, #568	; 0x238
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d10a      	bne.n	80006d8 <sd_storage_init+0x168>
	   self_object->active_disk_indx=i;
 80006c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
	   self_object->status=STORAGE_INITTIALIZED;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	f883 2919 	strb.w	r2, [r3, #2329]	; 0x919
	   return F_OK;
 80006d4:	2300      	movs	r3, #0
 80006d6:	e006      	b.n	80006e6 <sd_storage_init+0x176>
  for(int i=0;i<SD_STORAGE_NUM_DISKS;i++)
 80006d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006da:	3301      	adds	r3, #1
 80006dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80006de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006e0:	2b03      	cmp	r3, #3
 80006e2:	dde2      	ble.n	80006aa <sd_storage_init+0x13a>
   }
  }
  return F_ERR;
 80006e4:	2301      	movs	r3, #1
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3730      	adds	r7, #48	; 0x30
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	0800b124 	.word	0x0800b124

080006f4 <sd_storage_link_ss>:

F_RES sd_storage_link_ss(sd_storage_t* self_object,uint8_t disk_num, uint16_t sd_ss_pin,GPIO_TypeDef* sd_ss_port)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	460b      	mov	r3, r1
 8000700:	72fb      	strb	r3, [r7, #11]
 8000702:	4613      	mov	r3, r2
 8000704:	813b      	strh	r3, [r7, #8]
	  sd_cards_ss[disk_num].sd_ss_pin=sd_ss_pin;
 8000706:	7afb      	ldrb	r3, [r7, #11]
 8000708:	4907      	ldr	r1, [pc, #28]	; (8000728 <sd_storage_link_ss+0x34>)
 800070a:	893a      	ldrh	r2, [r7, #8]
 800070c:	f821 2033 	strh.w	r2, [r1, r3, lsl #3]
	  sd_cards_ss[disk_num].sd_ss_port=sd_ss_port;
 8000710:	7afb      	ldrb	r3, [r7, #11]
 8000712:	4a05      	ldr	r2, [pc, #20]	; (8000728 <sd_storage_link_ss+0x34>)
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	4413      	add	r3, r2
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	605a      	str	r2, [r3, #4]
	  return F_OK;
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	20000de8 	.word	0x20000de8

0800072c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4a06      	ldr	r2, [pc, #24]	; (8000754 <vApplicationGetIdleTaskMemory+0x28>)
 800073c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	4a05      	ldr	r2, [pc, #20]	; (8000758 <vApplicationGetIdleTaskMemory+0x2c>)
 8000742:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2280      	movs	r2, #128	; 0x80
 8000748:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr
 8000754:	200000e0 	.word	0x200000e0
 8000758:	20000194 	.word	0x20000194

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b5b0      	push	{r4, r5, r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000762:	f000 ff5d 	bl	8001620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000766:	f000 f821 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076a:	f000 f8ef 	bl	800094c <MX_GPIO_Init>
  MX_DMA_Init();
 800076e:	f000 f8c7 	bl	8000900 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000772:	f000 f89b 	bl	80008ac <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000776:	f000 f863 	bl	8000840 <MX_SPI1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <main+0x48>)
 800077c:	1d3c      	adds	r4, r7, #4
 800077e:	461d      	mov	r5, r3
 8000780:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000784:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000788:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2100      	movs	r1, #0
 8000790:	4618      	mov	r0, r3
 8000792:	f008 fdb1 	bl	80092f8 <osThreadCreate>
 8000796:	4603      	mov	r3, r0
 8000798:	4a03      	ldr	r2, [pc, #12]	; (80007a8 <main+0x4c>)
 800079a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800079c:	f008 fda5 	bl	80092ea <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <main+0x44>
 80007a2:	bf00      	nop
 80007a4:	0800b134 	.word	0x0800b134
 80007a8:	200004b8 	.word	0x200004b8

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b094      	sub	sp, #80	; 0x50
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	f107 0318 	add.w	r3, r7, #24
 80007b6:	2238      	movs	r2, #56	; 0x38
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f009 ffca 	bl	800a754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d2:	2301      	movs	r3, #1
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d6:	2310      	movs	r3, #16
 80007d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80007e2:	2300      	movs	r3, #0
 80007e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0318 	add.w	r3, r7, #24
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 fdb5 	bl	8002364 <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000800:	f000 fa0a 	bl	8000c18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	230f      	movs	r3, #15
 8000806:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000808:	2302      	movs	r3, #2
 800080a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000814:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2101      	movs	r1, #1
 800081e:	4618      	mov	r0, r3
 8000820:	f002 f8b6 	bl	8002990 <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800082a:	f000 f9f5 	bl	8000c18 <Error_Handler>
  }

  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800082e:	4b03      	ldr	r3, [pc, #12]	; (800083c <SystemClock_Config+0x90>)
 8000830:	2201      	movs	r2, #1
 8000832:	601a      	str	r2, [r3, #0]
}
 8000834:	bf00      	nop
 8000836:	3750      	adds	r7, #80	; 0x50
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	42420070 	.word	0x42420070

08000840 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000846:	4a18      	ldr	r2, [pc, #96]	; (80008a8 <MX_SPI1_Init+0x68>)
 8000848:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_SPI1_Init+0x64>)
 800084c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000850:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000852:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_SPI1_Init+0x64>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_SPI1_Init+0x64>)
 800086c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000870:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <MX_SPI1_Init+0x64>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_SPI1_Init+0x64>)
 800088c:	220a      	movs	r2, #10
 800088e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_SPI1_Init+0x64>)
 8000892:	f002 fac5 	bl	8002e20 <HAL_SPI_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800089c:	f000 f9bc 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000394 	.word	0x20000394
 80008a8:	40013000 	.word	0x40013000

080008ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <MX_USART1_UART_Init+0x50>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008e4:	f003 f8c8 	bl	8003a78 <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ee:	f000 f993 	bl	8000c18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20000474 	.word	0x20000474
 80008fc:	40013800 	.word	0x40013800

08000900 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_DMA_Init+0x48>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <MX_DMA_Init+0x48>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6153      	str	r3, [r2, #20]
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_DMA_Init+0x48>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2105      	movs	r1, #5
 8000922:	200c      	movs	r0, #12
 8000924:	f000 ff63 	bl	80017ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000928:	200c      	movs	r0, #12
 800092a:	f000 ff7c 	bl	8001826 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2105      	movs	r1, #5
 8000932:	200d      	movs	r0, #13
 8000934:	f000 ff5b 	bl	80017ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000938:	200d      	movs	r0, #13
 800093a:	f000 ff74 	bl	8001826 <HAL_NVIC_EnableIRQ>

}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40021000 	.word	0x40021000

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0310 	add.w	r3, r7, #16
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000960:	4b2c      	ldr	r3, [pc, #176]	; (8000a14 <MX_GPIO_Init+0xc8>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a2b      	ldr	r2, [pc, #172]	; (8000a14 <MX_GPIO_Init+0xc8>)
 8000966:	f043 0320 	orr.w	r3, r3, #32
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <MX_GPIO_Init+0xc8>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0320 	and.w	r3, r3, #32
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <MX_GPIO_Init+0xc8>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	4a25      	ldr	r2, [pc, #148]	; (8000a14 <MX_GPIO_Init+0xc8>)
 800097e:	f043 0310 	orr.w	r3, r3, #16
 8000982:	6193      	str	r3, [r2, #24]
 8000984:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <MX_GPIO_Init+0xc8>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	f003 0310 	and.w	r3, r3, #16
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <MX_GPIO_Init+0xc8>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a1f      	ldr	r2, [pc, #124]	; (8000a14 <MX_GPIO_Init+0xc8>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <MX_GPIO_Init+0xc8>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0304 	and.w	r3, r3, #4
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	4b1a      	ldr	r3, [pc, #104]	; (8000a14 <MX_GPIO_Init+0xc8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a19      	ldr	r2, [pc, #100]	; (8000a14 <MX_GPIO_Init+0xc8>)
 80009ae:	f043 0308 	orr.w	r3, r3, #8
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <MX_GPIO_Init+0xc8>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f003 0308 	and.w	r3, r3, #8
 80009bc:	603b      	str	r3, [r7, #0]
 80009be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_SD3_GPIO_Port, SS_SD3_Pin, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	2102      	movs	r1, #2
 80009c4:	4814      	ldr	r0, [pc, #80]	; (8000a18 <MX_GPIO_Init+0xcc>)
 80009c6:	f001 fcb5 	bl	8002334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin, GPIO_PIN_SET);
 80009ca:	2201      	movs	r2, #1
 80009cc:	2186      	movs	r1, #134	; 0x86
 80009ce:	4813      	ldr	r0, [pc, #76]	; (8000a1c <MX_GPIO_Init+0xd0>)
 80009d0:	f001 fcb0 	bl	8002334 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS_SD3_Pin */
  GPIO_InitStruct.Pin = SS_SD3_Pin;
 80009d4:	2302      	movs	r3, #2
 80009d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009e0:	2303      	movs	r3, #3
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SS_SD3_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	4619      	mov	r1, r3
 80009ea:	480b      	ldr	r0, [pc, #44]	; (8000a18 <MX_GPIO_Init+0xcc>)
 80009ec:	f001 fb1e 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pins : SS_SD1_Pin SS_SD2_Pin SS_SD4_Pin */
  GPIO_InitStruct.Pin = SS_SD1_Pin|SS_SD2_Pin|SS_SD4_Pin;
 80009f0:	2386      	movs	r3, #134	; 0x86
 80009f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	4619      	mov	r1, r3
 8000a06:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_GPIO_Init+0xd0>)
 8000a08:	f001 fb10 	bl	800202c <HAL_GPIO_Init>

}
 8000a0c:	bf00      	nop
 8000a0e:	3720      	adds	r7, #32
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40011000 	.word	0x40011000
 8000a1c:	40010800 	.word	0x40010800

08000a20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	f5ad 7d2a 	sub.w	sp, sp, #680	; 0x2a8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8000a2c:	f5a3 7329 	sub.w	r3, r3, #676	; 0x2a4
 8000a30:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  osDelay(500);
 8000a32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a36:	f008 fcab 	bl	8009390 <osDelay>
  char info_msg[30];

  sprintf(info_msg,"Wait for storage init....\r");
 8000a3a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000a3e:	4963      	ldr	r1, [pc, #396]	; (8000bcc <StartDefaultTask+0x1ac>)
 8000a40:	4618      	mov	r0, r3
 8000a42:	f009 ff9d 	bl	800a980 <siprintf>
  HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8000a46:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fbf0 	bl	8000230 <strlen>
 8000a50:	4603      	mov	r3, r0
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	f507 7122 	add.w	r1, r7, #648	; 0x288
 8000a58:	2364      	movs	r3, #100	; 0x64
 8000a5a:	485d      	ldr	r0, [pc, #372]	; (8000bd0 <StartDefaultTask+0x1b0>)
 8000a5c:	f003 f859 	bl	8003b12 <HAL_UART_Transmit>

  sd_storage_link_ss(&microsd_storage,0,SS_SD1_Pin,GPIOA);
 8000a60:	4b5c      	ldr	r3, [pc, #368]	; (8000bd4 <StartDefaultTask+0x1b4>)
 8000a62:	2202      	movs	r2, #2
 8000a64:	2100      	movs	r1, #0
 8000a66:	485c      	ldr	r0, [pc, #368]	; (8000bd8 <StartDefaultTask+0x1b8>)
 8000a68:	f7ff fe44 	bl	80006f4 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,1,SS_SD2_Pin,GPIOA);
 8000a6c:	4b59      	ldr	r3, [pc, #356]	; (8000bd4 <StartDefaultTask+0x1b4>)
 8000a6e:	2204      	movs	r2, #4
 8000a70:	2101      	movs	r1, #1
 8000a72:	4859      	ldr	r0, [pc, #356]	; (8000bd8 <StartDefaultTask+0x1b8>)
 8000a74:	f7ff fe3e 	bl	80006f4 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,2,SS_SD3_Pin,SS_SD3_GPIO_Port);
 8000a78:	4b58      	ldr	r3, [pc, #352]	; (8000bdc <StartDefaultTask+0x1bc>)
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	4856      	ldr	r0, [pc, #344]	; (8000bd8 <StartDefaultTask+0x1b8>)
 8000a80:	f7ff fe38 	bl	80006f4 <sd_storage_link_ss>
  sd_storage_link_ss(&microsd_storage,3,SS_SD4_Pin,GPIOA);
 8000a84:	4b53      	ldr	r3, [pc, #332]	; (8000bd4 <StartDefaultTask+0x1b4>)
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	2103      	movs	r1, #3
 8000a8a:	4853      	ldr	r0, [pc, #332]	; (8000bd8 <StartDefaultTask+0x1b8>)
 8000a8c:	f7ff fe32 	bl	80006f4 <sd_storage_link_ss>

  sprintf(info_msg,"init hw....\r");
 8000a90:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000a94:	4952      	ldr	r1, [pc, #328]	; (8000be0 <StartDefaultTask+0x1c0>)
 8000a96:	4618      	mov	r0, r3
 8000a98:	f009 ff72 	bl	800a980 <siprintf>
  HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8000a9c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fbc5 	bl	8000230 <strlen>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	f507 7122 	add.w	r1, r7, #648	; 0x288
 8000aae:	2364      	movs	r3, #100	; 0x64
 8000ab0:	4847      	ldr	r0, [pc, #284]	; (8000bd0 <StartDefaultTask+0x1b0>)
 8000ab2:	f003 f82e 	bl	8003b12 <HAL_UART_Transmit>

  while(sd_storage_init(&microsd_storage)!=F_OK){
 8000ab6:	e010      	b.n	8000ada <StartDefaultTask+0xba>
	HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8000ab8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fbb7 	bl	8000230 <strlen>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	f507 7122 	add.w	r1, r7, #648	; 0x288
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	4840      	ldr	r0, [pc, #256]	; (8000bd0 <StartDefaultTask+0x1b0>)
 8000ace:	f003 f820 	bl	8003b12 <HAL_UART_Transmit>
	osDelay(1000);
 8000ad2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad6:	f008 fc5b 	bl	8009390 <osDelay>
  while(sd_storage_init(&microsd_storage)!=F_OK){
 8000ada:	483f      	ldr	r0, [pc, #252]	; (8000bd8 <StartDefaultTask+0x1b8>)
 8000adc:	f7ff fd48 	bl	8000570 <sd_storage_init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d1e8      	bne.n	8000ab8 <StartDefaultTask+0x98>
  }

  sprintf(info_msg,"detected %d cards.\r",microsd_storage.num_of_discs);
 8000ae6:	4b3c      	ldr	r3, [pc, #240]	; (8000bd8 <StartDefaultTask+0x1b8>)
 8000ae8:	f893 3918 	ldrb.w	r3, [r3, #2328]	; 0x918
 8000aec:	461a      	mov	r2, r3
 8000aee:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000af2:	493c      	ldr	r1, [pc, #240]	; (8000be4 <StartDefaultTask+0x1c4>)
 8000af4:	4618      	mov	r0, r3
 8000af6:	f009 ff43 	bl	800a980 <siprintf>
  HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8000afa:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff fb96 	bl	8000230 <strlen>
 8000b04:	4603      	mov	r3, r0
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	f507 7122 	add.w	r1, r7, #648	; 0x288
 8000b0c:	2364      	movs	r3, #100	; 0x64
 8000b0e:	4830      	ldr	r0, [pc, #192]	; (8000bd0 <StartDefaultTask+0x1b0>)
 8000b10:	f002 ffff 	bl	8003b12 <HAL_UART_Transmit>

  sprintf(info_msg,"Free space  %u.\r",microsd_storage.disks[microsd_storage.active_disk_indx].free_space);
 8000b14:	4b30      	ldr	r3, [pc, #192]	; (8000bd8 <StartDefaultTask+0x1b8>)
 8000b16:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4a2e      	ldr	r2, [pc, #184]	; (8000bd8 <StartDefaultTask+0x1b8>)
 8000b1e:	f44f 7311 	mov.w	r3, #580	; 0x244
 8000b22:	fb01 f303 	mul.w	r3, r1, r3
 8000b26:	4413      	add	r3, r2
 8000b28:	f503 7310 	add.w	r3, r3, #576	; 0x240
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000b32:	492d      	ldr	r1, [pc, #180]	; (8000be8 <StartDefaultTask+0x1c8>)
 8000b34:	4618      	mov	r0, r3
 8000b36:	f009 ff23 	bl	800a980 <siprintf>
  HAL_UART_Transmit(&huart1,info_msg,strlen(info_msg),100);
 8000b3a:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fb76 	bl	8000230 <strlen>
 8000b44:	4603      	mov	r3, r0
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	f507 7122 	add.w	r1, r7, #648	; 0x288
 8000b4c:	2364      	movs	r3, #100	; 0x64
 8000b4e:	4820      	ldr	r0, [pc, #128]	; (8000bd0 <StartDefaultTask+0x1b0>)
 8000b50:	f002 ffdf 	bl	8003b12 <HAL_UART_Transmit>

  char file_name[20];
  sprintf(file_name,"%d:test.txt",microsd_storage.active_disk_indx);
 8000b54:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <StartDefaultTask+0x1b8>)
 8000b56:	f893 3910 	ldrb.w	r3, [r3, #2320]	; 0x910
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	f507 731d 	add.w	r3, r7, #628	; 0x274
 8000b60:	4922      	ldr	r1, [pc, #136]	; (8000bec <StartDefaultTask+0x1cc>)
 8000b62:	4618      	mov	r0, r3
 8000b64:	f009 ff0c 	bl	800a980 <siprintf>
  FIL      file;
  uint32_t  byteswritten;
  uint8_t rx_buf[10];


  f_open(&file,file_name,FA_CREATE_ALWAYS|FA_WRITE);
 8000b68:	f507 711d 	add.w	r1, r7, #628	; 0x274
 8000b6c:	f107 0318 	add.w	r3, r7, #24
 8000b70:	220a      	movs	r2, #10
 8000b72:	4618      	mov	r0, r3
 8000b74:	f007 fa4c 	bl	8008010 <f_open>

  f_write(&file,"TEST",4,(UINT*)&byteswritten);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	f107 0018 	add.w	r0, r7, #24
 8000b80:	2204      	movs	r2, #4
 8000b82:	491b      	ldr	r1, [pc, #108]	; (8000bf0 <StartDefaultTask+0x1d0>)
 8000b84:	f007 fe7f 	bl	8008886 <f_write>


  f_close(&file);
 8000b88:	f107 0318 	add.w	r3, r7, #24
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f008 f94c 	bl	8008e2a <f_close>

  f_open(&file,file_name,FA_READ);
 8000b92:	f507 711d 	add.w	r1, r7, #628	; 0x274
 8000b96:	f107 0318 	add.w	r3, r7, #24
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f007 fa37 	bl	8008010 <f_open>
  f_read(&file,rx_buf,4,(UINT*)&byteswritten);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	f107 0108 	add.w	r1, r7, #8
 8000baa:	f107 0018 	add.w	r0, r7, #24
 8000bae:	2204      	movs	r2, #4
 8000bb0:	f007 fcef 	bl	8008592 <f_read>

  HAL_UART_Transmit(&huart1,rx_buf,4,100);
 8000bb4:	f107 0108 	add.w	r1, r7, #8
 8000bb8:	2364      	movs	r3, #100	; 0x64
 8000bba:	2204      	movs	r2, #4
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <StartDefaultTask+0x1b0>)
 8000bbe:	f002 ffa8 	bl	8003b12 <HAL_UART_Transmit>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f008 fbe4 	bl	8009390 <osDelay>
 8000bc8:	e7fb      	b.n	8000bc2 <StartDefaultTask+0x1a2>
 8000bca:	bf00      	nop
 8000bcc:	0800b150 	.word	0x0800b150
 8000bd0:	20000474 	.word	0x20000474
 8000bd4:	40010800 	.word	0x40010800
 8000bd8:	200004bc 	.word	0x200004bc
 8000bdc:	40011000 	.word	0x40011000
 8000be0:	0800b16c 	.word	0x0800b16c
 8000be4:	0800b17c 	.word	0x0800b17c
 8000be8:	0800b190 	.word	0x0800b190
 8000bec:	0800b1a4 	.word	0x0800b1a4
 8000bf0:	0800b1b0 	.word	0x0800b1b0

08000bf4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d101      	bne.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c06:	f000 fd21 	bl	800164c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40012c00 	.word	0x40012c00

08000c18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c1c:	b672      	cpsid	i
}
 8000c1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <Error_Handler+0x8>
	...

08000c24 <sd_ss_set_active>:
extern volatile uint16_t htim2;

uint8_t spi_rx_buffer[512];

void sd_ss_set_active(uint8_t drv)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
  active_sd_ss_pin=sd_cards_ss[drv].sd_ss_pin;
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <sd_ss_set_active+0x30>)
 8000c32:	f832 2033 	ldrh.w	r2, [r2, r3, lsl #3]
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <sd_ss_set_active+0x34>)
 8000c38:	801a      	strh	r2, [r3, #0]
  active_sd_ss_port=sd_cards_ss[drv].sd_ss_port;
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <sd_ss_set_active+0x30>)
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	4413      	add	r3, r2
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <sd_ss_set_active+0x38>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000de8 	.word	0x20000de8
 8000c58:	20000de2 	.word	0x20000de2
 8000c5c:	20000de4 	.word	0x20000de4

08000c60 <sd_ss_active_pin_down>:

void sd_ss_active_pin_down()
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_RESET);
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <sd_ss_active_pin_down+0x18>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <sd_ss_active_pin_down+0x1c>)
 8000c6a:	8811      	ldrh	r1, [r2, #0]
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f001 fb60 	bl	8002334 <HAL_GPIO_WritePin>
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000de4 	.word	0x20000de4
 8000c7c:	20000de2 	.word	0x20000de2

08000c80 <sd_ss_active_pin_up>:
void sd_ss_active_pin_up()
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(active_sd_ss_port, active_sd_ss_pin, GPIO_PIN_SET);
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <sd_ss_active_pin_up+0x18>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <sd_ss_active_pin_up+0x1c>)
 8000c8a:	8811      	ldrh	r1, [r2, #0]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 fb50 	bl	8002334 <HAL_GPIO_WritePin>
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000de4 	.word	0x20000de4
 8000c9c:	20000de2 	.word	0x20000de2

08000ca0 <SD_cmd>:



//-----------------------------------------------
static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
  // ACMD<n> is the command sequense of CMD55-CMD<n>
  if (cmd & 0x80)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	da0e      	bge.n	8000cd2 <SD_cmd+0x32>
  {
    cmd &= 0x7F;
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cba:	71fb      	strb	r3, [r7, #7]
    res = SD_cmd(CMD55, 0);
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2077      	movs	r0, #119	; 0x77
 8000cc0:	f7ff ffee 	bl	8000ca0 <SD_cmd>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 8000cc8:	7bbb      	ldrb	r3, [r7, #14]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d901      	bls.n	8000cd2 <SD_cmd+0x32>
 8000cce:	7bbb      	ldrb	r3, [r7, #14]
 8000cd0:	e043      	b.n	8000d5a <SD_cmd+0xba>
  }
  // Select the card
  SS_SD_DESELECT();
 8000cd2:	f7ff ffd5 	bl	8000c80 <sd_ss_active_pin_up>
  SPI_ReceiveByte();
 8000cd6:	f000 f968 	bl	8000faa <SPI_ReceiveByte>

  SS_SD_SELECT();
 8000cda:	f7ff ffc1 	bl	8000c60 <sd_ss_active_pin_down>
  SPI_ReceiveByte();
 8000cde:	f000 f964 	bl	8000faa <SPI_ReceiveByte>
  // Send a command packet
  SPI_SendByte(cmd); // Start + Command index
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 f953 	bl	8000f90 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	0e1b      	lsrs	r3, r3, #24
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f94d 	bl	8000f90 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	0c1b      	lsrs	r3, r3, #16
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 f947 	bl	8000f90 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 f941 	bl	8000f90 <SPI_SendByte>
  SPI_SendByte((uint8_t)arg); // Argument[7..0]
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f000 f93c 	bl	8000f90 <SPI_SendByte>

  n = 0x01; // Dummy CRC + Stop
 8000d18:	2301      	movs	r3, #1
 8000d1a:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	2b40      	cmp	r3, #64	; 0x40
 8000d20:	d101      	bne.n	8000d26 <SD_cmd+0x86>
 8000d22:	2395      	movs	r3, #149	; 0x95
 8000d24:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	2b48      	cmp	r3, #72	; 0x48
 8000d2a:	d101      	bne.n	8000d30 <SD_cmd+0x90>
 8000d2c:	2387      	movs	r3, #135	; 0x87
 8000d2e:	73fb      	strb	r3, [r7, #15]
  SPI_SendByte(n);
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f92c 	bl	8000f90 <SPI_SendByte>
  // Receive a command response
  n = 10; // Wait for a valid response in timeout of 10 attempts
 8000d38:	230a      	movs	r3, #10
 8000d3a:	73fb      	strb	r3, [r7, #15]
  do {
    res = SPI_ReceiveByte();
 8000d3c:	f000 f935 	bl	8000faa <SPI_ReceiveByte>
 8000d40:	4603      	mov	r3, r0
 8000d42:	73bb      	strb	r3, [r7, #14]
  } while ((res & 0x80) && --n);
 8000d44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	da05      	bge.n	8000d58 <SD_cmd+0xb8>
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	73fb      	strb	r3, [r7, #15]
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d1f1      	bne.n	8000d3c <SD_cmd+0x9c>
  return res;
 8000d58:	7bbb      	ldrb	r3, [r7, #14]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <sd_ini>:

uint8_t sd_ini(void)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
	  uint8_t i, cmd;;
	  uint8_t ocr[4];
	  int16_t tmr;
	  uint32_t temp;
	  //LD_OFF;
	  sdinfo.type = 0;
 8000d6a:	4b57      	ldr	r3, [pc, #348]	; (8000ec8 <sd_ini+0x164>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]

	  hspi1.Init.BaudRatePrescaler = temp;
	  HAL_SPI_Init(&hspi1);
	  */

	  SS_SD_SELECT();
 8000d70:	f7ff ff76 	bl	8000c60 <sd_ss_active_pin_down>
	  if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8000d74:	2100      	movs	r1, #0
 8000d76:	2040      	movs	r0, #64	; 0x40
 8000d78:	f7ff ff92 	bl	8000ca0 <SD_cmd>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	f040 809a 	bne.w	8000eb8 <sd_ini+0x154>
	  {
		  SPI_Release();
 8000d84:	f000 f91e 	bl	8000fc4 <SPI_Release>
		  if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8000d88:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000d8c:	2048      	movs	r0, #72	; 0x48
 8000d8e:	f7ff ff87 	bl	8000ca0 <SD_cmd>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d157      	bne.n	8000e48 <sd_ini+0xe4>
		  {
			  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	e00c      	b.n	8000db8 <sd_ini+0x54>
 8000d9e:	79fc      	ldrb	r4, [r7, #7]
 8000da0:	f000 f903 	bl	8000faa <SPI_ReceiveByte>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	f104 0308 	add.w	r3, r4, #8
 8000dac:	443b      	add	r3, r7
 8000dae:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	3301      	adds	r3, #1
 8000db6:	71fb      	strb	r3, [r7, #7]
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d9ef      	bls.n	8000d9e <sd_ini+0x3a>

			    // Get trailing return value of R7 resp
			    if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 8000dbe:	78bb      	ldrb	r3, [r7, #2]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d17b      	bne.n	8000ebc <sd_ini+0x158>
 8000dc4:	78fb      	ldrb	r3, [r7, #3]
 8000dc6:	2baa      	cmp	r3, #170	; 0xaa
 8000dc8:	d178      	bne.n	8000ebc <sd_ini+0x158>
			    {
			    	for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 8000dca:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000dce:	80bb      	strh	r3, [r7, #4]
 8000dd0:	e005      	b.n	8000dde <sd_ini+0x7a>
 8000dd2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	80bb      	strh	r3, [r7, #4]
 8000dde:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d007      	beq.n	8000df6 <sd_ini+0x92>
 8000de6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000dea:	20e9      	movs	r0, #233	; 0xe9
 8000dec:	f7ff ff58 	bl	8000ca0 <SD_cmd>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1ed      	bne.n	8000dd2 <sd_ini+0x6e>
			    	    ; // Wait for leaving idle state (ACMD41 with HCS bit)
			    	if (tmr && SD_cmd(CMD58, 0) == 0)
 8000df6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d05e      	beq.n	8000ebc <sd_ini+0x158>
 8000dfe:	2100      	movs	r1, #0
 8000e00:	207a      	movs	r0, #122	; 0x7a
 8000e02:	f7ff ff4d 	bl	8000ca0 <SD_cmd>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d157      	bne.n	8000ebc <sd_ini+0x158>
			    	 { // Check CCS bit in the OCR
			    	  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	71fb      	strb	r3, [r7, #7]
 8000e10:	e00c      	b.n	8000e2c <sd_ini+0xc8>
 8000e12:	79fc      	ldrb	r4, [r7, #7]
 8000e14:	f000 f8c9 	bl	8000faa <SPI_ReceiveByte>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	f104 0308 	add.w	r3, r4, #8
 8000e20:	443b      	add	r3, r7
 8000e22:	f803 2c08 	strb.w	r2, [r3, #-8]
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	2b03      	cmp	r3, #3
 8000e30:	d9ef      	bls.n	8000e12 <sd_ini+0xae>
			     	   sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8000e32:	783b      	ldrb	r3, [r7, #0]
 8000e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <sd_ini+0xdc>
 8000e3c:	220c      	movs	r2, #12
 8000e3e:	e000      	b.n	8000e42 <sd_ini+0xde>
 8000e40:	2204      	movs	r2, #4
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <sd_ini+0x164>)
 8000e44:	701a      	strb	r2, [r3, #0]
 8000e46:	e039      	b.n	8000ebc <sd_ini+0x158>
			    	}
			    }
		  }
		  else //SDv1 or MMCv3
		  {
			  if (SD_cmd(ACMD41, 0) <= 1)
 8000e48:	2100      	movs	r1, #0
 8000e4a:	20e9      	movs	r0, #233	; 0xe9
 8000e4c:	f7ff ff28 	bl	8000ca0 <SD_cmd>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d805      	bhi.n	8000e62 <sd_ini+0xfe>
			    {
			      sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <sd_ini+0x164>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	701a      	strb	r2, [r3, #0]
 8000e5c:	23e9      	movs	r3, #233	; 0xe9
 8000e5e:	71bb      	strb	r3, [r7, #6]
 8000e60:	e004      	b.n	8000e6c <sd_ini+0x108>
			    }
			    else
			    {
			      sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <sd_ini+0x164>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	701a      	strb	r2, [r3, #0]
 8000e68:	2341      	movs	r3, #65	; 0x41
 8000e6a:	71bb      	strb	r3, [r7, #6]
			    }
			    for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 8000e6c:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8000e70:	80bb      	strh	r3, [r7, #4]
 8000e72:	e005      	b.n	8000e80 <sd_ini+0x11c>
 8000e74:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	80bb      	strh	r3, [r7, #4]
 8000e80:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d007      	beq.n	8000e98 <sd_ini+0x134>
 8000e88:	79bb      	ldrb	r3, [r7, #6]
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff07 	bl	8000ca0 <SD_cmd>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1ed      	bne.n	8000e74 <sd_ini+0x110>
			    if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8000e98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d007      	beq.n	8000eb0 <sd_ini+0x14c>
 8000ea0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea4:	2050      	movs	r0, #80	; 0x50
 8000ea6:	f7ff fefb 	bl	8000ca0 <SD_cmd>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d005      	beq.n	8000ebc <sd_ini+0x158>
			    sdinfo.type = 0;
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <sd_ini+0x164>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	e001      	b.n	8000ebc <sd_ini+0x158>

	  }
	  else
	  {

	    return 1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e000      	b.n	8000ebe <sd_ini+0x15a>
	  }




  return 0;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd90      	pop	{r4, r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000de0 	.word	0x20000de0

08000ecc <Error>:

static void Error (void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  //LD_ON;
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <SPI_wait_ready>:

uint8_t SPI_wait_ready(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	80fb      	strh	r3, [r7, #6]
  do {
    res=SPI_ReceiveByte();
 8000ee2:	f000 f862 	bl	8000faa <SPI_ReceiveByte>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	717b      	strb	r3, [r7, #5]
    cnt++;
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	3301      	adds	r3, #1
 8000eee:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 8000ef0:	797b      	ldrb	r3, [r7, #5]
 8000ef2:	2bff      	cmp	r3, #255	; 0xff
 8000ef4:	d004      	beq.n	8000f00 <SPI_wait_ready+0x28>
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d1f0      	bne.n	8000ee2 <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 8000f00:	88fb      	ldrh	r3, [r7, #6]
 8000f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d101      	bne.n	8000f0e <SPI_wait_ready+0x36>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <SPI_wait_ready+0x38>
  return res;
 8000f0e:	797b      	ldrb	r3, [r7, #5]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <SPIx_Write_Multi>:
{
	if(HAL_SPI_GetState(&hspi1)==HAL_SPI_STATE_READY) return F_OK;
	else return F_ERR;
}
F_RES SPIx_Write_Multi(uint8_t* tx_buf,uint32_t size)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af02      	add	r7, sp, #8
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
	if(HAL_SPI_TransmitReceive(&hspi1, tx_buf, spi_rx_buffer, size,HAL_MAX_DELAY)==HAL_OK) return F_OK;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2a:	9200      	str	r2, [sp, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <SPIx_Write_Multi+0x34>)
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	4807      	ldr	r0, [pc, #28]	; (8000f50 <SPIx_Write_Multi+0x38>)
 8000f32:	f001 fff9 	bl	8002f28 <HAL_SPI_TransmitReceive>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d101      	bne.n	8000f40 <SPIx_Write_Multi+0x28>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	e000      	b.n	8000f42 <SPIx_Write_Multi+0x2a>
		else return F_ERR;
 8000f40:	2301      	movs	r3, #1
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000e08 	.word	0x20000e08
 8000f50:	20000394 	.word	0x20000394

08000f54 <SPIx_WriteRead>:
	if(HAL_SPI_Transmit_DMA(&hspi1, tx_buf, size)==HAL_OK) return F_OK;
	else return F_ERR;
}

uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8000f62:	f107 020f 	add.w	r2, r7, #15
 8000f66:	1df9      	adds	r1, r7, #7
 8000f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	4806      	ldr	r0, [pc, #24]	; (8000f8c <SPIx_WriteRead+0x38>)
 8000f72:	f001 ffd9 	bl	8002f28 <HAL_SPI_TransmitReceive>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SPIx_WriteRead+0x2c>
  {
    Error();
 8000f7c:	f7ff ffa6 	bl	8000ecc <Error>
  }
  return receivedbyte;
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000394 	.word	0x20000394

08000f90 <SPI_SendByte>:

void SPI_SendByte(uint8_t bt)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ffd9 	bl	8000f54 <SPIx_WriteRead>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <SPI_ReceiveByte>:

uint8_t SPI_ReceiveByte(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 8000fb0:	20ff      	movs	r0, #255	; 0xff
 8000fb2:	f7ff ffcf 	bl	8000f54 <SPIx_WriteRead>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  return bt;
 8000fba:	79fb      	ldrb	r3, [r7, #7]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <SPI_Release>:
void SPI_Release(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8000fc8:	20ff      	movs	r0, #255	; 0xff
 8000fca:	f7ff ffc3 	bl	8000f54 <SPIx_WriteRead>
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <SD_Read_Block>:

uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)
{
 8000fd2:	b590      	push	{r4, r7, lr}
 8000fd4:	b085      	sub	sp, #20
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;

  result=SD_cmd (CMD17, lba);
 8000fdc:	6839      	ldr	r1, [r7, #0]
 8000fde:	2051      	movs	r0, #81	; 0x51
 8000fe0:	f7ff fe5e 	bl	8000ca0 <SD_cmd>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	737b      	strb	r3, [r7, #13]
  if (result!=0x00){
 8000fe8:	7b7b      	ldrb	r3, [r7, #13]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SD_Read_Block+0x20>
	  return 5;
 8000fee:	2305      	movs	r3, #5
 8000ff0:	e02f      	b.n	8001052 <SD_Read_Block+0x80>
  }

  SPI_Release();
 8000ff2:	f7ff ffe7 	bl	8000fc4 <SPI_Release>
   cnt=0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	81fb      	strh	r3, [r7, #14]
   do{
     result=SPI_ReceiveByte();
 8000ffa:	f7ff ffd6 	bl	8000faa <SPI_ReceiveByte>
 8000ffe:	4603      	mov	r3, r0
 8001000:	737b      	strb	r3, [r7, #13]
     cnt++;
 8001002:	89fb      	ldrh	r3, [r7, #14]
 8001004:	3301      	adds	r3, #1
 8001006:	81fb      	strh	r3, [r7, #14]
   } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 8001008:	7b7b      	ldrb	r3, [r7, #13]
 800100a:	2bfe      	cmp	r3, #254	; 0xfe
 800100c:	d004      	beq.n	8001018 <SD_Read_Block+0x46>
 800100e:	89fb      	ldrh	r3, [r7, #14]
 8001010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001014:	4293      	cmp	r3, r2
 8001016:	d1f0      	bne.n	8000ffa <SD_Read_Block+0x28>
   if (cnt>=0xFFFF) {
 8001018:	89fb      	ldrh	r3, [r7, #14]
 800101a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800101e:	4293      	cmp	r3, r2
 8001020:	d101      	bne.n	8001026 <SD_Read_Block+0x54>
	   return 5;
 8001022:	2305      	movs	r3, #5
 8001024:	e015      	b.n	8001052 <SD_Read_Block+0x80>
   }
   for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte();
 8001026:	2300      	movs	r3, #0
 8001028:	81fb      	strh	r3, [r7, #14]
 800102a:	e009      	b.n	8001040 <SD_Read_Block+0x6e>
 800102c:	89fb      	ldrh	r3, [r7, #14]
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	18d4      	adds	r4, r2, r3
 8001032:	f7ff ffba 	bl	8000faa <SPI_ReceiveByte>
 8001036:	4603      	mov	r3, r0
 8001038:	7023      	strb	r3, [r4, #0]
 800103a:	89fb      	ldrh	r3, [r7, #14]
 800103c:	3301      	adds	r3, #1
 800103e:	81fb      	strh	r3, [r7, #14]
 8001040:	89fb      	ldrh	r3, [r7, #14]
 8001042:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001046:	d3f1      	bcc.n	800102c <SD_Read_Block+0x5a>
   SPI_Release();
 8001048:	f7ff ffbc 	bl	8000fc4 <SPI_Release>
   SPI_Release();
 800104c:	f7ff ffba 	bl	8000fc4 <SPI_Release>



  return 0;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}
	...

0800105c <SD_Write_Blocks>:

uint8_t SD_Write_Blocks (uint8_t *buff, uint32_t lba,uint16_t count)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	60f8      	str	r0, [r7, #12]
 8001064:	60b9      	str	r1, [r7, #8]
 8001066:	4613      	mov	r3, r2
 8001068:	80fb      	strh	r3, [r7, #6]
  tick1=xTaskGetTickCount();
 800106a:	f008 fd3d 	bl	8009ae8 <xTaskGetTickCount>
 800106e:	4603      	mov	r3, r0
 8001070:	4a39      	ldr	r2, [pc, #228]	; (8001158 <SD_Write_Blocks+0xfc>)
 8001072:	6013      	str	r3, [r2, #0]
  uint8_t result;
  uint16_t cnt;


  result=SD_cmd(CMD25,lba);//CMD25
 8001074:	68b9      	ldr	r1, [r7, #8]
 8001076:	2059      	movs	r0, #89	; 0x59
 8001078:	f7ff fe12 	bl	8000ca0 <SD_cmd>
 800107c:	4603      	mov	r3, r0
 800107e:	75fb      	strb	r3, [r7, #23]
  if (result!=0x00){
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SD_Write_Blocks+0x2e>
	  return 6;
 8001086:	2306      	movs	r3, #6
 8001088:	e061      	b.n	800114e <SD_Write_Blocks+0xf2>
  }
  SPI_Release();  //1byte gap
 800108a:	f7ff ff9b 	bl	8000fc4 <SPI_Release>

  for(int i=0;i<count;i++){
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
 8001092:	e035      	b.n	8001100 <SD_Write_Blocks+0xa4>
   SPI_SendByte (0xFC);//token CMD25
 8001094:	20fc      	movs	r0, #252	; 0xfc
 8001096:	f7ff ff7b 	bl	8000f90 <SPI_SendByte>

   SPIx_Write_Multi(buff,512);
 800109a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800109e:	68f8      	ldr	r0, [r7, #12]
 80010a0:	f7ff ff3a 	bl	8000f18 <SPIx_Write_Multi>
   buff+=512;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80010aa:	60fb      	str	r3, [r7, #12]
   SPI_Release();   //CRC
 80010ac:	f7ff ff8a 	bl	8000fc4 <SPI_Release>
   SPI_Release();   //CRC
 80010b0:	f7ff ff88 	bl	8000fc4 <SPI_Release>


   result=SPI_ReceiveByte();
 80010b4:	f7ff ff79 	bl	8000faa <SPI_ReceiveByte>
 80010b8:	4603      	mov	r3, r0
 80010ba:	75fb      	strb	r3, [r7, #23]
   if ((result&0x1F)!=0x05) {
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	f003 031f 	and.w	r3, r3, #31
 80010c2:	2b05      	cmp	r3, #5
 80010c4:	d001      	beq.n	80010ca <SD_Write_Blocks+0x6e>
	  return 6;
 80010c6:	2306      	movs	r3, #6
 80010c8:	e041      	b.n	800114e <SD_Write_Blocks+0xf2>
   }
   cnt=0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	83fb      	strh	r3, [r7, #30]
   do {
    result=SPI_ReceiveByte();
 80010ce:	f7ff ff6c 	bl	8000faa <SPI_ReceiveByte>
 80010d2:	4603      	mov	r3, r0
 80010d4:	75fb      	strb	r3, [r7, #23]
    cnt++;
 80010d6:	8bfb      	ldrh	r3, [r7, #30]
 80010d8:	3301      	adds	r3, #1
 80010da:	83fb      	strh	r3, [r7, #30]
   } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
 80010de:	2bff      	cmp	r3, #255	; 0xff
 80010e0:	d004      	beq.n	80010ec <SD_Write_Blocks+0x90>
 80010e2:	8bfb      	ldrh	r3, [r7, #30]
 80010e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d1f0      	bne.n	80010ce <SD_Write_Blocks+0x72>
   if (cnt>=0xFFFF) {
 80010ec:	8bfb      	ldrh	r3, [r7, #30]
 80010ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <SD_Write_Blocks+0x9e>
	  return 6;
 80010f6:	2306      	movs	r3, #6
 80010f8:	e029      	b.n	800114e <SD_Write_Blocks+0xf2>
  for(int i=0;i<count;i++){
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	3301      	adds	r3, #1
 80010fe:	61bb      	str	r3, [r7, #24]
 8001100:	88fb      	ldrh	r3, [r7, #6]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	429a      	cmp	r2, r3
 8001106:	dbc5      	blt.n	8001094 <SD_Write_Blocks+0x38>
   }
  }

  SPI_SendByte (0xFD); //stop transaction token for CMD25
 8001108:	20fd      	movs	r0, #253	; 0xfd
 800110a:	f7ff ff41 	bl	8000f90 <SPI_SendByte>
  SPI_Release();       //1byte gap
 800110e:	f7ff ff59 	bl	8000fc4 <SPI_Release>
  cnt=0;
 8001112:	2300      	movs	r3, #0
 8001114:	83fb      	strh	r3, [r7, #30]
  do {
	result=SPI_ReceiveByte();
 8001116:	f7ff ff48 	bl	8000faa <SPI_ReceiveByte>
 800111a:	4603      	mov	r3, r0
 800111c:	75fb      	strb	r3, [r7, #23]
	cnt++;
 800111e:	8bfb      	ldrh	r3, [r7, #30]
 8001120:	3301      	adds	r3, #1
 8001122:	83fb      	strh	r3, [r7, #30]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	2bff      	cmp	r3, #255	; 0xff
 8001128:	d004      	beq.n	8001134 <SD_Write_Blocks+0xd8>
 800112a:	8bfb      	ldrh	r3, [r7, #30]
 800112c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001130:	4293      	cmp	r3, r2
 8001132:	d1f0      	bne.n	8001116 <SD_Write_Blocks+0xba>
  if (cnt>=0xFFFF) return 6;
 8001134:	8bfb      	ldrh	r3, [r7, #30]
 8001136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800113a:	4293      	cmp	r3, r2
 800113c:	d101      	bne.n	8001142 <SD_Write_Blocks+0xe6>
 800113e:	2306      	movs	r3, #6
 8001140:	e005      	b.n	800114e <SD_Write_Blocks+0xf2>
  tick2=xTaskGetTickCount();
 8001142:	f008 fcd1 	bl	8009ae8 <xTaskGetTickCount>
 8001146:	4603      	mov	r3, r0
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <SD_Write_Blocks+0x100>)
 800114a:	6013      	str	r3, [r2, #0]
  return 0;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3720      	adds	r7, #32
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000dd8 	.word	0x20000dd8
 800115c:	20000ddc 	.word	0x20000ddc

08001160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <HAL_MspInit+0x68>)
 8001168:	699b      	ldr	r3, [r3, #24]
 800116a:	4a17      	ldr	r2, [pc, #92]	; (80011c8 <HAL_MspInit+0x68>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6193      	str	r3, [r2, #24]
 8001172:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <HAL_MspInit+0x68>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_MspInit+0x68>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	4a11      	ldr	r2, [pc, #68]	; (80011c8 <HAL_MspInit+0x68>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001188:	61d3      	str	r3, [r2, #28]
 800118a:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <HAL_MspInit+0x68>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	210f      	movs	r1, #15
 800119a:	f06f 0001 	mvn.w	r0, #1
 800119e:	f000 fb26 	bl	80017ee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_MspInit+0x6c>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_MspInit+0x6c>)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010000 	.word	0x40010000

080011d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08a      	sub	sp, #40	; 0x28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a4d      	ldr	r2, [pc, #308]	; (8001320 <HAL_SPI_MspInit+0x150>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	f040 8092 	bne.w	8001316 <HAL_SPI_MspInit+0x146>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011f2:	4b4c      	ldr	r3, [pc, #304]	; (8001324 <HAL_SPI_MspInit+0x154>)
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	4a4b      	ldr	r2, [pc, #300]	; (8001324 <HAL_SPI_MspInit+0x154>)
 80011f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011fc:	6193      	str	r3, [r2, #24]
 80011fe:	4b49      	ldr	r3, [pc, #292]	; (8001324 <HAL_SPI_MspInit+0x154>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800120a:	4b46      	ldr	r3, [pc, #280]	; (8001324 <HAL_SPI_MspInit+0x154>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	4a45      	ldr	r2, [pc, #276]	; (8001324 <HAL_SPI_MspInit+0x154>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	6193      	str	r3, [r2, #24]
 8001216:	4b43      	ldr	r3, [pc, #268]	; (8001324 <HAL_SPI_MspInit+0x154>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8001222:	2328      	movs	r3, #40	; 0x28
 8001224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800122a:	2303      	movs	r3, #3
 800122c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	483c      	ldr	r0, [pc, #240]	; (8001328 <HAL_SPI_MspInit+0x158>)
 8001236:	f000 fef9 	bl	800202c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800123a:	2310      	movs	r3, #16
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4836      	ldr	r0, [pc, #216]	; (8001328 <HAL_SPI_MspInit+0x158>)
 800124e:	f000 feed 	bl	800202c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001252:	4b36      	ldr	r3, [pc, #216]	; (800132c <HAL_SPI_MspInit+0x15c>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
 8001258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001262:	f043 0301 	orr.w	r3, r3, #1
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
 8001268:	4a30      	ldr	r2, [pc, #192]	; (800132c <HAL_SPI_MspInit+0x15c>)
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	6053      	str	r3, [r2, #4]

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800126e:	4b30      	ldr	r3, [pc, #192]	; (8001330 <HAL_SPI_MspInit+0x160>)
 8001270:	4a30      	ldr	r2, [pc, #192]	; (8001334 <HAL_SPI_MspInit+0x164>)
 8001272:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001274:	4b2e      	ldr	r3, [pc, #184]	; (8001330 <HAL_SPI_MspInit+0x160>)
 8001276:	2200      	movs	r2, #0
 8001278:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800127a:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <HAL_SPI_MspInit+0x160>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001280:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <HAL_SPI_MspInit+0x160>)
 8001282:	2280      	movs	r2, #128	; 0x80
 8001284:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001286:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <HAL_SPI_MspInit+0x160>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800128c:	4b28      	ldr	r3, [pc, #160]	; (8001330 <HAL_SPI_MspInit+0x160>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001292:	4b27      	ldr	r3, [pc, #156]	; (8001330 <HAL_SPI_MspInit+0x160>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001298:	4b25      	ldr	r3, [pc, #148]	; (8001330 <HAL_SPI_MspInit+0x160>)
 800129a:	2200      	movs	r2, #0
 800129c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800129e:	4824      	ldr	r0, [pc, #144]	; (8001330 <HAL_SPI_MspInit+0x160>)
 80012a0:	f000 fad0 	bl	8001844 <HAL_DMA_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 80012aa:	f7ff fcb5 	bl	8000c18 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a1f      	ldr	r2, [pc, #124]	; (8001330 <HAL_SPI_MspInit+0x160>)
 80012b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80012b4:	4a1e      	ldr	r2, [pc, #120]	; (8001330 <HAL_SPI_MspInit+0x160>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80012ba:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <HAL_SPI_MspInit+0x168>)
 80012bc:	4a1f      	ldr	r2, [pc, #124]	; (800133c <HAL_SPI_MspInit+0x16c>)
 80012be:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <HAL_SPI_MspInit+0x168>)
 80012c2:	2210      	movs	r2, #16
 80012c4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <HAL_SPI_MspInit+0x168>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <HAL_SPI_MspInit+0x168>)
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012d2:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_SPI_MspInit+0x168>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <HAL_SPI_MspInit+0x168>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_SPI_MspInit+0x168>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_SPI_MspInit+0x168>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80012ea:	4813      	ldr	r0, [pc, #76]	; (8001338 <HAL_SPI_MspInit+0x168>)
 80012ec:	f000 faaa 	bl	8001844 <HAL_DMA_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 80012f6:	f7ff fc8f 	bl	8000c18 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a0e      	ldr	r2, [pc, #56]	; (8001338 <HAL_SPI_MspInit+0x168>)
 80012fe:	649a      	str	r2, [r3, #72]	; 0x48
 8001300:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <HAL_SPI_MspInit+0x168>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2105      	movs	r1, #5
 800130a:	2023      	movs	r0, #35	; 0x23
 800130c:	f000 fa6f 	bl	80017ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001310:	2023      	movs	r0, #35	; 0x23
 8001312:	f000 fa88 	bl	8001826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001316:	bf00      	nop
 8001318:	3728      	adds	r7, #40	; 0x28
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40013000 	.word	0x40013000
 8001324:	40021000 	.word	0x40021000
 8001328:	40010c00 	.word	0x40010c00
 800132c:	40010000 	.word	0x40010000
 8001330:	200003ec 	.word	0x200003ec
 8001334:	4002001c 	.word	0x4002001c
 8001338:	20000430 	.word	0x20000430
 800133c:	40020030 	.word	0x40020030

08001340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0310 	add.w	r3, r7, #16
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a20      	ldr	r2, [pc, #128]	; (80013dc <HAL_UART_MspInit+0x9c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d139      	bne.n	80013d4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001360:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <HAL_UART_MspInit+0xa0>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <HAL_UART_MspInit+0xa0>)
 8001366:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_UART_MspInit+0xa0>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_UART_MspInit+0xa0>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <HAL_UART_MspInit+0xa0>)
 800137e:	f043 0304 	orr.w	r3, r3, #4
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b16      	ldr	r3, [pc, #88]	; (80013e0 <HAL_UART_MspInit+0xa0>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001394:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	4619      	mov	r1, r3
 80013a4:	480f      	ldr	r0, [pc, #60]	; (80013e4 <HAL_UART_MspInit+0xa4>)
 80013a6:	f000 fe41 	bl	800202c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4619      	mov	r1, r3
 80013be:	4809      	ldr	r0, [pc, #36]	; (80013e4 <HAL_UART_MspInit+0xa4>)
 80013c0:	f000 fe34 	bl	800202c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2105      	movs	r1, #5
 80013c8:	2025      	movs	r0, #37	; 0x25
 80013ca:	f000 fa10 	bl	80017ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013ce:	2025      	movs	r0, #37	; 0x25
 80013d0:	f000 fa29 	bl	8001826 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013d4:	bf00      	nop
 80013d6:	3720      	adds	r7, #32
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40013800 	.word	0x40013800
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010800 	.word	0x40010800

080013e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08c      	sub	sp, #48	; 0x30
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013fe:	4b2e      	ldr	r3, [pc, #184]	; (80014b8 <HAL_InitTick+0xd0>)
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	4a2d      	ldr	r2, [pc, #180]	; (80014b8 <HAL_InitTick+0xd0>)
 8001404:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001408:	6193      	str	r3, [r2, #24]
 800140a:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <HAL_InitTick+0xd0>)
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001416:	f107 020c 	add.w	r2, r7, #12
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	4611      	mov	r1, r2
 8001420:	4618      	mov	r0, r3
 8001422:	f001 fcaf 	bl	8002d84 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001426:	f001 fc99 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 800142a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800142c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142e:	4a23      	ldr	r2, [pc, #140]	; (80014bc <HAL_InitTick+0xd4>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	0c9b      	lsrs	r3, r3, #18
 8001436:	3b01      	subs	r3, #1
 8001438:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800143a:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <HAL_InitTick+0xd8>)
 800143c:	4a21      	ldr	r2, [pc, #132]	; (80014c4 <HAL_InitTick+0xdc>)
 800143e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001440:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <HAL_InitTick+0xd8>)
 8001442:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001446:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001448:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <HAL_InitTick+0xd8>)
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <HAL_InitTick+0xd8>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <HAL_InitTick+0xd8>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <HAL_InitTick+0xd8>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001460:	4817      	ldr	r0, [pc, #92]	; (80014c0 <HAL_InitTick+0xd8>)
 8001462:	f002 f8ad 	bl	80035c0 <HAL_TIM_Base_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800146c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001470:	2b00      	cmp	r3, #0
 8001472:	d11b      	bne.n	80014ac <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001474:	4812      	ldr	r0, [pc, #72]	; (80014c0 <HAL_InitTick+0xd8>)
 8001476:	f002 f8fb 	bl	8003670 <HAL_TIM_Base_Start_IT>
 800147a:	4603      	mov	r3, r0
 800147c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001480:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001484:	2b00      	cmp	r3, #0
 8001486:	d111      	bne.n	80014ac <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001488:	2019      	movs	r0, #25
 800148a:	f000 f9cc 	bl	8001826 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d808      	bhi.n	80014a6 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001494:	2200      	movs	r2, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	2019      	movs	r0, #25
 800149a:	f000 f9a8 	bl	80017ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <HAL_InitTick+0xe0>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	e002      	b.n	80014ac <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80014ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3730      	adds	r7, #48	; 0x30
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40021000 	.word	0x40021000
 80014bc:	431bde83 	.word	0x431bde83
 80014c0:	20001008 	.word	0x20001008
 80014c4:	40012c00 	.word	0x40012c00
 80014c8:	20000004 	.word	0x20000004

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <NMI_Handler+0x4>

080014d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <HardFault_Handler+0x4>

080014d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <MemManage_Handler+0x4>

080014de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
	...

080014f8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <DMA1_Channel2_IRQHandler+0x10>)
 80014fe:	f000 fb59 	bl	8001bb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200003ec 	.word	0x200003ec

0800150c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <DMA1_Channel3_IRQHandler+0x10>)
 8001512:	f000 fb4f 	bl	8001bb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000430 	.word	0x20000430

08001520 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <TIM1_UP_IRQHandler+0x10>)
 8001526:	f002 f8fd 	bl	8003724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20001008 	.word	0x20001008

08001534 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <SPI1_IRQHandler+0x10>)
 800153a:	f001 fe97 	bl	800326c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000394 	.word	0x20000394

08001548 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <USART1_IRQHandler+0x10>)
 800154e:	f002 fb73 	bl	8003c38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000474 	.word	0x20000474

0800155c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001564:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <_sbrk+0x5c>)
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <_sbrk+0x60>)
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <_sbrk+0x64>)
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <_sbrk+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	429a      	cmp	r2, r3
 800158a:	d207      	bcs.n	800159c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800158c:	f009 f8a8 	bl	800a6e0 <__errno>
 8001590:	4603      	mov	r3, r0
 8001592:	220c      	movs	r2, #12
 8001594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	e009      	b.n	80015b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <_sbrk+0x64>)
 80015ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20010000 	.word	0x20010000
 80015bc:	00000400 	.word	0x00000400
 80015c0:	20001050 	.word	0x20001050
 80015c4:	20004558 	.word	0x20004558

080015c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015d6:	490d      	ldr	r1, [pc, #52]	; (800160c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015d8:	4a0d      	ldr	r2, [pc, #52]	; (8001610 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015dc:	e002      	b.n	80015e4 <LoopCopyDataInit>

080015de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015e2:	3304      	adds	r3, #4

080015e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015e8:	d3f9      	bcc.n	80015de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015ec:	4c0a      	ldr	r4, [pc, #40]	; (8001618 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f0:	e001      	b.n	80015f6 <LoopFillZerobss>

080015f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015f4:	3204      	adds	r2, #4

080015f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015f8:	d3fb      	bcc.n	80015f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015fa:	f7ff ffe5 	bl	80015c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fe:	f009 f875 	bl	800a6ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001602:	f7ff f8ab 	bl	800075c <main>
  bx lr
 8001606:	4770      	bx	lr
  ldr r0, =_sdata
 8001608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800160c:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8001610:	0800b730 	.word	0x0800b730
  ldr r2, =_sbss
 8001614:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8001618:	20004554 	.word	0x20004554

0800161c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC1_2_IRQHandler>
	...

08001620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <HAL_Init+0x28>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a07      	ldr	r2, [pc, #28]	; (8001648 <HAL_Init+0x28>)
 800162a:	f043 0310 	orr.w	r3, r3, #16
 800162e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001630:	2003      	movs	r0, #3
 8001632:	f000 f8d1 	bl	80017d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001636:	200f      	movs	r0, #15
 8001638:	f7ff fed6 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800163c:	f7ff fd90 	bl	8001160 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40022000 	.word	0x40022000

0800164c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_IncTick+0x1c>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b05      	ldr	r3, [pc, #20]	; (800166c <HAL_IncTick+0x20>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a03      	ldr	r2, [pc, #12]	; (800166c <HAL_IncTick+0x20>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	20000008 	.word	0x20000008
 800166c:	20001054 	.word	0x20001054

08001670 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b02      	ldr	r3, [pc, #8]	; (8001680 <HAL_GetTick+0x10>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr
 8001680:	20001054 	.word	0x20001054

08001684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001694:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169a:	68ba      	ldr	r2, [r7, #8]
 800169c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a0:	4013      	ands	r3, r2
 80016a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b6:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	60d3      	str	r3, [r2, #12]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <__NVIC_GetPriorityGrouping+0x18>)
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	0a1b      	lsrs	r3, r3, #8
 80016d6:	f003 0307 	and.w	r3, r3, #7
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	db0b      	blt.n	8001712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 021f 	and.w	r2, r3, #31
 8001700:	4906      	ldr	r1, [pc, #24]	; (800171c <__NVIC_EnableIRQ+0x34>)
 8001702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001706:	095b      	lsrs	r3, r3, #5
 8001708:	2001      	movs	r0, #1
 800170a:	fa00 f202 	lsl.w	r2, r0, r2
 800170e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	; (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	; 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f7ff ff4f 	bl	8001684 <__NVIC_SetPriorityGrouping>
}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b086      	sub	sp, #24
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	4603      	mov	r3, r0
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001800:	f7ff ff64 	bl	80016cc <__NVIC_GetPriorityGrouping>
 8001804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	6978      	ldr	r0, [r7, #20]
 800180c:	f7ff ffb2 	bl	8001774 <NVIC_EncodePriority>
 8001810:	4602      	mov	r2, r0
 8001812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001816:	4611      	mov	r1, r2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff81 	bl	8001720 <__NVIC_SetPriority>
}
 800181e:	bf00      	nop
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff57 	bl	80016e8 <__NVIC_EnableIRQ>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e059      	b.n	800190e <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	461a      	mov	r2, r3
 8001860:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <HAL_DMA_Init+0xd4>)
 8001862:	429a      	cmp	r2, r3
 8001864:	d80f      	bhi.n	8001886 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	4b2b      	ldr	r3, [pc, #172]	; (800191c <HAL_DMA_Init+0xd8>)
 800186e:	4413      	add	r3, r2
 8001870:	4a2b      	ldr	r2, [pc, #172]	; (8001920 <HAL_DMA_Init+0xdc>)
 8001872:	fba2 2303 	umull	r2, r3, r2, r3
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	009a      	lsls	r2, r3, #2
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a28      	ldr	r2, [pc, #160]	; (8001924 <HAL_DMA_Init+0xe0>)
 8001882:	63da      	str	r2, [r3, #60]	; 0x3c
 8001884:	e00e      	b.n	80018a4 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	461a      	mov	r2, r3
 800188c:	4b26      	ldr	r3, [pc, #152]	; (8001928 <HAL_DMA_Init+0xe4>)
 800188e:	4413      	add	r3, r2
 8001890:	4a23      	ldr	r2, [pc, #140]	; (8001920 <HAL_DMA_Init+0xdc>)
 8001892:	fba2 2303 	umull	r2, r3, r2, r3
 8001896:	091b      	lsrs	r3, r3, #4
 8001898:	009a      	lsls	r2, r3, #2
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a22      	ldr	r2, [pc, #136]	; (800192c <HAL_DMA_Init+0xe8>)
 80018a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80018ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80018be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80018c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	40020407 	.word	0x40020407
 800191c:	bffdfff8 	.word	0xbffdfff8
 8001920:	cccccccd 	.word	0xcccccccd
 8001924:	40020000 	.word	0x40020000
 8001928:	bffdfbf8 	.word	0xbffdfbf8
 800192c:	40020400 	.word	0x40020400

08001930 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001938:	2300      	movs	r3, #0
 800193a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001942:	2b02      	cmp	r3, #2
 8001944:	d008      	beq.n	8001958 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2204      	movs	r2, #4
 800194a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e020      	b.n	800199a <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 020e 	bic.w	r2, r2, #14
 8001966:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001980:	2101      	movs	r1, #1
 8001982:	fa01 f202 	lsl.w	r2, r1, r2
 8001986:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001998:	7bfb      	ldrb	r3, [r7, #15]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d005      	beq.n	80019c6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2204      	movs	r2, #4
 80019be:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
 80019c4:	e0d6      	b.n	8001b74 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 020e 	bic.w	r2, r2, #14
 80019d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0201 	bic.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	4b64      	ldr	r3, [pc, #400]	; (8001b80 <HAL_DMA_Abort_IT+0x1dc>)
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d958      	bls.n	8001aa4 <HAL_DMA_Abort_IT+0x100>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a63      	ldr	r2, [pc, #396]	; (8001b84 <HAL_DMA_Abort_IT+0x1e0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d04f      	beq.n	8001a9c <HAL_DMA_Abort_IT+0xf8>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a61      	ldr	r2, [pc, #388]	; (8001b88 <HAL_DMA_Abort_IT+0x1e4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d048      	beq.n	8001a98 <HAL_DMA_Abort_IT+0xf4>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a60      	ldr	r2, [pc, #384]	; (8001b8c <HAL_DMA_Abort_IT+0x1e8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d040      	beq.n	8001a92 <HAL_DMA_Abort_IT+0xee>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a5e      	ldr	r2, [pc, #376]	; (8001b90 <HAL_DMA_Abort_IT+0x1ec>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d038      	beq.n	8001a8c <HAL_DMA_Abort_IT+0xe8>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a5d      	ldr	r2, [pc, #372]	; (8001b94 <HAL_DMA_Abort_IT+0x1f0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d030      	beq.n	8001a86 <HAL_DMA_Abort_IT+0xe2>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a5b      	ldr	r2, [pc, #364]	; (8001b98 <HAL_DMA_Abort_IT+0x1f4>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d028      	beq.n	8001a80 <HAL_DMA_Abort_IT+0xdc>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a53      	ldr	r2, [pc, #332]	; (8001b80 <HAL_DMA_Abort_IT+0x1dc>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d020      	beq.n	8001a7a <HAL_DMA_Abort_IT+0xd6>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a57      	ldr	r2, [pc, #348]	; (8001b9c <HAL_DMA_Abort_IT+0x1f8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d019      	beq.n	8001a76 <HAL_DMA_Abort_IT+0xd2>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a56      	ldr	r2, [pc, #344]	; (8001ba0 <HAL_DMA_Abort_IT+0x1fc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d012      	beq.n	8001a72 <HAL_DMA_Abort_IT+0xce>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a54      	ldr	r2, [pc, #336]	; (8001ba4 <HAL_DMA_Abort_IT+0x200>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00a      	beq.n	8001a6c <HAL_DMA_Abort_IT+0xc8>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a53      	ldr	r2, [pc, #332]	; (8001ba8 <HAL_DMA_Abort_IT+0x204>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d102      	bne.n	8001a66 <HAL_DMA_Abort_IT+0xc2>
 8001a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a64:	e01b      	b.n	8001a9e <HAL_DMA_Abort_IT+0xfa>
 8001a66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a6a:	e018      	b.n	8001a9e <HAL_DMA_Abort_IT+0xfa>
 8001a6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a70:	e015      	b.n	8001a9e <HAL_DMA_Abort_IT+0xfa>
 8001a72:	2310      	movs	r3, #16
 8001a74:	e013      	b.n	8001a9e <HAL_DMA_Abort_IT+0xfa>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e011      	b.n	8001a9e <HAL_DMA_Abort_IT+0xfa>
 8001a7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a7e:	e00e      	b.n	8001a9e <HAL_DMA_Abort_IT+0xfa>
 8001a80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a84:	e00b      	b.n	8001a9e <HAL_DMA_Abort_IT+0xfa>
 8001a86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a8a:	e008      	b.n	8001a9e <HAL_DMA_Abort_IT+0xfa>
 8001a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a90:	e005      	b.n	8001a9e <HAL_DMA_Abort_IT+0xfa>
 8001a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a96:	e002      	b.n	8001a9e <HAL_DMA_Abort_IT+0xfa>
 8001a98:	2310      	movs	r3, #16
 8001a9a:	e000      	b.n	8001a9e <HAL_DMA_Abort_IT+0xfa>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	4a43      	ldr	r2, [pc, #268]	; (8001bac <HAL_DMA_Abort_IT+0x208>)
 8001aa0:	6053      	str	r3, [r2, #4]
 8001aa2:	e057      	b.n	8001b54 <HAL_DMA_Abort_IT+0x1b0>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a36      	ldr	r2, [pc, #216]	; (8001b84 <HAL_DMA_Abort_IT+0x1e0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d04f      	beq.n	8001b4e <HAL_DMA_Abort_IT+0x1aa>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a35      	ldr	r2, [pc, #212]	; (8001b88 <HAL_DMA_Abort_IT+0x1e4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d048      	beq.n	8001b4a <HAL_DMA_Abort_IT+0x1a6>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a33      	ldr	r2, [pc, #204]	; (8001b8c <HAL_DMA_Abort_IT+0x1e8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d040      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x1a0>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a32      	ldr	r2, [pc, #200]	; (8001b90 <HAL_DMA_Abort_IT+0x1ec>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d038      	beq.n	8001b3e <HAL_DMA_Abort_IT+0x19a>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a30      	ldr	r2, [pc, #192]	; (8001b94 <HAL_DMA_Abort_IT+0x1f0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d030      	beq.n	8001b38 <HAL_DMA_Abort_IT+0x194>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a2f      	ldr	r2, [pc, #188]	; (8001b98 <HAL_DMA_Abort_IT+0x1f4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d028      	beq.n	8001b32 <HAL_DMA_Abort_IT+0x18e>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a26      	ldr	r2, [pc, #152]	; (8001b80 <HAL_DMA_Abort_IT+0x1dc>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d020      	beq.n	8001b2c <HAL_DMA_Abort_IT+0x188>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a2b      	ldr	r2, [pc, #172]	; (8001b9c <HAL_DMA_Abort_IT+0x1f8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d019      	beq.n	8001b28 <HAL_DMA_Abort_IT+0x184>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a29      	ldr	r2, [pc, #164]	; (8001ba0 <HAL_DMA_Abort_IT+0x1fc>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d012      	beq.n	8001b24 <HAL_DMA_Abort_IT+0x180>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a28      	ldr	r2, [pc, #160]	; (8001ba4 <HAL_DMA_Abort_IT+0x200>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d00a      	beq.n	8001b1e <HAL_DMA_Abort_IT+0x17a>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a26      	ldr	r2, [pc, #152]	; (8001ba8 <HAL_DMA_Abort_IT+0x204>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d102      	bne.n	8001b18 <HAL_DMA_Abort_IT+0x174>
 8001b12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b16:	e01b      	b.n	8001b50 <HAL_DMA_Abort_IT+0x1ac>
 8001b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b1c:	e018      	b.n	8001b50 <HAL_DMA_Abort_IT+0x1ac>
 8001b1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b22:	e015      	b.n	8001b50 <HAL_DMA_Abort_IT+0x1ac>
 8001b24:	2310      	movs	r3, #16
 8001b26:	e013      	b.n	8001b50 <HAL_DMA_Abort_IT+0x1ac>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e011      	b.n	8001b50 <HAL_DMA_Abort_IT+0x1ac>
 8001b2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b30:	e00e      	b.n	8001b50 <HAL_DMA_Abort_IT+0x1ac>
 8001b32:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b36:	e00b      	b.n	8001b50 <HAL_DMA_Abort_IT+0x1ac>
 8001b38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b3c:	e008      	b.n	8001b50 <HAL_DMA_Abort_IT+0x1ac>
 8001b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b42:	e005      	b.n	8001b50 <HAL_DMA_Abort_IT+0x1ac>
 8001b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b48:	e002      	b.n	8001b50 <HAL_DMA_Abort_IT+0x1ac>
 8001b4a:	2310      	movs	r3, #16
 8001b4c:	e000      	b.n	8001b50 <HAL_DMA_Abort_IT+0x1ac>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	4a17      	ldr	r2, [pc, #92]	; (8001bb0 <HAL_DMA_Abort_IT+0x20c>)
 8001b52:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	4798      	blx	r3
    } 
  }
  return status;
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40020080 	.word	0x40020080
 8001b84:	40020008 	.word	0x40020008
 8001b88:	4002001c 	.word	0x4002001c
 8001b8c:	40020030 	.word	0x40020030
 8001b90:	40020044 	.word	0x40020044
 8001b94:	40020058 	.word	0x40020058
 8001b98:	4002006c 	.word	0x4002006c
 8001b9c:	40020408 	.word	0x40020408
 8001ba0:	4002041c 	.word	0x4002041c
 8001ba4:	40020430 	.word	0x40020430
 8001ba8:	40020444 	.word	0x40020444
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40020000 	.word	0x40020000

08001bb4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80f1 	beq.w	8001dc0 <HAL_DMA_IRQHandler+0x20c>
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80eb 	beq.w	8001dc0 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0320 	and.w	r3, r3, #32
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d107      	bne.n	8001c08 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0204 	bic.w	r2, r2, #4
 8001c06:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b5f      	ldr	r3, [pc, #380]	; (8001d8c <HAL_DMA_IRQHandler+0x1d8>)
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d958      	bls.n	8001cc6 <HAL_DMA_IRQHandler+0x112>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a5d      	ldr	r2, [pc, #372]	; (8001d90 <HAL_DMA_IRQHandler+0x1dc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d04f      	beq.n	8001cbe <HAL_DMA_IRQHandler+0x10a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a5c      	ldr	r2, [pc, #368]	; (8001d94 <HAL_DMA_IRQHandler+0x1e0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d048      	beq.n	8001cba <HAL_DMA_IRQHandler+0x106>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a5a      	ldr	r2, [pc, #360]	; (8001d98 <HAL_DMA_IRQHandler+0x1e4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d040      	beq.n	8001cb4 <HAL_DMA_IRQHandler+0x100>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a59      	ldr	r2, [pc, #356]	; (8001d9c <HAL_DMA_IRQHandler+0x1e8>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d038      	beq.n	8001cae <HAL_DMA_IRQHandler+0xfa>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a57      	ldr	r2, [pc, #348]	; (8001da0 <HAL_DMA_IRQHandler+0x1ec>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d030      	beq.n	8001ca8 <HAL_DMA_IRQHandler+0xf4>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a56      	ldr	r2, [pc, #344]	; (8001da4 <HAL_DMA_IRQHandler+0x1f0>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d028      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0xee>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a4d      	ldr	r2, [pc, #308]	; (8001d8c <HAL_DMA_IRQHandler+0x1d8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d020      	beq.n	8001c9c <HAL_DMA_IRQHandler+0xe8>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a52      	ldr	r2, [pc, #328]	; (8001da8 <HAL_DMA_IRQHandler+0x1f4>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d019      	beq.n	8001c98 <HAL_DMA_IRQHandler+0xe4>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a50      	ldr	r2, [pc, #320]	; (8001dac <HAL_DMA_IRQHandler+0x1f8>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d012      	beq.n	8001c94 <HAL_DMA_IRQHandler+0xe0>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a4f      	ldr	r2, [pc, #316]	; (8001db0 <HAL_DMA_IRQHandler+0x1fc>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d00a      	beq.n	8001c8e <HAL_DMA_IRQHandler+0xda>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a4d      	ldr	r2, [pc, #308]	; (8001db4 <HAL_DMA_IRQHandler+0x200>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d102      	bne.n	8001c88 <HAL_DMA_IRQHandler+0xd4>
 8001c82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c86:	e01b      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x10c>
 8001c88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c8c:	e018      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x10c>
 8001c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c92:	e015      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x10c>
 8001c94:	2340      	movs	r3, #64	; 0x40
 8001c96:	e013      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x10c>
 8001c98:	2304      	movs	r3, #4
 8001c9a:	e011      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x10c>
 8001c9c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ca0:	e00e      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x10c>
 8001ca2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ca6:	e00b      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x10c>
 8001ca8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001cac:	e008      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x10c>
 8001cae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cb2:	e005      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x10c>
 8001cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb8:	e002      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x10c>
 8001cba:	2340      	movs	r3, #64	; 0x40
 8001cbc:	e000      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x10c>
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	4a3d      	ldr	r2, [pc, #244]	; (8001db8 <HAL_DMA_IRQHandler+0x204>)
 8001cc2:	6053      	str	r3, [r2, #4]
 8001cc4:	e057      	b.n	8001d76 <HAL_DMA_IRQHandler+0x1c2>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a31      	ldr	r2, [pc, #196]	; (8001d90 <HAL_DMA_IRQHandler+0x1dc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d04f      	beq.n	8001d70 <HAL_DMA_IRQHandler+0x1bc>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a2f      	ldr	r2, [pc, #188]	; (8001d94 <HAL_DMA_IRQHandler+0x1e0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d048      	beq.n	8001d6c <HAL_DMA_IRQHandler+0x1b8>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a2e      	ldr	r2, [pc, #184]	; (8001d98 <HAL_DMA_IRQHandler+0x1e4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d040      	beq.n	8001d66 <HAL_DMA_IRQHandler+0x1b2>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a2c      	ldr	r2, [pc, #176]	; (8001d9c <HAL_DMA_IRQHandler+0x1e8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d038      	beq.n	8001d60 <HAL_DMA_IRQHandler+0x1ac>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a2b      	ldr	r2, [pc, #172]	; (8001da0 <HAL_DMA_IRQHandler+0x1ec>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d030      	beq.n	8001d5a <HAL_DMA_IRQHandler+0x1a6>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a29      	ldr	r2, [pc, #164]	; (8001da4 <HAL_DMA_IRQHandler+0x1f0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d028      	beq.n	8001d54 <HAL_DMA_IRQHandler+0x1a0>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a21      	ldr	r2, [pc, #132]	; (8001d8c <HAL_DMA_IRQHandler+0x1d8>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d020      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x19a>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a25      	ldr	r2, [pc, #148]	; (8001da8 <HAL_DMA_IRQHandler+0x1f4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d019      	beq.n	8001d4a <HAL_DMA_IRQHandler+0x196>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a24      	ldr	r2, [pc, #144]	; (8001dac <HAL_DMA_IRQHandler+0x1f8>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d012      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x192>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <HAL_DMA_IRQHandler+0x1fc>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00a      	beq.n	8001d40 <HAL_DMA_IRQHandler+0x18c>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a21      	ldr	r2, [pc, #132]	; (8001db4 <HAL_DMA_IRQHandler+0x200>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d102      	bne.n	8001d3a <HAL_DMA_IRQHandler+0x186>
 8001d34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d38:	e01b      	b.n	8001d72 <HAL_DMA_IRQHandler+0x1be>
 8001d3a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d3e:	e018      	b.n	8001d72 <HAL_DMA_IRQHandler+0x1be>
 8001d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d44:	e015      	b.n	8001d72 <HAL_DMA_IRQHandler+0x1be>
 8001d46:	2340      	movs	r3, #64	; 0x40
 8001d48:	e013      	b.n	8001d72 <HAL_DMA_IRQHandler+0x1be>
 8001d4a:	2304      	movs	r3, #4
 8001d4c:	e011      	b.n	8001d72 <HAL_DMA_IRQHandler+0x1be>
 8001d4e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d52:	e00e      	b.n	8001d72 <HAL_DMA_IRQHandler+0x1be>
 8001d54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d58:	e00b      	b.n	8001d72 <HAL_DMA_IRQHandler+0x1be>
 8001d5a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d5e:	e008      	b.n	8001d72 <HAL_DMA_IRQHandler+0x1be>
 8001d60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d64:	e005      	b.n	8001d72 <HAL_DMA_IRQHandler+0x1be>
 8001d66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6a:	e002      	b.n	8001d72 <HAL_DMA_IRQHandler+0x1be>
 8001d6c:	2340      	movs	r3, #64	; 0x40
 8001d6e:	e000      	b.n	8001d72 <HAL_DMA_IRQHandler+0x1be>
 8001d70:	2304      	movs	r3, #4
 8001d72:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <HAL_DMA_IRQHandler+0x208>)
 8001d74:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8136 	beq.w	8001fec <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d88:	e130      	b.n	8001fec <HAL_DMA_IRQHandler+0x438>
 8001d8a:	bf00      	nop
 8001d8c:	40020080 	.word	0x40020080
 8001d90:	40020008 	.word	0x40020008
 8001d94:	4002001c 	.word	0x4002001c
 8001d98:	40020030 	.word	0x40020030
 8001d9c:	40020044 	.word	0x40020044
 8001da0:	40020058 	.word	0x40020058
 8001da4:	4002006c 	.word	0x4002006c
 8001da8:	40020408 	.word	0x40020408
 8001dac:	4002041c 	.word	0x4002041c
 8001db0:	40020430 	.word	0x40020430
 8001db4:	40020444 	.word	0x40020444
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	409a      	lsls	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 80dd 	beq.w	8001f8c <HAL_DMA_IRQHandler+0x3d8>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 80d7 	beq.w	8001f8c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0320 	and.w	r3, r3, #32
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10b      	bne.n	8001e04 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 020a 	bic.w	r2, r2, #10
 8001dfa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b7b      	ldr	r3, [pc, #492]	; (8001ff8 <HAL_DMA_IRQHandler+0x444>)
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d958      	bls.n	8001ec2 <HAL_DMA_IRQHandler+0x30e>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a79      	ldr	r2, [pc, #484]	; (8001ffc <HAL_DMA_IRQHandler+0x448>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d04f      	beq.n	8001eba <HAL_DMA_IRQHandler+0x306>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a78      	ldr	r2, [pc, #480]	; (8002000 <HAL_DMA_IRQHandler+0x44c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d048      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x302>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a76      	ldr	r2, [pc, #472]	; (8002004 <HAL_DMA_IRQHandler+0x450>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d040      	beq.n	8001eb0 <HAL_DMA_IRQHandler+0x2fc>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a75      	ldr	r2, [pc, #468]	; (8002008 <HAL_DMA_IRQHandler+0x454>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d038      	beq.n	8001eaa <HAL_DMA_IRQHandler+0x2f6>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a73      	ldr	r2, [pc, #460]	; (800200c <HAL_DMA_IRQHandler+0x458>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d030      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0x2f0>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a72      	ldr	r2, [pc, #456]	; (8002010 <HAL_DMA_IRQHandler+0x45c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d028      	beq.n	8001e9e <HAL_DMA_IRQHandler+0x2ea>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a69      	ldr	r2, [pc, #420]	; (8001ff8 <HAL_DMA_IRQHandler+0x444>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d020      	beq.n	8001e98 <HAL_DMA_IRQHandler+0x2e4>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a6e      	ldr	r2, [pc, #440]	; (8002014 <HAL_DMA_IRQHandler+0x460>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d019      	beq.n	8001e94 <HAL_DMA_IRQHandler+0x2e0>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a6c      	ldr	r2, [pc, #432]	; (8002018 <HAL_DMA_IRQHandler+0x464>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d012      	beq.n	8001e90 <HAL_DMA_IRQHandler+0x2dc>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a6b      	ldr	r2, [pc, #428]	; (800201c <HAL_DMA_IRQHandler+0x468>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d00a      	beq.n	8001e8a <HAL_DMA_IRQHandler+0x2d6>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a69      	ldr	r2, [pc, #420]	; (8002020 <HAL_DMA_IRQHandler+0x46c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d102      	bne.n	8001e84 <HAL_DMA_IRQHandler+0x2d0>
 8001e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e82:	e01b      	b.n	8001ebc <HAL_DMA_IRQHandler+0x308>
 8001e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e88:	e018      	b.n	8001ebc <HAL_DMA_IRQHandler+0x308>
 8001e8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e8e:	e015      	b.n	8001ebc <HAL_DMA_IRQHandler+0x308>
 8001e90:	2320      	movs	r3, #32
 8001e92:	e013      	b.n	8001ebc <HAL_DMA_IRQHandler+0x308>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e011      	b.n	8001ebc <HAL_DMA_IRQHandler+0x308>
 8001e98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e9c:	e00e      	b.n	8001ebc <HAL_DMA_IRQHandler+0x308>
 8001e9e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ea2:	e00b      	b.n	8001ebc <HAL_DMA_IRQHandler+0x308>
 8001ea4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ea8:	e008      	b.n	8001ebc <HAL_DMA_IRQHandler+0x308>
 8001eaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eae:	e005      	b.n	8001ebc <HAL_DMA_IRQHandler+0x308>
 8001eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb4:	e002      	b.n	8001ebc <HAL_DMA_IRQHandler+0x308>
 8001eb6:	2320      	movs	r3, #32
 8001eb8:	e000      	b.n	8001ebc <HAL_DMA_IRQHandler+0x308>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	4a59      	ldr	r2, [pc, #356]	; (8002024 <HAL_DMA_IRQHandler+0x470>)
 8001ebe:	6053      	str	r3, [r2, #4]
 8001ec0:	e057      	b.n	8001f72 <HAL_DMA_IRQHandler+0x3be>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a4d      	ldr	r2, [pc, #308]	; (8001ffc <HAL_DMA_IRQHandler+0x448>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d04f      	beq.n	8001f6c <HAL_DMA_IRQHandler+0x3b8>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a4b      	ldr	r2, [pc, #300]	; (8002000 <HAL_DMA_IRQHandler+0x44c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d048      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x3b4>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a4a      	ldr	r2, [pc, #296]	; (8002004 <HAL_DMA_IRQHandler+0x450>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d040      	beq.n	8001f62 <HAL_DMA_IRQHandler+0x3ae>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a48      	ldr	r2, [pc, #288]	; (8002008 <HAL_DMA_IRQHandler+0x454>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d038      	beq.n	8001f5c <HAL_DMA_IRQHandler+0x3a8>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a47      	ldr	r2, [pc, #284]	; (800200c <HAL_DMA_IRQHandler+0x458>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d030      	beq.n	8001f56 <HAL_DMA_IRQHandler+0x3a2>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a45      	ldr	r2, [pc, #276]	; (8002010 <HAL_DMA_IRQHandler+0x45c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d028      	beq.n	8001f50 <HAL_DMA_IRQHandler+0x39c>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a3d      	ldr	r2, [pc, #244]	; (8001ff8 <HAL_DMA_IRQHandler+0x444>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d020      	beq.n	8001f4a <HAL_DMA_IRQHandler+0x396>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a41      	ldr	r2, [pc, #260]	; (8002014 <HAL_DMA_IRQHandler+0x460>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d019      	beq.n	8001f46 <HAL_DMA_IRQHandler+0x392>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a40      	ldr	r2, [pc, #256]	; (8002018 <HAL_DMA_IRQHandler+0x464>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d012      	beq.n	8001f42 <HAL_DMA_IRQHandler+0x38e>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a3e      	ldr	r2, [pc, #248]	; (800201c <HAL_DMA_IRQHandler+0x468>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00a      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x388>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a3d      	ldr	r2, [pc, #244]	; (8002020 <HAL_DMA_IRQHandler+0x46c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d102      	bne.n	8001f36 <HAL_DMA_IRQHandler+0x382>
 8001f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f34:	e01b      	b.n	8001f6e <HAL_DMA_IRQHandler+0x3ba>
 8001f36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f3a:	e018      	b.n	8001f6e <HAL_DMA_IRQHandler+0x3ba>
 8001f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f40:	e015      	b.n	8001f6e <HAL_DMA_IRQHandler+0x3ba>
 8001f42:	2320      	movs	r3, #32
 8001f44:	e013      	b.n	8001f6e <HAL_DMA_IRQHandler+0x3ba>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e011      	b.n	8001f6e <HAL_DMA_IRQHandler+0x3ba>
 8001f4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f4e:	e00e      	b.n	8001f6e <HAL_DMA_IRQHandler+0x3ba>
 8001f50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f54:	e00b      	b.n	8001f6e <HAL_DMA_IRQHandler+0x3ba>
 8001f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f5a:	e008      	b.n	8001f6e <HAL_DMA_IRQHandler+0x3ba>
 8001f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f60:	e005      	b.n	8001f6e <HAL_DMA_IRQHandler+0x3ba>
 8001f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f66:	e002      	b.n	8001f6e <HAL_DMA_IRQHandler+0x3ba>
 8001f68:	2320      	movs	r3, #32
 8001f6a:	e000      	b.n	8001f6e <HAL_DMA_IRQHandler+0x3ba>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	4a2e      	ldr	r2, [pc, #184]	; (8002028 <HAL_DMA_IRQHandler+0x474>)
 8001f70:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d034      	beq.n	8001fec <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001f8a:	e02f      	b.n	8001fec <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	2208      	movs	r2, #8
 8001f92:	409a      	lsls	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d028      	beq.n	8001fee <HAL_DMA_IRQHandler+0x43a>
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d023      	beq.n	8001fee <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 020e 	bic.w	r2, r2, #14
 8001fb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d004      	beq.n	8001fee <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	4798      	blx	r3
    }
  }
  return;
 8001fec:	bf00      	nop
 8001fee:	bf00      	nop
}
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40020080 	.word	0x40020080
 8001ffc:	40020008 	.word	0x40020008
 8002000:	4002001c 	.word	0x4002001c
 8002004:	40020030 	.word	0x40020030
 8002008:	40020044 	.word	0x40020044
 800200c:	40020058 	.word	0x40020058
 8002010:	4002006c 	.word	0x4002006c
 8002014:	40020408 	.word	0x40020408
 8002018:	4002041c 	.word	0x4002041c
 800201c:	40020430 	.word	0x40020430
 8002020:	40020444 	.word	0x40020444
 8002024:	40020400 	.word	0x40020400
 8002028:	40020000 	.word	0x40020000

0800202c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800202c:	b480      	push	{r7}
 800202e:	b08b      	sub	sp, #44	; 0x2c
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203e:	e169      	b.n	8002314 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002040:	2201      	movs	r2, #1
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	69fa      	ldr	r2, [r7, #28]
 8002050:	4013      	ands	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	429a      	cmp	r2, r3
 800205a:	f040 8158 	bne.w	800230e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4a9a      	ldr	r2, [pc, #616]	; (80022cc <HAL_GPIO_Init+0x2a0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d05e      	beq.n	8002126 <HAL_GPIO_Init+0xfa>
 8002068:	4a98      	ldr	r2, [pc, #608]	; (80022cc <HAL_GPIO_Init+0x2a0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d875      	bhi.n	800215a <HAL_GPIO_Init+0x12e>
 800206e:	4a98      	ldr	r2, [pc, #608]	; (80022d0 <HAL_GPIO_Init+0x2a4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d058      	beq.n	8002126 <HAL_GPIO_Init+0xfa>
 8002074:	4a96      	ldr	r2, [pc, #600]	; (80022d0 <HAL_GPIO_Init+0x2a4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d86f      	bhi.n	800215a <HAL_GPIO_Init+0x12e>
 800207a:	4a96      	ldr	r2, [pc, #600]	; (80022d4 <HAL_GPIO_Init+0x2a8>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d052      	beq.n	8002126 <HAL_GPIO_Init+0xfa>
 8002080:	4a94      	ldr	r2, [pc, #592]	; (80022d4 <HAL_GPIO_Init+0x2a8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d869      	bhi.n	800215a <HAL_GPIO_Init+0x12e>
 8002086:	4a94      	ldr	r2, [pc, #592]	; (80022d8 <HAL_GPIO_Init+0x2ac>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d04c      	beq.n	8002126 <HAL_GPIO_Init+0xfa>
 800208c:	4a92      	ldr	r2, [pc, #584]	; (80022d8 <HAL_GPIO_Init+0x2ac>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d863      	bhi.n	800215a <HAL_GPIO_Init+0x12e>
 8002092:	4a92      	ldr	r2, [pc, #584]	; (80022dc <HAL_GPIO_Init+0x2b0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d046      	beq.n	8002126 <HAL_GPIO_Init+0xfa>
 8002098:	4a90      	ldr	r2, [pc, #576]	; (80022dc <HAL_GPIO_Init+0x2b0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d85d      	bhi.n	800215a <HAL_GPIO_Init+0x12e>
 800209e:	2b12      	cmp	r3, #18
 80020a0:	d82a      	bhi.n	80020f8 <HAL_GPIO_Init+0xcc>
 80020a2:	2b12      	cmp	r3, #18
 80020a4:	d859      	bhi.n	800215a <HAL_GPIO_Init+0x12e>
 80020a6:	a201      	add	r2, pc, #4	; (adr r2, 80020ac <HAL_GPIO_Init+0x80>)
 80020a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ac:	08002127 	.word	0x08002127
 80020b0:	08002101 	.word	0x08002101
 80020b4:	08002113 	.word	0x08002113
 80020b8:	08002155 	.word	0x08002155
 80020bc:	0800215b 	.word	0x0800215b
 80020c0:	0800215b 	.word	0x0800215b
 80020c4:	0800215b 	.word	0x0800215b
 80020c8:	0800215b 	.word	0x0800215b
 80020cc:	0800215b 	.word	0x0800215b
 80020d0:	0800215b 	.word	0x0800215b
 80020d4:	0800215b 	.word	0x0800215b
 80020d8:	0800215b 	.word	0x0800215b
 80020dc:	0800215b 	.word	0x0800215b
 80020e0:	0800215b 	.word	0x0800215b
 80020e4:	0800215b 	.word	0x0800215b
 80020e8:	0800215b 	.word	0x0800215b
 80020ec:	0800215b 	.word	0x0800215b
 80020f0:	08002109 	.word	0x08002109
 80020f4:	0800211d 	.word	0x0800211d
 80020f8:	4a79      	ldr	r2, [pc, #484]	; (80022e0 <HAL_GPIO_Init+0x2b4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d013      	beq.n	8002126 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020fe:	e02c      	b.n	800215a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	623b      	str	r3, [r7, #32]
          break;
 8002106:	e029      	b.n	800215c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	3304      	adds	r3, #4
 800210e:	623b      	str	r3, [r7, #32]
          break;
 8002110:	e024      	b.n	800215c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	3308      	adds	r3, #8
 8002118:	623b      	str	r3, [r7, #32]
          break;
 800211a:	e01f      	b.n	800215c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	330c      	adds	r3, #12
 8002122:	623b      	str	r3, [r7, #32]
          break;
 8002124:	e01a      	b.n	800215c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800212e:	2304      	movs	r3, #4
 8002130:	623b      	str	r3, [r7, #32]
          break;
 8002132:	e013      	b.n	800215c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d105      	bne.n	8002148 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800213c:	2308      	movs	r3, #8
 800213e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	611a      	str	r2, [r3, #16]
          break;
 8002146:	e009      	b.n	800215c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002148:	2308      	movs	r3, #8
 800214a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	615a      	str	r2, [r3, #20]
          break;
 8002152:	e003      	b.n	800215c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002154:	2300      	movs	r3, #0
 8002156:	623b      	str	r3, [r7, #32]
          break;
 8002158:	e000      	b.n	800215c <HAL_GPIO_Init+0x130>
          break;
 800215a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2bff      	cmp	r3, #255	; 0xff
 8002160:	d801      	bhi.n	8002166 <HAL_GPIO_Init+0x13a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	e001      	b.n	800216a <HAL_GPIO_Init+0x13e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3304      	adds	r3, #4
 800216a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	2bff      	cmp	r3, #255	; 0xff
 8002170:	d802      	bhi.n	8002178 <HAL_GPIO_Init+0x14c>
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	e002      	b.n	800217e <HAL_GPIO_Init+0x152>
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	3b08      	subs	r3, #8
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	210f      	movs	r1, #15
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	fa01 f303 	lsl.w	r3, r1, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	401a      	ands	r2, r3
 8002190:	6a39      	ldr	r1, [r7, #32]
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	fa01 f303 	lsl.w	r3, r1, r3
 8002198:	431a      	orrs	r2, r3
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f000 80b1 	beq.w	800230e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021ac:	4b4d      	ldr	r3, [pc, #308]	; (80022e4 <HAL_GPIO_Init+0x2b8>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	4a4c      	ldr	r2, [pc, #304]	; (80022e4 <HAL_GPIO_Init+0x2b8>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6193      	str	r3, [r2, #24]
 80021b8:	4b4a      	ldr	r3, [pc, #296]	; (80022e4 <HAL_GPIO_Init+0x2b8>)
 80021ba:	699b      	ldr	r3, [r3, #24]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021c4:	4a48      	ldr	r2, [pc, #288]	; (80022e8 <HAL_GPIO_Init+0x2bc>)
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	089b      	lsrs	r3, r3, #2
 80021ca:	3302      	adds	r3, #2
 80021cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	220f      	movs	r2, #15
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4013      	ands	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a40      	ldr	r2, [pc, #256]	; (80022ec <HAL_GPIO_Init+0x2c0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d013      	beq.n	8002218 <HAL_GPIO_Init+0x1ec>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a3f      	ldr	r2, [pc, #252]	; (80022f0 <HAL_GPIO_Init+0x2c4>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d00d      	beq.n	8002214 <HAL_GPIO_Init+0x1e8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a3e      	ldr	r2, [pc, #248]	; (80022f4 <HAL_GPIO_Init+0x2c8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d007      	beq.n	8002210 <HAL_GPIO_Init+0x1e4>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a3d      	ldr	r2, [pc, #244]	; (80022f8 <HAL_GPIO_Init+0x2cc>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d101      	bne.n	800220c <HAL_GPIO_Init+0x1e0>
 8002208:	2303      	movs	r3, #3
 800220a:	e006      	b.n	800221a <HAL_GPIO_Init+0x1ee>
 800220c:	2304      	movs	r3, #4
 800220e:	e004      	b.n	800221a <HAL_GPIO_Init+0x1ee>
 8002210:	2302      	movs	r3, #2
 8002212:	e002      	b.n	800221a <HAL_GPIO_Init+0x1ee>
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <HAL_GPIO_Init+0x1ee>
 8002218:	2300      	movs	r3, #0
 800221a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221c:	f002 0203 	and.w	r2, r2, #3
 8002220:	0092      	lsls	r2, r2, #2
 8002222:	4093      	lsls	r3, r2
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800222a:	492f      	ldr	r1, [pc, #188]	; (80022e8 <HAL_GPIO_Init+0x2bc>)
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	3302      	adds	r3, #2
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d006      	beq.n	8002252 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002244:	4b2d      	ldr	r3, [pc, #180]	; (80022fc <HAL_GPIO_Init+0x2d0>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	492c      	ldr	r1, [pc, #176]	; (80022fc <HAL_GPIO_Init+0x2d0>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
 8002250:	e006      	b.n	8002260 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002252:	4b2a      	ldr	r3, [pc, #168]	; (80022fc <HAL_GPIO_Init+0x2d0>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	43db      	mvns	r3, r3
 800225a:	4928      	ldr	r1, [pc, #160]	; (80022fc <HAL_GPIO_Init+0x2d0>)
 800225c:	4013      	ands	r3, r2
 800225e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d006      	beq.n	800227a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800226c:	4b23      	ldr	r3, [pc, #140]	; (80022fc <HAL_GPIO_Init+0x2d0>)
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	4922      	ldr	r1, [pc, #136]	; (80022fc <HAL_GPIO_Init+0x2d0>)
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800227a:	4b20      	ldr	r3, [pc, #128]	; (80022fc <HAL_GPIO_Init+0x2d0>)
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	43db      	mvns	r3, r3
 8002282:	491e      	ldr	r1, [pc, #120]	; (80022fc <HAL_GPIO_Init+0x2d0>)
 8002284:	4013      	ands	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d006      	beq.n	80022a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002294:	4b19      	ldr	r3, [pc, #100]	; (80022fc <HAL_GPIO_Init+0x2d0>)
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	4918      	ldr	r1, [pc, #96]	; (80022fc <HAL_GPIO_Init+0x2d0>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	4313      	orrs	r3, r2
 800229e:	608b      	str	r3, [r1, #8]
 80022a0:	e006      	b.n	80022b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022a2:	4b16      	ldr	r3, [pc, #88]	; (80022fc <HAL_GPIO_Init+0x2d0>)
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	4914      	ldr	r1, [pc, #80]	; (80022fc <HAL_GPIO_Init+0x2d0>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d021      	beq.n	8002300 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022bc:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <HAL_GPIO_Init+0x2d0>)
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	490e      	ldr	r1, [pc, #56]	; (80022fc <HAL_GPIO_Init+0x2d0>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60cb      	str	r3, [r1, #12]
 80022c8:	e021      	b.n	800230e <HAL_GPIO_Init+0x2e2>
 80022ca:	bf00      	nop
 80022cc:	10320000 	.word	0x10320000
 80022d0:	10310000 	.word	0x10310000
 80022d4:	10220000 	.word	0x10220000
 80022d8:	10210000 	.word	0x10210000
 80022dc:	10120000 	.word	0x10120000
 80022e0:	10110000 	.word	0x10110000
 80022e4:	40021000 	.word	0x40021000
 80022e8:	40010000 	.word	0x40010000
 80022ec:	40010800 	.word	0x40010800
 80022f0:	40010c00 	.word	0x40010c00
 80022f4:	40011000 	.word	0x40011000
 80022f8:	40011400 	.word	0x40011400
 80022fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <HAL_GPIO_Init+0x304>)
 8002302:	68da      	ldr	r2, [r3, #12]
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	43db      	mvns	r3, r3
 8002308:	4909      	ldr	r1, [pc, #36]	; (8002330 <HAL_GPIO_Init+0x304>)
 800230a:	4013      	ands	r3, r2
 800230c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	3301      	adds	r3, #1
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	fa22 f303 	lsr.w	r3, r2, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	f47f ae8e 	bne.w	8002040 <HAL_GPIO_Init+0x14>
  }
}
 8002324:	bf00      	nop
 8002326:	bf00      	nop
 8002328:	372c      	adds	r7, #44	; 0x2c
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	40010400 	.word	0x40010400

08002334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	807b      	strh	r3, [r7, #2]
 8002340:	4613      	mov	r3, r2
 8002342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002344:	787b      	ldrb	r3, [r7, #1]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800234a:	887a      	ldrh	r2, [r7, #2]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002350:	e003      	b.n	800235a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002352:	887b      	ldrh	r3, [r7, #2]
 8002354:	041a      	lsls	r2, r3, #16
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	611a      	str	r2, [r3, #16]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e304      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 8087 	beq.w	8002492 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002384:	4b92      	ldr	r3, [pc, #584]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b04      	cmp	r3, #4
 800238e:	d00c      	beq.n	80023aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002390:	4b8f      	ldr	r3, [pc, #572]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b08      	cmp	r3, #8
 800239a:	d112      	bne.n	80023c2 <HAL_RCC_OscConfig+0x5e>
 800239c:	4b8c      	ldr	r3, [pc, #560]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a8:	d10b      	bne.n	80023c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023aa:	4b89      	ldr	r3, [pc, #548]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d06c      	beq.n	8002490 <HAL_RCC_OscConfig+0x12c>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d168      	bne.n	8002490 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e2de      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x76>
 80023cc:	4b80      	ldr	r3, [pc, #512]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a7f      	ldr	r2, [pc, #508]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80023d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	e02e      	b.n	8002438 <HAL_RCC_OscConfig+0xd4>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d10c      	bne.n	80023fc <HAL_RCC_OscConfig+0x98>
 80023e2:	4b7b      	ldr	r3, [pc, #492]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a7a      	ldr	r2, [pc, #488]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4b78      	ldr	r3, [pc, #480]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a77      	ldr	r2, [pc, #476]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e01d      	b.n	8002438 <HAL_RCC_OscConfig+0xd4>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002404:	d10c      	bne.n	8002420 <HAL_RCC_OscConfig+0xbc>
 8002406:	4b72      	ldr	r3, [pc, #456]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a71      	ldr	r2, [pc, #452]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 800240c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	4b6f      	ldr	r3, [pc, #444]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a6e      	ldr	r2, [pc, #440]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	e00b      	b.n	8002438 <HAL_RCC_OscConfig+0xd4>
 8002420:	4b6b      	ldr	r3, [pc, #428]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a6a      	ldr	r2, [pc, #424]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b68      	ldr	r3, [pc, #416]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a67      	ldr	r2, [pc, #412]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002436:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d013      	beq.n	8002468 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7ff f916 	bl	8001670 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002448:	f7ff f912 	bl	8001670 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	; 0x64
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e292      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	4b5d      	ldr	r3, [pc, #372]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0xe4>
 8002466:	e014      	b.n	8002492 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7ff f902 	bl	8001670 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002470:	f7ff f8fe 	bl	8001670 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	; 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e27e      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002482:	4b53      	ldr	r3, [pc, #332]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x10c>
 800248e:	e000      	b.n	8002492 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d063      	beq.n	8002566 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800249e:	4b4c      	ldr	r3, [pc, #304]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00b      	beq.n	80024c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024aa:	4b49      	ldr	r3, [pc, #292]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 030c 	and.w	r3, r3, #12
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d11c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x18c>
 80024b6:	4b46      	ldr	r3, [pc, #280]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d116      	bne.n	80024f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c2:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d005      	beq.n	80024da <HAL_RCC_OscConfig+0x176>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d001      	beq.n	80024da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e252      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024da:	4b3d      	ldr	r3, [pc, #244]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4939      	ldr	r1, [pc, #228]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ee:	e03a      	b.n	8002566 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d020      	beq.n	800253a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f8:	4b36      	ldr	r3, [pc, #216]	; (80025d4 <HAL_RCC_OscConfig+0x270>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fe:	f7ff f8b7 	bl	8001670 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002506:	f7ff f8b3 	bl	8001670 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e233      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002518:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002524:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4927      	ldr	r1, [pc, #156]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 8002534:	4313      	orrs	r3, r2
 8002536:	600b      	str	r3, [r1, #0]
 8002538:	e015      	b.n	8002566 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800253a:	4b26      	ldr	r3, [pc, #152]	; (80025d4 <HAL_RCC_OscConfig+0x270>)
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7ff f896 	bl	8001670 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002548:	f7ff f892 	bl	8001670 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e212      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255a:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	2b00      	cmp	r3, #0
 8002570:	d03a      	beq.n	80025e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d019      	beq.n	80025ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <HAL_RCC_OscConfig+0x274>)
 800257c:	2201      	movs	r2, #1
 800257e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002580:	f7ff f876 	bl	8001670 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002588:	f7ff f872 	bl	8001670 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e1f2      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <HAL_RCC_OscConfig+0x26c>)
 800259c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025a6:	2001      	movs	r0, #1
 80025a8:	f000 fc1c 	bl	8002de4 <RCC_Delay>
 80025ac:	e01c      	b.n	80025e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <HAL_RCC_OscConfig+0x274>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b4:	f7ff f85c 	bl	8001670 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ba:	e00f      	b.n	80025dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025bc:	f7ff f858 	bl	8001670 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d908      	bls.n	80025dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e1d8      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000
 80025d4:	42420000 	.word	0x42420000
 80025d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025dc:	4b9b      	ldr	r3, [pc, #620]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1e9      	bne.n	80025bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 80a6 	beq.w	8002742 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fa:	4b94      	ldr	r3, [pc, #592]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10d      	bne.n	8002622 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	4b91      	ldr	r3, [pc, #580]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	4a90      	ldr	r2, [pc, #576]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 800260c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002610:	61d3      	str	r3, [r2, #28]
 8002612:	4b8e      	ldr	r3, [pc, #568]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261e:	2301      	movs	r3, #1
 8002620:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002622:	4b8b      	ldr	r3, [pc, #556]	; (8002850 <HAL_RCC_OscConfig+0x4ec>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262a:	2b00      	cmp	r3, #0
 800262c:	d118      	bne.n	8002660 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800262e:	4b88      	ldr	r3, [pc, #544]	; (8002850 <HAL_RCC_OscConfig+0x4ec>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a87      	ldr	r2, [pc, #540]	; (8002850 <HAL_RCC_OscConfig+0x4ec>)
 8002634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263a:	f7ff f819 	bl	8001670 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002642:	f7ff f815 	bl	8001670 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b64      	cmp	r3, #100	; 0x64
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e195      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002654:	4b7e      	ldr	r3, [pc, #504]	; (8002850 <HAL_RCC_OscConfig+0x4ec>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d106      	bne.n	8002676 <HAL_RCC_OscConfig+0x312>
 8002668:	4b78      	ldr	r3, [pc, #480]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 800266a:	6a1b      	ldr	r3, [r3, #32]
 800266c:	4a77      	ldr	r2, [pc, #476]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6213      	str	r3, [r2, #32]
 8002674:	e02d      	b.n	80026d2 <HAL_RCC_OscConfig+0x36e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10c      	bne.n	8002698 <HAL_RCC_OscConfig+0x334>
 800267e:	4b73      	ldr	r3, [pc, #460]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	4a72      	ldr	r2, [pc, #456]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 8002684:	f023 0301 	bic.w	r3, r3, #1
 8002688:	6213      	str	r3, [r2, #32]
 800268a:	4b70      	ldr	r3, [pc, #448]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	4a6f      	ldr	r2, [pc, #444]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 8002690:	f023 0304 	bic.w	r3, r3, #4
 8002694:	6213      	str	r3, [r2, #32]
 8002696:	e01c      	b.n	80026d2 <HAL_RCC_OscConfig+0x36e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	2b05      	cmp	r3, #5
 800269e:	d10c      	bne.n	80026ba <HAL_RCC_OscConfig+0x356>
 80026a0:	4b6a      	ldr	r3, [pc, #424]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	4a69      	ldr	r2, [pc, #420]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80026a6:	f043 0304 	orr.w	r3, r3, #4
 80026aa:	6213      	str	r3, [r2, #32]
 80026ac:	4b67      	ldr	r3, [pc, #412]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	4a66      	ldr	r2, [pc, #408]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6213      	str	r3, [r2, #32]
 80026b8:	e00b      	b.n	80026d2 <HAL_RCC_OscConfig+0x36e>
 80026ba:	4b64      	ldr	r3, [pc, #400]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	4a63      	ldr	r2, [pc, #396]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	6213      	str	r3, [r2, #32]
 80026c6:	4b61      	ldr	r3, [pc, #388]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	4a60      	ldr	r2, [pc, #384]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80026cc:	f023 0304 	bic.w	r3, r3, #4
 80026d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d015      	beq.n	8002706 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026da:	f7fe ffc9 	bl	8001670 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e0:	e00a      	b.n	80026f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e2:	f7fe ffc5 	bl	8001670 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e143      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f8:	4b54      	ldr	r3, [pc, #336]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0ee      	beq.n	80026e2 <HAL_RCC_OscConfig+0x37e>
 8002704:	e014      	b.n	8002730 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002706:	f7fe ffb3 	bl	8001670 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7fe ffaf 	bl	8001670 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	; 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e12d      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002724:	4b49      	ldr	r3, [pc, #292]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1ee      	bne.n	800270e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002730:	7dfb      	ldrb	r3, [r7, #23]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d105      	bne.n	8002742 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002736:	4b45      	ldr	r3, [pc, #276]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 8002738:	69db      	ldr	r3, [r3, #28]
 800273a:	4a44      	ldr	r2, [pc, #272]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 800273c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002740:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 808c 	beq.w	8002864 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800274c:	4b3f      	ldr	r3, [pc, #252]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002758:	d10e      	bne.n	8002778 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800275a:	4b3c      	ldr	r3, [pc, #240]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002762:	2b08      	cmp	r3, #8
 8002764:	d108      	bne.n	8002778 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002766:	4b39      	ldr	r3, [pc, #228]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800276e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002772:	d101      	bne.n	8002778 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e103      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	2b02      	cmp	r3, #2
 800277e:	d14e      	bne.n	800281e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002780:	4b32      	ldr	r3, [pc, #200]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d009      	beq.n	80027a0 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 800278c:	4b2f      	ldr	r3, [pc, #188]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 800278e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002790:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002798:	429a      	cmp	r2, r3
 800279a:	d001      	beq.n	80027a0 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e0ef      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80027a0:	4b2c      	ldr	r3, [pc, #176]	; (8002854 <HAL_RCC_OscConfig+0x4f0>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a6:	f7fe ff63 	bl	8001670 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80027ae:	f7fe ff5f 	bl	8001670 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b64      	cmp	r3, #100	; 0x64
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e0df      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80027c0:	4b22      	ldr	r3, [pc, #136]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1f0      	bne.n	80027ae <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80027cc:	4b1f      	ldr	r3, [pc, #124]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027d8:	491c      	ldr	r1, [pc, #112]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80027de:	4b1b      	ldr	r3, [pc, #108]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4918      	ldr	r1, [pc, #96]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80027f0:	4b18      	ldr	r3, [pc, #96]	; (8002854 <HAL_RCC_OscConfig+0x4f0>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7fe ff3b 	bl	8001670 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80027fe:	f7fe ff37 	bl	8001670 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b64      	cmp	r3, #100	; 0x64
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e0b7      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002810:	4b0e      	ldr	r3, [pc, #56]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x49a>
 800281c:	e022      	b.n	8002864 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	4a0a      	ldr	r2, [pc, #40]	; (800284c <HAL_RCC_OscConfig+0x4e8>)
 8002824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002828:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_RCC_OscConfig+0x4f0>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe ff1e 	bl	8001670 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002836:	e00f      	b.n	8002858 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002838:	f7fe ff1a 	bl	8001670 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b64      	cmp	r3, #100	; 0x64
 8002844:	d908      	bls.n	8002858 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e09a      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000
 8002850:	40007000 	.word	0x40007000
 8002854:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002858:	4b4b      	ldr	r3, [pc, #300]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1e9      	bne.n	8002838 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8088 	beq.w	800297e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800286e:	4b46      	ldr	r3, [pc, #280]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b08      	cmp	r3, #8
 8002878:	d068      	beq.n	800294c <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d14d      	bne.n	800291e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002882:	4b42      	ldr	r3, [pc, #264]	; (800298c <HAL_RCC_OscConfig+0x628>)
 8002884:	2200      	movs	r2, #0
 8002886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002888:	f7fe fef2 	bl	8001670 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002890:	f7fe feee 	bl	8001670 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e06e      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a2:	4b39      	ldr	r3, [pc, #228]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b6:	d10f      	bne.n	80028d8 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80028b8:	4b33      	ldr	r3, [pc, #204]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80028ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4931      	ldr	r1, [pc, #196]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028c6:	4b30      	ldr	r3, [pc, #192]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	f023 020f 	bic.w	r2, r3, #15
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	492d      	ldr	r1, [pc, #180]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028d8:	4b2b      	ldr	r3, [pc, #172]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e8:	430b      	orrs	r3, r1
 80028ea:	4927      	ldr	r1, [pc, #156]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f0:	4b26      	ldr	r3, [pc, #152]	; (800298c <HAL_RCC_OscConfig+0x628>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f6:	f7fe febb 	bl	8001670 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fe:	f7fe feb7 	bl	8001670 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e037      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002910:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x59a>
 800291c:	e02f      	b.n	800297e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291e:	4b1b      	ldr	r3, [pc, #108]	; (800298c <HAL_RCC_OscConfig+0x628>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7fe fea4 	bl	8001670 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe fea0 	bl	8001670 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e020      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800293e:	4b12      	ldr	r3, [pc, #72]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x5c8>
 800294a:	e018      	b.n	800297e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d101      	bne.n	8002958 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e013      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002958:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_RCC_OscConfig+0x624>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002968:	429a      	cmp	r2, r3
 800296a:	d106      	bne.n	800297a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	429a      	cmp	r2, r3
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40021000 	.word	0x40021000
 800298c:	42420060 	.word	0x42420060

08002990 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0d0      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029a4:	4b6a      	ldr	r3, [pc, #424]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d910      	bls.n	80029d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b67      	ldr	r3, [pc, #412]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 0207 	bic.w	r2, r3, #7
 80029ba:	4965      	ldr	r1, [pc, #404]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b63      	ldr	r3, [pc, #396]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0b8      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d020      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ec:	4b59      	ldr	r3, [pc, #356]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4a58      	ldr	r2, [pc, #352]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 80029f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0308 	and.w	r3, r3, #8
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a04:	4b53      	ldr	r3, [pc, #332]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4a52      	ldr	r2, [pc, #328]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a10:	4b50      	ldr	r3, [pc, #320]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	494d      	ldr	r1, [pc, #308]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d040      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d107      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a36:	4b47      	ldr	r3, [pc, #284]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d115      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e07f      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4e:	4b41      	ldr	r3, [pc, #260]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e073      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5e:	4b3d      	ldr	r3, [pc, #244]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e06b      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a6e:	4b39      	ldr	r3, [pc, #228]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f023 0203 	bic.w	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4936      	ldr	r1, [pc, #216]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a80:	f7fe fdf6 	bl	8001670 <HAL_GetTick>
 8002a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a88:	f7fe fdf2 	bl	8001670 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e053      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 020c 	and.w	r2, r3, #12
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d1eb      	bne.n	8002a88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d210      	bcs.n	8002ae0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 0207 	bic.w	r2, r3, #7
 8002ac6:	4922      	ldr	r1, [pc, #136]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ace:	4b20      	ldr	r3, [pc, #128]	; (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e032      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aec:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	4916      	ldr	r1, [pc, #88]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d009      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b0a:	4b12      	ldr	r3, [pc, #72]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	490e      	ldr	r1, [pc, #56]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b1e:	f000 f821 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 8002b22:	4602      	mov	r2, r0
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	490a      	ldr	r1, [pc, #40]	; (8002b58 <HAL_RCC_ClockConfig+0x1c8>)
 8002b30:	5ccb      	ldrb	r3, [r1, r3]
 8002b32:	fa22 f303 	lsr.w	r3, r2, r3
 8002b36:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1cc>)
 8002b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_RCC_ClockConfig+0x1d0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fe fc52 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40022000 	.word	0x40022000
 8002b54:	40021000 	.word	0x40021000
 8002b58:	0800b234 	.word	0x0800b234
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	20000004 	.word	0x20000004

08002b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b68:	b099      	sub	sp, #100	; 0x64
 8002b6a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8002b6c:	4b66      	ldr	r3, [pc, #408]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b6e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8002b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b74:	c407      	stmia	r4!, {r0, r1, r2}
 8002b76:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002b78:	4b64      	ldr	r3, [pc, #400]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b7a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002b7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	657b      	str	r3, [r7, #84]	; 0x54
 8002b88:	2300      	movs	r3, #0
 8002b8a:	653b      	str	r3, [r7, #80]	; 0x50
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002b90:	2300      	movs	r3, #0
 8002b92:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t sysclockfreq = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	65bb      	str	r3, [r7, #88]	; 0x58
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	647b      	str	r3, [r7, #68]	; 0x44
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ba0:	4b5b      	ldr	r3, [pc, #364]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba8:	f003 030c 	and.w	r3, r3, #12
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d002      	beq.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x52>
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d003      	beq.n	8002bbc <HAL_RCC_GetSysClockFreq+0x58>
 8002bb4:	e09f      	b.n	8002cf6 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bb6:	4b57      	ldr	r3, [pc, #348]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8002bb8:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8002bba:	e09f      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bbe:	0c9b      	lsrs	r3, r3, #18
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	3340      	adds	r3, #64	; 0x40
 8002bc6:	f107 0220 	add.w	r2, r7, #32
 8002bca:	4413      	add	r3, r2
 8002bcc:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8084 	beq.w	8002ce6 <HAL_RCC_GetSysClockFreq+0x182>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002bde:	4b4c      	ldr	r3, [pc, #304]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	3340      	adds	r3, #64	; 0x40
 8002be8:	f107 0220 	add.w	r2, r7, #32
 8002bec:	4413      	add	r3, r2
 8002bee:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002bf2:	653b      	str	r3, [r7, #80]	; 0x50
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002bf4:	4b46      	ldr	r3, [pc, #280]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d060      	beq.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x15e>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002c00:	4b43      	ldr	r3, [pc, #268]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	64bb      	str	r3, [r7, #72]	; 0x48
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002c0e:	4b40      	ldr	r3, [pc, #256]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	0a1b      	lsrs	r3, r3, #8
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	3302      	adds	r3, #2
 8002c1a:	647b      	str	r3, [r7, #68]	; 0x44
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c1e:	2200      	movs	r2, #0
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	617a      	str	r2, [r7, #20]
 8002c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c26:	2200      	movs	r2, #0
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	61fa      	str	r2, [r7, #28]
 8002c2c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002c30:	4622      	mov	r2, r4
 8002c32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c36:	4684      	mov	ip, r0
 8002c38:	fb0c f202 	mul.w	r2, ip, r2
 8002c3c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002c40:	468c      	mov	ip, r1
 8002c42:	4618      	mov	r0, r3
 8002c44:	4621      	mov	r1, r4
 8002c46:	4603      	mov	r3, r0
 8002c48:	fb03 f30c 	mul.w	r3, r3, ip
 8002c4c:	4413      	add	r3, r2
 8002c4e:	4602      	mov	r2, r0
 8002c50:	69b9      	ldr	r1, [r7, #24]
 8002c52:	fba2 8901 	umull	r8, r9, r2, r1
 8002c56:	444b      	add	r3, r9
 8002c58:	4699      	mov	r9, r3
 8002c5a:	4b2e      	ldr	r3, [pc, #184]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8002c5c:	fb03 f209 	mul.w	r2, r3, r9
 8002c60:	2300      	movs	r3, #0
 8002c62:	fb03 f308 	mul.w	r3, r3, r8
 8002c66:	4413      	add	r3, r2
 8002c68:	4a2a      	ldr	r2, [pc, #168]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8002c6a:	fba8 ab02 	umull	sl, fp, r8, r2
 8002c6e:	445b      	add	r3, fp
 8002c70:	469b      	mov	fp, r3
 8002c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c74:	2200      	movs	r2, #0
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	60fa      	str	r2, [r7, #12]
 8002c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	607a      	str	r2, [r7, #4]
 8002c82:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002c86:	4622      	mov	r2, r4
 8002c88:	e9d7 8900 	ldrd	r8, r9, [r7]
 8002c8c:	4641      	mov	r1, r8
 8002c8e:	fb01 f202 	mul.w	r2, r1, r2
 8002c92:	46cc      	mov	ip, r9
 8002c94:	4618      	mov	r0, r3
 8002c96:	4621      	mov	r1, r4
 8002c98:	4603      	mov	r3, r0
 8002c9a:	fb03 f30c 	mul.w	r3, r3, ip
 8002c9e:	4413      	add	r3, r2
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4641      	mov	r1, r8
 8002ca4:	fba2 5601 	umull	r5, r6, r2, r1
 8002ca8:	4433      	add	r3, r6
 8002caa:	461e      	mov	r6, r3
 8002cac:	462a      	mov	r2, r5
 8002cae:	4633      	mov	r3, r6
 8002cb0:	4650      	mov	r0, sl
 8002cb2:	4659      	mov	r1, fp
 8002cb4:	f7fd fac4 	bl	8000240 <__aeabi_uldivmod>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cc0:	e007      	b.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x16e>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc4:	4a13      	ldr	r2, [pc, #76]	; (8002d14 <HAL_RCC_GetSysClockFreq+0x1b0>)
 8002cc6:	fb03 f202 	mul.w	r2, r3, r2
 8002cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002cd2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d108      	bne.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x18c>
        {
          pllclk = pllclk / 2;
 8002cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce0:	085b      	lsrs	r3, r3, #1
 8002ce2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ce4:	e004      	b.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x18c>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce8:	4a0b      	ldr	r2, [pc, #44]	; (8002d18 <HAL_RCC_GetSysClockFreq+0x1b4>)
 8002cea:	fb02 f303 	mul.w	r3, r2, r3
 8002cee:	65fb      	str	r3, [r7, #92]	; 0x5c
      }
      sysclockfreq = pllclk;
 8002cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cf2:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8002cf4:	e002      	b.n	8002cfc <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cf6:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cf8:	65bb      	str	r3, [r7, #88]	; 0x58
      break;
 8002cfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3764      	adds	r7, #100	; 0x64
 8002d02:	46bd      	mov	sp, r7
 8002d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d08:	0800b1b8 	.word	0x0800b1b8
 8002d0c:	0800b1c8 	.word	0x0800b1c8
 8002d10:	40021000 	.word	0x40021000
 8002d14:	00989680 	.word	0x00989680
 8002d18:	003d0900 	.word	0x003d0900
 8002d1c:	007a1200 	.word	0x007a1200

08002d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d24:	4b02      	ldr	r3, [pc, #8]	; (8002d30 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	20000000 	.word	0x20000000

08002d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d38:	f7ff fff2 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	4903      	ldr	r1, [pc, #12]	; (8002d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d4a:	5ccb      	ldrb	r3, [r1, r3]
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000
 8002d58:	0800b244 	.word	0x0800b244

08002d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d60:	f7ff ffde 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	0adb      	lsrs	r3, r3, #11
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	4903      	ldr	r1, [pc, #12]	; (8002d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000
 8002d80:	0800b244 	.word	0x0800b244

08002d84 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	220f      	movs	r2, #15
 8002d92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d94:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <HAL_RCC_GetClockConfig+0x58>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 0203 	and.w	r2, r3, #3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002da0:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <HAL_RCC_GetClockConfig+0x58>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002dac:	4b0b      	ldr	r3, [pc, #44]	; (8002ddc <HAL_RCC_GetClockConfig+0x58>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002db8:	4b08      	ldr	r3, [pc, #32]	; (8002ddc <HAL_RCC_GetClockConfig+0x58>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	08db      	lsrs	r3, r3, #3
 8002dbe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dc6:	4b06      	ldr	r3, [pc, #24]	; (8002de0 <HAL_RCC_GetClockConfig+0x5c>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0207 	and.w	r2, r3, #7
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40022000 	.word	0x40022000

08002de4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <RCC_Delay+0x34>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a0a      	ldr	r2, [pc, #40]	; (8002e1c <RCC_Delay+0x38>)
 8002df2:	fba2 2303 	umull	r2, r3, r2, r3
 8002df6:	0a5b      	lsrs	r3, r3, #9
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	fb02 f303 	mul.w	r3, r2, r3
 8002dfe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e00:	bf00      	nop
  }
  while (Delay --);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	1e5a      	subs	r2, r3, #1
 8002e06:	60fa      	str	r2, [r7, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f9      	bne.n	8002e00 <RCC_Delay+0x1c>
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	10624dd3 	.word	0x10624dd3

08002e20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e076      	b.n	8002f20 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d108      	bne.n	8002e4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e42:	d009      	beq.n	8002e58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	61da      	str	r2, [r3, #28]
 8002e4a:	e005      	b.n	8002e58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7fe f9ac 	bl	80011d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	f003 0302 	and.w	r3, r3, #2
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002edc:	ea42 0103 	orr.w	r1, r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	0c1a      	lsrs	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f002 0204 	and.w	r2, r2, #4
 8002efe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	69da      	ldr	r2, [r3, #28]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2201      	movs	r2, #1
 8002f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08c      	sub	sp, #48	; 0x30
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f36:	2301      	movs	r3, #1
 8002f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_SPI_TransmitReceive+0x26>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e18a      	b.n	8003264 <HAL_SPI_TransmitReceive+0x33c>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f56:	f7fe fb8b 	bl	8001670 <HAL_GetTick>
 8002f5a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002f6c:	887b      	ldrh	r3, [r7, #2]
 8002f6e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d00f      	beq.n	8002f98 <HAL_SPI_TransmitReceive+0x70>
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f7e:	d107      	bne.n	8002f90 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d103      	bne.n	8002f90 <HAL_SPI_TransmitReceive+0x68>
 8002f88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d003      	beq.n	8002f98 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
 8002f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f96:	e15b      	b.n	8003250 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d005      	beq.n	8002faa <HAL_SPI_TransmitReceive+0x82>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d002      	beq.n	8002faa <HAL_SPI_TransmitReceive+0x82>
 8002fa4:	887b      	ldrh	r3, [r7, #2]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d103      	bne.n	8002fb2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002fb0:	e14e      	b.n	8003250 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d003      	beq.n	8002fc6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2205      	movs	r2, #5
 8002fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	887a      	ldrh	r2, [r7, #2]
 8002fd6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	887a      	ldrh	r2, [r7, #2]
 8002fdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	887a      	ldrh	r2, [r7, #2]
 8002fee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b40      	cmp	r3, #64	; 0x40
 8003008:	d007      	beq.n	800301a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003018:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003022:	d178      	bne.n	8003116 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <HAL_SPI_TransmitReceive+0x10a>
 800302c:	8b7b      	ldrh	r3, [r7, #26]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d166      	bne.n	8003100 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	881a      	ldrh	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	1c9a      	adds	r2, r3, #2
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800304c:	b29b      	uxth	r3, r3
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003056:	e053      	b.n	8003100 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b02      	cmp	r3, #2
 8003064:	d11b      	bne.n	800309e <HAL_SPI_TransmitReceive+0x176>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d016      	beq.n	800309e <HAL_SPI_TransmitReceive+0x176>
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003072:	2b01      	cmp	r3, #1
 8003074:	d113      	bne.n	800309e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	881a      	ldrh	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	1c9a      	adds	r2, r3, #2
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800309a:	2300      	movs	r3, #0
 800309c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d119      	bne.n	80030e0 <HAL_SPI_TransmitReceive+0x1b8>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d014      	beq.n	80030e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c0:	b292      	uxth	r2, r2
 80030c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c8:	1c9a      	adds	r2, r3, #2
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030dc:	2301      	movs	r3, #1
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030e0:	f7fe fac6 	bl	8001670 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d807      	bhi.n	8003100 <HAL_SPI_TransmitReceive+0x1d8>
 80030f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f6:	d003      	beq.n	8003100 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030fe:	e0a7      	b.n	8003250 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1a6      	bne.n	8003058 <HAL_SPI_TransmitReceive+0x130>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1a1      	bne.n	8003058 <HAL_SPI_TransmitReceive+0x130>
 8003114:	e07c      	b.n	8003210 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_SPI_TransmitReceive+0x1fc>
 800311e:	8b7b      	ldrh	r3, [r7, #26]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d16b      	bne.n	80031fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	330c      	adds	r3, #12
 800312e:	7812      	ldrb	r2, [r2, #0]
 8003130:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800314a:	e057      	b.n	80031fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b02      	cmp	r3, #2
 8003158:	d11c      	bne.n	8003194 <HAL_SPI_TransmitReceive+0x26c>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d017      	beq.n	8003194 <HAL_SPI_TransmitReceive+0x26c>
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	2b01      	cmp	r3, #1
 8003168:	d114      	bne.n	8003194 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	330c      	adds	r3, #12
 8003174:	7812      	ldrb	r2, [r2, #0]
 8003176:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317c:	1c5a      	adds	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003186:	b29b      	uxth	r3, r3
 8003188:	3b01      	subs	r3, #1
 800318a:	b29a      	uxth	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d119      	bne.n	80031d6 <HAL_SPI_TransmitReceive+0x2ae>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d014      	beq.n	80031d6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68da      	ldr	r2, [r3, #12]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031d2:	2301      	movs	r3, #1
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031d6:	f7fe fa4b 	bl	8001670 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d803      	bhi.n	80031ee <HAL_SPI_TransmitReceive+0x2c6>
 80031e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ec:	d102      	bne.n	80031f4 <HAL_SPI_TransmitReceive+0x2cc>
 80031ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d103      	bne.n	80031fc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80031fa:	e029      	b.n	8003250 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1a2      	bne.n	800314c <HAL_SPI_TransmitReceive+0x224>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d19d      	bne.n	800314c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003212:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 f9b5 	bl	8003584 <SPI_EndRxTxTransaction>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d006      	beq.n	800322e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2220      	movs	r2, #32
 800322a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800322c:	e010      	b.n	8003250 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10b      	bne.n	800324e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	e000      	b.n	8003250 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800324e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003260:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003264:	4618      	mov	r0, r3
 8003266:	3730      	adds	r7, #48	; 0x30
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b088      	sub	sp, #32
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	099b      	lsrs	r3, r3, #6
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10f      	bne.n	80032b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	099b      	lsrs	r3, r3, #6
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d004      	beq.n	80032b0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	4798      	blx	r3
    return;
 80032ae:	e0be      	b.n	800342e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	085b      	lsrs	r3, r3, #1
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00a      	beq.n	80032d2 <HAL_SPI_IRQHandler+0x66>
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	09db      	lsrs	r3, r3, #7
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d004      	beq.n	80032d2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4798      	blx	r3
    return;
 80032d0:	e0ad      	b.n	800342e <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d106      	bne.n	80032ec <HAL_SPI_IRQHandler+0x80>
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	099b      	lsrs	r3, r3, #6
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 80a1 	beq.w	800342e <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 809a 	beq.w	800342e <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	099b      	lsrs	r3, r3, #6
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d023      	beq.n	800334e <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b03      	cmp	r3, #3
 8003310:	d011      	beq.n	8003336 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003316:	f043 0204 	orr.w	r2, r3, #4
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800331e:	2300      	movs	r3, #0
 8003320:	617b      	str	r3, [r7, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	e00b      	b.n	800334e <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	613b      	str	r3, [r7, #16]
 800334a:	693b      	ldr	r3, [r7, #16]
        return;
 800334c:	e06f      	b.n	800342e <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d014      	beq.n	8003384 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335e:	f043 0201 	orr.w	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003388:	2b00      	cmp	r3, #0
 800338a:	d04f      	beq.n	800342c <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800339a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d104      	bne.n	80033b8 <HAL_SPI_IRQHandler+0x14c>
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d034      	beq.n	8003422 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0203 	bic.w	r2, r2, #3
 80033c6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d011      	beq.n	80033f4 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d4:	4a17      	ldr	r2, [pc, #92]	; (8003434 <HAL_SPI_IRQHandler+0x1c8>)
 80033d6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe fae1 	bl	80019a4 <HAL_DMA_Abort_IT>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d016      	beq.n	800342a <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003400:	4a0c      	ldr	r2, [pc, #48]	; (8003434 <HAL_SPI_IRQHandler+0x1c8>)
 8003402:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003408:	4618      	mov	r0, r3
 800340a:	f7fe facb 	bl	80019a4 <HAL_DMA_Abort_IT>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003418:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003420:	e003      	b.n	800342a <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f808 	bl	8003438 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003428:	e000      	b.n	800342c <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 800342a:	bf00      	nop
    return;
 800342c:	bf00      	nop
  }
}
 800342e:	3720      	adds	r7, #32
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	0800344b 	.word	0x0800344b

08003438 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b084      	sub	sp, #16
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f7ff ffe7 	bl	8003438 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003484:	f7fe f8f4 	bl	8001670 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348c:	1a9b      	subs	r3, r3, r2
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	4413      	add	r3, r2
 8003492:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003494:	f7fe f8ec 	bl	8001670 <HAL_GetTick>
 8003498:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800349a:	4b39      	ldr	r3, [pc, #228]	; (8003580 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	015b      	lsls	r3, r3, #5
 80034a0:	0d1b      	lsrs	r3, r3, #20
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	fb02 f303 	mul.w	r3, r2, r3
 80034a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034aa:	e054      	b.n	8003556 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b2:	d050      	beq.n	8003556 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034b4:	f7fe f8dc 	bl	8001670 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d902      	bls.n	80034ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d13d      	bne.n	8003546 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034e2:	d111      	bne.n	8003508 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ec:	d004      	beq.n	80034f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034f6:	d107      	bne.n	8003508 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003506:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003510:	d10f      	bne.n	8003532 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003530:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e017      	b.n	8003576 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	3b01      	subs	r3, #1
 8003554:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4013      	ands	r3, r2
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	429a      	cmp	r2, r3
 8003564:	bf0c      	ite	eq
 8003566:	2301      	moveq	r3, #1
 8003568:	2300      	movne	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	429a      	cmp	r2, r3
 8003572:	d19b      	bne.n	80034ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3720      	adds	r7, #32
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20000000 	.word	0x20000000

08003584 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af02      	add	r7, sp, #8
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2200      	movs	r2, #0
 8003598:	2180      	movs	r1, #128	; 0x80
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f7ff ff6a 	bl	8003474 <SPI_WaitFlagStateUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035aa:	f043 0220 	orr.w	r2, r3, #32
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e000      	b.n	80035b8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e041      	b.n	8003656 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d106      	bne.n	80035ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f839 	bl	800365e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3304      	adds	r3, #4
 80035fc:	4619      	mov	r1, r3
 80035fe:	4610      	mov	r0, r2
 8003600:	f000 f9bc 	bl	800397c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr

08003670 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b01      	cmp	r3, #1
 8003682:	d001      	beq.n	8003688 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e03f      	b.n	8003708 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1b      	ldr	r2, [pc, #108]	; (8003714 <HAL_TIM_Base_Start_IT+0xa4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d013      	beq.n	80036d2 <HAL_TIM_Base_Start_IT+0x62>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b2:	d00e      	beq.n	80036d2 <HAL_TIM_Base_Start_IT+0x62>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a17      	ldr	r2, [pc, #92]	; (8003718 <HAL_TIM_Base_Start_IT+0xa8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d009      	beq.n	80036d2 <HAL_TIM_Base_Start_IT+0x62>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a16      	ldr	r2, [pc, #88]	; (800371c <HAL_TIM_Base_Start_IT+0xac>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_TIM_Base_Start_IT+0x62>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a14      	ldr	r2, [pc, #80]	; (8003720 <HAL_TIM_Base_Start_IT+0xb0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d111      	bne.n	80036f6 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b06      	cmp	r3, #6
 80036e2:	d010      	beq.n	8003706 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f4:	e007      	b.n	8003706 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f042 0201 	orr.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40012c00 	.word	0x40012c00
 8003718:	40000400 	.word	0x40000400
 800371c:	40000800 	.word	0x40000800
 8003720:	40000c00 	.word	0x40000c00

08003724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b02      	cmp	r3, #2
 8003738:	d122      	bne.n	8003780 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b02      	cmp	r3, #2
 8003746:	d11b      	bne.n	8003780 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0202 	mvn.w	r2, #2
 8003750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f8ed 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 800376c:	e005      	b.n	800377a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f8e0 	bl	8003934 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 f8ef 	bl	8003958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b04      	cmp	r3, #4
 800378c:	d122      	bne.n	80037d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b04      	cmp	r3, #4
 800379a:	d11b      	bne.n	80037d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0204 	mvn.w	r2, #4
 80037a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2202      	movs	r2, #2
 80037aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f8c3 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 80037c0:	e005      	b.n	80037ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 f8b6 	bl	8003934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f8c5 	bl	8003958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d122      	bne.n	8003828 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	d11b      	bne.n	8003828 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f06f 0208 	mvn.w	r2, #8
 80037f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2204      	movs	r2, #4
 80037fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f003 0303 	and.w	r3, r3, #3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f899 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 8003814:	e005      	b.n	8003822 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f88c 	bl	8003934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f89b 	bl	8003958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f003 0310 	and.w	r3, r3, #16
 8003832:	2b10      	cmp	r3, #16
 8003834:	d122      	bne.n	800387c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b10      	cmp	r3, #16
 8003842:	d11b      	bne.n	800387c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0210 	mvn.w	r2, #16
 800384c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2208      	movs	r2, #8
 8003852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f86f 	bl	8003946 <HAL_TIM_IC_CaptureCallback>
 8003868:	e005      	b.n	8003876 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f862 	bl	8003934 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f871 	bl	8003958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b01      	cmp	r3, #1
 8003888:	d10e      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b01      	cmp	r3, #1
 8003896:	d107      	bne.n	80038a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0201 	mvn.w	r2, #1
 80038a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fd f9a6 	bl	8000bf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b2:	2b80      	cmp	r3, #128	; 0x80
 80038b4:	d10e      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c0:	2b80      	cmp	r3, #128	; 0x80
 80038c2:	d107      	bne.n	80038d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f8c9 	bl	8003a66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038de:	2b40      	cmp	r3, #64	; 0x40
 80038e0:	d10e      	bne.n	8003900 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ec:	2b40      	cmp	r3, #64	; 0x40
 80038ee:	d107      	bne.n	8003900 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f835 	bl	800396a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b20      	cmp	r3, #32
 800390c:	d10e      	bne.n	800392c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b20      	cmp	r3, #32
 800391a:	d107      	bne.n	800392c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f06f 0220 	mvn.w	r2, #32
 8003924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f894 	bl	8003a54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	bc80      	pop	{r7}
 8003944:	4770      	bx	lr

08003946 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr

0800396a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a2d      	ldr	r2, [pc, #180]	; (8003a44 <TIM_Base_SetConfig+0xc8>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d00f      	beq.n	80039b4 <TIM_Base_SetConfig+0x38>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399a:	d00b      	beq.n	80039b4 <TIM_Base_SetConfig+0x38>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a2a      	ldr	r2, [pc, #168]	; (8003a48 <TIM_Base_SetConfig+0xcc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d007      	beq.n	80039b4 <TIM_Base_SetConfig+0x38>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a29      	ldr	r2, [pc, #164]	; (8003a4c <TIM_Base_SetConfig+0xd0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d003      	beq.n	80039b4 <TIM_Base_SetConfig+0x38>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a28      	ldr	r2, [pc, #160]	; (8003a50 <TIM_Base_SetConfig+0xd4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d108      	bne.n	80039c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a1e      	ldr	r2, [pc, #120]	; (8003a44 <TIM_Base_SetConfig+0xc8>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00f      	beq.n	80039ee <TIM_Base_SetConfig+0x72>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039d4:	d00b      	beq.n	80039ee <TIM_Base_SetConfig+0x72>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a1b      	ldr	r2, [pc, #108]	; (8003a48 <TIM_Base_SetConfig+0xcc>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d007      	beq.n	80039ee <TIM_Base_SetConfig+0x72>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a1a      	ldr	r2, [pc, #104]	; (8003a4c <TIM_Base_SetConfig+0xd0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d003      	beq.n	80039ee <TIM_Base_SetConfig+0x72>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a19      	ldr	r2, [pc, #100]	; (8003a50 <TIM_Base_SetConfig+0xd4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d108      	bne.n	8003a00 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a07      	ldr	r2, [pc, #28]	; (8003a44 <TIM_Base_SetConfig+0xc8>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d103      	bne.n	8003a34 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	615a      	str	r2, [r3, #20]
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	40012c00 	.word	0x40012c00
 8003a48:	40000400 	.word	0x40000400
 8003a4c:	40000800 	.word	0x40000800
 8003a50:	40000c00 	.word	0x40000c00

08003a54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr

08003a66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a6e:	bf00      	nop
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr

08003a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e03f      	b.n	8003b0a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd fc4e 	bl	8001340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2224      	movs	r2, #36	; 0x24
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fc25 	bl	800430c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	691a      	ldr	r2, [r3, #16]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b08a      	sub	sp, #40	; 0x28
 8003b16:	af02      	add	r7, sp, #8
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	603b      	str	r3, [r7, #0]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b20      	cmp	r3, #32
 8003b30:	d17c      	bne.n	8003c2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <HAL_UART_Transmit+0x2c>
 8003b38:	88fb      	ldrh	r3, [r7, #6]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e075      	b.n	8003c2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_UART_Transmit+0x3e>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e06e      	b.n	8003c2e <HAL_UART_Transmit+0x11c>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2221      	movs	r2, #33	; 0x21
 8003b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b66:	f7fd fd83 	bl	8001670 <HAL_GetTick>
 8003b6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	88fa      	ldrh	r2, [r7, #6]
 8003b70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	88fa      	ldrh	r2, [r7, #6]
 8003b76:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b80:	d108      	bne.n	8003b94 <HAL_UART_Transmit+0x82>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d104      	bne.n	8003b94 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	e003      	b.n	8003b9c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ba4:	e02a      	b.n	8003bfc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2200      	movs	r2, #0
 8003bae:	2180      	movs	r1, #128	; 0x80
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 fa11 	bl	8003fd8 <UART_WaitOnFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e036      	b.n	8003c2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10b      	bne.n	8003bde <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	3302      	adds	r3, #2
 8003bda:	61bb      	str	r3, [r7, #24]
 8003bdc:	e007      	b.n	8003bee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	3301      	adds	r3, #1
 8003bec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1cf      	bne.n	8003ba6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2140      	movs	r1, #64	; 0x40
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 f9e1 	bl	8003fd8 <UART_WaitOnFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e006      	b.n	8003c2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	e000      	b.n	8003c2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
  }
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3720      	adds	r7, #32
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	; 0x28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10d      	bne.n	8003c8a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d008      	beq.n	8003c8a <HAL_UART_IRQHandler+0x52>
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fa99 	bl	80041ba <UART_Receive_IT>
      return;
 8003c88:	e17b      	b.n	8003f82 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 80b1 	beq.w	8003df4 <HAL_UART_IRQHandler+0x1bc>
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d105      	bne.n	8003ca8 <HAL_UART_IRQHandler+0x70>
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 80a6 	beq.w	8003df4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x90>
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	f043 0201 	orr.w	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_UART_IRQHandler+0xb0>
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d005      	beq.n	8003ce8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	f043 0202 	orr.w	r2, r3, #2
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <HAL_UART_IRQHandler+0xd0>
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d00:	f043 0204 	orr.w	r2, r3, #4
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00f      	beq.n	8003d32 <HAL_UART_IRQHandler+0xfa>
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d104      	bne.n	8003d26 <HAL_UART_IRQHandler+0xee>
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	f043 0208 	orr.w	r2, r3, #8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 811e 	beq.w	8003f78 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d007      	beq.n	8003d56 <HAL_UART_IRQHandler+0x11e>
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	f003 0320 	and.w	r3, r3, #32
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 fa32 	bl	80041ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bf14      	ite	ne
 8003d64:	2301      	movne	r3, #1
 8003d66:	2300      	moveq	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d102      	bne.n	8003d7e <HAL_UART_IRQHandler+0x146>
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d031      	beq.n	8003de2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f974 	bl	800406c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d023      	beq.n	8003dda <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	695a      	ldr	r2, [r3, #20]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003da0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d013      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dae:	4a76      	ldr	r2, [pc, #472]	; (8003f88 <HAL_UART_IRQHandler+0x350>)
 8003db0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fd fdf4 	bl	80019a4 <HAL_DMA_Abort_IT>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d016      	beq.n	8003df0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dcc:	4610      	mov	r0, r2
 8003dce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd0:	e00e      	b.n	8003df0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f8ec 	bl	8003fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd8:	e00a      	b.n	8003df0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f8e8 	bl	8003fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de0:	e006      	b.n	8003df0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f8e4 	bl	8003fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003dee:	e0c3      	b.n	8003f78 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003df0:	bf00      	nop
    return;
 8003df2:	e0c1      	b.n	8003f78 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	f040 80a1 	bne.w	8003f40 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 809b 	beq.w	8003f40 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 8095 	beq.w	8003f40 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d04e      	beq.n	8003ed8 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003e44:	8a3b      	ldrh	r3, [r7, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8098 	beq.w	8003f7c <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e50:	8a3a      	ldrh	r2, [r7, #16]
 8003e52:	429a      	cmp	r2, r3
 8003e54:	f080 8092 	bcs.w	8003f7c <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8a3a      	ldrh	r2, [r7, #16]
 8003e5c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d02b      	beq.n	8003ec0 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e76:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695a      	ldr	r2, [r3, #20]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0201 	bic.w	r2, r2, #1
 8003e86:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e96:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68da      	ldr	r2, [r3, #12]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0210 	bic.w	r2, r2, #16
 8003eb4:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fd fd38 	bl	8001930 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	4619      	mov	r1, r3
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 f876 	bl	8003fc2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003ed6:	e051      	b.n	8003f7c <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d047      	beq.n	8003f80 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003ef0:	8a7b      	ldrh	r3, [r7, #18]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d044      	beq.n	8003f80 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68da      	ldr	r2, [r3, #12]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f04:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695a      	ldr	r2, [r3, #20]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0201 	bic.w	r2, r2, #1
 8003f14:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0210 	bic.w	r2, r2, #16
 8003f32:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f34:	8a7b      	ldrh	r3, [r7, #18]
 8003f36:	4619      	mov	r1, r3
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f842 	bl	8003fc2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003f3e:	e01f      	b.n	8003f80 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d008      	beq.n	8003f5c <HAL_UART_IRQHandler+0x324>
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f8c9 	bl	80040ec <UART_Transmit_IT>
    return;
 8003f5a:	e012      	b.n	8003f82 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00d      	beq.n	8003f82 <HAL_UART_IRQHandler+0x34a>
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f90a 	bl	800418a <UART_EndTransmit_IT>
    return;
 8003f76:	e004      	b.n	8003f82 <HAL_UART_IRQHandler+0x34a>
    return;
 8003f78:	bf00      	nop
 8003f7a:	e002      	b.n	8003f82 <HAL_UART_IRQHandler+0x34a>
      return;
 8003f7c:	bf00      	nop
 8003f7e:	e000      	b.n	8003f82 <HAL_UART_IRQHandler+0x34a>
      return;
 8003f80:	bf00      	nop
  }
}
 8003f82:	3728      	adds	r7, #40	; 0x28
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	080040c5 	.word	0x080040c5

08003f8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bc80      	pop	{r7}
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe8:	e02c      	b.n	8004044 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff0:	d028      	beq.n	8004044 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d007      	beq.n	8004008 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ff8:	f7fd fb3a 	bl	8001670 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	429a      	cmp	r2, r3
 8004006:	d21d      	bcs.n	8004044 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004016:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	695a      	ldr	r2, [r3, #20]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e00f      	b.n	8004064 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	4013      	ands	r3, r2
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	429a      	cmp	r2, r3
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	429a      	cmp	r2, r3
 8004060:	d0c3      	beq.n	8003fea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68da      	ldr	r2, [r3, #12]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004082:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0201 	bic.w	r2, r2, #1
 8004092:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	2b01      	cmp	r3, #1
 800409a:	d107      	bne.n	80040ac <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0210 	bic.w	r2, r2, #16
 80040aa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f7ff ff66 	bl	8003fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040e4:	bf00      	nop
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b21      	cmp	r3, #33	; 0x21
 80040fe:	d13e      	bne.n	800417e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004108:	d114      	bne.n	8004134 <UART_Transmit_IT+0x48>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d110      	bne.n	8004134 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	881b      	ldrh	r3, [r3, #0]
 800411c:	461a      	mov	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004126:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	1c9a      	adds	r2, r3, #2
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	621a      	str	r2, [r3, #32]
 8004132:	e008      	b.n	8004146 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	1c59      	adds	r1, r3, #1
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6211      	str	r1, [r2, #32]
 800413e:	781a      	ldrb	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29b      	uxth	r3, r3
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	4619      	mov	r1, r3
 8004154:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10f      	bne.n	800417a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004168:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004178:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e000      	b.n	8004180 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr

0800418a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff feee 	bl	8003f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b086      	sub	sp, #24
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b22      	cmp	r3, #34	; 0x22
 80041cc:	f040 8099 	bne.w	8004302 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041d8:	d117      	bne.n	800420a <UART_Receive_IT+0x50>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d113      	bne.n	800420a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	1c9a      	adds	r2, r3, #2
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	629a      	str	r2, [r3, #40]	; 0x28
 8004208:	e026      	b.n	8004258 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800421c:	d007      	beq.n	800422e <UART_Receive_IT+0x74>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <UART_Receive_IT+0x82>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	b2da      	uxtb	r2, r3
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	701a      	strb	r2, [r3, #0]
 800423a:	e008      	b.n	800424e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	b2db      	uxtb	r3, r3
 8004244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004248:	b2da      	uxtb	r2, r3
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29b      	uxth	r3, r3
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	4619      	mov	r1, r3
 8004266:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004268:	2b00      	cmp	r3, #0
 800426a:	d148      	bne.n	80042fe <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0220 	bic.w	r2, r2, #32
 800427a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800428a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695a      	ldr	r2, [r3, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0201 	bic.w	r2, r2, #1
 800429a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d123      	bne.n	80042f4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0210 	bic.w	r2, r2, #16
 80042c0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b10      	cmp	r3, #16
 80042ce:	d10a      	bne.n	80042e6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042ea:	4619      	mov	r1, r3
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff fe68 	bl	8003fc2 <HAL_UARTEx_RxEventCallback>
 80042f2:	e002      	b.n	80042fa <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff fe52 	bl	8003f9e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e002      	b.n	8004304 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80042fe:	2300      	movs	r3, #0
 8004300:	e000      	b.n	8004304 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004302:	2302      	movs	r3, #2
  }
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	695b      	ldr	r3, [r3, #20]
 8004338:	4313      	orrs	r3, r2
 800433a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004346:	f023 030c 	bic.w	r3, r3, #12
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6812      	ldr	r2, [r2, #0]
 800434e:	68b9      	ldr	r1, [r7, #8]
 8004350:	430b      	orrs	r3, r1
 8004352:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	699a      	ldr	r2, [r3, #24]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a2c      	ldr	r2, [pc, #176]	; (8004420 <UART_SetConfig+0x114>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d103      	bne.n	800437c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004374:	f7fe fcf2 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	e002      	b.n	8004382 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800437c:	f7fe fcda 	bl	8002d34 <HAL_RCC_GetPCLK1Freq>
 8004380:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	009a      	lsls	r2, r3, #2
 800438c:	441a      	add	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	fbb2 f3f3 	udiv	r3, r2, r3
 8004398:	4a22      	ldr	r2, [pc, #136]	; (8004424 <UART_SetConfig+0x118>)
 800439a:	fba2 2303 	umull	r2, r3, r2, r3
 800439e:	095b      	lsrs	r3, r3, #5
 80043a0:	0119      	lsls	r1, r3, #4
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4613      	mov	r3, r2
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	4413      	add	r3, r2
 80043aa:	009a      	lsls	r2, r3, #2
 80043ac:	441a      	add	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043b8:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <UART_SetConfig+0x118>)
 80043ba:	fba3 0302 	umull	r0, r3, r3, r2
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	2064      	movs	r0, #100	; 0x64
 80043c2:	fb00 f303 	mul.w	r3, r0, r3
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	3332      	adds	r3, #50	; 0x32
 80043cc:	4a15      	ldr	r2, [pc, #84]	; (8004424 <UART_SetConfig+0x118>)
 80043ce:	fba2 2303 	umull	r2, r3, r2, r3
 80043d2:	095b      	lsrs	r3, r3, #5
 80043d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043d8:	4419      	add	r1, r3
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	009a      	lsls	r2, r3, #2
 80043e4:	441a      	add	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80043f0:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <UART_SetConfig+0x118>)
 80043f2:	fba3 0302 	umull	r0, r3, r3, r2
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	2064      	movs	r0, #100	; 0x64
 80043fa:	fb00 f303 	mul.w	r3, r0, r3
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	3332      	adds	r3, #50	; 0x32
 8004404:	4a07      	ldr	r2, [pc, #28]	; (8004424 <UART_SetConfig+0x118>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	f003 020f 	and.w	r2, r3, #15
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	440a      	add	r2, r1
 8004416:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004418:	bf00      	nop
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40013800 	.word	0x40013800
 8004424:	51eb851f 	.word	0x51eb851f

08004428 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  //retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
	FATFS_LinkDriver(&SD0_Driver, SD0Path);
 800442c:	4908      	ldr	r1, [pc, #32]	; (8004450 <MX_FATFS_Init+0x28>)
 800442e:	4809      	ldr	r0, [pc, #36]	; (8004454 <MX_FATFS_Init+0x2c>)
 8004430:	f004 fe72 	bl	8009118 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD1_Driver, SD1Path);
 8004434:	4908      	ldr	r1, [pc, #32]	; (8004458 <MX_FATFS_Init+0x30>)
 8004436:	4809      	ldr	r0, [pc, #36]	; (800445c <MX_FATFS_Init+0x34>)
 8004438:	f004 fe6e 	bl	8009118 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD2_Driver, SD2Path);
 800443c:	4908      	ldr	r1, [pc, #32]	; (8004460 <MX_FATFS_Init+0x38>)
 800443e:	4809      	ldr	r0, [pc, #36]	; (8004464 <MX_FATFS_Init+0x3c>)
 8004440:	f004 fe6a 	bl	8009118 <FATFS_LinkDriver>
	FATFS_LinkDriver(&SD3_Driver, SD3Path);
 8004444:	4908      	ldr	r1, [pc, #32]	; (8004468 <MX_FATFS_Init+0x40>)
 8004446:	4809      	ldr	r0, [pc, #36]	; (800446c <MX_FATFS_Init+0x44>)
 8004448:	f004 fe66 	bl	8009118 <FATFS_LinkDriver>


  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800444c:	bf00      	nop
 800444e:	bd80      	pop	{r7, pc}
 8004450:	20001058 	.word	0x20001058
 8004454:	2000000c 	.word	0x2000000c
 8004458:	2000105c 	.word	0x2000105c
 800445c:	20000020 	.word	0x20000020
 8004460:	20001060 	.word	0x20001060
 8004464:	20000034 	.word	0x20000034
 8004468:	20001064 	.word	0x20001064
 800446c:	20000048 	.word	0x20000048

08004470 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004474:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004476:	4618      	mov	r0, r3
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr

0800447e <SD0_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_initialize (BYTE pdrv)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b082      	sub	sp, #8
 8004482:	af00      	add	r7, sp, #0
 8004484:	4603      	mov	r3, r0
 8004486:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 8004488:	2000      	movs	r0, #0
 800448a:	f7fc fbcb 	bl	8000c24 <sd_ss_set_active>
	return USER_initialize(pdrv);
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 f839 	bl	8004508 <USER_initialize>
 8004496:	4603      	mov	r3, r0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <SD1_initialize>:
DSTATUS SD1_initialize (BYTE pdrv)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 80044aa:	2001      	movs	r0, #1
 80044ac:	f7fc fbba 	bl	8000c24 <sd_ss_set_active>
	return USER_initialize(pdrv);
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 f828 	bl	8004508 <USER_initialize>
 80044b8:	4603      	mov	r3, r0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <SD2_initialize>:
DSTATUS SD2_initialize (BYTE pdrv)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b082      	sub	sp, #8
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	4603      	mov	r3, r0
 80044ca:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 80044cc:	2002      	movs	r0, #2
 80044ce:	f7fc fba9 	bl	8000c24 <sd_ss_set_active>
	return USER_initialize(pdrv);
 80044d2:	79fb      	ldrb	r3, [r7, #7]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 f817 	bl	8004508 <USER_initialize>
 80044da:	4603      	mov	r3, r0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3708      	adds	r7, #8
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <SD3_initialize>:
DSTATUS SD3_initialize (BYTE pdrv)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	4603      	mov	r3, r0
 80044ec:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 80044ee:	2003      	movs	r0, #3
 80044f0:	f7fc fb98 	bl	8000c24 <sd_ss_set_active>
	return USER_initialize(pdrv);
 80044f4:	79fb      	ldrb	r3, [r7, #7]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 f806 	bl	8004508 <USER_initialize>
 80044fc:	4603      	mov	r3, r0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <USER_initialize>:

DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	//SD_PowerOn();
	SS_SD_SELECT();
 8004512:	f7fc fba5 	bl	8000c60 <sd_ss_active_pin_down>
	if(sd_ini()==0) {Stat &= ~STA_NOINIT;} // STA_NOINIT
 8004516:	f7fc fc25 	bl	8000d64 <sd_ini>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d107      	bne.n	8004530 <USER_initialize+0x28>
 8004520:	4b08      	ldr	r3, [pc, #32]	; (8004544 <USER_initialize+0x3c>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f023 0301 	bic.w	r3, r3, #1
 800452a:	b2da      	uxtb	r2, r3
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <USER_initialize+0x3c>)
 800452e:	701a      	strb	r2, [r3, #0]
	SS_SD_DESELECT();
 8004530:	f7fc fba6 	bl	8000c80 <sd_ss_active_pin_up>
    return Stat;
 8004534:	4b03      	ldr	r3, [pc, #12]	; (8004544 <USER_initialize+0x3c>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800453a:	4618      	mov	r0, r3
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	20000009 	.word	0x20000009

08004548 <SD0_status>:
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS SD0_status (BYTE pdrv)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	4603      	mov	r3, r0
 8004550:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(0);
 8004552:	2000      	movs	r0, #0
 8004554:	f7fc fb66 	bl	8000c24 <sd_ss_set_active>
	return USER_status(pdrv);
 8004558:	79fb      	ldrb	r3, [r7, #7]
 800455a:	4618      	mov	r0, r3
 800455c:	f000 f838 	bl	80045d0 <USER_status>
 8004560:	4603      	mov	r3, r0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <SD1_status>:
DSTATUS SD1_status (BYTE pdrv)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b082      	sub	sp, #8
 800456e:	af00      	add	r7, sp, #0
 8004570:	4603      	mov	r3, r0
 8004572:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(1);
 8004574:	2001      	movs	r0, #1
 8004576:	f7fc fb55 	bl	8000c24 <sd_ss_set_active>
	return USER_status(pdrv);
 800457a:	79fb      	ldrb	r3, [r7, #7]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 f827 	bl	80045d0 <USER_status>
 8004582:	4603      	mov	r3, r0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3708      	adds	r7, #8
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <SD2_status>:
DSTATUS SD2_status (BYTE pdrv)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(2);
 8004596:	2002      	movs	r0, #2
 8004598:	f7fc fb44 	bl	8000c24 <sd_ss_set_active>
	return USER_status(pdrv);
 800459c:	79fb      	ldrb	r3, [r7, #7]
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 f816 	bl	80045d0 <USER_status>
 80045a4:	4603      	mov	r3, r0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <SD3_status>:
DSTATUS SD3_status (BYTE pdrv)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	4603      	mov	r3, r0
 80045b6:	71fb      	strb	r3, [r7, #7]
	sd_ss_set_active(3);
 80045b8:	2003      	movs	r0, #3
 80045ba:	f7fc fb33 	bl	8000c24 <sd_ss_set_active>
	return USER_status(pdrv);
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 f805 	bl	80045d0 <USER_status>
 80045c6:	4603      	mov	r3, r0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <USER_status>:

DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	SS_SD_SELECT();
 80045da:	f7fc fb41 	bl	8000c60 <sd_ss_active_pin_down>
	if (pdrv) return STA_NOINIT;
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d001      	beq.n	80045e8 <USER_status+0x18>
 80045e4:	2301      	movs	r3, #1
 80045e6:	e004      	b.n	80045f2 <USER_status+0x22>
	SS_SD_DESELECT();
 80045e8:	f7fc fb4a 	bl	8000c80 <sd_ss_active_pin_up>
    return Stat;
 80045ec:	4b03      	ldr	r3, [pc, #12]	; (80045fc <USER_status+0x2c>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20000009 	.word	0x20000009

08004600 <SD0_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DSTATUS SD0_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	607a      	str	r2, [r7, #4]
 800460a:	603b      	str	r3, [r7, #0]
 800460c:	4603      	mov	r3, r0
 800460e:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 8004610:	2000      	movs	r0, #0
 8004612:	f7fc fb07 	bl	8000c24 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8004616:	7bf8      	ldrb	r0, [r7, #15]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	f000 f847 	bl	80046b0 <USER_read>
 8004622:	4603      	mov	r3, r0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <SD1_read>:
DSTATUS SD1_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	4603      	mov	r3, r0
 800463a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 800463c:	2001      	movs	r0, #1
 800463e:	f7fc faf1 	bl	8000c24 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 8004642:	7bf8      	ldrb	r0, [r7, #15]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	f000 f831 	bl	80046b0 <USER_read>
 800464e:	4603      	mov	r3, r0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <SD2_read>:
DSTATUS SD2_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	4603      	mov	r3, r0
 8004666:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 8004668:	2002      	movs	r0, #2
 800466a:	f7fc fadb 	bl	8000c24 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800466e:	7bf8      	ldrb	r0, [r7, #15]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	f000 f81b 	bl	80046b0 <USER_read>
 800467a:	4603      	mov	r3, r0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <SD3_read>:
DSTATUS SD3_read (BYTE pdrv,BYTE *buff,DWORD sector,UINT count)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	603b      	str	r3, [r7, #0]
 8004690:	4603      	mov	r3, r0
 8004692:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 8004694:	2003      	movs	r0, #3
 8004696:	f7fc fac5 	bl	8000c24 <sd_ss_set_active>
	return USER_read(pdrv,buff,sector,count);
 800469a:	7bf8      	ldrb	r0, [r7, #15]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	f000 f805 	bl	80046b0 <USER_read>
 80046a6:	4603      	mov	r3, r0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	4603      	mov	r3, r0
 80046be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	SS_SD_SELECT();
 80046c0:	f7fc face 	bl	8000c60 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d102      	bne.n	80046d0 <USER_read+0x20>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <USER_read+0x24>
 80046d0:	2304      	movs	r3, #4
 80046d2:	e043      	b.n	800475c <USER_read+0xac>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80046d4:	4b23      	ldr	r3, [pc, #140]	; (8004764 <USER_read+0xb4>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <USER_read+0x36>
 80046e2:	2303      	movs	r3, #3
 80046e4:	e03a      	b.n	800475c <USER_read+0xac>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 80046e6:	4b20      	ldr	r3, [pc, #128]	; (8004768 <USER_read+0xb8>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d102      	bne.n	80046fa <USER_read+0x4a>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	025b      	lsls	r3, r3, #9
 80046f8:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d106      	bne.n	800470e <USER_read+0x5e>
	{
	  SD_Read_Block(buff,sector); //Ð¡Ñ‡Ð¸Ñ‚Ð°ÐµÐ¼ Ð±Ð»Ð¾Ðº Ð² Ð±ÑƒÑ„ÐµÑ€
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	68b8      	ldr	r0, [r7, #8]
 8004704:	f7fc fc65 	bl	8000fd2 <SD_Read_Block>
	  count = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	e01c      	b.n	8004748 <USER_read+0x98>
	}
	else /* Multiple block read */
	{
		do{
			SD_Read_Block((BYTE*)buff,sector);
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	68b8      	ldr	r0, [r7, #8]
 8004712:	f7fc fc5e 	bl	8000fd2 <SD_Read_Block>
			if (!(sdinfo.type & 4)){
 8004716:	4b14      	ldr	r3, [pc, #80]	; (8004768 <USER_read+0xb8>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	b2db      	uxtb	r3, r3
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d104      	bne.n	800472e <USER_read+0x7e>
				sector+=512;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800472a:	607b      	str	r3, [r7, #4]
 800472c:	e002      	b.n	8004734 <USER_read+0x84>
			}
			else sector++;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3301      	adds	r3, #1
 8004732:	607b      	str	r3, [r7, #4]
			buff+=512;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800473a:	60bb      	str	r3, [r7, #8]
			count--;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	3b01      	subs	r3, #1
 8004740:	603b      	str	r3, [r7, #0]
		}while(count>0);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e2      	bne.n	800470e <USER_read+0x5e>
	}
	SPI_Release();
 8004748:	f7fc fc3c 	bl	8000fc4 <SPI_Release>
	SS_SD_DESELECT();
 800474c:	f7fc fa98 	bl	8000c80 <sd_ss_active_pin_up>
	return count ? RES_ERROR : RES_OK;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	bf14      	ite	ne
 8004756:	2301      	movne	r3, #1
 8004758:	2300      	moveq	r3, #0
 800475a:	b2db      	uxtb	r3, r3
    return RES_OK;
  /* USER CODE END READ */
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20000009 	.word	0x20000009
 8004768:	20000de0 	.word	0x20000de0

0800476c <SD0_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DSTATUS SD0_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	607a      	str	r2, [r7, #4]
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	4603      	mov	r3, r0
 800477a:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(0);
 800477c:	2000      	movs	r0, #0
 800477e:	f7fc fa51 	bl	8000c24 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8004782:	7bf8      	ldrb	r0, [r7, #15]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	f000 f847 	bl	800481c <USER_write>
 800478e:	4603      	mov	r3, r0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <SD1_write>:
DSTATUS SD1_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	607a      	str	r2, [r7, #4]
 80047a2:	603b      	str	r3, [r7, #0]
 80047a4:	4603      	mov	r3, r0
 80047a6:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(1);
 80047a8:	2001      	movs	r0, #1
 80047aa:	f7fc fa3b 	bl	8000c24 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 80047ae:	7bf8      	ldrb	r0, [r7, #15]
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	f000 f831 	bl	800481c <USER_write>
 80047ba:	4603      	mov	r3, r0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <SD2_write>:
DSTATUS SD2_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	4603      	mov	r3, r0
 80047d2:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(2);
 80047d4:	2002      	movs	r0, #2
 80047d6:	f7fc fa25 	bl	8000c24 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 80047da:	7bf8      	ldrb	r0, [r7, #15]
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	f000 f81b 	bl	800481c <USER_write>
 80047e6:	4603      	mov	r3, r0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <SD3_write>:
DSTATUS SD3_write (BYTE pdrv,const BYTE *buff,DWORD sector,UINT count)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	4603      	mov	r3, r0
 80047fe:	73fb      	strb	r3, [r7, #15]
	sd_ss_set_active(3);
 8004800:	2003      	movs	r0, #3
 8004802:	f7fc fa0f 	bl	8000c24 <sd_ss_set_active>
	return USER_write(pdrv,buff,sector,count);
 8004806:	7bf8      	ldrb	r0, [r7, #15]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	f000 f805 	bl	800481c <USER_write>
 8004812:	4603      	mov	r3, r0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	60b9      	str	r1, [r7, #8]
 8004824:	607a      	str	r2, [r7, #4]
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	4603      	mov	r3, r0
 800482a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	uint8_t res;
	SS_SD_SELECT();
 800482c:	f7fc fa18 	bl	8000c60 <sd_ss_active_pin_down>
	if (pdrv || !count) return RES_PARERR;
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d102      	bne.n	800483c <USER_write+0x20>
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <USER_write+0x24>
 800483c:	2304      	movs	r3, #4
 800483e:	e02c      	b.n	800489a <USER_write+0x7e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004840:	4b18      	ldr	r3, [pc, #96]	; (80048a4 <USER_write+0x88>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d001      	beq.n	8004852 <USER_write+0x36>
 800484e:	2303      	movs	r3, #3
 8004850:	e023      	b.n	800489a <USER_write+0x7e>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8004852:	4b14      	ldr	r3, [pc, #80]	; (80048a4 <USER_write+0x88>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	b2db      	uxtb	r3, r3
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d001      	beq.n	8004864 <USER_write+0x48>
 8004860:	2302      	movs	r3, #2
 8004862:	e01a      	b.n	800489a <USER_write+0x7e>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 8004864:	4b10      	ldr	r3, [pc, #64]	; (80048a8 <USER_write+0x8c>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d102      	bne.n	8004878 <USER_write+0x5c>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	025b      	lsls	r3, r3, #9
 8004876:	607b      	str	r3, [r7, #4]
  	res=SD_Write_Blocks((BYTE*)buff,sector,count);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	b29b      	uxth	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	68b8      	ldr	r0, [r7, #8]
 8004882:	f7fc fbeb 	bl	800105c <SD_Write_Blocks>
 8004886:	4603      	mov	r3, r0
 8004888:	75fb      	strb	r3, [r7, #23]
	SS_SD_DESELECT();
 800488a:	f7fc f9f9 	bl	8000c80 <sd_ss_active_pin_up>

	return res ? RES_ERROR : RES_OK;
 800488e:	7dfb      	ldrb	r3, [r7, #23]
 8004890:	2b00      	cmp	r3, #0
 8004892:	bf14      	ite	ne
 8004894:	2301      	movne	r3, #1
 8004896:	2300      	moveq	r3, #0
 8004898:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800489a:	4618      	mov	r0, r3
 800489c:	3718      	adds	r7, #24
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000009 	.word	0x20000009
 80048a8:	20000de0 	.word	0x20000de0

080048ac <SD0_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DSTATUS SD0_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	603a      	str	r2, [r7, #0]
 80048b6:	71fb      	strb	r3, [r7, #7]
 80048b8:	460b      	mov	r3, r1
 80048ba:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(0);
 80048bc:	2000      	movs	r0, #0
 80048be:	f7fc f9b1 	bl	8000c24 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 80048c2:	79b9      	ldrb	r1, [r7, #6]
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 f847 	bl	800495c <USER_ioctl>
 80048ce:	4603      	mov	r3, r0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <SD1_ioctl>:
DSTATUS SD1_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	4603      	mov	r3, r0
 80048e0:	603a      	str	r2, [r7, #0]
 80048e2:	71fb      	strb	r3, [r7, #7]
 80048e4:	460b      	mov	r3, r1
 80048e6:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(1);
 80048e8:	2001      	movs	r0, #1
 80048ea:	f7fc f99b 	bl	8000c24 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 80048ee:	79b9      	ldrb	r1, [r7, #6]
 80048f0:	79fb      	ldrb	r3, [r7, #7]
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 f831 	bl	800495c <USER_ioctl>
 80048fa:	4603      	mov	r3, r0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <SD2_ioctl>:
DSTATUS SD2_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	4603      	mov	r3, r0
 800490c:	603a      	str	r2, [r7, #0]
 800490e:	71fb      	strb	r3, [r7, #7]
 8004910:	460b      	mov	r3, r1
 8004912:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(2);
 8004914:	2002      	movs	r0, #2
 8004916:	f7fc f985 	bl	8000c24 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 800491a:	79b9      	ldrb	r1, [r7, #6]
 800491c:	79fb      	ldrb	r3, [r7, #7]
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f000 f81b 	bl	800495c <USER_ioctl>
 8004926:	4603      	mov	r3, r0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <SD3_ioctl>:
DSTATUS SD3_ioctl (BYTE pdrv,BYTE cmd,void *buff)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	4603      	mov	r3, r0
 8004938:	603a      	str	r2, [r7, #0]
 800493a:	71fb      	strb	r3, [r7, #7]
 800493c:	460b      	mov	r3, r1
 800493e:	71bb      	strb	r3, [r7, #6]
	sd_ss_set_active(3);
 8004940:	2003      	movs	r0, #3
 8004942:	f7fc f96f 	bl	8000c24 <sd_ss_set_active>
	return USER_ioctl(pdrv,cmd,buff);
 8004946:	79b9      	ldrb	r1, [r7, #6]
 8004948:	79fb      	ldrb	r3, [r7, #7]
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	4618      	mov	r0, r3
 800494e:	f000 f805 	bl	800495c <USER_ioctl>
 8004952:	4603      	mov	r3, r0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	603a      	str	r2, [r7, #0]
 8004966:	71fb      	strb	r3, [r7, #7]
 8004968:	460b      	mov	r3, r1
 800496a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res;
	sd_ss_set_active(pdrv);
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	4618      	mov	r0, r3
 8004970:	f7fc f958 	bl	8000c24 <sd_ss_set_active>
	SS_SD_SELECT();
 8004974:	f7fc f974 	bl	8000c60 <sd_ss_active_pin_down>
	if (pdrv) return RES_PARERR;
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <USER_ioctl+0x26>
 800497e:	2304      	movs	r3, #4
 8004980:	e02a      	b.n	80049d8 <USER_ioctl+0x7c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004982:	4b17      	ldr	r3, [pc, #92]	; (80049e0 <USER_ioctl+0x84>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	b2db      	uxtb	r3, r3
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <USER_ioctl+0x38>
 8004990:	2303      	movs	r3, #3
 8004992:	e021      	b.n	80049d8 <USER_ioctl+0x7c>
	res = RES_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	73fb      	strb	r3, [r7, #15]
	switch (cmd)
 8004998:	79bb      	ldrb	r3, [r7, #6]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d002      	beq.n	80049a4 <USER_ioctl+0x48>
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d00a      	beq.n	80049b8 <USER_ioctl+0x5c>
 80049a2:	e010      	b.n	80049c6 <USER_ioctl+0x6a>
	{
	  case CTRL_SYNC : /* Flush dirty buffer if present */
	    SS_SD_SELECT();
 80049a4:	f7fc f95c 	bl	8000c60 <sd_ss_active_pin_down>
	    if (SPI_wait_ready() == 0xFF)
 80049a8:	f7fc fa96 	bl	8000ed8 <SPI_wait_ready>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2bff      	cmp	r3, #255	; 0xff
 80049b0:	d10c      	bne.n	80049cc <USER_ioctl+0x70>
	    res = RES_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	73fb      	strb	r3, [r7, #15]
	    break;
 80049b6:	e009      	b.n	80049cc <USER_ioctl+0x70>
	  case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
	    *(WORD*)buff = 512;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049be:	801a      	strh	r2, [r3, #0]
	    res = RES_OK;
 80049c0:	2300      	movs	r3, #0
 80049c2:	73fb      	strb	r3, [r7, #15]
	    break;
 80049c4:	e003      	b.n	80049ce <USER_ioctl+0x72>
	  default:
	    res = RES_PARERR;
 80049c6:	2304      	movs	r3, #4
 80049c8:	73fb      	strb	r3, [r7, #15]
 80049ca:	e000      	b.n	80049ce <USER_ioctl+0x72>
	    break;
 80049cc:	bf00      	nop
	}
	SPI_Release();
 80049ce:	f7fc faf9 	bl	8000fc4 <SPI_Release>
	SS_SD_DESELECT();
 80049d2:	f7fc f955 	bl	8000c80 <sd_ss_active_pin_up>
    return res;
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20000009 	.word	0x20000009

080049e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	4603      	mov	r3, r0
 80049ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	4a08      	ldr	r2, [pc, #32]	; (8004a14 <disk_status+0x30>)
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	79fa      	ldrb	r2, [r7, #7]
 80049fc:	4905      	ldr	r1, [pc, #20]	; (8004a14 <disk_status+0x30>)
 80049fe:	440a      	add	r2, r1
 8004a00:	7d12      	ldrb	r2, [r2, #20]
 8004a02:	4610      	mov	r0, r2
 8004a04:	4798      	blx	r3
 8004a06:	4603      	mov	r3, r0
 8004a08:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	200014fc 	.word	0x200014fc

08004a18 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004a26:	79fb      	ldrb	r3, [r7, #7]
 8004a28:	4a0d      	ldr	r2, [pc, #52]	; (8004a60 <disk_initialize+0x48>)
 8004a2a:	5cd3      	ldrb	r3, [r2, r3]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d111      	bne.n	8004a54 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004a30:	79fb      	ldrb	r3, [r7, #7]
 8004a32:	4a0b      	ldr	r2, [pc, #44]	; (8004a60 <disk_initialize+0x48>)
 8004a34:	2101      	movs	r1, #1
 8004a36:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004a38:	79fb      	ldrb	r3, [r7, #7]
 8004a3a:	4a09      	ldr	r2, [pc, #36]	; (8004a60 <disk_initialize+0x48>)
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	79fa      	ldrb	r2, [r7, #7]
 8004a46:	4906      	ldr	r1, [pc, #24]	; (8004a60 <disk_initialize+0x48>)
 8004a48:	440a      	add	r2, r1
 8004a4a:	7d12      	ldrb	r2, [r2, #20]
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4798      	blx	r3
 8004a50:	4603      	mov	r3, r0
 8004a52:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	200014fc 	.word	0x200014fc

08004a64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004a64:	b590      	push	{r4, r7, lr}
 8004a66:	b087      	sub	sp, #28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
 8004a6e:	603b      	str	r3, [r7, #0]
 8004a70:	4603      	mov	r3, r0
 8004a72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	4a0a      	ldr	r2, [pc, #40]	; (8004aa0 <disk_read+0x3c>)
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	689c      	ldr	r4, [r3, #8]
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	4a07      	ldr	r2, [pc, #28]	; (8004aa0 <disk_read+0x3c>)
 8004a84:	4413      	add	r3, r2
 8004a86:	7d18      	ldrb	r0, [r3, #20]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	68b9      	ldr	r1, [r7, #8]
 8004a8e:	47a0      	blx	r4
 8004a90:	4603      	mov	r3, r0
 8004a92:	75fb      	strb	r3, [r7, #23]
  return res;
 8004a94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd90      	pop	{r4, r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	200014fc 	.word	0x200014fc

08004aa4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004aa4:	b590      	push	{r4, r7, lr}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	607a      	str	r2, [r7, #4]
 8004aae:	603b      	str	r3, [r7, #0]
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	4a0a      	ldr	r2, [pc, #40]	; (8004ae0 <disk_write+0x3c>)
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	68dc      	ldr	r4, [r3, #12]
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	4a07      	ldr	r2, [pc, #28]	; (8004ae0 <disk_write+0x3c>)
 8004ac4:	4413      	add	r3, r2
 8004ac6:	7d18      	ldrb	r0, [r3, #20]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	47a0      	blx	r4
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	75fb      	strb	r3, [r7, #23]
  return res;
 8004ad4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd90      	pop	{r4, r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	200014fc 	.word	0x200014fc

08004ae4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	603a      	str	r2, [r7, #0]
 8004aee:	71fb      	strb	r3, [r7, #7]
 8004af0:	460b      	mov	r3, r1
 8004af2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	4a09      	ldr	r2, [pc, #36]	; (8004b1c <disk_ioctl+0x38>)
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	79fa      	ldrb	r2, [r7, #7]
 8004b02:	4906      	ldr	r1, [pc, #24]	; (8004b1c <disk_ioctl+0x38>)
 8004b04:	440a      	add	r2, r1
 8004b06:	7d10      	ldrb	r0, [r2, #20]
 8004b08:	79b9      	ldrb	r1, [r7, #6]
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	4798      	blx	r3
 8004b0e:	4603      	mov	r3, r0
 8004b10:	73fb      	strb	r3, [r7, #15]
  return res;
 8004b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	200014fc 	.word	0x200014fc

08004b20 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004b30:	89fb      	ldrh	r3, [r7, #14]
 8004b32:	021b      	lsls	r3, r3, #8
 8004b34:	b21a      	sxth	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	b21b      	sxth	r3, r3
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	b21b      	sxth	r3, r3
 8004b40:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004b42:	89fb      	ldrh	r3, [r7, #14]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr

08004b4e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004b4e:	b480      	push	{r7}
 8004b50:	b085      	sub	sp, #20
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3303      	adds	r3, #3
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	021b      	lsls	r3, r3, #8
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	3202      	adds	r2, #2
 8004b66:	7812      	ldrb	r2, [r2, #0]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	3201      	adds	r2, #1
 8004b74:	7812      	ldrb	r2, [r2, #0]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	021b      	lsls	r3, r3, #8
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	7812      	ldrb	r2, [r2, #0]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
	return rv;
 8004b86:	68fb      	ldr	r3, [r7, #12]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bc80      	pop	{r7}
 8004b90:	4770      	bx	lr

08004b92 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8004b92:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004b96:	b09d      	sub	sp, #116	; 0x74
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 8004b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b9e:	3307      	adds	r3, #7
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	469a      	mov	sl, r3
 8004ba8:	4693      	mov	fp, r2
 8004baa:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 8004bae:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004bb2:	f04f 0000 	mov.w	r0, #0
 8004bb6:	f04f 0100 	mov.w	r1, #0
 8004bba:	0219      	lsls	r1, r3, #8
 8004bbc:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004bc0:	0210      	lsls	r0, r2, #8
 8004bc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bc4:	3306      	adds	r3, #6
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2200      	movs	r2, #0
 8004bcc:	461c      	mov	r4, r3
 8004bce:	4615      	mov	r5, r2
 8004bd0:	ea40 0804 	orr.w	r8, r0, r4
 8004bd4:	ea41 0905 	orr.w	r9, r1, r5
 8004bd8:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 8004bdc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004be0:	f04f 0000 	mov.w	r0, #0
 8004be4:	f04f 0100 	mov.w	r1, #0
 8004be8:	0219      	lsls	r1, r3, #8
 8004bea:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004bee:	0210      	lsls	r0, r2, #8
 8004bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bf2:	3305      	adds	r3, #5
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bfc:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004bfe:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8004c02:	461a      	mov	r2, r3
 8004c04:	4302      	orrs	r2, r0
 8004c06:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c08:	4623      	mov	r3, r4
 8004c0a:	430b      	orrs	r3, r1
 8004c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c0e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8004c12:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 8004c16:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004c1a:	f04f 0000 	mov.w	r0, #0
 8004c1e:	f04f 0100 	mov.w	r1, #0
 8004c22:	0219      	lsls	r1, r3, #8
 8004c24:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004c28:	0210      	lsls	r0, r2, #8
 8004c2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2200      	movs	r2, #0
 8004c34:	653b      	str	r3, [r7, #80]	; 0x50
 8004c36:	657a      	str	r2, [r7, #84]	; 0x54
 8004c38:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4302      	orrs	r2, r0
 8004c40:	623a      	str	r2, [r7, #32]
 8004c42:	4623      	mov	r3, r4
 8004c44:	430b      	orrs	r3, r1
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
 8004c48:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004c4c:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 8004c50:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004c54:	f04f 0000 	mov.w	r0, #0
 8004c58:	f04f 0100 	mov.w	r1, #0
 8004c5c:	0219      	lsls	r1, r3, #8
 8004c5e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004c62:	0210      	lsls	r0, r2, #8
 8004c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c66:	3303      	adds	r3, #3
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c70:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004c72:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004c76:	461a      	mov	r2, r3
 8004c78:	4302      	orrs	r2, r0
 8004c7a:	61ba      	str	r2, [r7, #24]
 8004c7c:	4623      	mov	r3, r4
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	61fb      	str	r3, [r7, #28]
 8004c82:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004c86:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 8004c8a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004c8e:	f04f 0000 	mov.w	r0, #0
 8004c92:	f04f 0100 	mov.w	r1, #0
 8004c96:	0219      	lsls	r1, r3, #8
 8004c98:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004c9c:	0210      	lsls	r0, r2, #8
 8004c9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ca0:	3302      	adds	r3, #2
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	643b      	str	r3, [r7, #64]	; 0x40
 8004caa:	647a      	str	r2, [r7, #68]	; 0x44
 8004cac:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	4302      	orrs	r2, r0
 8004cb4:	613a      	str	r2, [r7, #16]
 8004cb6:	4623      	mov	r3, r4
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004cc0:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 8004cc4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004cc8:	f04f 0200 	mov.w	r2, #0
 8004ccc:	f04f 0300 	mov.w	r3, #0
 8004cd0:	020b      	lsls	r3, r1, #8
 8004cd2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004cd6:	0202      	lsls	r2, r0, #8
 8004cd8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004cda:	3101      	adds	r1, #1
 8004cdc:	7809      	ldrb	r1, [r1, #0]
 8004cde:	b2c9      	uxtb	r1, r1
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ce4:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004ce6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004cea:	4604      	mov	r4, r0
 8004cec:	4314      	orrs	r4, r2
 8004cee:	60bc      	str	r4, [r7, #8]
 8004cf0:	4319      	orrs	r1, r3
 8004cf2:	60f9      	str	r1, [r7, #12]
 8004cf4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004cf8:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 8004cfc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	020b      	lsls	r3, r1, #8
 8004d0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d0e:	0202      	lsls	r2, r0, #8
 8004d10:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004d12:	7809      	ldrb	r1, [r1, #0]
 8004d14:	b2c9      	uxtb	r1, r1
 8004d16:	2000      	movs	r0, #0
 8004d18:	6339      	str	r1, [r7, #48]	; 0x30
 8004d1a:	6378      	str	r0, [r7, #52]	; 0x34
 8004d1c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8004d20:	4604      	mov	r4, r0
 8004d22:	4314      	orrs	r4, r2
 8004d24:	603c      	str	r4, [r7, #0]
 8004d26:	4319      	orrs	r1, r3
 8004d28:	6079      	str	r1, [r7, #4]
 8004d2a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004d2e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 8004d32:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 8004d36:	4610      	mov	r0, r2
 8004d38:	4619      	mov	r1, r3
 8004d3a:	3774      	adds	r7, #116	; 0x74
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004d42:	4770      	bx	lr

08004d44 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	1c5a      	adds	r2, r3, #1
 8004d54:	607a      	str	r2, [r7, #4]
 8004d56:	887a      	ldrh	r2, [r7, #2]
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	701a      	strb	r2, [r3, #0]
 8004d5c:	887b      	ldrh	r3, [r7, #2]
 8004d5e:	0a1b      	lsrs	r3, r3, #8
 8004d60:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	887a      	ldrh	r2, [r7, #2]
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr

08004d78 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	607a      	str	r2, [r7, #4]
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	0a1b      	lsrs	r3, r3, #8
 8004d92:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	1c5a      	adds	r2, r3, #1
 8004d98:	607a      	str	r2, [r7, #4]
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	701a      	strb	r2, [r3, #0]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	0a1b      	lsrs	r3, r3, #8
 8004da4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	607a      	str	r2, [r7, #4]
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	0a1b      	lsrs	r3, r3, #8
 8004db6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	607a      	str	r2, [r7, #4]
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	701a      	strb	r2, [r3, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bc80      	pop	{r7}
 8004dcc:	4770      	bx	lr

08004dce <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b085      	sub	sp, #20
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	60f8      	str	r0, [r7, #12]
 8004dd6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	60fa      	str	r2, [r7, #12]
 8004de0:	783a      	ldrb	r2, [r7, #0]
 8004de2:	701a      	strb	r2, [r3, #0]
 8004de4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	0a02      	lsrs	r2, r0, #8
 8004df2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004df6:	0a0b      	lsrs	r3, r1, #8
 8004df8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	60fa      	str	r2, [r7, #12]
 8004e02:	783a      	ldrb	r2, [r7, #0]
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e0a:	f04f 0200 	mov.w	r2, #0
 8004e0e:	f04f 0300 	mov.w	r3, #0
 8004e12:	0a02      	lsrs	r2, r0, #8
 8004e14:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004e18:	0a0b      	lsrs	r3, r1, #8
 8004e1a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	60fa      	str	r2, [r7, #12]
 8004e24:	783a      	ldrb	r2, [r7, #0]
 8004e26:	701a      	strb	r2, [r3, #0]
 8004e28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e2c:	f04f 0200 	mov.w	r2, #0
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	0a02      	lsrs	r2, r0, #8
 8004e36:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004e3a:	0a0b      	lsrs	r3, r1, #8
 8004e3c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	60fa      	str	r2, [r7, #12]
 8004e46:	783a      	ldrb	r2, [r7, #0]
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	0a02      	lsrs	r2, r0, #8
 8004e58:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004e5c:	0a0b      	lsrs	r3, r1, #8
 8004e5e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	60fa      	str	r2, [r7, #12]
 8004e68:	783a      	ldrb	r2, [r7, #0]
 8004e6a:	701a      	strb	r2, [r3, #0]
 8004e6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	0a02      	lsrs	r2, r0, #8
 8004e7a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004e7e:	0a0b      	lsrs	r3, r1, #8
 8004e80:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	1c5a      	adds	r2, r3, #1
 8004e88:	60fa      	str	r2, [r7, #12]
 8004e8a:	783a      	ldrb	r2, [r7, #0]
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	0a02      	lsrs	r2, r0, #8
 8004e9c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004ea0:	0a0b      	lsrs	r3, r1, #8
 8004ea2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	60fa      	str	r2, [r7, #12]
 8004eac:	783a      	ldrb	r2, [r7, #0]
 8004eae:	701a      	strb	r2, [r3, #0]
 8004eb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	0a02      	lsrs	r2, r0, #8
 8004ebe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004ec2:	0a0b      	lsrs	r3, r1, #8
 8004ec4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	60fa      	str	r2, [r7, #12]
 8004ece:	783a      	ldrb	r2, [r7, #0]
 8004ed0:	701a      	strb	r2, [r3, #0]
}
 8004ed2:	bf00      	nop
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bc80      	pop	{r7}
 8004eda:	4770      	bx	lr

08004edc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004edc:	b480      	push	{r7}
 8004ede:	b087      	sub	sp, #28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00d      	beq.n	8004f12 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	1c53      	adds	r3, r2, #1
 8004efa:	613b      	str	r3, [r7, #16]
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	1c59      	adds	r1, r3, #1
 8004f00:	6179      	str	r1, [r7, #20]
 8004f02:	7812      	ldrb	r2, [r2, #0]
 8004f04:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	607b      	str	r3, [r7, #4]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f1      	bne.n	8004ef6 <mem_cpy+0x1a>
	}
}
 8004f12:	bf00      	nop
 8004f14:	371c      	adds	r7, #28
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr

08004f1c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	617a      	str	r2, [r7, #20]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	607b      	str	r3, [r7, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1f3      	bne.n	8004f2c <mem_set+0x10>
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bc80      	pop	{r7}
 8004f4e:	4770      	bx	lr

08004f50 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004f50:	b480      	push	{r7}
 8004f52:	b089      	sub	sp, #36	; 0x24
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	61fb      	str	r3, [r7, #28]
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	1c5a      	adds	r2, r3, #1
 8004f6c:	61fa      	str	r2, [r7, #28]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	4619      	mov	r1, r3
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	61ba      	str	r2, [r7, #24]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	1acb      	subs	r3, r1, r3
 8004f7c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3b01      	subs	r3, #1
 8004f82:	607b      	str	r3, [r7, #4]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <mem_cmp+0x40>
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0eb      	beq.n	8004f68 <mem_cmp+0x18>

	return r;
 8004f90:	697b      	ldr	r3, [r7, #20]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3724      	adds	r7, #36	; 0x24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr

08004f9c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004fa6:	e002      	b.n	8004fae <chk_chr+0x12>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3301      	adds	r3, #1
 8004fac:	607b      	str	r3, [r7, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <chk_chr+0x26>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d1f2      	bne.n	8004fa8 <chk_chr+0xc>
	return *str;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr

08004fd0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60bb      	str	r3, [r7, #8]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	60fb      	str	r3, [r7, #12]
 8004fe2:	e029      	b.n	8005038 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004fe4:	4a26      	ldr	r2, [pc, #152]	; (8005080 <chk_lock+0xb0>)
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	4413      	add	r3, r2
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01d      	beq.n	800502e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004ff2:	4a23      	ldr	r2, [pc, #140]	; (8005080 <chk_lock+0xb0>)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	4413      	add	r3, r2
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d116      	bne.n	8005032 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005004:	4a1e      	ldr	r2, [pc, #120]	; (8005080 <chk_lock+0xb0>)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	4413      	add	r3, r2
 800500c:	3304      	adds	r3, #4
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005014:	429a      	cmp	r2, r3
 8005016:	d10c      	bne.n	8005032 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005018:	4a19      	ldr	r2, [pc, #100]	; (8005080 <chk_lock+0xb0>)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	4413      	add	r3, r2
 8005020:	3308      	adds	r3, #8
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8005028:	429a      	cmp	r2, r3
 800502a:	d102      	bne.n	8005032 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800502c:	e007      	b.n	800503e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800502e:	2301      	movs	r3, #1
 8005030:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	3301      	adds	r3, #1
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d9d2      	bls.n	8004fe4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2b02      	cmp	r3, #2
 8005042:	d109      	bne.n	8005058 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d102      	bne.n	8005050 <chk_lock+0x80>
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b02      	cmp	r3, #2
 800504e:	d101      	bne.n	8005054 <chk_lock+0x84>
 8005050:	2300      	movs	r3, #0
 8005052:	e010      	b.n	8005076 <chk_lock+0xa6>
 8005054:	2312      	movs	r3, #18
 8005056:	e00e      	b.n	8005076 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d108      	bne.n	8005070 <chk_lock+0xa0>
 800505e:	4a08      	ldr	r2, [pc, #32]	; (8005080 <chk_lock+0xb0>)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	011b      	lsls	r3, r3, #4
 8005064:	4413      	add	r3, r2
 8005066:	330c      	adds	r3, #12
 8005068:	881b      	ldrh	r3, [r3, #0]
 800506a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800506e:	d101      	bne.n	8005074 <chk_lock+0xa4>
 8005070:	2310      	movs	r3, #16
 8005072:	e000      	b.n	8005076 <chk_lock+0xa6>
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr
 8005080:	2000107c 	.word	0x2000107c

08005084 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800508a:	2300      	movs	r3, #0
 800508c:	607b      	str	r3, [r7, #4]
 800508e:	e002      	b.n	8005096 <enq_lock+0x12>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3301      	adds	r3, #1
 8005094:	607b      	str	r3, [r7, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d806      	bhi.n	80050aa <enq_lock+0x26>
 800509c:	4a08      	ldr	r2, [pc, #32]	; (80050c0 <enq_lock+0x3c>)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	4413      	add	r3, r2
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f2      	bne.n	8005090 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	bf14      	ite	ne
 80050b0:	2301      	movne	r3, #1
 80050b2:	2300      	moveq	r3, #0
 80050b4:	b2db      	uxtb	r3, r3
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bc80      	pop	{r7}
 80050be:	4770      	bx	lr
 80050c0:	2000107c 	.word	0x2000107c

080050c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80050ce:	2300      	movs	r3, #0
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	e01f      	b.n	8005114 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80050d4:	4a41      	ldr	r2, [pc, #260]	; (80051dc <inc_lock+0x118>)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	4413      	add	r3, r2
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d113      	bne.n	800510e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80050e6:	4a3d      	ldr	r2, [pc, #244]	; (80051dc <inc_lock+0x118>)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	4413      	add	r3, r2
 80050ee:	3304      	adds	r3, #4
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d109      	bne.n	800510e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80050fa:	4a38      	ldr	r2, [pc, #224]	; (80051dc <inc_lock+0x118>)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	4413      	add	r3, r2
 8005102:	3308      	adds	r3, #8
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800510a:	429a      	cmp	r2, r3
 800510c:	d006      	beq.n	800511c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3301      	adds	r3, #1
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d9dc      	bls.n	80050d4 <inc_lock+0x10>
 800511a:	e000      	b.n	800511e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800511c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b02      	cmp	r3, #2
 8005122:	d132      	bne.n	800518a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	e002      	b.n	8005130 <inc_lock+0x6c>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3301      	adds	r3, #1
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d806      	bhi.n	8005144 <inc_lock+0x80>
 8005136:	4a29      	ldr	r2, [pc, #164]	; (80051dc <inc_lock+0x118>)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	4413      	add	r3, r2
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1f2      	bne.n	800512a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d101      	bne.n	800514e <inc_lock+0x8a>
 800514a:	2300      	movs	r3, #0
 800514c:	e040      	b.n	80051d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	4922      	ldr	r1, [pc, #136]	; (80051dc <inc_lock+0x118>)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	011b      	lsls	r3, r3, #4
 8005158:	440b      	add	r3, r1
 800515a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	491e      	ldr	r1, [pc, #120]	; (80051dc <inc_lock+0x118>)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	440b      	add	r3, r1
 8005168:	3304      	adds	r3, #4
 800516a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005170:	491a      	ldr	r1, [pc, #104]	; (80051dc <inc_lock+0x118>)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	440b      	add	r3, r1
 8005178:	3308      	adds	r3, #8
 800517a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800517c:	4a17      	ldr	r2, [pc, #92]	; (80051dc <inc_lock+0x118>)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	4413      	add	r3, r2
 8005184:	330c      	adds	r3, #12
 8005186:	2200      	movs	r2, #0
 8005188:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d009      	beq.n	80051a4 <inc_lock+0xe0>
 8005190:	4a12      	ldr	r2, [pc, #72]	; (80051dc <inc_lock+0x118>)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	4413      	add	r3, r2
 8005198:	330c      	adds	r3, #12
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <inc_lock+0xe0>
 80051a0:	2300      	movs	r3, #0
 80051a2:	e015      	b.n	80051d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d108      	bne.n	80051bc <inc_lock+0xf8>
 80051aa:	4a0c      	ldr	r2, [pc, #48]	; (80051dc <inc_lock+0x118>)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	4413      	add	r3, r2
 80051b2:	330c      	adds	r3, #12
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	3301      	adds	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	e001      	b.n	80051c0 <inc_lock+0xfc>
 80051bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80051c0:	4906      	ldr	r1, [pc, #24]	; (80051dc <inc_lock+0x118>)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	011b      	lsls	r3, r3, #4
 80051c6:	440b      	add	r3, r1
 80051c8:	330c      	adds	r3, #12
 80051ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3301      	adds	r3, #1
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc80      	pop	{r7}
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	2000107c 	.word	0x2000107c

080051e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	607b      	str	r3, [r7, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d825      	bhi.n	8005240 <dec_lock+0x60>
		n = Files[i].ctr;
 80051f4:	4a16      	ldr	r2, [pc, #88]	; (8005250 <dec_lock+0x70>)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	4413      	add	r3, r2
 80051fc:	330c      	adds	r3, #12
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005202:	89fb      	ldrh	r3, [r7, #14]
 8005204:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005208:	d101      	bne.n	800520e <dec_lock+0x2e>
 800520a:	2300      	movs	r3, #0
 800520c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800520e:	89fb      	ldrh	r3, [r7, #14]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <dec_lock+0x3a>
 8005214:	89fb      	ldrh	r3, [r7, #14]
 8005216:	3b01      	subs	r3, #1
 8005218:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800521a:	4a0d      	ldr	r2, [pc, #52]	; (8005250 <dec_lock+0x70>)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	4413      	add	r3, r2
 8005222:	330c      	adds	r3, #12
 8005224:	89fa      	ldrh	r2, [r7, #14]
 8005226:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005228:	89fb      	ldrh	r3, [r7, #14]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d105      	bne.n	800523a <dec_lock+0x5a>
 800522e:	4a08      	ldr	r2, [pc, #32]	; (8005250 <dec_lock+0x70>)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	4413      	add	r3, r2
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	737b      	strb	r3, [r7, #13]
 800523e:	e001      	b.n	8005244 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005240:	2302      	movs	r3, #2
 8005242:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005244:	7b7b      	ldrb	r3, [r7, #13]
}
 8005246:	4618      	mov	r0, r3
 8005248:	3714      	adds	r7, #20
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr
 8005250:	2000107c 	.word	0x2000107c

08005254 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	e010      	b.n	8005284 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005262:	4a0d      	ldr	r2, [pc, #52]	; (8005298 <clear_lock+0x44>)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	4413      	add	r3, r2
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	429a      	cmp	r2, r3
 8005270:	d105      	bne.n	800527e <clear_lock+0x2a>
 8005272:	4a09      	ldr	r2, [pc, #36]	; (8005298 <clear_lock+0x44>)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	4413      	add	r3, r2
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3301      	adds	r3, #1
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d9eb      	bls.n	8005262 <clear_lock+0xe>
	}
}
 800528a:	bf00      	nop
 800528c:	bf00      	nop
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	bc80      	pop	{r7}
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	2000107c 	.word	0x2000107c

0800529c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	78db      	ldrb	r3, [r3, #3]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d034      	beq.n	800531a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	7858      	ldrb	r0, [r3, #1]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80052c0:	2301      	movs	r3, #1
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	f7ff fbee 	bl	8004aa4 <disk_write>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d002      	beq.n	80052d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	73fb      	strb	r3, [r7, #15]
 80052d2:	e022      	b.n	800531a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	1ad2      	subs	r2, r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d217      	bcs.n	800531a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	789b      	ldrb	r3, [r3, #2]
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	e010      	b.n	8005314 <sync_window+0x78>
					wsect += fs->fsize;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4413      	add	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	7858      	ldrb	r0, [r3, #1]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005306:	2301      	movs	r3, #1
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	f7ff fbcb 	bl	8004aa4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	3b01      	subs	r3, #1
 8005312:	613b      	str	r3, [r7, #16]
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d8eb      	bhi.n	80052f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800531a:	7bfb      	ldrb	r3, [r7, #15]
}
 800531c:	4618      	mov	r0, r3
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	429a      	cmp	r2, r3
 800533a:	d01b      	beq.n	8005374 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7ff ffad 	bl	800529c <sync_window>
 8005342:	4603      	mov	r3, r0
 8005344:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005346:	7bfb      	ldrb	r3, [r7, #15]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d113      	bne.n	8005374 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	7858      	ldrb	r0, [r3, #1]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005356:	2301      	movs	r3, #1
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	f7ff fb83 	bl	8004a64 <disk_read>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d004      	beq.n	800536e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005364:	f04f 33ff 	mov.w	r3, #4294967295
 8005368:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800536a:	2301      	movs	r3, #1
 800536c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8005374:	7bfb      	ldrb	r3, [r7, #15]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7ff ff87 	bl	800529c <sync_window>
 800538e:	4603      	mov	r3, r0
 8005390:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005392:	7bfb      	ldrb	r3, [r7, #15]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d158      	bne.n	800544a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b03      	cmp	r3, #3
 800539e:	d148      	bne.n	8005432 <sync_fs+0xb2>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	791b      	ldrb	r3, [r3, #4]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d144      	bne.n	8005432 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3338      	adds	r3, #56	; 0x38
 80053ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053b0:	2100      	movs	r1, #0
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff fdb2 	bl	8004f1c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3338      	adds	r3, #56	; 0x38
 80053bc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80053c0:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7ff fcbd 	bl	8004d44 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	3338      	adds	r3, #56	; 0x38
 80053ce:	4921      	ldr	r1, [pc, #132]	; (8005454 <sync_fs+0xd4>)
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff fcd1 	bl	8004d78 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3338      	adds	r3, #56	; 0x38
 80053da:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80053de:	491e      	ldr	r1, [pc, #120]	; (8005458 <sync_fs+0xd8>)
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7ff fcc9 	bl	8004d78 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3338      	adds	r3, #56	; 0x38
 80053ea:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	4619      	mov	r1, r3
 80053f4:	4610      	mov	r0, r2
 80053f6:	f7ff fcbf 	bl	8004d78 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3338      	adds	r3, #56	; 0x38
 80053fe:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	4619      	mov	r1, r3
 8005408:	4610      	mov	r0, r2
 800540a:	f7ff fcb5 	bl	8004d78 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	7858      	ldrb	r0, [r3, #1]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005426:	2301      	movs	r3, #1
 8005428:	f7ff fb3c 	bl	8004aa4 <disk_write>
			fs->fsi_flag = 0;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	785b      	ldrb	r3, [r3, #1]
 8005436:	2200      	movs	r2, #0
 8005438:	2100      	movs	r1, #0
 800543a:	4618      	mov	r0, r3
 800543c:	f7ff fb52 	bl	8004ae4 <disk_ioctl>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <sync_fs+0xca>
 8005446:	2301      	movs	r3, #1
 8005448:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800544a:	7bfb      	ldrb	r3, [r7, #15]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	41615252 	.word	0x41615252
 8005458:	61417272 	.word	0x61417272

0800545c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	3b02      	subs	r3, #2
 800546a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	3b02      	subs	r3, #2
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d301      	bcc.n	800547c <clust2sect+0x20>
 8005478:	2300      	movs	r3, #0
 800547a:	e008      	b.n	800548e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	895b      	ldrh	r3, [r3, #10]
 8005480:	461a      	mov	r2, r3
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	fb03 f202 	mul.w	r2, r3, r2
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548c:	4413      	add	r3, r2
}
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr

08005498 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b088      	sub	sp, #32
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80054a2:	6879      	ldr	r1, [r7, #4]
 80054a4:	6809      	ldr	r1, [r1, #0]
 80054a6:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80054a8:	6839      	ldr	r1, [r7, #0]
 80054aa:	2901      	cmp	r1, #1
 80054ac:	d904      	bls.n	80054b8 <get_fat+0x20>
 80054ae:	69b9      	ldr	r1, [r7, #24]
 80054b0:	69c9      	ldr	r1, [r1, #28]
 80054b2:	6838      	ldr	r0, [r7, #0]
 80054b4:	4288      	cmp	r0, r1
 80054b6:	d302      	bcc.n	80054be <get_fat+0x26>
		val = 1;	/* Internal error */
 80054b8:	2301      	movs	r3, #1
 80054ba:	61fb      	str	r3, [r7, #28]
 80054bc:	e101      	b.n	80056c2 <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80054be:	f04f 31ff 	mov.w	r1, #4294967295
 80054c2:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 80054c4:	69b9      	ldr	r1, [r7, #24]
 80054c6:	7809      	ldrb	r1, [r1, #0]
 80054c8:	3901      	subs	r1, #1
 80054ca:	2903      	cmp	r1, #3
 80054cc:	f200 80ed 	bhi.w	80056aa <get_fat+0x212>
 80054d0:	a001      	add	r0, pc, #4	; (adr r0, 80054d8 <get_fat+0x40>)
 80054d2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80054d6:	bf00      	nop
 80054d8:	080054e9 	.word	0x080054e9
 80054dc:	08005571 	.word	0x08005571
 80054e0:	080055a7 	.word	0x080055a7
 80054e4:	080055df 	.word	0x080055df
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	085b      	lsrs	r3, r3, #1
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4413      	add	r3, r2
 80054f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	0a5b      	lsrs	r3, r3, #9
 80054fe:	4413      	add	r3, r2
 8005500:	4619      	mov	r1, r3
 8005502:	69b8      	ldr	r0, [r7, #24]
 8005504:	f7ff ff0e 	bl	8005324 <move_window>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	f040 80d0 	bne.w	80056b0 <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	60fa      	str	r2, [r7, #12]
 8005516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	4413      	add	r3, r2
 800551e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005522:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	0a5b      	lsrs	r3, r3, #9
 800552c:	4413      	add	r3, r2
 800552e:	4619      	mov	r1, r3
 8005530:	69b8      	ldr	r0, [r7, #24]
 8005532:	f7ff fef7 	bl	8005324 <move_window>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	f040 80bb 	bne.w	80056b4 <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4413      	add	r3, r2
 8005548:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	461a      	mov	r2, r3
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4313      	orrs	r3, r2
 8005554:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <get_fat+0xce>
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	091b      	lsrs	r3, r3, #4
 8005564:	e002      	b.n	800556c <get_fat+0xd4>
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800556c:	61fb      	str	r3, [r7, #28]
			break;
 800556e:	e0a8      	b.n	80056c2 <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	0a1b      	lsrs	r3, r3, #8
 8005578:	4413      	add	r3, r2
 800557a:	4619      	mov	r1, r3
 800557c:	69b8      	ldr	r0, [r7, #24]
 800557e:	f7ff fed1 	bl	8005324 <move_window>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	f040 8097 	bne.w	80056b8 <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005598:	4413      	add	r3, r2
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff fac0 	bl	8004b20 <ld_word>
 80055a0:	4603      	mov	r3, r0
 80055a2:	61fb      	str	r3, [r7, #28]
			break;
 80055a4:	e08d      	b.n	80056c2 <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	09db      	lsrs	r3, r3, #7
 80055ae:	4413      	add	r3, r2
 80055b0:	4619      	mov	r1, r3
 80055b2:	69b8      	ldr	r0, [r7, #24]
 80055b4:	f7ff feb6 	bl	8005324 <move_window>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d17e      	bne.n	80056bc <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80055cc:	4413      	add	r3, r2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff fabd 	bl	8004b4e <ld_dword>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80055da:	61fb      	str	r3, [r7, #28]
			break;
 80055dc:	e071      	b.n	80056c2 <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80055de:	6879      	ldr	r1, [r7, #4]
 80055e0:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80055e4:	4301      	orrs	r1, r0
 80055e6:	d060      	beq.n	80056aa <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	6889      	ldr	r1, [r1, #8]
 80055ec:	6838      	ldr	r0, [r7, #0]
 80055ee:	1a41      	subs	r1, r0, r1
 80055f0:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 80055f8:	1e42      	subs	r2, r0, #1
 80055fa:	f141 33ff 	adc.w	r3, r1, #4294967295
 80055fe:	f04f 0000 	mov.w	r0, #0
 8005602:	f04f 0100 	mov.w	r1, #0
 8005606:	0a50      	lsrs	r0, r2, #9
 8005608:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800560c:	0a59      	lsrs	r1, r3, #9
 800560e:	4602      	mov	r2, r0
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	895b      	ldrh	r3, [r3, #10]
 8005614:	fbb2 f3f3 	udiv	r3, r2, r3
 8005618:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	79db      	ldrb	r3, [r3, #7]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d10e      	bne.n	8005640 <get_fat+0x1a8>
					if (cofs <= clen) {
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	429a      	cmp	r2, r3
 8005628:	d80a      	bhi.n	8005640 <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	429a      	cmp	r2, r3
 8005630:	d002      	beq.n	8005638 <get_fat+0x1a0>
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	3301      	adds	r3, #1
 8005636:	e001      	b.n	800563c <get_fat+0x1a4>
 8005638:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800563c:	61fb      	str	r3, [r7, #28]
						break;
 800563e:	e040      	b.n	80056c2 <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	79db      	ldrb	r3, [r3, #7]
 8005644:	2b03      	cmp	r3, #3
 8005646:	d108      	bne.n	800565a <get_fat+0x1c2>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	429a      	cmp	r2, r3
 8005650:	d203      	bcs.n	800565a <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	3301      	adds	r3, #1
 8005656:	61fb      	str	r3, [r7, #28]
					break;
 8005658:	e033      	b.n	80056c2 <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	79db      	ldrb	r3, [r3, #7]
 800565e:	2b02      	cmp	r3, #2
 8005660:	d023      	beq.n	80056aa <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800566a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800566e:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8005670:	e027      	b.n	80056c2 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	09db      	lsrs	r3, r3, #7
 800567a:	4413      	add	r3, r2
 800567c:	4619      	mov	r1, r3
 800567e:	69b8      	ldr	r0, [r7, #24]
 8005680:	f7ff fe50 	bl	8005324 <move_window>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d11a      	bne.n	80056c0 <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005698:	4413      	add	r3, r2
 800569a:	4618      	mov	r0, r3
 800569c:	f7ff fa57 	bl	8004b4e <ld_dword>
 80056a0:	4603      	mov	r3, r0
 80056a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056a6:	61fb      	str	r3, [r7, #28]
					break;
 80056a8:	e00b      	b.n	80056c2 <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80056aa:	2301      	movs	r3, #1
 80056ac:	61fb      	str	r3, [r7, #28]
 80056ae:	e008      	b.n	80056c2 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056b0:	bf00      	nop
 80056b2:	e006      	b.n	80056c2 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056b4:	bf00      	nop
 80056b6:	e004      	b.n	80056c2 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80056b8:	bf00      	nop
 80056ba:	e002      	b.n	80056c2 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80056bc:	bf00      	nop
 80056be:	e000      	b.n	80056c2 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80056c0:	bf00      	nop
		}
	}

	return val;
 80056c2:	69fb      	ldr	r3, [r7, #28]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3720      	adds	r7, #32
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80056cc:	b590      	push	{r4, r7, lr}
 80056ce:	b089      	sub	sp, #36	; 0x24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80056d8:	2302      	movs	r3, #2
 80056da:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	f240 80d6 	bls.w	8005890 <put_fat+0x1c4>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	f080 80d0 	bcs.w	8005890 <put_fat+0x1c4>
		switch (fs->fs_type) {
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	f300 80d4 	bgt.w	80058a2 <put_fat+0x1d6>
 80056fa:	2b03      	cmp	r3, #3
 80056fc:	f280 8093 	bge.w	8005826 <put_fat+0x15a>
 8005700:	2b01      	cmp	r3, #1
 8005702:	d002      	beq.n	800570a <put_fat+0x3e>
 8005704:	2b02      	cmp	r3, #2
 8005706:	d06e      	beq.n	80057e6 <put_fat+0x11a>
 8005708:	e0cb      	b.n	80058a2 <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	085b      	lsrs	r3, r3, #1
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	4413      	add	r3, r2
 8005716:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	0a5b      	lsrs	r3, r3, #9
 8005720:	4413      	add	r3, r2
 8005722:	4619      	mov	r1, r3
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f7ff fdfd 	bl	8005324 <move_window>
 800572a:	4603      	mov	r3, r0
 800572c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800572e:	7ffb      	ldrb	r3, [r7, #31]
 8005730:	2b00      	cmp	r3, #0
 8005732:	f040 80af 	bne.w	8005894 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	1c59      	adds	r1, r3, #1
 8005740:	61b9      	str	r1, [r7, #24]
 8005742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005746:	4413      	add	r3, r2
 8005748:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00d      	beq.n	8005770 <put_fat+0xa4>
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	b25b      	sxtb	r3, r3
 800575a:	f003 030f 	and.w	r3, r3, #15
 800575e:	b25a      	sxtb	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	b25b      	sxtb	r3, r3
 8005768:	4313      	orrs	r3, r2
 800576a:	b25b      	sxtb	r3, r3
 800576c:	b2db      	uxtb	r3, r3
 800576e:	e001      	b.n	8005774 <put_fat+0xa8>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	b2db      	uxtb	r3, r3
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	0a5b      	lsrs	r3, r3, #9
 8005786:	4413      	add	r3, r2
 8005788:	4619      	mov	r1, r3
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f7ff fdca 	bl	8005324 <move_window>
 8005790:	4603      	mov	r3, r0
 8005792:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005794:	7ffb      	ldrb	r3, [r7, #31]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d17e      	bne.n	8005898 <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a6:	4413      	add	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d003      	beq.n	80057bc <put_fat+0xf0>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	091b      	lsrs	r3, r3, #4
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	e00e      	b.n	80057da <put_fat+0x10e>
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	b25b      	sxtb	r3, r3
 80057c2:	f023 030f 	bic.w	r3, r3, #15
 80057c6:	b25a      	sxtb	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	0a1b      	lsrs	r3, r3, #8
 80057cc:	b25b      	sxtb	r3, r3
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	b25b      	sxtb	r3, r3
 80057d4:	4313      	orrs	r3, r2
 80057d6:	b25b      	sxtb	r3, r3
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2201      	movs	r2, #1
 80057e2:	70da      	strb	r2, [r3, #3]
			break;
 80057e4:	e05d      	b.n	80058a2 <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	0a1b      	lsrs	r3, r3, #8
 80057ee:	4413      	add	r3, r2
 80057f0:	4619      	mov	r1, r3
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f7ff fd96 	bl	8005324 <move_window>
 80057f8:	4603      	mov	r3, r0
 80057fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80057fc:	7ffb      	ldrb	r3, [r7, #31]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d14c      	bne.n	800589c <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005810:	4413      	add	r3, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	b292      	uxth	r2, r2
 8005816:	4611      	mov	r1, r2
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff fa93 	bl	8004d44 <st_word>
			fs->wflag = 1;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2201      	movs	r2, #1
 8005822:	70da      	strb	r2, [r3, #3]
			break;
 8005824:	e03d      	b.n	80058a2 <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	09db      	lsrs	r3, r3, #7
 800582e:	4413      	add	r3, r2
 8005830:	4619      	mov	r1, r3
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f7ff fd76 	bl	8005324 <move_window>
 8005838:	4603      	mov	r3, r0
 800583a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800583c:	7ffb      	ldrb	r3, [r7, #31]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d12e      	bne.n	80058a0 <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b04      	cmp	r3, #4
 8005848:	d012      	beq.n	8005870 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800585e:	4413      	add	r3, r2
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff f974 	bl	8004b4e <ld_dword>
 8005866:	4603      	mov	r3, r0
 8005868:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800586c:	4323      	orrs	r3, r4
 800586e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800587e:	4413      	add	r3, r2
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	4618      	mov	r0, r3
 8005884:	f7ff fa78 	bl	8004d78 <st_dword>
			fs->wflag = 1;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2201      	movs	r2, #1
 800588c:	70da      	strb	r2, [r3, #3]
			break;
 800588e:	e008      	b.n	80058a2 <put_fat+0x1d6>
		}
	}
 8005890:	bf00      	nop
 8005892:	e006      	b.n	80058a2 <put_fat+0x1d6>
			if (res != FR_OK) break;
 8005894:	bf00      	nop
 8005896:	e004      	b.n	80058a2 <put_fat+0x1d6>
			if (res != FR_OK) break;
 8005898:	bf00      	nop
 800589a:	e002      	b.n	80058a2 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800589c:	bf00      	nop
 800589e:	e000      	b.n	80058a2 <put_fat+0x1d6>
			if (res != FR_OK) break;
 80058a0:	bf00      	nop
	return res;
 80058a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3724      	adds	r7, #36	; 0x24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd90      	pop	{r4, r7, pc}

080058ac <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08a      	sub	sp, #40	; 0x28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	3b02      	subs	r3, #2
 80058bc:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	3b02      	subs	r3, #2
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d301      	bcc.n	80058ce <find_bitmap+0x22>
 80058ca:	2300      	movs	r3, #0
 80058cc:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	61fb      	str	r3, [r7, #28]
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	61bb      	str	r3, [r7, #24]
 80058d6:	2300      	movs	r3, #0
 80058d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	0b1b      	lsrs	r3, r3, #12
 80058e2:	4413      	add	r3, r2
 80058e4:	4619      	mov	r1, r3
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f7ff fd1c 	bl	8005324 <move_window>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d002      	beq.n	80058f8 <find_bitmap+0x4c>
 80058f2:	f04f 33ff 	mov.w	r3, #4294967295
 80058f6:	e051      	b.n	800599c <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	08db      	lsrs	r3, r3, #3
 80058fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005900:	623b      	str	r3, [r7, #32]
 8005902:	69fb      	ldr	r3, [r7, #28]
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	2201      	movs	r2, #1
 800590a:	fa02 f303 	lsl.w	r3, r2, r3
 800590e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	4413      	add	r3, r2
 8005918:	3338      	adds	r3, #56	; 0x38
 800591a:	781a      	ldrb	r2, [r3, #0]
 800591c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005920:	4013      	ands	r3, r2
 8005922:	74fb      	strb	r3, [r7, #19]
 8005924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	3301      	adds	r3, #1
 8005932:	61fb      	str	r3, [r7, #28]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	3b02      	subs	r3, #2
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	429a      	cmp	r2, r3
 800593e:	d307      	bcc.n	8005950 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 8005940:	2300      	movs	r3, #0
 8005942:	61fb      	str	r3, [r7, #28]
 8005944:	2300      	movs	r3, #0
 8005946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800594a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800594e:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8005950:	7cfb      	ldrb	r3, [r7, #19]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	3301      	adds	r3, #1
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	697a      	ldr	r2, [r7, #20]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	429a      	cmp	r2, r3
 8005962:	d106      	bne.n	8005972 <find_bitmap+0xc6>
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	3302      	adds	r3, #2
 8005968:	e018      	b.n	800599c <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	2300      	movs	r3, #0
 8005970:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8005972:	69fa      	ldr	r2, [r7, #28]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	429a      	cmp	r2, r3
 8005978:	d101      	bne.n	800597e <find_bitmap+0xd2>
 800597a:	2300      	movs	r3, #0
 800597c:	e00e      	b.n	800599c <find_bitmap+0xf0>
			} while (bm);
 800597e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1c5      	bne.n	8005912 <find_bitmap+0x66>
			bm = 1;
 8005986:	2301      	movs	r3, #1
 8005988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	3301      	adds	r3, #1
 8005990:	623b      	str	r3, [r7, #32]
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005998:	d3bb      	bcc.n	8005912 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800599a:	e79e      	b.n	80058da <find_bitmap+0x2e>
	}
}
 800599c:	4618      	mov	r0, r3
 800599e:	3728      	adds	r7, #40	; 0x28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	3b02      	subs	r3, #2
 80059b6:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	0b1b      	lsrs	r3, r3, #12
 80059c0:	4413      	add	r3, r2
 80059c2:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	08db      	lsrs	r3, r3, #3
 80059c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059cc:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f003 0307 	and.w	r3, r3, #7
 80059d4:	2201      	movs	r2, #1
 80059d6:	fa02 f303 	lsl.w	r3, r2, r3
 80059da:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	617a      	str	r2, [r7, #20]
 80059e2:	4619      	mov	r1, r3
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f7ff fc9d 	bl	8005324 <move_window>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <change_bitmap+0x50>
 80059f0:	2301      	movs	r3, #1
 80059f2:	e03d      	b.n	8005a70 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	4413      	add	r3, r2
 80059fa:	3338      	adds	r3, #56	; 0x38
 80059fc:	781a      	ldrb	r2, [r3, #0]
 80059fe:	7ffb      	ldrb	r3, [r7, #31]
 8005a00:	4013      	ands	r3, r2
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	bf14      	ite	ne
 8005a08:	2301      	movne	r3, #1
 8005a0a:	2300      	moveq	r3, #0
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	461a      	mov	r2, r3
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d101      	bne.n	8005a1a <change_bitmap+0x76>
 8005a16:	2302      	movs	r3, #2
 8005a18:	e02a      	b.n	8005a70 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	4413      	add	r3, r2
 8005a20:	3338      	adds	r3, #56	; 0x38
 8005a22:	781a      	ldrb	r2, [r3, #0]
 8005a24:	7ffb      	ldrb	r3, [r7, #31]
 8005a26:	4053      	eors	r3, r2
 8005a28:	b2d9      	uxtb	r1, r3
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	4413      	add	r3, r2
 8005a30:	3338      	adds	r3, #56	; 0x38
 8005a32:	460a      	mov	r2, r1
 8005a34:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	607b      	str	r3, [r7, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <change_bitmap+0xa8>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	e011      	b.n	8005a70 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 8005a4c:	7ffb      	ldrb	r3, [r7, #31]
 8005a4e:	005b      	lsls	r3, r3, #1
 8005a50:	77fb      	strb	r3, [r7, #31]
 8005a52:	7ffb      	ldrb	r3, [r7, #31]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1cd      	bne.n	80059f4 <change_bitmap+0x50>
			bm = 1;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	61bb      	str	r3, [r7, #24]
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a68:	d3c4      	bcc.n	80059f4 <change_bitmap+0x50>
		i = 0;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8005a6e:	e7b5      	b.n	80059dc <change_bitmap+0x38>
	}
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3720      	adds	r7, #32
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	79db      	ldrb	r3, [r3, #7]
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d121      	bne.n	8005acc <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	613b      	str	r3, [r7, #16]
 8005a94:	e014      	b.n	8005ac0 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	6979      	ldr	r1, [r7, #20]
 8005aa2:	f7ff fe13 	bl	80056cc <put_fat>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <fill_first_frag+0x3c>
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
 8005ab2:	e00c      	b.n	8005ace <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	3b01      	subs	r3, #1
 8005abe:	613b      	str	r3, [r7, #16]
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e7      	bne.n	8005a96 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b086      	sub	sp, #24
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8005ae2:	e020      	b.n	8005b26 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	1c59      	adds	r1, r3, #1
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d905      	bls.n	8005b06 <fill_last_frag+0x30>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	3302      	adds	r3, #2
 8005b04:	e000      	b.n	8005b08 <fill_last_frag+0x32>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	f7ff fddf 	bl	80056cc <put_fat>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8005b12:	7dfb      	ldrb	r3, [r7, #23]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <fill_last_frag+0x46>
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
 8005b1a:	e009      	b.n	8005b30 <fill_last_frag+0x5a>
		obj->n_frag--;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	1e5a      	subs	r2, r3, #1
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1da      	bne.n	8005ae4 <fill_last_frag+0xe>
	}
	return FR_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3718      	adds	r7, #24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08a      	sub	sp, #40	; 0x28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	627b      	str	r3, [r7, #36]	; 0x24
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d904      	bls.n	8005b66 <remove_chain+0x2e>
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d301      	bcc.n	8005b6a <remove_chain+0x32>
 8005b66:	2302      	movs	r3, #2
 8005b68:	e096      	b.n	8005c98 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d014      	beq.n	8005b9a <remove_chain+0x62>
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d103      	bne.n	8005b80 <remove_chain+0x48>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	79db      	ldrb	r3, [r3, #7]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d00c      	beq.n	8005b9a <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005b80:	f04f 32ff 	mov.w	r2, #4294967295
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	69b8      	ldr	r0, [r7, #24]
 8005b88:	f7ff fda0 	bl	80056cc <put_fat>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005b90:	7ffb      	ldrb	r3, [r7, #31]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <remove_chain+0x62>
 8005b96:	7ffb      	ldrb	r3, [r7, #31]
 8005b98:	e07e      	b.n	8005c98 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005b9a:	68b9      	ldr	r1, [r7, #8]
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f7ff fc7b 	bl	8005498 <get_fat>
 8005ba2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d055      	beq.n	8005c56 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <remove_chain+0x7c>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e071      	b.n	8005c98 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bba:	d101      	bne.n	8005bc0 <remove_chain+0x88>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e06b      	b.n	8005c98 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b04      	cmp	r3, #4
 8005bc6:	d00b      	beq.n	8005be0 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005bc8:	2200      	movs	r2, #0
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	69b8      	ldr	r0, [r7, #24]
 8005bce:	f7ff fd7d 	bl	80056cc <put_fat>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005bd6:	7ffb      	ldrb	r3, [r7, #31]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <remove_chain+0xa8>
 8005bdc:	7ffb      	ldrb	r3, [r7, #31]
 8005bde:	e05b      	b.n	8005c98 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	699a      	ldr	r2, [r3, #24]
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	3b02      	subs	r3, #2
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d20b      	bcs.n	8005c06 <remove_chain+0xce>
			fs->free_clst++;
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	699b      	ldr	r3, [r3, #24]
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	791b      	ldrb	r3, [r3, #4]
 8005bfc:	f043 0301 	orr.w	r3, r3, #1
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d102      	bne.n	8005c16 <remove_chain+0xde>
			ecl = nxt;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	623b      	str	r3, [r7, #32]
 8005c14:	e017      	b.n	8005c46 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d10f      	bne.n	8005c3e <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8005c1e:	6a3a      	ldr	r2, [r7, #32]
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	2300      	movs	r3, #0
 8005c28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c2a:	69b8      	ldr	r0, [r7, #24]
 8005c2c:	f7ff feba 	bl	80059a4 <change_bitmap>
 8005c30:	4603      	mov	r3, r0
 8005c32:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8005c34:	7ffb      	ldrb	r3, [r7, #31]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <remove_chain+0x106>
 8005c3a:	7ffb      	ldrb	r3, [r7, #31]
 8005c3c:	e02c      	b.n	8005c98 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	623b      	str	r3, [r7, #32]
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d3a2      	bcc.n	8005b9a <remove_chain+0x62>
 8005c54:	e000      	b.n	8005c58 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 8005c56:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d11a      	bne.n	8005c96 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d103      	bne.n	8005c6e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	71da      	strb	r2, [r3, #7]
 8005c6c:	e013      	b.n	8005c96 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	79db      	ldrb	r3, [r3, #7]
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	d10f      	bne.n	8005c96 <remove_chain+0x15e>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d30a      	bcc.n	8005c96 <remove_chain+0x15e>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	4413      	add	r3, r2
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d802      	bhi.n	8005c96 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2202      	movs	r2, #2
 8005c94:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3728      	adds	r7, #40	; 0x28
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b088      	sub	sp, #32
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10d      	bne.n	8005cd2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d004      	beq.n	8005ccc <create_chain+0x2c>
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d31b      	bcc.n	8005d04 <create_chain+0x64>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	61bb      	str	r3, [r7, #24]
 8005cd0:	e018      	b.n	8005d04 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005cd2:	6839      	ldr	r1, [r7, #0]
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7ff fbdf 	bl	8005498 <get_fat>
 8005cda:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d801      	bhi.n	8005ce6 <create_chain+0x46>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e0d9      	b.n	8005e9a <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cec:	d101      	bne.n	8005cf2 <create_chain+0x52>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	e0d3      	b.n	8005e9a <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	69db      	ldr	r3, [r3, #28]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d201      	bcs.n	8005d00 <create_chain+0x60>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	e0cc      	b.n	8005e9a <create_chain+0x1fa>
		scl = clst;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d164      	bne.n	8005dd6 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	69b9      	ldr	r1, [r7, #24]
 8005d10:	6938      	ldr	r0, [r7, #16]
 8005d12:	f7ff fdcb 	bl	80058ac <find_bitmap>
 8005d16:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <create_chain+0x86>
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d24:	d101      	bne.n	8005d2a <create_chain+0x8a>
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	e0b7      	b.n	8005e9a <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	69f9      	ldr	r1, [r7, #28]
 8005d30:	6938      	ldr	r0, [r7, #16]
 8005d32:	f7ff fe37 	bl	80059a4 <change_bitmap>
 8005d36:	4603      	mov	r3, r0
 8005d38:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 8005d3a:	7dfb      	ldrb	r3, [r7, #23]
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d101      	bne.n	8005d44 <create_chain+0xa4>
 8005d40:	2301      	movs	r3, #1
 8005d42:	e0aa      	b.n	8005e9a <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d102      	bne.n	8005d50 <create_chain+0xb0>
 8005d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d4e:	e0a4      	b.n	8005e9a <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d103      	bne.n	8005d5e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2202      	movs	r2, #2
 8005d5a:	71da      	strb	r2, [r3, #7]
 8005d5c:	e011      	b.n	8005d82 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	79db      	ldrb	r3, [r3, #7]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d10d      	bne.n	8005d82 <create_chain+0xe2>
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d008      	beq.n	8005d82 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	1ad2      	subs	r2, r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2203      	movs	r2, #3
 8005d80:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	79db      	ldrb	r3, [r3, #7]
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d064      	beq.n	8005e54 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	69fa      	ldr	r2, [r7, #28]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d10b      	bne.n	8005dac <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	69db      	ldr	r3, [r3, #28]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <create_chain+0x104>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	3301      	adds	r3, #1
 8005da2:	e000      	b.n	8005da6 <create_chain+0x106>
 8005da4:	2302      	movs	r3, #2
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	61d3      	str	r3, [r2, #28]
 8005daa:	e053      	b.n	8005e54 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	69db      	ldr	r3, [r3, #28]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d102      	bne.n	8005dba <create_chain+0x11a>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	6839      	ldr	r1, [r7, #0]
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7ff fe89 	bl	8005ad6 <fill_last_frag>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8005dc8:	7dfb      	ldrb	r3, [r7, #23]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d142      	bne.n	8005e54 <create_chain+0x1b4>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	61da      	str	r2, [r3, #28]
 8005dd4:	e03e      	b.n	8005e54 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	69fa      	ldr	r2, [r7, #28]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d307      	bcc.n	8005dfa <create_chain+0x15a>
				ncl = 2;
 8005dea:	2302      	movs	r3, #2
 8005dec:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d901      	bls.n	8005dfa <create_chain+0x15a>
 8005df6:	2300      	movs	r3, #0
 8005df8:	e04f      	b.n	8005e9a <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005dfa:	69f9      	ldr	r1, [r7, #28]
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7ff fb4b 	bl	8005498 <get_fat>
 8005e02:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00e      	beq.n	8005e28 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d003      	beq.n	8005e18 <create_chain+0x178>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e16:	d101      	bne.n	8005e1c <create_chain+0x17c>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	e03e      	b.n	8005e9a <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d1da      	bne.n	8005dda <create_chain+0x13a>
 8005e24:	2300      	movs	r3, #0
 8005e26:	e038      	b.n	8005e9a <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 8005e28:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e2e:	69f9      	ldr	r1, [r7, #28]
 8005e30:	6938      	ldr	r0, [r7, #16]
 8005e32:	f7ff fc4b 	bl	80056cc <put_fat>
 8005e36:	4603      	mov	r3, r0
 8005e38:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005e3a:	7dfb      	ldrb	r3, [r7, #23]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d109      	bne.n	8005e54 <create_chain+0x1b4>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d006      	beq.n	8005e54 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005e46:	69fa      	ldr	r2, [r7, #28]
 8005e48:	6839      	ldr	r1, [r7, #0]
 8005e4a:	6938      	ldr	r0, [r7, #16]
 8005e4c:	f7ff fc3e 	bl	80056cc <put_fat>
 8005e50:	4603      	mov	r3, r0
 8005e52:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005e54:	7dfb      	ldrb	r3, [r7, #23]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d116      	bne.n	8005e88 <create_chain+0x1e8>
		fs->last_clst = ncl;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	69fa      	ldr	r2, [r7, #28]
 8005e5e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	699a      	ldr	r2, [r3, #24]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	3b02      	subs	r3, #2
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d804      	bhi.n	8005e78 <create_chain+0x1d8>
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	1e5a      	subs	r2, r3, #1
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	791b      	ldrb	r3, [r3, #4]
 8005e7c:	f043 0301 	orr.w	r3, r3, #1
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	711a      	strb	r2, [r3, #4]
 8005e86:	e007      	b.n	8005e98 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005e88:	7dfb      	ldrb	r3, [r7, #23]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d102      	bne.n	8005e94 <create_chain+0x1f4>
 8005e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e92:	e000      	b.n	8005e96 <create_chain+0x1f6>
 8005e94:	2301      	movs	r3, #1
 8005e96:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005e98:	69fb      	ldr	r3, [r7, #28]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3720      	adds	r7, #32
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005ea2:	b5b0      	push	{r4, r5, r7, lr}
 8005ea4:	b088      	sub	sp, #32
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	60f8      	str	r0, [r7, #12]
 8005eaa:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb8:	3304      	adds	r3, #4
 8005eba:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005ebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ec0:	f04f 0000 	mov.w	r0, #0
 8005ec4:	f04f 0100 	mov.w	r1, #0
 8005ec8:	0a50      	lsrs	r0, r2, #9
 8005eca:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 8005ece:	0a59      	lsrs	r1, r3, #9
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	895b      	ldrh	r3, [r3, #10]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	461c      	mov	r4, r3
 8005eda:	4615      	mov	r5, r2
 8005edc:	4622      	mov	r2, r4
 8005ede:	462b      	mov	r3, r5
 8005ee0:	f7fa f9ae 	bl	8000240 <__aeabi_uldivmod>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4613      	mov	r3, r2
 8005eea:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	1d1a      	adds	r2, r3, #4
 8005ef0:	61ba      	str	r2, [r7, #24]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <clmt_clust+0x5e>
 8005efc:	2300      	movs	r3, #0
 8005efe:	e010      	b.n	8005f22 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 8005f00:	69fa      	ldr	r2, [r7, #28]
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d307      	bcc.n	8005f18 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	61fb      	str	r3, [r7, #28]
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	3304      	adds	r3, #4
 8005f14:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005f16:	e7e9      	b.n	8005eec <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 8005f18:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005f1a:	69bb      	ldr	r3, [r7, #24]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	4413      	add	r3, r2
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3720      	adds	r7, #32
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bdb0      	pop	{r4, r5, r7, pc}

08005f2a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b086      	sub	sp, #24
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	d102      	bne.n	8005f48 <dir_sdi+0x1e>
 8005f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f46:	e001      	b.n	8005f4c <dir_sdi+0x22>
 8005f48:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d904      	bls.n	8005f5c <dir_sdi+0x32>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <dir_sdi+0x36>
		return FR_INT_ERR;
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	e066      	b.n	800602e <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d109      	bne.n	8005f86 <dir_sdi+0x5c>
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d905      	bls.n	8005f86 <dir_sdi+0x5c>
		clst = fs->dirbase;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10c      	bne.n	8005fa6 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	095b      	lsrs	r3, r3, #5
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	8912      	ldrh	r2, [r2, #8]
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d301      	bcc.n	8005f9c <dir_sdi+0x72>
 8005f98:	2302      	movs	r3, #2
 8005f9a:	e048      	b.n	800602e <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	639a      	str	r2, [r3, #56]	; 0x38
 8005fa4:	e029      	b.n	8005ffa <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	895b      	ldrh	r3, [r3, #10]
 8005faa:	025b      	lsls	r3, r3, #9
 8005fac:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005fae:	e019      	b.n	8005fe4 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6979      	ldr	r1, [r7, #20]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7ff fa6f 	bl	8005498 <get_fat>
 8005fba:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc2:	d101      	bne.n	8005fc8 <dir_sdi+0x9e>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e032      	b.n	800602e <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d904      	bls.n	8005fd8 <dir_sdi+0xae>
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d301      	bcc.n	8005fdc <dir_sdi+0xb2>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e028      	b.n	800602e <dir_sdi+0x104>
			ofs -= csz;
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d2e1      	bcs.n	8005fb0 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 8005fec:	6979      	ldr	r1, [r7, #20]
 8005fee:	6938      	ldr	r0, [r7, #16]
 8005ff0:	f7ff fa34 	bl	800545c <clust2sect>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <dir_sdi+0xe2>
 8006008:	2302      	movs	r3, #2
 800600a:	e010      	b.n	800602e <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	0a5b      	lsrs	r3, r3, #9
 8006014:	441a      	add	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006026:	441a      	add	r2, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3718      	adds	r7, #24
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b086      	sub	sp, #24
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	3320      	adds	r3, #32
 800604c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00b      	beq.n	800606e <dir_next+0x38>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	2b04      	cmp	r3, #4
 800605c:	d102      	bne.n	8006064 <dir_next+0x2e>
 800605e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006062:	e001      	b.n	8006068 <dir_next+0x32>
 8006064:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	429a      	cmp	r2, r3
 800606c:	d801      	bhi.n	8006072 <dir_next+0x3c>
 800606e:	2304      	movs	r3, #4
 8006070:	e0b2      	b.n	80061d8 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006078:	2b00      	cmp	r3, #0
 800607a:	f040 80a0 	bne.w	80061be <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10b      	bne.n	80060a8 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	095b      	lsrs	r3, r3, #5
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	8912      	ldrh	r2, [r2, #8]
 8006098:	4293      	cmp	r3, r2
 800609a:	f0c0 8090 	bcc.w	80061be <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	639a      	str	r2, [r3, #56]	; 0x38
 80060a4:	2304      	movs	r3, #4
 80060a6:	e097      	b.n	80061d8 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	0a5b      	lsrs	r3, r3, #9
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	8952      	ldrh	r2, [r2, #10]
 80060b0:	3a01      	subs	r2, #1
 80060b2:	4013      	ands	r3, r2
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f040 8082 	bne.w	80061be <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060c0:	4619      	mov	r1, r3
 80060c2:	4610      	mov	r0, r2
 80060c4:	f7ff f9e8 	bl	8005498 <get_fat>
 80060c8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d801      	bhi.n	80060d4 <dir_next+0x9e>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e081      	b.n	80061d8 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060da:	d101      	bne.n	80060e0 <dir_next+0xaa>
 80060dc:	2301      	movs	r3, #1
 80060de:	e07b      	b.n	80061d8 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	69db      	ldr	r3, [r3, #28]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d35f      	bcc.n	80061aa <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d104      	bne.n	80060fa <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	639a      	str	r2, [r3, #56]	; 0x38
 80060f6:	2304      	movs	r3, #4
 80060f8:	e06e      	b.n	80061d8 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006100:	4619      	mov	r1, r3
 8006102:	4610      	mov	r0, r2
 8006104:	f7ff fdcc 	bl	8005ca0 <create_chain>
 8006108:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <dir_next+0xde>
 8006110:	2307      	movs	r3, #7
 8006112:	e061      	b.n	80061d8 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d101      	bne.n	800611e <dir_next+0xe8>
 800611a:	2302      	movs	r3, #2
 800611c:	e05c      	b.n	80061d8 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006124:	d101      	bne.n	800612a <dir_next+0xf4>
 8006126:	2301      	movs	r3, #1
 8006128:	e056      	b.n	80061d8 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	79db      	ldrb	r3, [r3, #7]
 800612e:	f043 0304 	orr.w	r3, r3, #4
 8006132:	b2da      	uxtb	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7ff f8af 	bl	800529c <sync_window>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <dir_next+0x112>
 8006144:	2301      	movs	r3, #1
 8006146:	e047      	b.n	80061d8 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	3338      	adds	r3, #56	; 0x38
 800614c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006150:	2100      	movs	r1, #0
 8006152:	4618      	mov	r0, r3
 8006154:	f7fe fee2 	bl	8004f1c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006158:	2300      	movs	r3, #0
 800615a:	613b      	str	r3, [r7, #16]
 800615c:	6979      	ldr	r1, [r7, #20]
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f7ff f97c 	bl	800545c <clust2sect>
 8006164:	4602      	mov	r2, r0
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	635a      	str	r2, [r3, #52]	; 0x34
 800616a:	e012      	b.n	8006192 <dir_next+0x15c>
						fs->wflag = 1;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2201      	movs	r2, #1
 8006170:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f7ff f892 	bl	800529c <sync_window>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <dir_next+0x14c>
 800617e:	2301      	movs	r3, #1
 8006180:	e02a      	b.n	80061d8 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	3301      	adds	r3, #1
 8006186:	613b      	str	r3, [r7, #16]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618c:	1c5a      	adds	r2, r3, #1
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	635a      	str	r2, [r3, #52]	; 0x34
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	895b      	ldrh	r3, [r3, #10]
 8006196:	461a      	mov	r2, r3
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	4293      	cmp	r3, r2
 800619c:	d3e6      	bcc.n	800616c <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	1ad2      	subs	r2, r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 80061b0:	6979      	ldr	r1, [r7, #20]
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f7ff f952 	bl	800545c <clust2sect>
 80061b8:	4602      	mov	r2, r0
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d0:	441a      	add	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80061f0:	2100      	movs	r1, #0
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f7ff fe99 	bl	8005f2a <dir_sdi>
 80061f8:	4603      	mov	r3, r0
 80061fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80061fc:	7dfb      	ldrb	r3, [r7, #23]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d140      	bne.n	8006284 <dir_alloc+0xa4>
		n = 0;
 8006202:	2300      	movs	r3, #0
 8006204:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	4619      	mov	r1, r3
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f7ff f889 	bl	8005324 <move_window>
 8006212:	4603      	mov	r3, r0
 8006214:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006216:	7dfb      	ldrb	r3, [r7, #23]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d132      	bne.n	8006282 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b04      	cmp	r3, #4
 8006222:	d108      	bne.n	8006236 <dir_alloc+0x56>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	b25b      	sxtb	r3, r3
 800622c:	43db      	mvns	r3, r3
 800622e:	b2db      	uxtb	r3, r3
 8006230:	09db      	lsrs	r3, r3, #7
 8006232:	b2db      	uxtb	r3, r3
 8006234:	e00f      	b.n	8006256 <dir_alloc+0x76>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2be5      	cmp	r3, #229	; 0xe5
 800623e:	d004      	beq.n	800624a <dir_alloc+0x6a>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d101      	bne.n	800624e <dir_alloc+0x6e>
 800624a:	2301      	movs	r3, #1
 800624c:	e000      	b.n	8006250 <dir_alloc+0x70>
 800624e:	2300      	movs	r3, #0
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	b2db      	uxtb	r3, r3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	3301      	adds	r3, #1
 800625e:	613b      	str	r3, [r7, #16]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	429a      	cmp	r2, r3
 8006266:	d102      	bne.n	800626e <dir_alloc+0x8e>
 8006268:	e00c      	b.n	8006284 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800626a:	2300      	movs	r3, #0
 800626c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800626e:	2101      	movs	r1, #1
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7ff fee0 	bl	8006036 <dir_next>
 8006276:	4603      	mov	r3, r0
 8006278:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800627a:	7dfb      	ldrb	r3, [r7, #23]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0c2      	beq.n	8006206 <dir_alloc+0x26>
 8006280:	e000      	b.n	8006284 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8006282:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006284:	7dfb      	ldrb	r3, [r7, #23]
 8006286:	2b04      	cmp	r3, #4
 8006288:	d101      	bne.n	800628e <dir_alloc+0xae>
 800628a:	2307      	movs	r3, #7
 800628c:	75fb      	strb	r3, [r7, #23]
	return res;
 800628e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	331a      	adds	r3, #26
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fe fc3a 	bl	8004b20 <ld_word>
 80062ac:	4603      	mov	r3, r0
 80062ae:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b03      	cmp	r3, #3
 80062b6:	d109      	bne.n	80062cc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	3314      	adds	r3, #20
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fe fc2f 	bl	8004b20 <ld_word>
 80062c2:	4603      	mov	r3, r0
 80062c4:	041b      	lsls	r3, r3, #16
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80062cc:	68fb      	ldr	r3, [r7, #12]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b084      	sub	sp, #16
 80062da:	af00      	add	r7, sp, #0
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	331a      	adds	r3, #26
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	b292      	uxth	r2, r2
 80062ea:	4611      	mov	r1, r2
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7fe fd29 	bl	8004d44 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	2b03      	cmp	r3, #3
 80062f8:	d109      	bne.n	800630e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f103 0214 	add.w	r2, r3, #20
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	0c1b      	lsrs	r3, r3, #16
 8006304:	b29b      	uxth	r3, r3
 8006306:	4619      	mov	r1, r3
 8006308:	4610      	mov	r0, r2
 800630a:	f7fe fd1b 	bl	8004d44 <st_word>
	}
}
 800630e:	bf00      	nop
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006318:	b590      	push	{r4, r7, lr}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	331a      	adds	r3, #26
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe fbfa 	bl	8004b20 <ld_word>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <cmp_lfn+0x1e>
 8006332:	2300      	movs	r3, #0
 8006334:	e059      	b.n	80063ea <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800633e:	1e5a      	subs	r2, r3, #1
 8006340:	4613      	mov	r3, r2
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800634c:	2301      	movs	r3, #1
 800634e:	81fb      	strh	r3, [r7, #14]
 8006350:	2300      	movs	r3, #0
 8006352:	613b      	str	r3, [r7, #16]
 8006354:	e033      	b.n	80063be <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006356:	4a27      	ldr	r2, [pc, #156]	; (80063f4 <cmp_lfn+0xdc>)
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	4413      	add	r3, r2
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	4413      	add	r3, r2
 8006364:	4618      	mov	r0, r3
 8006366:	f7fe fbdb 	bl	8004b20 <ld_word>
 800636a:	4603      	mov	r3, r0
 800636c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800636e:	89fb      	ldrh	r3, [r7, #14]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d01a      	beq.n	80063aa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	2bfe      	cmp	r3, #254	; 0xfe
 8006378:	d812      	bhi.n	80063a0 <cmp_lfn+0x88>
 800637a:	89bb      	ldrh	r3, [r7, #12]
 800637c:	4618      	mov	r0, r3
 800637e:	f002 ff15 	bl	80091ac <ff_wtoupper>
 8006382:	4603      	mov	r3, r0
 8006384:	461c      	mov	r4, r3
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	617a      	str	r2, [r7, #20]
 800638c:	005b      	lsls	r3, r3, #1
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	4413      	add	r3, r2
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	4618      	mov	r0, r3
 8006396:	f002 ff09 	bl	80091ac <ff_wtoupper>
 800639a:	4603      	mov	r3, r0
 800639c:	429c      	cmp	r4, r3
 800639e:	d001      	beq.n	80063a4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80063a0:	2300      	movs	r3, #0
 80063a2:	e022      	b.n	80063ea <cmp_lfn+0xd2>
			}
			wc = uc;
 80063a4:	89bb      	ldrh	r3, [r7, #12]
 80063a6:	81fb      	strh	r3, [r7, #14]
 80063a8:	e006      	b.n	80063b8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80063aa:	89bb      	ldrh	r3, [r7, #12]
 80063ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d001      	beq.n	80063b8 <cmp_lfn+0xa0>
 80063b4:	2300      	movs	r3, #0
 80063b6:	e018      	b.n	80063ea <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	3301      	adds	r3, #1
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	2b0c      	cmp	r3, #12
 80063c2:	d9c8      	bls.n	8006356 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00b      	beq.n	80063e8 <cmp_lfn+0xd0>
 80063d0:	89fb      	ldrh	r3, [r7, #14]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d008      	beq.n	80063e8 <cmp_lfn+0xd0>
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	4413      	add	r3, r2
 80063de:	881b      	ldrh	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <cmp_lfn+0xd0>
 80063e4:	2300      	movs	r3, #0
 80063e6:	e000      	b.n	80063ea <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80063e8:	2301      	movs	r3, #1
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	371c      	adds	r7, #28
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd90      	pop	{r4, r7, pc}
 80063f2:	bf00      	nop
 80063f4:	0800b2cc 	.word	0x0800b2cc

080063f8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	331a      	adds	r3, #26
 8006406:	4618      	mov	r0, r3
 8006408:	f7fe fb8a 	bl	8004b20 <ld_word>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <pick_lfn+0x1e>
 8006412:	2300      	movs	r3, #0
 8006414:	e04d      	b.n	80064b2 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800641e:	1e5a      	subs	r2, r3, #1
 8006420:	4613      	mov	r3, r2
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	4413      	add	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800642c:	2301      	movs	r3, #1
 800642e:	81fb      	strh	r3, [r7, #14]
 8006430:	2300      	movs	r3, #0
 8006432:	613b      	str	r3, [r7, #16]
 8006434:	e028      	b.n	8006488 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006436:	4a21      	ldr	r2, [pc, #132]	; (80064bc <pick_lfn+0xc4>)
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	4413      	add	r3, r2
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	4413      	add	r3, r2
 8006444:	4618      	mov	r0, r3
 8006446:	f7fe fb6b 	bl	8004b20 <ld_word>
 800644a:	4603      	mov	r3, r0
 800644c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800644e:	89fb      	ldrh	r3, [r7, #14]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d00f      	beq.n	8006474 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2bfe      	cmp	r3, #254	; 0xfe
 8006458:	d901      	bls.n	800645e <pick_lfn+0x66>
 800645a:	2300      	movs	r3, #0
 800645c:	e029      	b.n	80064b2 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800645e:	89bb      	ldrh	r3, [r7, #12]
 8006460:	81fb      	strh	r3, [r7, #14]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	617a      	str	r2, [r7, #20]
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	4413      	add	r3, r2
 800646e:	89fa      	ldrh	r2, [r7, #14]
 8006470:	801a      	strh	r2, [r3, #0]
 8006472:	e006      	b.n	8006482 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006474:	89bb      	ldrh	r3, [r7, #12]
 8006476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800647a:	4293      	cmp	r3, r2
 800647c:	d001      	beq.n	8006482 <pick_lfn+0x8a>
 800647e:	2300      	movs	r3, #0
 8006480:	e017      	b.n	80064b2 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	3301      	adds	r3, #1
 8006486:	613b      	str	r3, [r7, #16]
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	2b0c      	cmp	r3, #12
 800648c:	d9d3      	bls.n	8006436 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00a      	beq.n	80064b0 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2bfe      	cmp	r3, #254	; 0xfe
 800649e:	d901      	bls.n	80064a4 <pick_lfn+0xac>
 80064a0:	2300      	movs	r3, #0
 80064a2:	e006      	b.n	80064b2 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	4413      	add	r3, r2
 80064ac:	2200      	movs	r2, #0
 80064ae:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 80064b0:	2301      	movs	r3, #1
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	0800b2cc 	.word	0x0800b2cc

080064c0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b088      	sub	sp, #32
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	4611      	mov	r1, r2
 80064cc:	461a      	mov	r2, r3
 80064ce:	460b      	mov	r3, r1
 80064d0:	71fb      	strb	r3, [r7, #7]
 80064d2:	4613      	mov	r3, r2
 80064d4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	330d      	adds	r3, #13
 80064da:	79ba      	ldrb	r2, [r7, #6]
 80064dc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	330b      	adds	r3, #11
 80064e2:	220f      	movs	r2, #15
 80064e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	330c      	adds	r3, #12
 80064ea:	2200      	movs	r2, #0
 80064ec:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	331a      	adds	r3, #26
 80064f2:	2100      	movs	r1, #0
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fe fc25 	bl	8004d44 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80064fa:	79fb      	ldrb	r3, [r7, #7]
 80064fc:	1e5a      	subs	r2, r3, #1
 80064fe:	4613      	mov	r3, r2
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800650a:	2300      	movs	r3, #0
 800650c:	82fb      	strh	r3, [r7, #22]
 800650e:	2300      	movs	r3, #0
 8006510:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006512:	8afb      	ldrh	r3, [r7, #22]
 8006514:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006518:	4293      	cmp	r3, r2
 800651a:	d007      	beq.n	800652c <put_lfn+0x6c>
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	1c5a      	adds	r2, r3, #1
 8006520:	61fa      	str	r2, [r7, #28]
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	881b      	ldrh	r3, [r3, #0]
 800652a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800652c:	4a17      	ldr	r2, [pc, #92]	; (800658c <put_lfn+0xcc>)
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	4413      	add	r3, r2
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	461a      	mov	r2, r3
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	4413      	add	r3, r2
 800653a:	8afa      	ldrh	r2, [r7, #22]
 800653c:	4611      	mov	r1, r2
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe fc00 	bl	8004d44 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006544:	8afb      	ldrh	r3, [r7, #22]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d102      	bne.n	8006550 <put_lfn+0x90>
 800654a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800654e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	3301      	adds	r3, #1
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	2b0c      	cmp	r3, #12
 800655a:	d9da      	bls.n	8006512 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800655c:	8afb      	ldrh	r3, [r7, #22]
 800655e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006562:	4293      	cmp	r3, r2
 8006564:	d006      	beq.n	8006574 <put_lfn+0xb4>
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4413      	add	r3, r2
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d103      	bne.n	800657c <put_lfn+0xbc>
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800657a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	79fa      	ldrb	r2, [r7, #7]
 8006580:	701a      	strb	r2, [r3, #0]
}
 8006582:	bf00      	nop
 8006584:	3720      	adds	r7, #32
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	0800b2cc 	.word	0x0800b2cc

08006590 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b08c      	sub	sp, #48	; 0x30
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800659e:	220b      	movs	r2, #11
 80065a0:	68b9      	ldr	r1, [r7, #8]
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f7fe fc9a 	bl	8004edc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	2b05      	cmp	r3, #5
 80065ac:	d92b      	bls.n	8006606 <gen_numname+0x76>
		sr = seq;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80065b2:	e022      	b.n	80065fa <gen_numname+0x6a>
			wc = *lfn++;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	1c9a      	adds	r2, r3, #2
 80065b8:	607a      	str	r2, [r7, #4]
 80065ba:	881b      	ldrh	r3, [r3, #0]
 80065bc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80065be:	2300      	movs	r3, #0
 80065c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80065c2:	e017      	b.n	80065f4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	005a      	lsls	r2, r3, #1
 80065c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	4413      	add	r3, r2
 80065d0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80065d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065d4:	085b      	lsrs	r3, r3, #1
 80065d6:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d005      	beq.n	80065ee <gen_numname+0x5e>
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80065e8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80065ec:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	3301      	adds	r3, #1
 80065f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	2b0f      	cmp	r3, #15
 80065f8:	d9e4      	bls.n	80065c4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1d8      	bne.n	80065b4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006606:	2307      	movs	r3, #7
 8006608:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	b2db      	uxtb	r3, r3
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	b2db      	uxtb	r3, r3
 8006614:	3330      	adds	r3, #48	; 0x30
 8006616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800661a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800661e:	2b39      	cmp	r3, #57	; 0x39
 8006620:	d904      	bls.n	800662c <gen_numname+0x9c>
 8006622:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006626:	3307      	adds	r3, #7
 8006628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	1e5a      	subs	r2, r3, #1
 8006630:	62ba      	str	r2, [r7, #40]	; 0x28
 8006632:	3330      	adds	r3, #48	; 0x30
 8006634:	443b      	add	r3, r7
 8006636:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800663a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	091b      	lsrs	r3, r3, #4
 8006642:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1df      	bne.n	800660a <gen_numname+0x7a>
	ns[i] = '~';
 800664a:	f107 0214 	add.w	r2, r7, #20
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	4413      	add	r3, r2
 8006652:	227e      	movs	r2, #126	; 0x7e
 8006654:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006656:	2300      	movs	r3, #0
 8006658:	627b      	str	r3, [r7, #36]	; 0x24
 800665a:	e002      	b.n	8006662 <gen_numname+0xd2>
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	3301      	adds	r3, #1
 8006660:	627b      	str	r3, [r7, #36]	; 0x24
 8006662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006666:	429a      	cmp	r2, r3
 8006668:	d205      	bcs.n	8006676 <gen_numname+0xe6>
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	4413      	add	r3, r2
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	2b20      	cmp	r3, #32
 8006674:	d1f2      	bne.n	800665c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	2b07      	cmp	r3, #7
 800667a:	d807      	bhi.n	800668c <gen_numname+0xfc>
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	1c5a      	adds	r2, r3, #1
 8006680:	62ba      	str	r2, [r7, #40]	; 0x28
 8006682:	3330      	adds	r3, #48	; 0x30
 8006684:	443b      	add	r3, r7
 8006686:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800668a:	e000      	b.n	800668e <gen_numname+0xfe>
 800668c:	2120      	movs	r1, #32
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	627a      	str	r2, [r7, #36]	; 0x24
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	4413      	add	r3, r2
 8006698:	460a      	mov	r2, r1
 800669a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	2b07      	cmp	r3, #7
 80066a0:	d9e9      	bls.n	8006676 <gen_numname+0xe6>
}
 80066a2:	bf00      	nop
 80066a4:	bf00      	nop
 80066a6:	3730      	adds	r7, #48	; 0x30
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80066b8:	230b      	movs	r3, #11
 80066ba:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	0852      	lsrs	r2, r2, #1
 80066c2:	01db      	lsls	r3, r3, #7
 80066c4:	4313      	orrs	r3, r2
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	1c59      	adds	r1, r3, #1
 80066cc:	6079      	str	r1, [r7, #4]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	4413      	add	r3, r2
 80066d2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	3b01      	subs	r3, #1
 80066d8:	60bb      	str	r3, [r7, #8]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1ed      	bne.n	80066bc <sum_sfn+0x10>
	return sum;
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bc80      	pop	{r7}
 80066ea:	4770      	bx	lr

080066ec <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	3301      	adds	r3, #1
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	3301      	adds	r3, #1
 80066fc:	015b      	lsls	r3, r3, #5
 80066fe:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8006700:	2300      	movs	r3, #0
 8006702:	827b      	strh	r3, [r7, #18]
 8006704:	2300      	movs	r3, #0
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	e018      	b.n	800673c <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2b02      	cmp	r3, #2
 800670e:	d103      	bne.n	8006718 <xdir_sum+0x2c>
			i++;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	3301      	adds	r3, #1
 8006714:	617b      	str	r3, [r7, #20]
 8006716:	e00e      	b.n	8006736 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8006718:	8a7b      	ldrh	r3, [r7, #18]
 800671a:	03db      	lsls	r3, r3, #15
 800671c:	b29a      	uxth	r2, r3
 800671e:	8a7b      	ldrh	r3, [r7, #18]
 8006720:	085b      	lsrs	r3, r3, #1
 8006722:	b29b      	uxth	r3, r3
 8006724:	4413      	add	r3, r2
 8006726:	b29a      	uxth	r2, r3
 8006728:	6879      	ldr	r1, [r7, #4]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	440b      	add	r3, r1
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	b29b      	uxth	r3, r3
 8006732:	4413      	add	r3, r2
 8006734:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	3301      	adds	r3, #1
 800673a:	617b      	str	r3, [r7, #20]
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	429a      	cmp	r2, r3
 8006742:	d3e2      	bcc.n	800670a <xdir_sum+0x1e>
		}
	}
	return sum;
 8006744:	8a7b      	ldrh	r3, [r7, #18]
}
 8006746:	4618      	mov	r0, r3
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	bc80      	pop	{r7}
 800674e:	4770      	bx	lr

08006750 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8006758:	2300      	movs	r3, #0
 800675a:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800675c:	e01f      	b.n	800679e <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800675e:	89bb      	ldrh	r3, [r7, #12]
 8006760:	4618      	mov	r0, r3
 8006762:	f002 fd23 	bl	80091ac <ff_wtoupper>
 8006766:	4603      	mov	r3, r0
 8006768:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800676a:	89fb      	ldrh	r3, [r7, #14]
 800676c:	03db      	lsls	r3, r3, #15
 800676e:	b29a      	uxth	r2, r3
 8006770:	89fb      	ldrh	r3, [r7, #14]
 8006772:	085b      	lsrs	r3, r3, #1
 8006774:	b29b      	uxth	r3, r3
 8006776:	4413      	add	r3, r2
 8006778:	b29a      	uxth	r2, r3
 800677a:	89bb      	ldrh	r3, [r7, #12]
 800677c:	b2db      	uxtb	r3, r3
 800677e:	b29b      	uxth	r3, r3
 8006780:	4413      	add	r3, r2
 8006782:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8006784:	89fb      	ldrh	r3, [r7, #14]
 8006786:	03db      	lsls	r3, r3, #15
 8006788:	b29a      	uxth	r2, r3
 800678a:	89fb      	ldrh	r3, [r7, #14]
 800678c:	085b      	lsrs	r3, r3, #1
 800678e:	b29b      	uxth	r3, r3
 8006790:	4413      	add	r3, r2
 8006792:	b29a      	uxth	r2, r3
 8006794:	89bb      	ldrh	r3, [r7, #12]
 8006796:	0a1b      	lsrs	r3, r3, #8
 8006798:	b29b      	uxth	r3, r3
 800679a:	4413      	add	r3, r2
 800679c:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	1c9a      	adds	r2, r3, #2
 80067a2:	607a      	str	r2, [r7, #4]
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	81bb      	strh	r3, [r7, #12]
 80067a8:	89bb      	ldrh	r3, [r7, #12]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1d7      	bne.n	800675e <xname_sum+0xe>
	}
	return sum;
 80067ae:	89fb      	ldrh	r3, [r7, #14]
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3710      	adds	r7, #16
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 80067b8:	b590      	push	{r4, r7, lr}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d0:	4619      	mov	r1, r3
 80067d2:	4610      	mov	r0, r2
 80067d4:	f7fe fda6 	bl	8005324 <move_window>
 80067d8:	4603      	mov	r3, r0
 80067da:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d001      	beq.n	80067e6 <load_xdir+0x2e>
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
 80067e4:	e09f      	b.n	8006926 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	2b85      	cmp	r3, #133	; 0x85
 80067ee:	d001      	beq.n	80067f4 <load_xdir+0x3c>
 80067f0:	2302      	movs	r3, #2
 80067f2:	e098      	b.n	8006926 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f8:	2220      	movs	r2, #32
 80067fa:	4619      	mov	r1, r3
 80067fc:	6938      	ldr	r0, [r7, #16]
 80067fe:	f7fe fb6d 	bl	8004edc <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	3301      	adds	r3, #1
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	3301      	adds	r3, #1
 800680a:	015b      	lsls	r3, r3, #5
 800680c:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	2b5f      	cmp	r3, #95	; 0x5f
 8006812:	d903      	bls.n	800681c <load_xdir+0x64>
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800681a:	d901      	bls.n	8006820 <load_xdir+0x68>
 800681c:	2302      	movs	r3, #2
 800681e:	e082      	b.n	8006926 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8006820:	2100      	movs	r1, #0
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7ff fc07 	bl	8006036 <dir_next>
 8006828:	4603      	mov	r3, r0
 800682a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800682c:	7bfb      	ldrb	r3, [r7, #15]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <load_xdir+0x7e>
 8006832:	7bfb      	ldrb	r3, [r7, #15]
 8006834:	e077      	b.n	8006926 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683e:	4619      	mov	r1, r3
 8006840:	4610      	mov	r0, r2
 8006842:	f7fe fd6f 	bl	8005324 <move_window>
 8006846:	4603      	mov	r3, r0
 8006848:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d001      	beq.n	8006854 <load_xdir+0x9c>
 8006850:	7bfb      	ldrb	r3, [r7, #15]
 8006852:	e068      	b.n	8006926 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2bc0      	cmp	r3, #192	; 0xc0
 800685c:	d001      	beq.n	8006862 <load_xdir+0xaa>
 800685e:	2302      	movs	r3, #2
 8006860:	e061      	b.n	8006926 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f103 0020 	add.w	r0, r3, #32
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686c:	2220      	movs	r2, #32
 800686e:	4619      	mov	r1, r3
 8006870:	f7fe fb34 	bl	8004edc <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	3323      	adds	r3, #35	; 0x23
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	332c      	adds	r3, #44	; 0x2c
 800687c:	4a2c      	ldr	r2, [pc, #176]	; (8006930 <load_xdir+0x178>)
 800687e:	fba2 2303 	umull	r2, r3, r2, r3
 8006882:	08db      	lsrs	r3, r3, #3
 8006884:	015b      	lsls	r3, r3, #5
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	429a      	cmp	r2, r3
 800688a:	d201      	bcs.n	8006890 <load_xdir+0xd8>
 800688c:	2302      	movs	r3, #2
 800688e:	e04a      	b.n	8006926 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8006890:	2340      	movs	r3, #64	; 0x40
 8006892:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8006894:	2100      	movs	r1, #0
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7ff fbcd 	bl	8006036 <dir_next>
 800689c:	4603      	mov	r3, r0
 800689e:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <load_xdir+0xf2>
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	e03d      	b.n	8006926 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b2:	4619      	mov	r1, r3
 80068b4:	4610      	mov	r0, r2
 80068b6:	f7fe fd35 	bl	8005324 <move_window>
 80068ba:	4603      	mov	r3, r0
 80068bc:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <load_xdir+0x110>
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
 80068c6:	e02e      	b.n	8006926 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2bc1      	cmp	r3, #193	; 0xc1
 80068d0:	d001      	beq.n	80068d6 <load_xdir+0x11e>
 80068d2:	2302      	movs	r3, #2
 80068d4:	e027      	b.n	8006926 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 80068dc:	d208      	bcs.n	80068f0 <load_xdir+0x138>
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	18d0      	adds	r0, r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e8:	2220      	movs	r2, #32
 80068ea:	4619      	mov	r1, r3
 80068ec:	f7fe faf6 	bl	8004edc <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	3320      	adds	r3, #32
 80068f4:	617b      	str	r3, [r7, #20]
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d3ca      	bcc.n	8006894 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 8006904:	d80e      	bhi.n	8006924 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8006906:	6938      	ldr	r0, [r7, #16]
 8006908:	f7ff fef0 	bl	80066ec <xdir_sum>
 800690c:	4603      	mov	r3, r0
 800690e:	461c      	mov	r4, r3
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	3302      	adds	r3, #2
 8006914:	4618      	mov	r0, r3
 8006916:	f7fe f903 	bl	8004b20 <ld_word>
 800691a:	4603      	mov	r3, r0
 800691c:	429c      	cmp	r4, r3
 800691e:	d001      	beq.n	8006924 <load_xdir+0x16c>
 8006920:	2302      	movs	r3, #2
 8006922:	e000      	b.n	8006926 <load_xdir+0x16e>
	}
	return FR_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	371c      	adds	r7, #28
 800692a:	46bd      	mov	sp, r7
 800692c:	bd90      	pop	{r4, r7, pc}
 800692e:	bf00      	nop
 8006930:	88888889 	.word	0x88888889

08006934 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8006934:	b5b0      	push	{r4, r5, r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	6808      	ldr	r0, [r1, #0]
 8006942:	6879      	ldr	r1, [r7, #4]
 8006944:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6a08      	ldr	r0, [r1, #32]
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800694e:	6839      	ldr	r1, [r7, #0]
 8006950:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8006952:	b2c8      	uxtb	r0, r1
 8006954:	6879      	ldr	r1, [r7, #4]
 8006956:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8006958:	6839      	ldr	r1, [r7, #0]
 800695a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800695c:	2000      	movs	r0, #0
 800695e:	460c      	mov	r4, r1
 8006960:	4605      	mov	r5, r0
 8006962:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8006966:	2300      	movs	r3, #0
 8006968:	6879      	ldr	r1, [r7, #4]
 800696a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff fad4 	bl	8005f2a <dir_sdi>
 8006982:	4603      	mov	r3, r0
 8006984:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006986:	7bfb      	ldrb	r3, [r7, #15]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d104      	bne.n	8006996 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff ff13 	bl	80067b8 <load_xdir>
 8006992:	4603      	mov	r3, r0
 8006994:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8006996:	7bfb      	ldrb	r3, [r7, #15]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bdb0      	pop	{r4, r5, r7, pc}

080069a0 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 80069a0:	b590      	push	{r4, r7, lr}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	1c9c      	adds	r4, r3, #2
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f7ff fe99 	bl	80066ec <xdir_sum>
 80069ba:	4603      	mov	r3, r0
 80069bc:	4619      	mov	r1, r3
 80069be:	4620      	mov	r0, r4
 80069c0:	f7fe f9c0 	bl	8004d44 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3301      	adds	r3, #1
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	3301      	adds	r3, #1
 80069cc:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7ff faa8 	bl	8005f2a <dir_sdi>
 80069da:	4603      	mov	r3, r0
 80069dc:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 80069de:	e026      	b.n	8006a2e <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e8:	4619      	mov	r1, r3
 80069ea:	4610      	mov	r0, r2
 80069ec:	f7fe fc9a 	bl	8005324 <move_window>
 80069f0:	4603      	mov	r3, r0
 80069f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d11d      	bne.n	8006a36 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fe:	2220      	movs	r2, #32
 8006a00:	68f9      	ldr	r1, [r7, #12]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f7fe fa6a 	bl	8004edc <mem_cpy>
		dp->obj.fs->wflag = 1;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	613b      	str	r3, [r7, #16]
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00e      	beq.n	8006a3a <store_xdir+0x9a>
		dirb += SZDIRE;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3320      	adds	r3, #32
 8006a20:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8006a22:	2100      	movs	r1, #0
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff fb06 	bl	8006036 <dir_next>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0d5      	beq.n	80069e0 <store_xdir+0x40>
 8006a34:	e002      	b.n	8006a3c <store_xdir+0x9c>
		if (res != FR_OK) break;
 8006a36:	bf00      	nop
 8006a38:	e000      	b.n	8006a3c <store_xdir+0x9c>
		if (--nent == 0) break;
 8006a3a:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8006a3c:	7dfb      	ldrb	r3, [r7, #23]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d002      	beq.n	8006a48 <store_xdir+0xa8>
 8006a42:	7dfb      	ldrb	r3, [r7, #23]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d101      	bne.n	8006a4c <store_xdir+0xac>
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
 8006a4a:	e000      	b.n	8006a4e <store_xdir+0xae>
 8006a4c:	2302      	movs	r3, #2
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	371c      	adds	r7, #28
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd90      	pop	{r4, r7, pc}

08006a56 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8006a56:	b590      	push	{r4, r7, lr}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8006a60:	2240      	movs	r2, #64	; 0x40
 8006a62:	2100      	movs	r1, #0
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f7fe fa59 	bl	8004f1c <mem_set>
	dirb[XDIR_Type] = 0x85;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2285      	movs	r2, #133	; 0x85
 8006a6e:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	3320      	adds	r3, #32
 8006a74:	22c0      	movs	r2, #192	; 0xc0
 8006a76:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	72bb      	strb	r3, [r7, #10]
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	72fb      	strb	r3, [r7, #11]
 8006a80:	2301      	movs	r3, #1
 8006a82:	813b      	strh	r3, [r7, #8]
 8006a84:	2340      	movs	r3, #64	; 0x40
 8006a86:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	60fa      	str	r2, [r7, #12]
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	4413      	add	r3, r2
 8006a92:	22c1      	movs	r2, #193	; 0xc1
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	60fa      	str	r2, [r7, #12]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8006aa4:	893b      	ldrh	r3, [r7, #8]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00b      	beq.n	8006ac2 <create_xdir+0x6c>
 8006aaa:	7abb      	ldrb	r3, [r7, #10]
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	813b      	strh	r3, [r7, #8]
 8006ab6:	893b      	ldrh	r3, [r7, #8]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d002      	beq.n	8006ac2 <create_xdir+0x6c>
 8006abc:	7abb      	ldrb	r3, [r7, #10]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	893a      	ldrh	r2, [r7, #8]
 8006aca:	4611      	mov	r1, r2
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fe f939 	bl	8004d44 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	3302      	adds	r3, #2
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f003 031f 	and.w	r3, r3, #31
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1e0      	bne.n	8006aa4 <create_xdir+0x4e>
		nb++;
 8006ae2:	7afb      	ldrb	r3, [r7, #11]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8006ae8:	7abb      	ldrb	r3, [r7, #10]
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	4413      	add	r3, r2
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1c8      	bne.n	8006a88 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	3323      	adds	r3, #35	; 0x23
 8006afa:	7aba      	ldrb	r2, [r7, #10]
 8006afc:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	3301      	adds	r3, #1
 8006b02:	7afa      	ldrb	r2, [r7, #11]
 8006b04:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8006b0c:	6838      	ldr	r0, [r7, #0]
 8006b0e:	f7ff fe1f 	bl	8006750 <xname_sum>
 8006b12:	4603      	mov	r3, r0
 8006b14:	4619      	mov	r1, r3
 8006b16:	4620      	mov	r0, r4
 8006b18:	f7fe f914 	bl	8004d44 <st_word>
}
 8006b1c:	bf00      	nop
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd90      	pop	{r4, r7, pc}

08006b24 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006b2e:	2304      	movs	r3, #4
 8006b30:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8006b38:	23ff      	movs	r3, #255	; 0xff
 8006b3a:	757b      	strb	r3, [r7, #21]
 8006b3c:	23ff      	movs	r3, #255	; 0xff
 8006b3e:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8006b40:	e09f      	b.n	8006c82 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b46:	4619      	mov	r1, r3
 8006b48:	6938      	ldr	r0, [r7, #16]
 8006b4a:	f7fe fbeb 	bl	8005324 <move_window>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006b52:	7dfb      	ldrb	r3, [r7, #23]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f040 809a 	bne.w	8006c8e <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8006b62:	7dbb      	ldrb	r3, [r7, #22]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d102      	bne.n	8006b6e <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8006b68:	2304      	movs	r3, #4
 8006b6a:	75fb      	strb	r3, [r7, #23]
 8006b6c:	e096      	b.n	8006c9c <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b04      	cmp	r3, #4
 8006b74:	d118      	bne.n	8006ba8 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 8006b76:	7dbb      	ldrb	r3, [r7, #22]
 8006b78:	2b85      	cmp	r3, #133	; 0x85
 8006b7a:	d179      	bne.n	8006c70 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff fe17 	bl	80067b8 <load_xdir>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d17e      	bne.n	8006c92 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	3304      	adds	r3, #4
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ba0:	b2da      	uxtb	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	719a      	strb	r2, [r3, #6]
					}
					break;
 8006ba6:	e074      	b.n	8006c92 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bac:	330b      	adds	r3, #11
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bb4:	73fb      	strb	r3, [r7, #15]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	7bfa      	ldrb	r2, [r7, #15]
 8006bba:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8006bbc:	7dbb      	ldrb	r3, [r7, #22]
 8006bbe:	2be5      	cmp	r3, #229	; 0xe5
 8006bc0:	d00e      	beq.n	8006be0 <dir_read+0xbc>
 8006bc2:	7dbb      	ldrb	r3, [r7, #22]
 8006bc4:	2b2e      	cmp	r3, #46	; 0x2e
 8006bc6:	d00b      	beq.n	8006be0 <dir_read+0xbc>
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
 8006bca:	f023 0320 	bic.w	r3, r3, #32
 8006bce:	2b08      	cmp	r3, #8
 8006bd0:	bf0c      	ite	eq
 8006bd2:	2301      	moveq	r3, #1
 8006bd4:	2300      	movne	r3, #0
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	461a      	mov	r2, r3
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d002      	beq.n	8006be6 <dir_read+0xc2>
				ord = 0xFF;
 8006be0:	23ff      	movs	r3, #255	; 0xff
 8006be2:	757b      	strb	r3, [r7, #21]
 8006be4:	e044      	b.n	8006c70 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
 8006be8:	2b0f      	cmp	r3, #15
 8006bea:	d12f      	bne.n	8006c4c <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8006bec:	7dbb      	ldrb	r3, [r7, #22]
 8006bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00d      	beq.n	8006c12 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfa:	7b5b      	ldrb	r3, [r3, #13]
 8006bfc:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8006bfe:	7dbb      	ldrb	r3, [r7, #22]
 8006c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c04:	75bb      	strb	r3, [r7, #22]
 8006c06:	7dbb      	ldrb	r3, [r7, #22]
 8006c08:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006c12:	7dba      	ldrb	r2, [r7, #22]
 8006c14:	7d7b      	ldrb	r3, [r7, #21]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d115      	bne.n	8006c46 <dir_read+0x122>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c1e:	330d      	adds	r3, #13
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	7d3a      	ldrb	r2, [r7, #20]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d10e      	bne.n	8006c46 <dir_read+0x122>
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	68da      	ldr	r2, [r3, #12]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c30:	4619      	mov	r1, r3
 8006c32:	4610      	mov	r0, r2
 8006c34:	f7ff fbe0 	bl	80063f8 <pick_lfn>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <dir_read+0x122>
 8006c3e:	7d7b      	ldrb	r3, [r7, #21]
 8006c40:	3b01      	subs	r3, #1
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	e000      	b.n	8006c48 <dir_read+0x124>
 8006c46:	23ff      	movs	r3, #255	; 0xff
 8006c48:	757b      	strb	r3, [r7, #21]
 8006c4a:	e011      	b.n	8006c70 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8006c4c:	7d7b      	ldrb	r3, [r7, #21]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d109      	bne.n	8006c66 <dir_read+0x142>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7ff fd28 	bl	80066ac <sum_sfn>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	461a      	mov	r2, r3
 8006c60:	7d3b      	ldrb	r3, [r7, #20]
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d017      	beq.n	8006c96 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f04f 32ff 	mov.w	r2, #4294967295
 8006c6c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 8006c6e:	e012      	b.n	8006c96 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006c70:	2100      	movs	r1, #0
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff f9df 	bl	8006036 <dir_next>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006c7c:	7dfb      	ldrb	r3, [r7, #23]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10b      	bne.n	8006c9a <dir_read+0x176>
	while (dp->sect) {
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f47f af5b 	bne.w	8006b42 <dir_read+0x1e>
 8006c8c:	e006      	b.n	8006c9c <dir_read+0x178>
		if (res != FR_OK) break;
 8006c8e:	bf00      	nop
 8006c90:	e004      	b.n	8006c9c <dir_read+0x178>
					break;
 8006c92:	bf00      	nop
 8006c94:	e002      	b.n	8006c9c <dir_read+0x178>
					break;
 8006c96:	bf00      	nop
 8006c98:	e000      	b.n	8006c9c <dir_read+0x178>
		if (res != FR_OK) break;
 8006c9a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006c9c:	7dfb      	ldrb	r3, [r7, #23]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d002      	beq.n	8006ca8 <dir_read+0x184>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006cb2:	b590      	push	{r4, r7, lr}
 8006cb4:	b089      	sub	sp, #36	; 0x24
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006cc0:	2100      	movs	r1, #0
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff f931 	bl	8005f2a <dir_sdi>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8006ccc:	7ffb      	ldrb	r3, [r7, #31]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <dir_find+0x24>
 8006cd2:	7ffb      	ldrb	r3, [r7, #31]
 8006cd4:	e112      	b.n	8006efc <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d164      	bne.n	8006da8 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7ff fd34 	bl	8006750 <xname_sum>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8006cec:	e04f      	b.n	8006d8e <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	3324      	adds	r3, #36	; 0x24
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fd ff13 	bl	8004b20 <ld_word>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	461a      	mov	r2, r3
 8006cfe:	893b      	ldrh	r3, [r7, #8]
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d000      	beq.n	8006d06 <dir_find+0x54>
 8006d04:	e043      	b.n	8006d8e <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006d0e:	76fb      	strb	r3, [r7, #27]
 8006d10:	2340      	movs	r3, #64	; 0x40
 8006d12:	617b      	str	r3, [r7, #20]
 8006d14:	2300      	movs	r3, #0
 8006d16:	613b      	str	r3, [r7, #16]
 8006d18:	e029      	b.n	8006d6e <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	f003 031f 	and.w	r3, r3, #31
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d102      	bne.n	8006d2a <dir_find+0x78>
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	3302      	adds	r3, #2
 8006d28:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	691a      	ldr	r2, [r3, #16]
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	4413      	add	r3, r2
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fd fef4 	bl	8004b20 <ld_word>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f002 fa36 	bl	80091ac <ff_wtoupper>
 8006d40:	4603      	mov	r3, r0
 8006d42:	461c      	mov	r4, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	68da      	ldr	r2, [r3, #12]
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	005b      	lsls	r3, r3, #1
 8006d4c:	4413      	add	r3, r2
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f002 fa2b 	bl	80091ac <ff_wtoupper>
 8006d56:	4603      	mov	r3, r0
 8006d58:	429c      	cmp	r4, r3
 8006d5a:	d10c      	bne.n	8006d76 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8006d5c:	7efb      	ldrb	r3, [r7, #27]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	76fb      	strb	r3, [r7, #27]
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	3302      	adds	r3, #2
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	613b      	str	r3, [r7, #16]
 8006d6e:	7efb      	ldrb	r3, [r7, #27]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1d2      	bne.n	8006d1a <dir_find+0x68>
 8006d74:	e000      	b.n	8006d78 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8006d76:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8006d78:	7efb      	ldrb	r3, [r7, #27]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d107      	bne.n	8006d8e <dir_find+0xdc>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	68da      	ldr	r2, [r3, #12]
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	4413      	add	r3, r2
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d009      	beq.n	8006da2 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8006d8e:	2100      	movs	r1, #0
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff fec7 	bl	8006b24 <dir_read>
 8006d96:	4603      	mov	r3, r0
 8006d98:	77fb      	strb	r3, [r7, #31]
 8006d9a:	7ffb      	ldrb	r3, [r7, #31]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d0a6      	beq.n	8006cee <dir_find+0x3c>
 8006da0:	e000      	b.n	8006da4 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 8006da2:	bf00      	nop
		}
		return res;
 8006da4:	7ffb      	ldrb	r3, [r7, #31]
 8006da6:	e0a9      	b.n	8006efc <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006da8:	23ff      	movs	r3, #255	; 0xff
 8006daa:	773b      	strb	r3, [r7, #28]
 8006dac:	7f3b      	ldrb	r3, [r7, #28]
 8006dae:	777b      	strb	r3, [r7, #29]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f04f 32ff 	mov.w	r2, #4294967295
 8006db6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f7fe fab0 	bl	8005324 <move_window>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8006dc8:	7ffb      	ldrb	r3, [r7, #31]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f040 8090 	bne.w	8006ef0 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006dd8:	7fbb      	ldrb	r3, [r7, #30]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d102      	bne.n	8006de4 <dir_find+0x132>
 8006dde:	2304      	movs	r3, #4
 8006de0:	77fb      	strb	r3, [r7, #31]
 8006de2:	e08a      	b.n	8006efa <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de8:	330b      	adds	r3, #11
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006df0:	72fb      	strb	r3, [r7, #11]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	7afa      	ldrb	r2, [r7, #11]
 8006df6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006df8:	7fbb      	ldrb	r3, [r7, #30]
 8006dfa:	2be5      	cmp	r3, #229	; 0xe5
 8006dfc:	d007      	beq.n	8006e0e <dir_find+0x15c>
 8006dfe:	7afb      	ldrb	r3, [r7, #11]
 8006e00:	f003 0308 	and.w	r3, r3, #8
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d009      	beq.n	8006e1c <dir_find+0x16a>
 8006e08:	7afb      	ldrb	r3, [r7, #11]
 8006e0a:	2b0f      	cmp	r3, #15
 8006e0c:	d006      	beq.n	8006e1c <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006e0e:	23ff      	movs	r3, #255	; 0xff
 8006e10:	777b      	strb	r3, [r7, #29]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f04f 32ff 	mov.w	r2, #4294967295
 8006e18:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e1a:	e05e      	b.n	8006eda <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006e1c:	7afb      	ldrb	r3, [r7, #11]
 8006e1e:	2b0f      	cmp	r3, #15
 8006e20:	d136      	bne.n	8006e90 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d154      	bne.n	8006eda <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006e30:	7fbb      	ldrb	r3, [r7, #30]
 8006e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00d      	beq.n	8006e56 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3e:	7b5b      	ldrb	r3, [r3, #13]
 8006e40:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006e42:	7fbb      	ldrb	r3, [r7, #30]
 8006e44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e48:	77bb      	strb	r3, [r7, #30]
 8006e4a:	7fbb      	ldrb	r3, [r7, #30]
 8006e4c:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006e56:	7fba      	ldrb	r2, [r7, #30]
 8006e58:	7f7b      	ldrb	r3, [r7, #29]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d115      	bne.n	8006e8a <dir_find+0x1d8>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e62:	330d      	adds	r3, #13
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	7f3a      	ldrb	r2, [r7, #28]
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d10e      	bne.n	8006e8a <dir_find+0x1d8>
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	68da      	ldr	r2, [r3, #12]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e74:	4619      	mov	r1, r3
 8006e76:	4610      	mov	r0, r2
 8006e78:	f7ff fa4e 	bl	8006318 <cmp_lfn>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <dir_find+0x1d8>
 8006e82:	7f7b      	ldrb	r3, [r7, #29]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	e000      	b.n	8006e8c <dir_find+0x1da>
 8006e8a:	23ff      	movs	r3, #255	; 0xff
 8006e8c:	777b      	strb	r3, [r7, #29]
 8006e8e:	e024      	b.n	8006eda <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006e90:	7f7b      	ldrb	r3, [r7, #29]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d109      	bne.n	8006eaa <dir_find+0x1f8>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff fc06 	bl	80066ac <sum_sfn>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	7f3b      	ldrb	r3, [r7, #28]
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d024      	beq.n	8006ef4 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10a      	bne.n	8006ece <dir_find+0x21c>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	3340      	adds	r3, #64	; 0x40
 8006ec0:	220b      	movs	r2, #11
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	f7fe f844 	bl	8004f50 <mem_cmp>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d014      	beq.n	8006ef8 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006ece:	23ff      	movs	r3, #255	; 0xff
 8006ed0:	777b      	strb	r3, [r7, #29]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed8:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006eda:	2100      	movs	r1, #0
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7ff f8aa 	bl	8006036 <dir_next>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 8006ee6:	7ffb      	ldrb	r3, [r7, #31]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f43f af65 	beq.w	8006db8 <dir_find+0x106>
 8006eee:	e004      	b.n	8006efa <dir_find+0x248>
		if (res != FR_OK) break;
 8006ef0:	bf00      	nop
 8006ef2:	e002      	b.n	8006efa <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006ef4:	bf00      	nop
 8006ef6:	e000      	b.n	8006efa <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006ef8:	bf00      	nop

	return res;
 8006efa:	7ffb      	ldrb	r3, [r7, #31]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3724      	adds	r7, #36	; 0x24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd90      	pop	{r4, r7, pc}

08006f04 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006f04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006f08:	b0a0      	sub	sp, #128	; 0x80
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006f1a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <dir_register+0x22>
 8006f22:	2306      	movs	r3, #6
 8006f24:	e18e      	b.n	8007244 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006f26:	2300      	movs	r3, #0
 8006f28:	677b      	str	r3, [r7, #116]	; 0x74
 8006f2a:	e002      	b.n	8006f32 <dir_register+0x2e>
 8006f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f2e:	3301      	adds	r3, #1
 8006f30:	677b      	str	r3, [r7, #116]	; 0x74
 8006f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	4413      	add	r3, r2
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1f4      	bne.n	8006f2c <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8006f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	2b04      	cmp	r3, #4
 8006f48:	f040 809f 	bne.w	800708a <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8006f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f4e:	330e      	adds	r3, #14
 8006f50:	4aa2      	ldr	r2, [pc, #648]	; (80071dc <dir_register+0x2d8>)
 8006f52:	fba2 2303 	umull	r2, r3, r2, r3
 8006f56:	08db      	lsrs	r3, r3, #3
 8006f58:	3302      	adds	r3, #2
 8006f5a:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8006f5c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7ff f93e 	bl	80061e0 <dir_alloc>
 8006f64:	4603      	mov	r3, r0
 8006f66:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 8006f6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d002      	beq.n	8006f78 <dir_register+0x74>
 8006f72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006f76:	e165      	b.n	8007244 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	015b      	lsls	r3, r3, #5
 8006f82:	1ad2      	subs	r2, r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d072      	beq.n	8007076 <dir_register+0x172>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	79db      	ldrb	r3, [r3, #7]
 8006f94:	f003 0304 	and.w	r3, r3, #4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d06c      	beq.n	8007076 <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006fa2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006fa4:	8949      	ldrh	r1, [r1, #10]
 8006fa6:	0249      	lsls	r1, r1, #9
 8006fa8:	2000      	movs	r0, #0
 8006faa:	460c      	mov	r4, r1
 8006fac:	4605      	mov	r5, r0
 8006fae:	eb12 0804 	adds.w	r8, r2, r4
 8006fb2:	eb43 0905 	adc.w	r9, r3, r5
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fe fd5a 	bl	8005a78 <fill_first_frag>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8006fca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <dir_register+0xd4>
 8006fd2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006fd6:	e135      	b.n	8007244 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fde:	f04f 32ff 	mov.w	r2, #4294967295
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	f7fe fd77 	bl	8005ad6 <fill_last_frag>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8006fee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d002      	beq.n	8006ffc <dir_register+0xf8>
 8006ff6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8006ffa:	e123      	b.n	8007244 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	f107 0308 	add.w	r3, r7, #8
 8007002:	4611      	mov	r1, r2
 8007004:	4618      	mov	r0, r3
 8007006:	f7ff fc95 	bl	8006934 <load_obj_dir>
 800700a:	4603      	mov	r3, r0
 800700c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8007010:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <dir_register+0x11a>
 8007018:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800701c:	e112      	b.n	8007244 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800701e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800702c:	4608      	mov	r0, r1
 800702e:	f7fd fece 	bl	8004dce <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 8007032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007040:	4608      	mov	r0, r1
 8007042:	f7fd fec4 	bl	8004dce <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	79da      	ldrb	r2, [r3, #7]
 800704a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	3321      	adds	r3, #33	; 0x21
 8007050:	f042 0201 	orr.w	r2, r2, #1
 8007054:	b2d2      	uxtb	r2, r2
 8007056:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 8007058:	f107 0308 	add.w	r3, r7, #8
 800705c:	4618      	mov	r0, r3
 800705e:	f7ff fc9f 	bl	80069a0 <store_xdir>
 8007062:	4603      	mov	r3, r0
 8007064:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 8007068:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800706c:	2b00      	cmp	r3, #0
 800706e:	d002      	beq.n	8007076 <dir_register+0x172>
 8007070:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007074:	e0e6      	b.n	8007244 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 8007076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007078:	691a      	ldr	r2, [r3, #16]
 800707a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	4619      	mov	r1, r3
 8007080:	4610      	mov	r0, r2
 8007082:	f7ff fce8 	bl	8006a56 <create_xdir>
		return FR_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	e0dc      	b.n	8007244 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8007090:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8007094:	220c      	movs	r2, #12
 8007096:	4618      	mov	r0, r3
 8007098:	f7fd ff20 	bl	8004edc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800709c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d033      	beq.n	8007110 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2240      	movs	r2, #64	; 0x40
 80070ac:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 80070b0:	2301      	movs	r3, #1
 80070b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80070b4:	e016      	b.n	80070e4 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80070bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070be:	68da      	ldr	r2, [r3, #12]
 80070c0:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80070c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070c6:	f7ff fa63 	bl	8006590 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f7ff fdf1 	bl	8006cb2 <dir_find>
 80070d0:	4603      	mov	r3, r0
 80070d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 80070d6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d106      	bne.n	80070ec <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 80070de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070e0:	3301      	adds	r3, #1
 80070e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80070e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070e6:	2b63      	cmp	r3, #99	; 0x63
 80070e8:	d9e5      	bls.n	80070b6 <dir_register+0x1b2>
 80070ea:	e000      	b.n	80070ee <dir_register+0x1ea>
			if (res != FR_OK) break;
 80070ec:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80070ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070f0:	2b64      	cmp	r3, #100	; 0x64
 80070f2:	d101      	bne.n	80070f8 <dir_register+0x1f4>
 80070f4:	2307      	movs	r3, #7
 80070f6:	e0a5      	b.n	8007244 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80070f8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d002      	beq.n	8007106 <dir_register+0x202>
 8007100:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007104:	e09e      	b.n	8007244 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007106:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007110:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d007      	beq.n	800712c <dir_register+0x228>
 800711c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800711e:	330c      	adds	r3, #12
 8007120:	4a2f      	ldr	r2, [pc, #188]	; (80071e0 <dir_register+0x2dc>)
 8007122:	fba2 2303 	umull	r2, r3, r2, r3
 8007126:	089b      	lsrs	r3, r3, #2
 8007128:	3301      	adds	r3, #1
 800712a:	e000      	b.n	800712e <dir_register+0x22a>
 800712c:	2301      	movs	r3, #1
 800712e:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007130:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff f854 	bl	80061e0 <dir_alloc>
 8007138:	4603      	mov	r3, r0
 800713a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800713e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007142:	2b00      	cmp	r3, #0
 8007144:	d14f      	bne.n	80071e6 <dir_register+0x2e2>
 8007146:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007148:	3b01      	subs	r3, #1
 800714a:	673b      	str	r3, [r7, #112]	; 0x70
 800714c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800714e:	2b00      	cmp	r3, #0
 8007150:	d049      	beq.n	80071e6 <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007158:	015b      	lsls	r3, r3, #5
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	4619      	mov	r1, r3
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7fe fee3 	bl	8005f2a <dir_sdi>
 8007164:	4603      	mov	r3, r0
 8007166:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800716a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800716e:	2b00      	cmp	r3, #0
 8007170:	d139      	bne.n	80071e6 <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	3340      	adds	r3, #64	; 0x40
 8007176:	4618      	mov	r0, r3
 8007178:	f7ff fa98 	bl	80066ac <sum_sfn>
 800717c:	4603      	mov	r3, r0
 800717e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007186:	4619      	mov	r1, r3
 8007188:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800718a:	f7fe f8cb 	bl	8005324 <move_window>
 800718e:	4603      	mov	r3, r0
 8007190:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 8007194:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007198:	2b00      	cmp	r3, #0
 800719a:	d123      	bne.n	80071e4 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800719c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800719e:	68d8      	ldr	r0, [r3, #12]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80071a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80071ac:	f7ff f988 	bl	80064c0 <put_lfn>
				fs->wflag = 1;
 80071b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071b2:	2201      	movs	r2, #1
 80071b4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80071b6:	2100      	movs	r1, #0
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7fe ff3c 	bl	8006036 <dir_next>
 80071be:	4603      	mov	r3, r0
 80071c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 80071c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10c      	bne.n	80071e6 <dir_register+0x2e2>
 80071cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071ce:	3b01      	subs	r3, #1
 80071d0:	673b      	str	r3, [r7, #112]	; 0x70
 80071d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1d4      	bne.n	8007182 <dir_register+0x27e>
 80071d8:	e005      	b.n	80071e6 <dir_register+0x2e2>
 80071da:	bf00      	nop
 80071dc:	88888889 	.word	0x88888889
 80071e0:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 80071e4:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80071e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d128      	bne.n	8007240 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f2:	4619      	mov	r1, r3
 80071f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80071f6:	f7fe f895 	bl	8005324 <move_window>
 80071fa:	4603      	mov	r3, r0
 80071fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 8007200:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8007204:	2b00      	cmp	r3, #0
 8007206:	d11b      	bne.n	8007240 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720c:	2220      	movs	r2, #32
 800720e:	2100      	movs	r1, #0
 8007210:	4618      	mov	r0, r3
 8007212:	f7fd fe83 	bl	8004f1c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	3340      	adds	r3, #64	; 0x40
 800721e:	220b      	movs	r2, #11
 8007220:	4619      	mov	r1, r3
 8007222:	f7fd fe5b 	bl	8004edc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007230:	330c      	adds	r3, #12
 8007232:	f002 0218 	and.w	r2, r2, #24
 8007236:	b2d2      	uxtb	r2, r2
 8007238:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800723a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800723c:	2201      	movs	r2, #1
 800723e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007240:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007244:	4618      	mov	r0, r3
 8007246:	3780      	adds	r7, #128	; 0x80
 8007248:	46bd      	mov	sp, r7
 800724a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800724e:	bf00      	nop

08007250 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b08a      	sub	sp, #40	; 0x28
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	613b      	str	r3, [r7, #16]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	2300      	movs	r3, #0
 800726a:	617b      	str	r3, [r7, #20]
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	1c5a      	adds	r2, r3, #1
 8007274:	61ba      	str	r2, [r7, #24]
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	4413      	add	r3, r2
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800727e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007280:	2b1f      	cmp	r3, #31
 8007282:	d940      	bls.n	8007306 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007284:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007286:	2b2f      	cmp	r3, #47	; 0x2f
 8007288:	d006      	beq.n	8007298 <create_name+0x48>
 800728a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800728c:	2b5c      	cmp	r3, #92	; 0x5c
 800728e:	d110      	bne.n	80072b2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007290:	e002      	b.n	8007298 <create_name+0x48>
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	3301      	adds	r3, #1
 8007296:	61bb      	str	r3, [r7, #24]
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	4413      	add	r3, r2
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	2b2f      	cmp	r3, #47	; 0x2f
 80072a2:	d0f6      	beq.n	8007292 <create_name+0x42>
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	4413      	add	r3, r2
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	2b5c      	cmp	r3, #92	; 0x5c
 80072ae:	d0f0      	beq.n	8007292 <create_name+0x42>
			break;
 80072b0:	e02a      	b.n	8007308 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2bfe      	cmp	r3, #254	; 0xfe
 80072b6:	d901      	bls.n	80072bc <create_name+0x6c>
 80072b8:	2306      	movs	r3, #6
 80072ba:	e17d      	b.n	80075b8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80072bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80072c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072c4:	2101      	movs	r1, #1
 80072c6:	4618      	mov	r0, r3
 80072c8:	f001 ff36 	bl	8009138 <ff_convert>
 80072cc:	4603      	mov	r3, r0
 80072ce:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80072d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <create_name+0x8a>
 80072d6:	2306      	movs	r3, #6
 80072d8:	e16e      	b.n	80075b8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80072da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072dc:	2b7f      	cmp	r3, #127	; 0x7f
 80072de:	d809      	bhi.n	80072f4 <create_name+0xa4>
 80072e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072e2:	4619      	mov	r1, r3
 80072e4:	488d      	ldr	r0, [pc, #564]	; (800751c <create_name+0x2cc>)
 80072e6:	f7fd fe59 	bl	8004f9c <chk_chr>
 80072ea:	4603      	mov	r3, r0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d001      	beq.n	80072f4 <create_name+0xa4>
 80072f0:	2306      	movs	r3, #6
 80072f2:	e161      	b.n	80075b8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	617a      	str	r2, [r7, #20]
 80072fa:	005b      	lsls	r3, r3, #1
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	4413      	add	r3, r2
 8007300:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007302:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007304:	e7b4      	b.n	8007270 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007306:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	441a      	add	r2, r3
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007312:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007314:	2b1f      	cmp	r3, #31
 8007316:	d801      	bhi.n	800731c <create_name+0xcc>
 8007318:	2304      	movs	r3, #4
 800731a:	e000      	b.n	800731e <create_name+0xce>
 800731c:	2300      	movs	r3, #0
 800731e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007322:	e011      	b.n	8007348 <create_name+0xf8>
		w = lfn[di - 1];
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800732a:	3b01      	subs	r3, #1
 800732c:	005b      	lsls	r3, r3, #1
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	4413      	add	r3, r2
 8007332:	881b      	ldrh	r3, [r3, #0]
 8007334:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007338:	2b20      	cmp	r3, #32
 800733a:	d002      	beq.n	8007342 <create_name+0xf2>
 800733c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800733e:	2b2e      	cmp	r3, #46	; 0x2e
 8007340:	d106      	bne.n	8007350 <create_name+0x100>
		di--;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	3b01      	subs	r3, #1
 8007346:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1ea      	bne.n	8007324 <create_name+0xd4>
 800734e:	e000      	b.n	8007352 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007350:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	4413      	add	r3, r2
 800735a:	2200      	movs	r2, #0
 800735c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <create_name+0x118>
 8007364:	2306      	movs	r3, #6
 8007366:	e127      	b.n	80075b8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3340      	adds	r3, #64	; 0x40
 800736c:	220b      	movs	r2, #11
 800736e:	2120      	movs	r1, #32
 8007370:	4618      	mov	r0, r3
 8007372:	f7fd fdd3 	bl	8004f1c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007376:	2300      	movs	r3, #0
 8007378:	61bb      	str	r3, [r7, #24]
 800737a:	e002      	b.n	8007382 <create_name+0x132>
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	3301      	adds	r3, #1
 8007380:	61bb      	str	r3, [r7, #24]
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	005b      	lsls	r3, r3, #1
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	4413      	add	r3, r2
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	2b20      	cmp	r3, #32
 800738e:	d0f5      	beq.n	800737c <create_name+0x12c>
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	4413      	add	r3, r2
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	2b2e      	cmp	r3, #46	; 0x2e
 800739c:	d0ee      	beq.n	800737c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d009      	beq.n	80073b8 <create_name+0x168>
 80073a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073a8:	f043 0303 	orr.w	r3, r3, #3
 80073ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80073b0:	e002      	b.n	80073b8 <create_name+0x168>
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	3b01      	subs	r3, #1
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d009      	beq.n	80073d2 <create_name+0x182>
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80073c4:	3b01      	subs	r3, #1
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4413      	add	r3, r2
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	2b2e      	cmp	r3, #46	; 0x2e
 80073d0:	d1ef      	bne.n	80073b2 <create_name+0x162>

	i = b = 0; ni = 8;
 80073d2:	2300      	movs	r3, #0
 80073d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80073d8:	2300      	movs	r3, #0
 80073da:	623b      	str	r3, [r7, #32]
 80073dc:	2308      	movs	r3, #8
 80073de:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	1c5a      	adds	r2, r3, #1
 80073e4:	61ba      	str	r2, [r7, #24]
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	4413      	add	r3, r2
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80073f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 8090 	beq.w	8007518 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80073f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d006      	beq.n	800740c <create_name+0x1bc>
 80073fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007400:	2b2e      	cmp	r3, #46	; 0x2e
 8007402:	d10a      	bne.n	800741a <create_name+0x1ca>
 8007404:	69ba      	ldr	r2, [r7, #24]
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	429a      	cmp	r2, r3
 800740a:	d006      	beq.n	800741a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800740c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007410:	f043 0303 	orr.w	r3, r3, #3
 8007414:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007418:	e07d      	b.n	8007516 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800741a:	6a3a      	ldr	r2, [r7, #32]
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	429a      	cmp	r2, r3
 8007420:	d203      	bcs.n	800742a <create_name+0x1da>
 8007422:	69ba      	ldr	r2, [r7, #24]
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	429a      	cmp	r2, r3
 8007428:	d123      	bne.n	8007472 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	2b0b      	cmp	r3, #11
 800742e:	d106      	bne.n	800743e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007434:	f043 0303 	orr.w	r3, r3, #3
 8007438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800743c:	e075      	b.n	800752a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800743e:	69ba      	ldr	r2, [r7, #24]
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	429a      	cmp	r2, r3
 8007444:	d005      	beq.n	8007452 <create_name+0x202>
 8007446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800744a:	f043 0303 	orr.w	r3, r3, #3
 800744e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	429a      	cmp	r2, r3
 8007458:	d866      	bhi.n	8007528 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	61bb      	str	r3, [r7, #24]
 800745e:	2308      	movs	r3, #8
 8007460:	623b      	str	r3, [r7, #32]
 8007462:	230b      	movs	r3, #11
 8007464:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007466:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007470:	e051      	b.n	8007516 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007472:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007474:	2b7f      	cmp	r3, #127	; 0x7f
 8007476:	d914      	bls.n	80074a2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007478:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800747a:	2100      	movs	r1, #0
 800747c:	4618      	mov	r0, r3
 800747e:	f001 fe5b 	bl	8009138 <ff_convert>
 8007482:	4603      	mov	r3, r0
 8007484:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007486:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007488:	2b00      	cmp	r3, #0
 800748a:	d004      	beq.n	8007496 <create_name+0x246>
 800748c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800748e:	3b80      	subs	r3, #128	; 0x80
 8007490:	4a23      	ldr	r2, [pc, #140]	; (8007520 <create_name+0x2d0>)
 8007492:	5cd3      	ldrb	r3, [r2, r3]
 8007494:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800749a:	f043 0302 	orr.w	r3, r3, #2
 800749e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80074a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d007      	beq.n	80074b8 <create_name+0x268>
 80074a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074aa:	4619      	mov	r1, r3
 80074ac:	481d      	ldr	r0, [pc, #116]	; (8007524 <create_name+0x2d4>)
 80074ae:	f7fd fd75 	bl	8004f9c <chk_chr>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d008      	beq.n	80074ca <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80074b8:	235f      	movs	r3, #95	; 0x5f
 80074ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 80074bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074c0:	f043 0303 	orr.w	r3, r3, #3
 80074c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80074c8:	e01b      	b.n	8007502 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80074ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074cc:	2b40      	cmp	r3, #64	; 0x40
 80074ce:	d909      	bls.n	80074e4 <create_name+0x294>
 80074d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074d2:	2b5a      	cmp	r3, #90	; 0x5a
 80074d4:	d806      	bhi.n	80074e4 <create_name+0x294>
					b |= 2;
 80074d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074da:	f043 0302 	orr.w	r3, r3, #2
 80074de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80074e2:	e00e      	b.n	8007502 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80074e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074e6:	2b60      	cmp	r3, #96	; 0x60
 80074e8:	d90b      	bls.n	8007502 <create_name+0x2b2>
 80074ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074ec:	2b7a      	cmp	r3, #122	; 0x7a
 80074ee:	d808      	bhi.n	8007502 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80074f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074f4:	f043 0301 	orr.w	r3, r3, #1
 80074f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80074fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074fe:	3b20      	subs	r3, #32
 8007500:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	1c5a      	adds	r2, r3, #1
 8007506:	623a      	str	r2, [r7, #32]
 8007508:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800750a:	b2d1      	uxtb	r1, r2
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	4413      	add	r3, r2
 8007510:	460a      	mov	r2, r1
 8007512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 8007516:	e763      	b.n	80073e0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007518:	bf00      	nop
 800751a:	e006      	b.n	800752a <create_name+0x2da>
 800751c:	0800b1d8 	.word	0x0800b1d8
 8007520:	0800b24c 	.word	0x0800b24c
 8007524:	0800b1e4 	.word	0x0800b1e4
			if (si > di) break;			/* No extension */
 8007528:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007530:	2be5      	cmp	r3, #229	; 0xe5
 8007532:	d103      	bne.n	800753c <create_name+0x2ec>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2205      	movs	r2, #5
 8007538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	2b08      	cmp	r3, #8
 8007540:	d104      	bne.n	800754c <create_name+0x2fc>
 8007542:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800754c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007550:	f003 030c 	and.w	r3, r3, #12
 8007554:	2b0c      	cmp	r3, #12
 8007556:	d005      	beq.n	8007564 <create_name+0x314>
 8007558:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800755c:	f003 0303 	and.w	r3, r3, #3
 8007560:	2b03      	cmp	r3, #3
 8007562:	d105      	bne.n	8007570 <create_name+0x320>
 8007564:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007568:	f043 0302 	orr.w	r3, r3, #2
 800756c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d117      	bne.n	80075ac <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800757c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007580:	f003 0303 	and.w	r3, r3, #3
 8007584:	2b01      	cmp	r3, #1
 8007586:	d105      	bne.n	8007594 <create_name+0x344>
 8007588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800758c:	f043 0310 	orr.w	r3, r3, #16
 8007590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007594:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007598:	f003 030c 	and.w	r3, r3, #12
 800759c:	2b04      	cmp	r3, #4
 800759e:	d105      	bne.n	80075ac <create_name+0x35c>
 80075a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80075a4:	f043 0308 	orr.w	r3, r3, #8
 80075a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80075b2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 80075b6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3728      	adds	r7, #40	; 0x28
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80075d4:	e002      	b.n	80075dc <follow_path+0x1c>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	3301      	adds	r3, #1
 80075da:	603b      	str	r3, [r7, #0]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b2f      	cmp	r3, #47	; 0x2f
 80075e2:	d0f8      	beq.n	80075d6 <follow_path+0x16>
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	2b5c      	cmp	r3, #92	; 0x5c
 80075ea:	d0f4      	beq.n	80075d6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	2200      	movs	r2, #0
 80075f0:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	2200      	movs	r2, #0
 80075f6:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	2b1f      	cmp	r3, #31
 80075fe:	d80a      	bhi.n	8007616 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2280      	movs	r2, #128	; 0x80
 8007604:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 8007608:	2100      	movs	r1, #0
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f7fe fc8d 	bl	8005f2a <dir_sdi>
 8007610:	4603      	mov	r3, r0
 8007612:	75fb      	strb	r3, [r7, #23]
 8007614:	e078      	b.n	8007708 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007616:	463b      	mov	r3, r7
 8007618:	4619      	mov	r1, r3
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7ff fe18 	bl	8007250 <create_name>
 8007620:	4603      	mov	r3, r0
 8007622:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007624:	7dfb      	ldrb	r3, [r7, #23]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d169      	bne.n	80076fe <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7ff fb41 	bl	8006cb2 <dir_find>
 8007630:	4603      	mov	r3, r0
 8007632:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800763a:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800763c:	7dfb      	ldrb	r3, [r7, #23]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007642:	7dfb      	ldrb	r3, [r7, #23]
 8007644:	2b04      	cmp	r3, #4
 8007646:	d15c      	bne.n	8007702 <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007648:	7afb      	ldrb	r3, [r7, #11]
 800764a:	f003 0304 	and.w	r3, r3, #4
 800764e:	2b00      	cmp	r3, #0
 8007650:	d157      	bne.n	8007702 <follow_path+0x142>
 8007652:	2305      	movs	r3, #5
 8007654:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007656:	e054      	b.n	8007702 <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007658:	7afb      	ldrb	r3, [r7, #11]
 800765a:	f003 0304 	and.w	r3, r3, #4
 800765e:	2b00      	cmp	r3, #0
 8007660:	d151      	bne.n	8007706 <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	799b      	ldrb	r3, [r3, #6]
 8007666:	f003 0310 	and.w	r3, r3, #16
 800766a:	2b00      	cmp	r3, #0
 800766c:	d102      	bne.n	8007674 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800766e:	2305      	movs	r3, #5
 8007670:	75fb      	strb	r3, [r7, #23]
 8007672:	e049      	b.n	8007708 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	2b04      	cmp	r3, #4
 800767a:	d130      	bne.n	80076de <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	689a      	ldr	r2, [r3, #8]
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800768a:	4613      	mov	r3, r2
 800768c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	79d2      	ldrb	r2, [r2, #7]
 8007694:	431a      	orrs	r2, r3
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	3334      	adds	r3, #52	; 0x34
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fd fa50 	bl	8004b4e <ld_dword>
 80076ae:	4602      	mov	r2, r0
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	3321      	adds	r3, #33	; 0x21
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	b2da      	uxtb	r2, r3
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	3338      	adds	r3, #56	; 0x38
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7fd fa60 	bl	8004b92 <ld_qword>
 80076d2:	4602      	mov	r2, r0
 80076d4:	460b      	mov	r3, r1
 80076d6:	6939      	ldr	r1, [r7, #16]
 80076d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80076dc:	e79b      	b.n	8007616 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ec:	4413      	add	r3, r2
 80076ee:	4619      	mov	r1, r3
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f7fe fdd1 	bl	8006298 <ld_clust>
 80076f6:	4602      	mov	r2, r0
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80076fc:	e78b      	b.n	8007616 <follow_path+0x56>
			if (res != FR_OK) break;
 80076fe:	bf00      	nop
 8007700:	e002      	b.n	8007708 <follow_path+0x148>
				break;
 8007702:	bf00      	nop
 8007704:	e000      	b.n	8007708 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007706:	bf00      	nop
			}
		}
	}

	return res;
 8007708:	7dfb      	ldrb	r3, [r7, #23]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007712:	b480      	push	{r7}
 8007714:	b087      	sub	sp, #28
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800771a:	f04f 33ff 	mov.w	r3, #4294967295
 800771e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d031      	beq.n	800778c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	617b      	str	r3, [r7, #20]
 800772e:	e002      	b.n	8007736 <get_ldnumber+0x24>
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	3301      	adds	r3, #1
 8007734:	617b      	str	r3, [r7, #20]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	2b1f      	cmp	r3, #31
 800773c:	d903      	bls.n	8007746 <get_ldnumber+0x34>
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2b3a      	cmp	r3, #58	; 0x3a
 8007744:	d1f4      	bne.n	8007730 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b3a      	cmp	r3, #58	; 0x3a
 800774c:	d11c      	bne.n	8007788 <get_ldnumber+0x76>
			tp = *path;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	1c5a      	adds	r2, r3, #1
 8007758:	60fa      	str	r2, [r7, #12]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	3b30      	subs	r3, #48	; 0x30
 800775e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b09      	cmp	r3, #9
 8007764:	d80e      	bhi.n	8007784 <get_ldnumber+0x72>
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	429a      	cmp	r2, r3
 800776c:	d10a      	bne.n	8007784 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	2b03      	cmp	r3, #3
 8007772:	d807      	bhi.n	8007784 <get_ldnumber+0x72>
					vol = (int)i;
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	3301      	adds	r3, #1
 800777c:	617b      	str	r3, [r7, #20]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	e002      	b.n	800778e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007788:	2300      	movs	r3, #0
 800778a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800778c:	693b      	ldr	r3, [r7, #16]
}
 800778e:	4618      	mov	r0, r3
 8007790:	371c      	adds	r7, #28
 8007792:	46bd      	mov	sp, r7
 8007794:	bc80      	pop	{r7}
 8007796:	4770      	bx	lr

08007798 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	70da      	strb	r2, [r3, #3]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f04f 32ff 	mov.w	r2, #4294967295
 80077ae:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f7fd fdb6 	bl	8005324 <move_window>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <check_fs+0x2a>
 80077be:	2304      	movs	r3, #4
 80077c0:	e044      	b.n	800784c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	3338      	adds	r3, #56	; 0x38
 80077c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fd f9a8 	bl	8004b20 <ld_word>
 80077d0:	4603      	mov	r3, r0
 80077d2:	461a      	mov	r2, r3
 80077d4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80077d8:	429a      	cmp	r2, r3
 80077da:	d001      	beq.n	80077e0 <check_fs+0x48>
 80077dc:	2303      	movs	r3, #3
 80077de:	e035      	b.n	800784c <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077e6:	2be9      	cmp	r3, #233	; 0xe9
 80077e8:	d009      	beq.n	80077fe <check_fs+0x66>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077f0:	2beb      	cmp	r3, #235	; 0xeb
 80077f2:	d11e      	bne.n	8007832 <check_fs+0x9a>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80077fa:	2b90      	cmp	r3, #144	; 0x90
 80077fc:	d119      	bne.n	8007832 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	3338      	adds	r3, #56	; 0x38
 8007802:	3336      	adds	r3, #54	; 0x36
 8007804:	4618      	mov	r0, r3
 8007806:	f7fd f9a2 	bl	8004b4e <ld_dword>
 800780a:	4603      	mov	r3, r0
 800780c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007810:	4a10      	ldr	r2, [pc, #64]	; (8007854 <check_fs+0xbc>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d101      	bne.n	800781a <check_fs+0x82>
 8007816:	2300      	movs	r3, #0
 8007818:	e018      	b.n	800784c <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	3338      	adds	r3, #56	; 0x38
 800781e:	3352      	adds	r3, #82	; 0x52
 8007820:	4618      	mov	r0, r3
 8007822:	f7fd f994 	bl	8004b4e <ld_dword>
 8007826:	4603      	mov	r3, r0
 8007828:	4a0b      	ldr	r2, [pc, #44]	; (8007858 <check_fs+0xc0>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d101      	bne.n	8007832 <check_fs+0x9a>
 800782e:	2300      	movs	r3, #0
 8007830:	e00c      	b.n	800784c <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	3338      	adds	r3, #56	; 0x38
 8007836:	220b      	movs	r2, #11
 8007838:	4908      	ldr	r1, [pc, #32]	; (800785c <check_fs+0xc4>)
 800783a:	4618      	mov	r0, r3
 800783c:	f7fd fb88 	bl	8004f50 <mem_cmp>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d101      	bne.n	800784a <check_fs+0xb2>
 8007846:	2301      	movs	r3, #1
 8007848:	e000      	b.n	800784c <check_fs+0xb4>
#endif
	return 2;
 800784a:	2302      	movs	r3, #2
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	00544146 	.word	0x00544146
 8007858:	33544146 	.word	0x33544146
 800785c:	0800b1ec 	.word	0x0800b1ec

08007860 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007864:	b09c      	sub	sp, #112	; 0x70
 8007866:	af00      	add	r7, sp, #0
 8007868:	61f8      	str	r0, [r7, #28]
 800786a:	61b9      	str	r1, [r7, #24]
 800786c:	4613      	mov	r3, r2
 800786e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	2200      	movs	r2, #0
 8007874:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007876:	69f8      	ldr	r0, [r7, #28]
 8007878:	f7ff ff4b 	bl	8007712 <get_ldnumber>
 800787c:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800787e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007880:	2b00      	cmp	r3, #0
 8007882:	da01      	bge.n	8007888 <find_volume+0x28>
 8007884:	230b      	movs	r3, #11
 8007886:	e337      	b.n	8007ef8 <find_volume+0x698>


	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007888:	4a99      	ldr	r2, [pc, #612]	; (8007af0 <find_volume+0x290>)
 800788a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800788c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007890:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007892:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007894:	2b00      	cmp	r3, #0
 8007896:	d101      	bne.n	800789c <find_volume+0x3c>
 8007898:	230c      	movs	r3, #12
 800789a:	e32d      	b.n	8007ef8 <find_volume+0x698>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80078a0:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80078a2:	7dfb      	ldrb	r3, [r7, #23]
 80078a4:	f023 0301 	bic.w	r3, r3, #1
 80078a8:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80078aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d01a      	beq.n	80078e8 <find_volume+0x88>

		stat = disk_status(fs->drv);
 80078b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b4:	785b      	ldrb	r3, [r3, #1]
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fd f894 	bl	80049e4 <disk_status>
 80078bc:	4603      	mov	r3, r0
 80078be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80078c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10c      	bne.n	80078e8 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80078ce:	7dfb      	ldrb	r3, [r7, #23]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d007      	beq.n	80078e4 <find_volume+0x84>
 80078d4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80078d8:	f003 0304 	and.w	r3, r3, #4
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 80078e0:	230a      	movs	r3, #10
 80078e2:	e309      	b.n	8007ef8 <find_volume+0x698>
			}
			return FR_OK;				/* The file system object is valid */
 80078e4:	2300      	movs	r3, #0
 80078e6:	e307      	b.n	8007ef8 <find_volume+0x698>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80078e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ea:	2200      	movs	r2, #0
 80078ec:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80078ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80078f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f8:	785b      	ldrb	r3, [r3, #1]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fd f88c 	bl	8004a18 <disk_initialize>
 8007900:	4603      	mov	r3, r0
 8007902:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007906:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007912:	2303      	movs	r3, #3
 8007914:	e2f0      	b.n	8007ef8 <find_volume+0x698>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007916:	7dfb      	ldrb	r3, [r7, #23]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d007      	beq.n	800792c <find_volume+0xcc>
 800791c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007920:	f003 0304 	and.w	r3, r3, #4
 8007924:	2b00      	cmp	r3, #0
 8007926:	d001      	beq.n	800792c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8007928:	230a      	movs	r3, #10
 800792a:	e2e5      	b.n	8007ef8 <find_volume+0x698>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800792c:	2300      	movs	r3, #0
 800792e:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007930:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007932:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007934:	f7ff ff30 	bl	8007798 <check_fs>
 8007938:	4603      	mov	r3, r0
 800793a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800793e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007942:	2b02      	cmp	r3, #2
 8007944:	d14d      	bne.n	80079e2 <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007946:	2300      	movs	r3, #0
 8007948:	65bb      	str	r3, [r7, #88]	; 0x58
 800794a:	e020      	b.n	800798e <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800794c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800794e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007954:	011b      	lsls	r3, r3, #4
 8007956:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800795a:	4413      	add	r3, r2
 800795c:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800795e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007960:	3304      	adds	r3, #4
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d006      	beq.n	8007976 <find_volume+0x116>
 8007968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800796a:	3308      	adds	r3, #8
 800796c:	4618      	mov	r0, r3
 800796e:	f7fd f8ee 	bl	8004b4e <ld_dword>
 8007972:	4602      	mov	r2, r0
 8007974:	e000      	b.n	8007978 <find_volume+0x118>
 8007976:	2200      	movs	r2, #0
 8007978:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	3360      	adds	r3, #96	; 0x60
 800797e:	f107 0110 	add.w	r1, r7, #16
 8007982:	440b      	add	r3, r1
 8007984:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007988:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800798a:	3301      	adds	r3, #1
 800798c:	65bb      	str	r3, [r7, #88]	; 0x58
 800798e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007990:	2b03      	cmp	r3, #3
 8007992:	d9db      	bls.n	800794c <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007994:	2300      	movs	r3, #0
 8007996:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 8007998:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <find_volume+0x144>
 800799e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079a0:	3b01      	subs	r3, #1
 80079a2:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 80079a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	3360      	adds	r3, #96	; 0x60
 80079aa:	f107 0210 	add.w	r2, r7, #16
 80079ae:	4413      	add	r3, r2
 80079b0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 80079b4:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80079b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d005      	beq.n	80079c8 <find_volume+0x168>
 80079bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80079be:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80079c0:	f7ff feea 	bl	8007798 <check_fs>
 80079c4:	4603      	mov	r3, r0
 80079c6:	e000      	b.n	80079ca <find_volume+0x16a>
 80079c8:	2303      	movs	r3, #3
 80079ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80079ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d905      	bls.n	80079e2 <find_volume+0x182>
 80079d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079d8:	3301      	adds	r3, #1
 80079da:	65bb      	str	r3, [r7, #88]	; 0x58
 80079dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079de:	2b03      	cmp	r3, #3
 80079e0:	d9e0      	bls.n	80079a4 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80079e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	d101      	bne.n	80079ee <find_volume+0x18e>
 80079ea:	2301      	movs	r3, #1
 80079ec:	e284      	b.n	8007ef8 <find_volume+0x698>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80079ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d901      	bls.n	80079fa <find_volume+0x19a>
 80079f6:	230d      	movs	r3, #13
 80079f8:	e27e      	b.n	8007ef8 <find_volume+0x698>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 80079fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	f040 80fa 	bne.w	8007bf8 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8007a04:	230b      	movs	r3, #11
 8007a06:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a08:	e002      	b.n	8007a10 <find_volume+0x1b0>
 8007a0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a12:	2b3f      	cmp	r3, #63	; 0x3f
 8007a14:	d806      	bhi.n	8007a24 <find_volume+0x1c4>
 8007a16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a1a:	4413      	add	r3, r2
 8007a1c:	3338      	adds	r3, #56	; 0x38
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d0f2      	beq.n	8007a0a <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8007a24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a26:	2b3f      	cmp	r3, #63	; 0x3f
 8007a28:	d801      	bhi.n	8007a2e <find_volume+0x1ce>
 8007a2a:	230d      	movs	r3, #13
 8007a2c:	e264      	b.n	8007ef8 <find_volume+0x698>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8007a2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a30:	3338      	adds	r3, #56	; 0x38
 8007a32:	3368      	adds	r3, #104	; 0x68
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fd f873 	bl	8004b20 <ld_word>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a40:	d001      	beq.n	8007a46 <find_volume+0x1e6>
 8007a42:	230d      	movs	r3, #13
 8007a44:	e258      	b.n	8007ef8 <find_volume+0x698>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8007a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a48:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8007a4c:	2b09      	cmp	r3, #9
 8007a4e:	d001      	beq.n	8007a54 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 8007a50:	230d      	movs	r3, #13
 8007a52:	e251      	b.n	8007ef8 <find_volume+0x698>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8007a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a56:	3338      	adds	r3, #56	; 0x38
 8007a58:	3348      	adds	r3, #72	; 0x48
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fd f899 	bl	8004b92 <ld_qword>
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a66:	2000      	movs	r0, #0
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	68b9      	ldr	r1, [r7, #8]
 8007a6e:	1851      	adds	r1, r2, r1
 8007a70:	6039      	str	r1, [r7, #0]
 8007a72:	68f9      	ldr	r1, [r7, #12]
 8007a74:	eb43 0101 	adc.w	r1, r3, r1
 8007a78:	6079      	str	r1, [r7, #4]
 8007a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a7e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8007a82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d301      	bcc.n	8007a8e <find_volume+0x22e>
 8007a8a:	230d      	movs	r3, #13
 8007a8c:	e234      	b.n	8007ef8 <find_volume+0x698>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8007a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a90:	3338      	adds	r3, #56	; 0x38
 8007a92:	3354      	adds	r3, #84	; 0x54
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7fd f85a 	bl	8004b4e <ld_dword>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a9e:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8007aa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aa2:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 8007aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aa8:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8007aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aac:	789b      	ldrb	r3, [r3, #2]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d001      	beq.n	8007ab6 <find_volume+0x256>
 8007ab2:	230d      	movs	r3, #13
 8007ab4:	e220      	b.n	8007ef8 <find_volume+0x698>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8007ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ab8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007abc:	461a      	mov	r2, r3
 8007abe:	2301      	movs	r3, #1
 8007ac0:	4093      	lsls	r3, r2
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ac6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8007ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aca:	895b      	ldrh	r3, [r3, #10]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <find_volume+0x274>
 8007ad0:	230d      	movs	r3, #13
 8007ad2:	e211      	b.n	8007ef8 <find_volume+0x698>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8007ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ad6:	3338      	adds	r3, #56	; 0x38
 8007ad8:	335c      	adds	r3, #92	; 0x5c
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fd f837 	bl	8004b4e <ld_dword>
 8007ae0:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8007ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ae4:	4a03      	ldr	r2, [pc, #12]	; (8007af4 <find_volume+0x294>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d906      	bls.n	8007af8 <find_volume+0x298>
 8007aea:	230d      	movs	r3, #13
 8007aec:	e204      	b.n	8007ef8 <find_volume+0x698>
 8007aee:	bf00      	nop
 8007af0:	20001068 	.word	0x20001068
 8007af4:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 8007af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007afa:	1c9a      	adds	r2, r3, #2
 8007afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007afe:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8007b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b04:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8007b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b08:	3338      	adds	r3, #56	; 0x38
 8007b0a:	3358      	adds	r3, #88	; 0x58
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fd f81e 	bl	8004b4e <ld_dword>
 8007b12:	4602      	mov	r2, r0
 8007b14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b16:	441a      	add	r2, r3
 8007b18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b1a:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8007b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b1e:	3338      	adds	r3, #56	; 0x38
 8007b20:	3350      	adds	r3, #80	; 0x50
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7fd f813 	bl	8004b4e <ld_dword>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b2c:	441a      	add	r2, r3
 8007b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b30:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 8007b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b36:	2200      	movs	r2, #0
 8007b38:	469a      	mov	sl, r3
 8007b3a:	4693      	mov	fp, r2
 8007b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b3e:	895b      	ldrh	r3, [r3, #10]
 8007b40:	461a      	mov	r2, r3
 8007b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b44:	fb02 f303 	mul.w	r3, r2, r3
 8007b48:	2200      	movs	r2, #0
 8007b4a:	4698      	mov	r8, r3
 8007b4c:	4691      	mov	r9, r2
 8007b4e:	eb1a 0408 	adds.w	r4, sl, r8
 8007b52:	eb4b 0509 	adc.w	r5, fp, r9
 8007b56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007b5a:	42a2      	cmp	r2, r4
 8007b5c:	41ab      	sbcs	r3, r5
 8007b5e:	d201      	bcs.n	8007b64 <find_volume+0x304>
 8007b60:	230d      	movs	r3, #13
 8007b62:	e1c9      	b.n	8007ef8 <find_volume+0x698>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8007b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b66:	3338      	adds	r3, #56	; 0x38
 8007b68:	3360      	adds	r3, #96	; 0x60
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fc ffef 	bl	8004b4e <ld_dword>
 8007b70:	4602      	mov	r2, r0
 8007b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b74:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8007b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007b7e:	f7fd fc6d 	bl	800545c <clust2sect>
 8007b82:	4603      	mov	r3, r0
 8007b84:	4619      	mov	r1, r3
 8007b86:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007b88:	f7fd fbcc 	bl	8005324 <move_window>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <find_volume+0x336>
 8007b92:	2301      	movs	r3, #1
 8007b94:	e1b0      	b.n	8007ef8 <find_volume+0x698>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8007b96:	2300      	movs	r3, #0
 8007b98:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b9a:	e015      	b.n	8007bc8 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8007b9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ba0:	4413      	add	r3, r2
 8007ba2:	3338      	adds	r3, #56	; 0x38
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	2b81      	cmp	r3, #129	; 0x81
 8007ba8:	d10b      	bne.n	8007bc2 <find_volume+0x362>
 8007baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bac:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007bb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bb2:	3314      	adds	r3, #20
 8007bb4:	4413      	add	r3, r2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fc ffc9 	bl	8004b4e <ld_dword>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d007      	beq.n	8007bd2 <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8007bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bc4:	3320      	adds	r3, #32
 8007bc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bce:	d3e5      	bcc.n	8007b9c <find_volume+0x33c>
 8007bd0:	e000      	b.n	8007bd4 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8007bd2:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8007bd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bda:	d101      	bne.n	8007be0 <find_volume+0x380>
 8007bdc:	230d      	movs	r3, #13
 8007bde:	e18b      	b.n	8007ef8 <find_volume+0x698>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be2:	f04f 32ff 	mov.w	r2, #4294967295
 8007be6:	619a      	str	r2, [r3, #24]
 8007be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bea:	699a      	ldr	r2, [r3, #24]
 8007bec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bee:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8007bf0:	2304      	movs	r3, #4
 8007bf2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007bf6:	e167      	b.n	8007ec8 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bfa:	3338      	adds	r3, #56	; 0x38
 8007bfc:	330b      	adds	r3, #11
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fc ff8e 	bl	8004b20 <ld_word>
 8007c04:	4603      	mov	r3, r0
 8007c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c0a:	d001      	beq.n	8007c10 <find_volume+0x3b0>
 8007c0c:	230d      	movs	r3, #13
 8007c0e:	e173      	b.n	8007ef8 <find_volume+0x698>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c12:	3338      	adds	r3, #56	; 0x38
 8007c14:	3316      	adds	r3, #22
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fc ff82 	bl	8004b20 <ld_word>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007c20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d106      	bne.n	8007c34 <find_volume+0x3d4>
 8007c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c28:	3338      	adds	r3, #56	; 0x38
 8007c2a:	3324      	adds	r3, #36	; 0x24
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7fc ff8e 	bl	8004b4e <ld_dword>
 8007c32:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 8007c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c36:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c38:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c3c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c42:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c46:	789b      	ldrb	r3, [r3, #2]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d005      	beq.n	8007c58 <find_volume+0x3f8>
 8007c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c4e:	789b      	ldrb	r3, [r3, #2]
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d001      	beq.n	8007c58 <find_volume+0x3f8>
 8007c54:	230d      	movs	r3, #13
 8007c56:	e14f      	b.n	8007ef8 <find_volume+0x698>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007c58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c5a:	789b      	ldrb	r3, [r3, #2]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c60:	fb02 f303 	mul.w	r3, r2, r3
 8007c64:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c70:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c74:	895b      	ldrh	r3, [r3, #10]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d008      	beq.n	8007c8c <find_volume+0x42c>
 8007c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c7c:	895b      	ldrh	r3, [r3, #10]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c82:	895b      	ldrh	r3, [r3, #10]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	4013      	ands	r3, r2
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d001      	beq.n	8007c90 <find_volume+0x430>
 8007c8c:	230d      	movs	r3, #13
 8007c8e:	e133      	b.n	8007ef8 <find_volume+0x698>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c92:	3338      	adds	r3, #56	; 0x38
 8007c94:	3311      	adds	r3, #17
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7fc ff42 	bl	8004b20 <ld_word>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ca2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ca6:	891b      	ldrh	r3, [r3, #8]
 8007ca8:	f003 030f 	and.w	r3, r3, #15
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d001      	beq.n	8007cb6 <find_volume+0x456>
 8007cb2:	230d      	movs	r3, #13
 8007cb4:	e120      	b.n	8007ef8 <find_volume+0x698>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007cb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cb8:	3338      	adds	r3, #56	; 0x38
 8007cba:	3313      	adds	r3, #19
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fc ff2f 	bl	8004b20 <ld_word>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007cc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d106      	bne.n	8007cda <find_volume+0x47a>
 8007ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cce:	3338      	adds	r3, #56	; 0x38
 8007cd0:	3320      	adds	r3, #32
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f7fc ff3b 	bl	8004b4e <ld_dword>
 8007cd8:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cdc:	3338      	adds	r3, #56	; 0x38
 8007cde:	330e      	adds	r3, #14
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fc ff1d 	bl	8004b20 <ld_word>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007cec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <find_volume+0x498>
 8007cf4:	230d      	movs	r3, #13
 8007cf6:	e0ff      	b.n	8007ef8 <find_volume+0x698>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007cf8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cfe:	4413      	add	r3, r2
 8007d00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d02:	8912      	ldrh	r2, [r2, #8]
 8007d04:	0912      	lsrs	r2, r2, #4
 8007d06:	b292      	uxth	r2, r2
 8007d08:	4413      	add	r3, r2
 8007d0a:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007d0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d201      	bcs.n	8007d18 <find_volume+0x4b8>
 8007d14:	230d      	movs	r3, #13
 8007d16:	e0ef      	b.n	8007ef8 <find_volume+0x698>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007d18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d20:	8952      	ldrh	r2, [r2, #10]
 8007d22:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d26:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <find_volume+0x4d2>
 8007d2e:	230d      	movs	r3, #13
 8007d30:	e0e2      	b.n	8007ef8 <find_volume+0x698>
		fmt = FS_FAT32;
 8007d32:	2303      	movs	r3, #3
 8007d34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d3a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d802      	bhi.n	8007d48 <find_volume+0x4e8>
 8007d42:	2302      	movs	r3, #2
 8007d44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d4a:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d802      	bhi.n	8007d58 <find_volume+0x4f8>
 8007d52:	2301      	movs	r3, #1
 8007d54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5a:	1c9a      	adds	r2, r3, #2
 8007d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d5e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d64:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007d66:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8007d6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d6c:	441a      	add	r2, r3
 8007d6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d70:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007d72:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d76:	441a      	add	r2, r3
 8007d78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d7a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8007d7c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	d11e      	bne.n	8007dc2 <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007d84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d86:	3338      	adds	r3, #56	; 0x38
 8007d88:	332a      	adds	r3, #42	; 0x2a
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fc fec8 	bl	8004b20 <ld_word>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <find_volume+0x53a>
 8007d96:	230d      	movs	r3, #13
 8007d98:	e0ae      	b.n	8007ef8 <find_volume+0x698>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d9c:	891b      	ldrh	r3, [r3, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d001      	beq.n	8007da6 <find_volume+0x546>
 8007da2:	230d      	movs	r3, #13
 8007da4:	e0a8      	b.n	8007ef8 <find_volume+0x698>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007da8:	3338      	adds	r3, #56	; 0x38
 8007daa:	332c      	adds	r3, #44	; 0x2c
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7fc fece 	bl	8004b4e <ld_dword>
 8007db2:	4602      	mov	r2, r0
 8007db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dba:	69db      	ldr	r3, [r3, #28]
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dc0:	e01f      	b.n	8007e02 <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dc4:	891b      	ldrh	r3, [r3, #8]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <find_volume+0x56e>
 8007dca:	230d      	movs	r3, #13
 8007dcc:	e094      	b.n	8007ef8 <find_volume+0x698>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dd4:	441a      	add	r2, r3
 8007dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dd8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007dda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d103      	bne.n	8007dea <find_volume+0x58a>
 8007de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	e00a      	b.n	8007e00 <find_volume+0x5a0>
 8007dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dec:	69da      	ldr	r2, [r3, #28]
 8007dee:	4613      	mov	r3, r2
 8007df0:	005b      	lsls	r3, r3, #1
 8007df2:	4413      	add	r3, r2
 8007df4:	085a      	lsrs	r2, r3, #1
 8007df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007e00:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e04:	6a1a      	ldr	r2, [r3, #32]
 8007e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e08:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007e0c:	0a5b      	lsrs	r3, r3, #9
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d201      	bcs.n	8007e16 <find_volume+0x5b6>
 8007e12:	230d      	movs	r3, #13
 8007e14:	e070      	b.n	8007ef8 <find_volume+0x698>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e18:	f04f 32ff 	mov.w	r2, #4294967295
 8007e1c:	619a      	str	r2, [r3, #24]
 8007e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e20:	699a      	ldr	r2, [r3, #24]
 8007e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e24:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e28:	2280      	movs	r2, #128	; 0x80
 8007e2a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007e2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d149      	bne.n	8007ec8 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e36:	3338      	adds	r3, #56	; 0x38
 8007e38:	3330      	adds	r3, #48	; 0x30
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fc fe70 	bl	8004b20 <ld_word>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d140      	bne.n	8007ec8 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007e46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e48:	3301      	adds	r3, #1
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007e4e:	f7fd fa69 	bl	8005324 <move_window>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d137      	bne.n	8007ec8 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 8007e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e60:	3338      	adds	r3, #56	; 0x38
 8007e62:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fc fe5a 	bl	8004b20 <ld_word>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d127      	bne.n	8007ec8 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007e78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e7a:	3338      	adds	r3, #56	; 0x38
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fc fe66 	bl	8004b4e <ld_dword>
 8007e82:	4603      	mov	r3, r0
 8007e84:	4a1f      	ldr	r2, [pc, #124]	; (8007f04 <find_volume+0x6a4>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d11e      	bne.n	8007ec8 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e8c:	3338      	adds	r3, #56	; 0x38
 8007e8e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fc fe5b 	bl	8004b4e <ld_dword>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	4a1b      	ldr	r2, [pc, #108]	; (8007f08 <find_volume+0x6a8>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d113      	bne.n	8007ec8 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ea2:	3338      	adds	r3, #56	; 0x38
 8007ea4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fc fe50 	bl	8004b4e <ld_dword>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eb2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eb6:	3338      	adds	r3, #56	; 0x38
 8007eb8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fc fe46 	bl	8004b4e <ld_dword>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eca:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8007ece:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007ed0:	4b0e      	ldr	r3, [pc, #56]	; (8007f0c <find_volume+0x6ac>)
 8007ed2:	881b      	ldrh	r3, [r3, #0]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	b29a      	uxth	r2, r3
 8007ed8:	4b0c      	ldr	r3, [pc, #48]	; (8007f0c <find_volume+0x6ac>)
 8007eda:	801a      	strh	r2, [r3, #0]
 8007edc:	4b0b      	ldr	r3, [pc, #44]	; (8007f0c <find_volume+0x6ac>)
 8007ede:	881a      	ldrh	r2, [r3, #0]
 8007ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ee2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ee6:	4a0a      	ldr	r2, [pc, #40]	; (8007f10 <find_volume+0x6b0>)
 8007ee8:	60da      	str	r2, [r3, #12]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8007eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eec:	4a09      	ldr	r2, [pc, #36]	; (8007f14 <find_volume+0x6b4>)
 8007eee:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007ef0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007ef2:	f7fd f9af 	bl	8005254 <clear_lock>
#endif
	return FR_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3770      	adds	r7, #112	; 0x70
 8007efc:	46bd      	mov	sp, r7
 8007efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f02:	bf00      	nop
 8007f04:	41615252 	.word	0x41615252
 8007f08:	61417272 	.word	0x61417272
 8007f0c:	20001078 	.word	0x20001078
 8007f10:	200012fc 	.word	0x200012fc
 8007f14:	2000109c 	.word	0x2000109c

08007f18 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007f22:	2309      	movs	r3, #9
 8007f24:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d01c      	beq.n	8007f66 <validate+0x4e>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d018      	beq.n	8007f66 <validate+0x4e>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d013      	beq.n	8007f66 <validate+0x4e>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	889a      	ldrh	r2, [r3, #4]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	88db      	ldrh	r3, [r3, #6]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d10c      	bne.n	8007f66 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	785b      	ldrb	r3, [r3, #1]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fc fd46 	bl	80049e4 <disk_status>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <validate+0x4e>
			res = FR_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d102      	bne.n	8007f72 <validate+0x5a>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	e000      	b.n	8007f74 <validate+0x5c>
 8007f72:	2300      	movs	r3, #0
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	6013      	str	r3, [r2, #0]
	return res;
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
	...

08007f84 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b088      	sub	sp, #32
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	4613      	mov	r3, r2
 8007f90:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007f96:	f107 0310 	add.w	r3, r7, #16
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7ff fbb9 	bl	8007712 <get_ldnumber>
 8007fa0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	da01      	bge.n	8007fac <f_mount+0x28>
 8007fa8:	230b      	movs	r3, #11
 8007faa:	e02b      	b.n	8008004 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007fac:	4a17      	ldr	r2, [pc, #92]	; (800800c <f_mount+0x88>)
 8007fae:	69fb      	ldr	r3, [r7, #28]
 8007fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fb4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007fb6:	69bb      	ldr	r3, [r7, #24]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d005      	beq.n	8007fc8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007fbc:	69b8      	ldr	r0, [r7, #24]
 8007fbe:	f7fd f949 	bl	8005254 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d002      	beq.n	8007fd4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	490d      	ldr	r1, [pc, #52]	; (800800c <f_mount+0x88>)
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <f_mount+0x66>
 8007fe4:	79fb      	ldrb	r3, [r7, #7]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d001      	beq.n	8007fee <f_mount+0x6a>
 8007fea:	2300      	movs	r3, #0
 8007fec:	e00a      	b.n	8008004 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007fee:	f107 010c 	add.w	r1, r7, #12
 8007ff2:	f107 0308 	add.w	r3, r7, #8
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7ff fc31 	bl	8007860 <find_volume>
 8007ffe:	4603      	mov	r3, r0
 8008000:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008002:	7dfb      	ldrb	r3, [r7, #23]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3720      	adds	r7, #32
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	20001068 	.word	0x20001068

08008010 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008014:	b0a6      	sub	sp, #152	; 0x98
 8008016:	af00      	add	r7, sp, #0
 8008018:	61f8      	str	r0, [r7, #28]
 800801a:	61b9      	str	r1, [r7, #24]
 800801c:	4613      	mov	r3, r2
 800801e:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <f_open+0x1a>
 8008026:	2309      	movs	r3, #9
 8008028:	e2ae      	b.n	8008588 <f_open+0x578>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800802a:	7dfb      	ldrb	r3, [r7, #23]
 800802c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008030:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 8008032:	7dfa      	ldrb	r2, [r7, #23]
 8008034:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8008038:	f107 0318 	add.w	r3, r7, #24
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff fc0f 	bl	8007860 <find_volume>
 8008042:	4603      	mov	r3, r0
 8008044:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	if (res == FR_OK) {
 8008048:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800804c:	2b00      	cmp	r3, #0
 800804e:	f040 8292 	bne.w	8008576 <f_open+0x566>
		dj.obj.fs = fs;
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800805c:	4611      	mov	r1, r2
 800805e:	4618      	mov	r0, r3
 8008060:	f7ff faae 	bl	80075c0 <follow_path>
 8008064:	4603      	mov	r3, r0
 8008066:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800806a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800806e:	2b00      	cmp	r3, #0
 8008070:	d11a      	bne.n	80080a8 <f_open+0x98>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008072:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8008076:	b25b      	sxtb	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	da03      	bge.n	8008084 <f_open+0x74>
				res = FR_INVALID_NAME;
 800807c:	2306      	movs	r3, #6
 800807e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008082:	e011      	b.n	80080a8 <f_open+0x98>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008084:	7dfb      	ldrb	r3, [r7, #23]
 8008086:	f023 0301 	bic.w	r3, r3, #1
 800808a:	2b00      	cmp	r3, #0
 800808c:	bf14      	ite	ne
 800808e:	2301      	movne	r3, #1
 8008090:	2300      	moveq	r3, #0
 8008092:	b2db      	uxtb	r3, r3
 8008094:	461a      	mov	r2, r3
 8008096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800809a:	4611      	mov	r1, r2
 800809c:	4618      	mov	r0, r3
 800809e:	f7fc ff97 	bl	8004fd0 <chk_lock>
 80080a2:	4603      	mov	r3, r0
 80080a4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
 80080aa:	f003 031c 	and.w	r3, r3, #28
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f000 8115 	beq.w	80082de <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 80080b4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d017      	beq.n	80080ec <f_open+0xdc>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80080bc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80080c0:	2b04      	cmp	r3, #4
 80080c2:	d10e      	bne.n	80080e2 <f_open+0xd2>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80080c4:	f7fc ffde 	bl	8005084 <enq_lock>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d006      	beq.n	80080dc <f_open+0xcc>
 80080ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7fe ff16 	bl	8006f04 <dir_register>
 80080d8:	4603      	mov	r3, r0
 80080da:	e000      	b.n	80080de <f_open+0xce>
 80080dc:	2312      	movs	r3, #18
 80080de:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80080e2:	7dfb      	ldrb	r3, [r7, #23]
 80080e4:	f043 0308 	orr.w	r3, r3, #8
 80080e8:	75fb      	strb	r3, [r7, #23]
 80080ea:	e011      	b.n	8008110 <f_open+0x100>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80080ec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80080f0:	f003 0311 	and.w	r3, r3, #17
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d003      	beq.n	8008100 <f_open+0xf0>
					res = FR_DENIED;
 80080f8:	2307      	movs	r3, #7
 80080fa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80080fe:	e007      	b.n	8008110 <f_open+0x100>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008100:	7dfb      	ldrb	r3, [r7, #23]
 8008102:	f003 0304 	and.w	r3, r3, #4
 8008106:	2b00      	cmp	r3, #0
 8008108:	d002      	beq.n	8008110 <f_open+0x100>
 800810a:	2308      	movs	r3, #8
 800810c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008110:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008114:	2b00      	cmp	r3, #0
 8008116:	f040 80fe 	bne.w	8008316 <f_open+0x306>
 800811a:	7dfb      	ldrb	r3, [r7, #23]
 800811c:	f003 0308 	and.w	r3, r3, #8
 8008120:	2b00      	cmp	r3, #0
 8008122:	f000 80f8 	beq.w	8008316 <f_open+0x306>
				dw = GET_FATTIME();
 8008126:	f7fc f9a3 	bl	8004470 <get_fattime>
 800812a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	2b04      	cmp	r3, #4
 8008134:	f040 8084 	bne.w	8008240 <f_open+0x230>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8008138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	3334      	adds	r3, #52	; 0x34
 8008144:	4618      	mov	r0, r3
 8008146:	f7fc fd02 	bl	8004b4e <ld_dword>
 800814a:	4602      	mov	r2, r0
 800814c:	69fb      	ldr	r3, [r7, #28]
 800814e:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8008150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	3338      	adds	r3, #56	; 0x38
 8008156:	4618      	mov	r0, r3
 8008158:	f7fc fd1b 	bl	8004b92 <ld_qword>
 800815c:	4602      	mov	r2, r0
 800815e:	460b      	mov	r3, r1
 8008160:	69f9      	ldr	r1, [r7, #28]
 8008162:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	3321      	adds	r3, #33	; 0x21
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	b2da      	uxtb	r2, r3
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	2200      	movs	r2, #0
 800817c:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	3308      	adds	r3, #8
 8008184:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8008188:	4618      	mov	r0, r3
 800818a:	f7fc fdf5 	bl	8004d78 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	3314      	adds	r3, #20
 8008194:	2200      	movs	r2, #0
 8008196:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	330c      	adds	r3, #12
 800819e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fc fde8 	bl	8004d78 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	3315      	adds	r3, #21
 80081ae:	2200      	movs	r2, #0
 80081b0:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	3304      	adds	r3, #4
 80081b8:	2220      	movs	r2, #32
 80081ba:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	3334      	adds	r3, #52	; 0x34
 80081c2:	2100      	movs	r1, #0
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fc fdd7 	bl	8004d78 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 80081ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80081d2:	f04f 0200 	mov.w	r2, #0
 80081d6:	f04f 0300 	mov.w	r3, #0
 80081da:	4608      	mov	r0, r1
 80081dc:	f7fc fdf7 	bl	8004dce <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80081e8:	f04f 0200 	mov.w	r2, #0
 80081ec:	f04f 0300 	mov.w	r3, #0
 80081f0:	4608      	mov	r0, r1
 80081f2:	f7fc fdec 	bl	8004dce <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	3321      	adds	r3, #33	; 0x21
 80081fc:	2201      	movs	r2, #1
 80081fe:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8008200:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008204:	4618      	mov	r0, r3
 8008206:	f7fe fbcb 	bl	80069a0 <store_xdir>
 800820a:	4603      	mov	r3, r0
 800820c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8008210:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008214:	2b00      	cmp	r3, #0
 8008216:	d17e      	bne.n	8008316 <f_open+0x306>
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d07a      	beq.n	8008316 <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8008220:	69f8      	ldr	r0, [r7, #28]
 8008222:	69fb      	ldr	r3, [r7, #28]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	2200      	movs	r2, #0
 8008228:	4619      	mov	r1, r3
 800822a:	f7fd fc85 	bl	8005b38 <remove_chain>
 800822e:	4603      	mov	r3, r0
 8008230:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	689a      	ldr	r2, [r3, #8]
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823a:	3a01      	subs	r2, #1
 800823c:	615a      	str	r2, [r3, #20]
 800823e:	e06a      	b.n	8008316 <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008240:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008242:	330e      	adds	r3, #14
 8008244:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8008248:	4618      	mov	r0, r3
 800824a:	f7fc fd95 	bl	8004d78 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800824e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008250:	3316      	adds	r3, #22
 8008252:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8008256:	4618      	mov	r0, r3
 8008258:	f7fc fd8e 	bl	8004d78 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800825c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800825e:	330b      	adds	r3, #11
 8008260:	2220      	movs	r2, #32
 8008262:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008268:	4611      	mov	r1, r2
 800826a:	4618      	mov	r0, r3
 800826c:	f7fe f814 	bl	8006298 <ld_clust>
 8008270:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008278:	2200      	movs	r2, #0
 800827a:	4618      	mov	r0, r3
 800827c:	f7fe f82b 	bl	80062d6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008282:	331c      	adds	r3, #28
 8008284:	2100      	movs	r1, #0
 8008286:	4618      	mov	r0, r3
 8008288:	f7fc fd76 	bl	8004d78 <st_dword>
					fs->wflag = 1;
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	2201      	movs	r2, #1
 8008290:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008292:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008296:	2b00      	cmp	r3, #0
 8008298:	d03d      	beq.n	8008316 <f_open+0x306>
						dw = fs->winsect;
 800829a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800829e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
						res = remove_chain(&dj.obj, cl, 0);
 80082a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80082a6:	2200      	movs	r2, #0
 80082a8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fd fc43 	bl	8005b38 <remove_chain>
 80082b2:	4603      	mov	r3, r0
 80082b4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
						if (res == FR_OK) {
 80082b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d12a      	bne.n	8008316 <f_open+0x306>
							res = move_window(fs, dw);
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fd f82c 	bl	8005324 <move_window>
 80082cc:	4603      	mov	r3, r0
 80082ce:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082d8:	3a01      	subs	r2, #1
 80082da:	615a      	str	r2, [r3, #20]
 80082dc:	e01b      	b.n	8008316 <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80082de:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d117      	bne.n	8008316 <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80082e6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80082ea:	f003 0310 	and.w	r3, r3, #16
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d003      	beq.n	80082fa <f_open+0x2ea>
					res = FR_NO_FILE;
 80082f2:	2304      	movs	r3, #4
 80082f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80082f8:	e00d      	b.n	8008316 <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80082fa:	7dfb      	ldrb	r3, [r7, #23]
 80082fc:	f003 0302 	and.w	r3, r3, #2
 8008300:	2b00      	cmp	r3, #0
 8008302:	d008      	beq.n	8008316 <f_open+0x306>
 8008304:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	2b00      	cmp	r3, #0
 800830e:	d002      	beq.n	8008316 <f_open+0x306>
						res = FR_DENIED;
 8008310:	2307      	movs	r3, #7
 8008312:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					}
				}
			}
		}
		if (res == FR_OK) {
 8008316:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800831a:	2b00      	cmp	r3, #0
 800831c:	d128      	bne.n	8008370 <f_open+0x360>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800831e:	7dfb      	ldrb	r3, [r7, #23]
 8008320:	f003 0308 	and.w	r3, r3, #8
 8008324:	2b00      	cmp	r3, #0
 8008326:	d003      	beq.n	8008330 <f_open+0x320>
				mode |= FA_MODIFIED;
 8008328:	7dfb      	ldrb	r3, [r7, #23]
 800832a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800832e:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008334:	69fb      	ldr	r3, [r7, #28]
 8008336:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8008338:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800833e:	7dfb      	ldrb	r3, [r7, #23]
 8008340:	f023 0301 	bic.w	r3, r3, #1
 8008344:	2b00      	cmp	r3, #0
 8008346:	bf14      	ite	ne
 8008348:	2301      	movne	r3, #1
 800834a:	2300      	moveq	r3, #0
 800834c:	b2db      	uxtb	r3, r3
 800834e:	461a      	mov	r2, r3
 8008350:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008354:	4611      	mov	r1, r2
 8008356:	4618      	mov	r0, r3
 8008358:	f7fc feb4 	bl	80050c4 <inc_lock>
 800835c:	4602      	mov	r2, r0
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008366:	2b00      	cmp	r3, #0
 8008368:	d102      	bne.n	8008370 <f_open+0x360>
 800836a:	2302      	movs	r3, #2
 800836c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008370:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008374:	2b00      	cmp	r3, #0
 8008376:	f040 80fe 	bne.w	8008576 <f_open+0x566>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	2b04      	cmp	r3, #4
 8008380:	d12d      	bne.n	80083de <f_open+0x3ce>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8008382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8008388:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800838c:	4613      	mov	r3, r2
 800838e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008392:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8008396:	431a      	orrs	r2, r3
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800839c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80083a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	3334      	adds	r3, #52	; 0x34
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7fc fbd0 	bl	8004b4e <ld_dword>
 80083ae:	4602      	mov	r2, r0
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	691b      	ldr	r3, [r3, #16]
 80083b8:	3338      	adds	r3, #56	; 0x38
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fc fbe9 	bl	8004b92 <ld_qword>
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	69f9      	ldr	r1, [r7, #28]
 80083c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	3321      	adds	r3, #33	; 0x21
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	f003 0302 	and.w	r3, r3, #2
 80083d6:	b2da      	uxtb	r2, r3
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	71da      	strb	r2, [r3, #7]
 80083dc:	e016      	b.n	800840c <f_open+0x3fc>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80083e2:	4611      	mov	r1, r2
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fd ff57 	bl	8006298 <ld_clust>
 80083ea:	4602      	mov	r2, r0
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80083f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083f2:	331c      	adds	r3, #28
 80083f4:	4618      	mov	r0, r3
 80083f6:	f7fc fbaa 	bl	8004b4e <ld_dword>
 80083fa:	4603      	mov	r3, r0
 80083fc:	2200      	movs	r2, #0
 80083fe:	60bb      	str	r3, [r7, #8]
 8008400:	60fa      	str	r2, [r7, #12]
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008408:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	2200      	movs	r2, #0
 8008410:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	88da      	ldrh	r2, [r3, #6]
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	7dfa      	ldrb	r2, [r7, #23]
 8008424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8008430:	69fb      	ldr	r3, [r7, #28]
 8008432:	2200      	movs	r2, #0
 8008434:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008436:	69f9      	ldr	r1, [r7, #28]
 8008438:	f04f 0200 	mov.w	r2, #0
 800843c:	f04f 0300 	mov.w	r3, #0
 8008440:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	3354      	adds	r3, #84	; 0x54
 8008448:	f44f 7200 	mov.w	r2, #512	; 0x200
 800844c:	2100      	movs	r1, #0
 800844e:	4618      	mov	r0, r3
 8008450:	f7fc fd64 	bl	8004f1c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008454:	7dfb      	ldrb	r3, [r7, #23]
 8008456:	f003 0320 	and.w	r3, r3, #32
 800845a:	2b00      	cmp	r3, #0
 800845c:	f000 808b 	beq.w	8008576 <f_open+0x566>
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008466:	4313      	orrs	r3, r2
 8008468:	f000 8085 	beq.w	8008576 <f_open+0x566>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008472:	69f9      	ldr	r1, [r7, #28]
 8008474:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	895b      	ldrh	r3, [r3, #10]
 800847c:	025b      	lsls	r3, r3, #9
 800847e:	67fb      	str	r3, [r7, #124]	; 0x7c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800848e:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 8008492:	e026      	b.n	80084e2 <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800849a:	4618      	mov	r0, r3
 800849c:	f7fc fffc 	bl	8005498 <get_fat>
 80084a0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
					if (clst <= 1) res = FR_INT_ERR;
 80084a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d802      	bhi.n	80084b2 <f_open+0x4a2>
 80084ac:	2302      	movs	r3, #2
 80084ae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80084b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ba:	d102      	bne.n	80084c2 <f_open+0x4b2>
 80084bc:	2301      	movs	r3, #1
 80084be:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80084c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084c4:	2200      	movs	r2, #0
 80084c6:	469a      	mov	sl, r3
 80084c8:	4693      	mov	fp, r2
 80084ca:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80084ce:	ebb2 010a 	subs.w	r1, r2, sl
 80084d2:	6039      	str	r1, [r7, #0]
 80084d4:	eb63 030b 	sbc.w	r3, r3, fp
 80084d8:	607b      	str	r3, [r7, #4]
 80084da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084de:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
 80084e2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d109      	bne.n	80084fe <f_open+0x4ee>
 80084ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80084ec:	2200      	movs	r2, #0
 80084ee:	4698      	mov	r8, r3
 80084f0:	4691      	mov	r9, r2
 80084f2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80084f6:	4590      	cmp	r8, r2
 80084f8:	eb79 0303 	sbcs.w	r3, r9, r3
 80084fc:	d3ca      	bcc.n	8008494 <f_open+0x484>
				}
				fp->clust = clst;
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008504:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008506:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800850a:	2b00      	cmp	r3, #0
 800850c:	d133      	bne.n	8008576 <f_open+0x566>
 800850e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008512:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8008516:	2500      	movs	r5, #0
 8008518:	ea54 0305 	orrs.w	r3, r4, r5
 800851c:	d02b      	beq.n	8008576 <f_open+0x566>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008524:	4618      	mov	r0, r3
 8008526:	f7fc ff99 	bl	800545c <clust2sect>
 800852a:	67b8      	str	r0, [r7, #120]	; 0x78
 800852c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800852e:	2b00      	cmp	r3, #0
 8008530:	d103      	bne.n	800853a <f_open+0x52a>
						res = FR_INT_ERR;
 8008532:	2302      	movs	r3, #2
 8008534:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008538:	e01d      	b.n	8008576 <f_open+0x566>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800853a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 800853e:	f04f 0200 	mov.w	r2, #0
 8008542:	f04f 0300 	mov.w	r3, #0
 8008546:	0a42      	lsrs	r2, r0, #9
 8008548:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800854c:	0a4b      	lsrs	r3, r1, #9
 800854e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008550:	441a      	add	r2, r3
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	7858      	ldrb	r0, [r3, #1]
 800855a:	69fb      	ldr	r3, [r7, #28]
 800855c:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008564:	2301      	movs	r3, #1
 8008566:	f7fc fa7d 	bl	8004a64 <disk_read>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <f_open+0x566>
 8008570:	2301      	movs	r3, #1
 8008572:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008576:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <f_open+0x574>
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	2200      	movs	r2, #0
 8008582:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008584:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8008588:	4618      	mov	r0, r3
 800858a:	3798      	adds	r7, #152	; 0x98
 800858c:	46bd      	mov	sp, r7
 800858e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008592 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008592:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008596:	b094      	sub	sp, #80	; 0x50
 8008598:	af00      	add	r7, sp, #0
 800859a:	61f8      	str	r0, [r7, #28]
 800859c:	61b9      	str	r1, [r7, #24]
 800859e:	617a      	str	r2, [r7, #20]
 80085a0:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	63fb      	str	r3, [r7, #60]	; 0x3c


	*br = 0;	/* Clear read byte counter */
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	2200      	movs	r2, #0
 80085aa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80085b2:	4611      	mov	r1, r2
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7ff fcaf 	bl	8007f18 <validate>
 80085ba:	4603      	mov	r3, r0
 80085bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80085c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d108      	bne.n	80085da <f_read+0x48>
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80085ce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80085d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d002      	beq.n	80085e0 <f_read+0x4e>
 80085da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80085de:	e14d      	b.n	800887c <f_read+0x2ea>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80085e0:	69fb      	ldr	r3, [r7, #28]
 80085e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <f_read+0x60>
 80085ee:	2307      	movs	r3, #7
 80085f0:	e144      	b.n	800887c <f_read+0x2ea>
	remain = fp->obj.objsize - fp->fptr;
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80085f8:	69fb      	ldr	r3, [r7, #28]
 80085fa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80085fe:	ebb0 0c02 	subs.w	ip, r0, r2
 8008602:	f8c7 c000 	str.w	ip, [r7]
 8008606:	eb61 0303 	sbc.w	r3, r1, r3
 800860a:	607b      	str	r3, [r7, #4]
 800860c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008610:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	2200      	movs	r2, #0
 8008618:	469a      	mov	sl, r3
 800861a:	4693      	mov	fp, r2
 800861c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008620:	4552      	cmp	r2, sl
 8008622:	eb73 030b 	sbcs.w	r3, r3, fp
 8008626:	f080 8124 	bcs.w	8008872 <f_read+0x2e0>
 800862a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862c:	617b      	str	r3, [r7, #20]

	for ( ;  btr;								/* Repeat until all data read */
 800862e:	e120      	b.n	8008872 <f_read+0x2e0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008636:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800863a:	2500      	movs	r5, #0
 800863c:	ea54 0305 	orrs.w	r3, r4, r5
 8008640:	f040 80d9 	bne.w	80087f6 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800864a:	f04f 0200 	mov.w	r2, #0
 800864e:	f04f 0300 	mov.w	r3, #0
 8008652:	0a42      	lsrs	r2, r0, #9
 8008654:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8008658:	0a4b      	lsrs	r3, r1, #9
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	895b      	ldrh	r3, [r3, #10]
 800865e:	3b01      	subs	r3, #1
 8008660:	4013      	ands	r3, r2
 8008662:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 8008664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008666:	2b00      	cmp	r3, #0
 8008668:	d132      	bne.n	80086d0 <f_read+0x13e>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008670:	4313      	orrs	r3, r2
 8008672:	d103      	bne.n	800867c <f_read+0xea>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	64bb      	str	r3, [r7, #72]	; 0x48
 800867a:	e013      	b.n	80086a4 <f_read+0x112>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008680:	2b00      	cmp	r3, #0
 8008682:	d007      	beq.n	8008694 <f_read+0x102>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800868a:	69f8      	ldr	r0, [r7, #28]
 800868c:	f7fd fc09 	bl	8005ea2 <clmt_clust>
 8008690:	64b8      	str	r0, [r7, #72]	; 0x48
 8008692:	e007      	b.n	80086a4 <f_read+0x112>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008694:	69fa      	ldr	r2, [r7, #28]
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	4619      	mov	r1, r3
 800869c:	4610      	mov	r0, r2
 800869e:	f7fc fefb 	bl	8005498 <get_fat>
 80086a2:	64b8      	str	r0, [r7, #72]	; 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80086a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d805      	bhi.n	80086b6 <f_read+0x124>
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	2202      	movs	r2, #2
 80086ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80086b2:	2302      	movs	r3, #2
 80086b4:	e0e2      	b.n	800887c <f_read+0x2ea>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80086b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086bc:	d105      	bne.n	80086ca <f_read+0x138>
 80086be:	69fb      	ldr	r3, [r7, #28]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80086c6:	2301      	movs	r3, #1
 80086c8:	e0d8      	b.n	800887c <f_read+0x2ea>
				fp->clust = clst;				/* Update current cluster */
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086ce:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80086d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d6:	4619      	mov	r1, r3
 80086d8:	4610      	mov	r0, r2
 80086da:	f7fc febf 	bl	800545c <clust2sect>
 80086de:	62b8      	str	r0, [r7, #40]	; 0x28
			if (!sect) ABORT(fs, FR_INT_ERR);
 80086e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d105      	bne.n	80086f2 <f_read+0x160>
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	2202      	movs	r2, #2
 80086ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80086ee:	2302      	movs	r3, #2
 80086f0:	e0c4      	b.n	800887c <f_read+0x2ea>
			sect += csect;
 80086f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f6:	4413      	add	r3, r2
 80086f8:	62bb      	str	r3, [r7, #40]	; 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	0a5b      	lsrs	r3, r3, #9
 80086fe:	643b      	str	r3, [r7, #64]	; 0x40
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008702:	2b00      	cmp	r3, #0
 8008704:	d03b      	beq.n	800877e <f_read+0x1ec>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800870a:	4413      	add	r3, r2
 800870c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800870e:	8952      	ldrh	r2, [r2, #10]
 8008710:	4293      	cmp	r3, r2
 8008712:	d905      	bls.n	8008720 <f_read+0x18e>
					cc = fs->csize - csect;
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	895b      	ldrh	r3, [r3, #10]
 8008718:	461a      	mov	r2, r3
 800871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	643b      	str	r3, [r7, #64]	; 0x40
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008722:	7858      	ldrb	r0, [r3, #1]
 8008724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008728:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800872a:	f7fc f99b 	bl	8004a64 <disk_read>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d005      	beq.n	8008740 <f_read+0x1ae>
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800873c:	2301      	movs	r3, #1
 800873e:	e09d      	b.n	800887c <f_read+0x2ea>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008746:	b25b      	sxtb	r3, r3
 8008748:	2b00      	cmp	r3, #0
 800874a:	da14      	bge.n	8008776 <f_read+0x1e4>
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008752:	1ad3      	subs	r3, r2, r3
 8008754:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008756:	429a      	cmp	r2, r3
 8008758:	d90d      	bls.n	8008776 <f_read+0x1e4>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800875e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	025b      	lsls	r3, r3, #9
 8008764:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008766:	18d0      	adds	r0, r2, r3
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	3354      	adds	r3, #84	; 0x54
 800876c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008770:	4619      	mov	r1, r3
 8008772:	f7fc fbb3 	bl	8004edc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008778:	025b      	lsls	r3, r3, #9
 800877a:	647b      	str	r3, [r7, #68]	; 0x44
				continue;
 800877c:	e059      	b.n	8008832 <f_read+0x2a0>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008782:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008784:	429a      	cmp	r2, r3
 8008786:	d033      	beq.n	80087f0 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800878e:	b25b      	sxtb	r3, r3
 8008790:	2b00      	cmp	r3, #0
 8008792:	da1b      	bge.n	80087cc <f_read+0x23a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	7858      	ldrb	r0, [r3, #1]
 8008798:	69fb      	ldr	r3, [r7, #28]
 800879a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087a2:	2301      	movs	r3, #1
 80087a4:	f7fc f97e 	bl	8004aa4 <disk_write>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d005      	beq.n	80087ba <f_read+0x228>
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80087b6:	2301      	movs	r3, #1
 80087b8:	e060      	b.n	800887c <f_read+0x2ea>
					fp->flag &= (BYTE)~FA_DIRTY;
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087c4:	b2da      	uxtb	r2, r3
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	7858      	ldrb	r0, [r3, #1]
 80087d0:	69fb      	ldr	r3, [r7, #28]
 80087d2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80087d6:	2301      	movs	r3, #1
 80087d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087da:	f7fc f943 	bl	8004a64 <disk_read>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d005      	beq.n	80087f0 <f_read+0x25e>
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80087ec:	2301      	movs	r3, #1
 80087ee:	e045      	b.n	800887c <f_read+0x2ea>
			}
#endif
			fp->sect = sect;
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087f4:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80087fc:	4613      	mov	r3, r2
 80087fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008802:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008806:	647b      	str	r3, [r7, #68]	; 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008808:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	429a      	cmp	r2, r3
 800880e:	d901      	bls.n	8008814 <f_read+0x282>
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	647b      	str	r3, [r7, #68]	; 0x44
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008820:	4613      	mov	r3, r2
 8008822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008826:	440b      	add	r3, r1
 8008828:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800882a:	4619      	mov	r1, r3
 800882c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800882e:	f7fc fb55 	bl	8004edc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008832:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008836:	4413      	add	r3, r2
 8008838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008840:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008842:	2000      	movs	r0, #0
 8008844:	4688      	mov	r8, r1
 8008846:	4681      	mov	r9, r0
 8008848:	eb12 0108 	adds.w	r1, r2, r8
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	eb43 0309 	adc.w	r3, r3, r9
 8008852:	60fb      	str	r3, [r7, #12]
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800885a:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008864:	441a      	add	r2, r3
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	601a      	str	r2, [r3, #0]
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	617b      	str	r3, [r7, #20]
	for ( ;  btr;								/* Repeat until all data read */
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	2b00      	cmp	r3, #0
 8008876:	f47f aedb 	bne.w	8008630 <f_read+0x9e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3750      	adds	r7, #80	; 0x50
 8008880:	46bd      	mov	sp, r7
 8008882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008886 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008886:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800888a:	b08c      	sub	sp, #48	; 0x30
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
 8008894:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	2200      	movs	r2, #0
 800889e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f107 0210 	add.w	r2, r7, #16
 80088a6:	4611      	mov	r1, r2
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7ff fb35 	bl	8007f18 <validate>
 80088ae:	4603      	mov	r3, r0
 80088b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80088b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d108      	bne.n	80088ce <f_write+0x48>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80088c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80088c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d002      	beq.n	80088d4 <f_write+0x4e>
 80088ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088d2:	e187      	b.n	8008be4 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80088da:	f003 0302 	and.w	r3, r3, #2
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d101      	bne.n	80088e6 <f_write+0x60>
 80088e2:	2307      	movs	r3, #7
 80088e4:	e17e      	b.n	8008be4 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	2b04      	cmp	r3, #4
 80088ec:	f000 816a 	beq.w	8008bc4 <f_write+0x33e>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	18d1      	adds	r1, r2, r3
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008900:	4613      	mov	r3, r2
 8008902:	4299      	cmp	r1, r3
 8008904:	f080 815e 	bcs.w	8008bc4 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800890e:	4613      	mov	r3, r2
 8008910:	43db      	mvns	r3, r3
 8008912:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008914:	e156      	b.n	8008bc4 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800891c:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8008920:	2500      	movs	r5, #0
 8008922:	ea54 0305 	orrs.w	r3, r4, r5
 8008926:	f040 80fb 	bne.w	8008b20 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008930:	f04f 0200 	mov.w	r2, #0
 8008934:	f04f 0300 	mov.w	r3, #0
 8008938:	0a42      	lsrs	r2, r0, #9
 800893a:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800893e:	0a4b      	lsrs	r3, r1, #9
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	895b      	ldrh	r3, [r3, #10]
 8008944:	3b01      	subs	r3, #1
 8008946:	4013      	ands	r3, r2
 8008948:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800894a:	69bb      	ldr	r3, [r7, #24]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d146      	bne.n	80089de <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008956:	4313      	orrs	r3, r2
 8008958:	d10c      	bne.n	8008974 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008962:	2b00      	cmp	r3, #0
 8008964:	d11a      	bne.n	800899c <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2100      	movs	r1, #0
 800896a:	4618      	mov	r0, r3
 800896c:	f7fd f998 	bl	8005ca0 <create_chain>
 8008970:	62b8      	str	r0, [r7, #40]	; 0x28
 8008972:	e013      	b.n	800899c <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008978:	2b00      	cmp	r3, #0
 800897a:	d007      	beq.n	800898c <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f7fd fa8d 	bl	8005ea2 <clmt_clust>
 8008988:	62b8      	str	r0, [r7, #40]	; 0x28
 800898a:	e007      	b.n	800899c <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008992:	4619      	mov	r1, r3
 8008994:	4610      	mov	r0, r2
 8008996:	f7fd f983 	bl	8005ca0 <create_chain>
 800899a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800899c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 8115 	beq.w	8008bce <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80089a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d105      	bne.n	80089b6 <f_write+0x130>
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2202      	movs	r2, #2
 80089ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80089b2:	2302      	movs	r3, #2
 80089b4:	e116      	b.n	8008be4 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80089b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089bc:	d105      	bne.n	80089ca <f_write+0x144>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80089c6:	2301      	movs	r3, #1
 80089c8:	e10c      	b.n	8008be4 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089ce:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d102      	bne.n	80089de <f_write+0x158>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089dc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80089e4:	b25b      	sxtb	r3, r3
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	da1b      	bge.n	8008a22 <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	7858      	ldrb	r0, [r3, #1]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089f8:	2301      	movs	r3, #1
 80089fa:	f7fc f853 	bl	8004aa4 <disk_write>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d005      	beq.n	8008a10 <f_write+0x18a>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e0e9      	b.n	8008be4 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008a22:	693a      	ldr	r2, [r7, #16]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a28:	4619      	mov	r1, r3
 8008a2a:	4610      	mov	r0, r2
 8008a2c:	f7fc fd16 	bl	800545c <clust2sect>
 8008a30:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d105      	bne.n	8008a44 <f_write+0x1be>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8008a40:	2302      	movs	r3, #2
 8008a42:	e0cf      	b.n	8008be4 <f_write+0x35e>
			sect += csect;
 8008a44:	697a      	ldr	r2, [r7, #20]
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	4413      	add	r3, r2
 8008a4a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	0a5b      	lsrs	r3, r3, #9
 8008a50:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d03f      	beq.n	8008ad8 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008a58:	69ba      	ldr	r2, [r7, #24]
 8008a5a:	6a3b      	ldr	r3, [r7, #32]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	8952      	ldrh	r2, [r2, #10]
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d905      	bls.n	8008a72 <f_write+0x1ec>
					cc = fs->csize - csect;
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	895b      	ldrh	r3, [r3, #10]
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	69bb      	ldr	r3, [r7, #24]
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	7858      	ldrb	r0, [r3, #1]
 8008a76:	6a3b      	ldr	r3, [r7, #32]
 8008a78:	697a      	ldr	r2, [r7, #20]
 8008a7a:	69f9      	ldr	r1, [r7, #28]
 8008a7c:	f7fc f812 	bl	8004aa4 <disk_write>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d005      	beq.n	8008a92 <f_write+0x20c>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e0a8      	b.n	8008be4 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	6a3a      	ldr	r2, [r7, #32]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d917      	bls.n	8008ad0 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	025b      	lsls	r3, r3, #9
 8008ab0:	69fa      	ldr	r2, [r7, #28]
 8008ab2:	4413      	add	r3, r2
 8008ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ab8:	4619      	mov	r1, r3
 8008aba:	f7fc fa0f 	bl	8004edc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	025b      	lsls	r3, r3, #9
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008ad6:	e04a      	b.n	8008b6e <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008adc:	697a      	ldr	r2, [r7, #20]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d01b      	beq.n	8008b1a <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008aee:	4290      	cmp	r0, r2
 8008af0:	eb71 0303 	sbcs.w	r3, r1, r3
 8008af4:	d211      	bcs.n	8008b1a <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	7858      	ldrb	r0, [r3, #1]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008b00:	2301      	movs	r3, #1
 8008b02:	697a      	ldr	r2, [r7, #20]
 8008b04:	f7fb ffae 	bl	8004a64 <disk_read>
 8008b08:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d005      	beq.n	8008b1a <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8008b16:	2301      	movs	r3, #1
 8008b18:	e064      	b.n	8008be4 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008b26:	4613      	mov	r3, r2
 8008b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b2c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008b30:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d901      	bls.n	8008b3e <f_write+0x2b8>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b50:	440b      	add	r3, r1
 8008b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b54:	69f9      	ldr	r1, [r7, #28]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7fc f9c0 	bl	8004edc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b66:	b2da      	uxtb	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008b6e:	69fa      	ldr	r2, [r7, #28]
 8008b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b72:	4413      	add	r3, r2
 8008b74:	61fb      	str	r3, [r7, #28]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008b7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b7e:	2000      	movs	r0, #0
 8008b80:	4688      	mov	r8, r1
 8008b82:	4681      	mov	r9, r0
 8008b84:	eb12 0a08 	adds.w	sl, r2, r8
 8008b88:	eb43 0b09 	adc.w	fp, r3, r9
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008b98:	68f9      	ldr	r1, [r7, #12]
 8008b9a:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 8008b9e:	4282      	cmp	r2, r0
 8008ba0:	eb73 0c01 	sbcs.w	ip, r3, r1
 8008ba4:	d201      	bcs.n	8008baa <f_write+0x324>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	68f9      	ldr	r1, [r7, #12]
 8008bac:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	681a      	ldr	r2, [r3, #0]
 8008bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb6:	441a      	add	r2, r3
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f47f aea5 	bne.w	8008916 <f_write+0x90>
 8008bcc:	e000      	b.n	8008bd0 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008bce:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bda:	b2da      	uxtb	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3730      	adds	r7, #48	; 0x30
 8008be8:	46bd      	mov	sp, r7
 8008bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008bee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b09a      	sub	sp, #104	; 0x68
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff f98a 	bl	8007f18 <validate>
 8008c04:	4603      	mov	r3, r0
 8008c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8008c0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f040 8105 	bne.w	8008e1e <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 80fd 	beq.w	8008e1e <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c2a:	b25b      	sxtb	r3, r3
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	da17      	bge.n	8008c60 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c32:	7858      	ldrb	r0, [r3, #1]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c3e:	2301      	movs	r3, #1
 8008c40:	f7fb ff30 	bl	8004aa4 <disk_write>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d001      	beq.n	8008c4e <f_sync+0x60>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e0e9      	b.n	8008e22 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c58:	b2da      	uxtb	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008c60:	f7fb fc06 	bl	8004470 <get_fattime>
 8008c64:	6638      	str	r0, [r7, #96]	; 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8008c66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	2b04      	cmp	r3, #4
 8008c6c:	f040 808c 	bne.w	8008d88 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7fc ff00 	bl	8005a78 <fill_first_frag>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8008c7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10a      	bne.n	8008c9c <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c90:	4619      	mov	r1, r3
 8008c92:	f7fc ff20 	bl	8005ad6 <fill_last_frag>
 8008c96:	4603      	mov	r3, r0
 8008c98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (res == FR_OK) {
 8008c9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	f040 80bc 	bne.w	8008e1e <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	f107 0308 	add.w	r3, r7, #8
 8008cac:	4611      	mov	r1, r2
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fd fe40 	bl	8006934 <load_obj_dir>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (res == FR_OK) {
 8008cba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	f040 80ad 	bne.w	8008e1e <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8008cc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cc6:	691b      	ldr	r3, [r3, #16]
 8008cc8:	3304      	adds	r3, #4
 8008cca:	781a      	ldrb	r2, [r3, #0]
 8008ccc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	f042 0220 	orr.w	r2, r2, #32
 8008cd6:	b2d2      	uxtb	r2, r2
 8008cd8:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	79da      	ldrb	r2, [r3, #7]
 8008cde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	3321      	adds	r3, #33	; 0x21
 8008ce4:	f042 0201 	orr.w	r2, r2, #1
 8008ce8:	b2d2      	uxtb	r2, r2
 8008cea:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 8008cec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	f7fc f83c 	bl	8004d78 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8008d00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008d0e:	4608      	mov	r0, r1
 8008d10:	f7fc f85d 	bl	8004dce <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8008d14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008d22:	4608      	mov	r0, r1
 8008d24:	f7fc f853 	bl	8004dce <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8008d28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d2a:	691b      	ldr	r3, [r3, #16]
 8008d2c:	330c      	adds	r3, #12
 8008d2e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7fc f821 	bl	8004d78 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8008d36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	3315      	adds	r3, #21
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8008d40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	3310      	adds	r3, #16
 8008d46:	2100      	movs	r1, #0
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f7fc f815 	bl	8004d78 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8008d4e:	f107 0308 	add.w	r3, r7, #8
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7fd fe24 	bl	80069a0 <store_xdir>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8008d5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d15b      	bne.n	8008e1e <f_sync+0x230>
							res = sync_fs(fs);
 8008d66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7fc fb09 	bl	8005380 <sync_fs>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d7e:	b2da      	uxtb	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8008d86:	e04a      	b.n	8008e1e <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008d88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d8e:	4619      	mov	r1, r3
 8008d90:	4610      	mov	r0, r2
 8008d92:	f7fc fac7 	bl	8005324 <move_window>
 8008d96:	4603      	mov	r3, r0
 8008d98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (res == FR_OK) {
 8008d9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d13c      	bne.n	8008e1e <f_sync+0x230>
					dir = fp->dir_ptr;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008da8:	65fb      	str	r3, [r7, #92]	; 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dac:	330b      	adds	r3, #11
 8008dae:	781a      	ldrb	r2, [r3, #0]
 8008db0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008db2:	330b      	adds	r3, #11
 8008db4:	f042 0220 	orr.w	r2, r2, #32
 8008db8:	b2d2      	uxtb	r2, r2
 8008dba:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6818      	ldr	r0, [r3, #0]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	689b      	ldr	r3, [r3, #8]
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008dc8:	f7fd fa85 	bl	80062d6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dce:	f103 001c 	add.w	r0, r3, #28
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	4619      	mov	r1, r3
 8008ddc:	f7fb ffcc 	bl	8004d78 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008de0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008de2:	3316      	adds	r3, #22
 8008de4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fb ffc6 	bl	8004d78 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dee:	3312      	adds	r3, #18
 8008df0:	2100      	movs	r1, #0
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fb ffa6 	bl	8004d44 <st_word>
					fs->wflag = 1;
 8008df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7fc fabd 	bl	8005380 <sync_fs>
 8008e06:	4603      	mov	r3, r0
 8008e08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e16:	b2da      	uxtb	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008e1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3768      	adds	r7, #104	; 0x68
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}

08008e2a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b084      	sub	sp, #16
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7ff fedb 	bl	8008bee <f_sync>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008e3c:	7bfb      	ldrb	r3, [r7, #15]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d118      	bne.n	8008e74 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f107 0208 	add.w	r2, r7, #8
 8008e48:	4611      	mov	r1, r2
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7ff f864 	bl	8007f18 <validate>
 8008e50:	4603      	mov	r3, r0
 8008e52:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d10c      	bne.n	8008e74 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fc f9be 	bl	80051e0 <dec_lock>
 8008e64:	4603      	mov	r3, r0
 8008e66:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d102      	bne.n	8008e74 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b09a      	sub	sp, #104	; 0x68
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	60f8      	str	r0, [r7, #12]
 8008e86:	60b9      	str	r1, [r7, #8]
 8008e88:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008e8a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8008e8e:	f107 030c 	add.w	r3, r7, #12
 8008e92:	2200      	movs	r2, #0
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fe fce3 	bl	8007860 <find_volume>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8008ea0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f040 80e6 	bne.w	8009076 <f_getfree+0x1f8>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008eaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8008eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eb2:	699a      	ldr	r2, [r3, #24]
 8008eb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eb6:	69db      	ldr	r3, [r3, #28]
 8008eb8:	3b02      	subs	r3, #2
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d804      	bhi.n	8008ec8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8008ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ec0:	699a      	ldr	r2, [r3, #24]
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	601a      	str	r2, [r3, #0]
 8008ec6:	e0d6      	b.n	8009076 <f_getfree+0x1f8>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	663b      	str	r3, [r7, #96]	; 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8008ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d128      	bne.n	8008f26 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008eda:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 8008edc:	f107 0310 	add.w	r3, r7, #16
 8008ee0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fc fad8 	bl	8005498 <get_fat>
 8008ee8:	6478      	str	r0, [r7, #68]	; 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8008eea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef0:	d103      	bne.n	8008efa <f_getfree+0x7c>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008ef8:	e0b0      	b.n	800905c <f_getfree+0x1de>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8008efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d103      	bne.n	8008f08 <f_getfree+0x8a>
 8008f00:	2302      	movs	r3, #2
 8008f02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008f06:	e0a9      	b.n	800905c <f_getfree+0x1de>
					if (stat == 0) nfree++;
 8008f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d102      	bne.n	8008f14 <f_getfree+0x96>
 8008f0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f10:	3301      	adds	r3, #1
 8008f12:	663b      	str	r3, [r7, #96]	; 0x60
				} while (++clst < fs->n_fatent);
 8008f14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f16:	3301      	adds	r3, #1
 8008f18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d3db      	bcc.n	8008edc <f_getfree+0x5e>
 8008f24:	e09a      	b.n	800905c <f_getfree+0x1de>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 8008f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	2b04      	cmp	r3, #4
 8008f2c:	d146      	bne.n	8008fbc <f_getfree+0x13e>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 8008f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f30:	69db      	ldr	r3, [r3, #28]
 8008f32:	3b02      	subs	r3, #2
 8008f34:	65fb      	str	r3, [r7, #92]	; 0x5c
					sect = fs->database;
 8008f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3a:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	657b      	str	r3, [r7, #84]	; 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 8008f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d10d      	bne.n	8008f62 <f_getfree+0xe4>
 8008f46:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008f48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f4a:	1c5a      	adds	r2, r3, #1
 8008f4c:	65ba      	str	r2, [r7, #88]	; 0x58
 8008f4e:	4619      	mov	r1, r3
 8008f50:	f7fc f9e8 	bl	8005324 <move_window>
 8008f54:	4603      	mov	r3, r0
 8008f56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008f5a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d179      	bne.n	8009056 <f_getfree+0x1d8>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 8008f62:	2308      	movs	r3, #8
 8008f64:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008f6a:	4413      	add	r3, r2
 8008f6c:	3338      	adds	r3, #56	; 0x38
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008f74:	e013      	b.n	8008f9e <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 8008f76:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d102      	bne.n	8008f88 <f_getfree+0x10a>
 8008f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f84:	3301      	adds	r3, #1
 8008f86:	663b      	str	r3, [r7, #96]	; 0x60
							bm >>= 1;
 8008f88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008f8c:	085b      	lsrs	r3, r3, #1
 8008f8e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 8008f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f94:	3b01      	subs	r3, #1
 8008f96:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <f_getfree+0x12c>
 8008fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1e5      	bne.n	8008f76 <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 8008faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fac:	3301      	adds	r3, #1
 8008fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fb2:	657b      	str	r3, [r7, #84]	; 0x54
					} while (clst);
 8008fb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1c2      	bne.n	8008f40 <f_getfree+0xc2>
 8008fba:	e04f      	b.n	800905c <f_getfree+0x1de>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fbe:	69db      	ldr	r3, [r3, #28]
 8008fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc6:	65bb      	str	r3, [r7, #88]	; 0x58
					i = 0; p = 0;
 8008fc8:	2300      	movs	r3, #0
 8008fca:	657b      	str	r3, [r7, #84]	; 0x54
 8008fcc:	2300      	movs	r3, #0
 8008fce:	653b      	str	r3, [r7, #80]	; 0x50
					do {
						if (i == 0) {
 8008fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d113      	bne.n	8008ffe <f_getfree+0x180>
							res = move_window(fs, sect++);
 8008fd6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008fd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fda:	1c5a      	adds	r2, r3, #1
 8008fdc:	65ba      	str	r2, [r7, #88]	; 0x58
 8008fde:	4619      	mov	r1, r3
 8008fe0:	f7fc f9a0 	bl	8005324 <move_window>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							if (res != FR_OK) break;
 8008fea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d133      	bne.n	800905a <f_getfree+0x1dc>
							p = fs->win;
 8008ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ff4:	3338      	adds	r3, #56	; 0x38
 8008ff6:	653b      	str	r3, [r7, #80]	; 0x50
							i = SS(fs);
 8008ff8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ffc:	657b      	str	r3, [r7, #84]	; 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 8008ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	2b02      	cmp	r3, #2
 8009004:	d10f      	bne.n	8009026 <f_getfree+0x1a8>
							if (ld_word(p) == 0) nfree++;
 8009006:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009008:	f7fb fd8a 	bl	8004b20 <ld_word>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d102      	bne.n	8009018 <f_getfree+0x19a>
 8009012:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009014:	3301      	adds	r3, #1
 8009016:	663b      	str	r3, [r7, #96]	; 0x60
							p += 2; i -= 2;
 8009018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800901a:	3302      	adds	r3, #2
 800901c:	653b      	str	r3, [r7, #80]	; 0x50
 800901e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009020:	3b02      	subs	r3, #2
 8009022:	657b      	str	r3, [r7, #84]	; 0x54
 8009024:	e010      	b.n	8009048 <f_getfree+0x1ca>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8009026:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8009028:	f7fb fd91 	bl	8004b4e <ld_dword>
 800902c:	4603      	mov	r3, r0
 800902e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009032:	2b00      	cmp	r3, #0
 8009034:	d102      	bne.n	800903c <f_getfree+0x1be>
 8009036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009038:	3301      	adds	r3, #1
 800903a:	663b      	str	r3, [r7, #96]	; 0x60
							p += 4; i -= 4;
 800903c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800903e:	3304      	adds	r3, #4
 8009040:	653b      	str	r3, [r7, #80]	; 0x50
 8009042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009044:	3b04      	subs	r3, #4
 8009046:	657b      	str	r3, [r7, #84]	; 0x54
						}
					} while (--clst);
 8009048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800904a:	3b01      	subs	r3, #1
 800904c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800904e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1bd      	bne.n	8008fd0 <f_getfree+0x152>
 8009054:	e002      	b.n	800905c <f_getfree+0x1de>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 8009056:	bf00      	nop
 8009058:	e000      	b.n	800905c <f_getfree+0x1de>
							if (res != FR_OK) break;
 800905a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009060:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009064:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009066:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8009068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800906a:	791a      	ldrb	r2, [r3, #4]
 800906c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800906e:	f042 0201 	orr.w	r2, r2, #1
 8009072:	b2d2      	uxtb	r2, r2
 8009074:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8009076:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800907a:	4618      	mov	r0, r3
 800907c:	3768      	adds	r7, #104	; 0x68
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
	...

08009084 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009084:	b480      	push	{r7}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	4613      	mov	r3, r2
 8009090:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009092:	2301      	movs	r3, #1
 8009094:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009096:	2300      	movs	r3, #0
 8009098:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800909a:	4b1e      	ldr	r3, [pc, #120]	; (8009114 <FATFS_LinkDriverEx+0x90>)
 800909c:	7e1b      	ldrb	r3, [r3, #24]
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b03      	cmp	r3, #3
 80090a2:	d831      	bhi.n	8009108 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80090a4:	4b1b      	ldr	r3, [pc, #108]	; (8009114 <FATFS_LinkDriverEx+0x90>)
 80090a6:	7e1b      	ldrb	r3, [r3, #24]
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	461a      	mov	r2, r3
 80090ac:	4b19      	ldr	r3, [pc, #100]	; (8009114 <FATFS_LinkDriverEx+0x90>)
 80090ae:	2100      	movs	r1, #0
 80090b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80090b2:	4b18      	ldr	r3, [pc, #96]	; (8009114 <FATFS_LinkDriverEx+0x90>)
 80090b4:	7e1b      	ldrb	r3, [r3, #24]
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	4a16      	ldr	r2, [pc, #88]	; (8009114 <FATFS_LinkDriverEx+0x90>)
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	4413      	add	r3, r2
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80090c2:	4b14      	ldr	r3, [pc, #80]	; (8009114 <FATFS_LinkDriverEx+0x90>)
 80090c4:	7e1b      	ldrb	r3, [r3, #24]
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	461a      	mov	r2, r3
 80090ca:	4b12      	ldr	r3, [pc, #72]	; (8009114 <FATFS_LinkDriverEx+0x90>)
 80090cc:	4413      	add	r3, r2
 80090ce:	79fa      	ldrb	r2, [r7, #7]
 80090d0:	751a      	strb	r2, [r3, #20]
    DiskNum = disk.nbr++;
 80090d2:	4b10      	ldr	r3, [pc, #64]	; (8009114 <FATFS_LinkDriverEx+0x90>)
 80090d4:	7e1b      	ldrb	r3, [r3, #24]
 80090d6:	b2db      	uxtb	r3, r3
 80090d8:	1c5a      	adds	r2, r3, #1
 80090da:	b2d1      	uxtb	r1, r2
 80090dc:	4a0d      	ldr	r2, [pc, #52]	; (8009114 <FATFS_LinkDriverEx+0x90>)
 80090de:	7611      	strb	r1, [r2, #24]
 80090e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80090e2:	7dbb      	ldrb	r3, [r7, #22]
 80090e4:	3330      	adds	r3, #48	; 0x30
 80090e6:	b2da      	uxtb	r2, r3
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	3301      	adds	r3, #1
 80090f0:	223a      	movs	r2, #58	; 0x3a
 80090f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	3302      	adds	r3, #2
 80090f8:	222f      	movs	r2, #47	; 0x2f
 80090fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	3303      	adds	r3, #3
 8009100:	2200      	movs	r2, #0
 8009102:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009104:	2300      	movs	r3, #0
 8009106:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009108:	7dfb      	ldrb	r3, [r7, #23]
}
 800910a:	4618      	mov	r0, r3
 800910c:	371c      	adds	r7, #28
 800910e:	46bd      	mov	sp, r7
 8009110:	bc80      	pop	{r7}
 8009112:	4770      	bx	lr
 8009114:	200014fc 	.word	0x200014fc

08009118 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009122:	2200      	movs	r2, #0
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7ff ffac 	bl	8009084 <FATFS_LinkDriverEx>
 800912c:	4603      	mov	r3, r0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
	...

08009138 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009138:	b480      	push	{r7}
 800913a:	b085      	sub	sp, #20
 800913c:	af00      	add	r7, sp, #0
 800913e:	4603      	mov	r3, r0
 8009140:	6039      	str	r1, [r7, #0]
 8009142:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009144:	88fb      	ldrh	r3, [r7, #6]
 8009146:	2b7f      	cmp	r3, #127	; 0x7f
 8009148:	d802      	bhi.n	8009150 <ff_convert+0x18>
		c = chr;
 800914a:	88fb      	ldrh	r3, [r7, #6]
 800914c:	81fb      	strh	r3, [r7, #14]
 800914e:	e025      	b.n	800919c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00b      	beq.n	800916e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009156:	88fb      	ldrh	r3, [r7, #6]
 8009158:	2bff      	cmp	r3, #255	; 0xff
 800915a:	d805      	bhi.n	8009168 <ff_convert+0x30>
 800915c:	88fb      	ldrh	r3, [r7, #6]
 800915e:	3b80      	subs	r3, #128	; 0x80
 8009160:	4a11      	ldr	r2, [pc, #68]	; (80091a8 <ff_convert+0x70>)
 8009162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009166:	e000      	b.n	800916a <ff_convert+0x32>
 8009168:	2300      	movs	r3, #0
 800916a:	81fb      	strh	r3, [r7, #14]
 800916c:	e016      	b.n	800919c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800916e:	2300      	movs	r3, #0
 8009170:	81fb      	strh	r3, [r7, #14]
 8009172:	e009      	b.n	8009188 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009174:	89fb      	ldrh	r3, [r7, #14]
 8009176:	4a0c      	ldr	r2, [pc, #48]	; (80091a8 <ff_convert+0x70>)
 8009178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800917c:	88fa      	ldrh	r2, [r7, #6]
 800917e:	429a      	cmp	r2, r3
 8009180:	d006      	beq.n	8009190 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009182:	89fb      	ldrh	r3, [r7, #14]
 8009184:	3301      	adds	r3, #1
 8009186:	81fb      	strh	r3, [r7, #14]
 8009188:	89fb      	ldrh	r3, [r7, #14]
 800918a:	2b7f      	cmp	r3, #127	; 0x7f
 800918c:	d9f2      	bls.n	8009174 <ff_convert+0x3c>
 800918e:	e000      	b.n	8009192 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009190:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009192:	89fb      	ldrh	r3, [r7, #14]
 8009194:	3380      	adds	r3, #128	; 0x80
 8009196:	b29b      	uxth	r3, r3
 8009198:	b2db      	uxtb	r3, r3
 800919a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800919c:	89fb      	ldrh	r3, [r7, #14]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bc80      	pop	{r7}
 80091a6:	4770      	bx	lr
 80091a8:	0800b2dc 	.word	0x0800b2dc

080091ac <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b087      	sub	sp, #28
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4603      	mov	r3, r0
 80091b4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80091b6:	88fb      	ldrh	r3, [r7, #6]
 80091b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091bc:	d201      	bcs.n	80091c2 <ff_wtoupper+0x16>
 80091be:	4b3d      	ldr	r3, [pc, #244]	; (80092b4 <ff_wtoupper+0x108>)
 80091c0:	e000      	b.n	80091c4 <ff_wtoupper+0x18>
 80091c2:	4b3d      	ldr	r3, [pc, #244]	; (80092b8 <ff_wtoupper+0x10c>)
 80091c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	1c9a      	adds	r2, r3, #2
 80091ca:	617a      	str	r2, [r7, #20]
 80091cc:	881b      	ldrh	r3, [r3, #0]
 80091ce:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80091d0:	8a7b      	ldrh	r3, [r7, #18]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d068      	beq.n	80092a8 <ff_wtoupper+0xfc>
 80091d6:	88fa      	ldrh	r2, [r7, #6]
 80091d8:	8a7b      	ldrh	r3, [r7, #18]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d364      	bcc.n	80092a8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	1c9a      	adds	r2, r3, #2
 80091e2:	617a      	str	r2, [r7, #20]
 80091e4:	881b      	ldrh	r3, [r3, #0]
 80091e6:	823b      	strh	r3, [r7, #16]
 80091e8:	8a3b      	ldrh	r3, [r7, #16]
 80091ea:	0a1b      	lsrs	r3, r3, #8
 80091ec:	81fb      	strh	r3, [r7, #14]
 80091ee:	8a3b      	ldrh	r3, [r7, #16]
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80091f4:	88fa      	ldrh	r2, [r7, #6]
 80091f6:	8a79      	ldrh	r1, [r7, #18]
 80091f8:	8a3b      	ldrh	r3, [r7, #16]
 80091fa:	440b      	add	r3, r1
 80091fc:	429a      	cmp	r2, r3
 80091fe:	da49      	bge.n	8009294 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009200:	89fb      	ldrh	r3, [r7, #14]
 8009202:	2b08      	cmp	r3, #8
 8009204:	d84f      	bhi.n	80092a6 <ff_wtoupper+0xfa>
 8009206:	a201      	add	r2, pc, #4	; (adr r2, 800920c <ff_wtoupper+0x60>)
 8009208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920c:	08009231 	.word	0x08009231
 8009210:	08009243 	.word	0x08009243
 8009214:	08009259 	.word	0x08009259
 8009218:	08009261 	.word	0x08009261
 800921c:	08009269 	.word	0x08009269
 8009220:	08009271 	.word	0x08009271
 8009224:	08009279 	.word	0x08009279
 8009228:	08009281 	.word	0x08009281
 800922c:	08009289 	.word	0x08009289
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009230:	88fa      	ldrh	r2, [r7, #6]
 8009232:	8a7b      	ldrh	r3, [r7, #18]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	005b      	lsls	r3, r3, #1
 8009238:	697a      	ldr	r2, [r7, #20]
 800923a:	4413      	add	r3, r2
 800923c:	881b      	ldrh	r3, [r3, #0]
 800923e:	80fb      	strh	r3, [r7, #6]
 8009240:	e027      	b.n	8009292 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009242:	88fa      	ldrh	r2, [r7, #6]
 8009244:	8a7b      	ldrh	r3, [r7, #18]
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	b29b      	uxth	r3, r3
 800924a:	f003 0301 	and.w	r3, r3, #1
 800924e:	b29b      	uxth	r3, r3
 8009250:	88fa      	ldrh	r2, [r7, #6]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	80fb      	strh	r3, [r7, #6]
 8009256:	e01c      	b.n	8009292 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009258:	88fb      	ldrh	r3, [r7, #6]
 800925a:	3b10      	subs	r3, #16
 800925c:	80fb      	strh	r3, [r7, #6]
 800925e:	e018      	b.n	8009292 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009260:	88fb      	ldrh	r3, [r7, #6]
 8009262:	3b20      	subs	r3, #32
 8009264:	80fb      	strh	r3, [r7, #6]
 8009266:	e014      	b.n	8009292 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009268:	88fb      	ldrh	r3, [r7, #6]
 800926a:	3b30      	subs	r3, #48	; 0x30
 800926c:	80fb      	strh	r3, [r7, #6]
 800926e:	e010      	b.n	8009292 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009270:	88fb      	ldrh	r3, [r7, #6]
 8009272:	3b1a      	subs	r3, #26
 8009274:	80fb      	strh	r3, [r7, #6]
 8009276:	e00c      	b.n	8009292 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009278:	88fb      	ldrh	r3, [r7, #6]
 800927a:	3308      	adds	r3, #8
 800927c:	80fb      	strh	r3, [r7, #6]
 800927e:	e008      	b.n	8009292 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009280:	88fb      	ldrh	r3, [r7, #6]
 8009282:	3b50      	subs	r3, #80	; 0x50
 8009284:	80fb      	strh	r3, [r7, #6]
 8009286:	e004      	b.n	8009292 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009288:	88fb      	ldrh	r3, [r7, #6]
 800928a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800928e:	80fb      	strh	r3, [r7, #6]
 8009290:	bf00      	nop
			}
			break;
 8009292:	e008      	b.n	80092a6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009294:	89fb      	ldrh	r3, [r7, #14]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d195      	bne.n	80091c6 <ff_wtoupper+0x1a>
 800929a:	8a3b      	ldrh	r3, [r7, #16]
 800929c:	005b      	lsls	r3, r3, #1
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	4413      	add	r3, r2
 80092a2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80092a4:	e78f      	b.n	80091c6 <ff_wtoupper+0x1a>
			break;
 80092a6:	bf00      	nop
	}

	return chr;
 80092a8:	88fb      	ldrh	r3, [r7, #6]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	371c      	adds	r7, #28
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bc80      	pop	{r7}
 80092b2:	4770      	bx	lr
 80092b4:	0800b3dc 	.word	0x0800b3dc
 80092b8:	0800b5d0 	.word	0x0800b5d0

080092bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	4603      	mov	r3, r0
 80092c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80092c6:	2300      	movs	r3, #0
 80092c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80092ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80092ce:	2b84      	cmp	r3, #132	; 0x84
 80092d0:	d005      	beq.n	80092de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80092d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	4413      	add	r3, r2
 80092da:	3303      	adds	r3, #3
 80092dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80092de:	68fb      	ldr	r3, [r7, #12]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bc80      	pop	{r7}
 80092e8:	4770      	bx	lr

080092ea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80092ee:	f000 fae7 	bl	80098c0 <vTaskStartScheduler>
  
  return osOK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80092f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092fa:	b089      	sub	sp, #36	; 0x24
 80092fc:	af04      	add	r7, sp, #16
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	695b      	ldr	r3, [r3, #20]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d020      	beq.n	800934c <osThreadCreate+0x54>
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d01c      	beq.n	800934c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	685c      	ldr	r4, [r3, #4]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681d      	ldr	r5, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	691e      	ldr	r6, [r3, #16]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009324:	4618      	mov	r0, r3
 8009326:	f7ff ffc9 	bl	80092bc <makeFreeRtosPriority>
 800932a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009334:	9202      	str	r2, [sp, #8]
 8009336:	9301      	str	r3, [sp, #4]
 8009338:	9100      	str	r1, [sp, #0]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	4632      	mov	r2, r6
 800933e:	4629      	mov	r1, r5
 8009340:	4620      	mov	r0, r4
 8009342:	f000 f8e8 	bl	8009516 <xTaskCreateStatic>
 8009346:	4603      	mov	r3, r0
 8009348:	60fb      	str	r3, [r7, #12]
 800934a:	e01c      	b.n	8009386 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685c      	ldr	r4, [r3, #4]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009358:	b29e      	uxth	r6, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009360:	4618      	mov	r0, r3
 8009362:	f7ff ffab 	bl	80092bc <makeFreeRtosPriority>
 8009366:	4602      	mov	r2, r0
 8009368:	f107 030c 	add.w	r3, r7, #12
 800936c:	9301      	str	r3, [sp, #4]
 800936e:	9200      	str	r2, [sp, #0]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	4632      	mov	r2, r6
 8009374:	4629      	mov	r1, r5
 8009376:	4620      	mov	r0, r4
 8009378:	f000 f929 	bl	80095ce <xTaskCreate>
 800937c:	4603      	mov	r3, r0
 800937e:	2b01      	cmp	r3, #1
 8009380:	d001      	beq.n	8009386 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009382:	2300      	movs	r3, #0
 8009384:	e000      	b.n	8009388 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009386:	68fb      	ldr	r3, [r7, #12]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009390 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <osDelay+0x16>
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	e000      	b.n	80093a8 <osDelay+0x18>
 80093a6:	2301      	movs	r3, #1
 80093a8:	4618      	mov	r0, r3
 80093aa:	f000 fa55 	bl	8009858 <vTaskDelay>
  
  return osOK;
 80093ae:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f103 0208 	add.w	r2, r3, #8
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f04f 32ff 	mov.w	r2, #4294967295
 80093d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f103 0208 	add.w	r2, r3, #8
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f103 0208 	add.w	r2, r3, #8
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80093ec:	bf00      	nop
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bc80      	pop	{r7}
 80093f4:	4770      	bx	lr

080093f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80093f6:	b480      	push	{r7}
 80093f8:	b083      	sub	sp, #12
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	bc80      	pop	{r7}
 800940c:	4770      	bx	lr

0800940e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800940e:	b480      	push	{r7}
 8009410:	b085      	sub	sp, #20
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
 8009416:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	689a      	ldr	r2, [r3, #8]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	683a      	ldr	r2, [r7, #0]
 8009432:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	683a      	ldr	r2, [r7, #0]
 8009438:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	1c5a      	adds	r2, r3, #1
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	601a      	str	r2, [r3, #0]
}
 800944a:	bf00      	nop
 800944c:	3714      	adds	r7, #20
 800944e:	46bd      	mov	sp, r7
 8009450:	bc80      	pop	{r7}
 8009452:	4770      	bx	lr

08009454 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946a:	d103      	bne.n	8009474 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	60fb      	str	r3, [r7, #12]
 8009472:	e00c      	b.n	800948e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	3308      	adds	r3, #8
 8009478:	60fb      	str	r3, [r7, #12]
 800947a:	e002      	b.n	8009482 <vListInsert+0x2e>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	60fb      	str	r3, [r7, #12]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	68ba      	ldr	r2, [r7, #8]
 800948a:	429a      	cmp	r2, r3
 800948c:	d2f6      	bcs.n	800947c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	1c5a      	adds	r2, r3, #1
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	601a      	str	r2, [r3, #0]
}
 80094ba:	bf00      	nop
 80094bc:	3714      	adds	r7, #20
 80094be:	46bd      	mov	sp, r7
 80094c0:	bc80      	pop	{r7}
 80094c2:	4770      	bx	lr

080094c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	6892      	ldr	r2, [r2, #8]
 80094da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	6852      	ldr	r2, [r2, #4]
 80094e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	687a      	ldr	r2, [r7, #4]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d103      	bne.n	80094f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	689a      	ldr	r2, [r3, #8]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	1e5a      	subs	r2, r3, #1
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3714      	adds	r7, #20
 8009510:	46bd      	mov	sp, r7
 8009512:	bc80      	pop	{r7}
 8009514:	4770      	bx	lr

08009516 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009516:	b580      	push	{r7, lr}
 8009518:	b08e      	sub	sp, #56	; 0x38
 800951a:	af04      	add	r7, sp, #16
 800951c:	60f8      	str	r0, [r7, #12]
 800951e:	60b9      	str	r1, [r7, #8]
 8009520:	607a      	str	r2, [r7, #4]
 8009522:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009526:	2b00      	cmp	r3, #0
 8009528:	d10a      	bne.n	8009540 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800952a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952e:	f383 8811 	msr	BASEPRI, r3
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	f3bf 8f4f 	dsb	sy
 800953a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800953c:	bf00      	nop
 800953e:	e7fe      	b.n	800953e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10a      	bne.n	800955c <xTaskCreateStatic+0x46>
	__asm volatile
 8009546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	61fb      	str	r3, [r7, #28]
}
 8009558:	bf00      	nop
 800955a:	e7fe      	b.n	800955a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800955c:	23b4      	movs	r3, #180	; 0xb4
 800955e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	2bb4      	cmp	r3, #180	; 0xb4
 8009564:	d00a      	beq.n	800957c <xTaskCreateStatic+0x66>
	__asm volatile
 8009566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	61bb      	str	r3, [r7, #24]
}
 8009578:	bf00      	nop
 800957a:	e7fe      	b.n	800957a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800957c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957e:	2b00      	cmp	r3, #0
 8009580:	d01e      	beq.n	80095c0 <xTaskCreateStatic+0xaa>
 8009582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009584:	2b00      	cmp	r3, #0
 8009586:	d01b      	beq.n	80095c0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800958a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009590:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009594:	2202      	movs	r2, #2
 8009596:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800959a:	2300      	movs	r3, #0
 800959c:	9303      	str	r3, [sp, #12]
 800959e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a0:	9302      	str	r3, [sp, #8]
 80095a2:	f107 0314 	add.w	r3, r7, #20
 80095a6:	9301      	str	r3, [sp, #4]
 80095a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	68b9      	ldr	r1, [r7, #8]
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f000 f850 	bl	8009658 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095ba:	f000 f8e3 	bl	8009784 <prvAddNewTaskToReadyList>
 80095be:	e001      	b.n	80095c4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80095c0:	2300      	movs	r3, #0
 80095c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80095c4:	697b      	ldr	r3, [r7, #20]
	}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3728      	adds	r7, #40	; 0x28
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b08c      	sub	sp, #48	; 0x30
 80095d2:	af04      	add	r7, sp, #16
 80095d4:	60f8      	str	r0, [r7, #12]
 80095d6:	60b9      	str	r1, [r7, #8]
 80095d8:	603b      	str	r3, [r7, #0]
 80095da:	4613      	mov	r3, r2
 80095dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095de:	88fb      	ldrh	r3, [r7, #6]
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 fea4 	bl	800a330 <pvPortMalloc>
 80095e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00e      	beq.n	800960e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80095f0:	20b4      	movs	r0, #180	; 0xb4
 80095f2:	f000 fe9d 	bl	800a330 <pvPortMalloc>
 80095f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d003      	beq.n	8009606 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	697a      	ldr	r2, [r7, #20]
 8009602:	631a      	str	r2, [r3, #48]	; 0x30
 8009604:	e005      	b.n	8009612 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009606:	6978      	ldr	r0, [r7, #20]
 8009608:	f000 ff56 	bl	800a4b8 <vPortFree>
 800960c:	e001      	b.n	8009612 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800960e:	2300      	movs	r3, #0
 8009610:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d017      	beq.n	8009648 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	2200      	movs	r2, #0
 800961c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009620:	88fa      	ldrh	r2, [r7, #6]
 8009622:	2300      	movs	r3, #0
 8009624:	9303      	str	r3, [sp, #12]
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	9302      	str	r3, [sp, #8]
 800962a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800962c:	9301      	str	r3, [sp, #4]
 800962e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	68b9      	ldr	r1, [r7, #8]
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f000 f80e 	bl	8009658 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800963c:	69f8      	ldr	r0, [r7, #28]
 800963e:	f000 f8a1 	bl	8009784 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009642:	2301      	movs	r3, #1
 8009644:	61bb      	str	r3, [r7, #24]
 8009646:	e002      	b.n	800964e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009648:	f04f 33ff 	mov.w	r3, #4294967295
 800964c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800964e:	69bb      	ldr	r3, [r7, #24]
	}
 8009650:	4618      	mov	r0, r3
 8009652:	3720      	adds	r7, #32
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b088      	sub	sp, #32
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	607a      	str	r2, [r7, #4]
 8009664:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009670:	3b01      	subs	r3, #1
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	f023 0307 	bic.w	r3, r3, #7
 800967e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	f003 0307 	and.w	r3, r3, #7
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00a      	beq.n	80096a0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800968a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800968e:	f383 8811 	msr	BASEPRI, r3
 8009692:	f3bf 8f6f 	isb	sy
 8009696:	f3bf 8f4f 	dsb	sy
 800969a:	617b      	str	r3, [r7, #20]
}
 800969c:	bf00      	nop
 800969e:	e7fe      	b.n	800969e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096a0:	2300      	movs	r3, #0
 80096a2:	61fb      	str	r3, [r7, #28]
 80096a4:	e012      	b.n	80096cc <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	4413      	add	r3, r2
 80096ac:	7819      	ldrb	r1, [r3, #0]
 80096ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	4413      	add	r3, r2
 80096b4:	3334      	adds	r3, #52	; 0x34
 80096b6:	460a      	mov	r2, r1
 80096b8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80096ba:	68ba      	ldr	r2, [r7, #8]
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	4413      	add	r3, r2
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d006      	beq.n	80096d4 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	3301      	adds	r3, #1
 80096ca:	61fb      	str	r3, [r7, #28]
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	2b0f      	cmp	r3, #15
 80096d0:	d9e9      	bls.n	80096a6 <prvInitialiseNewTask+0x4e>
 80096d2:	e000      	b.n	80096d6 <prvInitialiseNewTask+0x7e>
		{
			break;
 80096d4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80096d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80096de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e0:	2b06      	cmp	r3, #6
 80096e2:	d901      	bls.n	80096e8 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80096e4:	2306      	movs	r3, #6
 80096e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80096e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80096ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80096f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f6:	2200      	movs	r2, #0
 80096f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80096fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fc:	3304      	adds	r3, #4
 80096fe:	4618      	mov	r0, r3
 8009700:	f7ff fe79 	bl	80093f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009706:	3318      	adds	r3, #24
 8009708:	4618      	mov	r0, r3
 800970a:	f7ff fe74 	bl	80093f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800970e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009712:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009716:	f1c3 0207 	rsb	r2, r3, #7
 800971a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800971e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009722:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009726:	2200      	movs	r2, #0
 8009728:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800972c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972e:	2200      	movs	r2, #0
 8009730:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009736:	334c      	adds	r3, #76	; 0x4c
 8009738:	2260      	movs	r2, #96	; 0x60
 800973a:	2100      	movs	r1, #0
 800973c:	4618      	mov	r0, r3
 800973e:	f001 f809 	bl	800a754 <memset>
 8009742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009744:	4a0c      	ldr	r2, [pc, #48]	; (8009778 <prvInitialiseNewTask+0x120>)
 8009746:	651a      	str	r2, [r3, #80]	; 0x50
 8009748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974a:	4a0c      	ldr	r2, [pc, #48]	; (800977c <prvInitialiseNewTask+0x124>)
 800974c:	655a      	str	r2, [r3, #84]	; 0x54
 800974e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009750:	4a0b      	ldr	r2, [pc, #44]	; (8009780 <prvInitialiseNewTask+0x128>)
 8009752:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009754:	683a      	ldr	r2, [r7, #0]
 8009756:	68f9      	ldr	r1, [r7, #12]
 8009758:	69b8      	ldr	r0, [r7, #24]
 800975a:	f000 fc37 	bl	8009fcc <pxPortInitialiseStack>
 800975e:	4602      	mov	r2, r0
 8009760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009762:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009766:	2b00      	cmp	r3, #0
 8009768:	d002      	beq.n	8009770 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800976a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800976e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009770:	bf00      	nop
 8009772:	3720      	adds	r7, #32
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	0800b6ac 	.word	0x0800b6ac
 800977c:	0800b6cc 	.word	0x0800b6cc
 8009780:	0800b68c 	.word	0x0800b68c

08009784 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b082      	sub	sp, #8
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800978c:	f000 fd0e 	bl	800a1ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009790:	4b2a      	ldr	r3, [pc, #168]	; (800983c <prvAddNewTaskToReadyList+0xb8>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	3301      	adds	r3, #1
 8009796:	4a29      	ldr	r2, [pc, #164]	; (800983c <prvAddNewTaskToReadyList+0xb8>)
 8009798:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800979a:	4b29      	ldr	r3, [pc, #164]	; (8009840 <prvAddNewTaskToReadyList+0xbc>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d109      	bne.n	80097b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80097a2:	4a27      	ldr	r2, [pc, #156]	; (8009840 <prvAddNewTaskToReadyList+0xbc>)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80097a8:	4b24      	ldr	r3, [pc, #144]	; (800983c <prvAddNewTaskToReadyList+0xb8>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d110      	bne.n	80097d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80097b0:	f000 fae0 	bl	8009d74 <prvInitialiseTaskLists>
 80097b4:	e00d      	b.n	80097d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80097b6:	4b23      	ldr	r3, [pc, #140]	; (8009844 <prvAddNewTaskToReadyList+0xc0>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d109      	bne.n	80097d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80097be:	4b20      	ldr	r3, [pc, #128]	; (8009840 <prvAddNewTaskToReadyList+0xbc>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d802      	bhi.n	80097d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80097cc:	4a1c      	ldr	r2, [pc, #112]	; (8009840 <prvAddNewTaskToReadyList+0xbc>)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80097d2:	4b1d      	ldr	r3, [pc, #116]	; (8009848 <prvAddNewTaskToReadyList+0xc4>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	3301      	adds	r3, #1
 80097d8:	4a1b      	ldr	r2, [pc, #108]	; (8009848 <prvAddNewTaskToReadyList+0xc4>)
 80097da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e0:	2201      	movs	r2, #1
 80097e2:	409a      	lsls	r2, r3
 80097e4:	4b19      	ldr	r3, [pc, #100]	; (800984c <prvAddNewTaskToReadyList+0xc8>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	4a18      	ldr	r2, [pc, #96]	; (800984c <prvAddNewTaskToReadyList+0xc8>)
 80097ec:	6013      	str	r3, [r2, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f2:	4613      	mov	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4a15      	ldr	r2, [pc, #84]	; (8009850 <prvAddNewTaskToReadyList+0xcc>)
 80097fc:	441a      	add	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	3304      	adds	r3, #4
 8009802:	4619      	mov	r1, r3
 8009804:	4610      	mov	r0, r2
 8009806:	f7ff fe02 	bl	800940e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800980a:	f000 fcff 	bl	800a20c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800980e:	4b0d      	ldr	r3, [pc, #52]	; (8009844 <prvAddNewTaskToReadyList+0xc0>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00e      	beq.n	8009834 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009816:	4b0a      	ldr	r3, [pc, #40]	; (8009840 <prvAddNewTaskToReadyList+0xbc>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009820:	429a      	cmp	r2, r3
 8009822:	d207      	bcs.n	8009834 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009824:	4b0b      	ldr	r3, [pc, #44]	; (8009854 <prvAddNewTaskToReadyList+0xd0>)
 8009826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800982a:	601a      	str	r2, [r3, #0]
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009834:	bf00      	nop
 8009836:	3708      	adds	r7, #8
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}
 800983c:	20001618 	.word	0x20001618
 8009840:	20001518 	.word	0x20001518
 8009844:	20001624 	.word	0x20001624
 8009848:	20001634 	.word	0x20001634
 800984c:	20001620 	.word	0x20001620
 8009850:	2000151c 	.word	0x2000151c
 8009854:	e000ed04 	.word	0xe000ed04

08009858 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009860:	2300      	movs	r3, #0
 8009862:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d017      	beq.n	800989a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800986a:	4b13      	ldr	r3, [pc, #76]	; (80098b8 <vTaskDelay+0x60>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00a      	beq.n	8009888 <vTaskDelay+0x30>
	__asm volatile
 8009872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009876:	f383 8811 	msr	BASEPRI, r3
 800987a:	f3bf 8f6f 	isb	sy
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	60bb      	str	r3, [r7, #8]
}
 8009884:	bf00      	nop
 8009886:	e7fe      	b.n	8009886 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009888:	f000 f884 	bl	8009994 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800988c:	2100      	movs	r1, #0
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fb36 	bl	8009f00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009894:	f000 f88c 	bl	80099b0 <xTaskResumeAll>
 8009898:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d107      	bne.n	80098b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80098a0:	4b06      	ldr	r3, [pc, #24]	; (80098bc <vTaskDelay+0x64>)
 80098a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098a6:	601a      	str	r2, [r3, #0]
 80098a8:	f3bf 8f4f 	dsb	sy
 80098ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80098b0:	bf00      	nop
 80098b2:	3710      	adds	r7, #16
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	20001640 	.word	0x20001640
 80098bc:	e000ed04 	.word	0xe000ed04

080098c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b08a      	sub	sp, #40	; 0x28
 80098c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80098c6:	2300      	movs	r3, #0
 80098c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80098ca:	2300      	movs	r3, #0
 80098cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80098ce:	463a      	mov	r2, r7
 80098d0:	1d39      	adds	r1, r7, #4
 80098d2:	f107 0308 	add.w	r3, r7, #8
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7f6 ff28 	bl	800072c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80098dc:	6839      	ldr	r1, [r7, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	68ba      	ldr	r2, [r7, #8]
 80098e2:	9202      	str	r2, [sp, #8]
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	2300      	movs	r3, #0
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	2300      	movs	r3, #0
 80098ec:	460a      	mov	r2, r1
 80098ee:	4921      	ldr	r1, [pc, #132]	; (8009974 <vTaskStartScheduler+0xb4>)
 80098f0:	4821      	ldr	r0, [pc, #132]	; (8009978 <vTaskStartScheduler+0xb8>)
 80098f2:	f7ff fe10 	bl	8009516 <xTaskCreateStatic>
 80098f6:	4603      	mov	r3, r0
 80098f8:	4a20      	ldr	r2, [pc, #128]	; (800997c <vTaskStartScheduler+0xbc>)
 80098fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80098fc:	4b1f      	ldr	r3, [pc, #124]	; (800997c <vTaskStartScheduler+0xbc>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009904:	2301      	movs	r3, #1
 8009906:	617b      	str	r3, [r7, #20]
 8009908:	e001      	b.n	800990e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800990a:	2300      	movs	r3, #0
 800990c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d11b      	bne.n	800994c <vTaskStartScheduler+0x8c>
	__asm volatile
 8009914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009918:	f383 8811 	msr	BASEPRI, r3
 800991c:	f3bf 8f6f 	isb	sy
 8009920:	f3bf 8f4f 	dsb	sy
 8009924:	613b      	str	r3, [r7, #16]
}
 8009926:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009928:	4b15      	ldr	r3, [pc, #84]	; (8009980 <vTaskStartScheduler+0xc0>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	334c      	adds	r3, #76	; 0x4c
 800992e:	4a15      	ldr	r2, [pc, #84]	; (8009984 <vTaskStartScheduler+0xc4>)
 8009930:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009932:	4b15      	ldr	r3, [pc, #84]	; (8009988 <vTaskStartScheduler+0xc8>)
 8009934:	f04f 32ff 	mov.w	r2, #4294967295
 8009938:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800993a:	4b14      	ldr	r3, [pc, #80]	; (800998c <vTaskStartScheduler+0xcc>)
 800993c:	2201      	movs	r2, #1
 800993e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009940:	4b13      	ldr	r3, [pc, #76]	; (8009990 <vTaskStartScheduler+0xd0>)
 8009942:	2200      	movs	r2, #0
 8009944:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009946:	f000 fbbf 	bl	800a0c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800994a:	e00e      	b.n	800996a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009952:	d10a      	bne.n	800996a <vTaskStartScheduler+0xaa>
	__asm volatile
 8009954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	60fb      	str	r3, [r7, #12]
}
 8009966:	bf00      	nop
 8009968:	e7fe      	b.n	8009968 <vTaskStartScheduler+0xa8>
}
 800996a:	bf00      	nop
 800996c:	3718      	adds	r7, #24
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	0800b22c 	.word	0x0800b22c
 8009978:	08009d45 	.word	0x08009d45
 800997c:	2000163c 	.word	0x2000163c
 8009980:	20001518 	.word	0x20001518
 8009984:	20000060 	.word	0x20000060
 8009988:	20001638 	.word	0x20001638
 800998c:	20001624 	.word	0x20001624
 8009990:	2000161c 	.word	0x2000161c

08009994 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009994:	b480      	push	{r7}
 8009996:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009998:	4b04      	ldr	r3, [pc, #16]	; (80099ac <vTaskSuspendAll+0x18>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3301      	adds	r3, #1
 800999e:	4a03      	ldr	r2, [pc, #12]	; (80099ac <vTaskSuspendAll+0x18>)
 80099a0:	6013      	str	r3, [r2, #0]
}
 80099a2:	bf00      	nop
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bc80      	pop	{r7}
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	20001640 	.word	0x20001640

080099b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80099b6:	2300      	movs	r3, #0
 80099b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80099ba:	2300      	movs	r3, #0
 80099bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80099be:	4b41      	ldr	r3, [pc, #260]	; (8009ac4 <xTaskResumeAll+0x114>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10a      	bne.n	80099dc <xTaskResumeAll+0x2c>
	__asm volatile
 80099c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ca:	f383 8811 	msr	BASEPRI, r3
 80099ce:	f3bf 8f6f 	isb	sy
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	603b      	str	r3, [r7, #0]
}
 80099d8:	bf00      	nop
 80099da:	e7fe      	b.n	80099da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80099dc:	f000 fbe6 	bl	800a1ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80099e0:	4b38      	ldr	r3, [pc, #224]	; (8009ac4 <xTaskResumeAll+0x114>)
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3b01      	subs	r3, #1
 80099e6:	4a37      	ldr	r2, [pc, #220]	; (8009ac4 <xTaskResumeAll+0x114>)
 80099e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099ea:	4b36      	ldr	r3, [pc, #216]	; (8009ac4 <xTaskResumeAll+0x114>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d161      	bne.n	8009ab6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80099f2:	4b35      	ldr	r3, [pc, #212]	; (8009ac8 <xTaskResumeAll+0x118>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d05d      	beq.n	8009ab6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099fa:	e02e      	b.n	8009a5a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80099fc:	4b33      	ldr	r3, [pc, #204]	; (8009acc <xTaskResumeAll+0x11c>)
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	3318      	adds	r3, #24
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7ff fd5b 	bl	80094c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	3304      	adds	r3, #4
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7ff fd56 	bl	80094c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	409a      	lsls	r2, r3
 8009a20:	4b2b      	ldr	r3, [pc, #172]	; (8009ad0 <xTaskResumeAll+0x120>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4313      	orrs	r3, r2
 8009a26:	4a2a      	ldr	r2, [pc, #168]	; (8009ad0 <xTaskResumeAll+0x120>)
 8009a28:	6013      	str	r3, [r2, #0]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2e:	4613      	mov	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4a27      	ldr	r2, [pc, #156]	; (8009ad4 <xTaskResumeAll+0x124>)
 8009a38:	441a      	add	r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	4619      	mov	r1, r3
 8009a40:	4610      	mov	r0, r2
 8009a42:	f7ff fce4 	bl	800940e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a4a:	4b23      	ldr	r3, [pc, #140]	; (8009ad8 <xTaskResumeAll+0x128>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d302      	bcc.n	8009a5a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009a54:	4b21      	ldr	r3, [pc, #132]	; (8009adc <xTaskResumeAll+0x12c>)
 8009a56:	2201      	movs	r2, #1
 8009a58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a5a:	4b1c      	ldr	r3, [pc, #112]	; (8009acc <xTaskResumeAll+0x11c>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1cc      	bne.n	80099fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a68:	f000 fa26 	bl	8009eb8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009a6c:	4b1c      	ldr	r3, [pc, #112]	; (8009ae0 <xTaskResumeAll+0x130>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d010      	beq.n	8009a9a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a78:	f000 f844 	bl	8009b04 <xTaskIncrementTick>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d002      	beq.n	8009a88 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8009a82:	4b16      	ldr	r3, [pc, #88]	; (8009adc <xTaskResumeAll+0x12c>)
 8009a84:	2201      	movs	r2, #1
 8009a86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1f1      	bne.n	8009a78 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009a94:	4b12      	ldr	r3, [pc, #72]	; (8009ae0 <xTaskResumeAll+0x130>)
 8009a96:	2200      	movs	r2, #0
 8009a98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a9a:	4b10      	ldr	r3, [pc, #64]	; (8009adc <xTaskResumeAll+0x12c>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d009      	beq.n	8009ab6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009aa6:	4b0f      	ldr	r3, [pc, #60]	; (8009ae4 <xTaskResumeAll+0x134>)
 8009aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009ab6:	f000 fba9 	bl	800a20c <vPortExitCritical>

	return xAlreadyYielded;
 8009aba:	68bb      	ldr	r3, [r7, #8]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	20001640 	.word	0x20001640
 8009ac8:	20001618 	.word	0x20001618
 8009acc:	200015d8 	.word	0x200015d8
 8009ad0:	20001620 	.word	0x20001620
 8009ad4:	2000151c 	.word	0x2000151c
 8009ad8:	20001518 	.word	0x20001518
 8009adc:	2000162c 	.word	0x2000162c
 8009ae0:	20001628 	.word	0x20001628
 8009ae4:	e000ed04 	.word	0xe000ed04

08009ae8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009aee:	4b04      	ldr	r3, [pc, #16]	; (8009b00 <xTaskGetTickCount+0x18>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009af4:	687b      	ldr	r3, [r7, #4]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	370c      	adds	r7, #12
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bc80      	pop	{r7}
 8009afe:	4770      	bx	lr
 8009b00:	2000161c 	.word	0x2000161c

08009b04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b0e:	4b51      	ldr	r3, [pc, #324]	; (8009c54 <xTaskIncrementTick+0x150>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	f040 808d 	bne.w	8009c32 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b18:	4b4f      	ldr	r3, [pc, #316]	; (8009c58 <xTaskIncrementTick+0x154>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b20:	4a4d      	ldr	r2, [pc, #308]	; (8009c58 <xTaskIncrementTick+0x154>)
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d120      	bne.n	8009b6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b2c:	4b4b      	ldr	r3, [pc, #300]	; (8009c5c <xTaskIncrementTick+0x158>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00a      	beq.n	8009b4c <xTaskIncrementTick+0x48>
	__asm volatile
 8009b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3a:	f383 8811 	msr	BASEPRI, r3
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	603b      	str	r3, [r7, #0]
}
 8009b48:	bf00      	nop
 8009b4a:	e7fe      	b.n	8009b4a <xTaskIncrementTick+0x46>
 8009b4c:	4b43      	ldr	r3, [pc, #268]	; (8009c5c <xTaskIncrementTick+0x158>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	60fb      	str	r3, [r7, #12]
 8009b52:	4b43      	ldr	r3, [pc, #268]	; (8009c60 <xTaskIncrementTick+0x15c>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a41      	ldr	r2, [pc, #260]	; (8009c5c <xTaskIncrementTick+0x158>)
 8009b58:	6013      	str	r3, [r2, #0]
 8009b5a:	4a41      	ldr	r2, [pc, #260]	; (8009c60 <xTaskIncrementTick+0x15c>)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	4b40      	ldr	r3, [pc, #256]	; (8009c64 <xTaskIncrementTick+0x160>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3301      	adds	r3, #1
 8009b66:	4a3f      	ldr	r2, [pc, #252]	; (8009c64 <xTaskIncrementTick+0x160>)
 8009b68:	6013      	str	r3, [r2, #0]
 8009b6a:	f000 f9a5 	bl	8009eb8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b6e:	4b3e      	ldr	r3, [pc, #248]	; (8009c68 <xTaskIncrementTick+0x164>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	693a      	ldr	r2, [r7, #16]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d34d      	bcc.n	8009c14 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b78:	4b38      	ldr	r3, [pc, #224]	; (8009c5c <xTaskIncrementTick+0x158>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d101      	bne.n	8009b86 <xTaskIncrementTick+0x82>
 8009b82:	2301      	movs	r3, #1
 8009b84:	e000      	b.n	8009b88 <xTaskIncrementTick+0x84>
 8009b86:	2300      	movs	r3, #0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d004      	beq.n	8009b96 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b8c:	4b36      	ldr	r3, [pc, #216]	; (8009c68 <xTaskIncrementTick+0x164>)
 8009b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b92:	601a      	str	r2, [r3, #0]
					break;
 8009b94:	e03e      	b.n	8009c14 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009b96:	4b31      	ldr	r3, [pc, #196]	; (8009c5c <xTaskIncrementTick+0x158>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	68db      	ldr	r3, [r3, #12]
 8009b9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ba6:	693a      	ldr	r2, [r7, #16]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	429a      	cmp	r2, r3
 8009bac:	d203      	bcs.n	8009bb6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009bae:	4a2e      	ldr	r2, [pc, #184]	; (8009c68 <xTaskIncrementTick+0x164>)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6013      	str	r3, [r2, #0]
						break;
 8009bb4:	e02e      	b.n	8009c14 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	3304      	adds	r3, #4
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7ff fc82 	bl	80094c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d004      	beq.n	8009bd2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	3318      	adds	r3, #24
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7ff fc79 	bl	80094c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	409a      	lsls	r2, r3
 8009bda:	4b24      	ldr	r3, [pc, #144]	; (8009c6c <xTaskIncrementTick+0x168>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	4a22      	ldr	r2, [pc, #136]	; (8009c6c <xTaskIncrementTick+0x168>)
 8009be2:	6013      	str	r3, [r2, #0]
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be8:	4613      	mov	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	4a1f      	ldr	r2, [pc, #124]	; (8009c70 <xTaskIncrementTick+0x16c>)
 8009bf2:	441a      	add	r2, r3
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	3304      	adds	r3, #4
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	4610      	mov	r0, r2
 8009bfc:	f7ff fc07 	bl	800940e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c04:	4b1b      	ldr	r3, [pc, #108]	; (8009c74 <xTaskIncrementTick+0x170>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d3b4      	bcc.n	8009b78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c12:	e7b1      	b.n	8009b78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c14:	4b17      	ldr	r3, [pc, #92]	; (8009c74 <xTaskIncrementTick+0x170>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c1a:	4915      	ldr	r1, [pc, #84]	; (8009c70 <xTaskIncrementTick+0x16c>)
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4413      	add	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	440b      	add	r3, r1
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d907      	bls.n	8009c3c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	617b      	str	r3, [r7, #20]
 8009c30:	e004      	b.n	8009c3c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009c32:	4b11      	ldr	r3, [pc, #68]	; (8009c78 <xTaskIncrementTick+0x174>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	3301      	adds	r3, #1
 8009c38:	4a0f      	ldr	r2, [pc, #60]	; (8009c78 <xTaskIncrementTick+0x174>)
 8009c3a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009c3c:	4b0f      	ldr	r3, [pc, #60]	; (8009c7c <xTaskIncrementTick+0x178>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d001      	beq.n	8009c48 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8009c44:	2301      	movs	r3, #1
 8009c46:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009c48:	697b      	ldr	r3, [r7, #20]
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3718      	adds	r7, #24
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	20001640 	.word	0x20001640
 8009c58:	2000161c 	.word	0x2000161c
 8009c5c:	200015d0 	.word	0x200015d0
 8009c60:	200015d4 	.word	0x200015d4
 8009c64:	20001630 	.word	0x20001630
 8009c68:	20001638 	.word	0x20001638
 8009c6c:	20001620 	.word	0x20001620
 8009c70:	2000151c 	.word	0x2000151c
 8009c74:	20001518 	.word	0x20001518
 8009c78:	20001628 	.word	0x20001628
 8009c7c:	2000162c 	.word	0x2000162c

08009c80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c80:	b480      	push	{r7}
 8009c82:	b087      	sub	sp, #28
 8009c84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c86:	4b29      	ldr	r3, [pc, #164]	; (8009d2c <vTaskSwitchContext+0xac>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d003      	beq.n	8009c96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c8e:	4b28      	ldr	r3, [pc, #160]	; (8009d30 <vTaskSwitchContext+0xb0>)
 8009c90:	2201      	movs	r2, #1
 8009c92:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c94:	e044      	b.n	8009d20 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009c96:	4b26      	ldr	r3, [pc, #152]	; (8009d30 <vTaskSwitchContext+0xb0>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009c9c:	4b25      	ldr	r3, [pc, #148]	; (8009d34 <vTaskSwitchContext+0xb4>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	fab3 f383 	clz	r3, r3
 8009ca8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009caa:	7afb      	ldrb	r3, [r7, #11]
 8009cac:	f1c3 031f 	rsb	r3, r3, #31
 8009cb0:	617b      	str	r3, [r7, #20]
 8009cb2:	4921      	ldr	r1, [pc, #132]	; (8009d38 <vTaskSwitchContext+0xb8>)
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	4413      	add	r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	440b      	add	r3, r1
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10a      	bne.n	8009cdc <vTaskSwitchContext+0x5c>
	__asm volatile
 8009cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cca:	f383 8811 	msr	BASEPRI, r3
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f3bf 8f4f 	dsb	sy
 8009cd6:	607b      	str	r3, [r7, #4]
}
 8009cd8:	bf00      	nop
 8009cda:	e7fe      	b.n	8009cda <vTaskSwitchContext+0x5a>
 8009cdc:	697a      	ldr	r2, [r7, #20]
 8009cde:	4613      	mov	r3, r2
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	4413      	add	r3, r2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4a14      	ldr	r2, [pc, #80]	; (8009d38 <vTaskSwitchContext+0xb8>)
 8009ce8:	4413      	add	r3, r2
 8009cea:	613b      	str	r3, [r7, #16]
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	605a      	str	r2, [r3, #4]
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	685a      	ldr	r2, [r3, #4]
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	3308      	adds	r3, #8
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d104      	bne.n	8009d0c <vTaskSwitchContext+0x8c>
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	685a      	ldr	r2, [r3, #4]
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	605a      	str	r2, [r3, #4]
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	4a0a      	ldr	r2, [pc, #40]	; (8009d3c <vTaskSwitchContext+0xbc>)
 8009d14:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d16:	4b09      	ldr	r3, [pc, #36]	; (8009d3c <vTaskSwitchContext+0xbc>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	334c      	adds	r3, #76	; 0x4c
 8009d1c:	4a08      	ldr	r2, [pc, #32]	; (8009d40 <vTaskSwitchContext+0xc0>)
 8009d1e:	6013      	str	r3, [r2, #0]
}
 8009d20:	bf00      	nop
 8009d22:	371c      	adds	r7, #28
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bc80      	pop	{r7}
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	20001640 	.word	0x20001640
 8009d30:	2000162c 	.word	0x2000162c
 8009d34:	20001620 	.word	0x20001620
 8009d38:	2000151c 	.word	0x2000151c
 8009d3c:	20001518 	.word	0x20001518
 8009d40:	20000060 	.word	0x20000060

08009d44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b082      	sub	sp, #8
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009d4c:	f000 f852 	bl	8009df4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009d50:	4b06      	ldr	r3, [pc, #24]	; (8009d6c <prvIdleTask+0x28>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d9f9      	bls.n	8009d4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009d58:	4b05      	ldr	r3, [pc, #20]	; (8009d70 <prvIdleTask+0x2c>)
 8009d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d5e:	601a      	str	r2, [r3, #0]
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009d68:	e7f0      	b.n	8009d4c <prvIdleTask+0x8>
 8009d6a:	bf00      	nop
 8009d6c:	2000151c 	.word	0x2000151c
 8009d70:	e000ed04 	.word	0xe000ed04

08009d74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	607b      	str	r3, [r7, #4]
 8009d7e:	e00c      	b.n	8009d9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	4613      	mov	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	4413      	add	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4a12      	ldr	r2, [pc, #72]	; (8009dd4 <prvInitialiseTaskLists+0x60>)
 8009d8c:	4413      	add	r3, r2
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7ff fb12 	bl	80093b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	3301      	adds	r3, #1
 8009d98:	607b      	str	r3, [r7, #4]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2b06      	cmp	r3, #6
 8009d9e:	d9ef      	bls.n	8009d80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009da0:	480d      	ldr	r0, [pc, #52]	; (8009dd8 <prvInitialiseTaskLists+0x64>)
 8009da2:	f7ff fb09 	bl	80093b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009da6:	480d      	ldr	r0, [pc, #52]	; (8009ddc <prvInitialiseTaskLists+0x68>)
 8009da8:	f7ff fb06 	bl	80093b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009dac:	480c      	ldr	r0, [pc, #48]	; (8009de0 <prvInitialiseTaskLists+0x6c>)
 8009dae:	f7ff fb03 	bl	80093b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009db2:	480c      	ldr	r0, [pc, #48]	; (8009de4 <prvInitialiseTaskLists+0x70>)
 8009db4:	f7ff fb00 	bl	80093b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009db8:	480b      	ldr	r0, [pc, #44]	; (8009de8 <prvInitialiseTaskLists+0x74>)
 8009dba:	f7ff fafd 	bl	80093b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009dbe:	4b0b      	ldr	r3, [pc, #44]	; (8009dec <prvInitialiseTaskLists+0x78>)
 8009dc0:	4a05      	ldr	r2, [pc, #20]	; (8009dd8 <prvInitialiseTaskLists+0x64>)
 8009dc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009dc4:	4b0a      	ldr	r3, [pc, #40]	; (8009df0 <prvInitialiseTaskLists+0x7c>)
 8009dc6:	4a05      	ldr	r2, [pc, #20]	; (8009ddc <prvInitialiseTaskLists+0x68>)
 8009dc8:	601a      	str	r2, [r3, #0]
}
 8009dca:	bf00      	nop
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
 8009dd2:	bf00      	nop
 8009dd4:	2000151c 	.word	0x2000151c
 8009dd8:	200015a8 	.word	0x200015a8
 8009ddc:	200015bc 	.word	0x200015bc
 8009de0:	200015d8 	.word	0x200015d8
 8009de4:	200015ec 	.word	0x200015ec
 8009de8:	20001604 	.word	0x20001604
 8009dec:	200015d0 	.word	0x200015d0
 8009df0:	200015d4 	.word	0x200015d4

08009df4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009dfa:	e019      	b.n	8009e30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009dfc:	f000 f9d6 	bl	800a1ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009e00:	4b10      	ldr	r3, [pc, #64]	; (8009e44 <prvCheckTasksWaitingTermination+0x50>)
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	3304      	adds	r3, #4
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7ff fb59 	bl	80094c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009e12:	4b0d      	ldr	r3, [pc, #52]	; (8009e48 <prvCheckTasksWaitingTermination+0x54>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	3b01      	subs	r3, #1
 8009e18:	4a0b      	ldr	r2, [pc, #44]	; (8009e48 <prvCheckTasksWaitingTermination+0x54>)
 8009e1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009e1c:	4b0b      	ldr	r3, [pc, #44]	; (8009e4c <prvCheckTasksWaitingTermination+0x58>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	3b01      	subs	r3, #1
 8009e22:	4a0a      	ldr	r2, [pc, #40]	; (8009e4c <prvCheckTasksWaitingTermination+0x58>)
 8009e24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009e26:	f000 f9f1 	bl	800a20c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 f810 	bl	8009e50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009e30:	4b06      	ldr	r3, [pc, #24]	; (8009e4c <prvCheckTasksWaitingTermination+0x58>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1e1      	bne.n	8009dfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009e38:	bf00      	nop
 8009e3a:	bf00      	nop
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	200015ec 	.word	0x200015ec
 8009e48:	20001618 	.word	0x20001618
 8009e4c:	20001600 	.word	0x20001600

08009e50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	334c      	adds	r3, #76	; 0x4c
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f000 fd23 	bl	800a8a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d108      	bne.n	8009e7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e70:	4618      	mov	r0, r3
 8009e72:	f000 fb21 	bl	800a4b8 <vPortFree>
				vPortFree( pxTCB );
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fb1e 	bl	800a4b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009e7c:	e018      	b.n	8009eb0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d103      	bne.n	8009e90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fb15 	bl	800a4b8 <vPortFree>
	}
 8009e8e:	e00f      	b.n	8009eb0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d00a      	beq.n	8009eb0 <prvDeleteTCB+0x60>
	__asm volatile
 8009e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9e:	f383 8811 	msr	BASEPRI, r3
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	60fb      	str	r3, [r7, #12]
}
 8009eac:	bf00      	nop
 8009eae:	e7fe      	b.n	8009eae <prvDeleteTCB+0x5e>
	}
 8009eb0:	bf00      	nop
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ebe:	4b0e      	ldr	r3, [pc, #56]	; (8009ef8 <prvResetNextTaskUnblockTime+0x40>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d101      	bne.n	8009ecc <prvResetNextTaskUnblockTime+0x14>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e000      	b.n	8009ece <prvResetNextTaskUnblockTime+0x16>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d004      	beq.n	8009edc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ed2:	4b0a      	ldr	r3, [pc, #40]	; (8009efc <prvResetNextTaskUnblockTime+0x44>)
 8009ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009eda:	e008      	b.n	8009eee <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009edc:	4b06      	ldr	r3, [pc, #24]	; (8009ef8 <prvResetNextTaskUnblockTime+0x40>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	68db      	ldr	r3, [r3, #12]
 8009ee4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	4a04      	ldr	r2, [pc, #16]	; (8009efc <prvResetNextTaskUnblockTime+0x44>)
 8009eec:	6013      	str	r3, [r2, #0]
}
 8009eee:	bf00      	nop
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bc80      	pop	{r7}
 8009ef6:	4770      	bx	lr
 8009ef8:	200015d0 	.word	0x200015d0
 8009efc:	20001638 	.word	0x20001638

08009f00 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f0a:	4b29      	ldr	r3, [pc, #164]	; (8009fb0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f10:	4b28      	ldr	r3, [pc, #160]	; (8009fb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3304      	adds	r3, #4
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7ff fad4 	bl	80094c4 <uxListRemove>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10b      	bne.n	8009f3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009f22:	4b24      	ldr	r3, [pc, #144]	; (8009fb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f28:	2201      	movs	r2, #1
 8009f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f2e:	43da      	mvns	r2, r3
 8009f30:	4b21      	ldr	r3, [pc, #132]	; (8009fb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4013      	ands	r3, r2
 8009f36:	4a20      	ldr	r2, [pc, #128]	; (8009fb8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009f38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f40:	d10a      	bne.n	8009f58 <prvAddCurrentTaskToDelayedList+0x58>
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d007      	beq.n	8009f58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f48:	4b1a      	ldr	r3, [pc, #104]	; (8009fb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	3304      	adds	r3, #4
 8009f4e:	4619      	mov	r1, r3
 8009f50:	481a      	ldr	r0, [pc, #104]	; (8009fbc <prvAddCurrentTaskToDelayedList+0xbc>)
 8009f52:	f7ff fa5c 	bl	800940e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f56:	e026      	b.n	8009fa6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f60:	4b14      	ldr	r3, [pc, #80]	; (8009fb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d209      	bcs.n	8009f84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f70:	4b13      	ldr	r3, [pc, #76]	; (8009fc0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	4b0f      	ldr	r3, [pc, #60]	; (8009fb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	3304      	adds	r3, #4
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	f7ff fa69 	bl	8009454 <vListInsert>
}
 8009f82:	e010      	b.n	8009fa6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f84:	4b0f      	ldr	r3, [pc, #60]	; (8009fc4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	4b0a      	ldr	r3, [pc, #40]	; (8009fb4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	3304      	adds	r3, #4
 8009f8e:	4619      	mov	r1, r3
 8009f90:	4610      	mov	r0, r2
 8009f92:	f7ff fa5f 	bl	8009454 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009f96:	4b0c      	ldr	r3, [pc, #48]	; (8009fc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d202      	bcs.n	8009fa6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009fa0:	4a09      	ldr	r2, [pc, #36]	; (8009fc8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	6013      	str	r3, [r2, #0]
}
 8009fa6:	bf00      	nop
 8009fa8:	3710      	adds	r7, #16
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	2000161c 	.word	0x2000161c
 8009fb4:	20001518 	.word	0x20001518
 8009fb8:	20001620 	.word	0x20001620
 8009fbc:	20001604 	.word	0x20001604
 8009fc0:	200015d4 	.word	0x200015d4
 8009fc4:	200015d0 	.word	0x200015d0
 8009fc8:	20001638 	.word	0x20001638

08009fcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	3b04      	subs	r3, #4
 8009fdc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009fe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	3b04      	subs	r3, #4
 8009fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	f023 0201 	bic.w	r2, r3, #1
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	3b04      	subs	r3, #4
 8009ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ffc:	4a08      	ldr	r2, [pc, #32]	; (800a020 <pxPortInitialiseStack+0x54>)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	3b14      	subs	r3, #20
 800a006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3b20      	subs	r3, #32
 800a012:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a014:	68fb      	ldr	r3, [r7, #12]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3714      	adds	r7, #20
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bc80      	pop	{r7}
 800a01e:	4770      	bx	lr
 800a020:	0800a025 	.word	0x0800a025

0800a024 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a024:	b480      	push	{r7}
 800a026:	b085      	sub	sp, #20
 800a028:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a02a:	2300      	movs	r3, #0
 800a02c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a02e:	4b12      	ldr	r3, [pc, #72]	; (800a078 <prvTaskExitError+0x54>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a036:	d00a      	beq.n	800a04e <prvTaskExitError+0x2a>
	__asm volatile
 800a038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03c:	f383 8811 	msr	BASEPRI, r3
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	60fb      	str	r3, [r7, #12]
}
 800a04a:	bf00      	nop
 800a04c:	e7fe      	b.n	800a04c <prvTaskExitError+0x28>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	60bb      	str	r3, [r7, #8]
}
 800a060:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a062:	bf00      	nop
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d0fc      	beq.n	800a064 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a06a:	bf00      	nop
 800a06c:	bf00      	nop
 800a06e:	3714      	adds	r7, #20
 800a070:	46bd      	mov	sp, r7
 800a072:	bc80      	pop	{r7}
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	2000005c 	.word	0x2000005c
 800a07c:	00000000 	.word	0x00000000

0800a080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a080:	4b07      	ldr	r3, [pc, #28]	; (800a0a0 <pxCurrentTCBConst2>)
 800a082:	6819      	ldr	r1, [r3, #0]
 800a084:	6808      	ldr	r0, [r1, #0]
 800a086:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a08a:	f380 8809 	msr	PSP, r0
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f04f 0000 	mov.w	r0, #0
 800a096:	f380 8811 	msr	BASEPRI, r0
 800a09a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a09e:	4770      	bx	lr

0800a0a0 <pxCurrentTCBConst2>:
 800a0a0:	20001518 	.word	0x20001518
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a0a4:	bf00      	nop
 800a0a6:	bf00      	nop

0800a0a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a0a8:	4806      	ldr	r0, [pc, #24]	; (800a0c4 <prvPortStartFirstTask+0x1c>)
 800a0aa:	6800      	ldr	r0, [r0, #0]
 800a0ac:	6800      	ldr	r0, [r0, #0]
 800a0ae:	f380 8808 	msr	MSP, r0
 800a0b2:	b662      	cpsie	i
 800a0b4:	b661      	cpsie	f
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	f3bf 8f6f 	isb	sy
 800a0be:	df00      	svc	0
 800a0c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a0c2:	bf00      	nop
 800a0c4:	e000ed08 	.word	0xe000ed08

0800a0c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a0ce:	4b32      	ldr	r3, [pc, #200]	; (800a198 <xPortStartScheduler+0xd0>)
 800a0d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	22ff      	movs	r2, #255	; 0xff
 800a0de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a0e8:	78fb      	ldrb	r3, [r7, #3]
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	4b2a      	ldr	r3, [pc, #168]	; (800a19c <xPortStartScheduler+0xd4>)
 800a0f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a0f6:	4b2a      	ldr	r3, [pc, #168]	; (800a1a0 <xPortStartScheduler+0xd8>)
 800a0f8:	2207      	movs	r2, #7
 800a0fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a0fc:	e009      	b.n	800a112 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a0fe:	4b28      	ldr	r3, [pc, #160]	; (800a1a0 <xPortStartScheduler+0xd8>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3b01      	subs	r3, #1
 800a104:	4a26      	ldr	r2, [pc, #152]	; (800a1a0 <xPortStartScheduler+0xd8>)
 800a106:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a108:	78fb      	ldrb	r3, [r7, #3]
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	005b      	lsls	r3, r3, #1
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a112:	78fb      	ldrb	r3, [r7, #3]
 800a114:	b2db      	uxtb	r3, r3
 800a116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a11a:	2b80      	cmp	r3, #128	; 0x80
 800a11c:	d0ef      	beq.n	800a0fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a11e:	4b20      	ldr	r3, [pc, #128]	; (800a1a0 <xPortStartScheduler+0xd8>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f1c3 0307 	rsb	r3, r3, #7
 800a126:	2b04      	cmp	r3, #4
 800a128:	d00a      	beq.n	800a140 <xPortStartScheduler+0x78>
	__asm volatile
 800a12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12e:	f383 8811 	msr	BASEPRI, r3
 800a132:	f3bf 8f6f 	isb	sy
 800a136:	f3bf 8f4f 	dsb	sy
 800a13a:	60bb      	str	r3, [r7, #8]
}
 800a13c:	bf00      	nop
 800a13e:	e7fe      	b.n	800a13e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a140:	4b17      	ldr	r3, [pc, #92]	; (800a1a0 <xPortStartScheduler+0xd8>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	021b      	lsls	r3, r3, #8
 800a146:	4a16      	ldr	r2, [pc, #88]	; (800a1a0 <xPortStartScheduler+0xd8>)
 800a148:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a14a:	4b15      	ldr	r3, [pc, #84]	; (800a1a0 <xPortStartScheduler+0xd8>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a152:	4a13      	ldr	r2, [pc, #76]	; (800a1a0 <xPortStartScheduler+0xd8>)
 800a154:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	b2da      	uxtb	r2, r3
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a15e:	4b11      	ldr	r3, [pc, #68]	; (800a1a4 <xPortStartScheduler+0xdc>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a10      	ldr	r2, [pc, #64]	; (800a1a4 <xPortStartScheduler+0xdc>)
 800a164:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a168:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a16a:	4b0e      	ldr	r3, [pc, #56]	; (800a1a4 <xPortStartScheduler+0xdc>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4a0d      	ldr	r2, [pc, #52]	; (800a1a4 <xPortStartScheduler+0xdc>)
 800a170:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a174:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a176:	f000 f8b9 	bl	800a2ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a17a:	4b0b      	ldr	r3, [pc, #44]	; (800a1a8 <xPortStartScheduler+0xe0>)
 800a17c:	2200      	movs	r2, #0
 800a17e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a180:	f7ff ff92 	bl	800a0a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a184:	f7ff fd7c 	bl	8009c80 <vTaskSwitchContext>
	prvTaskExitError();
 800a188:	f7ff ff4c 	bl	800a024 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	e000e400 	.word	0xe000e400
 800a19c:	20001644 	.word	0x20001644
 800a1a0:	20001648 	.word	0x20001648
 800a1a4:	e000ed20 	.word	0xe000ed20
 800a1a8:	2000005c 	.word	0x2000005c

0800a1ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
	__asm volatile
 800a1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	607b      	str	r3, [r7, #4]
}
 800a1c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a1c6:	4b0f      	ldr	r3, [pc, #60]	; (800a204 <vPortEnterCritical+0x58>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	4a0d      	ldr	r2, [pc, #52]	; (800a204 <vPortEnterCritical+0x58>)
 800a1ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a1d0:	4b0c      	ldr	r3, [pc, #48]	; (800a204 <vPortEnterCritical+0x58>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d10f      	bne.n	800a1f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a1d8:	4b0b      	ldr	r3, [pc, #44]	; (800a208 <vPortEnterCritical+0x5c>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d00a      	beq.n	800a1f8 <vPortEnterCritical+0x4c>
	__asm volatile
 800a1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	603b      	str	r3, [r7, #0]
}
 800a1f4:	bf00      	nop
 800a1f6:	e7fe      	b.n	800a1f6 <vPortEnterCritical+0x4a>
	}
}
 800a1f8:	bf00      	nop
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bc80      	pop	{r7}
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	2000005c 	.word	0x2000005c
 800a208:	e000ed04 	.word	0xe000ed04

0800a20c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a212:	4b11      	ldr	r3, [pc, #68]	; (800a258 <vPortExitCritical+0x4c>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d10a      	bne.n	800a230 <vPortExitCritical+0x24>
	__asm volatile
 800a21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21e:	f383 8811 	msr	BASEPRI, r3
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	607b      	str	r3, [r7, #4]
}
 800a22c:	bf00      	nop
 800a22e:	e7fe      	b.n	800a22e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a230:	4b09      	ldr	r3, [pc, #36]	; (800a258 <vPortExitCritical+0x4c>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	3b01      	subs	r3, #1
 800a236:	4a08      	ldr	r2, [pc, #32]	; (800a258 <vPortExitCritical+0x4c>)
 800a238:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a23a:	4b07      	ldr	r3, [pc, #28]	; (800a258 <vPortExitCritical+0x4c>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d105      	bne.n	800a24e <vPortExitCritical+0x42>
 800a242:	2300      	movs	r3, #0
 800a244:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a24c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a24e:	bf00      	nop
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	bc80      	pop	{r7}
 800a256:	4770      	bx	lr
 800a258:	2000005c 	.word	0x2000005c
 800a25c:	00000000 	.word	0x00000000

0800a260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a260:	f3ef 8009 	mrs	r0, PSP
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	4b0d      	ldr	r3, [pc, #52]	; (800a2a0 <pxCurrentTCBConst>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a270:	6010      	str	r0, [r2, #0]
 800a272:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a276:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a27a:	f380 8811 	msr	BASEPRI, r0
 800a27e:	f7ff fcff 	bl	8009c80 <vTaskSwitchContext>
 800a282:	f04f 0000 	mov.w	r0, #0
 800a286:	f380 8811 	msr	BASEPRI, r0
 800a28a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a28e:	6819      	ldr	r1, [r3, #0]
 800a290:	6808      	ldr	r0, [r1, #0]
 800a292:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a296:	f380 8809 	msr	PSP, r0
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	4770      	bx	lr

0800a2a0 <pxCurrentTCBConst>:
 800a2a0:	20001518 	.word	0x20001518
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a2a4:	bf00      	nop
 800a2a6:	bf00      	nop

0800a2a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b2:	f383 8811 	msr	BASEPRI, r3
 800a2b6:	f3bf 8f6f 	isb	sy
 800a2ba:	f3bf 8f4f 	dsb	sy
 800a2be:	607b      	str	r3, [r7, #4]
}
 800a2c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a2c2:	f7ff fc1f 	bl	8009b04 <xTaskIncrementTick>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d003      	beq.n	800a2d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a2cc:	4b06      	ldr	r3, [pc, #24]	; (800a2e8 <SysTick_Handler+0x40>)
 800a2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2d2:	601a      	str	r2, [r3, #0]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	f383 8811 	msr	BASEPRI, r3
}
 800a2de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a2e0:	bf00      	nop
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	e000ed04 	.word	0xe000ed04

0800a2ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a2f0:	4b0a      	ldr	r3, [pc, #40]	; (800a31c <vPortSetupTimerInterrupt+0x30>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a2f6:	4b0a      	ldr	r3, [pc, #40]	; (800a320 <vPortSetupTimerInterrupt+0x34>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a2fc:	4b09      	ldr	r3, [pc, #36]	; (800a324 <vPortSetupTimerInterrupt+0x38>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a09      	ldr	r2, [pc, #36]	; (800a328 <vPortSetupTimerInterrupt+0x3c>)
 800a302:	fba2 2303 	umull	r2, r3, r2, r3
 800a306:	099b      	lsrs	r3, r3, #6
 800a308:	4a08      	ldr	r2, [pc, #32]	; (800a32c <vPortSetupTimerInterrupt+0x40>)
 800a30a:	3b01      	subs	r3, #1
 800a30c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a30e:	4b03      	ldr	r3, [pc, #12]	; (800a31c <vPortSetupTimerInterrupt+0x30>)
 800a310:	2207      	movs	r2, #7
 800a312:	601a      	str	r2, [r3, #0]
}
 800a314:	bf00      	nop
 800a316:	46bd      	mov	sp, r7
 800a318:	bc80      	pop	{r7}
 800a31a:	4770      	bx	lr
 800a31c:	e000e010 	.word	0xe000e010
 800a320:	e000e018 	.word	0xe000e018
 800a324:	20000000 	.word	0x20000000
 800a328:	10624dd3 	.word	0x10624dd3
 800a32c:	e000e014 	.word	0xe000e014

0800a330 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b08a      	sub	sp, #40	; 0x28
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a338:	2300      	movs	r3, #0
 800a33a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a33c:	f7ff fb2a 	bl	8009994 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a340:	4b58      	ldr	r3, [pc, #352]	; (800a4a4 <pvPortMalloc+0x174>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d101      	bne.n	800a34c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a348:	f000 f910 	bl	800a56c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a34c:	4b56      	ldr	r3, [pc, #344]	; (800a4a8 <pvPortMalloc+0x178>)
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4013      	ands	r3, r2
 800a354:	2b00      	cmp	r3, #0
 800a356:	f040 808e 	bne.w	800a476 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d01d      	beq.n	800a39c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a360:	2208      	movs	r2, #8
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4413      	add	r3, r2
 800a366:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f003 0307 	and.w	r3, r3, #7
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d014      	beq.n	800a39c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f023 0307 	bic.w	r3, r3, #7
 800a378:	3308      	adds	r3, #8
 800a37a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f003 0307 	and.w	r3, r3, #7
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00a      	beq.n	800a39c <pvPortMalloc+0x6c>
	__asm volatile
 800a386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a38a:	f383 8811 	msr	BASEPRI, r3
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	617b      	str	r3, [r7, #20]
}
 800a398:	bf00      	nop
 800a39a:	e7fe      	b.n	800a39a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d069      	beq.n	800a476 <pvPortMalloc+0x146>
 800a3a2:	4b42      	ldr	r3, [pc, #264]	; (800a4ac <pvPortMalloc+0x17c>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d864      	bhi.n	800a476 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a3ac:	4b40      	ldr	r3, [pc, #256]	; (800a4b0 <pvPortMalloc+0x180>)
 800a3ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a3b0:	4b3f      	ldr	r3, [pc, #252]	; (800a4b0 <pvPortMalloc+0x180>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3b6:	e004      	b.n	800a3c2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d903      	bls.n	800a3d4 <pvPortMalloc+0xa4>
 800a3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1f1      	bne.n	800a3b8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a3d4:	4b33      	ldr	r3, [pc, #204]	; (800a4a4 <pvPortMalloc+0x174>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d04b      	beq.n	800a476 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a3de:	6a3b      	ldr	r3, [r7, #32]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	2208      	movs	r2, #8
 800a3e4:	4413      	add	r3, r2
 800a3e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ea:	681a      	ldr	r2, [r3, #0]
 800a3ec:	6a3b      	ldr	r3, [r7, #32]
 800a3ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f2:	685a      	ldr	r2, [r3, #4]
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	1ad2      	subs	r2, r2, r3
 800a3f8:	2308      	movs	r3, #8
 800a3fa:	005b      	lsls	r3, r3, #1
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d91f      	bls.n	800a440 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	4413      	add	r3, r2
 800a406:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	f003 0307 	and.w	r3, r3, #7
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00a      	beq.n	800a428 <pvPortMalloc+0xf8>
	__asm volatile
 800a412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a416:	f383 8811 	msr	BASEPRI, r3
 800a41a:	f3bf 8f6f 	isb	sy
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	613b      	str	r3, [r7, #16]
}
 800a424:	bf00      	nop
 800a426:	e7fe      	b.n	800a426 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	685a      	ldr	r2, [r3, #4]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	1ad2      	subs	r2, r2, r3
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a43a:	69b8      	ldr	r0, [r7, #24]
 800a43c:	f000 f8f8 	bl	800a630 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a440:	4b1a      	ldr	r3, [pc, #104]	; (800a4ac <pvPortMalloc+0x17c>)
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	1ad3      	subs	r3, r2, r3
 800a44a:	4a18      	ldr	r2, [pc, #96]	; (800a4ac <pvPortMalloc+0x17c>)
 800a44c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a44e:	4b17      	ldr	r3, [pc, #92]	; (800a4ac <pvPortMalloc+0x17c>)
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	4b18      	ldr	r3, [pc, #96]	; (800a4b4 <pvPortMalloc+0x184>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	429a      	cmp	r2, r3
 800a458:	d203      	bcs.n	800a462 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a45a:	4b14      	ldr	r3, [pc, #80]	; (800a4ac <pvPortMalloc+0x17c>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a15      	ldr	r2, [pc, #84]	; (800a4b4 <pvPortMalloc+0x184>)
 800a460:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a464:	685a      	ldr	r2, [r3, #4]
 800a466:	4b10      	ldr	r3, [pc, #64]	; (800a4a8 <pvPortMalloc+0x178>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	431a      	orrs	r2, r3
 800a46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a472:	2200      	movs	r2, #0
 800a474:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a476:	f7ff fa9b 	bl	80099b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a47a:	69fb      	ldr	r3, [r7, #28]
 800a47c:	f003 0307 	and.w	r3, r3, #7
 800a480:	2b00      	cmp	r3, #0
 800a482:	d00a      	beq.n	800a49a <pvPortMalloc+0x16a>
	__asm volatile
 800a484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	60fb      	str	r3, [r7, #12]
}
 800a496:	bf00      	nop
 800a498:	e7fe      	b.n	800a498 <pvPortMalloc+0x168>
	return pvReturn;
 800a49a:	69fb      	ldr	r3, [r7, #28]
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3728      	adds	r7, #40	; 0x28
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	20004534 	.word	0x20004534
 800a4a8:	20004540 	.word	0x20004540
 800a4ac:	20004538 	.word	0x20004538
 800a4b0:	2000452c 	.word	0x2000452c
 800a4b4:	2000453c 	.word	0x2000453c

0800a4b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d048      	beq.n	800a55c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a4ca:	2308      	movs	r3, #8
 800a4cc:	425b      	negs	r3, r3
 800a4ce:	697a      	ldr	r2, [r7, #20]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	4b21      	ldr	r3, [pc, #132]	; (800a564 <vPortFree+0xac>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4013      	ands	r3, r2
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10a      	bne.n	800a4fc <vPortFree+0x44>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	60fb      	str	r3, [r7, #12]
}
 800a4f8:	bf00      	nop
 800a4fa:	e7fe      	b.n	800a4fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d00a      	beq.n	800a51a <vPortFree+0x62>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	60bb      	str	r3, [r7, #8]
}
 800a516:	bf00      	nop
 800a518:	e7fe      	b.n	800a518 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	685a      	ldr	r2, [r3, #4]
 800a51e:	4b11      	ldr	r3, [pc, #68]	; (800a564 <vPortFree+0xac>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4013      	ands	r3, r2
 800a524:	2b00      	cmp	r3, #0
 800a526:	d019      	beq.n	800a55c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d115      	bne.n	800a55c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	685a      	ldr	r2, [r3, #4]
 800a534:	4b0b      	ldr	r3, [pc, #44]	; (800a564 <vPortFree+0xac>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	43db      	mvns	r3, r3
 800a53a:	401a      	ands	r2, r3
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a540:	f7ff fa28 	bl	8009994 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	685a      	ldr	r2, [r3, #4]
 800a548:	4b07      	ldr	r3, [pc, #28]	; (800a568 <vPortFree+0xb0>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4413      	add	r3, r2
 800a54e:	4a06      	ldr	r2, [pc, #24]	; (800a568 <vPortFree+0xb0>)
 800a550:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a552:	6938      	ldr	r0, [r7, #16]
 800a554:	f000 f86c 	bl	800a630 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a558:	f7ff fa2a 	bl	80099b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a55c:	bf00      	nop
 800a55e:	3718      	adds	r7, #24
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	20004540 	.word	0x20004540
 800a568:	20004538 	.word	0x20004538

0800a56c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a572:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800a576:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a578:	4b27      	ldr	r3, [pc, #156]	; (800a618 <prvHeapInit+0xac>)
 800a57a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f003 0307 	and.w	r3, r3, #7
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00c      	beq.n	800a5a0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	3307      	adds	r3, #7
 800a58a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f023 0307 	bic.w	r3, r3, #7
 800a592:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a594:	68ba      	ldr	r2, [r7, #8]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	1ad3      	subs	r3, r2, r3
 800a59a:	4a1f      	ldr	r2, [pc, #124]	; (800a618 <prvHeapInit+0xac>)
 800a59c:	4413      	add	r3, r2
 800a59e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a5a4:	4a1d      	ldr	r2, [pc, #116]	; (800a61c <prvHeapInit+0xb0>)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a5aa:	4b1c      	ldr	r3, [pc, #112]	; (800a61c <prvHeapInit+0xb0>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	68ba      	ldr	r2, [r7, #8]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a5b8:	2208      	movs	r2, #8
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	1a9b      	subs	r3, r3, r2
 800a5be:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f023 0307 	bic.w	r3, r3, #7
 800a5c6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	4a15      	ldr	r2, [pc, #84]	; (800a620 <prvHeapInit+0xb4>)
 800a5cc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a5ce:	4b14      	ldr	r3, [pc, #80]	; (800a620 <prvHeapInit+0xb4>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a5d6:	4b12      	ldr	r3, [pc, #72]	; (800a620 <prvHeapInit+0xb4>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	1ad2      	subs	r2, r2, r3
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a5ec:	4b0c      	ldr	r3, [pc, #48]	; (800a620 <prvHeapInit+0xb4>)
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	685b      	ldr	r3, [r3, #4]
 800a5f8:	4a0a      	ldr	r2, [pc, #40]	; (800a624 <prvHeapInit+0xb8>)
 800a5fa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	4a09      	ldr	r2, [pc, #36]	; (800a628 <prvHeapInit+0xbc>)
 800a602:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a604:	4b09      	ldr	r3, [pc, #36]	; (800a62c <prvHeapInit+0xc0>)
 800a606:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a60a:	601a      	str	r2, [r3, #0]
}
 800a60c:	bf00      	nop
 800a60e:	3714      	adds	r7, #20
 800a610:	46bd      	mov	sp, r7
 800a612:	bc80      	pop	{r7}
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop
 800a618:	2000164c 	.word	0x2000164c
 800a61c:	2000452c 	.word	0x2000452c
 800a620:	20004534 	.word	0x20004534
 800a624:	2000453c 	.word	0x2000453c
 800a628:	20004538 	.word	0x20004538
 800a62c:	20004540 	.word	0x20004540

0800a630 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a638:	4b27      	ldr	r3, [pc, #156]	; (800a6d8 <prvInsertBlockIntoFreeList+0xa8>)
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	e002      	b.n	800a644 <prvInsertBlockIntoFreeList+0x14>
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	60fb      	str	r3, [r7, #12]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d8f7      	bhi.n	800a63e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	68ba      	ldr	r2, [r7, #8]
 800a658:	4413      	add	r3, r2
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	429a      	cmp	r2, r3
 800a65e:	d108      	bne.n	800a672 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	685a      	ldr	r2, [r3, #4]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	441a      	add	r2, r3
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	68ba      	ldr	r2, [r7, #8]
 800a67c:	441a      	add	r2, r3
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	429a      	cmp	r2, r3
 800a684:	d118      	bne.n	800a6b8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	4b14      	ldr	r3, [pc, #80]	; (800a6dc <prvInsertBlockIntoFreeList+0xac>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d00d      	beq.n	800a6ae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	685a      	ldr	r2, [r3, #4]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	441a      	add	r2, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	681a      	ldr	r2, [r3, #0]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	601a      	str	r2, [r3, #0]
 800a6ac:	e008      	b.n	800a6c0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a6ae:	4b0b      	ldr	r3, [pc, #44]	; (800a6dc <prvInsertBlockIntoFreeList+0xac>)
 800a6b0:	681a      	ldr	r2, [r3, #0]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	601a      	str	r2, [r3, #0]
 800a6b6:	e003      	b.n	800a6c0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	429a      	cmp	r2, r3
 800a6c6:	d002      	beq.n	800a6ce <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6ce:	bf00      	nop
 800a6d0:	3714      	adds	r7, #20
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bc80      	pop	{r7}
 800a6d6:	4770      	bx	lr
 800a6d8:	2000452c 	.word	0x2000452c
 800a6dc:	20004534 	.word	0x20004534

0800a6e0 <__errno>:
 800a6e0:	4b01      	ldr	r3, [pc, #4]	; (800a6e8 <__errno+0x8>)
 800a6e2:	6818      	ldr	r0, [r3, #0]
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	20000060 	.word	0x20000060

0800a6ec <__libc_init_array>:
 800a6ec:	b570      	push	{r4, r5, r6, lr}
 800a6ee:	2600      	movs	r6, #0
 800a6f0:	4d0c      	ldr	r5, [pc, #48]	; (800a724 <__libc_init_array+0x38>)
 800a6f2:	4c0d      	ldr	r4, [pc, #52]	; (800a728 <__libc_init_array+0x3c>)
 800a6f4:	1b64      	subs	r4, r4, r5
 800a6f6:	10a4      	asrs	r4, r4, #2
 800a6f8:	42a6      	cmp	r6, r4
 800a6fa:	d109      	bne.n	800a710 <__libc_init_array+0x24>
 800a6fc:	f000 fd06 	bl	800b10c <_init>
 800a700:	2600      	movs	r6, #0
 800a702:	4d0a      	ldr	r5, [pc, #40]	; (800a72c <__libc_init_array+0x40>)
 800a704:	4c0a      	ldr	r4, [pc, #40]	; (800a730 <__libc_init_array+0x44>)
 800a706:	1b64      	subs	r4, r4, r5
 800a708:	10a4      	asrs	r4, r4, #2
 800a70a:	42a6      	cmp	r6, r4
 800a70c:	d105      	bne.n	800a71a <__libc_init_array+0x2e>
 800a70e:	bd70      	pop	{r4, r5, r6, pc}
 800a710:	f855 3b04 	ldr.w	r3, [r5], #4
 800a714:	4798      	blx	r3
 800a716:	3601      	adds	r6, #1
 800a718:	e7ee      	b.n	800a6f8 <__libc_init_array+0xc>
 800a71a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a71e:	4798      	blx	r3
 800a720:	3601      	adds	r6, #1
 800a722:	e7f2      	b.n	800a70a <__libc_init_array+0x1e>
 800a724:	0800b728 	.word	0x0800b728
 800a728:	0800b728 	.word	0x0800b728
 800a72c:	0800b728 	.word	0x0800b728
 800a730:	0800b72c 	.word	0x0800b72c

0800a734 <__retarget_lock_acquire_recursive>:
 800a734:	4770      	bx	lr

0800a736 <__retarget_lock_release_recursive>:
 800a736:	4770      	bx	lr

0800a738 <memcpy>:
 800a738:	440a      	add	r2, r1
 800a73a:	4291      	cmp	r1, r2
 800a73c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a740:	d100      	bne.n	800a744 <memcpy+0xc>
 800a742:	4770      	bx	lr
 800a744:	b510      	push	{r4, lr}
 800a746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a74a:	4291      	cmp	r1, r2
 800a74c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a750:	d1f9      	bne.n	800a746 <memcpy+0xe>
 800a752:	bd10      	pop	{r4, pc}

0800a754 <memset>:
 800a754:	4603      	mov	r3, r0
 800a756:	4402      	add	r2, r0
 800a758:	4293      	cmp	r3, r2
 800a75a:	d100      	bne.n	800a75e <memset+0xa>
 800a75c:	4770      	bx	lr
 800a75e:	f803 1b01 	strb.w	r1, [r3], #1
 800a762:	e7f9      	b.n	800a758 <memset+0x4>

0800a764 <sbrk_aligned>:
 800a764:	b570      	push	{r4, r5, r6, lr}
 800a766:	4e0e      	ldr	r6, [pc, #56]	; (800a7a0 <sbrk_aligned+0x3c>)
 800a768:	460c      	mov	r4, r1
 800a76a:	6831      	ldr	r1, [r6, #0]
 800a76c:	4605      	mov	r5, r0
 800a76e:	b911      	cbnz	r1, 800a776 <sbrk_aligned+0x12>
 800a770:	f000 f8f6 	bl	800a960 <_sbrk_r>
 800a774:	6030      	str	r0, [r6, #0]
 800a776:	4621      	mov	r1, r4
 800a778:	4628      	mov	r0, r5
 800a77a:	f000 f8f1 	bl	800a960 <_sbrk_r>
 800a77e:	1c43      	adds	r3, r0, #1
 800a780:	d00a      	beq.n	800a798 <sbrk_aligned+0x34>
 800a782:	1cc4      	adds	r4, r0, #3
 800a784:	f024 0403 	bic.w	r4, r4, #3
 800a788:	42a0      	cmp	r0, r4
 800a78a:	d007      	beq.n	800a79c <sbrk_aligned+0x38>
 800a78c:	1a21      	subs	r1, r4, r0
 800a78e:	4628      	mov	r0, r5
 800a790:	f000 f8e6 	bl	800a960 <_sbrk_r>
 800a794:	3001      	adds	r0, #1
 800a796:	d101      	bne.n	800a79c <sbrk_aligned+0x38>
 800a798:	f04f 34ff 	mov.w	r4, #4294967295
 800a79c:	4620      	mov	r0, r4
 800a79e:	bd70      	pop	{r4, r5, r6, pc}
 800a7a0:	2000454c 	.word	0x2000454c

0800a7a4 <_malloc_r>:
 800a7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a8:	1ccd      	adds	r5, r1, #3
 800a7aa:	f025 0503 	bic.w	r5, r5, #3
 800a7ae:	3508      	adds	r5, #8
 800a7b0:	2d0c      	cmp	r5, #12
 800a7b2:	bf38      	it	cc
 800a7b4:	250c      	movcc	r5, #12
 800a7b6:	2d00      	cmp	r5, #0
 800a7b8:	4607      	mov	r7, r0
 800a7ba:	db01      	blt.n	800a7c0 <_malloc_r+0x1c>
 800a7bc:	42a9      	cmp	r1, r5
 800a7be:	d905      	bls.n	800a7cc <_malloc_r+0x28>
 800a7c0:	230c      	movs	r3, #12
 800a7c2:	2600      	movs	r6, #0
 800a7c4:	603b      	str	r3, [r7, #0]
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7cc:	4e2e      	ldr	r6, [pc, #184]	; (800a888 <_malloc_r+0xe4>)
 800a7ce:	f000 f8f7 	bl	800a9c0 <__malloc_lock>
 800a7d2:	6833      	ldr	r3, [r6, #0]
 800a7d4:	461c      	mov	r4, r3
 800a7d6:	bb34      	cbnz	r4, 800a826 <_malloc_r+0x82>
 800a7d8:	4629      	mov	r1, r5
 800a7da:	4638      	mov	r0, r7
 800a7dc:	f7ff ffc2 	bl	800a764 <sbrk_aligned>
 800a7e0:	1c43      	adds	r3, r0, #1
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	d14d      	bne.n	800a882 <_malloc_r+0xde>
 800a7e6:	6834      	ldr	r4, [r6, #0]
 800a7e8:	4626      	mov	r6, r4
 800a7ea:	2e00      	cmp	r6, #0
 800a7ec:	d140      	bne.n	800a870 <_malloc_r+0xcc>
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	4631      	mov	r1, r6
 800a7f2:	4638      	mov	r0, r7
 800a7f4:	eb04 0803 	add.w	r8, r4, r3
 800a7f8:	f000 f8b2 	bl	800a960 <_sbrk_r>
 800a7fc:	4580      	cmp	r8, r0
 800a7fe:	d13a      	bne.n	800a876 <_malloc_r+0xd2>
 800a800:	6821      	ldr	r1, [r4, #0]
 800a802:	3503      	adds	r5, #3
 800a804:	1a6d      	subs	r5, r5, r1
 800a806:	f025 0503 	bic.w	r5, r5, #3
 800a80a:	3508      	adds	r5, #8
 800a80c:	2d0c      	cmp	r5, #12
 800a80e:	bf38      	it	cc
 800a810:	250c      	movcc	r5, #12
 800a812:	4638      	mov	r0, r7
 800a814:	4629      	mov	r1, r5
 800a816:	f7ff ffa5 	bl	800a764 <sbrk_aligned>
 800a81a:	3001      	adds	r0, #1
 800a81c:	d02b      	beq.n	800a876 <_malloc_r+0xd2>
 800a81e:	6823      	ldr	r3, [r4, #0]
 800a820:	442b      	add	r3, r5
 800a822:	6023      	str	r3, [r4, #0]
 800a824:	e00e      	b.n	800a844 <_malloc_r+0xa0>
 800a826:	6822      	ldr	r2, [r4, #0]
 800a828:	1b52      	subs	r2, r2, r5
 800a82a:	d41e      	bmi.n	800a86a <_malloc_r+0xc6>
 800a82c:	2a0b      	cmp	r2, #11
 800a82e:	d916      	bls.n	800a85e <_malloc_r+0xba>
 800a830:	1961      	adds	r1, r4, r5
 800a832:	42a3      	cmp	r3, r4
 800a834:	6025      	str	r5, [r4, #0]
 800a836:	bf18      	it	ne
 800a838:	6059      	strne	r1, [r3, #4]
 800a83a:	6863      	ldr	r3, [r4, #4]
 800a83c:	bf08      	it	eq
 800a83e:	6031      	streq	r1, [r6, #0]
 800a840:	5162      	str	r2, [r4, r5]
 800a842:	604b      	str	r3, [r1, #4]
 800a844:	4638      	mov	r0, r7
 800a846:	f104 060b 	add.w	r6, r4, #11
 800a84a:	f000 f8bf 	bl	800a9cc <__malloc_unlock>
 800a84e:	f026 0607 	bic.w	r6, r6, #7
 800a852:	1d23      	adds	r3, r4, #4
 800a854:	1af2      	subs	r2, r6, r3
 800a856:	d0b6      	beq.n	800a7c6 <_malloc_r+0x22>
 800a858:	1b9b      	subs	r3, r3, r6
 800a85a:	50a3      	str	r3, [r4, r2]
 800a85c:	e7b3      	b.n	800a7c6 <_malloc_r+0x22>
 800a85e:	6862      	ldr	r2, [r4, #4]
 800a860:	42a3      	cmp	r3, r4
 800a862:	bf0c      	ite	eq
 800a864:	6032      	streq	r2, [r6, #0]
 800a866:	605a      	strne	r2, [r3, #4]
 800a868:	e7ec      	b.n	800a844 <_malloc_r+0xa0>
 800a86a:	4623      	mov	r3, r4
 800a86c:	6864      	ldr	r4, [r4, #4]
 800a86e:	e7b2      	b.n	800a7d6 <_malloc_r+0x32>
 800a870:	4634      	mov	r4, r6
 800a872:	6876      	ldr	r6, [r6, #4]
 800a874:	e7b9      	b.n	800a7ea <_malloc_r+0x46>
 800a876:	230c      	movs	r3, #12
 800a878:	4638      	mov	r0, r7
 800a87a:	603b      	str	r3, [r7, #0]
 800a87c:	f000 f8a6 	bl	800a9cc <__malloc_unlock>
 800a880:	e7a1      	b.n	800a7c6 <_malloc_r+0x22>
 800a882:	6025      	str	r5, [r4, #0]
 800a884:	e7de      	b.n	800a844 <_malloc_r+0xa0>
 800a886:	bf00      	nop
 800a888:	20004548 	.word	0x20004548

0800a88c <cleanup_glue>:
 800a88c:	b538      	push	{r3, r4, r5, lr}
 800a88e:	460c      	mov	r4, r1
 800a890:	6809      	ldr	r1, [r1, #0]
 800a892:	4605      	mov	r5, r0
 800a894:	b109      	cbz	r1, 800a89a <cleanup_glue+0xe>
 800a896:	f7ff fff9 	bl	800a88c <cleanup_glue>
 800a89a:	4621      	mov	r1, r4
 800a89c:	4628      	mov	r0, r5
 800a89e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a8a2:	f000 b899 	b.w	800a9d8 <_free_r>
	...

0800a8a8 <_reclaim_reent>:
 800a8a8:	4b2c      	ldr	r3, [pc, #176]	; (800a95c <_reclaim_reent+0xb4>)
 800a8aa:	b570      	push	{r4, r5, r6, lr}
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	4283      	cmp	r3, r0
 800a8b2:	d051      	beq.n	800a958 <_reclaim_reent+0xb0>
 800a8b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a8b6:	b143      	cbz	r3, 800a8ca <_reclaim_reent+0x22>
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d14a      	bne.n	800a954 <_reclaim_reent+0xac>
 800a8be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8c0:	6819      	ldr	r1, [r3, #0]
 800a8c2:	b111      	cbz	r1, 800a8ca <_reclaim_reent+0x22>
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f000 f887 	bl	800a9d8 <_free_r>
 800a8ca:	6961      	ldr	r1, [r4, #20]
 800a8cc:	b111      	cbz	r1, 800a8d4 <_reclaim_reent+0x2c>
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	f000 f882 	bl	800a9d8 <_free_r>
 800a8d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a8d6:	b111      	cbz	r1, 800a8de <_reclaim_reent+0x36>
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f000 f87d 	bl	800a9d8 <_free_r>
 800a8de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a8e0:	b111      	cbz	r1, 800a8e8 <_reclaim_reent+0x40>
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	f000 f878 	bl	800a9d8 <_free_r>
 800a8e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a8ea:	b111      	cbz	r1, 800a8f2 <_reclaim_reent+0x4a>
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f000 f873 	bl	800a9d8 <_free_r>
 800a8f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a8f4:	b111      	cbz	r1, 800a8fc <_reclaim_reent+0x54>
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f000 f86e 	bl	800a9d8 <_free_r>
 800a8fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a8fe:	b111      	cbz	r1, 800a906 <_reclaim_reent+0x5e>
 800a900:	4620      	mov	r0, r4
 800a902:	f000 f869 	bl	800a9d8 <_free_r>
 800a906:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a908:	b111      	cbz	r1, 800a910 <_reclaim_reent+0x68>
 800a90a:	4620      	mov	r0, r4
 800a90c:	f000 f864 	bl	800a9d8 <_free_r>
 800a910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a912:	b111      	cbz	r1, 800a91a <_reclaim_reent+0x72>
 800a914:	4620      	mov	r0, r4
 800a916:	f000 f85f 	bl	800a9d8 <_free_r>
 800a91a:	69a3      	ldr	r3, [r4, #24]
 800a91c:	b1e3      	cbz	r3, 800a958 <_reclaim_reent+0xb0>
 800a91e:	4620      	mov	r0, r4
 800a920:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a922:	4798      	blx	r3
 800a924:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a926:	b1b9      	cbz	r1, 800a958 <_reclaim_reent+0xb0>
 800a928:	4620      	mov	r0, r4
 800a92a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a92e:	f7ff bfad 	b.w	800a88c <cleanup_glue>
 800a932:	5949      	ldr	r1, [r1, r5]
 800a934:	b941      	cbnz	r1, 800a948 <_reclaim_reent+0xa0>
 800a936:	3504      	adds	r5, #4
 800a938:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a93a:	2d80      	cmp	r5, #128	; 0x80
 800a93c:	68d9      	ldr	r1, [r3, #12]
 800a93e:	d1f8      	bne.n	800a932 <_reclaim_reent+0x8a>
 800a940:	4620      	mov	r0, r4
 800a942:	f000 f849 	bl	800a9d8 <_free_r>
 800a946:	e7ba      	b.n	800a8be <_reclaim_reent+0x16>
 800a948:	680e      	ldr	r6, [r1, #0]
 800a94a:	4620      	mov	r0, r4
 800a94c:	f000 f844 	bl	800a9d8 <_free_r>
 800a950:	4631      	mov	r1, r6
 800a952:	e7ef      	b.n	800a934 <_reclaim_reent+0x8c>
 800a954:	2500      	movs	r5, #0
 800a956:	e7ef      	b.n	800a938 <_reclaim_reent+0x90>
 800a958:	bd70      	pop	{r4, r5, r6, pc}
 800a95a:	bf00      	nop
 800a95c:	20000060 	.word	0x20000060

0800a960 <_sbrk_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	2300      	movs	r3, #0
 800a964:	4d05      	ldr	r5, [pc, #20]	; (800a97c <_sbrk_r+0x1c>)
 800a966:	4604      	mov	r4, r0
 800a968:	4608      	mov	r0, r1
 800a96a:	602b      	str	r3, [r5, #0]
 800a96c:	f7f6 fdf6 	bl	800155c <_sbrk>
 800a970:	1c43      	adds	r3, r0, #1
 800a972:	d102      	bne.n	800a97a <_sbrk_r+0x1a>
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	b103      	cbz	r3, 800a97a <_sbrk_r+0x1a>
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	bd38      	pop	{r3, r4, r5, pc}
 800a97c:	20004550 	.word	0x20004550

0800a980 <siprintf>:
 800a980:	b40e      	push	{r1, r2, r3}
 800a982:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a986:	b500      	push	{lr}
 800a988:	b09c      	sub	sp, #112	; 0x70
 800a98a:	ab1d      	add	r3, sp, #116	; 0x74
 800a98c:	9002      	str	r0, [sp, #8]
 800a98e:	9006      	str	r0, [sp, #24]
 800a990:	9107      	str	r1, [sp, #28]
 800a992:	9104      	str	r1, [sp, #16]
 800a994:	4808      	ldr	r0, [pc, #32]	; (800a9b8 <siprintf+0x38>)
 800a996:	4909      	ldr	r1, [pc, #36]	; (800a9bc <siprintf+0x3c>)
 800a998:	f853 2b04 	ldr.w	r2, [r3], #4
 800a99c:	9105      	str	r1, [sp, #20]
 800a99e:	6800      	ldr	r0, [r0, #0]
 800a9a0:	a902      	add	r1, sp, #8
 800a9a2:	9301      	str	r3, [sp, #4]
 800a9a4:	f000 f8bc 	bl	800ab20 <_svfiprintf_r>
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	9b02      	ldr	r3, [sp, #8]
 800a9ac:	701a      	strb	r2, [r3, #0]
 800a9ae:	b01c      	add	sp, #112	; 0x70
 800a9b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9b4:	b003      	add	sp, #12
 800a9b6:	4770      	bx	lr
 800a9b8:	20000060 	.word	0x20000060
 800a9bc:	ffff0208 	.word	0xffff0208

0800a9c0 <__malloc_lock>:
 800a9c0:	4801      	ldr	r0, [pc, #4]	; (800a9c8 <__malloc_lock+0x8>)
 800a9c2:	f7ff beb7 	b.w	800a734 <__retarget_lock_acquire_recursive>
 800a9c6:	bf00      	nop
 800a9c8:	20004544 	.word	0x20004544

0800a9cc <__malloc_unlock>:
 800a9cc:	4801      	ldr	r0, [pc, #4]	; (800a9d4 <__malloc_unlock+0x8>)
 800a9ce:	f7ff beb2 	b.w	800a736 <__retarget_lock_release_recursive>
 800a9d2:	bf00      	nop
 800a9d4:	20004544 	.word	0x20004544

0800a9d8 <_free_r>:
 800a9d8:	b538      	push	{r3, r4, r5, lr}
 800a9da:	4605      	mov	r5, r0
 800a9dc:	2900      	cmp	r1, #0
 800a9de:	d040      	beq.n	800aa62 <_free_r+0x8a>
 800a9e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9e4:	1f0c      	subs	r4, r1, #4
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	bfb8      	it	lt
 800a9ea:	18e4      	addlt	r4, r4, r3
 800a9ec:	f7ff ffe8 	bl	800a9c0 <__malloc_lock>
 800a9f0:	4a1c      	ldr	r2, [pc, #112]	; (800aa64 <_free_r+0x8c>)
 800a9f2:	6813      	ldr	r3, [r2, #0]
 800a9f4:	b933      	cbnz	r3, 800aa04 <_free_r+0x2c>
 800a9f6:	6063      	str	r3, [r4, #4]
 800a9f8:	6014      	str	r4, [r2, #0]
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa00:	f7ff bfe4 	b.w	800a9cc <__malloc_unlock>
 800aa04:	42a3      	cmp	r3, r4
 800aa06:	d908      	bls.n	800aa1a <_free_r+0x42>
 800aa08:	6820      	ldr	r0, [r4, #0]
 800aa0a:	1821      	adds	r1, r4, r0
 800aa0c:	428b      	cmp	r3, r1
 800aa0e:	bf01      	itttt	eq
 800aa10:	6819      	ldreq	r1, [r3, #0]
 800aa12:	685b      	ldreq	r3, [r3, #4]
 800aa14:	1809      	addeq	r1, r1, r0
 800aa16:	6021      	streq	r1, [r4, #0]
 800aa18:	e7ed      	b.n	800a9f6 <_free_r+0x1e>
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	b10b      	cbz	r3, 800aa24 <_free_r+0x4c>
 800aa20:	42a3      	cmp	r3, r4
 800aa22:	d9fa      	bls.n	800aa1a <_free_r+0x42>
 800aa24:	6811      	ldr	r1, [r2, #0]
 800aa26:	1850      	adds	r0, r2, r1
 800aa28:	42a0      	cmp	r0, r4
 800aa2a:	d10b      	bne.n	800aa44 <_free_r+0x6c>
 800aa2c:	6820      	ldr	r0, [r4, #0]
 800aa2e:	4401      	add	r1, r0
 800aa30:	1850      	adds	r0, r2, r1
 800aa32:	4283      	cmp	r3, r0
 800aa34:	6011      	str	r1, [r2, #0]
 800aa36:	d1e0      	bne.n	800a9fa <_free_r+0x22>
 800aa38:	6818      	ldr	r0, [r3, #0]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	4401      	add	r1, r0
 800aa3e:	6011      	str	r1, [r2, #0]
 800aa40:	6053      	str	r3, [r2, #4]
 800aa42:	e7da      	b.n	800a9fa <_free_r+0x22>
 800aa44:	d902      	bls.n	800aa4c <_free_r+0x74>
 800aa46:	230c      	movs	r3, #12
 800aa48:	602b      	str	r3, [r5, #0]
 800aa4a:	e7d6      	b.n	800a9fa <_free_r+0x22>
 800aa4c:	6820      	ldr	r0, [r4, #0]
 800aa4e:	1821      	adds	r1, r4, r0
 800aa50:	428b      	cmp	r3, r1
 800aa52:	bf01      	itttt	eq
 800aa54:	6819      	ldreq	r1, [r3, #0]
 800aa56:	685b      	ldreq	r3, [r3, #4]
 800aa58:	1809      	addeq	r1, r1, r0
 800aa5a:	6021      	streq	r1, [r4, #0]
 800aa5c:	6063      	str	r3, [r4, #4]
 800aa5e:	6054      	str	r4, [r2, #4]
 800aa60:	e7cb      	b.n	800a9fa <_free_r+0x22>
 800aa62:	bd38      	pop	{r3, r4, r5, pc}
 800aa64:	20004548 	.word	0x20004548

0800aa68 <__ssputs_r>:
 800aa68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa6c:	688e      	ldr	r6, [r1, #8]
 800aa6e:	4682      	mov	sl, r0
 800aa70:	429e      	cmp	r6, r3
 800aa72:	460c      	mov	r4, r1
 800aa74:	4690      	mov	r8, r2
 800aa76:	461f      	mov	r7, r3
 800aa78:	d838      	bhi.n	800aaec <__ssputs_r+0x84>
 800aa7a:	898a      	ldrh	r2, [r1, #12]
 800aa7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa80:	d032      	beq.n	800aae8 <__ssputs_r+0x80>
 800aa82:	6825      	ldr	r5, [r4, #0]
 800aa84:	6909      	ldr	r1, [r1, #16]
 800aa86:	3301      	adds	r3, #1
 800aa88:	eba5 0901 	sub.w	r9, r5, r1
 800aa8c:	6965      	ldr	r5, [r4, #20]
 800aa8e:	444b      	add	r3, r9
 800aa90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa98:	106d      	asrs	r5, r5, #1
 800aa9a:	429d      	cmp	r5, r3
 800aa9c:	bf38      	it	cc
 800aa9e:	461d      	movcc	r5, r3
 800aaa0:	0553      	lsls	r3, r2, #21
 800aaa2:	d531      	bpl.n	800ab08 <__ssputs_r+0xa0>
 800aaa4:	4629      	mov	r1, r5
 800aaa6:	f7ff fe7d 	bl	800a7a4 <_malloc_r>
 800aaaa:	4606      	mov	r6, r0
 800aaac:	b950      	cbnz	r0, 800aac4 <__ssputs_r+0x5c>
 800aaae:	230c      	movs	r3, #12
 800aab0:	f04f 30ff 	mov.w	r0, #4294967295
 800aab4:	f8ca 3000 	str.w	r3, [sl]
 800aab8:	89a3      	ldrh	r3, [r4, #12]
 800aaba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aabe:	81a3      	strh	r3, [r4, #12]
 800aac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aac4:	464a      	mov	r2, r9
 800aac6:	6921      	ldr	r1, [r4, #16]
 800aac8:	f7ff fe36 	bl	800a738 <memcpy>
 800aacc:	89a3      	ldrh	r3, [r4, #12]
 800aace:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad6:	81a3      	strh	r3, [r4, #12]
 800aad8:	6126      	str	r6, [r4, #16]
 800aada:	444e      	add	r6, r9
 800aadc:	6026      	str	r6, [r4, #0]
 800aade:	463e      	mov	r6, r7
 800aae0:	6165      	str	r5, [r4, #20]
 800aae2:	eba5 0509 	sub.w	r5, r5, r9
 800aae6:	60a5      	str	r5, [r4, #8]
 800aae8:	42be      	cmp	r6, r7
 800aaea:	d900      	bls.n	800aaee <__ssputs_r+0x86>
 800aaec:	463e      	mov	r6, r7
 800aaee:	4632      	mov	r2, r6
 800aaf0:	4641      	mov	r1, r8
 800aaf2:	6820      	ldr	r0, [r4, #0]
 800aaf4:	f000 fab8 	bl	800b068 <memmove>
 800aaf8:	68a3      	ldr	r3, [r4, #8]
 800aafa:	2000      	movs	r0, #0
 800aafc:	1b9b      	subs	r3, r3, r6
 800aafe:	60a3      	str	r3, [r4, #8]
 800ab00:	6823      	ldr	r3, [r4, #0]
 800ab02:	4433      	add	r3, r6
 800ab04:	6023      	str	r3, [r4, #0]
 800ab06:	e7db      	b.n	800aac0 <__ssputs_r+0x58>
 800ab08:	462a      	mov	r2, r5
 800ab0a:	f000 fac7 	bl	800b09c <_realloc_r>
 800ab0e:	4606      	mov	r6, r0
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d1e1      	bne.n	800aad8 <__ssputs_r+0x70>
 800ab14:	4650      	mov	r0, sl
 800ab16:	6921      	ldr	r1, [r4, #16]
 800ab18:	f7ff ff5e 	bl	800a9d8 <_free_r>
 800ab1c:	e7c7      	b.n	800aaae <__ssputs_r+0x46>
	...

0800ab20 <_svfiprintf_r>:
 800ab20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab24:	4698      	mov	r8, r3
 800ab26:	898b      	ldrh	r3, [r1, #12]
 800ab28:	4607      	mov	r7, r0
 800ab2a:	061b      	lsls	r3, r3, #24
 800ab2c:	460d      	mov	r5, r1
 800ab2e:	4614      	mov	r4, r2
 800ab30:	b09d      	sub	sp, #116	; 0x74
 800ab32:	d50e      	bpl.n	800ab52 <_svfiprintf_r+0x32>
 800ab34:	690b      	ldr	r3, [r1, #16]
 800ab36:	b963      	cbnz	r3, 800ab52 <_svfiprintf_r+0x32>
 800ab38:	2140      	movs	r1, #64	; 0x40
 800ab3a:	f7ff fe33 	bl	800a7a4 <_malloc_r>
 800ab3e:	6028      	str	r0, [r5, #0]
 800ab40:	6128      	str	r0, [r5, #16]
 800ab42:	b920      	cbnz	r0, 800ab4e <_svfiprintf_r+0x2e>
 800ab44:	230c      	movs	r3, #12
 800ab46:	603b      	str	r3, [r7, #0]
 800ab48:	f04f 30ff 	mov.w	r0, #4294967295
 800ab4c:	e0d1      	b.n	800acf2 <_svfiprintf_r+0x1d2>
 800ab4e:	2340      	movs	r3, #64	; 0x40
 800ab50:	616b      	str	r3, [r5, #20]
 800ab52:	2300      	movs	r3, #0
 800ab54:	9309      	str	r3, [sp, #36]	; 0x24
 800ab56:	2320      	movs	r3, #32
 800ab58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab5c:	2330      	movs	r3, #48	; 0x30
 800ab5e:	f04f 0901 	mov.w	r9, #1
 800ab62:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab66:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ad0c <_svfiprintf_r+0x1ec>
 800ab6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab6e:	4623      	mov	r3, r4
 800ab70:	469a      	mov	sl, r3
 800ab72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab76:	b10a      	cbz	r2, 800ab7c <_svfiprintf_r+0x5c>
 800ab78:	2a25      	cmp	r2, #37	; 0x25
 800ab7a:	d1f9      	bne.n	800ab70 <_svfiprintf_r+0x50>
 800ab7c:	ebba 0b04 	subs.w	fp, sl, r4
 800ab80:	d00b      	beq.n	800ab9a <_svfiprintf_r+0x7a>
 800ab82:	465b      	mov	r3, fp
 800ab84:	4622      	mov	r2, r4
 800ab86:	4629      	mov	r1, r5
 800ab88:	4638      	mov	r0, r7
 800ab8a:	f7ff ff6d 	bl	800aa68 <__ssputs_r>
 800ab8e:	3001      	adds	r0, #1
 800ab90:	f000 80aa 	beq.w	800ace8 <_svfiprintf_r+0x1c8>
 800ab94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab96:	445a      	add	r2, fp
 800ab98:	9209      	str	r2, [sp, #36]	; 0x24
 800ab9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 80a2 	beq.w	800ace8 <_svfiprintf_r+0x1c8>
 800aba4:	2300      	movs	r3, #0
 800aba6:	f04f 32ff 	mov.w	r2, #4294967295
 800abaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abae:	f10a 0a01 	add.w	sl, sl, #1
 800abb2:	9304      	str	r3, [sp, #16]
 800abb4:	9307      	str	r3, [sp, #28]
 800abb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abba:	931a      	str	r3, [sp, #104]	; 0x68
 800abbc:	4654      	mov	r4, sl
 800abbe:	2205      	movs	r2, #5
 800abc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abc4:	4851      	ldr	r0, [pc, #324]	; (800ad0c <_svfiprintf_r+0x1ec>)
 800abc6:	f000 fa41 	bl	800b04c <memchr>
 800abca:	9a04      	ldr	r2, [sp, #16]
 800abcc:	b9d8      	cbnz	r0, 800ac06 <_svfiprintf_r+0xe6>
 800abce:	06d0      	lsls	r0, r2, #27
 800abd0:	bf44      	itt	mi
 800abd2:	2320      	movmi	r3, #32
 800abd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abd8:	0711      	lsls	r1, r2, #28
 800abda:	bf44      	itt	mi
 800abdc:	232b      	movmi	r3, #43	; 0x2b
 800abde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800abe2:	f89a 3000 	ldrb.w	r3, [sl]
 800abe6:	2b2a      	cmp	r3, #42	; 0x2a
 800abe8:	d015      	beq.n	800ac16 <_svfiprintf_r+0xf6>
 800abea:	4654      	mov	r4, sl
 800abec:	2000      	movs	r0, #0
 800abee:	f04f 0c0a 	mov.w	ip, #10
 800abf2:	9a07      	ldr	r2, [sp, #28]
 800abf4:	4621      	mov	r1, r4
 800abf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abfa:	3b30      	subs	r3, #48	; 0x30
 800abfc:	2b09      	cmp	r3, #9
 800abfe:	d94e      	bls.n	800ac9e <_svfiprintf_r+0x17e>
 800ac00:	b1b0      	cbz	r0, 800ac30 <_svfiprintf_r+0x110>
 800ac02:	9207      	str	r2, [sp, #28]
 800ac04:	e014      	b.n	800ac30 <_svfiprintf_r+0x110>
 800ac06:	eba0 0308 	sub.w	r3, r0, r8
 800ac0a:	fa09 f303 	lsl.w	r3, r9, r3
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	46a2      	mov	sl, r4
 800ac12:	9304      	str	r3, [sp, #16]
 800ac14:	e7d2      	b.n	800abbc <_svfiprintf_r+0x9c>
 800ac16:	9b03      	ldr	r3, [sp, #12]
 800ac18:	1d19      	adds	r1, r3, #4
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	9103      	str	r1, [sp, #12]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	bfbb      	ittet	lt
 800ac22:	425b      	neglt	r3, r3
 800ac24:	f042 0202 	orrlt.w	r2, r2, #2
 800ac28:	9307      	strge	r3, [sp, #28]
 800ac2a:	9307      	strlt	r3, [sp, #28]
 800ac2c:	bfb8      	it	lt
 800ac2e:	9204      	strlt	r2, [sp, #16]
 800ac30:	7823      	ldrb	r3, [r4, #0]
 800ac32:	2b2e      	cmp	r3, #46	; 0x2e
 800ac34:	d10c      	bne.n	800ac50 <_svfiprintf_r+0x130>
 800ac36:	7863      	ldrb	r3, [r4, #1]
 800ac38:	2b2a      	cmp	r3, #42	; 0x2a
 800ac3a:	d135      	bne.n	800aca8 <_svfiprintf_r+0x188>
 800ac3c:	9b03      	ldr	r3, [sp, #12]
 800ac3e:	3402      	adds	r4, #2
 800ac40:	1d1a      	adds	r2, r3, #4
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	9203      	str	r2, [sp, #12]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	bfb8      	it	lt
 800ac4a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac4e:	9305      	str	r3, [sp, #20]
 800ac50:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800ad10 <_svfiprintf_r+0x1f0>
 800ac54:	2203      	movs	r2, #3
 800ac56:	4650      	mov	r0, sl
 800ac58:	7821      	ldrb	r1, [r4, #0]
 800ac5a:	f000 f9f7 	bl	800b04c <memchr>
 800ac5e:	b140      	cbz	r0, 800ac72 <_svfiprintf_r+0x152>
 800ac60:	2340      	movs	r3, #64	; 0x40
 800ac62:	eba0 000a 	sub.w	r0, r0, sl
 800ac66:	fa03 f000 	lsl.w	r0, r3, r0
 800ac6a:	9b04      	ldr	r3, [sp, #16]
 800ac6c:	3401      	adds	r4, #1
 800ac6e:	4303      	orrs	r3, r0
 800ac70:	9304      	str	r3, [sp, #16]
 800ac72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac76:	2206      	movs	r2, #6
 800ac78:	4826      	ldr	r0, [pc, #152]	; (800ad14 <_svfiprintf_r+0x1f4>)
 800ac7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac7e:	f000 f9e5 	bl	800b04c <memchr>
 800ac82:	2800      	cmp	r0, #0
 800ac84:	d038      	beq.n	800acf8 <_svfiprintf_r+0x1d8>
 800ac86:	4b24      	ldr	r3, [pc, #144]	; (800ad18 <_svfiprintf_r+0x1f8>)
 800ac88:	bb1b      	cbnz	r3, 800acd2 <_svfiprintf_r+0x1b2>
 800ac8a:	9b03      	ldr	r3, [sp, #12]
 800ac8c:	3307      	adds	r3, #7
 800ac8e:	f023 0307 	bic.w	r3, r3, #7
 800ac92:	3308      	adds	r3, #8
 800ac94:	9303      	str	r3, [sp, #12]
 800ac96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac98:	4433      	add	r3, r6
 800ac9a:	9309      	str	r3, [sp, #36]	; 0x24
 800ac9c:	e767      	b.n	800ab6e <_svfiprintf_r+0x4e>
 800ac9e:	460c      	mov	r4, r1
 800aca0:	2001      	movs	r0, #1
 800aca2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aca6:	e7a5      	b.n	800abf4 <_svfiprintf_r+0xd4>
 800aca8:	2300      	movs	r3, #0
 800acaa:	f04f 0c0a 	mov.w	ip, #10
 800acae:	4619      	mov	r1, r3
 800acb0:	3401      	adds	r4, #1
 800acb2:	9305      	str	r3, [sp, #20]
 800acb4:	4620      	mov	r0, r4
 800acb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acba:	3a30      	subs	r2, #48	; 0x30
 800acbc:	2a09      	cmp	r2, #9
 800acbe:	d903      	bls.n	800acc8 <_svfiprintf_r+0x1a8>
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d0c5      	beq.n	800ac50 <_svfiprintf_r+0x130>
 800acc4:	9105      	str	r1, [sp, #20]
 800acc6:	e7c3      	b.n	800ac50 <_svfiprintf_r+0x130>
 800acc8:	4604      	mov	r4, r0
 800acca:	2301      	movs	r3, #1
 800accc:	fb0c 2101 	mla	r1, ip, r1, r2
 800acd0:	e7f0      	b.n	800acb4 <_svfiprintf_r+0x194>
 800acd2:	ab03      	add	r3, sp, #12
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	462a      	mov	r2, r5
 800acd8:	4638      	mov	r0, r7
 800acda:	4b10      	ldr	r3, [pc, #64]	; (800ad1c <_svfiprintf_r+0x1fc>)
 800acdc:	a904      	add	r1, sp, #16
 800acde:	f3af 8000 	nop.w
 800ace2:	1c42      	adds	r2, r0, #1
 800ace4:	4606      	mov	r6, r0
 800ace6:	d1d6      	bne.n	800ac96 <_svfiprintf_r+0x176>
 800ace8:	89ab      	ldrh	r3, [r5, #12]
 800acea:	065b      	lsls	r3, r3, #25
 800acec:	f53f af2c 	bmi.w	800ab48 <_svfiprintf_r+0x28>
 800acf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800acf2:	b01d      	add	sp, #116	; 0x74
 800acf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf8:	ab03      	add	r3, sp, #12
 800acfa:	9300      	str	r3, [sp, #0]
 800acfc:	462a      	mov	r2, r5
 800acfe:	4638      	mov	r0, r7
 800ad00:	4b06      	ldr	r3, [pc, #24]	; (800ad1c <_svfiprintf_r+0x1fc>)
 800ad02:	a904      	add	r1, sp, #16
 800ad04:	f000 f87c 	bl	800ae00 <_printf_i>
 800ad08:	e7eb      	b.n	800ace2 <_svfiprintf_r+0x1c2>
 800ad0a:	bf00      	nop
 800ad0c:	0800b6ec 	.word	0x0800b6ec
 800ad10:	0800b6f2 	.word	0x0800b6f2
 800ad14:	0800b6f6 	.word	0x0800b6f6
 800ad18:	00000000 	.word	0x00000000
 800ad1c:	0800aa69 	.word	0x0800aa69

0800ad20 <_printf_common>:
 800ad20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad24:	4616      	mov	r6, r2
 800ad26:	4699      	mov	r9, r3
 800ad28:	688a      	ldr	r2, [r1, #8]
 800ad2a:	690b      	ldr	r3, [r1, #16]
 800ad2c:	4607      	mov	r7, r0
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	bfb8      	it	lt
 800ad32:	4613      	movlt	r3, r2
 800ad34:	6033      	str	r3, [r6, #0]
 800ad36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ad3a:	460c      	mov	r4, r1
 800ad3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ad40:	b10a      	cbz	r2, 800ad46 <_printf_common+0x26>
 800ad42:	3301      	adds	r3, #1
 800ad44:	6033      	str	r3, [r6, #0]
 800ad46:	6823      	ldr	r3, [r4, #0]
 800ad48:	0699      	lsls	r1, r3, #26
 800ad4a:	bf42      	ittt	mi
 800ad4c:	6833      	ldrmi	r3, [r6, #0]
 800ad4e:	3302      	addmi	r3, #2
 800ad50:	6033      	strmi	r3, [r6, #0]
 800ad52:	6825      	ldr	r5, [r4, #0]
 800ad54:	f015 0506 	ands.w	r5, r5, #6
 800ad58:	d106      	bne.n	800ad68 <_printf_common+0x48>
 800ad5a:	f104 0a19 	add.w	sl, r4, #25
 800ad5e:	68e3      	ldr	r3, [r4, #12]
 800ad60:	6832      	ldr	r2, [r6, #0]
 800ad62:	1a9b      	subs	r3, r3, r2
 800ad64:	42ab      	cmp	r3, r5
 800ad66:	dc28      	bgt.n	800adba <_printf_common+0x9a>
 800ad68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ad6c:	1e13      	subs	r3, r2, #0
 800ad6e:	6822      	ldr	r2, [r4, #0]
 800ad70:	bf18      	it	ne
 800ad72:	2301      	movne	r3, #1
 800ad74:	0692      	lsls	r2, r2, #26
 800ad76:	d42d      	bmi.n	800add4 <_printf_common+0xb4>
 800ad78:	4649      	mov	r1, r9
 800ad7a:	4638      	mov	r0, r7
 800ad7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad80:	47c0      	blx	r8
 800ad82:	3001      	adds	r0, #1
 800ad84:	d020      	beq.n	800adc8 <_printf_common+0xa8>
 800ad86:	6823      	ldr	r3, [r4, #0]
 800ad88:	68e5      	ldr	r5, [r4, #12]
 800ad8a:	f003 0306 	and.w	r3, r3, #6
 800ad8e:	2b04      	cmp	r3, #4
 800ad90:	bf18      	it	ne
 800ad92:	2500      	movne	r5, #0
 800ad94:	6832      	ldr	r2, [r6, #0]
 800ad96:	f04f 0600 	mov.w	r6, #0
 800ad9a:	68a3      	ldr	r3, [r4, #8]
 800ad9c:	bf08      	it	eq
 800ad9e:	1aad      	subeq	r5, r5, r2
 800ada0:	6922      	ldr	r2, [r4, #16]
 800ada2:	bf08      	it	eq
 800ada4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ada8:	4293      	cmp	r3, r2
 800adaa:	bfc4      	itt	gt
 800adac:	1a9b      	subgt	r3, r3, r2
 800adae:	18ed      	addgt	r5, r5, r3
 800adb0:	341a      	adds	r4, #26
 800adb2:	42b5      	cmp	r5, r6
 800adb4:	d11a      	bne.n	800adec <_printf_common+0xcc>
 800adb6:	2000      	movs	r0, #0
 800adb8:	e008      	b.n	800adcc <_printf_common+0xac>
 800adba:	2301      	movs	r3, #1
 800adbc:	4652      	mov	r2, sl
 800adbe:	4649      	mov	r1, r9
 800adc0:	4638      	mov	r0, r7
 800adc2:	47c0      	blx	r8
 800adc4:	3001      	adds	r0, #1
 800adc6:	d103      	bne.n	800add0 <_printf_common+0xb0>
 800adc8:	f04f 30ff 	mov.w	r0, #4294967295
 800adcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800add0:	3501      	adds	r5, #1
 800add2:	e7c4      	b.n	800ad5e <_printf_common+0x3e>
 800add4:	2030      	movs	r0, #48	; 0x30
 800add6:	18e1      	adds	r1, r4, r3
 800add8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800addc:	1c5a      	adds	r2, r3, #1
 800adde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ade2:	4422      	add	r2, r4
 800ade4:	3302      	adds	r3, #2
 800ade6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800adea:	e7c5      	b.n	800ad78 <_printf_common+0x58>
 800adec:	2301      	movs	r3, #1
 800adee:	4622      	mov	r2, r4
 800adf0:	4649      	mov	r1, r9
 800adf2:	4638      	mov	r0, r7
 800adf4:	47c0      	blx	r8
 800adf6:	3001      	adds	r0, #1
 800adf8:	d0e6      	beq.n	800adc8 <_printf_common+0xa8>
 800adfa:	3601      	adds	r6, #1
 800adfc:	e7d9      	b.n	800adb2 <_printf_common+0x92>
	...

0800ae00 <_printf_i>:
 800ae00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ae04:	7e0f      	ldrb	r7, [r1, #24]
 800ae06:	4691      	mov	r9, r2
 800ae08:	2f78      	cmp	r7, #120	; 0x78
 800ae0a:	4680      	mov	r8, r0
 800ae0c:	460c      	mov	r4, r1
 800ae0e:	469a      	mov	sl, r3
 800ae10:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ae12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ae16:	d807      	bhi.n	800ae28 <_printf_i+0x28>
 800ae18:	2f62      	cmp	r7, #98	; 0x62
 800ae1a:	d80a      	bhi.n	800ae32 <_printf_i+0x32>
 800ae1c:	2f00      	cmp	r7, #0
 800ae1e:	f000 80d9 	beq.w	800afd4 <_printf_i+0x1d4>
 800ae22:	2f58      	cmp	r7, #88	; 0x58
 800ae24:	f000 80a4 	beq.w	800af70 <_printf_i+0x170>
 800ae28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ae30:	e03a      	b.n	800aea8 <_printf_i+0xa8>
 800ae32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ae36:	2b15      	cmp	r3, #21
 800ae38:	d8f6      	bhi.n	800ae28 <_printf_i+0x28>
 800ae3a:	a101      	add	r1, pc, #4	; (adr r1, 800ae40 <_printf_i+0x40>)
 800ae3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ae40:	0800ae99 	.word	0x0800ae99
 800ae44:	0800aead 	.word	0x0800aead
 800ae48:	0800ae29 	.word	0x0800ae29
 800ae4c:	0800ae29 	.word	0x0800ae29
 800ae50:	0800ae29 	.word	0x0800ae29
 800ae54:	0800ae29 	.word	0x0800ae29
 800ae58:	0800aead 	.word	0x0800aead
 800ae5c:	0800ae29 	.word	0x0800ae29
 800ae60:	0800ae29 	.word	0x0800ae29
 800ae64:	0800ae29 	.word	0x0800ae29
 800ae68:	0800ae29 	.word	0x0800ae29
 800ae6c:	0800afbb 	.word	0x0800afbb
 800ae70:	0800aedd 	.word	0x0800aedd
 800ae74:	0800af9d 	.word	0x0800af9d
 800ae78:	0800ae29 	.word	0x0800ae29
 800ae7c:	0800ae29 	.word	0x0800ae29
 800ae80:	0800afdd 	.word	0x0800afdd
 800ae84:	0800ae29 	.word	0x0800ae29
 800ae88:	0800aedd 	.word	0x0800aedd
 800ae8c:	0800ae29 	.word	0x0800ae29
 800ae90:	0800ae29 	.word	0x0800ae29
 800ae94:	0800afa5 	.word	0x0800afa5
 800ae98:	682b      	ldr	r3, [r5, #0]
 800ae9a:	1d1a      	adds	r2, r3, #4
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	602a      	str	r2, [r5, #0]
 800aea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e0a4      	b.n	800aff6 <_printf_i+0x1f6>
 800aeac:	6820      	ldr	r0, [r4, #0]
 800aeae:	6829      	ldr	r1, [r5, #0]
 800aeb0:	0606      	lsls	r6, r0, #24
 800aeb2:	f101 0304 	add.w	r3, r1, #4
 800aeb6:	d50a      	bpl.n	800aece <_printf_i+0xce>
 800aeb8:	680e      	ldr	r6, [r1, #0]
 800aeba:	602b      	str	r3, [r5, #0]
 800aebc:	2e00      	cmp	r6, #0
 800aebe:	da03      	bge.n	800aec8 <_printf_i+0xc8>
 800aec0:	232d      	movs	r3, #45	; 0x2d
 800aec2:	4276      	negs	r6, r6
 800aec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aec8:	230a      	movs	r3, #10
 800aeca:	485e      	ldr	r0, [pc, #376]	; (800b044 <_printf_i+0x244>)
 800aecc:	e019      	b.n	800af02 <_printf_i+0x102>
 800aece:	680e      	ldr	r6, [r1, #0]
 800aed0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aed4:	602b      	str	r3, [r5, #0]
 800aed6:	bf18      	it	ne
 800aed8:	b236      	sxthne	r6, r6
 800aeda:	e7ef      	b.n	800aebc <_printf_i+0xbc>
 800aedc:	682b      	ldr	r3, [r5, #0]
 800aede:	6820      	ldr	r0, [r4, #0]
 800aee0:	1d19      	adds	r1, r3, #4
 800aee2:	6029      	str	r1, [r5, #0]
 800aee4:	0601      	lsls	r1, r0, #24
 800aee6:	d501      	bpl.n	800aeec <_printf_i+0xec>
 800aee8:	681e      	ldr	r6, [r3, #0]
 800aeea:	e002      	b.n	800aef2 <_printf_i+0xf2>
 800aeec:	0646      	lsls	r6, r0, #25
 800aeee:	d5fb      	bpl.n	800aee8 <_printf_i+0xe8>
 800aef0:	881e      	ldrh	r6, [r3, #0]
 800aef2:	2f6f      	cmp	r7, #111	; 0x6f
 800aef4:	bf0c      	ite	eq
 800aef6:	2308      	moveq	r3, #8
 800aef8:	230a      	movne	r3, #10
 800aefa:	4852      	ldr	r0, [pc, #328]	; (800b044 <_printf_i+0x244>)
 800aefc:	2100      	movs	r1, #0
 800aefe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800af02:	6865      	ldr	r5, [r4, #4]
 800af04:	2d00      	cmp	r5, #0
 800af06:	bfa8      	it	ge
 800af08:	6821      	ldrge	r1, [r4, #0]
 800af0a:	60a5      	str	r5, [r4, #8]
 800af0c:	bfa4      	itt	ge
 800af0e:	f021 0104 	bicge.w	r1, r1, #4
 800af12:	6021      	strge	r1, [r4, #0]
 800af14:	b90e      	cbnz	r6, 800af1a <_printf_i+0x11a>
 800af16:	2d00      	cmp	r5, #0
 800af18:	d04d      	beq.n	800afb6 <_printf_i+0x1b6>
 800af1a:	4615      	mov	r5, r2
 800af1c:	fbb6 f1f3 	udiv	r1, r6, r3
 800af20:	fb03 6711 	mls	r7, r3, r1, r6
 800af24:	5dc7      	ldrb	r7, [r0, r7]
 800af26:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800af2a:	4637      	mov	r7, r6
 800af2c:	42bb      	cmp	r3, r7
 800af2e:	460e      	mov	r6, r1
 800af30:	d9f4      	bls.n	800af1c <_printf_i+0x11c>
 800af32:	2b08      	cmp	r3, #8
 800af34:	d10b      	bne.n	800af4e <_printf_i+0x14e>
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	07de      	lsls	r6, r3, #31
 800af3a:	d508      	bpl.n	800af4e <_printf_i+0x14e>
 800af3c:	6923      	ldr	r3, [r4, #16]
 800af3e:	6861      	ldr	r1, [r4, #4]
 800af40:	4299      	cmp	r1, r3
 800af42:	bfde      	ittt	le
 800af44:	2330      	movle	r3, #48	; 0x30
 800af46:	f805 3c01 	strble.w	r3, [r5, #-1]
 800af4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800af4e:	1b52      	subs	r2, r2, r5
 800af50:	6122      	str	r2, [r4, #16]
 800af52:	464b      	mov	r3, r9
 800af54:	4621      	mov	r1, r4
 800af56:	4640      	mov	r0, r8
 800af58:	f8cd a000 	str.w	sl, [sp]
 800af5c:	aa03      	add	r2, sp, #12
 800af5e:	f7ff fedf 	bl	800ad20 <_printf_common>
 800af62:	3001      	adds	r0, #1
 800af64:	d14c      	bne.n	800b000 <_printf_i+0x200>
 800af66:	f04f 30ff 	mov.w	r0, #4294967295
 800af6a:	b004      	add	sp, #16
 800af6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af70:	4834      	ldr	r0, [pc, #208]	; (800b044 <_printf_i+0x244>)
 800af72:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800af76:	6829      	ldr	r1, [r5, #0]
 800af78:	6823      	ldr	r3, [r4, #0]
 800af7a:	f851 6b04 	ldr.w	r6, [r1], #4
 800af7e:	6029      	str	r1, [r5, #0]
 800af80:	061d      	lsls	r5, r3, #24
 800af82:	d514      	bpl.n	800afae <_printf_i+0x1ae>
 800af84:	07df      	lsls	r7, r3, #31
 800af86:	bf44      	itt	mi
 800af88:	f043 0320 	orrmi.w	r3, r3, #32
 800af8c:	6023      	strmi	r3, [r4, #0]
 800af8e:	b91e      	cbnz	r6, 800af98 <_printf_i+0x198>
 800af90:	6823      	ldr	r3, [r4, #0]
 800af92:	f023 0320 	bic.w	r3, r3, #32
 800af96:	6023      	str	r3, [r4, #0]
 800af98:	2310      	movs	r3, #16
 800af9a:	e7af      	b.n	800aefc <_printf_i+0xfc>
 800af9c:	6823      	ldr	r3, [r4, #0]
 800af9e:	f043 0320 	orr.w	r3, r3, #32
 800afa2:	6023      	str	r3, [r4, #0]
 800afa4:	2378      	movs	r3, #120	; 0x78
 800afa6:	4828      	ldr	r0, [pc, #160]	; (800b048 <_printf_i+0x248>)
 800afa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800afac:	e7e3      	b.n	800af76 <_printf_i+0x176>
 800afae:	0659      	lsls	r1, r3, #25
 800afb0:	bf48      	it	mi
 800afb2:	b2b6      	uxthmi	r6, r6
 800afb4:	e7e6      	b.n	800af84 <_printf_i+0x184>
 800afb6:	4615      	mov	r5, r2
 800afb8:	e7bb      	b.n	800af32 <_printf_i+0x132>
 800afba:	682b      	ldr	r3, [r5, #0]
 800afbc:	6826      	ldr	r6, [r4, #0]
 800afbe:	1d18      	adds	r0, r3, #4
 800afc0:	6961      	ldr	r1, [r4, #20]
 800afc2:	6028      	str	r0, [r5, #0]
 800afc4:	0635      	lsls	r5, r6, #24
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	d501      	bpl.n	800afce <_printf_i+0x1ce>
 800afca:	6019      	str	r1, [r3, #0]
 800afcc:	e002      	b.n	800afd4 <_printf_i+0x1d4>
 800afce:	0670      	lsls	r0, r6, #25
 800afd0:	d5fb      	bpl.n	800afca <_printf_i+0x1ca>
 800afd2:	8019      	strh	r1, [r3, #0]
 800afd4:	2300      	movs	r3, #0
 800afd6:	4615      	mov	r5, r2
 800afd8:	6123      	str	r3, [r4, #16]
 800afda:	e7ba      	b.n	800af52 <_printf_i+0x152>
 800afdc:	682b      	ldr	r3, [r5, #0]
 800afde:	2100      	movs	r1, #0
 800afe0:	1d1a      	adds	r2, r3, #4
 800afe2:	602a      	str	r2, [r5, #0]
 800afe4:	681d      	ldr	r5, [r3, #0]
 800afe6:	6862      	ldr	r2, [r4, #4]
 800afe8:	4628      	mov	r0, r5
 800afea:	f000 f82f 	bl	800b04c <memchr>
 800afee:	b108      	cbz	r0, 800aff4 <_printf_i+0x1f4>
 800aff0:	1b40      	subs	r0, r0, r5
 800aff2:	6060      	str	r0, [r4, #4]
 800aff4:	6863      	ldr	r3, [r4, #4]
 800aff6:	6123      	str	r3, [r4, #16]
 800aff8:	2300      	movs	r3, #0
 800affa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800affe:	e7a8      	b.n	800af52 <_printf_i+0x152>
 800b000:	462a      	mov	r2, r5
 800b002:	4649      	mov	r1, r9
 800b004:	4640      	mov	r0, r8
 800b006:	6923      	ldr	r3, [r4, #16]
 800b008:	47d0      	blx	sl
 800b00a:	3001      	adds	r0, #1
 800b00c:	d0ab      	beq.n	800af66 <_printf_i+0x166>
 800b00e:	6823      	ldr	r3, [r4, #0]
 800b010:	079b      	lsls	r3, r3, #30
 800b012:	d413      	bmi.n	800b03c <_printf_i+0x23c>
 800b014:	68e0      	ldr	r0, [r4, #12]
 800b016:	9b03      	ldr	r3, [sp, #12]
 800b018:	4298      	cmp	r0, r3
 800b01a:	bfb8      	it	lt
 800b01c:	4618      	movlt	r0, r3
 800b01e:	e7a4      	b.n	800af6a <_printf_i+0x16a>
 800b020:	2301      	movs	r3, #1
 800b022:	4632      	mov	r2, r6
 800b024:	4649      	mov	r1, r9
 800b026:	4640      	mov	r0, r8
 800b028:	47d0      	blx	sl
 800b02a:	3001      	adds	r0, #1
 800b02c:	d09b      	beq.n	800af66 <_printf_i+0x166>
 800b02e:	3501      	adds	r5, #1
 800b030:	68e3      	ldr	r3, [r4, #12]
 800b032:	9903      	ldr	r1, [sp, #12]
 800b034:	1a5b      	subs	r3, r3, r1
 800b036:	42ab      	cmp	r3, r5
 800b038:	dcf2      	bgt.n	800b020 <_printf_i+0x220>
 800b03a:	e7eb      	b.n	800b014 <_printf_i+0x214>
 800b03c:	2500      	movs	r5, #0
 800b03e:	f104 0619 	add.w	r6, r4, #25
 800b042:	e7f5      	b.n	800b030 <_printf_i+0x230>
 800b044:	0800b6fd 	.word	0x0800b6fd
 800b048:	0800b70e 	.word	0x0800b70e

0800b04c <memchr>:
 800b04c:	4603      	mov	r3, r0
 800b04e:	b510      	push	{r4, lr}
 800b050:	b2c9      	uxtb	r1, r1
 800b052:	4402      	add	r2, r0
 800b054:	4293      	cmp	r3, r2
 800b056:	4618      	mov	r0, r3
 800b058:	d101      	bne.n	800b05e <memchr+0x12>
 800b05a:	2000      	movs	r0, #0
 800b05c:	e003      	b.n	800b066 <memchr+0x1a>
 800b05e:	7804      	ldrb	r4, [r0, #0]
 800b060:	3301      	adds	r3, #1
 800b062:	428c      	cmp	r4, r1
 800b064:	d1f6      	bne.n	800b054 <memchr+0x8>
 800b066:	bd10      	pop	{r4, pc}

0800b068 <memmove>:
 800b068:	4288      	cmp	r0, r1
 800b06a:	b510      	push	{r4, lr}
 800b06c:	eb01 0402 	add.w	r4, r1, r2
 800b070:	d902      	bls.n	800b078 <memmove+0x10>
 800b072:	4284      	cmp	r4, r0
 800b074:	4623      	mov	r3, r4
 800b076:	d807      	bhi.n	800b088 <memmove+0x20>
 800b078:	1e43      	subs	r3, r0, #1
 800b07a:	42a1      	cmp	r1, r4
 800b07c:	d008      	beq.n	800b090 <memmove+0x28>
 800b07e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b082:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b086:	e7f8      	b.n	800b07a <memmove+0x12>
 800b088:	4601      	mov	r1, r0
 800b08a:	4402      	add	r2, r0
 800b08c:	428a      	cmp	r2, r1
 800b08e:	d100      	bne.n	800b092 <memmove+0x2a>
 800b090:	bd10      	pop	{r4, pc}
 800b092:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b096:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b09a:	e7f7      	b.n	800b08c <memmove+0x24>

0800b09c <_realloc_r>:
 800b09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a0:	4680      	mov	r8, r0
 800b0a2:	4614      	mov	r4, r2
 800b0a4:	460e      	mov	r6, r1
 800b0a6:	b921      	cbnz	r1, 800b0b2 <_realloc_r+0x16>
 800b0a8:	4611      	mov	r1, r2
 800b0aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0ae:	f7ff bb79 	b.w	800a7a4 <_malloc_r>
 800b0b2:	b92a      	cbnz	r2, 800b0c0 <_realloc_r+0x24>
 800b0b4:	f7ff fc90 	bl	800a9d8 <_free_r>
 800b0b8:	4625      	mov	r5, r4
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0c0:	f000 f81b 	bl	800b0fa <_malloc_usable_size_r>
 800b0c4:	4284      	cmp	r4, r0
 800b0c6:	4607      	mov	r7, r0
 800b0c8:	d802      	bhi.n	800b0d0 <_realloc_r+0x34>
 800b0ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b0ce:	d812      	bhi.n	800b0f6 <_realloc_r+0x5a>
 800b0d0:	4621      	mov	r1, r4
 800b0d2:	4640      	mov	r0, r8
 800b0d4:	f7ff fb66 	bl	800a7a4 <_malloc_r>
 800b0d8:	4605      	mov	r5, r0
 800b0da:	2800      	cmp	r0, #0
 800b0dc:	d0ed      	beq.n	800b0ba <_realloc_r+0x1e>
 800b0de:	42bc      	cmp	r4, r7
 800b0e0:	4622      	mov	r2, r4
 800b0e2:	4631      	mov	r1, r6
 800b0e4:	bf28      	it	cs
 800b0e6:	463a      	movcs	r2, r7
 800b0e8:	f7ff fb26 	bl	800a738 <memcpy>
 800b0ec:	4631      	mov	r1, r6
 800b0ee:	4640      	mov	r0, r8
 800b0f0:	f7ff fc72 	bl	800a9d8 <_free_r>
 800b0f4:	e7e1      	b.n	800b0ba <_realloc_r+0x1e>
 800b0f6:	4635      	mov	r5, r6
 800b0f8:	e7df      	b.n	800b0ba <_realloc_r+0x1e>

0800b0fa <_malloc_usable_size_r>:
 800b0fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0fe:	1f18      	subs	r0, r3, #4
 800b100:	2b00      	cmp	r3, #0
 800b102:	bfbc      	itt	lt
 800b104:	580b      	ldrlt	r3, [r1, r0]
 800b106:	18c0      	addlt	r0, r0, r3
 800b108:	4770      	bx	lr
	...

0800b10c <_init>:
 800b10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b10e:	bf00      	nop
 800b110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b112:	bc08      	pop	{r3}
 800b114:	469e      	mov	lr, r3
 800b116:	4770      	bx	lr

0800b118 <_fini>:
 800b118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11a:	bf00      	nop
 800b11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b11e:	bc08      	pop	{r3}
 800b120:	469e      	mov	lr, r3
 800b122:	4770      	bx	lr
