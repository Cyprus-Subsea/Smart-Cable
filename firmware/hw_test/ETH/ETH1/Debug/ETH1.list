
ETH1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ab4  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000027dc  08014ca4  08014ca4  00024ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017480  08017480  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08017480  08017480  00027480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017488  08017488  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017488  08017488  00027488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801748c  0801748c  0002748c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08017490  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000acb0  20000080  08017510  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ad30  08017510  0003ad30  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003fd48  00000000  00000000  000300a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007557  00000000  00000000  0006fdf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000020e8  00000000  00000000  00077348  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ed0  00000000  00000000  00079430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00010c60  00000000  00000000  0007b300  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002af8e  00000000  00000000  0008bf60  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dd06f  00000000  00000000  000b6eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00193f5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c80  00000000  00000000  00193fd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000080 	.word	0x20000080
 800020c:	00000000 	.word	0x00000000
 8000210:	08014c8c 	.word	0x08014c8c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000084 	.word	0x20000084
 800022c:	08014c8c 	.word	0x08014c8c

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	468c      	mov	ip, r1
 8000266:	4604      	mov	r4, r0
 8000268:	9e08      	ldr	r6, [sp, #32]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14b      	bne.n	8000306 <__udivmoddi4+0xa6>
 800026e:	428a      	cmp	r2, r1
 8000270:	4615      	mov	r5, r2
 8000272:	d967      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0720 	rsb	r7, r2, #32
 800027e:	fa01 f302 	lsl.w	r3, r1, r2
 8000282:	fa20 f707 	lsr.w	r7, r0, r7
 8000286:	4095      	lsls	r5, r2
 8000288:	ea47 0c03 	orr.w	ip, r7, r3
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000292:	fbbc f7fe 	udiv	r7, ip, lr
 8000296:	fa1f f885 	uxth.w	r8, r5
 800029a:	fb0e c317 	mls	r3, lr, r7, ip
 800029e:	fb07 f908 	mul.w	r9, r7, r8
 80002a2:	0c21      	lsrs	r1, r4, #16
 80002a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a8:	4599      	cmp	r9, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18eb      	adds	r3, r5, r3
 80002ae:	f107 31ff 	add.w	r1, r7, #4294967295
 80002b2:	f080 811c 	bcs.w	80004ee <__udivmoddi4+0x28e>
 80002b6:	4599      	cmp	r9, r3
 80002b8:	f240 8119 	bls.w	80004ee <__udivmoddi4+0x28e>
 80002bc:	3f02      	subs	r7, #2
 80002be:	442b      	add	r3, r5
 80002c0:	eba3 0309 	sub.w	r3, r3, r9
 80002c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002cc:	fb00 f108 	mul.w	r1, r0, r8
 80002d0:	b2a4      	uxth	r4, r4
 80002d2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d6:	42a1      	cmp	r1, r4
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0x8e>
 80002da:	192c      	adds	r4, r5, r4
 80002dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e0:	f080 8107 	bcs.w	80004f2 <__udivmoddi4+0x292>
 80002e4:	42a1      	cmp	r1, r4
 80002e6:	f240 8104 	bls.w	80004f2 <__udivmoddi4+0x292>
 80002ea:	3802      	subs	r0, #2
 80002ec:	442c      	add	r4, r5
 80002ee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f2:	2700      	movs	r7, #0
 80002f4:	1a64      	subs	r4, r4, r1
 80002f6:	b11e      	cbz	r6, 8000300 <__udivmoddi4+0xa0>
 80002f8:	2300      	movs	r3, #0
 80002fa:	40d4      	lsrs	r4, r2
 80002fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d909      	bls.n	800031e <__udivmoddi4+0xbe>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80ec 	beq.w	80004e8 <__udivmoddi4+0x288>
 8000310:	2700      	movs	r7, #0
 8000312:	e9c6 0100 	strd	r0, r1, [r6]
 8000316:	4638      	mov	r0, r7
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	fab3 f783 	clz	r7, r3
 8000322:	2f00      	cmp	r7, #0
 8000324:	d148      	bne.n	80003b8 <__udivmoddi4+0x158>
 8000326:	428b      	cmp	r3, r1
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xd0>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 80fb 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb61 0303 	sbc.w	r3, r1, r3
 8000336:	2001      	movs	r0, #1
 8000338:	469c      	mov	ip, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e0      	beq.n	8000300 <__udivmoddi4+0xa0>
 800033e:	e9c6 4c00 	strd	r4, ip, [r6]
 8000342:	e7dd      	b.n	8000300 <__udivmoddi4+0xa0>
 8000344:	b902      	cbnz	r2, 8000348 <__udivmoddi4+0xe8>
 8000346:	deff      	udf	#255	; 0xff
 8000348:	fab2 f282 	clz	r2, r2
 800034c:	2a00      	cmp	r2, #0
 800034e:	f040 808f 	bne.w	8000470 <__udivmoddi4+0x210>
 8000352:	2701      	movs	r7, #1
 8000354:	1b49      	subs	r1, r1, r5
 8000356:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800035a:	fa1f f985 	uxth.w	r9, r5
 800035e:	fbb1 fef8 	udiv	lr, r1, r8
 8000362:	fb08 111e 	mls	r1, r8, lr, r1
 8000366:	fb09 f00e 	mul.w	r0, r9, lr
 800036a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800036e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000372:	4298      	cmp	r0, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x126>
 8000376:	18eb      	adds	r3, r5, r3
 8000378:	f10e 31ff 	add.w	r1, lr, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x124>
 800037e:	4298      	cmp	r0, r3
 8000380:	f200 80cd 	bhi.w	800051e <__udivmoddi4+0x2be>
 8000384:	468e      	mov	lr, r1
 8000386:	1a1b      	subs	r3, r3, r0
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	fb09 f900 	mul.w	r9, r9, r0
 8000394:	b2a4      	uxth	r4, r4
 8000396:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800039a:	45a1      	cmp	r9, r4
 800039c:	d907      	bls.n	80003ae <__udivmoddi4+0x14e>
 800039e:	192c      	adds	r4, r5, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x14c>
 80003a6:	45a1      	cmp	r9, r4
 80003a8:	f200 80b6 	bhi.w	8000518 <__udivmoddi4+0x2b8>
 80003ac:	4618      	mov	r0, r3
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003b6:	e79e      	b.n	80002f6 <__udivmoddi4+0x96>
 80003b8:	f1c7 0520 	rsb	r5, r7, #32
 80003bc:	40bb      	lsls	r3, r7
 80003be:	fa22 fc05 	lsr.w	ip, r2, r5
 80003c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c6:	fa21 f405 	lsr.w	r4, r1, r5
 80003ca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003ce:	fbb4 f9fe 	udiv	r9, r4, lr
 80003d2:	fa1f f88c 	uxth.w	r8, ip
 80003d6:	fb0e 4419 	mls	r4, lr, r9, r4
 80003da:	fa20 f305 	lsr.w	r3, r0, r5
 80003de:	40b9      	lsls	r1, r7
 80003e0:	fb09 fa08 	mul.w	sl, r9, r8
 80003e4:	4319      	orrs	r1, r3
 80003e6:	0c0b      	lsrs	r3, r1, #16
 80003e8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ec:	45a2      	cmp	sl, r4
 80003ee:	fa02 f207 	lsl.w	r2, r2, r7
 80003f2:	fa00 f307 	lsl.w	r3, r0, r7
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000400:	f080 8088 	bcs.w	8000514 <__udivmoddi4+0x2b4>
 8000404:	45a2      	cmp	sl, r4
 8000406:	f240 8085 	bls.w	8000514 <__udivmoddi4+0x2b4>
 800040a:	f1a9 0902 	sub.w	r9, r9, #2
 800040e:	4464      	add	r4, ip
 8000410:	eba4 040a 	sub.w	r4, r4, sl
 8000414:	fbb4 f0fe 	udiv	r0, r4, lr
 8000418:	fb0e 4410 	mls	r4, lr, r0, r4
 800041c:	fb00 fa08 	mul.w	sl, r0, r8
 8000420:	b289      	uxth	r1, r1
 8000422:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000426:	45a2      	cmp	sl, r4
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x1dc>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000432:	d26b      	bcs.n	800050c <__udivmoddi4+0x2ac>
 8000434:	45a2      	cmp	sl, r4
 8000436:	d969      	bls.n	800050c <__udivmoddi4+0x2ac>
 8000438:	3802      	subs	r0, #2
 800043a:	4464      	add	r4, ip
 800043c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000440:	fba0 8902 	umull	r8, r9, r0, r2
 8000444:	eba4 040a 	sub.w	r4, r4, sl
 8000448:	454c      	cmp	r4, r9
 800044a:	4641      	mov	r1, r8
 800044c:	46ce      	mov	lr, r9
 800044e:	d354      	bcc.n	80004fa <__udivmoddi4+0x29a>
 8000450:	d051      	beq.n	80004f6 <__udivmoddi4+0x296>
 8000452:	2e00      	cmp	r6, #0
 8000454:	d069      	beq.n	800052a <__udivmoddi4+0x2ca>
 8000456:	1a5a      	subs	r2, r3, r1
 8000458:	eb64 040e 	sbc.w	r4, r4, lr
 800045c:	fa04 f505 	lsl.w	r5, r4, r5
 8000460:	fa22 f307 	lsr.w	r3, r2, r7
 8000464:	40fc      	lsrs	r4, r7
 8000466:	431d      	orrs	r5, r3
 8000468:	e9c6 5400 	strd	r5, r4, [r6]
 800046c:	2700      	movs	r7, #0
 800046e:	e747      	b.n	8000300 <__udivmoddi4+0xa0>
 8000470:	4095      	lsls	r5, r2
 8000472:	f1c2 0320 	rsb	r3, r2, #32
 8000476:	fa21 f003 	lsr.w	r0, r1, r3
 800047a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800047e:	fbb0 f7f8 	udiv	r7, r0, r8
 8000482:	fa1f f985 	uxth.w	r9, r5
 8000486:	fb08 0017 	mls	r0, r8, r7, r0
 800048a:	fa24 f303 	lsr.w	r3, r4, r3
 800048e:	4091      	lsls	r1, r2
 8000490:	fb07 fc09 	mul.w	ip, r7, r9
 8000494:	430b      	orrs	r3, r1
 8000496:	0c19      	lsrs	r1, r3, #16
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	458c      	cmp	ip, r1
 800049e:	fa04 f402 	lsl.w	r4, r4, r2
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x254>
 80004a4:	1869      	adds	r1, r5, r1
 80004a6:	f107 30ff 	add.w	r0, r7, #4294967295
 80004aa:	d231      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004ac:	458c      	cmp	ip, r1
 80004ae:	d92f      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004b0:	3f02      	subs	r7, #2
 80004b2:	4429      	add	r1, r5
 80004b4:	eba1 010c 	sub.w	r1, r1, ip
 80004b8:	fbb1 f0f8 	udiv	r0, r1, r8
 80004bc:	fb08 1c10 	mls	ip, r8, r0, r1
 80004c0:	fb00 fe09 	mul.w	lr, r0, r9
 80004c4:	b299      	uxth	r1, r3
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x27e>
 80004ce:	1869      	adds	r1, r5, r1
 80004d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d4:	d218      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 80004d6:	458e      	cmp	lr, r1
 80004d8:	d916      	bls.n	8000508 <__udivmoddi4+0x2a8>
 80004da:	3802      	subs	r0, #2
 80004dc:	4429      	add	r1, r5
 80004de:	eba1 010e 	sub.w	r1, r1, lr
 80004e2:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e6:	e73a      	b.n	800035e <__udivmoddi4+0xfe>
 80004e8:	4637      	mov	r7, r6
 80004ea:	4630      	mov	r0, r6
 80004ec:	e708      	b.n	8000300 <__udivmoddi4+0xa0>
 80004ee:	460f      	mov	r7, r1
 80004f0:	e6e6      	b.n	80002c0 <__udivmoddi4+0x60>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e6fb      	b.n	80002ee <__udivmoddi4+0x8e>
 80004f6:	4543      	cmp	r3, r8
 80004f8:	d2ab      	bcs.n	8000452 <__udivmoddi4+0x1f2>
 80004fa:	ebb8 0102 	subs.w	r1, r8, r2
 80004fe:	eb69 020c 	sbc.w	r2, r9, ip
 8000502:	3801      	subs	r0, #1
 8000504:	4696      	mov	lr, r2
 8000506:	e7a4      	b.n	8000452 <__udivmoddi4+0x1f2>
 8000508:	4618      	mov	r0, r3
 800050a:	e7e8      	b.n	80004de <__udivmoddi4+0x27e>
 800050c:	4608      	mov	r0, r1
 800050e:	e795      	b.n	800043c <__udivmoddi4+0x1dc>
 8000510:	4607      	mov	r7, r0
 8000512:	e7cf      	b.n	80004b4 <__udivmoddi4+0x254>
 8000514:	4681      	mov	r9, r0
 8000516:	e77b      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000518:	3802      	subs	r0, #2
 800051a:	442c      	add	r4, r5
 800051c:	e747      	b.n	80003ae <__udivmoddi4+0x14e>
 800051e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000522:	442b      	add	r3, r5
 8000524:	e72f      	b.n	8000386 <__udivmoddi4+0x126>
 8000526:	4638      	mov	r0, r7
 8000528:	e707      	b.n	800033a <__udivmoddi4+0xda>
 800052a:	4637      	mov	r7, r6
 800052c:	e6e8      	b.n	8000300 <__udivmoddi4+0xa0>
 800052e:	bf00      	nop

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000538:	f000 fb54 	bl	8000be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053c:	f000 f834 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000540:	f000 f8b0 	bl	80006a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000544:	f000 f884 	bl	8000650 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LAN_RESET_GPIO_Port, LAN_RESET_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	2101      	movs	r1, #1
 800054c:	480f      	ldr	r0, [pc, #60]	; (800058c <main+0x58>)
 800054e:	f002 f843 	bl	80025d8 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8000552:	20c8      	movs	r0, #200	; 0xc8
 8000554:	f000 fb78 	bl	8000c48 <HAL_Delay>
  HAL_GPIO_WritePin(LAN_RESET_GPIO_Port, LAN_RESET_Pin, GPIO_PIN_SET);
 8000558:	2201      	movs	r2, #1
 800055a:	2101      	movs	r1, #1
 800055c:	480b      	ldr	r0, [pc, #44]	; (800058c <main+0x58>)
 800055e:	f002 f83b 	bl	80025d8 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000562:	f004 f8a3 	bl	80046ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000566:	4a0a      	ldr	r2, [pc, #40]	; (8000590 <main+0x5c>)
 8000568:	2100      	movs	r1, #0
 800056a:	480a      	ldr	r0, [pc, #40]	; (8000594 <main+0x60>)
 800056c:	f004 f92c 	bl	80047c8 <osThreadNew>
 8000570:	4602      	mov	r2, r0
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <main+0x64>)
 8000574:	601a      	str	r2, [r3, #0]

  /* creation of test_t */
  test_tHandle = osThreadNew(test_f, NULL, &test_t_attributes);
 8000576:	4a09      	ldr	r2, [pc, #36]	; (800059c <main+0x68>)
 8000578:	2100      	movs	r1, #0
 800057a:	4809      	ldr	r0, [pc, #36]	; (80005a0 <main+0x6c>)
 800057c:	f004 f924 	bl	80047c8 <osThreadNew>
 8000580:	4602      	mov	r2, r0
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <main+0x70>)
 8000584:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000586:	f004 f8c3 	bl	8004710 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058a:	e7fe      	b.n	800058a <main+0x56>
 800058c:	40011000 	.word	0x40011000
 8000590:	08017264 	.word	0x08017264
 8000594:	0800076d 	.word	0x0800076d
 8000598:	20002aa0 	.word	0x20002aa0
 800059c:	08017288 	.word	0x08017288
 80005a0:	08000781 	.word	0x08000781
 80005a4:	20002ae4 	.word	0x20002ae4

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	2238      	movs	r2, #56	; 0x38
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f013 fc72 	bl	8013ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ca:	2301      	movs	r3, #1
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 80005d4:	2304      	movs	r3, #4
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL7;
 80005ea:	f44f 13a0 	mov.w	r3, #1310720	; 0x140000
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 80005f0:	2300      	movs	r3, #0
 80005f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f4:	f107 0318 	add.w	r3, r7, #24
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 f805 	bl	8002608 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000604:	f000 f8f8 	bl	80007f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2302      	movs	r3, #2
 800060e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2101      	movs	r1, #1
 8000620:	4618      	mov	r0, r3
 8000622:	f002 fb07 	bl	8002c34 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800062c:	f000 f8e4 	bl	80007f8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000630:	2200      	movs	r2, #0
 8000632:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8000636:	2000      	movs	r0, #0
 8000638:	f002 fbe6 	bl	8002e08 <HAL_RCC_MCOConfig>
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <SystemClock_Config+0xa4>)
 800063e:	2201      	movs	r2, #1
 8000640:	601a      	str	r2, [r3, #0]
}
 8000642:	bf00      	nop
 8000644:	3750      	adds	r7, #80	; 0x50
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	42420070 	.word	0x42420070

08000650 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000654:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART1_UART_Init+0x4c>)
 8000656:	4a12      	ldr	r2, [pc, #72]	; (80006a0 <MX_USART1_UART_Init+0x50>)
 8000658:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_USART1_UART_Init+0x4c>)
 800065c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000660:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART1_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_USART1_UART_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART1_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_USART1_UART_Init+0x4c>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART1_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_USART1_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_USART1_UART_Init+0x4c>)
 8000688:	f002 ff8e 	bl	80035a8 <HAL_UART_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000692:	f000 f8b1 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20002aa4 	.word	0x20002aa4
 80006a0:	40013800 	.word	0x40013800

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b088      	sub	sp, #32
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 0310 	add.w	r3, r7, #16
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <MX_GPIO_Init+0xbc>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a28      	ldr	r2, [pc, #160]	; (8000760 <MX_GPIO_Init+0xbc>)
 80006be:	f043 0320 	orr.w	r3, r3, #32
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b26      	ldr	r3, [pc, #152]	; (8000760 <MX_GPIO_Init+0xbc>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0320 	and.w	r3, r3, #32
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d0:	4b23      	ldr	r3, [pc, #140]	; (8000760 <MX_GPIO_Init+0xbc>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a22      	ldr	r2, [pc, #136]	; (8000760 <MX_GPIO_Init+0xbc>)
 80006d6:	f043 0310 	orr.w	r3, r3, #16
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b20      	ldr	r3, [pc, #128]	; (8000760 <MX_GPIO_Init+0xbc>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0310 	and.w	r3, r3, #16
 80006e4:	60bb      	str	r3, [r7, #8]
 80006e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <MX_GPIO_Init+0xbc>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a1c      	ldr	r2, [pc, #112]	; (8000760 <MX_GPIO_Init+0xbc>)
 80006ee:	f043 0304 	orr.w	r3, r3, #4
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_GPIO_Init+0xbc>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0304 	and.w	r3, r3, #4
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_GPIO_Init+0xbc>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a16      	ldr	r2, [pc, #88]	; (8000760 <MX_GPIO_Init+0xbc>)
 8000706:	f043 0308 	orr.w	r3, r3, #8
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_GPIO_Init+0xbc>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f003 0308 	and.w	r3, r3, #8
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAN_RESET_GPIO_Port, LAN_RESET_Pin, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2101      	movs	r1, #1
 800071c:	4811      	ldr	r0, [pc, #68]	; (8000764 <MX_GPIO_Init+0xc0>)
 800071e:	f001 ff5b 	bl	80025d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LAN_RESET_Pin */
  GPIO_InitStruct.Pin = LAN_RESET_Pin;
 8000722:	2301      	movs	r3, #1
 8000724:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800072a:	2301      	movs	r3, #1
 800072c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2302      	movs	r3, #2
 8000730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LAN_RESET_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	4619      	mov	r1, r3
 8000738:	480a      	ldr	r0, [pc, #40]	; (8000764 <MX_GPIO_Init+0xc0>)
 800073a:	f001 fdf3 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800073e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000748:	2302      	movs	r3, #2
 800074a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074c:	f107 0310 	add.w	r3, r7, #16
 8000750:	4619      	mov	r1, r3
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_GPIO_Init+0xc4>)
 8000754:	f001 fde6 	bl	8002324 <HAL_GPIO_Init>

}
 8000758:	bf00      	nop
 800075a:	3720      	adds	r7, #32
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40021000 	.word	0x40021000
 8000764:	40011000 	.word	0x40011000
 8000768:	40010800 	.word	0x40010800

0800076c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000774:	f003 fa28 	bl	8003bc8 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000778:	2001      	movs	r0, #1
 800077a:	f004 f8cf 	bl	800491c <osDelay>
 800077e:	e7fb      	b.n	8000778 <StartDefaultTask+0xc>

08000780 <test_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_test_f */
void test_f(void *argument)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af02      	add	r7, sp, #8
 8000786:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN test_f */
  /* Infinite loop */
		struct netconn* conn;
		ip_addr_t hphone_ip;
		IP4_ADDR(&hphone_ip,192,168,0,50);
 8000788:	4b10      	ldr	r3, [pc, #64]	; (80007cc <test_f+0x4c>)
 800078a:	60bb      	str	r3, [r7, #8]

	  /* Infinite loop */
	  for(;;)
	  {
		        conn=netconn_new(NETCONN_TCP);
 800078c:	2200      	movs	r2, #0
 800078e:	2100      	movs	r1, #0
 8000790:	2010      	movs	r0, #16
 8000792:	f007 fe39 	bl	8008408 <netconn_new_with_proto_and_callback>
 8000796:	60f8      	str	r0, [r7, #12]
				netconn_connect(conn,&hphone_ip,88);
 8000798:	f107 0308 	add.w	r3, r7, #8
 800079c:	2258      	movs	r2, #88	; 0x58
 800079e:	4619      	mov	r1, r3
 80007a0:	68f8      	ldr	r0, [r7, #12]
 80007a2:	f007 fed1 	bl	8008548 <netconn_connect>
				netconn_write(conn,"xy",2,NETCONN_COPY);
 80007a6:	2300      	movs	r3, #0
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2301      	movs	r3, #1
 80007ac:	2202      	movs	r2, #2
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <test_f+0x50>)
 80007b0:	68f8      	ldr	r0, [r7, #12]
 80007b2:	f007 ff01 	bl	80085b8 <netconn_write_partly>
				netconn_close(conn);
 80007b6:	68f8      	ldr	r0, [r7, #12]
 80007b8:	f007 ffa6 	bl	8008708 <netconn_close>
				netconn_delete(conn);
 80007bc:	68f8      	ldr	r0, [r7, #12]
 80007be:	f007 fe9d 	bl	80084fc <netconn_delete>
				osDelay(1000);
 80007c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c6:	f004 f8a9 	bl	800491c <osDelay>
		        conn=netconn_new(NETCONN_TCP);
 80007ca:	e7df      	b.n	800078c <test_f+0xc>
 80007cc:	3200a8c0 	.word	0x3200a8c0
 80007d0:	08014cb8 	.word	0x08014cb8

080007d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d101      	bne.n	80007ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007e6:	f000 fa13 	bl	8000c10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40012c00 	.word	0x40012c00

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800080a:	4b18      	ldr	r3, [pc, #96]	; (800086c <HAL_MspInit+0x68>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4a17      	ldr	r2, [pc, #92]	; (800086c <HAL_MspInit+0x68>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6193      	str	r3, [r2, #24]
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <HAL_MspInit+0x68>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_MspInit+0x68>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	4a11      	ldr	r2, [pc, #68]	; (800086c <HAL_MspInit+0x68>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082c:	61d3      	str	r3, [r2, #28]
 800082e:	4b0f      	ldr	r3, [pc, #60]	; (800086c <HAL_MspInit+0x68>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	210f      	movs	r1, #15
 800083e:	f06f 0001 	mvn.w	r0, #1
 8000842:	f000 fad8 	bl	8000df6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <HAL_MspInit+0x6c>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	4a04      	ldr	r2, [pc, #16]	; (8000870 <HAL_MspInit+0x6c>)
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40021000 	.word	0x40021000
 8000870:	40010000 	.word	0x40010000

08000874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a20      	ldr	r2, [pc, #128]	; (8000910 <HAL_UART_MspInit+0x9c>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d139      	bne.n	8000908 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <HAL_UART_MspInit+0xa0>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <HAL_UART_MspInit+0xa0>)
 800089a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <HAL_UART_MspInit+0xa0>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <HAL_UART_MspInit+0xa0>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a18      	ldr	r2, [pc, #96]	; (8000914 <HAL_UART_MspInit+0xa0>)
 80008b2:	f043 0304 	orr.w	r3, r3, #4
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <HAL_UART_MspInit+0xa0>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0304 	and.w	r3, r3, #4
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ce:	2303      	movs	r3, #3
 80008d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0310 	add.w	r3, r7, #16
 80008d6:	4619      	mov	r1, r3
 80008d8:	480f      	ldr	r0, [pc, #60]	; (8000918 <HAL_UART_MspInit+0xa4>)
 80008da:	f001 fd23 	bl	8002324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4619      	mov	r1, r3
 80008f2:	4809      	ldr	r0, [pc, #36]	; (8000918 <HAL_UART_MspInit+0xa4>)
 80008f4:	f001 fd16 	bl	8002324 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2105      	movs	r1, #5
 80008fc:	2025      	movs	r0, #37	; 0x25
 80008fe:	f000 fa7a 	bl	8000df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000902:	2025      	movs	r0, #37	; 0x25
 8000904:	f000 fa93 	bl	8000e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000908:	bf00      	nop
 800090a:	3720      	adds	r7, #32
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40013800 	.word	0x40013800
 8000914:	40021000 	.word	0x40021000
 8000918:	40010800 	.word	0x40010800

0800091c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08c      	sub	sp, #48	; 0x30
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	2019      	movs	r0, #25
 8000932:	f000 fa60 	bl	8000df6 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000936:	2019      	movs	r0, #25
 8000938:	f000 fa79 	bl	8000e2e <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800093c:	4b1e      	ldr	r3, [pc, #120]	; (80009b8 <HAL_InitTick+0x9c>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	4a1d      	ldr	r2, [pc, #116]	; (80009b8 <HAL_InitTick+0x9c>)
 8000942:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000946:	6193      	str	r3, [r2, #24]
 8000948:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <HAL_InitTick+0x9c>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000954:	f107 0210 	add.w	r2, r7, #16
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f002 fb78 	bl	8003054 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000964:	f002 fb62 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 8000968:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800096a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800096c:	4a13      	ldr	r2, [pc, #76]	; (80009bc <HAL_InitTick+0xa0>)
 800096e:	fba2 2303 	umull	r2, r3, r2, r3
 8000972:	0c9b      	lsrs	r3, r3, #18
 8000974:	3b01      	subs	r3, #1
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <HAL_InitTick+0xa4>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <HAL_InitTick+0xa8>)
 800097c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <HAL_InitTick+0xa4>)
 8000980:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000984:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000986:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <HAL_InitTick+0xa4>)
 8000988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <HAL_InitTick+0xa4>)
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <HAL_InitTick+0xa4>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <HAL_InitTick+0xa4>)
 800099a:	f002 fba9 	bl	80030f0 <HAL_TIM_Base_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d104      	bne.n	80009ae <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80009a4:	4806      	ldr	r0, [pc, #24]	; (80009c0 <HAL_InitTick+0xa4>)
 80009a6:	f002 fbfb 	bl	80031a0 <HAL_TIM_Base_Start_IT>
 80009aa:	4603      	mov	r3, r0
 80009ac:	e000      	b.n	80009b0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3730      	adds	r7, #48	; 0x30
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40021000 	.word	0x40021000
 80009bc:	431bde83 	.word	0x431bde83
 80009c0:	20002ae8 	.word	0x20002ae8
 80009c4:	40012c00 	.word	0x40012c00

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr

080009d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <HardFault_Handler+0x4>

080009da <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <MemManage_Handler+0x4>

080009e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <BusFault_Handler+0x4>

080009e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <UsageFault_Handler+0x4>

080009ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <TIM1_UP_IRQHandler+0x10>)
 80009fe:	f002 fc29 	bl	8003254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20002ae8 	.word	0x20002ae8

08000a0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <USART1_IRQHandler+0x10>)
 8000a12:	f002 fe17 	bl	8003644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20002aa4 	.word	0x20002aa4

08000a20 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a24:	4802      	ldr	r0, [pc, #8]	; (8000a30 <ETH_IRQHandler+0x10>)
 8000a26:	f000 feca 	bl	80017be <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20005c0c 	.word	0x20005c0c

08000a34 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <ETH_WKUP_IRQHandler+0x10>)
 8000a3a:	f000 fec0 	bl	80017be <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20005c0c 	.word	0x20005c0c

08000a48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	e00a      	b.n	8000a70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a5a:	f3af 8000 	nop.w
 8000a5e:	4601      	mov	r1, r0
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	60ba      	str	r2, [r7, #8]
 8000a66:	b2ca      	uxtb	r2, r1
 8000a68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dbf0      	blt.n	8000a5a <_read+0x12>
	}

return len;
 8000a78:	687b      	ldr	r3, [r7, #4]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e009      	b.n	8000aa8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	60ba      	str	r2, [r7, #8]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dbf1      	blt.n	8000a94 <_write+0x12>
	}
	return len;
 8000ab0:	687b      	ldr	r3, [r7, #4]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_close>:

int _close(int file)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bc80      	pop	{r7}
 8000ace:	4770      	bx	lr

08000ad0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ae0:	605a      	str	r2, [r3, #4]
	return 0;
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bc80      	pop	{r7}
 8000aec:	4770      	bx	lr

08000aee <_isatty>:

int _isatty(int file)
{
 8000aee:	b480      	push	{r7}
 8000af0:	b083      	sub	sp, #12
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
	return 1;
 8000af6:	2301      	movs	r3, #1
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr

08000b02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b085      	sub	sp, #20
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	60f8      	str	r0, [r7, #12]
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
	return 0;
 8000b0e:	2300      	movs	r3, #0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
	...

08000b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b087      	sub	sp, #28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <_sbrk+0x5c>)
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <_sbrk+0x60>)
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <_sbrk+0x64>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <_sbrk+0x68>)
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d205      	bcs.n	8000b58 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <_sbrk+0x6c>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	e009      	b.n	8000b6c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <_sbrk+0x64>)
 8000b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	371c      	adds	r7, #28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20010000 	.word	0x20010000
 8000b7c:	00000400 	.word	0x00000400
 8000b80:	2000009c 	.word	0x2000009c
 8000b84:	2000ad30 	.word	0x2000ad30
 8000b88:	2000ad28 	.word	0x2000ad28

08000b8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr

08000b98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b9a:	e003      	b.n	8000ba4 <LoopCopyDataInit>

08000b9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	; (8000bcc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ba0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ba2:	3104      	adds	r1, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ba4:	480a      	ldr	r0, [pc, #40]	; (8000bd0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ba8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000baa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000bac:	d3f6      	bcc.n	8000b9c <CopyDataInit>
  ldr r2, =_sbss
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bb0:	e002      	b.n	8000bb8 <LoopFillZerobss>

08000bb2 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bb4:	f842 3b04 	str.w	r3, [r2], #4

08000bb8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bb8:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bbc:	d3f9      	bcc.n	8000bb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bbe:	f7ff ffe5 	bl	8000b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bc2:	f013 f92f 	bl	8013e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc6:	f7ff fcb5 	bl	8000534 <main>
  bx lr
 8000bca:	4770      	bx	lr
  ldr r3, =_sidata
 8000bcc:	08017490 	.word	0x08017490
  ldr r0, =_sdata
 8000bd0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bd4:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8000bd8:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8000bdc:	2000ad30 	.word	0x2000ad30

08000be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000be0:	e7fe      	b.n	8000be0 <ADC1_2_IRQHandler>
	...

08000be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_Init+0x28>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <HAL_Init+0x28>)
 8000bee:	f043 0310 	orr.w	r3, r3, #16
 8000bf2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 f8f3 	bl	8000de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f7ff fe8e 	bl	800091c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c00:	f7ff fe00 	bl	8000804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40022000 	.word	0x40022000

08000c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <HAL_IncTick+0x1c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	461a      	mov	r2, r3
 8000c1a:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_IncTick+0x20>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a03      	ldr	r2, [pc, #12]	; (8000c30 <HAL_IncTick+0x20>)
 8000c22:	6013      	str	r3, [r2, #0]
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	20000008 	.word	0x20000008
 8000c30:	20002b30 	.word	0x20002b30

08000c34 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b02      	ldr	r3, [pc, #8]	; (8000c44 <HAL_GetTick+0x10>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	20002b30 	.word	0x20002b30

08000c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c50:	f7ff fff0 	bl	8000c34 <HAL_GetTick>
 8000c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c60:	d005      	beq.n	8000c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_Delay+0x40>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	461a      	mov	r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c6e:	bf00      	nop
 8000c70:	f7ff ffe0 	bl	8000c34 <HAL_GetTick>
 8000c74:	4602      	mov	r2, r0
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	d8f7      	bhi.n	8000c70 <HAL_Delay+0x28>
  {
  }
}
 8000c80:	bf00      	nop
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000008 	.word	0x20000008

08000c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cbe:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	60d3      	str	r3, [r2, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <__NVIC_GetPriorityGrouping+0x18>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	f003 0307 	and.w	r3, r3, #7
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	db0b      	blt.n	8000d1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	f003 021f 	and.w	r2, r3, #31
 8000d08:	4906      	ldr	r1, [pc, #24]	; (8000d24 <__NVIC_EnableIRQ+0x34>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	095b      	lsrs	r3, r3, #5
 8000d10:	2001      	movs	r0, #1
 8000d12:	fa00 f202 	lsl.w	r2, r0, r2
 8000d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	; (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	; (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
         );
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff4f 	bl	8000c8c <__NVIC_SetPriorityGrouping>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
 8000e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e08:	f7ff ff64 	bl	8000cd4 <__NVIC_GetPriorityGrouping>
 8000e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	68b9      	ldr	r1, [r7, #8]
 8000e12:	6978      	ldr	r0, [r7, #20]
 8000e14:	f7ff ffb2 	bl	8000d7c <NVIC_EncodePriority>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff81 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff57 	bl	8000cf0 <__NVIC_EnableIRQ>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d005      	beq.n	8000e6e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2204      	movs	r2, #4
 8000e66:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
 8000e6c:	e0d6      	b.n	800101c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f022 020e 	bic.w	r2, r2, #14
 8000e7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f022 0201 	bic.w	r2, r2, #1
 8000e8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b64      	ldr	r3, [pc, #400]	; (8001028 <HAL_DMA_Abort_IT+0x1dc>)
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d958      	bls.n	8000f4c <HAL_DMA_Abort_IT+0x100>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a63      	ldr	r2, [pc, #396]	; (800102c <HAL_DMA_Abort_IT+0x1e0>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d04f      	beq.n	8000f44 <HAL_DMA_Abort_IT+0xf8>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a61      	ldr	r2, [pc, #388]	; (8001030 <HAL_DMA_Abort_IT+0x1e4>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d048      	beq.n	8000f40 <HAL_DMA_Abort_IT+0xf4>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a60      	ldr	r2, [pc, #384]	; (8001034 <HAL_DMA_Abort_IT+0x1e8>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d040      	beq.n	8000f3a <HAL_DMA_Abort_IT+0xee>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a5e      	ldr	r2, [pc, #376]	; (8001038 <HAL_DMA_Abort_IT+0x1ec>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d038      	beq.n	8000f34 <HAL_DMA_Abort_IT+0xe8>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a5d      	ldr	r2, [pc, #372]	; (800103c <HAL_DMA_Abort_IT+0x1f0>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d030      	beq.n	8000f2e <HAL_DMA_Abort_IT+0xe2>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a5b      	ldr	r2, [pc, #364]	; (8001040 <HAL_DMA_Abort_IT+0x1f4>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d028      	beq.n	8000f28 <HAL_DMA_Abort_IT+0xdc>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a53      	ldr	r2, [pc, #332]	; (8001028 <HAL_DMA_Abort_IT+0x1dc>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d020      	beq.n	8000f22 <HAL_DMA_Abort_IT+0xd6>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a57      	ldr	r2, [pc, #348]	; (8001044 <HAL_DMA_Abort_IT+0x1f8>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d019      	beq.n	8000f1e <HAL_DMA_Abort_IT+0xd2>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a56      	ldr	r2, [pc, #344]	; (8001048 <HAL_DMA_Abort_IT+0x1fc>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d012      	beq.n	8000f1a <HAL_DMA_Abort_IT+0xce>
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a54      	ldr	r2, [pc, #336]	; (800104c <HAL_DMA_Abort_IT+0x200>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d00a      	beq.n	8000f14 <HAL_DMA_Abort_IT+0xc8>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a53      	ldr	r2, [pc, #332]	; (8001050 <HAL_DMA_Abort_IT+0x204>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d102      	bne.n	8000f0e <HAL_DMA_Abort_IT+0xc2>
 8000f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0c:	e01b      	b.n	8000f46 <HAL_DMA_Abort_IT+0xfa>
 8000f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f12:	e018      	b.n	8000f46 <HAL_DMA_Abort_IT+0xfa>
 8000f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f18:	e015      	b.n	8000f46 <HAL_DMA_Abort_IT+0xfa>
 8000f1a:	2310      	movs	r3, #16
 8000f1c:	e013      	b.n	8000f46 <HAL_DMA_Abort_IT+0xfa>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e011      	b.n	8000f46 <HAL_DMA_Abort_IT+0xfa>
 8000f22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f26:	e00e      	b.n	8000f46 <HAL_DMA_Abort_IT+0xfa>
 8000f28:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f2c:	e00b      	b.n	8000f46 <HAL_DMA_Abort_IT+0xfa>
 8000f2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f32:	e008      	b.n	8000f46 <HAL_DMA_Abort_IT+0xfa>
 8000f34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f38:	e005      	b.n	8000f46 <HAL_DMA_Abort_IT+0xfa>
 8000f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f3e:	e002      	b.n	8000f46 <HAL_DMA_Abort_IT+0xfa>
 8000f40:	2310      	movs	r3, #16
 8000f42:	e000      	b.n	8000f46 <HAL_DMA_Abort_IT+0xfa>
 8000f44:	2301      	movs	r3, #1
 8000f46:	4a43      	ldr	r2, [pc, #268]	; (8001054 <HAL_DMA_Abort_IT+0x208>)
 8000f48:	6053      	str	r3, [r2, #4]
 8000f4a:	e057      	b.n	8000ffc <HAL_DMA_Abort_IT+0x1b0>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a36      	ldr	r2, [pc, #216]	; (800102c <HAL_DMA_Abort_IT+0x1e0>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d04f      	beq.n	8000ff6 <HAL_DMA_Abort_IT+0x1aa>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a35      	ldr	r2, [pc, #212]	; (8001030 <HAL_DMA_Abort_IT+0x1e4>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d048      	beq.n	8000ff2 <HAL_DMA_Abort_IT+0x1a6>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a33      	ldr	r2, [pc, #204]	; (8001034 <HAL_DMA_Abort_IT+0x1e8>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d040      	beq.n	8000fec <HAL_DMA_Abort_IT+0x1a0>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a32      	ldr	r2, [pc, #200]	; (8001038 <HAL_DMA_Abort_IT+0x1ec>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d038      	beq.n	8000fe6 <HAL_DMA_Abort_IT+0x19a>
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a30      	ldr	r2, [pc, #192]	; (800103c <HAL_DMA_Abort_IT+0x1f0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d030      	beq.n	8000fe0 <HAL_DMA_Abort_IT+0x194>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a2f      	ldr	r2, [pc, #188]	; (8001040 <HAL_DMA_Abort_IT+0x1f4>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d028      	beq.n	8000fda <HAL_DMA_Abort_IT+0x18e>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a26      	ldr	r2, [pc, #152]	; (8001028 <HAL_DMA_Abort_IT+0x1dc>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d020      	beq.n	8000fd4 <HAL_DMA_Abort_IT+0x188>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a2b      	ldr	r2, [pc, #172]	; (8001044 <HAL_DMA_Abort_IT+0x1f8>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d019      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0x184>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a29      	ldr	r2, [pc, #164]	; (8001048 <HAL_DMA_Abort_IT+0x1fc>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d012      	beq.n	8000fcc <HAL_DMA_Abort_IT+0x180>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a28      	ldr	r2, [pc, #160]	; (800104c <HAL_DMA_Abort_IT+0x200>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d00a      	beq.n	8000fc6 <HAL_DMA_Abort_IT+0x17a>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a26      	ldr	r2, [pc, #152]	; (8001050 <HAL_DMA_Abort_IT+0x204>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d102      	bne.n	8000fc0 <HAL_DMA_Abort_IT+0x174>
 8000fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fbe:	e01b      	b.n	8000ff8 <HAL_DMA_Abort_IT+0x1ac>
 8000fc0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc4:	e018      	b.n	8000ff8 <HAL_DMA_Abort_IT+0x1ac>
 8000fc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fca:	e015      	b.n	8000ff8 <HAL_DMA_Abort_IT+0x1ac>
 8000fcc:	2310      	movs	r3, #16
 8000fce:	e013      	b.n	8000ff8 <HAL_DMA_Abort_IT+0x1ac>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e011      	b.n	8000ff8 <HAL_DMA_Abort_IT+0x1ac>
 8000fd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fd8:	e00e      	b.n	8000ff8 <HAL_DMA_Abort_IT+0x1ac>
 8000fda:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fde:	e00b      	b.n	8000ff8 <HAL_DMA_Abort_IT+0x1ac>
 8000fe0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fe4:	e008      	b.n	8000ff8 <HAL_DMA_Abort_IT+0x1ac>
 8000fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fea:	e005      	b.n	8000ff8 <HAL_DMA_Abort_IT+0x1ac>
 8000fec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff0:	e002      	b.n	8000ff8 <HAL_DMA_Abort_IT+0x1ac>
 8000ff2:	2310      	movs	r3, #16
 8000ff4:	e000      	b.n	8000ff8 <HAL_DMA_Abort_IT+0x1ac>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	4a17      	ldr	r2, [pc, #92]	; (8001058 <HAL_DMA_Abort_IT+0x20c>)
 8000ffa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2200      	movs	r2, #0
 8001008:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001010:	2b00      	cmp	r3, #0
 8001012:	d003      	beq.n	800101c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	4798      	blx	r3
    } 
  }
  return status;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40020080 	.word	0x40020080
 800102c:	40020008 	.word	0x40020008
 8001030:	4002001c 	.word	0x4002001c
 8001034:	40020030 	.word	0x40020030
 8001038:	40020044 	.word	0x40020044
 800103c:	40020058 	.word	0x40020058
 8001040:	4002006c 	.word	0x4002006c
 8001044:	40020408 	.word	0x40020408
 8001048:	4002041c 	.word	0x4002041c
 800104c:	40020430 	.word	0x40020430
 8001050:	40020444 	.word	0x40020444
 8001054:	40020400 	.word	0x40020400
 8001058:	40020000 	.word	0x40020000

0800105c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800106c:	4bac      	ldr	r3, [pc, #688]	; (8001320 <HAL_ETH_Init+0x2c4>)
 800106e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e14a      	b.n	8001318 <HAL_ETH_Init+0x2bc>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d106      	bne.n	800109c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f002 fef8 	bl	8003e8c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Select MII or RMII Mode*/
  AFIO->MAPR &= ~(AFIO_MAPR_MII_RMII_SEL);
 800109c:	4ba1      	ldr	r3, [pc, #644]	; (8001324 <HAL_ETH_Init+0x2c8>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4aa0      	ldr	r2, [pc, #640]	; (8001324 <HAL_ETH_Init+0x2c8>)
 80010a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80010a6:	6053      	str	r3, [r2, #4]
  AFIO->MAPR |= (uint32_t)heth->Init.MediaInterface;
 80010a8:	4b9e      	ldr	r3, [pc, #632]	; (8001324 <HAL_ETH_Init+0x2c8>)
 80010aa:	685a      	ldr	r2, [r3, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a1b      	ldr	r3, [r3, #32]
 80010b0:	499c      	ldr	r1, [pc, #624]	; (8001324 <HAL_ETH_Init+0x2c8>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f042 0201 	orr.w	r2, r2, #1
 80010c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010cc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010ce:	f7ff fdb1 	bl	8000c34 <HAL_GetTick>
 80010d2:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80010d4:	e011      	b.n	80010fa <HAL_ETH_Init+0x9e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 80010d6:	f7ff fdad 	bl	8000c34 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010e4:	d909      	bls.n	80010fa <HAL_ETH_Init+0x9e>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2203      	movs	r2, #3
 80010ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e10e      	b.n	8001318 <HAL_ETH_Init+0x2bc>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1e4      	bne.n	80010d6 <HAL_ETH_Init+0x7a>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	691b      	ldr	r3, [r3, #16]
 8001112:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f023 031c 	bic.w	r3, r3, #28
 800111a:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800111c:	f001 ff68 	bl	8002ff0 <HAL_RCC_GetHCLKFreq>
 8001120:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	4a80      	ldr	r2, [pc, #512]	; (8001328 <HAL_ETH_Init+0x2cc>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d908      	bls.n	800113c <HAL_ETH_Init+0xe0>
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	4a7f      	ldr	r2, [pc, #508]	; (800132c <HAL_ETH_Init+0x2d0>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d804      	bhi.n	800113c <HAL_ETH_Init+0xe0>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV16;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	f043 0308 	orr.w	r3, r3, #8
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e00b      	b.n	8001154 <HAL_ETH_Init+0xf8>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	4a7b      	ldr	r2, [pc, #492]	; (800132c <HAL_ETH_Init+0x2d0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d907      	bls.n	8001154 <HAL_ETH_Init+0xf8>
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	4a7a      	ldr	r2, [pc, #488]	; (8001330 <HAL_ETH_Init+0x2d4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d803      	bhi.n	8001154 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV26;
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f043 030c 	orr.w	r3, r3, #12
 8001152:	61fb      	str	r3, [r7, #28]
    /* CSR Clock Range between 60-72 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_DIV42;
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800115c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001160:	2100      	movs	r1, #0
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 fc0c 	bl	8001980 <HAL_ETH_WritePHYRegister>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00b      	beq.n	8001186 <HAL_ETH_Init+0x12a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001172:	6939      	ldr	r1, [r7, #16]
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 fdc1 	bl	8001cfc <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e0c8      	b.n	8001318 <HAL_ETH_Init+0x2bc>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001186:	20ff      	movs	r0, #255	; 0xff
 8001188:	f7ff fd5e 	bl	8000c48 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 8096 	beq.w	80012c2 <HAL_ETH_Init+0x266>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001196:	f7ff fd4d 	bl	8000c34 <HAL_GetTick>
 800119a:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	461a      	mov	r2, r3
 80011a2:	2101      	movs	r1, #1
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f000 fb83 	bl	80018b0 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 80011aa:	f7ff fd43 	bl	8000c34 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d90f      	bls.n	80011dc <HAL_ETH_Init+0x180>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80011c0:	6939      	ldr	r1, [r7, #16]
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 fd9a 	bl	8001cfc <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e09d      	b.n	8001318 <HAL_ETH_Init+0x2bc>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0da      	beq.n	800119c <HAL_ETH_Init+0x140>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80011e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ea:	2100      	movs	r1, #0
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 fbc7 	bl	8001980 <HAL_ETH_WritePHYRegister>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00b      	beq.n	8001210 <HAL_ETH_Init+0x1b4>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011fc:	6939      	ldr	r1, [r7, #16]
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f000 fd7c 	bl	8001cfc <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2201      	movs	r2, #1
 8001208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e083      	b.n	8001318 <HAL_ETH_Init+0x2bc>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8001210:	f7ff fd10 	bl	8000c34 <HAL_GetTick>
 8001214:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	461a      	mov	r2, r3
 800121c:	2101      	movs	r1, #1
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 fb46 	bl	80018b0 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001224:	f7ff fd06 	bl	8000c34 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001232:	4293      	cmp	r3, r2
 8001234:	d90f      	bls.n	8001256 <HAL_ETH_Init+0x1fa>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800123a:	6939      	ldr	r1, [r7, #16]
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 fd5d 	bl	8001cfc <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e060      	b.n	8001318 <HAL_ETH_Init+0x2bc>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f003 0320 	and.w	r3, r3, #32
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0da      	beq.n	8001216 <HAL_ETH_Init+0x1ba>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	461a      	mov	r2, r3
 8001266:	2110      	movs	r1, #16
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 fb21 	bl	80018b0 <HAL_ETH_ReadPHYRegister>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00b      	beq.n	800128c <HAL_ETH_Init+0x230>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001278:	6939      	ldr	r1, [r7, #16]
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 fd3e 	bl	8001cfc <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e045      	b.n	8001318 <HAL_ETH_Init+0x2bc>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	2b00      	cmp	r3, #0
 8001294:	d004      	beq.n	80012a0 <HAL_ETH_Init+0x244>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	e002      	b.n	80012a6 <HAL_ETH_Init+0x24a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_ETH_Init+0x25c>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	e026      	b.n	8001306 <HAL_ETH_Init+0x2aa>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	e021      	b.n	8001306 <HAL_ETH_Init+0x2aa>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	08db      	lsrs	r3, r3, #3
 80012c8:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	085b      	lsrs	r3, r3, #1
 80012d0:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80012d2:	4313      	orrs	r3, r2
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	2100      	movs	r1, #0
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 fb50 	bl	8001980 <HAL_ETH_WritePHYRegister>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00b      	beq.n	80012fe <HAL_ETH_Init+0x2a2>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012ea:	6939      	ldr	r1, [r7, #16]
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 fd05 	bl	8001cfc <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00c      	b.n	8001318 <HAL_ETH_Init+0x2bc>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80012fe:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001302:	f7ff fca1 	bl	8000c48 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001306:	6939      	ldr	r1, [r7, #16]
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 fcf7 	bl	8001cfc <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	03938700 	.word	0x03938700
 8001324:	40010000 	.word	0x40010000
 8001328:	01312cff 	.word	0x01312cff
 800132c:	02160ebf 	.word	0x02160ebf
 8001330:	039386ff 	.word	0x039386ff

08001334 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff: Pointer to the first TxBuffer list
  * @param  TxBuffCount: Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001334:	b480      	push	{r7}
 8001336:	b087      	sub	sp, #28
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_ETH_DMATxDescListInit+0x20>
 8001350:	2302      	movs	r3, #2
 8001352:	e052      	b.n	80013fa <HAL_ETH_DMATxDescListInit+0xc6>
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2202      	movs	r2, #2
 8001360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	e030      	b.n	80013d2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	68ba      	ldr	r2, [r7, #8]
 8001376:	4413      	add	r3, r2
 8001378:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001380:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001388:	fb02 f303 	mul.w	r3, r2, r3
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	4413      	add	r3, r2
 8001390:	461a      	mov	r2, r3
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d105      	bne.n	80013aa <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1U))
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d208      	bcs.n	80013c6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1U);
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3301      	adds	r3, #1
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	4413      	add	r3, r2
 80013be:	461a      	mov	r2, r3
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	e002      	b.n	80013cc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	3301      	adds	r3, #1
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d3ca      	bcc.n	8001370 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e4:	3310      	adds	r3, #16
 80013e6:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2201      	movs	r2, #1
 80013ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2200      	movs	r2, #0
 80013f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	371c      	adds	r7, #28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff: Pointer to the first RxBuffer list
  * @param  RxBuffCount: Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800141c:	2b01      	cmp	r3, #1
 800141e:	d101      	bne.n	8001424 <HAL_ETH_DMARxDescListInit+0x20>
 8001420:	2302      	movs	r3, #2
 8001422:	e056      	b.n	80014d2 <HAL_ETH_DMARxDescListInit+0xce>
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2202      	movs	r2, #2
 8001430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	e034      	b.n	80014aa <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	011b      	lsls	r3, r3, #4
 8001444:	68ba      	ldr	r2, [r7, #8]
 8001446:	4413      	add	r3, r2
 8001448:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001450:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001458:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	4413      	add	r3, r2
 8001468:	461a      	mov	r2, r3
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d105      	bne.n	8001482 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	3b01      	subs	r3, #1
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	429a      	cmp	r2, r3
 800148a:	d208      	bcs.n	800149e <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3301      	adds	r3, #1
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	4413      	add	r3, r2
 8001496:	461a      	mov	r2, r3
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	60da      	str	r2, [r3, #12]
 800149c:	e002      	b.n	80014a4 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	3301      	adds	r3, #1
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d3c6      	bcc.n	8001440 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014bc:	330c      	adds	r3, #12
 80014be:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2201      	movs	r2, #1
 80014c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	371c      	adds	r7, #28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength: Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80014dc:	b480      	push	{r7}
 80014de:	b087      	sub	sp, #28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_ETH_TransmitFrame+0x24>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e0cd      	b.n	800169c <HAL_ETH_TransmitFrame+0x1c0>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2202      	movs	r2, #2
 800150c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d109      	bne.n	800152a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e0b8      	b.n	800169c <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	da09      	bge.n	8001548 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2212      	movs	r2, #18
 8001538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e0a9      	b.n	800169c <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800154e:	4293      	cmp	r3, r2
 8001550:	d915      	bls.n	800157e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	4a54      	ldr	r2, [pc, #336]	; (80016a8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001556:	fba2 2303 	umull	r2, r3, r2, r3
 800155a:	0a9b      	lsrs	r3, r3, #10
 800155c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	4b51      	ldr	r3, [pc, #324]	; (80016a8 <HAL_ETH_TransmitFrame+0x1cc>)
 8001562:	fba3 1302 	umull	r1, r3, r3, r2
 8001566:	0a9b      	lsrs	r3, r3, #10
 8001568:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800156c:	fb01 f303 	mul.w	r3, r1, r3
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d005      	beq.n	8001582 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	e001      	b.n	8001582 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 800157e:	2301      	movs	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d11c      	bne.n	80015c2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001592:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001596:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80015a2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015b2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	461a      	mov	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c
 80015c0:	e04b      	b.n	800165a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	e044      	b.n	8001652 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015d6:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d107      	bne.n	80015ee <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015ec:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80015f6:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d116      	bne.n	8001630 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001610:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	4a25      	ldr	r2, [pc, #148]	; (80016ac <HAL_ETH_TransmitFrame+0x1d0>)
 8001616:	fb02 f203 	mul.w	r2, r2, r3
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	4413      	add	r3, r2
 800161e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001622:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800162e:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800163e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	461a      	mov	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	3301      	adds	r3, #1
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	429a      	cmp	r2, r3
 8001658:	d3b6      	bcc.n	80015c8 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001662:	3314      	adds	r3, #20
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00d      	beq.n	800168a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001676:	3314      	adds	r3, #20
 8001678:	2204      	movs	r2, #4
 800167a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001684:	3304      	adds	r3, #4
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	371c      	adds	r7, #28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	ac02b00b 	.word	0xac02b00b
 80016ac:	fffffa0c 	.word	0xfffffa0c

080016b0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e074      	b.n	80017b4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2202      	movs	r2, #2
 80016d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80016da:	e05a      	b.n	8001792 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	3301      	adds	r3, #1
 80016e0:	60fb      	str	r3, [r7, #12]

    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */
    if ((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f0:	d10d      	bne.n	800170e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    {
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	461a      	mov	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
 800170c:	e041      	b.n	8001792 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001718:	2b00      	cmp	r3, #0
 800171a:	d10b      	bne.n	8001734 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	461a      	mov	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	629a      	str	r2, [r3, #40]	; 0x28
 8001732:	e02e      	b.n	8001792 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    {
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174a:	2b01      	cmp	r3, #1
 800174c:	d103      	bne.n	8001756 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	0c1b      	lsrs	r3, r3, #16
 800175e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001762:	1f1a      	subs	r2, r3, #4
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	641a      	str	r2, [r3, #64]	; 0x40

      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	461a      	mov	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e010      	b.n	80017b4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	db02      	blt.n	80017a2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b07      	cmp	r3, #7
 80017a0:	d99c      	bls.n	80016dc <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2201      	movs	r2, #1
 80017a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ce:	3314      	adds	r3, #20
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d6:	2b40      	cmp	r3, #64	; 0x40
 80017d8:	d112      	bne.n	8001800 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f002 fc0a 	bl	8003ff4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e8:	3314      	adds	r3, #20
 80017ea:	2240      	movs	r2, #64	; 0x40
 80017ec:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80017fe:	e01b      	b.n	8001838 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001808:	3314      	adds	r3, #20
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b01      	cmp	r3, #1
 8001812:	d111      	bne.n	8001838 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f839 	bl	800188c <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001822:	3314      	adds	r3, #20
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001840:	3314      	adds	r3, #20
 8001842:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001846:	601a      	str	r2, [r3, #0]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001850:	3314      	adds	r3, #20
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800185c:	d112      	bne.n	8001884 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f81d 	bl	800189e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186c:	3314      	adds	r3, #20
 800186e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001872:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr

0800189e <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue: PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	460b      	mov	r3, r1
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b82      	cmp	r3, #130	; 0x82
 80018d0:	d101      	bne.n	80018d6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80018d2:	2302      	movs	r3, #2
 80018d4:	e050      	b.n	8001978 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2282      	movs	r2, #130	; 0x82
 80018da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 031c 	and.w	r3, r3, #28
 80018ec:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8a1b      	ldrh	r3, [r3, #16]
 80018f2:	02db      	lsls	r3, r3, #11
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80018fc:	897b      	ldrh	r3, [r7, #10]
 80018fe:	019b      	lsls	r3, r3, #6
 8001900:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	4313      	orrs	r3, r2
 8001908:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f023 0302 	bic.w	r3, r3, #2
 8001910:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001922:	f7ff f987 	bl	8000c34 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001928:	e015      	b.n	8001956 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800192a:	f7ff f983 	bl	8000c34 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001938:	d309      	bcc.n	800194e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e014      	b.n	8001978 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1e4      	bne.n	800192a <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	b29b      	uxth	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	460b      	mov	r3, r1
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b42      	cmp	r3, #66	; 0x42
 80019a0:	d101      	bne.n	80019a6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80019a2:	2302      	movs	r3, #2
 80019a4:	e04e      	b.n	8001a44 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2242      	movs	r2, #66	; 0x42
 80019aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f003 031c 	and.w	r3, r3, #28
 80019bc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8a1b      	ldrh	r3, [r3, #16]
 80019c2:	02db      	lsls	r3, r3, #11
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80019cc:	897b      	ldrh	r3, [r7, #10]
 80019ce:	019b      	lsls	r3, r3, #6
 80019d0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019fc:	f7ff f91a 	bl	8000c34 <HAL_GetTick>
 8001a00:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a02:	e015      	b.n	8001a30 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001a04:	f7ff f916 	bl	8000c34 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a12:	d309      	bcc.n	8001a28 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e00d      	b.n	8001a44 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1e4      	bne.n	8001a04 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_ETH_Start>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_ETH_Start+0x16>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e01f      	b.n	8001aa2 <HAL_ETH_Start+0x56>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 fb3e 	bl	80020f4 <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 fb75 	bl	8002168 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 fc08 	bl	8002294 <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 fba9 	bl	80021dc <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fbd4 	bl	8002238 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d101      	bne.n	8001ac0 <HAL_ETH_Stop+0x16>
 8001abc:	2302      	movs	r3, #2
 8001abe:	e01f      	b.n	8001b00 <HAL_ETH_Stop+0x56>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2202      	movs	r2, #2
 8001acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fb9a 	bl	800220a <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 fbc5 	bl	8002266 <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 fb60 	bl	80021a2 <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 fbd6 	bl	8002294 <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f000 fb20 	bl	800212e <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf: MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_ETH_ConfigMAC+0x1c>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e0e4      	b.n	8001cee <HAL_ETH_ConfigMAC+0x1e6>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 80b1 	beq.w	8001c9e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	4b6c      	ldr	r3, [pc, #432]	; (8001cf8 <HAL_ETH_ConfigMAC+0x1f0>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001b54:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8001b5a:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8001b60:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8001b66:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8001b6c:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8001b72:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8001b78:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8001b7e:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8001b84:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8001b8a:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 8001b90:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 8001b96:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bae:	2001      	movs	r0, #1
 8001bb0:	f7ff f84a 	bl	8000c48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001bc4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001bca:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001bd0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8001bd6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001bdc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001be2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001bee:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001bf0:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f7ff f824 	bl	8000c48 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c10:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c1a:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c32:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c38:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001c3e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001c44:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 8001c4a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001c50:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c68:	2001      	movs	r0, #1
 8001c6a:	f7fe ffed 	bl	8000c48 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	430a      	orrs	r2, r1
 8001c84:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c8e:	2001      	movs	r0, #1
 8001c90:	f7fe ffda 	bl	8000c48 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	61da      	str	r2, [r3, #28]
 8001c9c:	e01e      	b.n	8001cdc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001cac:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f7fe ffba 	bl	8000c48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	ff20810f 	.word	0xff20810f

08001cfc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err: Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b0b0      	sub	sp, #192	; 0xc0
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d007      	beq.n	8001d22 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d18:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d20:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d103      	bne.n	8001d4a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d46:	663b      	str	r3, [r7, #96]	; 0x60
 8001d48:	e001      	b.n	8001d4e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d52:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001d68:	2340      	movs	r3, #64	; 0x40
 8001d6a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001dae:	2300      	movs	r3, #0
 8001db0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001dd0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dd4:	4baa      	ldr	r3, [pc, #680]	; (8002080 <ETH_MACDMAConfig+0x384>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001ddc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8001dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001de0:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8001de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8001de4:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8001de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8001de8:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8001dee:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8001df0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8001df2:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8001df4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8001df6:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8001dfc:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8001dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8001e00:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8001e02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8001e04:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8001e06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8001e08:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8001e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8001e0c:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8001e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8001e10:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001e12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e16:	4313      	orrs	r3, r2
 8001e18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e24:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e30:	2001      	movs	r0, #1
 8001e32:	f7fe ff09 	bl	8000c48 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e3e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001e40:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001e42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001e44:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001e46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001e48:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8001e4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001e4e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001e50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8001e54:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001e56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001e5a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001e5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001e60:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001e64:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001e6c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001e6e:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f7fe fee4 	bl	8000c48 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e88:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e92:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001e9c:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ea8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eac:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001eb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eba:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001ebc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001ec0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001ec2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001ec6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8001ec8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001ecc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8001ed2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8001ed4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001ed8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001eda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eec:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f7fe fea5 	bl	8000c48 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f06:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001f08:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 8001f0c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f22:	2001      	movs	r0, #1
 8001f24:	f7fe fe90 	bl	8000c48 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f30:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f3a:	613b      	str	r3, [r7, #16]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8001f40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f44:	61bb      	str	r3, [r7, #24]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	623b      	str	r3, [r7, #32]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f52:	2300      	movs	r3, #0
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001f56:	2304      	movs	r3, #4
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001f5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f5e:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001f60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f6a:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f70:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f76:	2300      	movs	r3, #0
 8001f78:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f82:	3318      	adds	r3, #24
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f8e:	4b3d      	ldr	r3, [pc, #244]	; (8002084 <ETH_MACDMAConfig+0x388>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001f96:	68fa      	ldr	r2, [r7, #12]
                        dmainit.ReceiveStoreForward |
 8001f98:	693b      	ldr	r3, [r7, #16]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001f9a:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8001f9c:	697b      	ldr	r3, [r7, #20]
                        dmainit.ReceiveStoreForward |
 8001f9e:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8001fa0:	69bb      	ldr	r3, [r7, #24]
                        dmainit.FlushReceivedFrame |
 8001fa2:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8001fa4:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitStoreForward |
 8001fa6:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.TransmitThresholdControl |
 8001faa:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardErrorFrames |
 8001fae:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8001fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ForwardUndersizedGoodFrames |
 8001fb2:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8001fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                        dmainit.ReceiveThresholdControl |
 8001fb6:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001fb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fca:	3318      	adds	r3, #24
 8001fcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fd0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fda:	3318      	adds	r3, #24
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	f7fe fe30 	bl	8000c48 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff0:	3318      	adds	r3, #24
 8001ff2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ff6:	601a      	str	r2, [r3, #0]
  /* Set the FB bit according to ETH FixedBurst value */
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
                                        dmainit.FixedBurst |
 8001ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001ffc:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.FixedBurst |
 8002000:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8002002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002004:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8002006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002008:	009b      	lsls	r3, r3, #2
                                        dmainit.TxDMABurstLength |
 800200a:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 800200c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 800200e:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800201c:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800202c:	2001      	movs	r0, #1
 800202e:	f7fe fe0b 	bl	8000c48 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800203a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800203e:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d10f      	bne.n	8002068 <ETH_MACDMAConfig+0x36c>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002050:	331c      	adds	r3, #28
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800205c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002064:	331c      	adds	r3, #28
 8002066:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	461a      	mov	r2, r3
 800206e:	2100      	movs	r1, #0
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f809 	bl	8002088 <ETH_MACAddressConfig>
}
 8002076:	bf00      	nop
 8002078:	37c0      	adds	r7, #192	; 0xc0
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	ff20810f 	.word	0xff20810f
 8002084:	f8de3f23 	.word	0xf8de3f23

08002088 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr: Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3305      	adds	r3, #5
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	3204      	adds	r2, #4
 80020a0:	7812      	ldrb	r2, [r2, #0]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	4b10      	ldr	r3, [pc, #64]	; (80020ec <ETH_MACAddressConfig+0x64>)
 80020aa:	4413      	add	r3, r2
 80020ac:	461a      	mov	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3303      	adds	r3, #3
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	061a      	lsls	r2, r3, #24
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3302      	adds	r3, #2
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	041b      	lsls	r3, r3, #16
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3301      	adds	r3, #1
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	4313      	orrs	r3, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	7812      	ldrb	r2, [r2, #0]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <ETH_MACAddressConfig+0x68>)
 80020da:	4413      	add	r3, r2
 80020dc:	461a      	mov	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	6013      	str	r3, [r2, #0]
}
 80020e2:	bf00      	nop
 80020e4:	371c      	adds	r7, #28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	40028040 	.word	0x40028040
 80020f0:	40028044 	.word	0x40028044

080020f4 <ETH_MACTransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0208 	orr.w	r2, r2, #8
 800210e:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002118:	2001      	movs	r0, #1
 800211a:	f000 f8e5 	bl	80022e8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	601a      	str	r2, [r3, #0]
}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <ETH_MACTransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b084      	sub	sp, #16
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0208 	bic.w	r2, r2, #8
 8002148:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002152:	2001      	movs	r0, #1
 8002154:	f000 f8c8 	bl	80022e8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	601a      	str	r2, [r3, #0]
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <ETH_MACReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0204 	orr.w	r2, r2, #4
 8002182:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800218c:	2001      	movs	r0, #1
 800218e:	f000 f8ab 	bl	80022e8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	601a      	str	r2, [r3, #0]
}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <ETH_MACReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0204 	bic.w	r2, r2, #4
 80021bc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80021c6:	2001      	movs	r0, #1
 80021c8:	f000 f88e 	bl	80022e8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	601a      	str	r2, [r3, #0]
}
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <ETH_DMATransmissionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ec:	3318      	adds	r3, #24
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021fc:	3318      	adds	r3, #24
 80021fe:	601a      	str	r2, [r3, #0]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr

0800220a <ETH_DMATransmissionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800221a:	3318      	adds	r3, #24
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800222a:	3318      	adds	r3, #24
 800222c:	601a      	str	r2, [r3, #0]
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <ETH_DMAReceptionEnable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002248:	3318      	adds	r3, #24
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0202 	orr.w	r2, r2, #2
 8002254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002258:	3318      	adds	r3, #24
 800225a:	601a      	str	r2, [r3, #0]
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <ETH_DMAReceptionDisable>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002276:	3318      	adds	r3, #24
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0202 	bic.w	r2, r2, #2
 8002282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002286:	3318      	adds	r3, #24
 8002288:	601a      	str	r2, [r3, #0]
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <ETH_FlushTransmitFIFO>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a8:	3318      	adds	r3, #24
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80022b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b8:	3318      	adds	r3, #24
 80022ba:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c4:	3318      	adds	r3, #24
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80022ca:	2001      	movs	r0, #1
 80022cc:	f000 f80c 	bl	80022e8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022da:	3318      	adds	r3, #24
 80022dc:	601a      	str	r2, [r3, #0]
}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022f0:	4b0a      	ldr	r3, [pc, #40]	; (800231c <ETH_Delay+0x34>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <ETH_Delay+0x38>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0a5b      	lsrs	r3, r3, #9
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002304:	bf00      	nop
  }
  while (Delay --);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	1e5a      	subs	r2, r3, #1
 800230a:	60fa      	str	r2, [r7, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f9      	bne.n	8002304 <ETH_Delay+0x1c>
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	bc80      	pop	{r7}
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000000 	.word	0x20000000
 8002320:	10624dd3 	.word	0x10624dd3

08002324 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002324:	b480      	push	{r7}
 8002326:	b08b      	sub	sp, #44	; 0x2c
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800232e:	2300      	movs	r3, #0
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002336:	e127      	b.n	8002588 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002338:	2201      	movs	r2, #1
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	429a      	cmp	r2, r3
 8002352:	f040 8116 	bne.w	8002582 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b12      	cmp	r3, #18
 800235c:	d034      	beq.n	80023c8 <HAL_GPIO_Init+0xa4>
 800235e:	2b12      	cmp	r3, #18
 8002360:	d80d      	bhi.n	800237e <HAL_GPIO_Init+0x5a>
 8002362:	2b02      	cmp	r3, #2
 8002364:	d02b      	beq.n	80023be <HAL_GPIO_Init+0x9a>
 8002366:	2b02      	cmp	r3, #2
 8002368:	d804      	bhi.n	8002374 <HAL_GPIO_Init+0x50>
 800236a:	2b00      	cmp	r3, #0
 800236c:	d031      	beq.n	80023d2 <HAL_GPIO_Init+0xae>
 800236e:	2b01      	cmp	r3, #1
 8002370:	d01c      	beq.n	80023ac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002372:	e048      	b.n	8002406 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002374:	2b03      	cmp	r3, #3
 8002376:	d043      	beq.n	8002400 <HAL_GPIO_Init+0xdc>
 8002378:	2b11      	cmp	r3, #17
 800237a:	d01b      	beq.n	80023b4 <HAL_GPIO_Init+0x90>
          break;
 800237c:	e043      	b.n	8002406 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800237e:	4a89      	ldr	r2, [pc, #548]	; (80025a4 <HAL_GPIO_Init+0x280>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d026      	beq.n	80023d2 <HAL_GPIO_Init+0xae>
 8002384:	4a87      	ldr	r2, [pc, #540]	; (80025a4 <HAL_GPIO_Init+0x280>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d806      	bhi.n	8002398 <HAL_GPIO_Init+0x74>
 800238a:	4a87      	ldr	r2, [pc, #540]	; (80025a8 <HAL_GPIO_Init+0x284>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d020      	beq.n	80023d2 <HAL_GPIO_Init+0xae>
 8002390:	4a86      	ldr	r2, [pc, #536]	; (80025ac <HAL_GPIO_Init+0x288>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d01d      	beq.n	80023d2 <HAL_GPIO_Init+0xae>
          break;
 8002396:	e036      	b.n	8002406 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002398:	4a85      	ldr	r2, [pc, #532]	; (80025b0 <HAL_GPIO_Init+0x28c>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d019      	beq.n	80023d2 <HAL_GPIO_Init+0xae>
 800239e:	4a85      	ldr	r2, [pc, #532]	; (80025b4 <HAL_GPIO_Init+0x290>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d016      	beq.n	80023d2 <HAL_GPIO_Init+0xae>
 80023a4:	4a84      	ldr	r2, [pc, #528]	; (80025b8 <HAL_GPIO_Init+0x294>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d013      	beq.n	80023d2 <HAL_GPIO_Init+0xae>
          break;
 80023aa:	e02c      	b.n	8002406 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	623b      	str	r3, [r7, #32]
          break;
 80023b2:	e028      	b.n	8002406 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	3304      	adds	r3, #4
 80023ba:	623b      	str	r3, [r7, #32]
          break;
 80023bc:	e023      	b.n	8002406 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	3308      	adds	r3, #8
 80023c4:	623b      	str	r3, [r7, #32]
          break;
 80023c6:	e01e      	b.n	8002406 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	330c      	adds	r3, #12
 80023ce:	623b      	str	r3, [r7, #32]
          break;
 80023d0:	e019      	b.n	8002406 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d102      	bne.n	80023e0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023da:	2304      	movs	r3, #4
 80023dc:	623b      	str	r3, [r7, #32]
          break;
 80023de:	e012      	b.n	8002406 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d105      	bne.n	80023f4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023e8:	2308      	movs	r3, #8
 80023ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	611a      	str	r2, [r3, #16]
          break;
 80023f2:	e008      	b.n	8002406 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023f4:	2308      	movs	r3, #8
 80023f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	615a      	str	r2, [r3, #20]
          break;
 80023fe:	e002      	b.n	8002406 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002400:	2300      	movs	r3, #0
 8002402:	623b      	str	r3, [r7, #32]
          break;
 8002404:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2bff      	cmp	r3, #255	; 0xff
 800240a:	d801      	bhi.n	8002410 <HAL_GPIO_Init+0xec>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	e001      	b.n	8002414 <HAL_GPIO_Init+0xf0>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3304      	adds	r3, #4
 8002414:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	2bff      	cmp	r3, #255	; 0xff
 800241a:	d802      	bhi.n	8002422 <HAL_GPIO_Init+0xfe>
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	e002      	b.n	8002428 <HAL_GPIO_Init+0x104>
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	3b08      	subs	r3, #8
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	210f      	movs	r1, #15
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	fa01 f303 	lsl.w	r3, r1, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	401a      	ands	r2, r3
 800243a:	6a39      	ldr	r1, [r7, #32]
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	431a      	orrs	r2, r3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8096 	beq.w	8002582 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002456:	4b59      	ldr	r3, [pc, #356]	; (80025bc <HAL_GPIO_Init+0x298>)
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	4a58      	ldr	r2, [pc, #352]	; (80025bc <HAL_GPIO_Init+0x298>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	6193      	str	r3, [r2, #24]
 8002462:	4b56      	ldr	r3, [pc, #344]	; (80025bc <HAL_GPIO_Init+0x298>)
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800246e:	4a54      	ldr	r2, [pc, #336]	; (80025c0 <HAL_GPIO_Init+0x29c>)
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	3302      	adds	r3, #2
 8002476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	f003 0303 	and.w	r3, r3, #3
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	220f      	movs	r2, #15
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	43db      	mvns	r3, r3
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4013      	ands	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4b      	ldr	r2, [pc, #300]	; (80025c4 <HAL_GPIO_Init+0x2a0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d013      	beq.n	80024c2 <HAL_GPIO_Init+0x19e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4a      	ldr	r2, [pc, #296]	; (80025c8 <HAL_GPIO_Init+0x2a4>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00d      	beq.n	80024be <HAL_GPIO_Init+0x19a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a49      	ldr	r2, [pc, #292]	; (80025cc <HAL_GPIO_Init+0x2a8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d007      	beq.n	80024ba <HAL_GPIO_Init+0x196>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a48      	ldr	r2, [pc, #288]	; (80025d0 <HAL_GPIO_Init+0x2ac>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d101      	bne.n	80024b6 <HAL_GPIO_Init+0x192>
 80024b2:	2303      	movs	r3, #3
 80024b4:	e006      	b.n	80024c4 <HAL_GPIO_Init+0x1a0>
 80024b6:	2304      	movs	r3, #4
 80024b8:	e004      	b.n	80024c4 <HAL_GPIO_Init+0x1a0>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e002      	b.n	80024c4 <HAL_GPIO_Init+0x1a0>
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <HAL_GPIO_Init+0x1a0>
 80024c2:	2300      	movs	r3, #0
 80024c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c6:	f002 0203 	and.w	r2, r2, #3
 80024ca:	0092      	lsls	r2, r2, #2
 80024cc:	4093      	lsls	r3, r2
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024d4:	493a      	ldr	r1, [pc, #232]	; (80025c0 <HAL_GPIO_Init+0x29c>)
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	089b      	lsrs	r3, r3, #2
 80024da:	3302      	adds	r3, #2
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d006      	beq.n	80024fc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024ee:	4b39      	ldr	r3, [pc, #228]	; (80025d4 <HAL_GPIO_Init+0x2b0>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	4938      	ldr	r1, [pc, #224]	; (80025d4 <HAL_GPIO_Init+0x2b0>)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	600b      	str	r3, [r1, #0]
 80024fa:	e006      	b.n	800250a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024fc:	4b35      	ldr	r3, [pc, #212]	; (80025d4 <HAL_GPIO_Init+0x2b0>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	43db      	mvns	r3, r3
 8002504:	4933      	ldr	r1, [pc, #204]	; (80025d4 <HAL_GPIO_Init+0x2b0>)
 8002506:	4013      	ands	r3, r2
 8002508:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d006      	beq.n	8002524 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002516:	4b2f      	ldr	r3, [pc, #188]	; (80025d4 <HAL_GPIO_Init+0x2b0>)
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	492e      	ldr	r1, [pc, #184]	; (80025d4 <HAL_GPIO_Init+0x2b0>)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
 8002522:	e006      	b.n	8002532 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002524:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <HAL_GPIO_Init+0x2b0>)
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	43db      	mvns	r3, r3
 800252c:	4929      	ldr	r1, [pc, #164]	; (80025d4 <HAL_GPIO_Init+0x2b0>)
 800252e:	4013      	ands	r3, r2
 8002530:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d006      	beq.n	800254c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800253e:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <HAL_GPIO_Init+0x2b0>)
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	4924      	ldr	r1, [pc, #144]	; (80025d4 <HAL_GPIO_Init+0x2b0>)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
 800254a:	e006      	b.n	800255a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800254c:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <HAL_GPIO_Init+0x2b0>)
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	43db      	mvns	r3, r3
 8002554:	491f      	ldr	r1, [pc, #124]	; (80025d4 <HAL_GPIO_Init+0x2b0>)
 8002556:	4013      	ands	r3, r2
 8002558:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d006      	beq.n	8002574 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002566:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <HAL_GPIO_Init+0x2b0>)
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	491a      	ldr	r1, [pc, #104]	; (80025d4 <HAL_GPIO_Init+0x2b0>)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	60cb      	str	r3, [r1, #12]
 8002572:	e006      	b.n	8002582 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002574:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <HAL_GPIO_Init+0x2b0>)
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	43db      	mvns	r3, r3
 800257c:	4915      	ldr	r1, [pc, #84]	; (80025d4 <HAL_GPIO_Init+0x2b0>)
 800257e:	4013      	ands	r3, r2
 8002580:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	3301      	adds	r3, #1
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	fa22 f303 	lsr.w	r3, r2, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	f47f aed0 	bne.w	8002338 <HAL_GPIO_Init+0x14>
  }
}
 8002598:	bf00      	nop
 800259a:	372c      	adds	r7, #44	; 0x2c
 800259c:	46bd      	mov	sp, r7
 800259e:	bc80      	pop	{r7}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	10210000 	.word	0x10210000
 80025a8:	10110000 	.word	0x10110000
 80025ac:	10120000 	.word	0x10120000
 80025b0:	10310000 	.word	0x10310000
 80025b4:	10320000 	.word	0x10320000
 80025b8:	10220000 	.word	0x10220000
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40010000 	.word	0x40010000
 80025c4:	40010800 	.word	0x40010800
 80025c8:	40010c00 	.word	0x40010c00
 80025cc:	40011000 	.word	0x40011000
 80025d0:	40011400 	.word	0x40011400
 80025d4:	40010400 	.word	0x40010400

080025d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
 80025e4:	4613      	mov	r3, r2
 80025e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025e8:	787b      	ldrb	r3, [r7, #1]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025f4:	e003      	b.n	80025fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025f6:	887b      	ldrh	r3, [r7, #2]
 80025f8:	041a      	lsls	r2, r3, #16
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	611a      	str	r2, [r3, #16]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e304      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 8087 	beq.w	8002736 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002628:	4b92      	ldr	r3, [pc, #584]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	2b04      	cmp	r3, #4
 8002632:	d00c      	beq.n	800264e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002634:	4b8f      	ldr	r3, [pc, #572]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b08      	cmp	r3, #8
 800263e:	d112      	bne.n	8002666 <HAL_RCC_OscConfig+0x5e>
 8002640:	4b8c      	ldr	r3, [pc, #560]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264c:	d10b      	bne.n	8002666 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264e:	4b89      	ldr	r3, [pc, #548]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d06c      	beq.n	8002734 <HAL_RCC_OscConfig+0x12c>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d168      	bne.n	8002734 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e2de      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800266e:	d106      	bne.n	800267e <HAL_RCC_OscConfig+0x76>
 8002670:	4b80      	ldr	r3, [pc, #512]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a7f      	ldr	r2, [pc, #508]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	e02e      	b.n	80026dc <HAL_RCC_OscConfig+0xd4>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10c      	bne.n	80026a0 <HAL_RCC_OscConfig+0x98>
 8002686:	4b7b      	ldr	r3, [pc, #492]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a7a      	ldr	r2, [pc, #488]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 800268c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b78      	ldr	r3, [pc, #480]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a77      	ldr	r2, [pc, #476]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e01d      	b.n	80026dc <HAL_RCC_OscConfig+0xd4>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0xbc>
 80026aa:	4b72      	ldr	r3, [pc, #456]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a71      	ldr	r2, [pc, #452]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	4b6f      	ldr	r3, [pc, #444]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a6e      	ldr	r2, [pc, #440]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	e00b      	b.n	80026dc <HAL_RCC_OscConfig+0xd4>
 80026c4:	4b6b      	ldr	r3, [pc, #428]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a6a      	ldr	r2, [pc, #424]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 80026ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b68      	ldr	r3, [pc, #416]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a67      	ldr	r2, [pc, #412]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 80026d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d013      	beq.n	800270c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7fe faa6 	bl	8000c34 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ec:	f7fe faa2 	bl	8000c34 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	; 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e292      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	4b5d      	ldr	r3, [pc, #372]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0xe4>
 800270a:	e014      	b.n	8002736 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7fe fa92 	bl	8000c34 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002714:	f7fe fa8e 	bl	8000c34 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	; 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e27e      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002726:	4b53      	ldr	r3, [pc, #332]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x10c>
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d063      	beq.n	800280a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002742:	4b4c      	ldr	r3, [pc, #304]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800274e:	4b49      	ldr	r3, [pc, #292]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b08      	cmp	r3, #8
 8002758:	d11c      	bne.n	8002794 <HAL_RCC_OscConfig+0x18c>
 800275a:	4b46      	ldr	r3, [pc, #280]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d116      	bne.n	8002794 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002766:	4b43      	ldr	r3, [pc, #268]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d005      	beq.n	800277e <HAL_RCC_OscConfig+0x176>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d001      	beq.n	800277e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e252      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277e:	4b3d      	ldr	r3, [pc, #244]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4939      	ldr	r1, [pc, #228]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002792:	e03a      	b.n	800280a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d020      	beq.n	80027de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800279c:	4b36      	ldr	r3, [pc, #216]	; (8002878 <HAL_RCC_OscConfig+0x270>)
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a2:	f7fe fa47 	bl	8000c34 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027aa:	f7fe fa43 	bl	8000c34 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e233      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027bc:	4b2d      	ldr	r3, [pc, #180]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c8:	4b2a      	ldr	r3, [pc, #168]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4927      	ldr	r1, [pc, #156]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]
 80027dc:	e015      	b.n	800280a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027de:	4b26      	ldr	r3, [pc, #152]	; (8002878 <HAL_RCC_OscConfig+0x270>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e4:	f7fe fa26 	bl	8000c34 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ec:	f7fe fa22 	bl	8000c34 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e212      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fe:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d03a      	beq.n	800288c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d019      	beq.n	8002852 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281e:	4b17      	ldr	r3, [pc, #92]	; (800287c <HAL_RCC_OscConfig+0x274>)
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002824:	f7fe fa06 	bl	8000c34 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800282c:	f7fe fa02 	bl	8000c34 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e1f2      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <HAL_RCC_OscConfig+0x26c>)
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800284a:	2001      	movs	r0, #1
 800284c:	f000 fc32 	bl	80030b4 <RCC_Delay>
 8002850:	e01c      	b.n	800288c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <HAL_RCC_OscConfig+0x274>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002858:	f7fe f9ec 	bl	8000c34 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800285e:	e00f      	b.n	8002880 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002860:	f7fe f9e8 	bl	8000c34 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d908      	bls.n	8002880 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e1d8      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
 8002872:	bf00      	nop
 8002874:	40021000 	.word	0x40021000
 8002878:	42420000 	.word	0x42420000
 800287c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002880:	4b9b      	ldr	r3, [pc, #620]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e9      	bne.n	8002860 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 80a6 	beq.w	80029e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800289a:	2300      	movs	r3, #0
 800289c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800289e:	4b94      	ldr	r3, [pc, #592]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10d      	bne.n	80028c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028aa:	4b91      	ldr	r3, [pc, #580]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	4a90      	ldr	r2, [pc, #576]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 80028b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b4:	61d3      	str	r3, [r2, #28]
 80028b6:	4b8e      	ldr	r3, [pc, #568]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c2:	2301      	movs	r3, #1
 80028c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c6:	4b8b      	ldr	r3, [pc, #556]	; (8002af4 <HAL_RCC_OscConfig+0x4ec>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d118      	bne.n	8002904 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d2:	4b88      	ldr	r3, [pc, #544]	; (8002af4 <HAL_RCC_OscConfig+0x4ec>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a87      	ldr	r2, [pc, #540]	; (8002af4 <HAL_RCC_OscConfig+0x4ec>)
 80028d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028de:	f7fe f9a9 	bl	8000c34 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e6:	f7fe f9a5 	bl	8000c34 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b64      	cmp	r3, #100	; 0x64
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e195      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f8:	4b7e      	ldr	r3, [pc, #504]	; (8002af4 <HAL_RCC_OscConfig+0x4ec>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0f0      	beq.n	80028e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d106      	bne.n	800291a <HAL_RCC_OscConfig+0x312>
 800290c:	4b78      	ldr	r3, [pc, #480]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4a77      	ldr	r2, [pc, #476]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6213      	str	r3, [r2, #32]
 8002918:	e02d      	b.n	8002976 <HAL_RCC_OscConfig+0x36e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10c      	bne.n	800293c <HAL_RCC_OscConfig+0x334>
 8002922:	4b73      	ldr	r3, [pc, #460]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	4a72      	ldr	r2, [pc, #456]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	6213      	str	r3, [r2, #32]
 800292e:	4b70      	ldr	r3, [pc, #448]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	4a6f      	ldr	r2, [pc, #444]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002934:	f023 0304 	bic.w	r3, r3, #4
 8002938:	6213      	str	r3, [r2, #32]
 800293a:	e01c      	b.n	8002976 <HAL_RCC_OscConfig+0x36e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b05      	cmp	r3, #5
 8002942:	d10c      	bne.n	800295e <HAL_RCC_OscConfig+0x356>
 8002944:	4b6a      	ldr	r3, [pc, #424]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	4a69      	ldr	r2, [pc, #420]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 800294a:	f043 0304 	orr.w	r3, r3, #4
 800294e:	6213      	str	r3, [r2, #32]
 8002950:	4b67      	ldr	r3, [pc, #412]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4a66      	ldr	r2, [pc, #408]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002956:	f043 0301 	orr.w	r3, r3, #1
 800295a:	6213      	str	r3, [r2, #32]
 800295c:	e00b      	b.n	8002976 <HAL_RCC_OscConfig+0x36e>
 800295e:	4b64      	ldr	r3, [pc, #400]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4a63      	ldr	r2, [pc, #396]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	6213      	str	r3, [r2, #32]
 800296a:	4b61      	ldr	r3, [pc, #388]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	4a60      	ldr	r2, [pc, #384]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002970:	f023 0304 	bic.w	r3, r3, #4
 8002974:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d015      	beq.n	80029aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297e:	f7fe f959 	bl	8000c34 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002984:	e00a      	b.n	800299c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002986:	f7fe f955 	bl	8000c34 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	f241 3288 	movw	r2, #5000	; 0x1388
 8002994:	4293      	cmp	r3, r2
 8002996:	d901      	bls.n	800299c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e143      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299c:	4b54      	ldr	r3, [pc, #336]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0ee      	beq.n	8002986 <HAL_RCC_OscConfig+0x37e>
 80029a8:	e014      	b.n	80029d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029aa:	f7fe f943 	bl	8000c34 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b0:	e00a      	b.n	80029c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b2:	f7fe f93f 	bl	8000c34 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e12d      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c8:	4b49      	ldr	r3, [pc, #292]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1ee      	bne.n	80029b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d105      	bne.n	80029e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029da:	4b45      	ldr	r3, [pc, #276]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	4a44      	ldr	r2, [pc, #272]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 80029e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e4:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 808c 	beq.w	8002b08 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80029f0:	4b3f      	ldr	r3, [pc, #252]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029fc:	d10e      	bne.n	8002a1c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80029fe:	4b3c      	ldr	r3, [pc, #240]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d108      	bne.n	8002a1c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002a0a:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a16:	d101      	bne.n	8002a1c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e103      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d14e      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002a24:	4b32      	ldr	r3, [pc, #200]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d009      	beq.n	8002a44 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002a30:	4b2f      	ldr	r3, [pc, #188]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0ef      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002a44:	4b2c      	ldr	r3, [pc, #176]	; (8002af8 <HAL_RCC_OscConfig+0x4f0>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4a:	f7fe f8f3 	bl	8000c34 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002a52:	f7fe f8ef 	bl	8000c34 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b64      	cmp	r3, #100	; 0x64
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e0df      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002a64:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f0      	bne.n	8002a52 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002a70:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7c:	491c      	ldr	r1, [pc, #112]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002a82:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	4918      	ldr	r1, [pc, #96]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002a94:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HAL_RCC_OscConfig+0x4f0>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7fe f8cb 	bl	8000c34 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002aa2:	f7fe f8c7 	bl	8000c34 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b64      	cmp	r3, #100	; 0x64
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e0b7      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002ab4:	4b0e      	ldr	r3, [pc, #56]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x49a>
 8002ac0:	e022      	b.n	8002b08 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <HAL_RCC_OscConfig+0x4e8>)
 8002ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002acc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_RCC_OscConfig+0x4f0>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7fe f8ae 	bl	8000c34 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002ada:	e00f      	b.n	8002afc <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002adc:	f7fe f8aa 	bl	8000c34 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d908      	bls.n	8002afc <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e09a      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40007000 	.word	0x40007000
 8002af8:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002afc:	4b4b      	ldr	r3, [pc, #300]	; (8002c2c <HAL_RCC_OscConfig+0x624>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1e9      	bne.n	8002adc <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 8088 	beq.w	8002c22 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b12:	4b46      	ldr	r3, [pc, #280]	; (8002c2c <HAL_RCC_OscConfig+0x624>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d068      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d14d      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b26:	4b42      	ldr	r3, [pc, #264]	; (8002c30 <HAL_RCC_OscConfig+0x628>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7fe f882 	bl	8000c34 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b34:	f7fe f87e 	bl	8000c34 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e06e      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b46:	4b39      	ldr	r3, [pc, #228]	; (8002c2c <HAL_RCC_OscConfig+0x624>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5a:	d10f      	bne.n	8002b7c <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002b5c:	4b33      	ldr	r3, [pc, #204]	; (8002c2c <HAL_RCC_OscConfig+0x624>)
 8002b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	4931      	ldr	r1, [pc, #196]	; (8002c2c <HAL_RCC_OscConfig+0x624>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b6a:	4b30      	ldr	r3, [pc, #192]	; (8002c2c <HAL_RCC_OscConfig+0x624>)
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	f023 020f 	bic.w	r2, r3, #15
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	492d      	ldr	r1, [pc, #180]	; (8002c2c <HAL_RCC_OscConfig+0x624>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b7c:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <HAL_RCC_OscConfig+0x624>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	4927      	ldr	r1, [pc, #156]	; (8002c2c <HAL_RCC_OscConfig+0x624>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b94:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <HAL_RCC_OscConfig+0x628>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9a:	f7fe f84b 	bl	8000c34 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ba0:	e008      	b.n	8002bb4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba2:	f7fe f847 	bl	8000c34 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e037      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb4:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <HAL_RCC_OscConfig+0x624>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0f0      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x59a>
 8002bc0:	e02f      	b.n	8002c22 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc2:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <HAL_RCC_OscConfig+0x628>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7fe f834 	bl	8000c34 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd0:	f7fe f830 	bl	8000c34 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e020      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be2:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <HAL_RCC_OscConfig+0x624>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x5c8>
 8002bee:	e018      	b.n	8002c22 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e013      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <HAL_RCC_OscConfig+0x624>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d001      	beq.n	8002c22 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	42420060 	.word	0x42420060

08002c34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0d0      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c48:	4b6a      	ldr	r3, [pc, #424]	; (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d910      	bls.n	8002c78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c56:	4b67      	ldr	r3, [pc, #412]	; (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f023 0207 	bic.w	r2, r3, #7
 8002c5e:	4965      	ldr	r1, [pc, #404]	; (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	4b63      	ldr	r3, [pc, #396]	; (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	683a      	ldr	r2, [r7, #0]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d001      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0b8      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d020      	beq.n	8002cc6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c90:	4b59      	ldr	r3, [pc, #356]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4a58      	ldr	r2, [pc, #352]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c9a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ca8:	4b53      	ldr	r3, [pc, #332]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	4a52      	ldr	r2, [pc, #328]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cae:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cb2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb4:	4b50      	ldr	r3, [pc, #320]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	494d      	ldr	r1, [pc, #308]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d040      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d107      	bne.n	8002cea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cda:	4b47      	ldr	r3, [pc, #284]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d115      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e07f      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf2:	4b41      	ldr	r3, [pc, #260]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e073      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d02:	4b3d      	ldr	r3, [pc, #244]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e06b      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d12:	4b39      	ldr	r3, [pc, #228]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f023 0203 	bic.w	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4936      	ldr	r1, [pc, #216]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d24:	f7fd ff86 	bl	8000c34 <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2c:	f7fd ff82 	bl	8000c34 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e053      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 020c 	and.w	r2, r3, #12
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d1eb      	bne.n	8002d2c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d54:	4b27      	ldr	r3, [pc, #156]	; (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d210      	bcs.n	8002d84 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b24      	ldr	r3, [pc, #144]	; (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 0207 	bic.w	r2, r3, #7
 8002d6a:	4922      	ldr	r1, [pc, #136]	; (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e032      	b.n	8002dea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d90:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4916      	ldr	r1, [pc, #88]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d009      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dae:	4b12      	ldr	r3, [pc, #72]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	490e      	ldr	r1, [pc, #56]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dc2:	f000 f859 	bl	8002e78 <HAL_RCC_GetSysClockFreq>
 8002dc6:	4601      	mov	r1, r0
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	091b      	lsrs	r3, r3, #4
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002dd4:	5cd3      	ldrb	r3, [r2, r3]
 8002dd6:	fa21 f303 	lsr.w	r3, r1, r3
 8002dda:	4a09      	ldr	r2, [pc, #36]	; (8002e00 <HAL_RCC_ClockConfig+0x1cc>)
 8002ddc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <HAL_RCC_ClockConfig+0x1d0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fd9a 	bl	800091c <HAL_InitTick>

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3710      	adds	r7, #16
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40022000 	.word	0x40022000
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	080172ac 	.word	0x080172ac
 8002e00:	20000000 	.word	0x20000000
 8002e04:	20000004 	.word	0x20000004

08002e08 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08a      	sub	sp, #40	; 0x28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8002e14:	f107 0318 	add.w	r3, r7, #24
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002e22:	2302      	movs	r3, #2
 8002e24:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002e26:	2303      	movs	r3, #3
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8002e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e32:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8002e34:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <HAL_RCC_MCOConfig+0x68>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	4a0d      	ldr	r2, [pc, #52]	; (8002e70 <HAL_RCC_MCOConfig+0x68>)
 8002e3a:	f043 0304 	orr.w	r3, r3, #4
 8002e3e:	6193      	str	r3, [r2, #24]
 8002e40:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_RCC_MCOConfig+0x68>)
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002e4c:	f107 0318 	add.w	r3, r7, #24
 8002e50:	4619      	mov	r1, r3
 8002e52:	4808      	ldr	r0, [pc, #32]	; (8002e74 <HAL_RCC_MCOConfig+0x6c>)
 8002e54:	f7ff fa66 	bl	8002324 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <HAL_RCC_MCOConfig+0x68>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8002e60:	4903      	ldr	r1, [pc, #12]	; (8002e70 <HAL_RCC_MCOConfig+0x68>)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
}
 8002e68:	bf00      	nop
 8002e6a:	3728      	adds	r7, #40	; 0x28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40010800 	.word	0x40010800

08002e78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e7a:	b091      	sub	sp, #68	; 0x44
 8002e7c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8002e7e:	4b56      	ldr	r3, [pc, #344]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002e80:	f107 0414 	add.w	r4, r7, #20
 8002e84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e86:	c407      	stmia	r4!, {r0, r1, r2}
 8002e88:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002e8a:	4b54      	ldr	r3, [pc, #336]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x164>)
 8002e8c:	1d3c      	adds	r4, r7, #4
 8002e8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	637b      	str	r3, [r7, #52]	; 0x34
 8002e98:	2300      	movs	r3, #0
 8002e9a:	633b      	str	r3, [r7, #48]	; 0x30
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eac:	2300      	movs	r3, #0
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002eb0:	4b4b      	ldr	r3, [pc, #300]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb8:	f003 030c 	and.w	r3, r3, #12
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	d002      	beq.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x4e>
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d003      	beq.n	8002ecc <HAL_RCC_GetSysClockFreq+0x54>
 8002ec4:	e07f      	b.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ec6:	4b47      	ldr	r3, [pc, #284]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002ec8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002eca:	e07f      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ece:	0c9b      	lsrs	r3, r3, #18
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002ed8:	4413      	add	r3, r2
 8002eda:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002ede:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d065      	beq.n	8002fb6 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002eea:	4b3d      	ldr	r3, [pc, #244]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002efe:	4b38      	ldr	r3, [pc, #224]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d043      	beq.n	8002f92 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002f0a:	4b35      	ldr	r3, [pc, #212]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0e:	091b      	lsrs	r3, r3, #4
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	3301      	adds	r3, #1
 8002f16:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002f18:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1c:	0a1b      	lsrs	r3, r3, #8
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	3302      	adds	r3, #2
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f30:	f04f 0400 	mov.w	r4, #0
 8002f34:	fb03 f502 	mul.w	r5, r3, r2
 8002f38:	fb01 f004 	mul.w	r0, r1, r4
 8002f3c:	4428      	add	r0, r5
 8002f3e:	fba1 3403 	umull	r3, r4, r1, r3
 8002f42:	1902      	adds	r2, r0, r4
 8002f44:	4614      	mov	r4, r2
 8002f46:	4a27      	ldr	r2, [pc, #156]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002f48:	fb02 f104 	mul.w	r1, r2, r4
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	fb02 f203 	mul.w	r2, r2, r3
 8002f52:	440a      	add	r2, r1
 8002f54:	4923      	ldr	r1, [pc, #140]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002f56:	fba3 5601 	umull	r5, r6, r3, r1
 8002f5a:	1993      	adds	r3, r2, r6
 8002f5c:	461e      	mov	r6, r3
 8002f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f60:	4619      	mov	r1, r3
 8002f62:	f04f 0200 	mov.w	r2, #0
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	f04f 0400 	mov.w	r4, #0
 8002f6c:	fb03 fc02 	mul.w	ip, r3, r2
 8002f70:	fb01 f004 	mul.w	r0, r1, r4
 8002f74:	4460      	add	r0, ip
 8002f76:	fba1 3403 	umull	r3, r4, r1, r3
 8002f7a:	1902      	adds	r2, r0, r4
 8002f7c:	4614      	mov	r4, r2
 8002f7e:	461a      	mov	r2, r3
 8002f80:	4623      	mov	r3, r4
 8002f82:	4628      	mov	r0, r5
 8002f84:	4631      	mov	r1, r6
 8002f86:	f7fd f953 	bl	8000230 <__aeabi_uldivmod>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	460c      	mov	r4, r1
 8002f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f90:	e007      	b.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f94:	4a13      	ldr	r2, [pc, #76]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002f96:	fb02 f203 	mul.w	r2, r2, r3
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002fa2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d108      	bne.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8002fae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb0:	085b      	lsrs	r3, r3, #1
 8002fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fb4:	e004      	b.n	8002fc0 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb8:	4a0b      	ldr	r2, [pc, #44]	; (8002fe8 <HAL_RCC_GetSysClockFreq+0x170>)
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8002fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fc4:	e002      	b.n	8002fcc <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <HAL_RCC_GetSysClockFreq+0x174>)
 8002fc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002fca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3744      	adds	r7, #68	; 0x44
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	08014cbc 	.word	0x08014cbc
 8002fdc:	08014ccc 	.word	0x08014ccc
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	017d7840 	.word	0x017d7840
 8002fe8:	003d0900 	.word	0x003d0900
 8002fec:	007a1200 	.word	0x007a1200

08002ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ff4:	4b02      	ldr	r3, [pc, #8]	; (8003000 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr
 8003000:	20000000 	.word	0x20000000

08003004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003008:	f7ff fff2 	bl	8002ff0 <HAL_RCC_GetHCLKFreq>
 800300c:	4601      	mov	r1, r0
 800300e:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	0a1b      	lsrs	r3, r3, #8
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	4a03      	ldr	r2, [pc, #12]	; (8003028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800301a:	5cd3      	ldrb	r3, [r2, r3]
 800301c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003020:	4618      	mov	r0, r3
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40021000 	.word	0x40021000
 8003028:	080172bc 	.word	0x080172bc

0800302c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003030:	f7ff ffde 	bl	8002ff0 <HAL_RCC_GetHCLKFreq>
 8003034:	4601      	mov	r1, r0
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	0adb      	lsrs	r3, r3, #11
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	4a03      	ldr	r2, [pc, #12]	; (8003050 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003042:	5cd3      	ldrb	r3, [r2, r3]
 8003044:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003048:	4618      	mov	r0, r3
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40021000 	.word	0x40021000
 8003050:	080172bc 	.word	0x080172bc

08003054 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	220f      	movs	r2, #15
 8003062:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003064:	4b11      	ldr	r3, [pc, #68]	; (80030ac <HAL_RCC_GetClockConfig+0x58>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 0203 	and.w	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <HAL_RCC_GetClockConfig+0x58>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_RCC_GetClockConfig+0x58>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003088:	4b08      	ldr	r3, [pc, #32]	; (80030ac <HAL_RCC_GetClockConfig+0x58>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	08db      	lsrs	r3, r3, #3
 800308e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0207 	and.w	r2, r3, #7
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40022000 	.word	0x40022000

080030b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <RCC_Delay+0x34>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <RCC_Delay+0x38>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	0a5b      	lsrs	r3, r3, #9
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
 80030ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030d0:	bf00      	nop
  }
  while (Delay --);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	1e5a      	subs	r2, r3, #1
 80030d6:	60fa      	str	r2, [r7, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1f9      	bne.n	80030d0 <RCC_Delay+0x1c>
}
 80030dc:	bf00      	nop
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	20000000 	.word	0x20000000
 80030ec:	10624dd3 	.word	0x10624dd3

080030f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e041      	b.n	8003186 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d106      	bne.n	800311c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f839 	bl	800318e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3304      	adds	r3, #4
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f000 f9bc 	bl	80034ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr

080031a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d001      	beq.n	80031b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e03f      	b.n	8003238 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1b      	ldr	r2, [pc, #108]	; (8003244 <HAL_TIM_Base_Start_IT+0xa4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d013      	beq.n	8003202 <HAL_TIM_Base_Start_IT+0x62>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e2:	d00e      	beq.n	8003202 <HAL_TIM_Base_Start_IT+0x62>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a17      	ldr	r2, [pc, #92]	; (8003248 <HAL_TIM_Base_Start_IT+0xa8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d009      	beq.n	8003202 <HAL_TIM_Base_Start_IT+0x62>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a16      	ldr	r2, [pc, #88]	; (800324c <HAL_TIM_Base_Start_IT+0xac>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d004      	beq.n	8003202 <HAL_TIM_Base_Start_IT+0x62>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a14      	ldr	r2, [pc, #80]	; (8003250 <HAL_TIM_Base_Start_IT+0xb0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d111      	bne.n	8003226 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b06      	cmp	r3, #6
 8003212:	d010      	beq.n	8003236 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003224:	e007      	b.n	8003236 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0201 	orr.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	bc80      	pop	{r7}
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	40012c00 	.word	0x40012c00
 8003248:	40000400 	.word	0x40000400
 800324c:	40000800 	.word	0x40000800
 8003250:	40000c00 	.word	0x40000c00

08003254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b02      	cmp	r3, #2
 8003268:	d122      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b02      	cmp	r3, #2
 8003276:	d11b      	bne.n	80032b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0202 	mvn.w	r2, #2
 8003280:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f8ed 	bl	8003476 <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f8e0 	bl	8003464 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f8ef 	bl	8003488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d122      	bne.n	8003304 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b04      	cmp	r3, #4
 80032ca:	d11b      	bne.n	8003304 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0204 	mvn.w	r2, #4
 80032d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f8c3 	bl	8003476 <HAL_TIM_IC_CaptureCallback>
 80032f0:	e005      	b.n	80032fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f8b6 	bl	8003464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f8c5 	bl	8003488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b08      	cmp	r3, #8
 8003310:	d122      	bne.n	8003358 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b08      	cmp	r3, #8
 800331e:	d11b      	bne.n	8003358 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0208 	mvn.w	r2, #8
 8003328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2204      	movs	r2, #4
 800332e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d003      	beq.n	8003346 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f899 	bl	8003476 <HAL_TIM_IC_CaptureCallback>
 8003344:	e005      	b.n	8003352 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f88c 	bl	8003464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f89b 	bl	8003488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0310 	and.w	r3, r3, #16
 8003362:	2b10      	cmp	r3, #16
 8003364:	d122      	bne.n	80033ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b10      	cmp	r3, #16
 8003372:	d11b      	bne.n	80033ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0210 	mvn.w	r2, #16
 800337c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2208      	movs	r2, #8
 8003382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f86f 	bl	8003476 <HAL_TIM_IC_CaptureCallback>
 8003398:	e005      	b.n	80033a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f862 	bl	8003464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f871 	bl	8003488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d10e      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d107      	bne.n	80033d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0201 	mvn.w	r2, #1
 80033d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fd f9fe 	bl	80007d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e2:	2b80      	cmp	r3, #128	; 0x80
 80033e4:	d10e      	bne.n	8003404 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f0:	2b80      	cmp	r3, #128	; 0x80
 80033f2:	d107      	bne.n	8003404 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f8c9 	bl	8003596 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340e:	2b40      	cmp	r3, #64	; 0x40
 8003410:	d10e      	bne.n	8003430 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341c:	2b40      	cmp	r3, #64	; 0x40
 800341e:	d107      	bne.n	8003430 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f835 	bl	800349a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b20      	cmp	r3, #32
 800343c:	d10e      	bne.n	800345c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b20      	cmp	r3, #32
 800344a:	d107      	bne.n	800345c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f06f 0220 	mvn.w	r2, #32
 8003454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f894 	bl	8003584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr

08003476 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr

08003488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr

0800349a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a2d      	ldr	r2, [pc, #180]	; (8003574 <TIM_Base_SetConfig+0xc8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00f      	beq.n	80034e4 <TIM_Base_SetConfig+0x38>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ca:	d00b      	beq.n	80034e4 <TIM_Base_SetConfig+0x38>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a2a      	ldr	r2, [pc, #168]	; (8003578 <TIM_Base_SetConfig+0xcc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d007      	beq.n	80034e4 <TIM_Base_SetConfig+0x38>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a29      	ldr	r2, [pc, #164]	; (800357c <TIM_Base_SetConfig+0xd0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d003      	beq.n	80034e4 <TIM_Base_SetConfig+0x38>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a28      	ldr	r2, [pc, #160]	; (8003580 <TIM_Base_SetConfig+0xd4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d108      	bne.n	80034f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a1e      	ldr	r2, [pc, #120]	; (8003574 <TIM_Base_SetConfig+0xc8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00f      	beq.n	800351e <TIM_Base_SetConfig+0x72>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003504:	d00b      	beq.n	800351e <TIM_Base_SetConfig+0x72>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a1b      	ldr	r2, [pc, #108]	; (8003578 <TIM_Base_SetConfig+0xcc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d007      	beq.n	800351e <TIM_Base_SetConfig+0x72>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a1a      	ldr	r2, [pc, #104]	; (800357c <TIM_Base_SetConfig+0xd0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d003      	beq.n	800351e <TIM_Base_SetConfig+0x72>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a19      	ldr	r2, [pc, #100]	; (8003580 <TIM_Base_SetConfig+0xd4>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d108      	bne.n	8003530 <TIM_Base_SetConfig+0x84>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	4313      	orrs	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a07      	ldr	r2, [pc, #28]	; (8003574 <TIM_Base_SetConfig+0xc8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d103      	bne.n	8003564 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	691a      	ldr	r2, [r3, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	615a      	str	r2, [r3, #20]
}
 800356a:	bf00      	nop
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	40012c00 	.word	0x40012c00
 8003578:	40000400 	.word	0x40000400
 800357c:	40000800 	.word	0x40000800
 8003580:	40000c00 	.word	0x40000c00

08003584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr

08003596 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800359e:	bf00      	nop
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bc80      	pop	{r7}
 80035a6:	4770      	bx	lr

080035a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e03f      	b.n	800363a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d106      	bne.n	80035d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fd f950 	bl	8000874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2224      	movs	r2, #36	; 0x24
 80035d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 fa5d 	bl	8003aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003600:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695a      	ldr	r2, [r3, #20]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003610:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003620:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2220      	movs	r2, #32
 8003634:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003664:	2300      	movs	r3, #0
 8003666:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10d      	bne.n	8003696 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	f003 0320 	and.w	r3, r3, #32
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_UART_IRQHandler+0x52>
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	f003 0320 	and.w	r3, r3, #32
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f98b 	bl	80039aa <UART_Receive_IT>
      return;
 8003694:	e0d1      	b.n	800383a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80b0 	beq.w	80037fe <HAL_UART_IRQHandler+0x1ba>
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d105      	bne.n	80036b4 <HAL_UART_IRQHandler+0x70>
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 80a5 	beq.w	80037fe <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <HAL_UART_IRQHandler+0x90>
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036cc:	f043 0201 	orr.w	r2, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_UART_IRQHandler+0xb0>
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ec:	f043 0202 	orr.w	r2, r3, #2
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_UART_IRQHandler+0xd0>
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800370c:	f043 0204 	orr.w	r2, r3, #4
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00f      	beq.n	800373e <HAL_UART_IRQHandler+0xfa>
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b00      	cmp	r3, #0
 8003726:	d104      	bne.n	8003732 <HAL_UART_IRQHandler+0xee>
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003736:	f043 0208 	orr.w	r2, r3, #8
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d078      	beq.n	8003838 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	f003 0320 	and.w	r3, r3, #32
 800374c:	2b00      	cmp	r3, #0
 800374e:	d007      	beq.n	8003760 <HAL_UART_IRQHandler+0x11c>
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	f003 0320 	and.w	r3, r3, #32
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f925 	bl	80039aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	bf14      	ite	ne
 800376e:	2301      	movne	r3, #1
 8003770:	2300      	moveq	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d102      	bne.n	8003788 <HAL_UART_IRQHandler+0x144>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d031      	beq.n	80037ec <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f876 	bl	800387a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003798:	2b00      	cmp	r3, #0
 800379a:	d023      	beq.n	80037e4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695a      	ldr	r2, [r3, #20]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037aa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d013      	beq.n	80037dc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b8:	4a21      	ldr	r2, [pc, #132]	; (8003840 <HAL_UART_IRQHandler+0x1fc>)
 80037ba:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7fd fb43 	bl	8000e4c <HAL_DMA_Abort_IT>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d016      	beq.n	80037fa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80037d6:	4610      	mov	r0, r2
 80037d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037da:	e00e      	b.n	80037fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f843 	bl	8003868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e2:	e00a      	b.n	80037fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f83f 	bl	8003868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ea:	e006      	b.n	80037fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f83b 	bl	8003868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80037f8:	e01e      	b.n	8003838 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037fa:	bf00      	nop
    return;
 80037fc:	e01c      	b.n	8003838 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <HAL_UART_IRQHandler+0x1d6>
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 f862 	bl	80038dc <UART_Transmit_IT>
    return;
 8003818:	e00f      	b.n	800383a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_UART_IRQHandler+0x1f6>
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d005      	beq.n	800383a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f8a3 	bl	800397a <UART_EndTransmit_IT>
    return;
 8003834:	bf00      	nop
 8003836:	e000      	b.n	800383a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003838:	bf00      	nop
  }
}
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	080038b5 	.word	0x080038b5

08003844 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	bc80      	pop	{r7}
 8003854:	4770      	bx	lr

08003856 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr

08003868 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68da      	ldr	r2, [r3, #12]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003890:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0201 	bic.w	r2, r2, #1
 80038a0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f7ff ffca 	bl	8003868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038d4:	bf00      	nop
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b21      	cmp	r3, #33	; 0x21
 80038ee:	d13e      	bne.n	800396e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f8:	d114      	bne.n	8003924 <UART_Transmit_IT+0x48>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d110      	bne.n	8003924 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	461a      	mov	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003916:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	1c9a      	adds	r2, r3, #2
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	621a      	str	r2, [r3, #32]
 8003922:	e008      	b.n	8003936 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	1c59      	adds	r1, r3, #1
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6211      	str	r1, [r2, #32]
 800392e:	781a      	ldrb	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29b      	uxth	r3, r3
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	4619      	mov	r1, r3
 8003944:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10f      	bne.n	800396a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003958:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003968:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	e000      	b.n	8003970 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800396e:	2302      	movs	r3, #2
  }
}
 8003970:	4618      	mov	r0, r3
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr

0800397a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003990:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff ff52 	bl	8003844 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b084      	sub	sp, #16
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b22      	cmp	r3, #34	; 0x22
 80039bc:	d170      	bne.n	8003aa0 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c6:	d117      	bne.n	80039f8 <UART_Receive_IT+0x4e>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d113      	bne.n	80039f8 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d8:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	1c9a      	adds	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	629a      	str	r2, [r3, #40]	; 0x28
 80039f6:	e026      	b.n	8003a46 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0a:	d007      	beq.n	8003a1c <UART_Receive_IT+0x72>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <UART_Receive_IT+0x80>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d106      	bne.n	8003a2a <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	701a      	strb	r2, [r3, #0]
 8003a28:	e008      	b.n	8003a3c <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4619      	mov	r1, r3
 8003a54:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d120      	bne.n	8003a9c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0220 	bic.w	r2, r2, #32
 8003a68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0201 	bic.w	r2, r2, #1
 8003a88:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff fedf 	bl	8003856 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e002      	b.n	8003aa2 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	e000      	b.n	8003aa2 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003aa0:	2302      	movs	r3, #2
  }
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ae6:	f023 030c 	bic.w	r3, r3, #12
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	430b      	orrs	r3, r1
 8003af2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699a      	ldr	r2, [r3, #24]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a2c      	ldr	r2, [pc, #176]	; (8003bc0 <UART_SetConfig+0x114>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d103      	bne.n	8003b1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b14:	f7ff fa8a 	bl	800302c <HAL_RCC_GetPCLK2Freq>
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	e002      	b.n	8003b22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b1c:	f7ff fa72 	bl	8003004 <HAL_RCC_GetPCLK1Freq>
 8003b20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4613      	mov	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4413      	add	r3, r2
 8003b2a:	009a      	lsls	r2, r3, #2
 8003b2c:	441a      	add	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b38:	4a22      	ldr	r2, [pc, #136]	; (8003bc4 <UART_SetConfig+0x118>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	0119      	lsls	r1, r3, #4
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	009a      	lsls	r2, r3, #2
 8003b4c:	441a      	add	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b58:	4b1a      	ldr	r3, [pc, #104]	; (8003bc4 <UART_SetConfig+0x118>)
 8003b5a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	2064      	movs	r0, #100	; 0x64
 8003b62:	fb00 f303 	mul.w	r3, r0, r3
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	3332      	adds	r3, #50	; 0x32
 8003b6c:	4a15      	ldr	r2, [pc, #84]	; (8003bc4 <UART_SetConfig+0x118>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b78:	4419      	add	r1, r3
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	009a      	lsls	r2, r3, #2
 8003b84:	441a      	add	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b90:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <UART_SetConfig+0x118>)
 8003b92:	fba3 0302 	umull	r0, r3, r3, r2
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	2064      	movs	r0, #100	; 0x64
 8003b9a:	fb00 f303 	mul.w	r3, r0, r3
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	3332      	adds	r3, #50	; 0x32
 8003ba4:	4a07      	ldr	r2, [pc, #28]	; (8003bc4 <UART_SetConfig+0x118>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	f003 020f 	and.w	r2, r3, #15
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	440a      	add	r2, r1
 8003bb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bb8:	bf00      	nop
 8003bba:	3710      	adds	r7, #16
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	40013800 	.word	0x40013800
 8003bc4:	51eb851f 	.word	0x51eb851f

08003bc8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8003bce:	4ba0      	ldr	r3, [pc, #640]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003bd0:	22c0      	movs	r2, #192	; 0xc0
 8003bd2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8003bd4:	4b9e      	ldr	r3, [pc, #632]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003bd6:	22a8      	movs	r2, #168	; 0xa8
 8003bd8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8003bda:	4b9d      	ldr	r3, [pc, #628]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 200;
 8003be0:	4b9b      	ldr	r3, [pc, #620]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003be2:	22c8      	movs	r2, #200	; 0xc8
 8003be4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8003be6:	4b9b      	ldr	r3, [pc, #620]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003be8:	22ff      	movs	r2, #255	; 0xff
 8003bea:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8003bec:	4b99      	ldr	r3, [pc, #612]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003bee:	22ff      	movs	r2, #255	; 0xff
 8003bf0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8003bf2:	4b98      	ldr	r3, [pc, #608]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003bf4:	22ff      	movs	r2, #255	; 0xff
 8003bf6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8003bf8:	4b96      	ldr	r3, [pc, #600]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8003bfe:	4b96      	ldr	r3, [pc, #600]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8003c04:	4b94      	ldr	r3, [pc, #592]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8003c0a:	4b93      	ldr	r3, [pc, #588]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8003c10:	4b91      	ldr	r3, [pc, #580]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003c16:	2100      	movs	r1, #0
 8003c18:	2000      	movs	r0, #0
 8003c1a:	f006 fa69 	bl	800a0f0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003c1e:	4b8c      	ldr	r3, [pc, #560]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	061a      	lsls	r2, r3, #24
 8003c24:	4b8a      	ldr	r3, [pc, #552]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003c26:	785b      	ldrb	r3, [r3, #1]
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	4b88      	ldr	r3, [pc, #544]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003c2e:	789b      	ldrb	r3, [r3, #2]
 8003c30:	021b      	lsls	r3, r3, #8
 8003c32:	4313      	orrs	r3, r2
 8003c34:	4a86      	ldr	r2, [pc, #536]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003c36:	78d2      	ldrb	r2, [r2, #3]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	061a      	lsls	r2, r3, #24
 8003c3c:	4b84      	ldr	r3, [pc, #528]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	0619      	lsls	r1, r3, #24
 8003c42:	4b83      	ldr	r3, [pc, #524]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003c44:	785b      	ldrb	r3, [r3, #1]
 8003c46:	041b      	lsls	r3, r3, #16
 8003c48:	4319      	orrs	r1, r3
 8003c4a:	4b81      	ldr	r3, [pc, #516]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003c4c:	789b      	ldrb	r3, [r3, #2]
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	430b      	orrs	r3, r1
 8003c52:	497f      	ldr	r1, [pc, #508]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003c54:	78c9      	ldrb	r1, [r1, #3]
 8003c56:	430b      	orrs	r3, r1
 8003c58:	021b      	lsls	r3, r3, #8
 8003c5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	4b7b      	ldr	r3, [pc, #492]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	0619      	lsls	r1, r3, #24
 8003c66:	4b7a      	ldr	r3, [pc, #488]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003c68:	785b      	ldrb	r3, [r3, #1]
 8003c6a:	041b      	lsls	r3, r3, #16
 8003c6c:	4319      	orrs	r1, r3
 8003c6e:	4b78      	ldr	r3, [pc, #480]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003c70:	789b      	ldrb	r3, [r3, #2]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	430b      	orrs	r3, r1
 8003c76:	4976      	ldr	r1, [pc, #472]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003c78:	78c9      	ldrb	r1, [r1, #3]
 8003c7a:	430b      	orrs	r3, r1
 8003c7c:	0a1b      	lsrs	r3, r3, #8
 8003c7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c82:	431a      	orrs	r2, r3
 8003c84:	4b72      	ldr	r3, [pc, #456]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	0619      	lsls	r1, r3, #24
 8003c8a:	4b71      	ldr	r3, [pc, #452]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003c8c:	785b      	ldrb	r3, [r3, #1]
 8003c8e:	041b      	lsls	r3, r3, #16
 8003c90:	4319      	orrs	r1, r3
 8003c92:	4b6f      	ldr	r3, [pc, #444]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003c94:	789b      	ldrb	r3, [r3, #2]
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	496d      	ldr	r1, [pc, #436]	; (8003e50 <MX_LWIP_Init+0x288>)
 8003c9c:	78c9      	ldrb	r1, [r1, #3]
 8003c9e:	430b      	orrs	r3, r1
 8003ca0:	0e1b      	lsrs	r3, r3, #24
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	4a6d      	ldr	r2, [pc, #436]	; (8003e5c <MX_LWIP_Init+0x294>)
 8003ca6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003ca8:	4b6a      	ldr	r3, [pc, #424]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	061a      	lsls	r2, r3, #24
 8003cae:	4b69      	ldr	r3, [pc, #420]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003cb0:	785b      	ldrb	r3, [r3, #1]
 8003cb2:	041b      	lsls	r3, r3, #16
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	4b67      	ldr	r3, [pc, #412]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003cb8:	789b      	ldrb	r3, [r3, #2]
 8003cba:	021b      	lsls	r3, r3, #8
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	4a65      	ldr	r2, [pc, #404]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003cc0:	78d2      	ldrb	r2, [r2, #3]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	061a      	lsls	r2, r3, #24
 8003cc6:	4b63      	ldr	r3, [pc, #396]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	0619      	lsls	r1, r3, #24
 8003ccc:	4b61      	ldr	r3, [pc, #388]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003cce:	785b      	ldrb	r3, [r3, #1]
 8003cd0:	041b      	lsls	r3, r3, #16
 8003cd2:	4319      	orrs	r1, r3
 8003cd4:	4b5f      	ldr	r3, [pc, #380]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003cd6:	789b      	ldrb	r3, [r3, #2]
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	430b      	orrs	r3, r1
 8003cdc:	495d      	ldr	r1, [pc, #372]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003cde:	78c9      	ldrb	r1, [r1, #3]
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	4b5a      	ldr	r3, [pc, #360]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	0619      	lsls	r1, r3, #24
 8003cf0:	4b58      	ldr	r3, [pc, #352]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003cf2:	785b      	ldrb	r3, [r3, #1]
 8003cf4:	041b      	lsls	r3, r3, #16
 8003cf6:	4319      	orrs	r1, r3
 8003cf8:	4b56      	ldr	r3, [pc, #344]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003cfa:	789b      	ldrb	r3, [r3, #2]
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	4954      	ldr	r1, [pc, #336]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003d02:	78c9      	ldrb	r1, [r1, #3]
 8003d04:	430b      	orrs	r3, r1
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	4b51      	ldr	r3, [pc, #324]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	0619      	lsls	r1, r3, #24
 8003d14:	4b4f      	ldr	r3, [pc, #316]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003d16:	785b      	ldrb	r3, [r3, #1]
 8003d18:	041b      	lsls	r3, r3, #16
 8003d1a:	4319      	orrs	r1, r3
 8003d1c:	4b4d      	ldr	r3, [pc, #308]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003d1e:	789b      	ldrb	r3, [r3, #2]
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	430b      	orrs	r3, r1
 8003d24:	494b      	ldr	r1, [pc, #300]	; (8003e54 <MX_LWIP_Init+0x28c>)
 8003d26:	78c9      	ldrb	r1, [r1, #3]
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	0e1b      	lsrs	r3, r3, #24
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	4a4c      	ldr	r2, [pc, #304]	; (8003e60 <MX_LWIP_Init+0x298>)
 8003d30:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003d32:	4b49      	ldr	r3, [pc, #292]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	061a      	lsls	r2, r3, #24
 8003d38:	4b47      	ldr	r3, [pc, #284]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003d3a:	785b      	ldrb	r3, [r3, #1]
 8003d3c:	041b      	lsls	r3, r3, #16
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	4b45      	ldr	r3, [pc, #276]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003d42:	789b      	ldrb	r3, [r3, #2]
 8003d44:	021b      	lsls	r3, r3, #8
 8003d46:	4313      	orrs	r3, r2
 8003d48:	4a43      	ldr	r2, [pc, #268]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003d4a:	78d2      	ldrb	r2, [r2, #3]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	061a      	lsls	r2, r3, #24
 8003d50:	4b41      	ldr	r3, [pc, #260]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	0619      	lsls	r1, r3, #24
 8003d56:	4b40      	ldr	r3, [pc, #256]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003d58:	785b      	ldrb	r3, [r3, #1]
 8003d5a:	041b      	lsls	r3, r3, #16
 8003d5c:	4319      	orrs	r1, r3
 8003d5e:	4b3e      	ldr	r3, [pc, #248]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003d60:	789b      	ldrb	r3, [r3, #2]
 8003d62:	021b      	lsls	r3, r3, #8
 8003d64:	430b      	orrs	r3, r1
 8003d66:	493c      	ldr	r1, [pc, #240]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003d68:	78c9      	ldrb	r1, [r1, #3]
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	021b      	lsls	r3, r3, #8
 8003d6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003d72:	431a      	orrs	r2, r3
 8003d74:	4b38      	ldr	r3, [pc, #224]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	0619      	lsls	r1, r3, #24
 8003d7a:	4b37      	ldr	r3, [pc, #220]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003d7c:	785b      	ldrb	r3, [r3, #1]
 8003d7e:	041b      	lsls	r3, r3, #16
 8003d80:	4319      	orrs	r1, r3
 8003d82:	4b35      	ldr	r3, [pc, #212]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003d84:	789b      	ldrb	r3, [r3, #2]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	430b      	orrs	r3, r1
 8003d8a:	4933      	ldr	r1, [pc, #204]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003d8c:	78c9      	ldrb	r1, [r1, #3]
 8003d8e:	430b      	orrs	r3, r1
 8003d90:	0a1b      	lsrs	r3, r3, #8
 8003d92:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d96:	431a      	orrs	r2, r3
 8003d98:	4b2f      	ldr	r3, [pc, #188]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	0619      	lsls	r1, r3, #24
 8003d9e:	4b2e      	ldr	r3, [pc, #184]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003da0:	785b      	ldrb	r3, [r3, #1]
 8003da2:	041b      	lsls	r3, r3, #16
 8003da4:	4319      	orrs	r1, r3
 8003da6:	4b2c      	ldr	r3, [pc, #176]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003da8:	789b      	ldrb	r3, [r3, #2]
 8003daa:	021b      	lsls	r3, r3, #8
 8003dac:	430b      	orrs	r3, r1
 8003dae:	492a      	ldr	r1, [pc, #168]	; (8003e58 <MX_LWIP_Init+0x290>)
 8003db0:	78c9      	ldrb	r1, [r1, #3]
 8003db2:	430b      	orrs	r3, r1
 8003db4:	0e1b      	lsrs	r3, r3, #24
 8003db6:	4313      	orrs	r3, r2
 8003db8:	4a2a      	ldr	r2, [pc, #168]	; (8003e64 <MX_LWIP_Init+0x29c>)
 8003dba:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003dbc:	4b2a      	ldr	r3, [pc, #168]	; (8003e68 <MX_LWIP_Init+0x2a0>)
 8003dbe:	9302      	str	r3, [sp, #8]
 8003dc0:	4b2a      	ldr	r3, [pc, #168]	; (8003e6c <MX_LWIP_Init+0x2a4>)
 8003dc2:	9301      	str	r3, [sp, #4]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	4b26      	ldr	r3, [pc, #152]	; (8003e64 <MX_LWIP_Init+0x29c>)
 8003dca:	4a25      	ldr	r2, [pc, #148]	; (8003e60 <MX_LWIP_Init+0x298>)
 8003dcc:	4923      	ldr	r1, [pc, #140]	; (8003e5c <MX_LWIP_Init+0x294>)
 8003dce:	4828      	ldr	r0, [pc, #160]	; (8003e70 <MX_LWIP_Init+0x2a8>)
 8003dd0:	f006 fe44 	bl	800aa5c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003dd4:	4826      	ldr	r0, [pc, #152]	; (8003e70 <MX_LWIP_Init+0x2a8>)
 8003dd6:	f006 ff23 	bl	800ac20 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003dda:	4b25      	ldr	r3, [pc, #148]	; (8003e70 <MX_LWIP_Init+0x2a8>)
 8003ddc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003de0:	089b      	lsrs	r3, r3, #2
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003dec:	4820      	ldr	r0, [pc, #128]	; (8003e70 <MX_LWIP_Init+0x2a8>)
 8003dee:	f006 ff25 	bl	800ac3c <netif_set_up>
 8003df2:	e002      	b.n	8003dfa <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003df4:	481e      	ldr	r0, [pc, #120]	; (8003e70 <MX_LWIP_Init+0x2a8>)
 8003df6:	f006 ff65 	bl	800acc4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003dfa:	491e      	ldr	r1, [pc, #120]	; (8003e74 <MX_LWIP_Init+0x2ac>)
 8003dfc:	481c      	ldr	r0, [pc, #112]	; (8003e70 <MX_LWIP_Init+0x2a8>)
 8003dfe:	f006 ffce 	bl	800ad9e <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8003e02:	2200      	movs	r2, #0
 8003e04:	2101      	movs	r1, #1
 8003e06:	2001      	movs	r0, #1
 8003e08:	f000 fefe 	bl	8004c08 <osSemaphoreNew>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	4b1a      	ldr	r3, [pc, #104]	; (8003e78 <MX_LWIP_Init+0x2b0>)
 8003e10:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 8003e12:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <MX_LWIP_Init+0x2b4>)
 8003e14:	4a16      	ldr	r2, [pc, #88]	; (8003e70 <MX_LWIP_Init+0x2a8>)
 8003e16:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8003e18:	4b17      	ldr	r3, [pc, #92]	; (8003e78 <MX_LWIP_Init+0x2b0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a17      	ldr	r2, [pc, #92]	; (8003e7c <MX_LWIP_Init+0x2b4>)
 8003e1e:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003e20:	2224      	movs	r2, #36	; 0x24
 8003e22:	2100      	movs	r1, #0
 8003e24:	4816      	ldr	r0, [pc, #88]	; (8003e80 <MX_LWIP_Init+0x2b8>)
 8003e26:	f010 f83b 	bl	8013ea0 <memset>
  attributes.name = "LinkThr";
 8003e2a:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <MX_LWIP_Init+0x2b8>)
 8003e2c:	4a15      	ldr	r2, [pc, #84]	; (8003e84 <MX_LWIP_Init+0x2bc>)
 8003e2e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003e30:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <MX_LWIP_Init+0x2b8>)
 8003e32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e36:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <MX_LWIP_Init+0x2b8>)
 8003e3a:	2210      	movs	r2, #16
 8003e3c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8003e3e:	4a10      	ldr	r2, [pc, #64]	; (8003e80 <MX_LWIP_Init+0x2b8>)
 8003e40:	490e      	ldr	r1, [pc, #56]	; (8003e7c <MX_LWIP_Init+0x2b4>)
 8003e42:	4811      	ldr	r0, [pc, #68]	; (8003e88 <MX_LWIP_Init+0x2c0>)
 8003e44:	f000 fcc0 	bl	80047c8 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003e48:	bf00      	nop
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20002ba0 	.word	0x20002ba0
 8003e54:	20002b9c 	.word	0x20002b9c
 8003e58:	20002b3c 	.word	0x20002b3c
 8003e5c:	20002b98 	.word	0x20002b98
 8003e60:	20002ba4 	.word	0x20002ba4
 8003e64:	20002ba8 	.word	0x20002ba8
 8003e68:	08009fed 	.word	0x08009fed
 8003e6c:	080044bd 	.word	0x080044bd
 8003e70:	20002b64 	.word	0x20002b64
 8003e74:	080045a1 	.word	0x080045a1
 8003e78:	200000a0 	.word	0x200000a0
 8003e7c:	20002b34 	.word	0x20002b34
 8003e80:	20002b40 	.word	0x20002b40
 8003e84:	08014cdc 	.word	0x08014cdc
 8003e88:	08004529 	.word	0x08004529

08003e8c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08c      	sub	sp, #48	; 0x30
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e94:	f107 0320 	add.w	r3, r7, #32
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
 8003e9e:	609a      	str	r2, [r3, #8]
 8003ea0:	60da      	str	r2, [r3, #12]
  if(ethHandle->Instance==ETH)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a4e      	ldr	r2, [pc, #312]	; (8003fe0 <HAL_ETH_MspInit+0x154>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	f040 8095 	bne.w	8003fd8 <HAL_ETH_MspInit+0x14c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003eae:	4b4d      	ldr	r3, [pc, #308]	; (8003fe4 <HAL_ETH_MspInit+0x158>)
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	4a4c      	ldr	r2, [pc, #304]	; (8003fe4 <HAL_ETH_MspInit+0x158>)
 8003eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eb8:	6153      	str	r3, [r2, #20]
 8003eba:	4b4a      	ldr	r3, [pc, #296]	; (8003fe4 <HAL_ETH_MspInit+0x158>)
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec2:	61fb      	str	r3, [r7, #28]
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	4b47      	ldr	r3, [pc, #284]	; (8003fe4 <HAL_ETH_MspInit+0x158>)
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	4a46      	ldr	r2, [pc, #280]	; (8003fe4 <HAL_ETH_MspInit+0x158>)
 8003ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed0:	6153      	str	r3, [r2, #20]
 8003ed2:	4b44      	ldr	r3, [pc, #272]	; (8003fe4 <HAL_ETH_MspInit+0x158>)
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003eda:	61bb      	str	r3, [r7, #24]
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	4b41      	ldr	r3, [pc, #260]	; (8003fe4 <HAL_ETH_MspInit+0x158>)
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	4a40      	ldr	r2, [pc, #256]	; (8003fe4 <HAL_ETH_MspInit+0x158>)
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee8:	6153      	str	r3, [r2, #20]
 8003eea:	4b3e      	ldr	r3, [pc, #248]	; (8003fe4 <HAL_ETH_MspInit+0x158>)
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ef6:	4b3b      	ldr	r3, [pc, #236]	; (8003fe4 <HAL_ETH_MspInit+0x158>)
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	4a3a      	ldr	r2, [pc, #232]	; (8003fe4 <HAL_ETH_MspInit+0x158>)
 8003efc:	f043 0310 	orr.w	r3, r3, #16
 8003f00:	6193      	str	r3, [r2, #24]
 8003f02:	4b38      	ldr	r3, [pc, #224]	; (8003fe4 <HAL_ETH_MspInit+0x158>)
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	613b      	str	r3, [r7, #16]
 8003f0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f0e:	4b35      	ldr	r3, [pc, #212]	; (8003fe4 <HAL_ETH_MspInit+0x158>)
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	4a34      	ldr	r2, [pc, #208]	; (8003fe4 <HAL_ETH_MspInit+0x158>)
 8003f14:	f043 0304 	orr.w	r3, r3, #4
 8003f18:	6193      	str	r3, [r2, #24]
 8003f1a:	4b32      	ldr	r3, [pc, #200]	; (8003fe4 <HAL_ETH_MspInit+0x158>)
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f26:	4b2f      	ldr	r3, [pc, #188]	; (8003fe4 <HAL_ETH_MspInit+0x158>)
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	4a2e      	ldr	r2, [pc, #184]	; (8003fe4 <HAL_ETH_MspInit+0x158>)
 8003f2c:	f043 0308 	orr.w	r3, r3, #8
 8003f30:	6193      	str	r3, [r2, #24]
 8003f32:	4b2c      	ldr	r3, [pc, #176]	; (8003fe4 <HAL_ETH_MspInit+0x158>)
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	60bb      	str	r3, [r7, #8]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003f3e:	2302      	movs	r3, #2
 8003f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f42:	2302      	movs	r3, #2
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f46:	2303      	movs	r3, #3
 8003f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f4a:	f107 0320 	add.w	r3, r7, #32
 8003f4e:	4619      	mov	r1, r3
 8003f50:	4825      	ldr	r0, [pc, #148]	; (8003fe8 <HAL_ETH_MspInit+0x15c>)
 8003f52:	f7fe f9e7 	bl	8002324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8003f56:	2382      	movs	r3, #130	; 0x82
 8003f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f62:	f107 0320 	add.w	r3, r7, #32
 8003f66:	4619      	mov	r1, r3
 8003f68:	4820      	ldr	r0, [pc, #128]	; (8003fec <HAL_ETH_MspInit+0x160>)
 8003f6a:	f7fe f9db 	bl	8002324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f6e:	2304      	movs	r3, #4
 8003f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f72:	2302      	movs	r3, #2
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f76:	2303      	movs	r3, #3
 8003f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7a:	f107 0320 	add.w	r3, r7, #32
 8003f7e:	4619      	mov	r1, r3
 8003f80:	481a      	ldr	r0, [pc, #104]	; (8003fec <HAL_ETH_MspInit+0x160>)
 8003f82:	f7fe f9cf 	bl	8002324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003f86:	2330      	movs	r3, #48	; 0x30
 8003f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f92:	f107 0320 	add.w	r3, r7, #32
 8003f96:	4619      	mov	r1, r3
 8003f98:	4813      	ldr	r0, [pc, #76]	; (8003fe8 <HAL_ETH_MspInit+0x15c>)
 8003f9a:	f7fe f9c3 	bl	8002324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8003f9e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fac:	f107 0320 	add.w	r3, r7, #32
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	480f      	ldr	r0, [pc, #60]	; (8003ff0 <HAL_ETH_MspInit+0x164>)
 8003fb4:	f7fe f9b6 	bl	8002324 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2105      	movs	r1, #5
 8003fbc:	203d      	movs	r0, #61	; 0x3d
 8003fbe:	f7fc ff1a 	bl	8000df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003fc2:	203d      	movs	r0, #61	; 0x3d
 8003fc4:	f7fc ff33 	bl	8000e2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2105      	movs	r1, #5
 8003fcc:	203e      	movs	r0, #62	; 0x3e
 8003fce:	f7fc ff12 	bl	8000df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8003fd2:	203e      	movs	r0, #62	; 0x3e
 8003fd4:	f7fc ff2b 	bl	8000e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003fd8:	bf00      	nop
 8003fda:	3730      	adds	r7, #48	; 0x30
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40028000 	.word	0x40028000
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	40011000 	.word	0x40011000
 8003fec:	40010800 	.word	0x40010800
 8003ff0:	40010c00 	.word	0x40010c00

08003ff4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8003ffc:	4b04      	ldr	r3, [pc, #16]	; (8004010 <HAL_ETH_RxCpltCallback+0x1c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f000 ff05 	bl	8004e10 <osSemaphoreRelease>
}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	200000a4 	.word	0x200000a4

08004014 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b090      	sub	sp, #64	; 0x40
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800401c:	2300      	movs	r3, #0
 800401e:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004020:	4b5d      	ldr	r3, [pc, #372]	; (8004198 <low_level_init+0x184>)
 8004022:	4a5e      	ldr	r2, [pc, #376]	; (800419c <low_level_init+0x188>)
 8004024:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004026:	4b5c      	ldr	r3, [pc, #368]	; (8004198 <low_level_init+0x184>)
 8004028:	2201      	movs	r2, #1
 800402a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800402c:	4b5a      	ldr	r3, [pc, #360]	; (8004198 <low_level_init+0x184>)
 800402e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004032:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004034:	4b58      	ldr	r3, [pc, #352]	; (8004198 <low_level_init+0x184>)
 8004036:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800403a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800403c:	4b56      	ldr	r3, [pc, #344]	; (8004198 <low_level_init+0x184>)
 800403e:	2200      	movs	r2, #0
 8004040:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004042:	2300      	movs	r3, #0
 8004044:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8004046:	2380      	movs	r3, #128	; 0x80
 8004048:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800404a:	23e1      	movs	r3, #225	; 0xe1
 800404c:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x11;
 800404e:	2311      	movs	r3, #17
 8004050:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x22;
 8004052:	2322      	movs	r3, #34	; 0x22
 8004054:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x33;
 8004056:	2333      	movs	r3, #51	; 0x33
 8004058:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800405a:	4a4f      	ldr	r2, [pc, #316]	; (8004198 <low_level_init+0x184>)
 800405c:	f107 030c 	add.w	r3, r7, #12
 8004060:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004062:	4b4d      	ldr	r3, [pc, #308]	; (8004198 <low_level_init+0x184>)
 8004064:	2201      	movs	r2, #1
 8004066:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004068:	4b4b      	ldr	r3, [pc, #300]	; (8004198 <low_level_init+0x184>)
 800406a:	2200      	movs	r2, #0
 800406c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800406e:	4b4a      	ldr	r3, [pc, #296]	; (8004198 <low_level_init+0x184>)
 8004070:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004074:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004076:	4848      	ldr	r0, [pc, #288]	; (8004198 <low_level_init+0x184>)
 8004078:	f7fc fff0 	bl	800105c <HAL_ETH_Init>
 800407c:	4603      	mov	r3, r0
 800407e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004082:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004086:	2b00      	cmp	r3, #0
 8004088:	d108      	bne.n	800409c <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004090:	f043 0304 	orr.w	r3, r3, #4
 8004094:	b2da      	uxtb	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800409c:	2304      	movs	r3, #4
 800409e:	4a40      	ldr	r2, [pc, #256]	; (80041a0 <low_level_init+0x18c>)
 80040a0:	4940      	ldr	r1, [pc, #256]	; (80041a4 <low_level_init+0x190>)
 80040a2:	483d      	ldr	r0, [pc, #244]	; (8004198 <low_level_init+0x184>)
 80040a4:	f7fd f946 	bl	8001334 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80040a8:	2308      	movs	r3, #8
 80040aa:	4a3f      	ldr	r2, [pc, #252]	; (80041a8 <low_level_init+0x194>)
 80040ac:	493f      	ldr	r1, [pc, #252]	; (80041ac <low_level_init+0x198>)
 80040ae:	483a      	ldr	r0, [pc, #232]	; (8004198 <low_level_init+0x184>)
 80040b0:	f7fd f9a8 	bl	8001404 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2206      	movs	r2, #6
 80040b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80040bc:	4b36      	ldr	r3, [pc, #216]	; (8004198 <low_level_init+0x184>)
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	781a      	ldrb	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80040c8:	4b33      	ldr	r3, [pc, #204]	; (8004198 <low_level_init+0x184>)
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	785a      	ldrb	r2, [r3, #1]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80040d4:	4b30      	ldr	r3, [pc, #192]	; (8004198 <low_level_init+0x184>)
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	789a      	ldrb	r2, [r3, #2]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80040e0:	4b2d      	ldr	r3, [pc, #180]	; (8004198 <low_level_init+0x184>)
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	78da      	ldrb	r2, [r3, #3]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80040ec:	4b2a      	ldr	r3, [pc, #168]	; (8004198 <low_level_init+0x184>)
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	791a      	ldrb	r2, [r3, #4]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80040f8:	4b27      	ldr	r3, [pc, #156]	; (8004198 <low_level_init+0x184>)
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	795a      	ldrb	r2, [r3, #5]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800410a:	84da      	strh	r2, [r3, #38]	; 0x26

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004112:	f043 030a 	orr.w	r3, r3, #10
 8004116:	b2da      	uxtb	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 800411e:	2200      	movs	r2, #0
 8004120:	2101      	movs	r1, #1
 8004122:	2001      	movs	r0, #1
 8004124:	f000 fd70 	bl	8004c08 <osSemaphoreNew>
 8004128:	4602      	mov	r2, r0
 800412a:	4b21      	ldr	r3, [pc, #132]	; (80041b0 <low_level_init+0x19c>)
 800412c:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800412e:	f107 0314 	add.w	r3, r7, #20
 8004132:	2224      	movs	r2, #36	; 0x24
 8004134:	2100      	movs	r1, #0
 8004136:	4618      	mov	r0, r3
 8004138:	f00f feb2 	bl	8013ea0 <memset>
  attributes.name = "EthIf";
 800413c:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <low_level_init+0x1a0>)
 800413e:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004140:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8004146:	2330      	movs	r3, #48	; 0x30
 8004148:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 800414a:	f107 0314 	add.w	r3, r7, #20
 800414e:	461a      	mov	r2, r3
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	4819      	ldr	r0, [pc, #100]	; (80041b8 <low_level_init+0x1a4>)
 8004154:	f000 fb38 	bl	80047c8 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004158:	480f      	ldr	r0, [pc, #60]	; (8004198 <low_level_init+0x184>)
 800415a:	f7fd fc77 	bl	8001a4c <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800415e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004162:	461a      	mov	r2, r3
 8004164:	210b      	movs	r1, #11
 8004166:	480c      	ldr	r0, [pc, #48]	; (8004198 <low_level_init+0x184>)
 8004168:	f7fd fba2 	bl	80018b0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800416c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416e:	f043 030b 	orr.w	r3, r3, #11
 8004172:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004176:	461a      	mov	r2, r3
 8004178:	210b      	movs	r1, #11
 800417a:	4807      	ldr	r0, [pc, #28]	; (8004198 <low_level_init+0x184>)
 800417c:	f7fd fc00 	bl	8001980 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004180:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004184:	461a      	mov	r2, r3
 8004186:	210b      	movs	r1, #11
 8004188:	4803      	ldr	r0, [pc, #12]	; (8004198 <low_level_init+0x184>)
 800418a:	f7fd fb91 	bl	80018b0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800418e:	bf00      	nop
 8004190:	3740      	adds	r7, #64	; 0x40
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20005c0c 	.word	0x20005c0c
 800419c:	40028000 	.word	0x40028000
 80041a0:	20005c54 	.word	0x20005c54
 80041a4:	20002bac 	.word	0x20002bac
 80041a8:	20002bec 	.word	0x20002bec
 80041ac:	20005b8c 	.word	0x20005b8c
 80041b0:	200000a4 	.word	0x200000a4
 80041b4:	08014ce4 	.word	0x08014ce4
 80041b8:	0800445d 	.word	0x0800445d

080041bc <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08a      	sub	sp, #40	; 0x28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80041c6:	4b4b      	ldr	r3, [pc, #300]	; (80042f4 <low_level_output+0x138>)
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80041d2:	2300      	movs	r3, #0
 80041d4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80041da:	2300      	movs	r3, #0
 80041dc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80041de:	4b45      	ldr	r3, [pc, #276]	; (80042f4 <low_level_output+0x138>)
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	623b      	str	r3, [r7, #32]
 80041ec:	e05a      	b.n	80042a4 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	da03      	bge.n	80041fe <low_level_output+0x42>
      {
        errval = ERR_USE;
 80041f6:	23f8      	movs	r3, #248	; 0xf8
 80041f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80041fc:	e05c      	b.n	80042b8 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	895b      	ldrh	r3, [r3, #10]
 8004202:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004208:	e02f      	b.n	800426a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800420a:	69fa      	ldr	r2, [r7, #28]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	18d0      	adds	r0, r2, r3
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	18d1      	adds	r1, r2, r3
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800421e:	3304      	adds	r3, #4
 8004220:	461a      	mov	r2, r3
 8004222:	f00f fe32 	bl	8013e8a <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	da03      	bge.n	800423c <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004234:	23f8      	movs	r3, #248	; 0xf8
 8004236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800423a:	e03d      	b.n	80042b8 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	4413      	add	r3, r2
 8004248:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800424c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004258:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004264:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	4413      	add	r3, r2
 8004270:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004274:	4293      	cmp	r3, r2
 8004276:	d8c8      	bhi.n	800420a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	18d0      	adds	r0, r2, r3
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	4413      	add	r3, r2
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4619      	mov	r1, r3
 800428a:	f00f fdfe 	bl	8013e8a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4413      	add	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4413      	add	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	623b      	str	r3, [r7, #32]
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1a1      	bne.n	80041ee <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80042aa:	6979      	ldr	r1, [r7, #20]
 80042ac:	4811      	ldr	r0, [pc, #68]	; (80042f4 <low_level_output+0x138>)
 80042ae:	f7fd f915 	bl	80014dc <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80042b8:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <low_level_output+0x138>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c0:	3314      	adds	r3, #20
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00d      	beq.n	80042e8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <low_level_output+0x138>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d4:	3314      	adds	r3, #20
 80042d6:	2220      	movs	r2, #32
 80042d8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <low_level_output+0x138>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e2:	3304      	adds	r3, #4
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80042e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3728      	adds	r7, #40	; 0x28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	20005c0c 	.word	0x20005c0c

080042f8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08c      	sub	sp, #48	; 0x30
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004300:	2300      	movs	r3, #0
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8004304:	2300      	movs	r3, #0
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004318:	2300      	movs	r3, #0
 800431a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800431c:	484e      	ldr	r0, [pc, #312]	; (8004458 <low_level_input+0x160>)
 800431e:	f7fd f9c7 	bl	80016b0 <HAL_ETH_GetReceivedFrame_IT>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <low_level_input+0x34>

    return NULL;
 8004328:	2300      	movs	r3, #0
 800432a:	e091      	b.n	8004450 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800432c:	4b4a      	ldr	r3, [pc, #296]	; (8004458 <low_level_input+0x160>)
 800432e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004330:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004332:	4b49      	ldr	r3, [pc, #292]	; (8004458 <low_level_input+0x160>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004338:	89fb      	ldrh	r3, [r7, #14]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d006      	beq.n	800434c <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800433e:	89fb      	ldrh	r3, [r7, #14]
 8004340:	2203      	movs	r2, #3
 8004342:	4619      	mov	r1, r3
 8004344:	2004      	movs	r0, #4
 8004346:	f006 fd9b 	bl	800ae80 <pbuf_alloc>
 800434a:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434e:	2b00      	cmp	r3, #0
 8004350:	d04b      	beq.n	80043ea <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004352:	4b41      	ldr	r3, [pc, #260]	; (8004458 <low_level_input+0x160>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800435c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004360:	e040      	b.n	80043e4 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	895b      	ldrh	r3, [r3, #10]
 8004366:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800436c:	e021      	b.n	80043b2 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	18d0      	adds	r0, r2, r3
 8004376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	18d1      	adds	r1, r2, r3
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004382:	3304      	adds	r3, #4
 8004384:	461a      	mov	r2, r3
 8004386:	f00f fd80 	bl	8013e8a <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	4413      	add	r3, r2
 800439c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80043a0:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80043ac:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	4413      	add	r3, r2
 80043b8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80043bc:	4293      	cmp	r3, r2
 80043be:	d8d6      	bhi.n	800436e <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	18d0      	adds	r0, r2, r3
 80043c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	4413      	add	r3, r2
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	4619      	mov	r1, r3
 80043d2:	f00f fd5a 	bl	8013e8a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	4413      	add	r3, r2
 80043dc:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1bb      	bne.n	8004362 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80043ea:	4b1b      	ldr	r3, [pc, #108]	; (8004458 <low_level_input+0x160>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80043f0:	2300      	movs	r3, #0
 80043f2:	613b      	str	r3, [r7, #16]
 80043f4:	e00b      	b.n	800440e <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	3301      	adds	r3, #1
 800440c:	613b      	str	r3, [r7, #16]
 800440e:	4b12      	ldr	r3, [pc, #72]	; (8004458 <low_level_input+0x160>)
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	429a      	cmp	r2, r3
 8004416:	d3ee      	bcc.n	80043f6 <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004418:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <low_level_input+0x160>)
 800441a:	2200      	movs	r2, #0
 800441c:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800441e:	4b0e      	ldr	r3, [pc, #56]	; (8004458 <low_level_input+0x160>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004426:	3314      	adds	r3, #20
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00d      	beq.n	800444e <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004432:	4b09      	ldr	r3, [pc, #36]	; (8004458 <low_level_input+0x160>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443a:	3314      	adds	r3, #20
 800443c:	2280      	movs	r2, #128	; 0x80
 800443e:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004440:	4b05      	ldr	r3, [pc, #20]	; (8004458 <low_level_input+0x160>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004448:	3308      	adds	r3, #8
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
  }
  return p;
 800444e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004450:	4618      	mov	r0, r3
 8004452:	3730      	adds	r7, #48	; 0x30
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20005c0c 	.word	0x20005c0c

0800445c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004468:	4b12      	ldr	r3, [pc, #72]	; (80044b4 <ethernetif_input+0x58>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f04f 31ff 	mov.w	r1, #4294967295
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fc67 	bl	8004d44 <osSemaphoreAcquire>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f5      	bne.n	8004468 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800447c:	480e      	ldr	r0, [pc, #56]	; (80044b8 <ethernetif_input+0x5c>)
 800447e:	f00f fc77 	bl	8013d70 <sys_mutex_lock>
        p = low_level_input( netif );
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7ff ff38 	bl	80042f8 <low_level_input>
 8004488:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	68f9      	ldr	r1, [r7, #12]
 8004496:	68b8      	ldr	r0, [r7, #8]
 8004498:	4798      	blx	r3
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80044a0:	68b8      	ldr	r0, [r7, #8]
 80044a2:	f007 f85f 	bl	800b564 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80044a6:	4804      	ldr	r0, [pc, #16]	; (80044b8 <ethernetif_input+0x5c>)
 80044a8:	f00f fc71 	bl	8013d8e <sys_mutex_unlock>
      } while(p!=NULL);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1e4      	bne.n	800447c <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80044b2:	e7d9      	b.n	8004468 <ethernetif_input+0xc>
 80044b4:	200000a4 	.word	0x200000a4
 80044b8:	20007468 	.word	0x20007468

080044bc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <ethernetif_init+0x1c>
 80044ca:	4b0e      	ldr	r3, [pc, #56]	; (8004504 <ethernetif_init+0x48>)
 80044cc:	f44f 720e 	mov.w	r2, #568	; 0x238
 80044d0:	490d      	ldr	r1, [pc, #52]	; (8004508 <ethernetif_init+0x4c>)
 80044d2:	480e      	ldr	r0, [pc, #56]	; (800450c <ethernetif_init+0x50>)
 80044d4:	f00f fcec 	bl	8013eb0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2273      	movs	r2, #115	; 0x73
 80044dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2274      	movs	r2, #116	; 0x74
 80044e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a09      	ldr	r2, [pc, #36]	; (8004510 <ethernetif_init+0x54>)
 80044ec:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a08      	ldr	r2, [pc, #32]	; (8004514 <ethernetif_init+0x58>)
 80044f2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff fd8d 	bl	8004014 <low_level_init>

  return ERR_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	08014cec 	.word	0x08014cec
 8004508:	08014d08 	.word	0x08014d08
 800450c:	08014d18 	.word	0x08014d18
 8004510:	08011ec5 	.word	0x08011ec5
 8004514:	080041bd 	.word	0x080041bd

08004518 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800451c:	f7fc fb8a 	bl	8000c34 <HAL_GetTick>
 8004520:	4603      	mov	r3, r0
}
 8004522:	4618      	mov	r0, r3
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004538:	f107 0308 	add.w	r3, r7, #8
 800453c:	461a      	mov	r2, r3
 800453e:	2101      	movs	r1, #1
 8004540:	4816      	ldr	r0, [pc, #88]	; (800459c <ethernetif_set_link+0x74>)
 8004542:	f7fd f9b5 	bl	80018b0 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b00      	cmp	r3, #0
 800455c:	d108      	bne.n	8004570 <ethernetif_set_link+0x48>
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f006 fbcd 	bl	800ad08 <netif_set_link_up>
 800456e:	e011      	b.n	8004594 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004578:	089b      	lsrs	r3, r3, #2
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d007      	beq.n	8004594 <ethernetif_set_link+0x6c>
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d104      	bne.n	8004594 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f006 fbe5 	bl	800ad5e <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8004594:	20c8      	movs	r0, #200	; 0xc8
 8004596:	f000 f9c1 	bl	800491c <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800459a:	e7cd      	b.n	8004538 <ethernetif_set_link+0x10>
 800459c:	20005c0c 	.word	0x20005c0c

080045a0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80045b6:	089b      	lsrs	r3, r3, #2
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d05d      	beq.n	800467e <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80045c2:	4b34      	ldr	r3, [pc, #208]	; (8004694 <ethernetif_update_config+0xf4>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d03f      	beq.n	800464a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80045ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045ce:	2100      	movs	r1, #0
 80045d0:	4830      	ldr	r0, [pc, #192]	; (8004694 <ethernetif_update_config+0xf4>)
 80045d2:	f7fd f9d5 	bl	8001980 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80045d6:	f7fc fb2d 	bl	8000c34 <HAL_GetTick>
 80045da:	4603      	mov	r3, r0
 80045dc:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80045de:	f107 0308 	add.w	r3, r7, #8
 80045e2:	461a      	mov	r2, r3
 80045e4:	2101      	movs	r1, #1
 80045e6:	482b      	ldr	r0, [pc, #172]	; (8004694 <ethernetif_update_config+0xf4>)
 80045e8:	f7fd f962 	bl	80018b0 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80045ec:	f7fc fb22 	bl	8000c34 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045fa:	d828      	bhi.n	800464e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0eb      	beq.n	80045de <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004606:	f107 0308 	add.w	r3, r7, #8
 800460a:	461a      	mov	r2, r3
 800460c:	2110      	movs	r1, #16
 800460e:	4821      	ldr	r0, [pc, #132]	; (8004694 <ethernetif_update_config+0xf4>)
 8004610:	f7fd f94e 	bl	80018b0 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	2b00      	cmp	r3, #0
 800461c:	d004      	beq.n	8004628 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800461e:	4b1d      	ldr	r3, [pc, #116]	; (8004694 <ethernetif_update_config+0xf4>)
 8004620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004624:	60da      	str	r2, [r3, #12]
 8004626:	e002      	b.n	800462e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004628:	4b1a      	ldr	r3, [pc, #104]	; (8004694 <ethernetif_update_config+0xf4>)
 800462a:	2200      	movs	r2, #0
 800462c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004638:	4b16      	ldr	r3, [pc, #88]	; (8004694 <ethernetif_update_config+0xf4>)
 800463a:	2200      	movs	r2, #0
 800463c:	609a      	str	r2, [r3, #8]
 800463e:	e016      	b.n	800466e <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004640:	4b14      	ldr	r3, [pc, #80]	; (8004694 <ethernetif_update_config+0xf4>)
 8004642:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004646:	609a      	str	r2, [r3, #8]
 8004648:	e011      	b.n	800466e <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800464a:	bf00      	nop
 800464c:	e000      	b.n	8004650 <ethernetif_update_config+0xb0>
          goto error;
 800464e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004650:	4b10      	ldr	r3, [pc, #64]	; (8004694 <ethernetif_update_config+0xf4>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	08db      	lsrs	r3, r3, #3
 8004656:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004658:	4b0e      	ldr	r3, [pc, #56]	; (8004694 <ethernetif_update_config+0xf4>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	085b      	lsrs	r3, r3, #1
 800465e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004660:	4313      	orrs	r3, r2
 8004662:	b29b      	uxth	r3, r3
 8004664:	461a      	mov	r2, r3
 8004666:	2100      	movs	r1, #0
 8004668:	480a      	ldr	r0, [pc, #40]	; (8004694 <ethernetif_update_config+0xf4>)
 800466a:	f7fd f989 	bl	8001980 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800466e:	2100      	movs	r1, #0
 8004670:	4808      	ldr	r0, [pc, #32]	; (8004694 <ethernetif_update_config+0xf4>)
 8004672:	f7fd fa49 	bl	8001b08 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004676:	4807      	ldr	r0, [pc, #28]	; (8004694 <ethernetif_update_config+0xf4>)
 8004678:	f7fd f9e8 	bl	8001a4c <HAL_ETH_Start>
 800467c:	e002      	b.n	8004684 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800467e:	4805      	ldr	r0, [pc, #20]	; (8004694 <ethernetif_update_config+0xf4>)
 8004680:	f7fd fa13 	bl	8001aaa <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f807 	bl	8004698 <ethernetif_notify_conn_changed>
}
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20005c0c 	.word	0x20005c0c

08004698 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
	...

080046ac <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046b2:	f3ef 8305 	mrs	r3, IPSR
 80046b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80046b8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10f      	bne.n	80046de <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046be:	f3ef 8310 	mrs	r3, PRIMASK
 80046c2:	607b      	str	r3, [r7, #4]
  return(result);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d109      	bne.n	80046de <osKernelInitialize+0x32>
 80046ca:	4b10      	ldr	r3, [pc, #64]	; (800470c <osKernelInitialize+0x60>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d109      	bne.n	80046e6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046d2:	f3ef 8311 	mrs	r3, BASEPRI
 80046d6:	603b      	str	r3, [r7, #0]
  return(result);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80046de:	f06f 0305 	mvn.w	r3, #5
 80046e2:	60fb      	str	r3, [r7, #12]
 80046e4:	e00c      	b.n	8004700 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80046e6:	4b09      	ldr	r3, [pc, #36]	; (800470c <osKernelInitialize+0x60>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d105      	bne.n	80046fa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80046ee:	4b07      	ldr	r3, [pc, #28]	; (800470c <osKernelInitialize+0x60>)
 80046f0:	2201      	movs	r2, #1
 80046f2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	e002      	b.n	8004700 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80046fa:	f04f 33ff 	mov.w	r3, #4294967295
 80046fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004700:	68fb      	ldr	r3, [r7, #12]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	bc80      	pop	{r7}
 800470a:	4770      	bx	lr
 800470c:	200000a8 	.word	0x200000a8

08004710 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004716:	f3ef 8305 	mrs	r3, IPSR
 800471a:	60bb      	str	r3, [r7, #8]
  return(result);
 800471c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10f      	bne.n	8004742 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004722:	f3ef 8310 	mrs	r3, PRIMASK
 8004726:	607b      	str	r3, [r7, #4]
  return(result);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d109      	bne.n	8004742 <osKernelStart+0x32>
 800472e:	4b11      	ldr	r3, [pc, #68]	; (8004774 <osKernelStart+0x64>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b02      	cmp	r3, #2
 8004734:	d109      	bne.n	800474a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004736:	f3ef 8311 	mrs	r3, BASEPRI
 800473a:	603b      	str	r3, [r7, #0]
  return(result);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004742:	f06f 0305 	mvn.w	r3, #5
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	e00e      	b.n	8004768 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800474a:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <osKernelStart+0x64>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d107      	bne.n	8004762 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004752:	4b08      	ldr	r3, [pc, #32]	; (8004774 <osKernelStart+0x64>)
 8004754:	2202      	movs	r2, #2
 8004756:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004758:	f002 f93a 	bl	80069d0 <vTaskStartScheduler>
      stat = osOK;
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	e002      	b.n	8004768 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004762:	f04f 33ff 	mov.w	r3, #4294967295
 8004766:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004768:	68fb      	ldr	r3, [r7, #12]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	200000a8 	.word	0x200000a8

08004778 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800477e:	f3ef 8305 	mrs	r3, IPSR
 8004782:	60bb      	str	r3, [r7, #8]
  return(result);
 8004784:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10f      	bne.n	80047aa <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800478a:	f3ef 8310 	mrs	r3, PRIMASK
 800478e:	607b      	str	r3, [r7, #4]
  return(result);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <osKernelGetTickCount+0x32>
 8004796:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <osKernelGetTickCount+0x4c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b02      	cmp	r3, #2
 800479c:	d109      	bne.n	80047b2 <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800479e:	f3ef 8311 	mrs	r3, BASEPRI
 80047a2:	603b      	str	r3, [r7, #0]
  return(result);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 80047aa:	f002 fa2d 	bl	8006c08 <xTaskGetTickCountFromISR>
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	e002      	b.n	80047b8 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 80047b2:	f002 fa1b 	bl	8006bec <xTaskGetTickCount>
 80047b6:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80047b8:	68fb      	ldr	r3, [r7, #12]
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	200000a8 	.word	0x200000a8

080047c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b092      	sub	sp, #72	; 0x48
 80047cc:	af04      	add	r7, sp, #16
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047d8:	f3ef 8305 	mrs	r3, IPSR
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f040 8094 	bne.w	800490e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047e6:	f3ef 8310 	mrs	r3, PRIMASK
 80047ea:	623b      	str	r3, [r7, #32]
  return(result);
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f040 808d 	bne.w	800490e <osThreadNew+0x146>
 80047f4:	4b48      	ldr	r3, [pc, #288]	; (8004918 <osThreadNew+0x150>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d106      	bne.n	800480a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047fc:	f3ef 8311 	mrs	r3, BASEPRI
 8004800:	61fb      	str	r3, [r7, #28]
  return(result);
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	2b00      	cmp	r3, #0
 8004806:	f040 8082 	bne.w	800490e <osThreadNew+0x146>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d07e      	beq.n	800490e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004810:	2380      	movs	r3, #128	; 0x80
 8004812:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004814:	2318      	movs	r3, #24
 8004816:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004818:	2300      	movs	r3, #0
 800481a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800481c:	f107 031b 	add.w	r3, r7, #27
 8004820:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004822:	f04f 33ff 	mov.w	r3, #4294967295
 8004826:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d045      	beq.n	80048ba <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d002      	beq.n	800483c <osThreadNew+0x74>
        name = attr->name;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d008      	beq.n	8004862 <osThreadNew+0x9a>
 8004850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004852:	2b38      	cmp	r3, #56	; 0x38
 8004854:	d805      	bhi.n	8004862 <osThreadNew+0x9a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <osThreadNew+0x9e>
        return (NULL);
 8004862:	2300      	movs	r3, #0
 8004864:	e054      	b.n	8004910 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d003      	beq.n	8004876 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	089b      	lsrs	r3, r3, #2
 8004874:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00e      	beq.n	800489c <osThreadNew+0xd4>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	2b5b      	cmp	r3, #91	; 0x5b
 8004884:	d90a      	bls.n	800489c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800488a:	2b00      	cmp	r3, #0
 800488c:	d006      	beq.n	800489c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <osThreadNew+0xd4>
        mem = 1;
 8004896:	2301      	movs	r3, #1
 8004898:	62bb      	str	r3, [r7, #40]	; 0x28
 800489a:	e010      	b.n	80048be <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10c      	bne.n	80048be <osThreadNew+0xf6>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d108      	bne.n	80048be <osThreadNew+0xf6>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d104      	bne.n	80048be <osThreadNew+0xf6>
          mem = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b8:	e001      	b.n	80048be <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80048be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d110      	bne.n	80048e6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048cc:	9202      	str	r2, [sp, #8]
 80048ce:	9301      	str	r3, [sp, #4]
 80048d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d2:	9300      	str	r3, [sp, #0]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048d8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f001 feb0 	bl	8006640 <xTaskCreateStatic>
 80048e0:	4603      	mov	r3, r0
 80048e2:	617b      	str	r3, [r7, #20]
 80048e4:	e013      	b.n	800490e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80048e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d110      	bne.n	800490e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	f107 0314 	add.w	r3, r7, #20
 80048f4:	9301      	str	r3, [sp, #4]
 80048f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f001 fef7 	bl	80066f2 <xTaskCreate>
 8004904:	4603      	mov	r3, r0
 8004906:	2b01      	cmp	r3, #1
 8004908:	d001      	beq.n	800490e <osThreadNew+0x146>
          hTask = NULL;
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800490e:	697b      	ldr	r3, [r7, #20]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3738      	adds	r7, #56	; 0x38
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	200000a8 	.word	0x200000a8

0800491c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004924:	f3ef 8305 	mrs	r3, IPSR
 8004928:	613b      	str	r3, [r7, #16]
  return(result);
 800492a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10f      	bne.n	8004950 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004930:	f3ef 8310 	mrs	r3, PRIMASK
 8004934:	60fb      	str	r3, [r7, #12]
  return(result);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d109      	bne.n	8004950 <osDelay+0x34>
 800493c:	4b0d      	ldr	r3, [pc, #52]	; (8004974 <osDelay+0x58>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b02      	cmp	r3, #2
 8004942:	d109      	bne.n	8004958 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004944:	f3ef 8311 	mrs	r3, BASEPRI
 8004948:	60bb      	str	r3, [r7, #8]
  return(result);
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <osDelay+0x3c>
    stat = osErrorISR;
 8004950:	f06f 0305 	mvn.w	r3, #5
 8004954:	617b      	str	r3, [r7, #20]
 8004956:	e007      	b.n	8004968 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004958:	2300      	movs	r3, #0
 800495a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f002 f800 	bl	8006968 <vTaskDelay>
    }
  }

  return (stat);
 8004968:	697b      	ldr	r3, [r7, #20]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	200000a8 	.word	0x200000a8

08004978 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004978:	b580      	push	{r7, lr}
 800497a:	b08a      	sub	sp, #40	; 0x28
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004980:	2300      	movs	r3, #0
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004984:	f3ef 8305 	mrs	r3, IPSR
 8004988:	613b      	str	r3, [r7, #16]
  return(result);
 800498a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800498c:	2b00      	cmp	r3, #0
 800498e:	f040 8085 	bne.w	8004a9c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004992:	f3ef 8310 	mrs	r3, PRIMASK
 8004996:	60fb      	str	r3, [r7, #12]
  return(result);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d17e      	bne.n	8004a9c <osMutexNew+0x124>
 800499e:	4b42      	ldr	r3, [pc, #264]	; (8004aa8 <osMutexNew+0x130>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d105      	bne.n	80049b2 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049a6:	f3ef 8311 	mrs	r3, BASEPRI
 80049aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d174      	bne.n	8004a9c <osMutexNew+0x124>
    if (attr != NULL) {
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <osMutexNew+0x48>
      type = attr->attr_bits;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	623b      	str	r3, [r7, #32]
 80049be:	e001      	b.n	80049c4 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <osMutexNew+0x5c>
      rmtx = 1U;
 80049ce:	2301      	movs	r3, #1
 80049d0:	61fb      	str	r3, [r7, #28]
 80049d2:	e001      	b.n	80049d8 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	f003 0308 	and.w	r3, r3, #8
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d15c      	bne.n	8004a9c <osMutexNew+0x124>
      mem = -1;
 80049e2:	f04f 33ff 	mov.w	r3, #4294967295
 80049e6:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d015      	beq.n	8004a1a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d006      	beq.n	8004a04 <osMutexNew+0x8c>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	2b4f      	cmp	r3, #79	; 0x4f
 80049fc:	d902      	bls.n	8004a04 <osMutexNew+0x8c>
          mem = 1;
 80049fe:	2301      	movs	r3, #1
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	e00c      	b.n	8004a1e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d108      	bne.n	8004a1e <osMutexNew+0xa6>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d104      	bne.n	8004a1e <osMutexNew+0xa6>
            mem = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	e001      	b.n	8004a1e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d112      	bne.n	8004a4a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	4619      	mov	r1, r3
 8004a30:	2004      	movs	r0, #4
 8004a32:	f000 fe9d 	bl	8005770 <xQueueCreateMutexStatic>
 8004a36:	6278      	str	r0, [r7, #36]	; 0x24
 8004a38:	e016      	b.n	8004a68 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	2001      	movs	r0, #1
 8004a42:	f000 fe95 	bl	8005770 <xQueueCreateMutexStatic>
 8004a46:	6278      	str	r0, [r7, #36]	; 0x24
 8004a48:	e00e      	b.n	8004a68 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10b      	bne.n	8004a68 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d004      	beq.n	8004a60 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8004a56:	2004      	movs	r0, #4
 8004a58:	f000 fe72 	bl	8005740 <xQueueCreateMutex>
 8004a5c:	6278      	str	r0, [r7, #36]	; 0x24
 8004a5e:	e003      	b.n	8004a68 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8004a60:	2001      	movs	r0, #1
 8004a62:	f000 fe6d 	bl	8005740 <xQueueCreateMutex>
 8004a66:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00c      	beq.n	8004a88 <osMutexNew+0x110>
        if (attr != NULL) {
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <osMutexNew+0x104>
          name = attr->name;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	617b      	str	r3, [r7, #20]
 8004a7a:	e001      	b.n	8004a80 <osMutexNew+0x108>
        } else {
          name = NULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8004a80:	6979      	ldr	r1, [r7, #20]
 8004a82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a84:	f001 fd58 	bl	8006538 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d006      	beq.n	8004a9c <osMutexNew+0x124>
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3728      	adds	r7, #40	; 0x28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	200000a8 	.word	0x200000a8

08004aac <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aca:	f3ef 8305 	mrs	r3, IPSR
 8004ace:	613b      	str	r3, [r7, #16]
  return(result);
 8004ad0:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10f      	bne.n	8004af6 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8004ada:	60fb      	str	r3, [r7, #12]
  return(result);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <osMutexAcquire+0x4a>
 8004ae2:	4b20      	ldr	r3, [pc, #128]	; (8004b64 <osMutexAcquire+0xb8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d109      	bne.n	8004afe <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004aea:	f3ef 8311 	mrs	r3, BASEPRI
 8004aee:	60bb      	str	r3, [r7, #8]
  return(result);
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <osMutexAcquire+0x52>
    stat = osErrorISR;
 8004af6:	f06f 0305 	mvn.w	r3, #5
 8004afa:	61fb      	str	r3, [r7, #28]
 8004afc:	e02c      	b.n	8004b58 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d103      	bne.n	8004b0c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8004b04:	f06f 0303 	mvn.w	r3, #3
 8004b08:	61fb      	str	r3, [r7, #28]
 8004b0a:	e025      	b.n	8004b58 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d011      	beq.n	8004b36 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004b12:	6839      	ldr	r1, [r7, #0]
 8004b14:	69b8      	ldr	r0, [r7, #24]
 8004b16:	f000 fe79 	bl	800580c <xQueueTakeMutexRecursive>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d01b      	beq.n	8004b58 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8004b26:	f06f 0301 	mvn.w	r3, #1
 8004b2a:	61fb      	str	r3, [r7, #28]
 8004b2c:	e014      	b.n	8004b58 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004b2e:	f06f 0302 	mvn.w	r3, #2
 8004b32:	61fb      	str	r3, [r7, #28]
 8004b34:	e010      	b.n	8004b58 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004b36:	6839      	ldr	r1, [r7, #0]
 8004b38:	69b8      	ldr	r0, [r7, #24]
 8004b3a:	f001 f9f7 	bl	8005f2c <xQueueSemaphoreTake>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d009      	beq.n	8004b58 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8004b4a:	f06f 0301 	mvn.w	r3, #1
 8004b4e:	61fb      	str	r3, [r7, #28]
 8004b50:	e002      	b.n	8004b58 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8004b52:	f06f 0302 	mvn.w	r3, #2
 8004b56:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004b58:	69fb      	ldr	r3, [r7, #28]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3720      	adds	r7, #32
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	200000a8 	.word	0x200000a8

08004b68 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b088      	sub	sp, #32
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b84:	f3ef 8305 	mrs	r3, IPSR
 8004b88:	613b      	str	r3, [r7, #16]
  return(result);
 8004b8a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10f      	bne.n	8004bb0 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b90:	f3ef 8310 	mrs	r3, PRIMASK
 8004b94:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d109      	bne.n	8004bb0 <osMutexRelease+0x48>
 8004b9c:	4b19      	ldr	r3, [pc, #100]	; (8004c04 <osMutexRelease+0x9c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d109      	bne.n	8004bb8 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ba4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ba8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d003      	beq.n	8004bb8 <osMutexRelease+0x50>
    stat = osErrorISR;
 8004bb0:	f06f 0305 	mvn.w	r3, #5
 8004bb4:	61fb      	str	r3, [r7, #28]
 8004bb6:	e01f      	b.n	8004bf8 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d103      	bne.n	8004bc6 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8004bbe:	f06f 0303 	mvn.w	r3, #3
 8004bc2:	61fb      	str	r3, [r7, #28]
 8004bc4:	e018      	b.n	8004bf8 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d009      	beq.n	8004be0 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004bcc:	69b8      	ldr	r0, [r7, #24]
 8004bce:	f000 fdea 	bl	80057a6 <xQueueGiveMutexRecursive>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d00f      	beq.n	8004bf8 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004bd8:	f06f 0302 	mvn.w	r3, #2
 8004bdc:	61fb      	str	r3, [r7, #28]
 8004bde:	e00b      	b.n	8004bf8 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004be0:	2300      	movs	r3, #0
 8004be2:	2200      	movs	r2, #0
 8004be4:	2100      	movs	r1, #0
 8004be6:	69b8      	ldr	r0, [r7, #24]
 8004be8:	f000 feac 	bl	8005944 <xQueueGenericSend>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d002      	beq.n	8004bf8 <osMutexRelease+0x90>
        stat = osErrorResource;
 8004bf2:	f06f 0302 	mvn.w	r3, #2
 8004bf6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8004bf8:	69fb      	ldr	r3, [r7, #28]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	200000a8 	.word	0x200000a8

08004c08 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08c      	sub	sp, #48	; 0x30
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c18:	f3ef 8305 	mrs	r3, IPSR
 8004c1c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c1e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f040 8088 	bne.w	8004d36 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c26:	f3ef 8310 	mrs	r3, PRIMASK
 8004c2a:	617b      	str	r3, [r7, #20]
  return(result);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f040 8081 	bne.w	8004d36 <osSemaphoreNew+0x12e>
 8004c34:	4b42      	ldr	r3, [pc, #264]	; (8004d40 <osSemaphoreNew+0x138>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d105      	bne.n	8004c48 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c3c:	f3ef 8311 	mrs	r3, BASEPRI
 8004c40:	613b      	str	r3, [r7, #16]
  return(result);
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d176      	bne.n	8004d36 <osSemaphoreNew+0x12e>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d073      	beq.n	8004d36 <osSemaphoreNew+0x12e>
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d86f      	bhi.n	8004d36 <osSemaphoreNew+0x12e>
    mem = -1;
 8004c56:	f04f 33ff 	mov.w	r3, #4294967295
 8004c5a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d015      	beq.n	8004c8e <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d006      	beq.n	8004c78 <osSemaphoreNew+0x70>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	2b4f      	cmp	r3, #79	; 0x4f
 8004c70:	d902      	bls.n	8004c78 <osSemaphoreNew+0x70>
        mem = 1;
 8004c72:	2301      	movs	r3, #1
 8004c74:	623b      	str	r3, [r7, #32]
 8004c76:	e00c      	b.n	8004c92 <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d108      	bne.n	8004c92 <osSemaphoreNew+0x8a>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d104      	bne.n	8004c92 <osSemaphoreNew+0x8a>
          mem = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	623b      	str	r3, [r7, #32]
 8004c8c:	e001      	b.n	8004c92 <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d04d      	beq.n	8004d36 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d129      	bne.n	8004cf4 <osSemaphoreNew+0xec>
        if (mem == 1) {
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d10b      	bne.n	8004cbe <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	2303      	movs	r3, #3
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	2001      	movs	r0, #1
 8004cb6:	f000 fc57 	bl	8005568 <xQueueGenericCreateStatic>
 8004cba:	6278      	str	r0, [r7, #36]	; 0x24
 8004cbc:	e005      	b.n	8004cca <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004cbe:	2203      	movs	r2, #3
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	f000 fcc2 	bl	800564c <xQueueGenericCreate>
 8004cc8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d022      	beq.n	8004d16 <osSemaphoreNew+0x10e>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d01f      	beq.n	8004d16 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2200      	movs	r2, #0
 8004cda:	2100      	movs	r1, #0
 8004cdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cde:	f000 fe31 	bl	8005944 <xQueueGenericSend>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d016      	beq.n	8004d16 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8004ce8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cea:	f001 fadb 	bl	80062a4 <vQueueDelete>
            hSemaphore = NULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf2:	e010      	b.n	8004d16 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d108      	bne.n	8004d0c <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 fdb7 	bl	8005876 <xQueueCreateCountingSemaphoreStatic>
 8004d08:	6278      	str	r0, [r7, #36]	; 0x24
 8004d0a:	e004      	b.n	8004d16 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 fde6 	bl	80058e0 <xQueueCreateCountingSemaphore>
 8004d14:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00c      	beq.n	8004d36 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <osSemaphoreNew+0x122>
          name = attr->name;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	61fb      	str	r3, [r7, #28]
 8004d28:	e001      	b.n	8004d2e <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004d2e:	69f9      	ldr	r1, [r7, #28]
 8004d30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d32:	f001 fc01 	bl	8006538 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3728      	adds	r7, #40	; 0x28
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	200000a8 	.word	0x200000a8

08004d44 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b088      	sub	sp, #32
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d103      	bne.n	8004d64 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004d5c:	f06f 0303 	mvn.w	r3, #3
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	e04b      	b.n	8004dfc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d64:	f3ef 8305 	mrs	r3, IPSR
 8004d68:	617b      	str	r3, [r7, #20]
  return(result);
 8004d6a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10f      	bne.n	8004d90 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d70:	f3ef 8310 	mrs	r3, PRIMASK
 8004d74:	613b      	str	r3, [r7, #16]
  return(result);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d109      	bne.n	8004d90 <osSemaphoreAcquire+0x4c>
 8004d7c:	4b22      	ldr	r3, [pc, #136]	; (8004e08 <osSemaphoreAcquire+0xc4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d128      	bne.n	8004dd6 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d84:	f3ef 8311 	mrs	r3, BASEPRI
 8004d88:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d022      	beq.n	8004dd6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8004d96:	f06f 0303 	mvn.w	r3, #3
 8004d9a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004d9c:	e02d      	b.n	8004dfa <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004da2:	f107 0308 	add.w	r3, r7, #8
 8004da6:	461a      	mov	r2, r3
 8004da8:	2100      	movs	r1, #0
 8004daa:	69b8      	ldr	r0, [r7, #24]
 8004dac:	f001 f9c6 	bl	800613c <xQueueReceiveFromISR>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d003      	beq.n	8004dbe <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8004db6:	f06f 0302 	mvn.w	r3, #2
 8004dba:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004dbc:	e01d      	b.n	8004dfa <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01a      	beq.n	8004dfa <osSemaphoreAcquire+0xb6>
 8004dc4:	4b11      	ldr	r3, [pc, #68]	; (8004e0c <osSemaphoreAcquire+0xc8>)
 8004dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8004dd4:	e011      	b.n	8004dfa <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004dd6:	6839      	ldr	r1, [r7, #0]
 8004dd8:	69b8      	ldr	r0, [r7, #24]
 8004dda:	f001 f8a7 	bl	8005f2c <xQueueSemaphoreTake>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d00b      	beq.n	8004dfc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004dea:	f06f 0301 	mvn.w	r3, #1
 8004dee:	61fb      	str	r3, [r7, #28]
 8004df0:	e004      	b.n	8004dfc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8004df2:	f06f 0302 	mvn.w	r3, #2
 8004df6:	61fb      	str	r3, [r7, #28]
 8004df8:	e000      	b.n	8004dfc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004dfa:	bf00      	nop
      }
    }
  }

  return (stat);
 8004dfc:	69fb      	ldr	r3, [r7, #28]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	200000a8 	.word	0x200000a8
 8004e0c:	e000ed04 	.word	0xe000ed04

08004e10 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b088      	sub	sp, #32
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d103      	bne.n	8004e2e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004e26:	f06f 0303 	mvn.w	r3, #3
 8004e2a:	61fb      	str	r3, [r7, #28]
 8004e2c:	e03e      	b.n	8004eac <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e2e:	f3ef 8305 	mrs	r3, IPSR
 8004e32:	617b      	str	r3, [r7, #20]
  return(result);
 8004e34:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10f      	bne.n	8004e5a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e3e:	613b      	str	r3, [r7, #16]
  return(result);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d109      	bne.n	8004e5a <osSemaphoreRelease+0x4a>
 8004e46:	4b1c      	ldr	r3, [pc, #112]	; (8004eb8 <osSemaphoreRelease+0xa8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d120      	bne.n	8004e90 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004e4e:	f3ef 8311 	mrs	r3, BASEPRI
 8004e52:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01a      	beq.n	8004e90 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004e5e:	f107 0308 	add.w	r3, r7, #8
 8004e62:	4619      	mov	r1, r3
 8004e64:	69b8      	ldr	r0, [r7, #24]
 8004e66:	f000 fefb 	bl	8005c60 <xQueueGiveFromISR>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d003      	beq.n	8004e78 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8004e70:	f06f 0302 	mvn.w	r3, #2
 8004e74:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004e76:	e018      	b.n	8004eaa <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d015      	beq.n	8004eaa <osSemaphoreRelease+0x9a>
 8004e7e:	4b0f      	ldr	r3, [pc, #60]	; (8004ebc <osSemaphoreRelease+0xac>)
 8004e80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	f3bf 8f4f 	dsb	sy
 8004e8a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004e8e:	e00c      	b.n	8004eaa <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004e90:	2300      	movs	r3, #0
 8004e92:	2200      	movs	r2, #0
 8004e94:	2100      	movs	r1, #0
 8004e96:	69b8      	ldr	r0, [r7, #24]
 8004e98:	f000 fd54 	bl	8005944 <xQueueGenericSend>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d004      	beq.n	8004eac <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8004ea2:	f06f 0302 	mvn.w	r3, #2
 8004ea6:	61fb      	str	r3, [r7, #28]
 8004ea8:	e000      	b.n	8004eac <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004eaa:	bf00      	nop
    }
  }

  return (stat);
 8004eac:	69fb      	ldr	r3, [r7, #28]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3720      	adds	r7, #32
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	200000a8 	.word	0x200000a8
 8004ebc:	e000ed04 	.word	0xe000ed04

08004ec0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b088      	sub	sp, #32
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ecc:	f3ef 8305 	mrs	r3, IPSR
 8004ed0:	617b      	str	r3, [r7, #20]
  return(result);
 8004ed2:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10f      	bne.n	8004ef8 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed8:	f3ef 8310 	mrs	r3, PRIMASK
 8004edc:	613b      	str	r3, [r7, #16]
  return(result);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d109      	bne.n	8004ef8 <osSemaphoreDelete+0x38>
 8004ee4:	4b10      	ldr	r3, [pc, #64]	; (8004f28 <osSemaphoreDelete+0x68>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	d109      	bne.n	8004f00 <osSemaphoreDelete+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004eec:	f3ef 8311 	mrs	r3, BASEPRI
 8004ef0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8004ef8:	f06f 0305 	mvn.w	r3, #5
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	e00e      	b.n	8004f1e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d103      	bne.n	8004f0e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8004f06:	f06f 0303 	mvn.w	r3, #3
 8004f0a:	61fb      	str	r3, [r7, #28]
 8004f0c:	e007      	b.n	8004f1e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8004f0e:	69b8      	ldr	r0, [r7, #24]
 8004f10:	f001 fb3a 	bl	8006588 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8004f18:	69b8      	ldr	r0, [r7, #24]
 8004f1a:	f001 f9c3 	bl	80062a4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8004f1e:	69fb      	ldr	r3, [r7, #28]
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3720      	adds	r7, #32
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	200000a8 	.word	0x200000a8

08004f2c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08c      	sub	sp, #48	; 0x30
 8004f30:	af02      	add	r7, sp, #8
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f3c:	f3ef 8305 	mrs	r3, IPSR
 8004f40:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f42:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d170      	bne.n	800502a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f48:	f3ef 8310 	mrs	r3, PRIMASK
 8004f4c:	617b      	str	r3, [r7, #20]
  return(result);
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d16a      	bne.n	800502a <osMessageQueueNew+0xfe>
 8004f54:	4b37      	ldr	r3, [pc, #220]	; (8005034 <osMessageQueueNew+0x108>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d105      	bne.n	8004f68 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f5c:	f3ef 8311 	mrs	r3, BASEPRI
 8004f60:	613b      	str	r3, [r7, #16]
  return(result);
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d160      	bne.n	800502a <osMessageQueueNew+0xfe>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d05d      	beq.n	800502a <osMessageQueueNew+0xfe>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d05a      	beq.n	800502a <osMessageQueueNew+0xfe>
    mem = -1;
 8004f74:	f04f 33ff 	mov.w	r3, #4294967295
 8004f78:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d029      	beq.n	8004fd4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d012      	beq.n	8004fae <osMessageQueueNew+0x82>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	2b4f      	cmp	r3, #79	; 0x4f
 8004f8e:	d90e      	bls.n	8004fae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	695a      	ldr	r2, [r3, #20]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	fb01 f303 	mul.w	r3, r1, r3
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d302      	bcc.n	8004fae <osMessageQueueNew+0x82>
        mem = 1;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	623b      	str	r3, [r7, #32]
 8004fac:	e014      	b.n	8004fd8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d110      	bne.n	8004fd8 <osMessageQueueNew+0xac>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10c      	bne.n	8004fd8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d108      	bne.n	8004fd8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d104      	bne.n	8004fd8 <osMessageQueueNew+0xac>
          mem = 0;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	623b      	str	r3, [r7, #32]
 8004fd2:	e001      	b.n	8004fd8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d10c      	bne.n	8004ff8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691a      	ldr	r2, [r3, #16]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6899      	ldr	r1, [r3, #8]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	460b      	mov	r3, r1
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 faba 	bl	8005568 <xQueueGenericCreateStatic>
 8004ff4:	6278      	str	r0, [r7, #36]	; 0x24
 8004ff6:	e008      	b.n	800500a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d105      	bne.n	800500a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004ffe:	2200      	movs	r2, #0
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 fb22 	bl	800564c <xQueueGenericCreate>
 8005008:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00c      	beq.n	800502a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <osMessageQueueNew+0xf2>
        name = attr->name;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	61fb      	str	r3, [r7, #28]
 800501c:	e001      	b.n	8005022 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 800501e:	2300      	movs	r3, #0
 8005020:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005022:	69f9      	ldr	r1, [r7, #28]
 8005024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005026:	f001 fa87 	bl	8006538 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800502c:	4618      	mov	r0, r3
 800502e:	3728      	adds	r7, #40	; 0x28
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	200000a8 	.word	0x200000a8

08005038 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	4613      	mov	r3, r2
 8005046:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800504c:	2300      	movs	r3, #0
 800504e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005050:	f3ef 8305 	mrs	r3, IPSR
 8005054:	61fb      	str	r3, [r7, #28]
  return(result);
 8005056:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10f      	bne.n	800507c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800505c:	f3ef 8310 	mrs	r3, PRIMASK
 8005060:	61bb      	str	r3, [r7, #24]
  return(result);
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d109      	bne.n	800507c <osMessageQueuePut+0x44>
 8005068:	4b2b      	ldr	r3, [pc, #172]	; (8005118 <osMessageQueuePut+0xe0>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d12e      	bne.n	80050ce <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005070:	f3ef 8311 	mrs	r3, BASEPRI
 8005074:	617b      	str	r3, [r7, #20]
  return(result);
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d028      	beq.n	80050ce <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d005      	beq.n	800508e <osMessageQueuePut+0x56>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <osMessageQueuePut+0x56>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800508e:	f06f 0303 	mvn.w	r3, #3
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005094:	e039      	b.n	800510a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005096:	2300      	movs	r3, #0
 8005098:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800509a:	f107 0210 	add.w	r2, r7, #16
 800509e:	2300      	movs	r3, #0
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	6a38      	ldr	r0, [r7, #32]
 80050a4:	f000 fd48 	bl	8005b38 <xQueueGenericSendFromISR>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d003      	beq.n	80050b6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80050ae:	f06f 0302 	mvn.w	r3, #2
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80050b4:	e029      	b.n	800510a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d026      	beq.n	800510a <osMessageQueuePut+0xd2>
 80050bc:	4b17      	ldr	r3, [pc, #92]	; (800511c <osMessageQueuePut+0xe4>)
 80050be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80050cc:	e01d      	b.n	800510a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <osMessageQueuePut+0xa2>
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d103      	bne.n	80050e2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 80050da:	f06f 0303 	mvn.w	r3, #3
 80050de:	627b      	str	r3, [r7, #36]	; 0x24
 80050e0:	e014      	b.n	800510c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80050e2:	2300      	movs	r3, #0
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	6a38      	ldr	r0, [r7, #32]
 80050ea:	f000 fc2b 	bl	8005944 <xQueueGenericSend>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d00b      	beq.n	800510c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 80050fa:	f06f 0301 	mvn.w	r3, #1
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005100:	e004      	b.n	800510c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005102:	f06f 0302 	mvn.w	r3, #2
 8005106:	627b      	str	r3, [r7, #36]	; 0x24
 8005108:	e000      	b.n	800510c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800510a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800510e:	4618      	mov	r0, r3
 8005110:	3728      	adds	r7, #40	; 0x28
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	200000a8 	.word	0x200000a8
 800511c:	e000ed04 	.word	0xe000ed04

08005120 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b08a      	sub	sp, #40	; 0x28
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
 800512c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005132:	2300      	movs	r3, #0
 8005134:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005136:	f3ef 8305 	mrs	r3, IPSR
 800513a:	61fb      	str	r3, [r7, #28]
  return(result);
 800513c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10f      	bne.n	8005162 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005142:	f3ef 8310 	mrs	r3, PRIMASK
 8005146:	61bb      	str	r3, [r7, #24]
  return(result);
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d109      	bne.n	8005162 <osMessageQueueGet+0x42>
 800514e:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <osMessageQueueGet+0xdc>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d12e      	bne.n	80051b4 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005156:	f3ef 8311 	mrs	r3, BASEPRI
 800515a:	617b      	str	r3, [r7, #20]
  return(result);
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d028      	beq.n	80051b4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <osMessageQueueGet+0x54>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <osMessageQueueGet+0x54>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005174:	f06f 0303 	mvn.w	r3, #3
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800517a:	e038      	b.n	80051ee <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800517c:	2300      	movs	r3, #0
 800517e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005180:	f107 0310 	add.w	r3, r7, #16
 8005184:	461a      	mov	r2, r3
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	6a38      	ldr	r0, [r7, #32]
 800518a:	f000 ffd7 	bl	800613c <xQueueReceiveFromISR>
 800518e:	4603      	mov	r3, r0
 8005190:	2b01      	cmp	r3, #1
 8005192:	d003      	beq.n	800519c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005194:	f06f 0302 	mvn.w	r3, #2
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800519a:	e028      	b.n	80051ee <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d025      	beq.n	80051ee <osMessageQueueGet+0xce>
 80051a2:	4b17      	ldr	r3, [pc, #92]	; (8005200 <osMessageQueueGet+0xe0>)
 80051a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80051b2:	e01c      	b.n	80051ee <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80051b4:	6a3b      	ldr	r3, [r7, #32]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <osMessageQueueGet+0xa0>
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d103      	bne.n	80051c8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80051c0:	f06f 0303 	mvn.w	r3, #3
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
 80051c6:	e013      	b.n	80051f0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	68b9      	ldr	r1, [r7, #8]
 80051cc:	6a38      	ldr	r0, [r7, #32]
 80051ce:	f000 fdd1 	bl	8005d74 <xQueueReceive>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d00b      	beq.n	80051f0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 80051de:	f06f 0301 	mvn.w	r3, #1
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
 80051e4:	e004      	b.n	80051f0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 80051e6:	f06f 0302 	mvn.w	r3, #2
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
 80051ec:	e000      	b.n	80051f0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80051ee:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3728      	adds	r7, #40	; 0x28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	200000a8 	.word	0x200000a8
 8005200:	e000ed04 	.word	0xe000ed04

08005204 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005204:	b580      	push	{r7, lr}
 8005206:	b088      	sub	sp, #32
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d102      	bne.n	800521c <osMessageQueueGetCount+0x18>
    count = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	e01e      	b.n	800525a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800521c:	f3ef 8305 	mrs	r3, IPSR
 8005220:	617b      	str	r3, [r7, #20]
  return(result);
 8005222:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10f      	bne.n	8005248 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005228:	f3ef 8310 	mrs	r3, PRIMASK
 800522c:	613b      	str	r3, [r7, #16]
  return(result);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d109      	bne.n	8005248 <osMessageQueueGetCount+0x44>
 8005234:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <osMessageQueueGetCount+0x60>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b02      	cmp	r3, #2
 800523a:	d10a      	bne.n	8005252 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800523c:	f3ef 8311 	mrs	r3, BASEPRI
 8005240:	60fb      	str	r3, [r7, #12]
  return(result);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005248:	69b8      	ldr	r0, [r7, #24]
 800524a:	f001 f811 	bl	8006270 <uxQueueMessagesWaitingFromISR>
 800524e:	61f8      	str	r0, [r7, #28]
 8005250:	e003      	b.n	800525a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005252:	69b8      	ldr	r0, [r7, #24]
 8005254:	f000 ffef 	bl	8006236 <uxQueueMessagesWaiting>
 8005258:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800525a:	69fb      	ldr	r3, [r7, #28]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3720      	adds	r7, #32
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	200000a8 	.word	0x200000a8

08005268 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8005268:	b580      	push	{r7, lr}
 800526a:	b088      	sub	sp, #32
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005274:	f3ef 8305 	mrs	r3, IPSR
 8005278:	617b      	str	r3, [r7, #20]
  return(result);
 800527a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10f      	bne.n	80052a0 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005280:	f3ef 8310 	mrs	r3, PRIMASK
 8005284:	613b      	str	r3, [r7, #16]
  return(result);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d109      	bne.n	80052a0 <osMessageQueueDelete+0x38>
 800528c:	4b10      	ldr	r3, [pc, #64]	; (80052d0 <osMessageQueueDelete+0x68>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b02      	cmp	r3, #2
 8005292:	d109      	bne.n	80052a8 <osMessageQueueDelete+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005294:	f3ef 8311 	mrs	r3, BASEPRI
 8005298:	60fb      	str	r3, [r7, #12]
  return(result);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 80052a0:	f06f 0305 	mvn.w	r3, #5
 80052a4:	61fb      	str	r3, [r7, #28]
 80052a6:	e00e      	b.n	80052c6 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d103      	bne.n	80052b6 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 80052ae:	f06f 0303 	mvn.w	r3, #3
 80052b2:	61fb      	str	r3, [r7, #28]
 80052b4:	e007      	b.n	80052c6 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 80052b6:	69b8      	ldr	r0, [r7, #24]
 80052b8:	f001 f966 	bl	8006588 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80052bc:	2300      	movs	r3, #0
 80052be:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 80052c0:	69b8      	ldr	r0, [r7, #24]
 80052c2:	f000 ffef 	bl	80062a4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80052c6:	69fb      	ldr	r3, [r7, #28]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3720      	adds	r7, #32
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	200000a8 	.word	0x200000a8

080052d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4a06      	ldr	r2, [pc, #24]	; (80052fc <vApplicationGetIdleTaskMemory+0x28>)
 80052e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	4a05      	ldr	r2, [pc, #20]	; (8005300 <vApplicationGetIdleTaskMemory+0x2c>)
 80052ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2280      	movs	r2, #128	; 0x80
 80052f0:	601a      	str	r2, [r3, #0]
}
 80052f2:	bf00      	nop
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr
 80052fc:	200000ac 	.word	0x200000ac
 8005300:	20000108 	.word	0x20000108

08005304 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4a07      	ldr	r2, [pc, #28]	; (8005330 <vApplicationGetTimerTaskMemory+0x2c>)
 8005314:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	4a06      	ldr	r2, [pc, #24]	; (8005334 <vApplicationGetTimerTaskMemory+0x30>)
 800531a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005322:	601a      	str	r2, [r3, #0]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	20000308 	.word	0x20000308
 8005334:	20000364 	.word	0x20000364

08005338 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f103 0208 	add.w	r2, r3, #8
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f04f 32ff 	mov.w	r2, #4294967295
 8005350:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f103 0208 	add.w	r2, r3, #8
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f103 0208 	add.w	r2, r3, #8
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800536c:	bf00      	nop
 800536e:	370c      	adds	r7, #12
 8005370:	46bd      	mov	sp, r7
 8005372:	bc80      	pop	{r7}
 8005374:	4770      	bx	lr

08005376 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	bc80      	pop	{r7}
 800538c:	4770      	bx	lr

0800538e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800538e:	b480      	push	{r7}
 8005390:	b085      	sub	sp, #20
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
 8005396:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	689a      	ldr	r2, [r3, #8]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	601a      	str	r2, [r3, #0]
}
 80053ca:	bf00      	nop
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bc80      	pop	{r7}
 80053d2:	4770      	bx	lr

080053d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ea:	d103      	bne.n	80053f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	e00c      	b.n	800540e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3308      	adds	r3, #8
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	e002      	b.n	8005402 <vListInsert+0x2e>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	429a      	cmp	r2, r3
 800540c:	d2f6      	bcs.n	80053fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	601a      	str	r2, [r3, #0]
}
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	bc80      	pop	{r7}
 8005442:	4770      	bx	lr

08005444 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6892      	ldr	r2, [r2, #8]
 800545a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	6852      	ldr	r2, [r2, #4]
 8005464:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	429a      	cmp	r2, r3
 800546e:	d103      	bne.n	8005478 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2200      	movs	r2, #0
 800547c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	1e5a      	subs	r2, r3, #1
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	bc80      	pop	{r7}
 8005494:	4770      	bx	lr
	...

08005498 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d109      	bne.n	80054c0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	60bb      	str	r3, [r7, #8]
 80054be:	e7fe      	b.n	80054be <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80054c0:	f002 fcba 	bl	8007e38 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054cc:	68f9      	ldr	r1, [r7, #12]
 80054ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054d0:	fb01 f303 	mul.w	r3, r1, r3
 80054d4:	441a      	add	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f0:	3b01      	subs	r3, #1
 80054f2:	68f9      	ldr	r1, [r7, #12]
 80054f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80054f6:	fb01 f303 	mul.w	r3, r1, r3
 80054fa:	441a      	add	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	22ff      	movs	r2, #255	; 0xff
 8005504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	22ff      	movs	r2, #255	; 0xff
 800550c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d114      	bne.n	8005540 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d01a      	beq.n	8005554 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	3310      	adds	r3, #16
 8005522:	4618      	mov	r0, r3
 8005524:	f001 fcea 	bl	8006efc <xTaskRemoveFromEventList>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d012      	beq.n	8005554 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800552e:	4b0d      	ldr	r3, [pc, #52]	; (8005564 <xQueueGenericReset+0xcc>)
 8005530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	f3bf 8f4f 	dsb	sy
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	e009      	b.n	8005554 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	3310      	adds	r3, #16
 8005544:	4618      	mov	r0, r3
 8005546:	f7ff fef7 	bl	8005338 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	3324      	adds	r3, #36	; 0x24
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff fef2 	bl	8005338 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005554:	f002 fc9e 	bl	8007e94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005558:	2301      	movs	r3, #1
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	e000ed04 	.word	0xe000ed04

08005568 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005568:	b580      	push	{r7, lr}
 800556a:	b08e      	sub	sp, #56	; 0x38
 800556c:	af02      	add	r7, sp, #8
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d109      	bne.n	8005590 <xQueueGenericCreateStatic+0x28>
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	62bb      	str	r3, [r7, #40]	; 0x28
 800558e:	e7fe      	b.n	800558e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d109      	bne.n	80055aa <xQueueGenericCreateStatic+0x42>
 8005596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800559a:	f383 8811 	msr	BASEPRI, r3
 800559e:	f3bf 8f6f 	isb	sy
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	627b      	str	r3, [r7, #36]	; 0x24
 80055a8:	e7fe      	b.n	80055a8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d002      	beq.n	80055b6 <xQueueGenericCreateStatic+0x4e>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <xQueueGenericCreateStatic+0x52>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <xQueueGenericCreateStatic+0x54>
 80055ba:	2300      	movs	r3, #0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d109      	bne.n	80055d4 <xQueueGenericCreateStatic+0x6c>
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	623b      	str	r3, [r7, #32]
 80055d2:	e7fe      	b.n	80055d2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d102      	bne.n	80055e0 <xQueueGenericCreateStatic+0x78>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d101      	bne.n	80055e4 <xQueueGenericCreateStatic+0x7c>
 80055e0:	2301      	movs	r3, #1
 80055e2:	e000      	b.n	80055e6 <xQueueGenericCreateStatic+0x7e>
 80055e4:	2300      	movs	r3, #0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <xQueueGenericCreateStatic+0x96>
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	61fb      	str	r3, [r7, #28]
 80055fc:	e7fe      	b.n	80055fc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80055fe:	2350      	movs	r3, #80	; 0x50
 8005600:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	2b50      	cmp	r3, #80	; 0x50
 8005606:	d009      	beq.n	800561c <xQueueGenericCreateStatic+0xb4>
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	61bb      	str	r3, [r7, #24]
 800561a:	e7fe      	b.n	800561a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00d      	beq.n	8005642 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800562e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	4613      	mov	r3, r2
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	68b9      	ldr	r1, [r7, #8]
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f842 	bl	80056c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005644:	4618      	mov	r0, r3
 8005646:	3730      	adds	r7, #48	; 0x30
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08a      	sub	sp, #40	; 0x28
 8005650:	af02      	add	r7, sp, #8
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	4613      	mov	r3, r2
 8005658:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d109      	bne.n	8005674 <xQueueGenericCreate+0x28>
 8005660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	613b      	str	r3, [r7, #16]
 8005672:	e7fe      	b.n	8005672 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d102      	bne.n	8005680 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800567a:	2300      	movs	r3, #0
 800567c:	61fb      	str	r3, [r7, #28]
 800567e:	e004      	b.n	800568a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	68ba      	ldr	r2, [r7, #8]
 8005684:	fb02 f303 	mul.w	r3, r2, r3
 8005688:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	3350      	adds	r3, #80	; 0x50
 800568e:	4618      	mov	r0, r3
 8005690:	f002 fcc8 	bl	8008024 <pvPortMalloc>
 8005694:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00f      	beq.n	80056bc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	3350      	adds	r3, #80	; 0x50
 80056a0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056aa:	79fa      	ldrb	r2, [r7, #7]
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	4613      	mov	r3, r2
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	68b9      	ldr	r1, [r7, #8]
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f000 f805 	bl	80056c6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80056bc:	69bb      	ldr	r3, [r7, #24]
	}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	607a      	str	r2, [r7, #4]
 80056d2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d103      	bne.n	80056e2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	69ba      	ldr	r2, [r7, #24]
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	e002      	b.n	80056e8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056e2:	69bb      	ldr	r3, [r7, #24]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056f4:	2101      	movs	r1, #1
 80056f6:	69b8      	ldr	r0, [r7, #24]
 80056f8:	f7ff fece 	bl	8005498 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	78fa      	ldrb	r2, [r7, #3]
 8005700:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005704:	bf00      	nop
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00e      	beq.n	8005738 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800572c:	2300      	movs	r3, #0
 800572e:	2200      	movs	r2, #0
 8005730:	2100      	movs	r1, #0
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f906 	bl	8005944 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005738:	bf00      	nop
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800574a:	2301      	movs	r3, #1
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	2300      	movs	r3, #0
 8005750:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	461a      	mov	r2, r3
 8005756:	6939      	ldr	r1, [r7, #16]
 8005758:	6978      	ldr	r0, [r7, #20]
 800575a:	f7ff ff77 	bl	800564c <xQueueGenericCreate>
 800575e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f7ff ffd3 	bl	800570c <prvInitialiseMutex>

		return pxNewQueue;
 8005766:	68fb      	ldr	r3, [r7, #12]
	}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af02      	add	r7, sp, #8
 8005776:	4603      	mov	r3, r0
 8005778:	6039      	str	r1, [r7, #0]
 800577a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800577c:	2301      	movs	r3, #1
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	2300      	movs	r3, #0
 8005782:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	9300      	str	r3, [sp, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	2200      	movs	r2, #0
 800578c:	6939      	ldr	r1, [r7, #16]
 800578e:	6978      	ldr	r0, [r7, #20]
 8005790:	f7ff feea 	bl	8005568 <xQueueGenericCreateStatic>
 8005794:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f7ff ffb8 	bl	800570c <prvInitialiseMutex>

		return pxNewQueue;
 800579c:	68fb      	ldr	r3, [r7, #12]
	}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80057a6:	b590      	push	{r4, r7, lr}
 80057a8:	b087      	sub	sp, #28
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d109      	bne.n	80057cc <xQueueGiveMutexRecursive+0x26>
 80057b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	60fb      	str	r3, [r7, #12]
 80057ca:	e7fe      	b.n	80057ca <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	685c      	ldr	r4, [r3, #4]
 80057d0:	f001 fd4e 	bl	8007270 <xTaskGetCurrentTaskHandle>
 80057d4:	4603      	mov	r3, r0
 80057d6:	429c      	cmp	r4, r3
 80057d8:	d111      	bne.n	80057fe <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	1e5a      	subs	r2, r3, #1
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d105      	bne.n	80057f8 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80057ec:	2300      	movs	r3, #0
 80057ee:	2200      	movs	r2, #0
 80057f0:	2100      	movs	r1, #0
 80057f2:	6938      	ldr	r0, [r7, #16]
 80057f4:	f000 f8a6 	bl	8005944 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80057f8:	2301      	movs	r3, #1
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	e001      	b.n	8005802 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005802:	697b      	ldr	r3, [r7, #20]
	}
 8005804:	4618      	mov	r0, r3
 8005806:	371c      	adds	r7, #28
 8005808:	46bd      	mov	sp, r7
 800580a:	bd90      	pop	{r4, r7, pc}

0800580c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800580c:	b590      	push	{r4, r7, lr}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d109      	bne.n	8005834 <xQueueTakeMutexRecursive+0x28>
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	e7fe      	b.n	8005832 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	685c      	ldr	r4, [r3, #4]
 8005838:	f001 fd1a 	bl	8007270 <xTaskGetCurrentTaskHandle>
 800583c:	4603      	mov	r3, r0
 800583e:	429c      	cmp	r4, r3
 8005840:	d107      	bne.n	8005852 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	1c5a      	adds	r2, r3, #1
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800584c:	2301      	movs	r3, #1
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	e00c      	b.n	800586c <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	6938      	ldr	r0, [r7, #16]
 8005856:	f000 fb69 	bl	8005f2c <xQueueSemaphoreTake>
 800585a:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d004      	beq.n	800586c <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800586c:	697b      	ldr	r3, [r7, #20]
	}
 800586e:	4618      	mov	r0, r3
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	bd90      	pop	{r4, r7, pc}

08005876 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005876:	b580      	push	{r7, lr}
 8005878:	b08a      	sub	sp, #40	; 0x28
 800587a:	af02      	add	r7, sp, #8
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d109      	bne.n	800589c <xQueueCreateCountingSemaphoreStatic+0x26>
 8005888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800588c:	f383 8811 	msr	BASEPRI, r3
 8005890:	f3bf 8f6f 	isb	sy
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	61bb      	str	r3, [r7, #24]
 800589a:	e7fe      	b.n	800589a <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d909      	bls.n	80058b8 <xQueueCreateCountingSemaphoreStatic+0x42>
 80058a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	e7fe      	b.n	80058b6 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80058b8:	2302      	movs	r3, #2
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	2100      	movs	r1, #0
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f7ff fe50 	bl	8005568 <xQueueGenericCreateStatic>
 80058c8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80058d6:	69fb      	ldr	r3, [r7, #28]
	}
 80058d8:	4618      	mov	r0, r3
 80058da:	3720      	adds	r7, #32
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d109      	bne.n	8005904 <xQueueCreateCountingSemaphore+0x24>
 80058f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	613b      	str	r3, [r7, #16]
 8005902:	e7fe      	b.n	8005902 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	429a      	cmp	r2, r3
 800590a:	d909      	bls.n	8005920 <xQueueCreateCountingSemaphore+0x40>
 800590c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	e7fe      	b.n	800591e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005920:	2202      	movs	r2, #2
 8005922:	2100      	movs	r1, #0
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7ff fe91 	bl	800564c <xQueueGenericCreate>
 800592a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005938:	697b      	ldr	r3, [r7, #20]
	}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
	...

08005944 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b08e      	sub	sp, #56	; 0x38
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005952:	2300      	movs	r3, #0
 8005954:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	2b00      	cmp	r3, #0
 800595e:	d109      	bne.n	8005974 <xQueueGenericSend+0x30>
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	62bb      	str	r3, [r7, #40]	; 0x28
 8005972:	e7fe      	b.n	8005972 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d103      	bne.n	8005982 <xQueueGenericSend+0x3e>
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <xQueueGenericSend+0x42>
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <xQueueGenericSend+0x44>
 8005986:	2300      	movs	r3, #0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d109      	bne.n	80059a0 <xQueueGenericSend+0x5c>
 800598c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005990:	f383 8811 	msr	BASEPRI, r3
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	f3bf 8f4f 	dsb	sy
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
 800599e:	e7fe      	b.n	800599e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d103      	bne.n	80059ae <xQueueGenericSend+0x6a>
 80059a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <xQueueGenericSend+0x6e>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <xQueueGenericSend+0x70>
 80059b2:	2300      	movs	r3, #0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d109      	bne.n	80059cc <xQueueGenericSend+0x88>
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	623b      	str	r3, [r7, #32]
 80059ca:	e7fe      	b.n	80059ca <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059cc:	f001 fc5e 	bl	800728c <xTaskGetSchedulerState>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d102      	bne.n	80059dc <xQueueGenericSend+0x98>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d101      	bne.n	80059e0 <xQueueGenericSend+0x9c>
 80059dc:	2301      	movs	r3, #1
 80059de:	e000      	b.n	80059e2 <xQueueGenericSend+0x9e>
 80059e0:	2300      	movs	r3, #0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d109      	bne.n	80059fa <xQueueGenericSend+0xb6>
 80059e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ea:	f383 8811 	msr	BASEPRI, r3
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f3bf 8f4f 	dsb	sy
 80059f6:	61fb      	str	r3, [r7, #28]
 80059f8:	e7fe      	b.n	80059f8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059fa:	f002 fa1d 	bl	8007e38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d302      	bcc.n	8005a10 <xQueueGenericSend+0xcc>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d129      	bne.n	8005a64 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a16:	f000 fc7e 	bl	8006316 <prvCopyDataToQueue>
 8005a1a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d010      	beq.n	8005a46 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	3324      	adds	r3, #36	; 0x24
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f001 fa67 	bl	8006efc <xTaskRemoveFromEventList>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d013      	beq.n	8005a5c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a34:	4b3f      	ldr	r3, [pc, #252]	; (8005b34 <xQueueGenericSend+0x1f0>)
 8005a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	e00a      	b.n	8005a5c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d007      	beq.n	8005a5c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a4c:	4b39      	ldr	r3, [pc, #228]	; (8005b34 <xQueueGenericSend+0x1f0>)
 8005a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a52:	601a      	str	r2, [r3, #0]
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a5c:	f002 fa1a 	bl	8007e94 <vPortExitCritical>
				return pdPASS;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e063      	b.n	8005b2c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d103      	bne.n	8005a72 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a6a:	f002 fa13 	bl	8007e94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	e05c      	b.n	8005b2c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d106      	bne.n	8005a86 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a78:	f107 0314 	add.w	r3, r7, #20
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f001 fa9f 	bl	8006fc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a82:	2301      	movs	r3, #1
 8005a84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a86:	f002 fa05 	bl	8007e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a8a:	f001 f805 	bl	8006a98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a8e:	f002 f9d3 	bl	8007e38 <vPortEnterCritical>
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a98:	b25b      	sxtb	r3, r3
 8005a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9e:	d103      	bne.n	8005aa8 <xQueueGenericSend+0x164>
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005aae:	b25b      	sxtb	r3, r3
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab4:	d103      	bne.n	8005abe <xQueueGenericSend+0x17a>
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005abe:	f002 f9e9 	bl	8007e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ac2:	1d3a      	adds	r2, r7, #4
 8005ac4:	f107 0314 	add.w	r3, r7, #20
 8005ac8:	4611      	mov	r1, r2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f001 fa8e 	bl	8006fec <xTaskCheckForTimeOut>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d124      	bne.n	8005b20 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ad6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ad8:	f000 fd15 	bl	8006506 <prvIsQueueFull>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d018      	beq.n	8005b14 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	3310      	adds	r3, #16
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	4611      	mov	r1, r2
 8005aea:	4618      	mov	r0, r3
 8005aec:	f001 f9b8 	bl	8006e60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005af2:	f000 fca0 	bl	8006436 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005af6:	f000 ffdd 	bl	8006ab4 <xTaskResumeAll>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f47f af7c 	bne.w	80059fa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005b02:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <xQueueGenericSend+0x1f0>)
 8005b04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	e772      	b.n	80059fa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b16:	f000 fc8e 	bl	8006436 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b1a:	f000 ffcb 	bl	8006ab4 <xTaskResumeAll>
 8005b1e:	e76c      	b.n	80059fa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b22:	f000 fc88 	bl	8006436 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b26:	f000 ffc5 	bl	8006ab4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b2a:	2300      	movs	r3, #0
		}
	}
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3738      	adds	r7, #56	; 0x38
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	e000ed04 	.word	0xe000ed04

08005b38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08e      	sub	sp, #56	; 0x38
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d109      	bne.n	8005b64 <xQueueGenericSendFromISR+0x2c>
 8005b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
 8005b62:	e7fe      	b.n	8005b62 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d103      	bne.n	8005b72 <xQueueGenericSendFromISR+0x3a>
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <xQueueGenericSendFromISR+0x3e>
 8005b72:	2301      	movs	r3, #1
 8005b74:	e000      	b.n	8005b78 <xQueueGenericSendFromISR+0x40>
 8005b76:	2300      	movs	r3, #0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d109      	bne.n	8005b90 <xQueueGenericSendFromISR+0x58>
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	623b      	str	r3, [r7, #32]
 8005b8e:	e7fe      	b.n	8005b8e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d103      	bne.n	8005b9e <xQueueGenericSendFromISR+0x66>
 8005b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d101      	bne.n	8005ba2 <xQueueGenericSendFromISR+0x6a>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <xQueueGenericSendFromISR+0x6c>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d109      	bne.n	8005bbc <xQueueGenericSendFromISR+0x84>
 8005ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	61fb      	str	r3, [r7, #28]
 8005bba:	e7fe      	b.n	8005bba <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bbc:	f002 f9f6 	bl	8007fac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005bc0:	f3ef 8211 	mrs	r2, BASEPRI
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	61ba      	str	r2, [r7, #24]
 8005bd6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005bd8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005bda:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d302      	bcc.n	8005bee <xQueueGenericSendFromISR+0xb6>
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	2b02      	cmp	r3, #2
 8005bec:	d12c      	bne.n	8005c48 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	68b9      	ldr	r1, [r7, #8]
 8005bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bfe:	f000 fb8a 	bl	8006316 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c02:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0a:	d112      	bne.n	8005c32 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d016      	beq.n	8005c42 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	3324      	adds	r3, #36	; 0x24
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f001 f96f 	bl	8006efc <xTaskRemoveFromEventList>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00e      	beq.n	8005c42 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00b      	beq.n	8005c42 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]
 8005c30:	e007      	b.n	8005c42 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c36:	3301      	adds	r3, #1
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	b25a      	sxtb	r2, r3
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005c42:	2301      	movs	r3, #1
 8005c44:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005c46:	e001      	b.n	8005c4c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3738      	adds	r7, #56	; 0x38
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08e      	sub	sp, #56	; 0x38
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d109      	bne.n	8005c88 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	623b      	str	r3, [r7, #32]
 8005c86:	e7fe      	b.n	8005c86 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d009      	beq.n	8005ca4 <xQueueGiveFromISR+0x44>
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	61fb      	str	r3, [r7, #28]
 8005ca2:	e7fe      	b.n	8005ca2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d103      	bne.n	8005cb4 <xQueueGiveFromISR+0x54>
 8005cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <xQueueGiveFromISR+0x58>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e000      	b.n	8005cba <xQueueGiveFromISR+0x5a>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d109      	bne.n	8005cd2 <xQueueGiveFromISR+0x72>
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	61bb      	str	r3, [r7, #24]
 8005cd0:	e7fe      	b.n	8005cd0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cd2:	f002 f96b 	bl	8007fac <vPortValidateInterruptPriority>
	__asm volatile
 8005cd6:	f3ef 8211 	mrs	r2, BASEPRI
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	617a      	str	r2, [r7, #20]
 8005cec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005cee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d22b      	bcs.n	8005d5a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d12:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d1c:	d112      	bne.n	8005d44 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d016      	beq.n	8005d54 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d28:	3324      	adds	r3, #36	; 0x24
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f001 f8e6 	bl	8006efc <xTaskRemoveFromEventList>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00e      	beq.n	8005d54 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00b      	beq.n	8005d54 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	e007      	b.n	8005d54 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d48:	3301      	adds	r3, #1
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	b25a      	sxtb	r2, r3
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d54:	2301      	movs	r3, #1
 8005d56:	637b      	str	r3, [r7, #52]	; 0x34
 8005d58:	e001      	b.n	8005d5e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	637b      	str	r3, [r7, #52]	; 0x34
 8005d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d60:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3738      	adds	r7, #56	; 0x38
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
	...

08005d74 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b08c      	sub	sp, #48	; 0x30
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d80:	2300      	movs	r3, #0
 8005d82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d109      	bne.n	8005da2 <xQueueReceive+0x2e>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	623b      	str	r3, [r7, #32]
 8005da0:	e7fe      	b.n	8005da0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d103      	bne.n	8005db0 <xQueueReceive+0x3c>
 8005da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <xQueueReceive+0x40>
 8005db0:	2301      	movs	r3, #1
 8005db2:	e000      	b.n	8005db6 <xQueueReceive+0x42>
 8005db4:	2300      	movs	r3, #0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d109      	bne.n	8005dce <xQueueReceive+0x5a>
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	61fb      	str	r3, [r7, #28]
 8005dcc:	e7fe      	b.n	8005dcc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dce:	f001 fa5d 	bl	800728c <xTaskGetSchedulerState>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d102      	bne.n	8005dde <xQueueReceive+0x6a>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <xQueueReceive+0x6e>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <xQueueReceive+0x70>
 8005de2:	2300      	movs	r3, #0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d109      	bne.n	8005dfc <xQueueReceive+0x88>
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	61bb      	str	r3, [r7, #24]
 8005dfa:	e7fe      	b.n	8005dfa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005dfc:	f002 f81c 	bl	8007e38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01f      	beq.n	8005e4c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e0c:	68b9      	ldr	r1, [r7, #8]
 8005e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e10:	f000 faeb 	bl	80063ea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e16:	1e5a      	subs	r2, r3, #1
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00f      	beq.n	8005e44 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e26:	3310      	adds	r3, #16
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f001 f867 	bl	8006efc <xTaskRemoveFromEventList>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d007      	beq.n	8005e44 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e34:	4b3c      	ldr	r3, [pc, #240]	; (8005f28 <xQueueReceive+0x1b4>)
 8005e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e44:	f002 f826 	bl	8007e94 <vPortExitCritical>
				return pdPASS;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e069      	b.n	8005f20 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d103      	bne.n	8005e5a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e52:	f002 f81f 	bl	8007e94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e56:	2300      	movs	r3, #0
 8005e58:	e062      	b.n	8005f20 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d106      	bne.n	8005e6e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e60:	f107 0310 	add.w	r3, r7, #16
 8005e64:	4618      	mov	r0, r3
 8005e66:	f001 f8ab 	bl	8006fc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e6e:	f002 f811 	bl	8007e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e72:	f000 fe11 	bl	8006a98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e76:	f001 ffdf 	bl	8007e38 <vPortEnterCritical>
 8005e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e80:	b25b      	sxtb	r3, r3
 8005e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e86:	d103      	bne.n	8005e90 <xQueueReceive+0x11c>
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e96:	b25b      	sxtb	r3, r3
 8005e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9c:	d103      	bne.n	8005ea6 <xQueueReceive+0x132>
 8005e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ea6:	f001 fff5 	bl	8007e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005eaa:	1d3a      	adds	r2, r7, #4
 8005eac:	f107 0310 	add.w	r3, r7, #16
 8005eb0:	4611      	mov	r1, r2
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f001 f89a 	bl	8006fec <xTaskCheckForTimeOut>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d123      	bne.n	8005f06 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ec0:	f000 fb0b 	bl	80064da <prvIsQueueEmpty>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d017      	beq.n	8005efa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	3324      	adds	r3, #36	; 0x24
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	4611      	mov	r1, r2
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 ffc4 	bl	8006e60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eda:	f000 faac 	bl	8006436 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ede:	f000 fde9 	bl	8006ab4 <xTaskResumeAll>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d189      	bne.n	8005dfc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005ee8:	4b0f      	ldr	r3, [pc, #60]	; (8005f28 <xQueueReceive+0x1b4>)
 8005eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	e780      	b.n	8005dfc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005efc:	f000 fa9b 	bl	8006436 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f00:	f000 fdd8 	bl	8006ab4 <xTaskResumeAll>
 8005f04:	e77a      	b.n	8005dfc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f08:	f000 fa95 	bl	8006436 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f0c:	f000 fdd2 	bl	8006ab4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f12:	f000 fae2 	bl	80064da <prvIsQueueEmpty>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f43f af6f 	beq.w	8005dfc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f1e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3730      	adds	r7, #48	; 0x30
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	e000ed04 	.word	0xe000ed04

08005f2c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08e      	sub	sp, #56	; 0x38
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f36:	2300      	movs	r3, #0
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d109      	bne.n	8005f5c <xQueueSemaphoreTake+0x30>
 8005f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	623b      	str	r3, [r7, #32]
 8005f5a:	e7fe      	b.n	8005f5a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d009      	beq.n	8005f78 <xQueueSemaphoreTake+0x4c>
 8005f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	61fb      	str	r3, [r7, #28]
 8005f76:	e7fe      	b.n	8005f76 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f78:	f001 f988 	bl	800728c <xTaskGetSchedulerState>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d102      	bne.n	8005f88 <xQueueSemaphoreTake+0x5c>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <xQueueSemaphoreTake+0x60>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <xQueueSemaphoreTake+0x62>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d109      	bne.n	8005fa6 <xQueueSemaphoreTake+0x7a>
 8005f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	61bb      	str	r3, [r7, #24]
 8005fa4:	e7fe      	b.n	8005fa4 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fa6:	f001 ff47 	bl	8007e38 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fae:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d024      	beq.n	8006000 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb8:	1e5a      	subs	r2, r3, #1
 8005fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fbc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d104      	bne.n	8005fd0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005fc6:	f001 fadd 	bl	8007584 <pvTaskIncrementMutexHeldCount>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fce:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00f      	beq.n	8005ff8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	3310      	adds	r3, #16
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 ff8d 	bl	8006efc <xTaskRemoveFromEventList>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d007      	beq.n	8005ff8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005fe8:	4b53      	ldr	r3, [pc, #332]	; (8006138 <xQueueSemaphoreTake+0x20c>)
 8005fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ff8:	f001 ff4c 	bl	8007e94 <vPortExitCritical>
				return pdPASS;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e096      	b.n	800612e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d110      	bne.n	8006028 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	2b00      	cmp	r3, #0
 800600a:	d009      	beq.n	8006020 <xQueueSemaphoreTake+0xf4>
 800600c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006010:	f383 8811 	msr	BASEPRI, r3
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	617b      	str	r3, [r7, #20]
 800601e:	e7fe      	b.n	800601e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006020:	f001 ff38 	bl	8007e94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006024:	2300      	movs	r3, #0
 8006026:	e082      	b.n	800612e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800602a:	2b00      	cmp	r3, #0
 800602c:	d106      	bne.n	800603c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800602e:	f107 030c 	add.w	r3, r7, #12
 8006032:	4618      	mov	r0, r3
 8006034:	f000 ffc4 	bl	8006fc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006038:	2301      	movs	r3, #1
 800603a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800603c:	f001 ff2a 	bl	8007e94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006040:	f000 fd2a 	bl	8006a98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006044:	f001 fef8 	bl	8007e38 <vPortEnterCritical>
 8006048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800604a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800604e:	b25b      	sxtb	r3, r3
 8006050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006054:	d103      	bne.n	800605e <xQueueSemaphoreTake+0x132>
 8006056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006060:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006064:	b25b      	sxtb	r3, r3
 8006066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800606a:	d103      	bne.n	8006074 <xQueueSemaphoreTake+0x148>
 800606c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006074:	f001 ff0e 	bl	8007e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006078:	463a      	mov	r2, r7
 800607a:	f107 030c 	add.w	r3, r7, #12
 800607e:	4611      	mov	r1, r2
 8006080:	4618      	mov	r0, r3
 8006082:	f000 ffb3 	bl	8006fec <xTaskCheckForTimeOut>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d132      	bne.n	80060f2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800608c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800608e:	f000 fa24 	bl	80064da <prvIsQueueEmpty>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d026      	beq.n	80060e6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d109      	bne.n	80060b4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80060a0:	f001 feca 	bl	8007e38 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f001 f90d 	bl	80072c8 <xTaskPriorityInherit>
 80060ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80060b0:	f001 fef0 	bl	8007e94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	3324      	adds	r3, #36	; 0x24
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	4611      	mov	r1, r2
 80060bc:	4618      	mov	r0, r3
 80060be:	f000 fecf 	bl	8006e60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060c4:	f000 f9b7 	bl	8006436 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060c8:	f000 fcf4 	bl	8006ab4 <xTaskResumeAll>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f47f af69 	bne.w	8005fa6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80060d4:	4b18      	ldr	r3, [pc, #96]	; (8006138 <xQueueSemaphoreTake+0x20c>)
 80060d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	e75f      	b.n	8005fa6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80060e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060e8:	f000 f9a5 	bl	8006436 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060ec:	f000 fce2 	bl	8006ab4 <xTaskResumeAll>
 80060f0:	e759      	b.n	8005fa6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80060f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060f4:	f000 f99f 	bl	8006436 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060f8:	f000 fcdc 	bl	8006ab4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060fe:	f000 f9ec 	bl	80064da <prvIsQueueEmpty>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	f43f af4e 	beq.w	8005fa6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00d      	beq.n	800612c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006110:	f001 fe92 	bl	8007e38 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006114:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006116:	f000 f8e7 	bl	80062e8 <prvGetDisinheritPriorityAfterTimeout>
 800611a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006122:	4618      	mov	r0, r3
 8006124:	f001 f9aa 	bl	800747c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006128:	f001 feb4 	bl	8007e94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800612c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800612e:	4618      	mov	r0, r3
 8006130:	3738      	adds	r7, #56	; 0x38
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	e000ed04 	.word	0xe000ed04

0800613c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b08e      	sub	sp, #56	; 0x38
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	2b00      	cmp	r3, #0
 8006150:	d109      	bne.n	8006166 <xQueueReceiveFromISR+0x2a>
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	623b      	str	r3, [r7, #32]
 8006164:	e7fe      	b.n	8006164 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d103      	bne.n	8006174 <xQueueReceiveFromISR+0x38>
 800616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d101      	bne.n	8006178 <xQueueReceiveFromISR+0x3c>
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <xQueueReceiveFromISR+0x3e>
 8006178:	2300      	movs	r3, #0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d109      	bne.n	8006192 <xQueueReceiveFromISR+0x56>
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	61fb      	str	r3, [r7, #28]
 8006190:	e7fe      	b.n	8006190 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006192:	f001 ff0b 	bl	8007fac <vPortValidateInterruptPriority>
	__asm volatile
 8006196:	f3ef 8211 	mrs	r2, BASEPRI
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	61ba      	str	r2, [r7, #24]
 80061ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80061ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80061b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d02f      	beq.n	800621e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80061be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80061c8:	68b9      	ldr	r1, [r7, #8]
 80061ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061cc:	f000 f90d 	bl	80063ea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	1e5a      	subs	r2, r3, #1
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80061d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80061dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e0:	d112      	bne.n	8006208 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d016      	beq.n	8006218 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ec:	3310      	adds	r3, #16
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fe84 	bl	8006efc <xTaskRemoveFromEventList>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00e      	beq.n	8006218 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00b      	beq.n	8006218 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	e007      	b.n	8006218 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006208:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800620c:	3301      	adds	r3, #1
 800620e:	b2db      	uxtb	r3, r3
 8006210:	b25a      	sxtb	r2, r3
 8006212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006218:	2301      	movs	r3, #1
 800621a:	637b      	str	r3, [r7, #52]	; 0x34
 800621c:	e001      	b.n	8006222 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800621e:	2300      	movs	r3, #0
 8006220:	637b      	str	r3, [r7, #52]	; 0x34
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800622c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800622e:	4618      	mov	r0, r3
 8006230:	3738      	adds	r7, #56	; 0x38
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b084      	sub	sp, #16
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d109      	bne.n	8006258 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	60bb      	str	r3, [r7, #8]
 8006256:	e7fe      	b.n	8006256 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8006258:	f001 fdee 	bl	8007e38 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006260:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006262:	f001 fe17 	bl	8007e94 <vPortExitCritical>

	return uxReturn;
 8006266:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d109      	bne.n	8006292 <uxQueueMessagesWaitingFromISR+0x22>
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	60bb      	str	r3, [r7, #8]
 8006290:	e7fe      	b.n	8006290 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8006298:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	bc80      	pop	{r7}
 80062a2:	4770      	bx	lr

080062a4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d109      	bne.n	80062ca <vQueueDelete+0x26>
 80062b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ba:	f383 8811 	msr	BASEPRI, r3
 80062be:	f3bf 8f6f 	isb	sy
 80062c2:	f3bf 8f4f 	dsb	sy
 80062c6:	60bb      	str	r3, [r7, #8]
 80062c8:	e7fe      	b.n	80062c8 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 f95c 	bl	8006588 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d102      	bne.n	80062e0 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80062da:	68f8      	ldr	r0, [r7, #12]
 80062dc:	f001 ff64 	bl	80081a8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80062e0:	bf00      	nop
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80062e8:	b480      	push	{r7}
 80062ea:	b085      	sub	sp, #20
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d006      	beq.n	8006306 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006302:	60fb      	str	r3, [r7, #12]
 8006304:	e001      	b.n	800630a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800630a:	68fb      	ldr	r3, [r7, #12]
	}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	bc80      	pop	{r7}
 8006314:	4770      	bx	lr

08006316 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b086      	sub	sp, #24
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10d      	bne.n	8006350 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d14d      	bne.n	80063d8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	4618      	mov	r0, r3
 8006342:	f001 f82f 	bl	80073a4 <xTaskPriorityDisinherit>
 8006346:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	605a      	str	r2, [r3, #4]
 800634e:	e043      	b.n	80063d8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d119      	bne.n	800638a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6898      	ldr	r0, [r3, #8]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635e:	461a      	mov	r2, r3
 8006360:	68b9      	ldr	r1, [r7, #8]
 8006362:	f00d fd92 	bl	8013e8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	441a      	add	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	429a      	cmp	r2, r3
 800637e:	d32b      	bcc.n	80063d8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	609a      	str	r2, [r3, #8]
 8006388:	e026      	b.n	80063d8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	68d8      	ldr	r0, [r3, #12]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	461a      	mov	r2, r3
 8006394:	68b9      	ldr	r1, [r7, #8]
 8006396:	f00d fd78 	bl	8013e8a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	68da      	ldr	r2, [r3, #12]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	425b      	negs	r3, r3
 80063a4:	441a      	add	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d207      	bcs.n	80063c6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063be:	425b      	negs	r3, r3
 80063c0:	441a      	add	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d105      	bne.n	80063d8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d002      	beq.n	80063d8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	3b01      	subs	r3, #1
 80063d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80063e0:	697b      	ldr	r3, [r7, #20]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3718      	adds	r7, #24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b082      	sub	sp, #8
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d018      	beq.n	800642e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006404:	441a      	add	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68da      	ldr	r2, [r3, #12]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	429a      	cmp	r2, r3
 8006414:	d303      	bcc.n	800641e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68d9      	ldr	r1, [r3, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	461a      	mov	r2, r3
 8006428:	6838      	ldr	r0, [r7, #0]
 800642a:	f00d fd2e 	bl	8013e8a <memcpy>
	}
}
 800642e:	bf00      	nop
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800643e:	f001 fcfb 	bl	8007e38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006448:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800644a:	e011      	b.n	8006470 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	2b00      	cmp	r3, #0
 8006452:	d012      	beq.n	800647a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3324      	adds	r3, #36	; 0x24
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fd4f 	bl	8006efc <xTaskRemoveFromEventList>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d001      	beq.n	8006468 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006464:	f000 fe22 	bl	80070ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006468:	7bfb      	ldrb	r3, [r7, #15]
 800646a:	3b01      	subs	r3, #1
 800646c:	b2db      	uxtb	r3, r3
 800646e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006474:	2b00      	cmp	r3, #0
 8006476:	dce9      	bgt.n	800644c <prvUnlockQueue+0x16>
 8006478:	e000      	b.n	800647c <prvUnlockQueue+0x46>
					break;
 800647a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	22ff      	movs	r2, #255	; 0xff
 8006480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006484:	f001 fd06 	bl	8007e94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006488:	f001 fcd6 	bl	8007e38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006492:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006494:	e011      	b.n	80064ba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d012      	beq.n	80064c4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	3310      	adds	r3, #16
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 fd2a 	bl	8006efc <xTaskRemoveFromEventList>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80064ae:	f000 fdfd 	bl	80070ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80064b2:	7bbb      	ldrb	r3, [r7, #14]
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	dce9      	bgt.n	8006496 <prvUnlockQueue+0x60>
 80064c2:	e000      	b.n	80064c6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80064c4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	22ff      	movs	r2, #255	; 0xff
 80064ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80064ce:	f001 fce1 	bl	8007e94 <vPortExitCritical>
}
 80064d2:	bf00      	nop
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b084      	sub	sp, #16
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064e2:	f001 fca9 	bl	8007e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d102      	bne.n	80064f4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80064ee:	2301      	movs	r3, #1
 80064f0:	60fb      	str	r3, [r7, #12]
 80064f2:	e001      	b.n	80064f8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064f8:	f001 fccc 	bl	8007e94 <vPortExitCritical>

	return xReturn;
 80064fc:	68fb      	ldr	r3, [r7, #12]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b084      	sub	sp, #16
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800650e:	f001 fc93 	bl	8007e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651a:	429a      	cmp	r2, r3
 800651c:	d102      	bne.n	8006524 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800651e:	2301      	movs	r3, #1
 8006520:	60fb      	str	r3, [r7, #12]
 8006522:	e001      	b.n	8006528 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006524:	2300      	movs	r3, #0
 8006526:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006528:	f001 fcb4 	bl	8007e94 <vPortExitCritical>

	return xReturn;
 800652c:	68fb      	ldr	r3, [r7, #12]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
	...

08006538 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006542:	2300      	movs	r3, #0
 8006544:	60fb      	str	r3, [r7, #12]
 8006546:	e014      	b.n	8006572 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006548:	4a0e      	ldr	r2, [pc, #56]	; (8006584 <vQueueAddToRegistry+0x4c>)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10b      	bne.n	800656c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006554:	490b      	ldr	r1, [pc, #44]	; (8006584 <vQueueAddToRegistry+0x4c>)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	683a      	ldr	r2, [r7, #0]
 800655a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800655e:	4a09      	ldr	r2, [pc, #36]	; (8006584 <vQueueAddToRegistry+0x4c>)
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	00db      	lsls	r3, r3, #3
 8006564:	4413      	add	r3, r2
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800656a:	e005      	b.n	8006578 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	3301      	adds	r3, #1
 8006570:	60fb      	str	r3, [r7, #12]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2b07      	cmp	r3, #7
 8006576:	d9e7      	bls.n	8006548 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006578:	bf00      	nop
 800657a:	3714      	adds	r7, #20
 800657c:	46bd      	mov	sp, r7
 800657e:	bc80      	pop	{r7}
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	20007424 	.word	0x20007424

08006588 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006590:	2300      	movs	r3, #0
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	e016      	b.n	80065c4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006596:	4a0f      	ldr	r2, [pc, #60]	; (80065d4 <vQueueUnregisterQueue+0x4c>)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	4413      	add	r3, r2
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d10b      	bne.n	80065be <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80065a6:	4a0b      	ldr	r2, [pc, #44]	; (80065d4 <vQueueUnregisterQueue+0x4c>)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2100      	movs	r1, #0
 80065ac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80065b0:	4a08      	ldr	r2, [pc, #32]	; (80065d4 <vQueueUnregisterQueue+0x4c>)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	00db      	lsls	r3, r3, #3
 80065b6:	4413      	add	r3, r2
 80065b8:	2200      	movs	r2, #0
 80065ba:	605a      	str	r2, [r3, #4]
				break;
 80065bc:	e005      	b.n	80065ca <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3301      	adds	r3, #1
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b07      	cmp	r3, #7
 80065c8:	d9e5      	bls.n	8006596 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80065ca:	bf00      	nop
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bc80      	pop	{r7}
 80065d2:	4770      	bx	lr
 80065d4:	20007424 	.word	0x20007424

080065d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065e8:	f001 fc26 	bl	8007e38 <vPortEnterCritical>
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065f2:	b25b      	sxtb	r3, r3
 80065f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f8:	d103      	bne.n	8006602 <vQueueWaitForMessageRestricted+0x2a>
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006608:	b25b      	sxtb	r3, r3
 800660a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800660e:	d103      	bne.n	8006618 <vQueueWaitForMessageRestricted+0x40>
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006618:	f001 fc3c 	bl	8007e94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	2b00      	cmp	r3, #0
 8006622:	d106      	bne.n	8006632 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	3324      	adds	r3, #36	; 0x24
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	68b9      	ldr	r1, [r7, #8]
 800662c:	4618      	mov	r0, r3
 800662e:	f000 fc3b 	bl	8006ea8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006632:	6978      	ldr	r0, [r7, #20]
 8006634:	f7ff feff 	bl	8006436 <prvUnlockQueue>
	}
 8006638:	bf00      	nop
 800663a:	3718      	adds	r7, #24
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08e      	sub	sp, #56	; 0x38
 8006644:	af04      	add	r7, sp, #16
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
 800664c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800664e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006650:	2b00      	cmp	r3, #0
 8006652:	d109      	bne.n	8006668 <xTaskCreateStatic+0x28>
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	623b      	str	r3, [r7, #32]
 8006666:	e7fe      	b.n	8006666 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666a:	2b00      	cmp	r3, #0
 800666c:	d109      	bne.n	8006682 <xTaskCreateStatic+0x42>
 800666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	61fb      	str	r3, [r7, #28]
 8006680:	e7fe      	b.n	8006680 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006682:	235c      	movs	r3, #92	; 0x5c
 8006684:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	2b5c      	cmp	r3, #92	; 0x5c
 800668a:	d009      	beq.n	80066a0 <xTaskCreateStatic+0x60>
 800668c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	61bb      	str	r3, [r7, #24]
 800669e:	e7fe      	b.n	800669e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d01e      	beq.n	80066e4 <xTaskCreateStatic+0xa4>
 80066a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d01b      	beq.n	80066e4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	2202      	movs	r2, #2
 80066ba:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066be:	2300      	movs	r3, #0
 80066c0:	9303      	str	r3, [sp, #12]
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	9302      	str	r3, [sp, #8]
 80066c6:	f107 0314 	add.w	r3, r7, #20
 80066ca:	9301      	str	r3, [sp, #4]
 80066cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 f850 	bl	800677c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80066de:	f000 f8d3 	bl	8006888 <prvAddNewTaskToReadyList>
 80066e2:	e001      	b.n	80066e8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80066e4:	2300      	movs	r3, #0
 80066e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066e8:	697b      	ldr	r3, [r7, #20]
	}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3728      	adds	r7, #40	; 0x28
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b08c      	sub	sp, #48	; 0x30
 80066f6:	af04      	add	r7, sp, #16
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	603b      	str	r3, [r7, #0]
 80066fe:	4613      	mov	r3, r2
 8006700:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006702:	88fb      	ldrh	r3, [r7, #6]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4618      	mov	r0, r3
 8006708:	f001 fc8c 	bl	8008024 <pvPortMalloc>
 800670c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00e      	beq.n	8006732 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006714:	205c      	movs	r0, #92	; 0x5c
 8006716:	f001 fc85 	bl	8008024 <pvPortMalloc>
 800671a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	631a      	str	r2, [r3, #48]	; 0x30
 8006728:	e005      	b.n	8006736 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800672a:	6978      	ldr	r0, [r7, #20]
 800672c:	f001 fd3c 	bl	80081a8 <vPortFree>
 8006730:	e001      	b.n	8006736 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006732:	2300      	movs	r3, #0
 8006734:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d017      	beq.n	800676c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006744:	88fa      	ldrh	r2, [r7, #6]
 8006746:	2300      	movs	r3, #0
 8006748:	9303      	str	r3, [sp, #12]
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	9302      	str	r3, [sp, #8]
 800674e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006750:	9301      	str	r3, [sp, #4]
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	68b9      	ldr	r1, [r7, #8]
 800675a:	68f8      	ldr	r0, [r7, #12]
 800675c:	f000 f80e 	bl	800677c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006760:	69f8      	ldr	r0, [r7, #28]
 8006762:	f000 f891 	bl	8006888 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006766:	2301      	movs	r3, #1
 8006768:	61bb      	str	r3, [r7, #24]
 800676a:	e002      	b.n	8006772 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800676c:	f04f 33ff 	mov.w	r3, #4294967295
 8006770:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006772:	69bb      	ldr	r3, [r7, #24]
	}
 8006774:	4618      	mov	r0, r3
 8006776:	3720      	adds	r7, #32
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b088      	sub	sp, #32
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	461a      	mov	r2, r3
 8006794:	21a5      	movs	r1, #165	; 0xa5
 8006796:	f00d fb83 	bl	8013ea0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80067a4:	3b01      	subs	r3, #1
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	f023 0307 	bic.w	r3, r3, #7
 80067b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	f003 0307 	and.w	r3, r3, #7
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d009      	beq.n	80067d2 <prvInitialiseNewTask+0x56>
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	617b      	str	r3, [r7, #20]
 80067d0:	e7fe      	b.n	80067d0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067d2:	2300      	movs	r3, #0
 80067d4:	61fb      	str	r3, [r7, #28]
 80067d6:	e012      	b.n	80067fe <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	4413      	add	r3, r2
 80067de:	7819      	ldrb	r1, [r3, #0]
 80067e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	4413      	add	r3, r2
 80067e6:	3334      	adds	r3, #52	; 0x34
 80067e8:	460a      	mov	r2, r1
 80067ea:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d006      	beq.n	8006806 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	3301      	adds	r3, #1
 80067fc:	61fb      	str	r3, [r7, #28]
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	2b0f      	cmp	r3, #15
 8006802:	d9e9      	bls.n	80067d8 <prvInitialiseNewTask+0x5c>
 8006804:	e000      	b.n	8006808 <prvInitialiseNewTask+0x8c>
		{
			break;
 8006806:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006812:	2b37      	cmp	r3, #55	; 0x37
 8006814:	d901      	bls.n	800681a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006816:	2337      	movs	r3, #55	; 0x37
 8006818:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800681e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006824:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006828:	2200      	movs	r2, #0
 800682a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800682c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682e:	3304      	adds	r3, #4
 8006830:	4618      	mov	r0, r3
 8006832:	f7fe fda0 	bl	8005376 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	3318      	adds	r3, #24
 800683a:	4618      	mov	r0, r3
 800683c:	f7fe fd9b 	bl	8005376 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006844:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006848:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006854:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	2200      	movs	r2, #0
 800685a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	2200      	movs	r2, #0
 8006860:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	68f9      	ldr	r1, [r7, #12]
 8006868:	69b8      	ldr	r0, [r7, #24]
 800686a:	f001 f9fd 	bl	8007c68 <pxPortInitialiseStack>
 800686e:	4602      	mov	r2, r0
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800687a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800687e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006880:	bf00      	nop
 8006882:	3720      	adds	r7, #32
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006890:	f001 fad2 	bl	8007e38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006894:	4b2d      	ldr	r3, [pc, #180]	; (800694c <prvAddNewTaskToReadyList+0xc4>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	3301      	adds	r3, #1
 800689a:	4a2c      	ldr	r2, [pc, #176]	; (800694c <prvAddNewTaskToReadyList+0xc4>)
 800689c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800689e:	4b2c      	ldr	r3, [pc, #176]	; (8006950 <prvAddNewTaskToReadyList+0xc8>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d109      	bne.n	80068ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068a6:	4a2a      	ldr	r2, [pc, #168]	; (8006950 <prvAddNewTaskToReadyList+0xc8>)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068ac:	4b27      	ldr	r3, [pc, #156]	; (800694c <prvAddNewTaskToReadyList+0xc4>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d110      	bne.n	80068d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068b4:	f000 fc1e 	bl	80070f4 <prvInitialiseTaskLists>
 80068b8:	e00d      	b.n	80068d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068ba:	4b26      	ldr	r3, [pc, #152]	; (8006954 <prvAddNewTaskToReadyList+0xcc>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d109      	bne.n	80068d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068c2:	4b23      	ldr	r3, [pc, #140]	; (8006950 <prvAddNewTaskToReadyList+0xc8>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d802      	bhi.n	80068d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068d0:	4a1f      	ldr	r2, [pc, #124]	; (8006950 <prvAddNewTaskToReadyList+0xc8>)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068d6:	4b20      	ldr	r3, [pc, #128]	; (8006958 <prvAddNewTaskToReadyList+0xd0>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3301      	adds	r3, #1
 80068dc:	4a1e      	ldr	r2, [pc, #120]	; (8006958 <prvAddNewTaskToReadyList+0xd0>)
 80068de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80068e0:	4b1d      	ldr	r3, [pc, #116]	; (8006958 <prvAddNewTaskToReadyList+0xd0>)
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ec:	4b1b      	ldr	r3, [pc, #108]	; (800695c <prvAddNewTaskToReadyList+0xd4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d903      	bls.n	80068fc <prvAddNewTaskToReadyList+0x74>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f8:	4a18      	ldr	r2, [pc, #96]	; (800695c <prvAddNewTaskToReadyList+0xd4>)
 80068fa:	6013      	str	r3, [r2, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	4a15      	ldr	r2, [pc, #84]	; (8006960 <prvAddNewTaskToReadyList+0xd8>)
 800690a:	441a      	add	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3304      	adds	r3, #4
 8006910:	4619      	mov	r1, r3
 8006912:	4610      	mov	r0, r2
 8006914:	f7fe fd3b 	bl	800538e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006918:	f001 fabc 	bl	8007e94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800691c:	4b0d      	ldr	r3, [pc, #52]	; (8006954 <prvAddNewTaskToReadyList+0xcc>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00e      	beq.n	8006942 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006924:	4b0a      	ldr	r3, [pc, #40]	; (8006950 <prvAddNewTaskToReadyList+0xc8>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800692e:	429a      	cmp	r2, r3
 8006930:	d207      	bcs.n	8006942 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006932:	4b0c      	ldr	r3, [pc, #48]	; (8006964 <prvAddNewTaskToReadyList+0xdc>)
 8006934:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006938:	601a      	str	r2, [r3, #0]
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006942:	bf00      	nop
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20000c38 	.word	0x20000c38
 8006950:	20000764 	.word	0x20000764
 8006954:	20000c44 	.word	0x20000c44
 8006958:	20000c54 	.word	0x20000c54
 800695c:	20000c40 	.word	0x20000c40
 8006960:	20000768 	.word	0x20000768
 8006964:	e000ed04 	.word	0xe000ed04

08006968 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006970:	2300      	movs	r3, #0
 8006972:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d016      	beq.n	80069a8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800697a:	4b13      	ldr	r3, [pc, #76]	; (80069c8 <vTaskDelay+0x60>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d009      	beq.n	8006996 <vTaskDelay+0x2e>
 8006982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	60bb      	str	r3, [r7, #8]
 8006994:	e7fe      	b.n	8006994 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006996:	f000 f87f 	bl	8006a98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800699a:	2100      	movs	r1, #0
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fe05 	bl	80075ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069a2:	f000 f887 	bl	8006ab4 <xTaskResumeAll>
 80069a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d107      	bne.n	80069be <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80069ae:	4b07      	ldr	r3, [pc, #28]	; (80069cc <vTaskDelay+0x64>)
 80069b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069b4:	601a      	str	r2, [r3, #0]
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069be:	bf00      	nop
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000c60 	.word	0x20000c60
 80069cc:	e000ed04 	.word	0xe000ed04

080069d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b08a      	sub	sp, #40	; 0x28
 80069d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069de:	463a      	mov	r2, r7
 80069e0:	1d39      	adds	r1, r7, #4
 80069e2:	f107 0308 	add.w	r3, r7, #8
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7fe fc74 	bl	80052d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	9202      	str	r2, [sp, #8]
 80069f4:	9301      	str	r3, [sp, #4]
 80069f6:	2300      	movs	r3, #0
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	2300      	movs	r3, #0
 80069fc:	460a      	mov	r2, r1
 80069fe:	4920      	ldr	r1, [pc, #128]	; (8006a80 <vTaskStartScheduler+0xb0>)
 8006a00:	4820      	ldr	r0, [pc, #128]	; (8006a84 <vTaskStartScheduler+0xb4>)
 8006a02:	f7ff fe1d 	bl	8006640 <xTaskCreateStatic>
 8006a06:	4602      	mov	r2, r0
 8006a08:	4b1f      	ldr	r3, [pc, #124]	; (8006a88 <vTaskStartScheduler+0xb8>)
 8006a0a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a0c:	4b1e      	ldr	r3, [pc, #120]	; (8006a88 <vTaskStartScheduler+0xb8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d002      	beq.n	8006a1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a14:	2301      	movs	r3, #1
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	e001      	b.n	8006a1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d102      	bne.n	8006a2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a24:	f000 fe16 	bl	8007654 <xTimerCreateTimerTask>
 8006a28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d115      	bne.n	8006a5c <vTaskStartScheduler+0x8c>
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a42:	4b12      	ldr	r3, [pc, #72]	; (8006a8c <vTaskStartScheduler+0xbc>)
 8006a44:	f04f 32ff 	mov.w	r2, #4294967295
 8006a48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a4a:	4b11      	ldr	r3, [pc, #68]	; (8006a90 <vTaskStartScheduler+0xc0>)
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006a50:	4b10      	ldr	r3, [pc, #64]	; (8006a94 <vTaskStartScheduler+0xc4>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a56:	f001 f97f 	bl	8007d58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a5a:	e00d      	b.n	8006a78 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a62:	d109      	bne.n	8006a78 <vTaskStartScheduler+0xa8>
 8006a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	e7fe      	b.n	8006a76 <vTaskStartScheduler+0xa6>
}
 8006a78:	bf00      	nop
 8006a7a:	3718      	adds	r7, #24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	08014d40 	.word	0x08014d40
 8006a84:	080070c5 	.word	0x080070c5
 8006a88:	20000c5c 	.word	0x20000c5c
 8006a8c:	20000c58 	.word	0x20000c58
 8006a90:	20000c44 	.word	0x20000c44
 8006a94:	20000c3c 	.word	0x20000c3c

08006a98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006a9c:	4b04      	ldr	r3, [pc, #16]	; (8006ab0 <vTaskSuspendAll+0x18>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	4a03      	ldr	r2, [pc, #12]	; (8006ab0 <vTaskSuspendAll+0x18>)
 8006aa4:	6013      	str	r3, [r2, #0]
}
 8006aa6:	bf00      	nop
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bc80      	pop	{r7}
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	20000c60 	.word	0x20000c60

08006ab4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ac2:	4b41      	ldr	r3, [pc, #260]	; (8006bc8 <xTaskResumeAll+0x114>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d109      	bne.n	8006ade <xTaskResumeAll+0x2a>
 8006aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	603b      	str	r3, [r7, #0]
 8006adc:	e7fe      	b.n	8006adc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ade:	f001 f9ab 	bl	8007e38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ae2:	4b39      	ldr	r3, [pc, #228]	; (8006bc8 <xTaskResumeAll+0x114>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	4a37      	ldr	r2, [pc, #220]	; (8006bc8 <xTaskResumeAll+0x114>)
 8006aea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aec:	4b36      	ldr	r3, [pc, #216]	; (8006bc8 <xTaskResumeAll+0x114>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d162      	bne.n	8006bba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006af4:	4b35      	ldr	r3, [pc, #212]	; (8006bcc <xTaskResumeAll+0x118>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d05e      	beq.n	8006bba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006afc:	e02f      	b.n	8006b5e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006afe:	4b34      	ldr	r3, [pc, #208]	; (8006bd0 <xTaskResumeAll+0x11c>)
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3318      	adds	r3, #24
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f7fe fc9a 	bl	8005444 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	3304      	adds	r3, #4
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7fe fc95 	bl	8005444 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1e:	4b2d      	ldr	r3, [pc, #180]	; (8006bd4 <xTaskResumeAll+0x120>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d903      	bls.n	8006b2e <xTaskResumeAll+0x7a>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2a:	4a2a      	ldr	r2, [pc, #168]	; (8006bd4 <xTaskResumeAll+0x120>)
 8006b2c:	6013      	str	r3, [r2, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b32:	4613      	mov	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4413      	add	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4a27      	ldr	r2, [pc, #156]	; (8006bd8 <xTaskResumeAll+0x124>)
 8006b3c:	441a      	add	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	3304      	adds	r3, #4
 8006b42:	4619      	mov	r1, r3
 8006b44:	4610      	mov	r0, r2
 8006b46:	f7fe fc22 	bl	800538e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b4e:	4b23      	ldr	r3, [pc, #140]	; (8006bdc <xTaskResumeAll+0x128>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d302      	bcc.n	8006b5e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006b58:	4b21      	ldr	r3, [pc, #132]	; (8006be0 <xTaskResumeAll+0x12c>)
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b5e:	4b1c      	ldr	r3, [pc, #112]	; (8006bd0 <xTaskResumeAll+0x11c>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1cb      	bne.n	8006afe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b6c:	f000 fb5c 	bl	8007228 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006b70:	4b1c      	ldr	r3, [pc, #112]	; (8006be4 <xTaskResumeAll+0x130>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d010      	beq.n	8006b9e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b7c:	f000 f856 	bl	8006c2c <xTaskIncrementTick>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006b86:	4b16      	ldr	r3, [pc, #88]	; (8006be0 <xTaskResumeAll+0x12c>)
 8006b88:	2201      	movs	r2, #1
 8006b8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1f1      	bne.n	8006b7c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006b98:	4b12      	ldr	r3, [pc, #72]	; (8006be4 <xTaskResumeAll+0x130>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b9e:	4b10      	ldr	r3, [pc, #64]	; (8006be0 <xTaskResumeAll+0x12c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d009      	beq.n	8006bba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006baa:	4b0f      	ldr	r3, [pc, #60]	; (8006be8 <xTaskResumeAll+0x134>)
 8006bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	f3bf 8f4f 	dsb	sy
 8006bb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bba:	f001 f96b 	bl	8007e94 <vPortExitCritical>

	return xAlreadyYielded;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	20000c60 	.word	0x20000c60
 8006bcc:	20000c38 	.word	0x20000c38
 8006bd0:	20000bf8 	.word	0x20000bf8
 8006bd4:	20000c40 	.word	0x20000c40
 8006bd8:	20000768 	.word	0x20000768
 8006bdc:	20000764 	.word	0x20000764
 8006be0:	20000c4c 	.word	0x20000c4c
 8006be4:	20000c48 	.word	0x20000c48
 8006be8:	e000ed04 	.word	0xe000ed04

08006bec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006bf2:	4b04      	ldr	r3, [pc, #16]	; (8006c04 <xTaskGetTickCount+0x18>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006bf8:	687b      	ldr	r3, [r7, #4]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bc80      	pop	{r7}
 8006c02:	4770      	bx	lr
 8006c04:	20000c3c 	.word	0x20000c3c

08006c08 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c0e:	f001 f9cd 	bl	8007fac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006c12:	2300      	movs	r3, #0
 8006c14:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006c16:	4b04      	ldr	r3, [pc, #16]	; (8006c28 <xTaskGetTickCountFromISR+0x20>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c1c:	683b      	ldr	r3, [r7, #0]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	20000c3c 	.word	0x20000c3c

08006c2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c32:	2300      	movs	r3, #0
 8006c34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c36:	4b51      	ldr	r3, [pc, #324]	; (8006d7c <xTaskIncrementTick+0x150>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f040 808d 	bne.w	8006d5a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c40:	4b4f      	ldr	r3, [pc, #316]	; (8006d80 <xTaskIncrementTick+0x154>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3301      	adds	r3, #1
 8006c46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c48:	4a4d      	ldr	r2, [pc, #308]	; (8006d80 <xTaskIncrementTick+0x154>)
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d11f      	bne.n	8006c94 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c54:	4b4b      	ldr	r3, [pc, #300]	; (8006d84 <xTaskIncrementTick+0x158>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d009      	beq.n	8006c72 <xTaskIncrementTick+0x46>
 8006c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	e7fe      	b.n	8006c70 <xTaskIncrementTick+0x44>
 8006c72:	4b44      	ldr	r3, [pc, #272]	; (8006d84 <xTaskIncrementTick+0x158>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	4b43      	ldr	r3, [pc, #268]	; (8006d88 <xTaskIncrementTick+0x15c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a41      	ldr	r2, [pc, #260]	; (8006d84 <xTaskIncrementTick+0x158>)
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	4a41      	ldr	r2, [pc, #260]	; (8006d88 <xTaskIncrementTick+0x15c>)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6013      	str	r3, [r2, #0]
 8006c86:	4b41      	ldr	r3, [pc, #260]	; (8006d8c <xTaskIncrementTick+0x160>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	4a3f      	ldr	r2, [pc, #252]	; (8006d8c <xTaskIncrementTick+0x160>)
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	f000 faca 	bl	8007228 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c94:	4b3e      	ldr	r3, [pc, #248]	; (8006d90 <xTaskIncrementTick+0x164>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d34e      	bcc.n	8006d3c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c9e:	4b39      	ldr	r3, [pc, #228]	; (8006d84 <xTaskIncrementTick+0x158>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d101      	bne.n	8006cac <xTaskIncrementTick+0x80>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e000      	b.n	8006cae <xTaskIncrementTick+0x82>
 8006cac:	2300      	movs	r3, #0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d004      	beq.n	8006cbc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cb2:	4b37      	ldr	r3, [pc, #220]	; (8006d90 <xTaskIncrementTick+0x164>)
 8006cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb8:	601a      	str	r2, [r3, #0]
					break;
 8006cba:	e03f      	b.n	8006d3c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006cbc:	4b31      	ldr	r3, [pc, #196]	; (8006d84 <xTaskIncrementTick+0x158>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d203      	bcs.n	8006cdc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006cd4:	4a2e      	ldr	r2, [pc, #184]	; (8006d90 <xTaskIncrementTick+0x164>)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6013      	str	r3, [r2, #0]
						break;
 8006cda:	e02f      	b.n	8006d3c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7fe fbaf 	bl	8005444 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d004      	beq.n	8006cf8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	3318      	adds	r3, #24
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe fba6 	bl	8005444 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cfc:	4b25      	ldr	r3, [pc, #148]	; (8006d94 <xTaskIncrementTick+0x168>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d903      	bls.n	8006d0c <xTaskIncrementTick+0xe0>
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d08:	4a22      	ldr	r2, [pc, #136]	; (8006d94 <xTaskIncrementTick+0x168>)
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4a1f      	ldr	r2, [pc, #124]	; (8006d98 <xTaskIncrementTick+0x16c>)
 8006d1a:	441a      	add	r2, r3
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	3304      	adds	r3, #4
 8006d20:	4619      	mov	r1, r3
 8006d22:	4610      	mov	r0, r2
 8006d24:	f7fe fb33 	bl	800538e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d2c:	4b1b      	ldr	r3, [pc, #108]	; (8006d9c <xTaskIncrementTick+0x170>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d3b3      	bcc.n	8006c9e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006d36:	2301      	movs	r3, #1
 8006d38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d3a:	e7b0      	b.n	8006c9e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d3c:	4b17      	ldr	r3, [pc, #92]	; (8006d9c <xTaskIncrementTick+0x170>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d42:	4915      	ldr	r1, [pc, #84]	; (8006d98 <xTaskIncrementTick+0x16c>)
 8006d44:	4613      	mov	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	440b      	add	r3, r1
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d907      	bls.n	8006d64 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8006d54:	2301      	movs	r3, #1
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	e004      	b.n	8006d64 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006d5a:	4b11      	ldr	r3, [pc, #68]	; (8006da0 <xTaskIncrementTick+0x174>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	4a0f      	ldr	r2, [pc, #60]	; (8006da0 <xTaskIncrementTick+0x174>)
 8006d62:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006d64:	4b0f      	ldr	r3, [pc, #60]	; (8006da4 <xTaskIncrementTick+0x178>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006d70:	697b      	ldr	r3, [r7, #20]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20000c60 	.word	0x20000c60
 8006d80:	20000c3c 	.word	0x20000c3c
 8006d84:	20000bf0 	.word	0x20000bf0
 8006d88:	20000bf4 	.word	0x20000bf4
 8006d8c:	20000c50 	.word	0x20000c50
 8006d90:	20000c58 	.word	0x20000c58
 8006d94:	20000c40 	.word	0x20000c40
 8006d98:	20000768 	.word	0x20000768
 8006d9c:	20000764 	.word	0x20000764
 8006da0:	20000c48 	.word	0x20000c48
 8006da4:	20000c4c 	.word	0x20000c4c

08006da8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dae:	4b27      	ldr	r3, [pc, #156]	; (8006e4c <vTaskSwitchContext+0xa4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006db6:	4b26      	ldr	r3, [pc, #152]	; (8006e50 <vTaskSwitchContext+0xa8>)
 8006db8:	2201      	movs	r2, #1
 8006dba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006dbc:	e040      	b.n	8006e40 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006dbe:	4b24      	ldr	r3, [pc, #144]	; (8006e50 <vTaskSwitchContext+0xa8>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006dc4:	4b23      	ldr	r3, [pc, #140]	; (8006e54 <vTaskSwitchContext+0xac>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	60fb      	str	r3, [r7, #12]
 8006dca:	e00f      	b.n	8006dec <vTaskSwitchContext+0x44>
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d109      	bne.n	8006de6 <vTaskSwitchContext+0x3e>
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	607b      	str	r3, [r7, #4]
 8006de4:	e7fe      	b.n	8006de4 <vTaskSwitchContext+0x3c>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	491a      	ldr	r1, [pc, #104]	; (8006e58 <vTaskSwitchContext+0xb0>)
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4613      	mov	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	4413      	add	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	440b      	add	r3, r1
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d0e5      	beq.n	8006dcc <vTaskSwitchContext+0x24>
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	4613      	mov	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4a13      	ldr	r2, [pc, #76]	; (8006e58 <vTaskSwitchContext+0xb0>)
 8006e0c:	4413      	add	r3, r2
 8006e0e:	60bb      	str	r3, [r7, #8]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	605a      	str	r2, [r3, #4]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	685a      	ldr	r2, [r3, #4]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	3308      	adds	r3, #8
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d104      	bne.n	8006e30 <vTaskSwitchContext+0x88>
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	605a      	str	r2, [r3, #4]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	4a09      	ldr	r2, [pc, #36]	; (8006e5c <vTaskSwitchContext+0xb4>)
 8006e38:	6013      	str	r3, [r2, #0]
 8006e3a:	4a06      	ldr	r2, [pc, #24]	; (8006e54 <vTaskSwitchContext+0xac>)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6013      	str	r3, [r2, #0]
}
 8006e40:	bf00      	nop
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bc80      	pop	{r7}
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	20000c60 	.word	0x20000c60
 8006e50:	20000c4c 	.word	0x20000c4c
 8006e54:	20000c40 	.word	0x20000c40
 8006e58:	20000768 	.word	0x20000768
 8006e5c:	20000764 	.word	0x20000764

08006e60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d109      	bne.n	8006e84 <vTaskPlaceOnEventList+0x24>
 8006e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	60fb      	str	r3, [r7, #12]
 8006e82:	e7fe      	b.n	8006e82 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e84:	4b07      	ldr	r3, [pc, #28]	; (8006ea4 <vTaskPlaceOnEventList+0x44>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	3318      	adds	r3, #24
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7fe faa1 	bl	80053d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e92:	2101      	movs	r1, #1
 8006e94:	6838      	ldr	r0, [r7, #0]
 8006e96:	f000 fb89 	bl	80075ac <prvAddCurrentTaskToDelayedList>
}
 8006e9a:	bf00      	nop
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20000764 	.word	0x20000764

08006ea8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d109      	bne.n	8006ece <vTaskPlaceOnEventListRestricted+0x26>
 8006eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	e7fe      	b.n	8006ecc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ece:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <vTaskPlaceOnEventListRestricted+0x50>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3318      	adds	r3, #24
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	68f8      	ldr	r0, [r7, #12]
 8006ed8:	f7fe fa59 	bl	800538e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d002      	beq.n	8006ee8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ee6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ee8:	6879      	ldr	r1, [r7, #4]
 8006eea:	68b8      	ldr	r0, [r7, #8]
 8006eec:	f000 fb5e 	bl	80075ac <prvAddCurrentTaskToDelayedList>
	}
 8006ef0:	bf00      	nop
 8006ef2:	3718      	adds	r7, #24
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	20000764 	.word	0x20000764

08006efc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d109      	bne.n	8006f26 <xTaskRemoveFromEventList+0x2a>
 8006f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	e7fe      	b.n	8006f24 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	3318      	adds	r3, #24
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fe fa8a 	bl	8005444 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f30:	4b1d      	ldr	r3, [pc, #116]	; (8006fa8 <xTaskRemoveFromEventList+0xac>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d11d      	bne.n	8006f74 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fe fa81 	bl	8005444 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f46:	4b19      	ldr	r3, [pc, #100]	; (8006fac <xTaskRemoveFromEventList+0xb0>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d903      	bls.n	8006f56 <xTaskRemoveFromEventList+0x5a>
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f52:	4a16      	ldr	r2, [pc, #88]	; (8006fac <xTaskRemoveFromEventList+0xb0>)
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4a13      	ldr	r2, [pc, #76]	; (8006fb0 <xTaskRemoveFromEventList+0xb4>)
 8006f64:	441a      	add	r2, r3
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	3304      	adds	r3, #4
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	f7fe fa0e 	bl	800538e <vListInsertEnd>
 8006f72:	e005      	b.n	8006f80 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	3318      	adds	r3, #24
 8006f78:	4619      	mov	r1, r3
 8006f7a:	480e      	ldr	r0, [pc, #56]	; (8006fb4 <xTaskRemoveFromEventList+0xb8>)
 8006f7c:	f7fe fa07 	bl	800538e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f84:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <xTaskRemoveFromEventList+0xbc>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d905      	bls.n	8006f9a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f92:	4b0a      	ldr	r3, [pc, #40]	; (8006fbc <xTaskRemoveFromEventList+0xc0>)
 8006f94:	2201      	movs	r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	e001      	b.n	8006f9e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006f9e:	697b      	ldr	r3, [r7, #20]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	20000c60 	.word	0x20000c60
 8006fac:	20000c40 	.word	0x20000c40
 8006fb0:	20000768 	.word	0x20000768
 8006fb4:	20000bf8 	.word	0x20000bf8
 8006fb8:	20000764 	.word	0x20000764
 8006fbc:	20000c4c 	.word	0x20000c4c

08006fc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006fc8:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <vTaskInternalSetTimeOutState+0x24>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006fd0:	4b05      	ldr	r3, [pc, #20]	; (8006fe8 <vTaskInternalSetTimeOutState+0x28>)
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	605a      	str	r2, [r3, #4]
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bc80      	pop	{r7}
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20000c50 	.word	0x20000c50
 8006fe8:	20000c3c 	.word	0x20000c3c

08006fec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b088      	sub	sp, #32
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d109      	bne.n	8007010 <xTaskCheckForTimeOut+0x24>
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	613b      	str	r3, [r7, #16]
 800700e:	e7fe      	b.n	800700e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d109      	bne.n	800702a <xTaskCheckForTimeOut+0x3e>
 8007016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	e7fe      	b.n	8007028 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800702a:	f000 ff05 	bl	8007e38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800702e:	4b1d      	ldr	r3, [pc, #116]	; (80070a4 <xTaskCheckForTimeOut+0xb8>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007046:	d102      	bne.n	800704e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007048:	2300      	movs	r3, #0
 800704a:	61fb      	str	r3, [r7, #28]
 800704c:	e023      	b.n	8007096 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	4b15      	ldr	r3, [pc, #84]	; (80070a8 <xTaskCheckForTimeOut+0xbc>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	429a      	cmp	r2, r3
 8007058:	d007      	beq.n	800706a <xTaskCheckForTimeOut+0x7e>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	429a      	cmp	r2, r3
 8007062:	d302      	bcc.n	800706a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007064:	2301      	movs	r3, #1
 8007066:	61fb      	str	r3, [r7, #28]
 8007068:	e015      	b.n	8007096 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	429a      	cmp	r2, r3
 8007072:	d20b      	bcs.n	800708c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	1ad2      	subs	r2, r2, r3
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7ff ff9d 	bl	8006fc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007086:	2300      	movs	r3, #0
 8007088:	61fb      	str	r3, [r7, #28]
 800708a:	e004      	b.n	8007096 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2200      	movs	r2, #0
 8007090:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007092:	2301      	movs	r3, #1
 8007094:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007096:	f000 fefd 	bl	8007e94 <vPortExitCritical>

	return xReturn;
 800709a:	69fb      	ldr	r3, [r7, #28]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3720      	adds	r7, #32
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	20000c3c 	.word	0x20000c3c
 80070a8:	20000c50 	.word	0x20000c50

080070ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070ac:	b480      	push	{r7}
 80070ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070b0:	4b03      	ldr	r3, [pc, #12]	; (80070c0 <vTaskMissedYield+0x14>)
 80070b2:	2201      	movs	r2, #1
 80070b4:	601a      	str	r2, [r3, #0]
}
 80070b6:	bf00      	nop
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bc80      	pop	{r7}
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	20000c4c 	.word	0x20000c4c

080070c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80070cc:	f000 f852 	bl	8007174 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80070d0:	4b06      	ldr	r3, [pc, #24]	; (80070ec <prvIdleTask+0x28>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d9f9      	bls.n	80070cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80070d8:	4b05      	ldr	r3, [pc, #20]	; (80070f0 <prvIdleTask+0x2c>)
 80070da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80070e8:	e7f0      	b.n	80070cc <prvIdleTask+0x8>
 80070ea:	bf00      	nop
 80070ec:	20000768 	.word	0x20000768
 80070f0:	e000ed04 	.word	0xe000ed04

080070f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80070fa:	2300      	movs	r3, #0
 80070fc:	607b      	str	r3, [r7, #4]
 80070fe:	e00c      	b.n	800711a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	4a12      	ldr	r2, [pc, #72]	; (8007154 <prvInitialiseTaskLists+0x60>)
 800710c:	4413      	add	r3, r2
 800710e:	4618      	mov	r0, r3
 8007110:	f7fe f912 	bl	8005338 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	3301      	adds	r3, #1
 8007118:	607b      	str	r3, [r7, #4]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2b37      	cmp	r3, #55	; 0x37
 800711e:	d9ef      	bls.n	8007100 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007120:	480d      	ldr	r0, [pc, #52]	; (8007158 <prvInitialiseTaskLists+0x64>)
 8007122:	f7fe f909 	bl	8005338 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007126:	480d      	ldr	r0, [pc, #52]	; (800715c <prvInitialiseTaskLists+0x68>)
 8007128:	f7fe f906 	bl	8005338 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800712c:	480c      	ldr	r0, [pc, #48]	; (8007160 <prvInitialiseTaskLists+0x6c>)
 800712e:	f7fe f903 	bl	8005338 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007132:	480c      	ldr	r0, [pc, #48]	; (8007164 <prvInitialiseTaskLists+0x70>)
 8007134:	f7fe f900 	bl	8005338 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007138:	480b      	ldr	r0, [pc, #44]	; (8007168 <prvInitialiseTaskLists+0x74>)
 800713a:	f7fe f8fd 	bl	8005338 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800713e:	4b0b      	ldr	r3, [pc, #44]	; (800716c <prvInitialiseTaskLists+0x78>)
 8007140:	4a05      	ldr	r2, [pc, #20]	; (8007158 <prvInitialiseTaskLists+0x64>)
 8007142:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007144:	4b0a      	ldr	r3, [pc, #40]	; (8007170 <prvInitialiseTaskLists+0x7c>)
 8007146:	4a05      	ldr	r2, [pc, #20]	; (800715c <prvInitialiseTaskLists+0x68>)
 8007148:	601a      	str	r2, [r3, #0]
}
 800714a:	bf00      	nop
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20000768 	.word	0x20000768
 8007158:	20000bc8 	.word	0x20000bc8
 800715c:	20000bdc 	.word	0x20000bdc
 8007160:	20000bf8 	.word	0x20000bf8
 8007164:	20000c0c 	.word	0x20000c0c
 8007168:	20000c24 	.word	0x20000c24
 800716c:	20000bf0 	.word	0x20000bf0
 8007170:	20000bf4 	.word	0x20000bf4

08007174 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800717a:	e019      	b.n	80071b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800717c:	f000 fe5c 	bl	8007e38 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007180:	4b0f      	ldr	r3, [pc, #60]	; (80071c0 <prvCheckTasksWaitingTermination+0x4c>)
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3304      	adds	r3, #4
 800718c:	4618      	mov	r0, r3
 800718e:	f7fe f959 	bl	8005444 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007192:	4b0c      	ldr	r3, [pc, #48]	; (80071c4 <prvCheckTasksWaitingTermination+0x50>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	3b01      	subs	r3, #1
 8007198:	4a0a      	ldr	r2, [pc, #40]	; (80071c4 <prvCheckTasksWaitingTermination+0x50>)
 800719a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800719c:	4b0a      	ldr	r3, [pc, #40]	; (80071c8 <prvCheckTasksWaitingTermination+0x54>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	4a09      	ldr	r2, [pc, #36]	; (80071c8 <prvCheckTasksWaitingTermination+0x54>)
 80071a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071a6:	f000 fe75 	bl	8007e94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f80e 	bl	80071cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071b0:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <prvCheckTasksWaitingTermination+0x54>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1e1      	bne.n	800717c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80071b8:	bf00      	nop
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	20000c0c 	.word	0x20000c0c
 80071c4:	20000c38 	.word	0x20000c38
 80071c8:	20000c20 	.word	0x20000c20

080071cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d108      	bne.n	80071f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 ffe0 	bl	80081a8 <vPortFree>
				vPortFree( pxTCB );
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 ffdd 	bl	80081a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80071ee:	e017      	b.n	8007220 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d103      	bne.n	8007202 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 ffd4 	bl	80081a8 <vPortFree>
	}
 8007200:	e00e      	b.n	8007220 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007208:	2b02      	cmp	r3, #2
 800720a:	d009      	beq.n	8007220 <prvDeleteTCB+0x54>
 800720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007210:	f383 8811 	msr	BASEPRI, r3
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	f3bf 8f4f 	dsb	sy
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	e7fe      	b.n	800721e <prvDeleteTCB+0x52>
	}
 8007220:	bf00      	nop
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800722e:	4b0e      	ldr	r3, [pc, #56]	; (8007268 <prvResetNextTaskUnblockTime+0x40>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <prvResetNextTaskUnblockTime+0x14>
 8007238:	2301      	movs	r3, #1
 800723a:	e000      	b.n	800723e <prvResetNextTaskUnblockTime+0x16>
 800723c:	2300      	movs	r3, #0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d004      	beq.n	800724c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007242:	4b0a      	ldr	r3, [pc, #40]	; (800726c <prvResetNextTaskUnblockTime+0x44>)
 8007244:	f04f 32ff 	mov.w	r2, #4294967295
 8007248:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800724a:	e008      	b.n	800725e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800724c:	4b06      	ldr	r3, [pc, #24]	; (8007268 <prvResetNextTaskUnblockTime+0x40>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	4a04      	ldr	r2, [pc, #16]	; (800726c <prvResetNextTaskUnblockTime+0x44>)
 800725c:	6013      	str	r3, [r2, #0]
}
 800725e:	bf00      	nop
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	bc80      	pop	{r7}
 8007266:	4770      	bx	lr
 8007268:	20000bf0 	.word	0x20000bf0
 800726c:	20000c58 	.word	0x20000c58

08007270 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007276:	4b04      	ldr	r3, [pc, #16]	; (8007288 <xTaskGetCurrentTaskHandle+0x18>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800727c:	687b      	ldr	r3, [r7, #4]
	}
 800727e:	4618      	mov	r0, r3
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	bc80      	pop	{r7}
 8007286:	4770      	bx	lr
 8007288:	20000764 	.word	0x20000764

0800728c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007292:	4b0b      	ldr	r3, [pc, #44]	; (80072c0 <xTaskGetSchedulerState+0x34>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d102      	bne.n	80072a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800729a:	2301      	movs	r3, #1
 800729c:	607b      	str	r3, [r7, #4]
 800729e:	e008      	b.n	80072b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072a0:	4b08      	ldr	r3, [pc, #32]	; (80072c4 <xTaskGetSchedulerState+0x38>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d102      	bne.n	80072ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072a8:	2302      	movs	r3, #2
 80072aa:	607b      	str	r3, [r7, #4]
 80072ac:	e001      	b.n	80072b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072ae:	2300      	movs	r3, #0
 80072b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072b2:	687b      	ldr	r3, [r7, #4]
	}
 80072b4:	4618      	mov	r0, r3
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bc80      	pop	{r7}
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	20000c44 	.word	0x20000c44
 80072c4:	20000c60 	.word	0x20000c60

080072c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d056      	beq.n	800738c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072e2:	4b2d      	ldr	r3, [pc, #180]	; (8007398 <xTaskPriorityInherit+0xd0>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d246      	bcs.n	800737a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	db06      	blt.n	8007302 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072f4:	4b28      	ldr	r3, [pc, #160]	; (8007398 <xTaskPriorityInherit+0xd0>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	6959      	ldr	r1, [r3, #20]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800730a:	4613      	mov	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4a22      	ldr	r2, [pc, #136]	; (800739c <xTaskPriorityInherit+0xd4>)
 8007314:	4413      	add	r3, r2
 8007316:	4299      	cmp	r1, r3
 8007318:	d101      	bne.n	800731e <xTaskPriorityInherit+0x56>
 800731a:	2301      	movs	r3, #1
 800731c:	e000      	b.n	8007320 <xTaskPriorityInherit+0x58>
 800731e:	2300      	movs	r3, #0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d022      	beq.n	800736a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	3304      	adds	r3, #4
 8007328:	4618      	mov	r0, r3
 800732a:	f7fe f88b 	bl	8005444 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800732e:	4b1a      	ldr	r3, [pc, #104]	; (8007398 <xTaskPriorityInherit+0xd0>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800733c:	4b18      	ldr	r3, [pc, #96]	; (80073a0 <xTaskPriorityInherit+0xd8>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d903      	bls.n	800734c <xTaskPriorityInherit+0x84>
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007348:	4a15      	ldr	r2, [pc, #84]	; (80073a0 <xTaskPriorityInherit+0xd8>)
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007350:	4613      	mov	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4a10      	ldr	r2, [pc, #64]	; (800739c <xTaskPriorityInherit+0xd4>)
 800735a:	441a      	add	r2, r3
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	3304      	adds	r3, #4
 8007360:	4619      	mov	r1, r3
 8007362:	4610      	mov	r0, r2
 8007364:	f7fe f813 	bl	800538e <vListInsertEnd>
 8007368:	e004      	b.n	8007374 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800736a:	4b0b      	ldr	r3, [pc, #44]	; (8007398 <xTaskPriorityInherit+0xd0>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007374:	2301      	movs	r3, #1
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	e008      	b.n	800738c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800737e:	4b06      	ldr	r3, [pc, #24]	; (8007398 <xTaskPriorityInherit+0xd0>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	429a      	cmp	r2, r3
 8007386:	d201      	bcs.n	800738c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007388:	2301      	movs	r3, #1
 800738a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800738c:	68fb      	ldr	r3, [r7, #12]
	}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	20000764 	.word	0x20000764
 800739c:	20000768 	.word	0x20000768
 80073a0:	20000c40 	.word	0x20000c40

080073a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80073b0:	2300      	movs	r3, #0
 80073b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d054      	beq.n	8007464 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80073ba:	4b2d      	ldr	r3, [pc, #180]	; (8007470 <xTaskPriorityDisinherit+0xcc>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d009      	beq.n	80073d8 <xTaskPriorityDisinherit+0x34>
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	60fb      	str	r3, [r7, #12]
 80073d6:	e7fe      	b.n	80073d6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d109      	bne.n	80073f4 <xTaskPriorityDisinherit+0x50>
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	60bb      	str	r3, [r7, #8]
 80073f2:	e7fe      	b.n	80073f2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073f8:	1e5a      	subs	r2, r3, #1
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007406:	429a      	cmp	r2, r3
 8007408:	d02c      	beq.n	8007464 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740e:	2b00      	cmp	r3, #0
 8007410:	d128      	bne.n	8007464 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	3304      	adds	r3, #4
 8007416:	4618      	mov	r0, r3
 8007418:	f7fe f814 	bl	8005444 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007434:	4b0f      	ldr	r3, [pc, #60]	; (8007474 <xTaskPriorityDisinherit+0xd0>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	429a      	cmp	r2, r3
 800743a:	d903      	bls.n	8007444 <xTaskPriorityDisinherit+0xa0>
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	4a0c      	ldr	r2, [pc, #48]	; (8007474 <xTaskPriorityDisinherit+0xd0>)
 8007442:	6013      	str	r3, [r2, #0]
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007448:	4613      	mov	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4a09      	ldr	r2, [pc, #36]	; (8007478 <xTaskPriorityDisinherit+0xd4>)
 8007452:	441a      	add	r2, r3
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	3304      	adds	r3, #4
 8007458:	4619      	mov	r1, r3
 800745a:	4610      	mov	r0, r2
 800745c:	f7fd ff97 	bl	800538e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007460:	2301      	movs	r3, #1
 8007462:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007464:	697b      	ldr	r3, [r7, #20]
	}
 8007466:	4618      	mov	r0, r3
 8007468:	3718      	adds	r7, #24
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	20000764 	.word	0x20000764
 8007474:	20000c40 	.word	0x20000c40
 8007478:	20000768 	.word	0x20000768

0800747c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800747c:	b580      	push	{r7, lr}
 800747e:	b088      	sub	sp, #32
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800748a:	2301      	movs	r3, #1
 800748c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d06d      	beq.n	8007570 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007498:	2b00      	cmp	r3, #0
 800749a:	d109      	bne.n	80074b0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800749c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a0:	f383 8811 	msr	BASEPRI, r3
 80074a4:	f3bf 8f6f 	isb	sy
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	60fb      	str	r3, [r7, #12]
 80074ae:	e7fe      	b.n	80074ae <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d902      	bls.n	80074c0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	61fb      	str	r3, [r7, #28]
 80074be:	e002      	b.n	80074c6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074c4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d04f      	beq.n	8007570 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d14a      	bne.n	8007570 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80074da:	4b27      	ldr	r3, [pc, #156]	; (8007578 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69ba      	ldr	r2, [r7, #24]
 80074e0:	429a      	cmp	r2, r3
 80074e2:	d109      	bne.n	80074f8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80074e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e8:	f383 8811 	msr	BASEPRI, r3
 80074ec:	f3bf 8f6f 	isb	sy
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	60bb      	str	r3, [r7, #8]
 80074f6:	e7fe      	b.n	80074f6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	69fa      	ldr	r2, [r7, #28]
 8007502:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	2b00      	cmp	r3, #0
 800750a:	db04      	blt.n	8007516 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007516:	69bb      	ldr	r3, [r7, #24]
 8007518:	6959      	ldr	r1, [r3, #20]
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	4613      	mov	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4a15      	ldr	r2, [pc, #84]	; (800757c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007526:	4413      	add	r3, r2
 8007528:	4299      	cmp	r1, r3
 800752a:	d101      	bne.n	8007530 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 800752c:	2301      	movs	r3, #1
 800752e:	e000      	b.n	8007532 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8007530:	2300      	movs	r3, #0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d01c      	beq.n	8007570 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	3304      	adds	r3, #4
 800753a:	4618      	mov	r0, r3
 800753c:	f7fd ff82 	bl	8005444 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007544:	4b0e      	ldr	r3, [pc, #56]	; (8007580 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	429a      	cmp	r2, r3
 800754a:	d903      	bls.n	8007554 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007550:	4a0b      	ldr	r2, [pc, #44]	; (8007580 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007552:	6013      	str	r3, [r2, #0]
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007558:	4613      	mov	r3, r2
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	4413      	add	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4a06      	ldr	r2, [pc, #24]	; (800757c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007562:	441a      	add	r2, r3
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	3304      	adds	r3, #4
 8007568:	4619      	mov	r1, r3
 800756a:	4610      	mov	r0, r2
 800756c:	f7fd ff0f 	bl	800538e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007570:	bf00      	nop
 8007572:	3720      	adds	r7, #32
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	20000764 	.word	0x20000764
 800757c:	20000768 	.word	0x20000768
 8007580:	20000c40 	.word	0x20000c40

08007584 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007584:	b480      	push	{r7}
 8007586:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007588:	4b07      	ldr	r3, [pc, #28]	; (80075a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d004      	beq.n	800759a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007590:	4b05      	ldr	r3, [pc, #20]	; (80075a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007596:	3201      	adds	r2, #1
 8007598:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800759a:	4b03      	ldr	r3, [pc, #12]	; (80075a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800759c:	681b      	ldr	r3, [r3, #0]
	}
 800759e:	4618      	mov	r0, r3
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	20000764 	.word	0x20000764

080075ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075b6:	4b21      	ldr	r3, [pc, #132]	; (800763c <prvAddCurrentTaskToDelayedList+0x90>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075bc:	4b20      	ldr	r3, [pc, #128]	; (8007640 <prvAddCurrentTaskToDelayedList+0x94>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3304      	adds	r3, #4
 80075c2:	4618      	mov	r0, r3
 80075c4:	f7fd ff3e 	bl	8005444 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ce:	d10a      	bne.n	80075e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d007      	beq.n	80075e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075d6:	4b1a      	ldr	r3, [pc, #104]	; (8007640 <prvAddCurrentTaskToDelayedList+0x94>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3304      	adds	r3, #4
 80075dc:	4619      	mov	r1, r3
 80075de:	4819      	ldr	r0, [pc, #100]	; (8007644 <prvAddCurrentTaskToDelayedList+0x98>)
 80075e0:	f7fd fed5 	bl	800538e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075e4:	e026      	b.n	8007634 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4413      	add	r3, r2
 80075ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075ee:	4b14      	ldr	r3, [pc, #80]	; (8007640 <prvAddCurrentTaskToDelayedList+0x94>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d209      	bcs.n	8007612 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075fe:	4b12      	ldr	r3, [pc, #72]	; (8007648 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	4b0f      	ldr	r3, [pc, #60]	; (8007640 <prvAddCurrentTaskToDelayedList+0x94>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	3304      	adds	r3, #4
 8007608:	4619      	mov	r1, r3
 800760a:	4610      	mov	r0, r2
 800760c:	f7fd fee2 	bl	80053d4 <vListInsert>
}
 8007610:	e010      	b.n	8007634 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007612:	4b0e      	ldr	r3, [pc, #56]	; (800764c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	4b0a      	ldr	r3, [pc, #40]	; (8007640 <prvAddCurrentTaskToDelayedList+0x94>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3304      	adds	r3, #4
 800761c:	4619      	mov	r1, r3
 800761e:	4610      	mov	r0, r2
 8007620:	f7fd fed8 	bl	80053d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007624:	4b0a      	ldr	r3, [pc, #40]	; (8007650 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68ba      	ldr	r2, [r7, #8]
 800762a:	429a      	cmp	r2, r3
 800762c:	d202      	bcs.n	8007634 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800762e:	4a08      	ldr	r2, [pc, #32]	; (8007650 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	6013      	str	r3, [r2, #0]
}
 8007634:	bf00      	nop
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20000c3c 	.word	0x20000c3c
 8007640:	20000764 	.word	0x20000764
 8007644:	20000c24 	.word	0x20000c24
 8007648:	20000bf4 	.word	0x20000bf4
 800764c:	20000bf0 	.word	0x20000bf0
 8007650:	20000c58 	.word	0x20000c58

08007654 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b08a      	sub	sp, #40	; 0x28
 8007658:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800765a:	2300      	movs	r3, #0
 800765c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800765e:	f000 fac3 	bl	8007be8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007662:	4b1c      	ldr	r3, [pc, #112]	; (80076d4 <xTimerCreateTimerTask+0x80>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d021      	beq.n	80076ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800766a:	2300      	movs	r3, #0
 800766c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800766e:	2300      	movs	r3, #0
 8007670:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007672:	1d3a      	adds	r2, r7, #4
 8007674:	f107 0108 	add.w	r1, r7, #8
 8007678:	f107 030c 	add.w	r3, r7, #12
 800767c:	4618      	mov	r0, r3
 800767e:	f7fd fe41 	bl	8005304 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007682:	6879      	ldr	r1, [r7, #4]
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	9202      	str	r2, [sp, #8]
 800768a:	9301      	str	r3, [sp, #4]
 800768c:	2302      	movs	r3, #2
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	2300      	movs	r3, #0
 8007692:	460a      	mov	r2, r1
 8007694:	4910      	ldr	r1, [pc, #64]	; (80076d8 <xTimerCreateTimerTask+0x84>)
 8007696:	4811      	ldr	r0, [pc, #68]	; (80076dc <xTimerCreateTimerTask+0x88>)
 8007698:	f7fe ffd2 	bl	8006640 <xTaskCreateStatic>
 800769c:	4602      	mov	r2, r0
 800769e:	4b10      	ldr	r3, [pc, #64]	; (80076e0 <xTimerCreateTimerTask+0x8c>)
 80076a0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80076a2:	4b0f      	ldr	r3, [pc, #60]	; (80076e0 <xTimerCreateTimerTask+0x8c>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80076aa:	2301      	movs	r3, #1
 80076ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d109      	bne.n	80076c8 <xTimerCreateTimerTask+0x74>
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	613b      	str	r3, [r7, #16]
 80076c6:	e7fe      	b.n	80076c6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80076c8:	697b      	ldr	r3, [r7, #20]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3718      	adds	r7, #24
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	20000c94 	.word	0x20000c94
 80076d8:	08014d48 	.word	0x08014d48
 80076dc:	080077fd 	.word	0x080077fd
 80076e0:	20000c98 	.word	0x20000c98

080076e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b08a      	sub	sp, #40	; 0x28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80076f2:	2300      	movs	r3, #0
 80076f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d109      	bne.n	8007710 <xTimerGenericCommand+0x2c>
 80076fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	623b      	str	r3, [r7, #32]
 800770e:	e7fe      	b.n	800770e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007710:	4b19      	ldr	r3, [pc, #100]	; (8007778 <xTimerGenericCommand+0x94>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d02a      	beq.n	800776e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	2b05      	cmp	r3, #5
 8007728:	dc18      	bgt.n	800775c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800772a:	f7ff fdaf 	bl	800728c <xTaskGetSchedulerState>
 800772e:	4603      	mov	r3, r0
 8007730:	2b02      	cmp	r3, #2
 8007732:	d109      	bne.n	8007748 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007734:	4b10      	ldr	r3, [pc, #64]	; (8007778 <xTimerGenericCommand+0x94>)
 8007736:	6818      	ldr	r0, [r3, #0]
 8007738:	f107 0110 	add.w	r1, r7, #16
 800773c:	2300      	movs	r3, #0
 800773e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007740:	f7fe f900 	bl	8005944 <xQueueGenericSend>
 8007744:	6278      	str	r0, [r7, #36]	; 0x24
 8007746:	e012      	b.n	800776e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007748:	4b0b      	ldr	r3, [pc, #44]	; (8007778 <xTimerGenericCommand+0x94>)
 800774a:	6818      	ldr	r0, [r3, #0]
 800774c:	f107 0110 	add.w	r1, r7, #16
 8007750:	2300      	movs	r3, #0
 8007752:	2200      	movs	r2, #0
 8007754:	f7fe f8f6 	bl	8005944 <xQueueGenericSend>
 8007758:	6278      	str	r0, [r7, #36]	; 0x24
 800775a:	e008      	b.n	800776e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800775c:	4b06      	ldr	r3, [pc, #24]	; (8007778 <xTimerGenericCommand+0x94>)
 800775e:	6818      	ldr	r0, [r3, #0]
 8007760:	f107 0110 	add.w	r1, r7, #16
 8007764:	2300      	movs	r3, #0
 8007766:	683a      	ldr	r2, [r7, #0]
 8007768:	f7fe f9e6 	bl	8005b38 <xQueueGenericSendFromISR>
 800776c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007770:	4618      	mov	r0, r3
 8007772:	3728      	adds	r7, #40	; 0x28
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	20000c94 	.word	0x20000c94

0800777c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b088      	sub	sp, #32
 8007780:	af02      	add	r7, sp, #8
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007786:	4b1c      	ldr	r3, [pc, #112]	; (80077f8 <prvProcessExpiredTimer+0x7c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68db      	ldr	r3, [r3, #12]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	3304      	adds	r3, #4
 8007794:	4618      	mov	r0, r3
 8007796:	f7fd fe55 	bl	8005444 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	69db      	ldr	r3, [r3, #28]
 800779e:	2b01      	cmp	r3, #1
 80077a0:	d121      	bne.n	80077e6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	699a      	ldr	r2, [r3, #24]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	18d1      	adds	r1, r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	6978      	ldr	r0, [r7, #20]
 80077b0:	f000 f8c8 	bl	8007944 <prvInsertTimerInActiveList>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d015      	beq.n	80077e6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077ba:	2300      	movs	r3, #0
 80077bc:	9300      	str	r3, [sp, #0]
 80077be:	2300      	movs	r3, #0
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	2100      	movs	r1, #0
 80077c4:	6978      	ldr	r0, [r7, #20]
 80077c6:	f7ff ff8d 	bl	80076e4 <xTimerGenericCommand>
 80077ca:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d109      	bne.n	80077e6 <prvProcessExpiredTimer+0x6a>
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	e7fe      	b.n	80077e4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	6978      	ldr	r0, [r7, #20]
 80077ec:	4798      	blx	r3
}
 80077ee:	bf00      	nop
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	20000c8c 	.word	0x20000c8c

080077fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b084      	sub	sp, #16
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007804:	f107 0308 	add.w	r3, r7, #8
 8007808:	4618      	mov	r0, r3
 800780a:	f000 f857 	bl	80078bc <prvGetNextExpireTime>
 800780e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	4619      	mov	r1, r3
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f000 f803 	bl	8007820 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800781a:	f000 f8d5 	bl	80079c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800781e:	e7f1      	b.n	8007804 <prvTimerTask+0x8>

08007820 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800782a:	f7ff f935 	bl	8006a98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800782e:	f107 0308 	add.w	r3, r7, #8
 8007832:	4618      	mov	r0, r3
 8007834:	f000 f866 	bl	8007904 <prvSampleTimeNow>
 8007838:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d130      	bne.n	80078a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10a      	bne.n	800785c <prvProcessTimerOrBlockTask+0x3c>
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	429a      	cmp	r2, r3
 800784c:	d806      	bhi.n	800785c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800784e:	f7ff f931 	bl	8006ab4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007852:	68f9      	ldr	r1, [r7, #12]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7ff ff91 	bl	800777c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800785a:	e024      	b.n	80078a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d008      	beq.n	8007874 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007862:	4b13      	ldr	r3, [pc, #76]	; (80078b0 <prvProcessTimerOrBlockTask+0x90>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	bf0c      	ite	eq
 800786c:	2301      	moveq	r3, #1
 800786e:	2300      	movne	r3, #0
 8007870:	b2db      	uxtb	r3, r3
 8007872:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007874:	4b0f      	ldr	r3, [pc, #60]	; (80078b4 <prvProcessTimerOrBlockTask+0x94>)
 8007876:	6818      	ldr	r0, [r3, #0]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	1ad3      	subs	r3, r2, r3
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	4619      	mov	r1, r3
 8007882:	f7fe fea9 	bl	80065d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007886:	f7ff f915 	bl	8006ab4 <xTaskResumeAll>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10a      	bne.n	80078a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007890:	4b09      	ldr	r3, [pc, #36]	; (80078b8 <prvProcessTimerOrBlockTask+0x98>)
 8007892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	f3bf 8f6f 	isb	sy
}
 80078a0:	e001      	b.n	80078a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80078a2:	f7ff f907 	bl	8006ab4 <xTaskResumeAll>
}
 80078a6:	bf00      	nop
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20000c90 	.word	0x20000c90
 80078b4:	20000c94 	.word	0x20000c94
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80078c4:	4b0e      	ldr	r3, [pc, #56]	; (8007900 <prvGetNextExpireTime+0x44>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	bf0c      	ite	eq
 80078ce:	2301      	moveq	r3, #1
 80078d0:	2300      	movne	r3, #0
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	461a      	mov	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d105      	bne.n	80078ee <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80078e2:	4b07      	ldr	r3, [pc, #28]	; (8007900 <prvGetNextExpireTime+0x44>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	e001      	b.n	80078f2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80078ee:	2300      	movs	r3, #0
 80078f0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80078f2:	68fb      	ldr	r3, [r7, #12]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bc80      	pop	{r7}
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	20000c8c 	.word	0x20000c8c

08007904 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800790c:	f7ff f96e 	bl	8006bec <xTaskGetTickCount>
 8007910:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007912:	4b0b      	ldr	r3, [pc, #44]	; (8007940 <prvSampleTimeNow+0x3c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	429a      	cmp	r2, r3
 800791a:	d205      	bcs.n	8007928 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800791c:	f000 f904 	bl	8007b28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	601a      	str	r2, [r3, #0]
 8007926:	e002      	b.n	800792e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800792e:	4a04      	ldr	r2, [pc, #16]	; (8007940 <prvSampleTimeNow+0x3c>)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007934:	68fb      	ldr	r3, [r7, #12]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20000c9c 	.word	0x20000c9c

08007944 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
 8007950:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007952:	2300      	movs	r3, #0
 8007954:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	68ba      	ldr	r2, [r7, #8]
 800795a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007962:	68ba      	ldr	r2, [r7, #8]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	429a      	cmp	r2, r3
 8007968:	d812      	bhi.n	8007990 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	1ad2      	subs	r2, r2, r3
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	429a      	cmp	r2, r3
 8007976:	d302      	bcc.n	800797e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007978:	2301      	movs	r3, #1
 800797a:	617b      	str	r3, [r7, #20]
 800797c:	e01b      	b.n	80079b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800797e:	4b10      	ldr	r3, [pc, #64]	; (80079c0 <prvInsertTimerInActiveList+0x7c>)
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	3304      	adds	r3, #4
 8007986:	4619      	mov	r1, r3
 8007988:	4610      	mov	r0, r2
 800798a:	f7fd fd23 	bl	80053d4 <vListInsert>
 800798e:	e012      	b.n	80079b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	429a      	cmp	r2, r3
 8007996:	d206      	bcs.n	80079a6 <prvInsertTimerInActiveList+0x62>
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	429a      	cmp	r2, r3
 800799e:	d302      	bcc.n	80079a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80079a0:	2301      	movs	r3, #1
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	e007      	b.n	80079b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80079a6:	4b07      	ldr	r3, [pc, #28]	; (80079c4 <prvInsertTimerInActiveList+0x80>)
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4619      	mov	r1, r3
 80079b0:	4610      	mov	r0, r2
 80079b2:	f7fd fd0f 	bl	80053d4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80079b6:	697b      	ldr	r3, [r7, #20]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	20000c90 	.word	0x20000c90
 80079c4:	20000c8c 	.word	0x20000c8c

080079c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b08e      	sub	sp, #56	; 0x38
 80079cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079ce:	e099      	b.n	8007b04 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	da17      	bge.n	8007a06 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80079d6:	1d3b      	adds	r3, r7, #4
 80079d8:	3304      	adds	r3, #4
 80079da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80079dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d109      	bne.n	80079f6 <prvProcessReceivedCommands+0x2e>
 80079e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e6:	f383 8811 	msr	BASEPRI, r3
 80079ea:	f3bf 8f6f 	isb	sy
 80079ee:	f3bf 8f4f 	dsb	sy
 80079f2:	61fb      	str	r3, [r7, #28]
 80079f4:	e7fe      	b.n	80079f4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80079f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079fc:	6850      	ldr	r0, [r2, #4]
 80079fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a00:	6892      	ldr	r2, [r2, #8]
 8007a02:	4611      	mov	r1, r2
 8007a04:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	db7a      	blt.n	8007b02 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a12:	695b      	ldr	r3, [r3, #20]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d004      	beq.n	8007a22 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7fd fd11 	bl	8005444 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a22:	463b      	mov	r3, r7
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7ff ff6d 	bl	8007904 <prvSampleTimeNow>
 8007a2a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b09      	cmp	r3, #9
 8007a30:	d868      	bhi.n	8007b04 <prvProcessReceivedCommands+0x13c>
 8007a32:	a201      	add	r2, pc, #4	; (adr r2, 8007a38 <prvProcessReceivedCommands+0x70>)
 8007a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a38:	08007a61 	.word	0x08007a61
 8007a3c:	08007a61 	.word	0x08007a61
 8007a40:	08007a61 	.word	0x08007a61
 8007a44:	08007b05 	.word	0x08007b05
 8007a48:	08007abb 	.word	0x08007abb
 8007a4c:	08007af1 	.word	0x08007af1
 8007a50:	08007a61 	.word	0x08007a61
 8007a54:	08007a61 	.word	0x08007a61
 8007a58:	08007b05 	.word	0x08007b05
 8007a5c:	08007abb 	.word	0x08007abb
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	18d1      	adds	r1, r2, r3
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a6e:	f7ff ff69 	bl	8007944 <prvInsertTimerInActiveList>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d045      	beq.n	8007b04 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a7e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d13d      	bne.n	8007b04 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a88:	68ba      	ldr	r2, [r7, #8]
 8007a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8c:	699b      	ldr	r3, [r3, #24]
 8007a8e:	441a      	add	r2, r3
 8007a90:	2300      	movs	r3, #0
 8007a92:	9300      	str	r3, [sp, #0]
 8007a94:	2300      	movs	r3, #0
 8007a96:	2100      	movs	r1, #0
 8007a98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a9a:	f7ff fe23 	bl	80076e4 <xTimerGenericCommand>
 8007a9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007aa0:	6a3b      	ldr	r3, [r7, #32]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d12e      	bne.n	8007b04 <prvProcessReceivedCommands+0x13c>
 8007aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aaa:	f383 8811 	msr	BASEPRI, r3
 8007aae:	f3bf 8f6f 	isb	sy
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	61bb      	str	r3, [r7, #24]
 8007ab8:	e7fe      	b.n	8007ab8 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007abe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d109      	bne.n	8007adc <prvProcessReceivedCommands+0x114>
 8007ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	617b      	str	r3, [r7, #20]
 8007ada:	e7fe      	b.n	8007ada <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ade:	699a      	ldr	r2, [r3, #24]
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	18d1      	adds	r1, r2, r3
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aea:	f7ff ff2b 	bl	8007944 <prvInsertTimerInActiveList>
					break;
 8007aee:	e009      	b.n	8007b04 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d104      	bne.n	8007b04 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8007afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007afc:	f000 fb54 	bl	80081a8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007b00:	e000      	b.n	8007b04 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007b02:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b04:	4b07      	ldr	r3, [pc, #28]	; (8007b24 <prvProcessReceivedCommands+0x15c>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	1d39      	adds	r1, r7, #4
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fe f931 	bl	8005d74 <xQueueReceive>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f47f af5b 	bne.w	80079d0 <prvProcessReceivedCommands+0x8>
	}
}
 8007b1a:	bf00      	nop
 8007b1c:	3730      	adds	r7, #48	; 0x30
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20000c94 	.word	0x20000c94

08007b28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b2e:	e044      	b.n	8007bba <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b30:	4b2b      	ldr	r3, [pc, #172]	; (8007be0 <prvSwitchTimerLists+0xb8>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b3a:	4b29      	ldr	r3, [pc, #164]	; (8007be0 <prvSwitchTimerLists+0xb8>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	3304      	adds	r3, #4
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fd fc7b 	bl	8005444 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	69db      	ldr	r3, [r3, #28]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d12d      	bne.n	8007bba <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	693a      	ldr	r2, [r7, #16]
 8007b64:	4413      	add	r3, r2
 8007b66:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d90e      	bls.n	8007b8e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b7c:	4b18      	ldr	r3, [pc, #96]	; (8007be0 <prvSwitchTimerLists+0xb8>)
 8007b7e:	681a      	ldr	r2, [r3, #0]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3304      	adds	r3, #4
 8007b84:	4619      	mov	r1, r3
 8007b86:	4610      	mov	r0, r2
 8007b88:	f7fd fc24 	bl	80053d4 <vListInsert>
 8007b8c:	e015      	b.n	8007bba <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b8e:	2300      	movs	r3, #0
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	2300      	movs	r3, #0
 8007b94:	693a      	ldr	r2, [r7, #16]
 8007b96:	2100      	movs	r1, #0
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f7ff fda3 	bl	80076e4 <xTimerGenericCommand>
 8007b9e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d109      	bne.n	8007bba <prvSwitchTimerLists+0x92>
 8007ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	e7fe      	b.n	8007bb8 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bba:	4b09      	ldr	r3, [pc, #36]	; (8007be0 <prvSwitchTimerLists+0xb8>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1b5      	bne.n	8007b30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007bc4:	4b06      	ldr	r3, [pc, #24]	; (8007be0 <prvSwitchTimerLists+0xb8>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007bca:	4b06      	ldr	r3, [pc, #24]	; (8007be4 <prvSwitchTimerLists+0xbc>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a04      	ldr	r2, [pc, #16]	; (8007be0 <prvSwitchTimerLists+0xb8>)
 8007bd0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007bd2:	4a04      	ldr	r2, [pc, #16]	; (8007be4 <prvSwitchTimerLists+0xbc>)
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	6013      	str	r3, [r2, #0]
}
 8007bd8:	bf00      	nop
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	20000c8c 	.word	0x20000c8c
 8007be4:	20000c90 	.word	0x20000c90

08007be8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007bee:	f000 f923 	bl	8007e38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007bf2:	4b15      	ldr	r3, [pc, #84]	; (8007c48 <prvCheckForValidListAndQueue+0x60>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d120      	bne.n	8007c3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007bfa:	4814      	ldr	r0, [pc, #80]	; (8007c4c <prvCheckForValidListAndQueue+0x64>)
 8007bfc:	f7fd fb9c 	bl	8005338 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c00:	4813      	ldr	r0, [pc, #76]	; (8007c50 <prvCheckForValidListAndQueue+0x68>)
 8007c02:	f7fd fb99 	bl	8005338 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c06:	4b13      	ldr	r3, [pc, #76]	; (8007c54 <prvCheckForValidListAndQueue+0x6c>)
 8007c08:	4a10      	ldr	r2, [pc, #64]	; (8007c4c <prvCheckForValidListAndQueue+0x64>)
 8007c0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c0c:	4b12      	ldr	r3, [pc, #72]	; (8007c58 <prvCheckForValidListAndQueue+0x70>)
 8007c0e:	4a10      	ldr	r2, [pc, #64]	; (8007c50 <prvCheckForValidListAndQueue+0x68>)
 8007c10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c12:	2300      	movs	r3, #0
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	4b11      	ldr	r3, [pc, #68]	; (8007c5c <prvCheckForValidListAndQueue+0x74>)
 8007c18:	4a11      	ldr	r2, [pc, #68]	; (8007c60 <prvCheckForValidListAndQueue+0x78>)
 8007c1a:	2110      	movs	r1, #16
 8007c1c:	200a      	movs	r0, #10
 8007c1e:	f7fd fca3 	bl	8005568 <xQueueGenericCreateStatic>
 8007c22:	4602      	mov	r2, r0
 8007c24:	4b08      	ldr	r3, [pc, #32]	; (8007c48 <prvCheckForValidListAndQueue+0x60>)
 8007c26:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c28:	4b07      	ldr	r3, [pc, #28]	; (8007c48 <prvCheckForValidListAndQueue+0x60>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d005      	beq.n	8007c3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c30:	4b05      	ldr	r3, [pc, #20]	; (8007c48 <prvCheckForValidListAndQueue+0x60>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	490b      	ldr	r1, [pc, #44]	; (8007c64 <prvCheckForValidListAndQueue+0x7c>)
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe fc7e 	bl	8006538 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c3c:	f000 f92a 	bl	8007e94 <vPortExitCritical>
}
 8007c40:	bf00      	nop
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	20000c94 	.word	0x20000c94
 8007c4c:	20000c64 	.word	0x20000c64
 8007c50:	20000c78 	.word	0x20000c78
 8007c54:	20000c8c 	.word	0x20000c8c
 8007c58:	20000c90 	.word	0x20000c90
 8007c5c:	20000d40 	.word	0x20000d40
 8007c60:	20000ca0 	.word	0x20000ca0
 8007c64:	08014d50 	.word	0x08014d50

08007c68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3b04      	subs	r3, #4
 8007c78:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3b04      	subs	r3, #4
 8007c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	f023 0201 	bic.w	r2, r3, #1
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	3b04      	subs	r3, #4
 8007c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007c98:	4a08      	ldr	r2, [pc, #32]	; (8007cbc <pxPortInitialiseStack+0x54>)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3b14      	subs	r3, #20
 8007ca2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	3b20      	subs	r3, #32
 8007cae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3714      	adds	r7, #20
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bc80      	pop	{r7}
 8007cba:	4770      	bx	lr
 8007cbc:	08007cc1 	.word	0x08007cc1

08007cc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007cca:	4b10      	ldr	r3, [pc, #64]	; (8007d0c <prvTaskExitError+0x4c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cd2:	d009      	beq.n	8007ce8 <prvTaskExitError+0x28>
 8007cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	e7fe      	b.n	8007ce6 <prvTaskExitError+0x26>
 8007ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cec:	f383 8811 	msr	BASEPRI, r3
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	f3bf 8f4f 	dsb	sy
 8007cf8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007cfa:	bf00      	nop
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d0fc      	beq.n	8007cfc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d02:	bf00      	nop
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bc80      	pop	{r7}
 8007d0a:	4770      	bx	lr
 8007d0c:	2000000c 	.word	0x2000000c

08007d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d10:	4b07      	ldr	r3, [pc, #28]	; (8007d30 <pxCurrentTCBConst2>)
 8007d12:	6819      	ldr	r1, [r3, #0]
 8007d14:	6808      	ldr	r0, [r1, #0]
 8007d16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007d1a:	f380 8809 	msr	PSP, r0
 8007d1e:	f3bf 8f6f 	isb	sy
 8007d22:	f04f 0000 	mov.w	r0, #0
 8007d26:	f380 8811 	msr	BASEPRI, r0
 8007d2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007d2e:	4770      	bx	lr

08007d30 <pxCurrentTCBConst2>:
 8007d30:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop

08007d38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007d38:	4806      	ldr	r0, [pc, #24]	; (8007d54 <prvPortStartFirstTask+0x1c>)
 8007d3a:	6800      	ldr	r0, [r0, #0]
 8007d3c:	6800      	ldr	r0, [r0, #0]
 8007d3e:	f380 8808 	msr	MSP, r0
 8007d42:	b662      	cpsie	i
 8007d44:	b661      	cpsie	f
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	f3bf 8f6f 	isb	sy
 8007d4e:	df00      	svc	0
 8007d50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007d52:	bf00      	nop
 8007d54:	e000ed08 	.word	0xe000ed08

08007d58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d5e:	4b31      	ldr	r3, [pc, #196]	; (8007e24 <xPortStartScheduler+0xcc>)
 8007d60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	22ff      	movs	r2, #255	; 0xff
 8007d6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d78:	78fb      	ldrb	r3, [r7, #3]
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	4b29      	ldr	r3, [pc, #164]	; (8007e28 <xPortStartScheduler+0xd0>)
 8007d84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d86:	4b29      	ldr	r3, [pc, #164]	; (8007e2c <xPortStartScheduler+0xd4>)
 8007d88:	2207      	movs	r2, #7
 8007d8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d8c:	e009      	b.n	8007da2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007d8e:	4b27      	ldr	r3, [pc, #156]	; (8007e2c <xPortStartScheduler+0xd4>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3b01      	subs	r3, #1
 8007d94:	4a25      	ldr	r2, [pc, #148]	; (8007e2c <xPortStartScheduler+0xd4>)
 8007d96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d98:	78fb      	ldrb	r3, [r7, #3]
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	005b      	lsls	r3, r3, #1
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007da2:	78fb      	ldrb	r3, [r7, #3]
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007daa:	2b80      	cmp	r3, #128	; 0x80
 8007dac:	d0ef      	beq.n	8007d8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007dae:	4b1f      	ldr	r3, [pc, #124]	; (8007e2c <xPortStartScheduler+0xd4>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f1c3 0307 	rsb	r3, r3, #7
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d009      	beq.n	8007dce <xPortStartScheduler+0x76>
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	60bb      	str	r3, [r7, #8]
 8007dcc:	e7fe      	b.n	8007dcc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007dce:	4b17      	ldr	r3, [pc, #92]	; (8007e2c <xPortStartScheduler+0xd4>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	021b      	lsls	r3, r3, #8
 8007dd4:	4a15      	ldr	r2, [pc, #84]	; (8007e2c <xPortStartScheduler+0xd4>)
 8007dd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007dd8:	4b14      	ldr	r3, [pc, #80]	; (8007e2c <xPortStartScheduler+0xd4>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007de0:	4a12      	ldr	r2, [pc, #72]	; (8007e2c <xPortStartScheduler+0xd4>)
 8007de2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	b2da      	uxtb	r2, r3
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007dec:	4b10      	ldr	r3, [pc, #64]	; (8007e30 <xPortStartScheduler+0xd8>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a0f      	ldr	r2, [pc, #60]	; (8007e30 <xPortStartScheduler+0xd8>)
 8007df2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007df6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007df8:	4b0d      	ldr	r3, [pc, #52]	; (8007e30 <xPortStartScheduler+0xd8>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a0c      	ldr	r2, [pc, #48]	; (8007e30 <xPortStartScheduler+0xd8>)
 8007dfe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007e02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007e04:	f000 f8b0 	bl	8007f68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007e08:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <xPortStartScheduler+0xdc>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007e0e:	f7ff ff93 	bl	8007d38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007e12:	f7fe ffc9 	bl	8006da8 <vTaskSwitchContext>
	prvTaskExitError();
 8007e16:	f7ff ff53 	bl	8007cc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	e000e400 	.word	0xe000e400
 8007e28:	20000d90 	.word	0x20000d90
 8007e2c:	20000d94 	.word	0x20000d94
 8007e30:	e000ed20 	.word	0xe000ed20
 8007e34:	2000000c 	.word	0x2000000c

08007e38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007e50:	4b0e      	ldr	r3, [pc, #56]	; (8007e8c <vPortEnterCritical+0x54>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	3301      	adds	r3, #1
 8007e56:	4a0d      	ldr	r2, [pc, #52]	; (8007e8c <vPortEnterCritical+0x54>)
 8007e58:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007e5a:	4b0c      	ldr	r3, [pc, #48]	; (8007e8c <vPortEnterCritical+0x54>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d10e      	bne.n	8007e80 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e62:	4b0b      	ldr	r3, [pc, #44]	; (8007e90 <vPortEnterCritical+0x58>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d009      	beq.n	8007e80 <vPortEnterCritical+0x48>
 8007e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	603b      	str	r3, [r7, #0]
 8007e7e:	e7fe      	b.n	8007e7e <vPortEnterCritical+0x46>
	}
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bc80      	pop	{r7}
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	2000000c 	.word	0x2000000c
 8007e90:	e000ed04 	.word	0xe000ed04

08007e94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e9a:	4b10      	ldr	r3, [pc, #64]	; (8007edc <vPortExitCritical+0x48>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d109      	bne.n	8007eb6 <vPortExitCritical+0x22>
 8007ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea6:	f383 8811 	msr	BASEPRI, r3
 8007eaa:	f3bf 8f6f 	isb	sy
 8007eae:	f3bf 8f4f 	dsb	sy
 8007eb2:	607b      	str	r3, [r7, #4]
 8007eb4:	e7fe      	b.n	8007eb4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8007eb6:	4b09      	ldr	r3, [pc, #36]	; (8007edc <vPortExitCritical+0x48>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	4a07      	ldr	r2, [pc, #28]	; (8007edc <vPortExitCritical+0x48>)
 8007ebe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007ec0:	4b06      	ldr	r3, [pc, #24]	; (8007edc <vPortExitCritical+0x48>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d104      	bne.n	8007ed2 <vPortExitCritical+0x3e>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ed2:	bf00      	nop
 8007ed4:	370c      	adds	r7, #12
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bc80      	pop	{r7}
 8007eda:	4770      	bx	lr
 8007edc:	2000000c 	.word	0x2000000c

08007ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ee0:	f3ef 8009 	mrs	r0, PSP
 8007ee4:	f3bf 8f6f 	isb	sy
 8007ee8:	4b0d      	ldr	r3, [pc, #52]	; (8007f20 <pxCurrentTCBConst>)
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007ef0:	6010      	str	r0, [r2, #0]
 8007ef2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007ef6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007efa:	f380 8811 	msr	BASEPRI, r0
 8007efe:	f7fe ff53 	bl	8006da8 <vTaskSwitchContext>
 8007f02:	f04f 0000 	mov.w	r0, #0
 8007f06:	f380 8811 	msr	BASEPRI, r0
 8007f0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007f0e:	6819      	ldr	r1, [r3, #0]
 8007f10:	6808      	ldr	r0, [r1, #0]
 8007f12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007f16:	f380 8809 	msr	PSP, r0
 8007f1a:	f3bf 8f6f 	isb	sy
 8007f1e:	4770      	bx	lr

08007f20 <pxCurrentTCBConst>:
 8007f20:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop

08007f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007f40:	f7fe fe74 	bl	8006c2c <xTaskIncrementTick>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f4a:	4b06      	ldr	r3, [pc, #24]	; (8007f64 <SysTick_Handler+0x3c>)
 8007f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f50:	601a      	str	r2, [r3, #0]
 8007f52:	2300      	movs	r3, #0
 8007f54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8007f5c:	bf00      	nop
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	e000ed04 	.word	0xe000ed04

08007f68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007f68:	b480      	push	{r7}
 8007f6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f6c:	4b0a      	ldr	r3, [pc, #40]	; (8007f98 <vPortSetupTimerInterrupt+0x30>)
 8007f6e:	2200      	movs	r2, #0
 8007f70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f72:	4b0a      	ldr	r3, [pc, #40]	; (8007f9c <vPortSetupTimerInterrupt+0x34>)
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f78:	4b09      	ldr	r3, [pc, #36]	; (8007fa0 <vPortSetupTimerInterrupt+0x38>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a09      	ldr	r2, [pc, #36]	; (8007fa4 <vPortSetupTimerInterrupt+0x3c>)
 8007f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f82:	099b      	lsrs	r3, r3, #6
 8007f84:	4a08      	ldr	r2, [pc, #32]	; (8007fa8 <vPortSetupTimerInterrupt+0x40>)
 8007f86:	3b01      	subs	r3, #1
 8007f88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f8a:	4b03      	ldr	r3, [pc, #12]	; (8007f98 <vPortSetupTimerInterrupt+0x30>)
 8007f8c:	2207      	movs	r2, #7
 8007f8e:	601a      	str	r2, [r3, #0]
}
 8007f90:	bf00      	nop
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bc80      	pop	{r7}
 8007f96:	4770      	bx	lr
 8007f98:	e000e010 	.word	0xe000e010
 8007f9c:	e000e018 	.word	0xe000e018
 8007fa0:	20000000 	.word	0x20000000
 8007fa4:	10624dd3 	.word	0x10624dd3
 8007fa8:	e000e014 	.word	0xe000e014

08007fac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007fb2:	f3ef 8305 	mrs	r3, IPSR
 8007fb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2b0f      	cmp	r3, #15
 8007fbc:	d913      	bls.n	8007fe6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007fbe:	4a15      	ldr	r2, [pc, #84]	; (8008014 <vPortValidateInterruptPriority+0x68>)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007fc8:	4b13      	ldr	r3, [pc, #76]	; (8008018 <vPortValidateInterruptPriority+0x6c>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	7afa      	ldrb	r2, [r7, #11]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d209      	bcs.n	8007fe6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8007fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd6:	f383 8811 	msr	BASEPRI, r3
 8007fda:	f3bf 8f6f 	isb	sy
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	607b      	str	r3, [r7, #4]
 8007fe4:	e7fe      	b.n	8007fe4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007fe6:	4b0d      	ldr	r3, [pc, #52]	; (800801c <vPortValidateInterruptPriority+0x70>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007fee:	4b0c      	ldr	r3, [pc, #48]	; (8008020 <vPortValidateInterruptPriority+0x74>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d909      	bls.n	800800a <vPortValidateInterruptPriority+0x5e>
 8007ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffa:	f383 8811 	msr	BASEPRI, r3
 8007ffe:	f3bf 8f6f 	isb	sy
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	603b      	str	r3, [r7, #0]
 8008008:	e7fe      	b.n	8008008 <vPortValidateInterruptPriority+0x5c>
	}
 800800a:	bf00      	nop
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	bc80      	pop	{r7}
 8008012:	4770      	bx	lr
 8008014:	e000e3f0 	.word	0xe000e3f0
 8008018:	20000d90 	.word	0x20000d90
 800801c:	e000ed0c 	.word	0xe000ed0c
 8008020:	20000d94 	.word	0x20000d94

08008024 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b08a      	sub	sp, #40	; 0x28
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800802c:	2300      	movs	r3, #0
 800802e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008030:	f7fe fd32 	bl	8006a98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008034:	4b57      	ldr	r3, [pc, #348]	; (8008194 <pvPortMalloc+0x170>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d101      	bne.n	8008040 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800803c:	f000 f90c 	bl	8008258 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008040:	4b55      	ldr	r3, [pc, #340]	; (8008198 <pvPortMalloc+0x174>)
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4013      	ands	r3, r2
 8008048:	2b00      	cmp	r3, #0
 800804a:	f040 808c 	bne.w	8008166 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d01c      	beq.n	800808e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008054:	2208      	movs	r2, #8
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4413      	add	r3, r2
 800805a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f003 0307 	and.w	r3, r3, #7
 8008062:	2b00      	cmp	r3, #0
 8008064:	d013      	beq.n	800808e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f023 0307 	bic.w	r3, r3, #7
 800806c:	3308      	adds	r3, #8
 800806e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f003 0307 	and.w	r3, r3, #7
 8008076:	2b00      	cmp	r3, #0
 8008078:	d009      	beq.n	800808e <pvPortMalloc+0x6a>
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	617b      	str	r3, [r7, #20]
 800808c:	e7fe      	b.n	800808c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d068      	beq.n	8008166 <pvPortMalloc+0x142>
 8008094:	4b41      	ldr	r3, [pc, #260]	; (800819c <pvPortMalloc+0x178>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	429a      	cmp	r2, r3
 800809c:	d863      	bhi.n	8008166 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800809e:	4b40      	ldr	r3, [pc, #256]	; (80081a0 <pvPortMalloc+0x17c>)
 80080a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80080a2:	4b3f      	ldr	r3, [pc, #252]	; (80081a0 <pvPortMalloc+0x17c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080a8:	e004      	b.n	80080b4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80080aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80080ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d903      	bls.n	80080c6 <pvPortMalloc+0xa2>
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1f1      	bne.n	80080aa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80080c6:	4b33      	ldr	r3, [pc, #204]	; (8008194 <pvPortMalloc+0x170>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d04a      	beq.n	8008166 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2208      	movs	r2, #8
 80080d6:	4413      	add	r3, r2
 80080d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80080da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	6a3b      	ldr	r3, [r7, #32]
 80080e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80080e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	1ad2      	subs	r2, r2, r3
 80080ea:	2308      	movs	r3, #8
 80080ec:	005b      	lsls	r3, r3, #1
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d91e      	bls.n	8008130 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4413      	add	r3, r2
 80080f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	f003 0307 	and.w	r3, r3, #7
 8008100:	2b00      	cmp	r3, #0
 8008102:	d009      	beq.n	8008118 <pvPortMalloc+0xf4>
 8008104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	613b      	str	r3, [r7, #16]
 8008116:	e7fe      	b.n	8008116 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	1ad2      	subs	r2, r2, r3
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800812a:	69b8      	ldr	r0, [r7, #24]
 800812c:	f000 f8f6 	bl	800831c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008130:	4b1a      	ldr	r3, [pc, #104]	; (800819c <pvPortMalloc+0x178>)
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	4a18      	ldr	r2, [pc, #96]	; (800819c <pvPortMalloc+0x178>)
 800813c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800813e:	4b17      	ldr	r3, [pc, #92]	; (800819c <pvPortMalloc+0x178>)
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	4b18      	ldr	r3, [pc, #96]	; (80081a4 <pvPortMalloc+0x180>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	429a      	cmp	r2, r3
 8008148:	d203      	bcs.n	8008152 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800814a:	4b14      	ldr	r3, [pc, #80]	; (800819c <pvPortMalloc+0x178>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a15      	ldr	r2, [pc, #84]	; (80081a4 <pvPortMalloc+0x180>)
 8008150:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	4b10      	ldr	r3, [pc, #64]	; (8008198 <pvPortMalloc+0x174>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	431a      	orrs	r2, r3
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008162:	2200      	movs	r2, #0
 8008164:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008166:	f7fe fca5 	bl	8006ab4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	f003 0307 	and.w	r3, r3, #7
 8008170:	2b00      	cmp	r3, #0
 8008172:	d009      	beq.n	8008188 <pvPortMalloc+0x164>
 8008174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	60fb      	str	r3, [r7, #12]
 8008186:	e7fe      	b.n	8008186 <pvPortMalloc+0x162>
	return pvReturn;
 8008188:	69fb      	ldr	r3, [r7, #28]
}
 800818a:	4618      	mov	r0, r3
 800818c:	3728      	adds	r7, #40	; 0x28
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	200028f8 	.word	0x200028f8
 8008198:	20002904 	.word	0x20002904
 800819c:	200028fc 	.word	0x200028fc
 80081a0:	200028f0 	.word	0x200028f0
 80081a4:	20002900 	.word	0x20002900

080081a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d046      	beq.n	8008248 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80081ba:	2308      	movs	r3, #8
 80081bc:	425b      	negs	r3, r3
 80081be:	697a      	ldr	r2, [r7, #20]
 80081c0:	4413      	add	r3, r2
 80081c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	4b20      	ldr	r3, [pc, #128]	; (8008250 <vPortFree+0xa8>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4013      	ands	r3, r2
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d109      	bne.n	80081ea <vPortFree+0x42>
 80081d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081da:	f383 8811 	msr	BASEPRI, r3
 80081de:	f3bf 8f6f 	isb	sy
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	60fb      	str	r3, [r7, #12]
 80081e8:	e7fe      	b.n	80081e8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d009      	beq.n	8008206 <vPortFree+0x5e>
 80081f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f6:	f383 8811 	msr	BASEPRI, r3
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	60bb      	str	r3, [r7, #8]
 8008204:	e7fe      	b.n	8008204 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	4b11      	ldr	r3, [pc, #68]	; (8008250 <vPortFree+0xa8>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4013      	ands	r3, r2
 8008210:	2b00      	cmp	r3, #0
 8008212:	d019      	beq.n	8008248 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d115      	bne.n	8008248 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	4b0b      	ldr	r3, [pc, #44]	; (8008250 <vPortFree+0xa8>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	43db      	mvns	r3, r3
 8008226:	401a      	ands	r2, r3
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800822c:	f7fe fc34 	bl	8006a98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	685a      	ldr	r2, [r3, #4]
 8008234:	4b07      	ldr	r3, [pc, #28]	; (8008254 <vPortFree+0xac>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4413      	add	r3, r2
 800823a:	4a06      	ldr	r2, [pc, #24]	; (8008254 <vPortFree+0xac>)
 800823c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800823e:	6938      	ldr	r0, [r7, #16]
 8008240:	f000 f86c 	bl	800831c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008244:	f7fe fc36 	bl	8006ab4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008248:	bf00      	nop
 800824a:	3718      	adds	r7, #24
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	20002904 	.word	0x20002904
 8008254:	200028fc 	.word	0x200028fc

08008258 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800825e:	f641 3358 	movw	r3, #7000	; 0x1b58
 8008262:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008264:	4b27      	ldr	r3, [pc, #156]	; (8008304 <prvHeapInit+0xac>)
 8008266:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f003 0307 	and.w	r3, r3, #7
 800826e:	2b00      	cmp	r3, #0
 8008270:	d00c      	beq.n	800828c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	3307      	adds	r3, #7
 8008276:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f023 0307 	bic.w	r3, r3, #7
 800827e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	4a1f      	ldr	r2, [pc, #124]	; (8008304 <prvHeapInit+0xac>)
 8008288:	4413      	add	r3, r2
 800828a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008290:	4a1d      	ldr	r2, [pc, #116]	; (8008308 <prvHeapInit+0xb0>)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008296:	4b1c      	ldr	r3, [pc, #112]	; (8008308 <prvHeapInit+0xb0>)
 8008298:	2200      	movs	r2, #0
 800829a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	4413      	add	r3, r2
 80082a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80082a4:	2208      	movs	r2, #8
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	1a9b      	subs	r3, r3, r2
 80082aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f023 0307 	bic.w	r3, r3, #7
 80082b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	4a15      	ldr	r2, [pc, #84]	; (800830c <prvHeapInit+0xb4>)
 80082b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082ba:	4b14      	ldr	r3, [pc, #80]	; (800830c <prvHeapInit+0xb4>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2200      	movs	r2, #0
 80082c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082c2:	4b12      	ldr	r3, [pc, #72]	; (800830c <prvHeapInit+0xb4>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2200      	movs	r2, #0
 80082c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	1ad2      	subs	r2, r2, r3
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082d8:	4b0c      	ldr	r3, [pc, #48]	; (800830c <prvHeapInit+0xb4>)
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	4a0a      	ldr	r2, [pc, #40]	; (8008310 <prvHeapInit+0xb8>)
 80082e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	4a09      	ldr	r2, [pc, #36]	; (8008314 <prvHeapInit+0xbc>)
 80082ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082f0:	4b09      	ldr	r3, [pc, #36]	; (8008318 <prvHeapInit+0xc0>)
 80082f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082f6:	601a      	str	r2, [r3, #0]
}
 80082f8:	bf00      	nop
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bc80      	pop	{r7}
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop
 8008304:	20000d98 	.word	0x20000d98
 8008308:	200028f0 	.word	0x200028f0
 800830c:	200028f8 	.word	0x200028f8
 8008310:	20002900 	.word	0x20002900
 8008314:	200028fc 	.word	0x200028fc
 8008318:	20002904 	.word	0x20002904

0800831c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008324:	4b27      	ldr	r3, [pc, #156]	; (80083c4 <prvInsertBlockIntoFreeList+0xa8>)
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	e002      	b.n	8008330 <prvInsertBlockIntoFreeList+0x14>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	429a      	cmp	r2, r3
 8008338:	d8f7      	bhi.n	800832a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	4413      	add	r3, r2
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	429a      	cmp	r2, r3
 800834a:	d108      	bne.n	800835e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	441a      	add	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	441a      	add	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	429a      	cmp	r2, r3
 8008370:	d118      	bne.n	80083a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	4b14      	ldr	r3, [pc, #80]	; (80083c8 <prvInsertBlockIntoFreeList+0xac>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	429a      	cmp	r2, r3
 800837c:	d00d      	beq.n	800839a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	685a      	ldr	r2, [r3, #4]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	441a      	add	r2, r3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	601a      	str	r2, [r3, #0]
 8008398:	e008      	b.n	80083ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800839a:	4b0b      	ldr	r3, [pc, #44]	; (80083c8 <prvInsertBlockIntoFreeList+0xac>)
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	601a      	str	r2, [r3, #0]
 80083a2:	e003      	b.n	80083ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d002      	beq.n	80083ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083ba:	bf00      	nop
 80083bc:	3714      	adds	r7, #20
 80083be:	46bd      	mov	sp, r7
 80083c0:	bc80      	pop	{r7}
 80083c2:	4770      	bx	lr
 80083c4:	200028f0 	.word	0x200028f0
 80083c8:	200028f8 	.word	0x200028f8

080083cc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	330c      	adds	r3, #12
 80083dc:	461a      	mov	r2, r3
 80083de:	6839      	ldr	r1, [r7, #0]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f001 fe6f 	bl	800a0c4 <tcpip_send_msg_wait_sem>
 80083e6:	4603      	mov	r3, r0
 80083e8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80083ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d103      	bne.n	80083fa <netconn_apimsg+0x2e>
    return apimsg->err;
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80083f8:	e001      	b.n	80083fe <netconn_apimsg+0x32>
  }
  return err;
 80083fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3710      	adds	r7, #16
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
	...

08008408 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b08a      	sub	sp, #40	; 0x28
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	603a      	str	r2, [r7, #0]
 8008412:	71fb      	strb	r3, [r7, #7]
 8008414:	460b      	mov	r3, r1
 8008416:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008418:	79fb      	ldrb	r3, [r7, #7]
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	4618      	mov	r0, r3
 800841e:	f000 fced 	bl	8008dfc <netconn_alloc>
 8008422:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 8008424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008426:	2b00      	cmp	r3, #0
 8008428:	d054      	beq.n	80084d4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800842a:	79bb      	ldrb	r3, [r7, #6]
 800842c:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008432:	f107 030c 	add.w	r3, r7, #12
 8008436:	4619      	mov	r1, r3
 8008438:	4829      	ldr	r0, [pc, #164]	; (80084e0 <netconn_new_with_proto_and_callback+0xd8>)
 800843a:	f7ff ffc7 	bl	80083cc <netconn_apimsg>
 800843e:	4603      	mov	r3, r0
 8008440:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 8008444:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8008448:	2b00      	cmp	r3, #0
 800844a:	d043      	beq.n	80084d4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d005      	beq.n	8008460 <netconn_new_with_proto_and_callback+0x58>
 8008454:	4b23      	ldr	r3, [pc, #140]	; (80084e4 <netconn_new_with_proto_and_callback+0xdc>)
 8008456:	2289      	movs	r2, #137	; 0x89
 8008458:	4923      	ldr	r1, [pc, #140]	; (80084e8 <netconn_new_with_proto_and_callback+0xe0>)
 800845a:	4824      	ldr	r0, [pc, #144]	; (80084ec <netconn_new_with_proto_and_callback+0xe4>)
 800845c:	f00b fd28 	bl	8013eb0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	3310      	adds	r3, #16
 8008464:	4618      	mov	r0, r3
 8008466:	f00b fbb8 	bl	8013bda <sys_mbox_valid>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d105      	bne.n	800847c <netconn_new_with_proto_and_callback+0x74>
 8008470:	4b1c      	ldr	r3, [pc, #112]	; (80084e4 <netconn_new_with_proto_and_callback+0xdc>)
 8008472:	228a      	movs	r2, #138	; 0x8a
 8008474:	491e      	ldr	r1, [pc, #120]	; (80084f0 <netconn_new_with_proto_and_callback+0xe8>)
 8008476:	481d      	ldr	r0, [pc, #116]	; (80084ec <netconn_new_with_proto_and_callback+0xe4>)
 8008478:	f00b fd1a 	bl	8013eb0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	3314      	adds	r3, #20
 8008480:	4618      	mov	r0, r3
 8008482:	f00b fbaa 	bl	8013bda <sys_mbox_valid>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d005      	beq.n	8008498 <netconn_new_with_proto_and_callback+0x90>
 800848c:	4b15      	ldr	r3, [pc, #84]	; (80084e4 <netconn_new_with_proto_and_callback+0xdc>)
 800848e:	228c      	movs	r2, #140	; 0x8c
 8008490:	4918      	ldr	r1, [pc, #96]	; (80084f4 <netconn_new_with_proto_and_callback+0xec>)
 8008492:	4816      	ldr	r0, [pc, #88]	; (80084ec <netconn_new_with_proto_and_callback+0xe4>)
 8008494:	f00b fd0c 	bl	8013eb0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849a:	330c      	adds	r3, #12
 800849c:	4618      	mov	r0, r3
 800849e:	f00b fc28 	bl	8013cf2 <sys_sem_valid>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d105      	bne.n	80084b4 <netconn_new_with_proto_and_callback+0xac>
 80084a8:	4b0e      	ldr	r3, [pc, #56]	; (80084e4 <netconn_new_with_proto_and_callback+0xdc>)
 80084aa:	228f      	movs	r2, #143	; 0x8f
 80084ac:	4912      	ldr	r1, [pc, #72]	; (80084f8 <netconn_new_with_proto_and_callback+0xf0>)
 80084ae:	480f      	ldr	r0, [pc, #60]	; (80084ec <netconn_new_with_proto_and_callback+0xe4>)
 80084b0:	f00b fcfe 	bl	8013eb0 <iprintf>
      sys_sem_free(&conn->op_completed);
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	330c      	adds	r3, #12
 80084b8:	4618      	mov	r0, r3
 80084ba:	f00b fc0d 	bl	8013cd8 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80084be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c0:	3310      	adds	r3, #16
 80084c2:	4618      	mov	r0, r3
 80084c4:	f00b fb00 	bl	8013ac8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80084c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084ca:	2007      	movs	r0, #7
 80084cc:	f002 fa96 	bl	800a9fc <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80084d0:	2300      	movs	r3, #0
 80084d2:	e000      	b.n	80084d6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3728      	adds	r7, #40	; 0x28
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	08008da5 	.word	0x08008da5
 80084e4:	08014d58 	.word	0x08014d58
 80084e8:	08014d8c 	.word	0x08014d8c
 80084ec:	08014db0 	.word	0x08014db0
 80084f0:	08014dd8 	.word	0x08014dd8
 80084f4:	08014df0 	.word	0x08014df0
 80084f8:	08014e14 	.word	0x08014e14

080084fc <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b088      	sub	sp, #32
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d101      	bne.n	800850e <netconn_delete+0x12>
    return ERR_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	e016      	b.n	800853c <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008512:	2329      	movs	r3, #41	; 0x29
 8008514:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008516:	f107 0308 	add.w	r3, r7, #8
 800851a:	4619      	mov	r1, r3
 800851c:	4809      	ldr	r0, [pc, #36]	; (8008544 <netconn_delete+0x48>)
 800851e:	f7ff ff55 	bl	80083cc <netconn_apimsg>
 8008522:	4603      	mov	r3, r0
 8008524:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008526:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d002      	beq.n	8008534 <netconn_delete+0x38>
    return err;
 800852e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008532:	e003      	b.n	800853c <netconn_delete+0x40>
  }

  netconn_free(conn);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fcd1 	bl	8008edc <netconn_free>

  return ERR_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	3720      	adds	r7, #32
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	08009361 	.word	0x08009361

08008548 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b08a      	sub	sp, #40	; 0x28
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	4613      	mov	r3, r2
 8008554:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d109      	bne.n	8008570 <netconn_connect+0x28>
 800855c:	4b11      	ldr	r3, [pc, #68]	; (80085a4 <netconn_connect+0x5c>)
 800855e:	f240 122b 	movw	r2, #299	; 0x12b
 8008562:	4911      	ldr	r1, [pc, #68]	; (80085a8 <netconn_connect+0x60>)
 8008564:	4811      	ldr	r0, [pc, #68]	; (80085ac <netconn_connect+0x64>)
 8008566:	f00b fca3 	bl	8013eb0 <iprintf>
 800856a:	f06f 030f 	mvn.w	r3, #15
 800856e:	e015      	b.n	800859c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8008576:	4b0e      	ldr	r3, [pc, #56]	; (80085b0 <netconn_connect+0x68>)
 8008578:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008582:	88fb      	ldrh	r3, [r7, #6]
 8008584:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8008586:	f107 0310 	add.w	r3, r7, #16
 800858a:	4619      	mov	r1, r3
 800858c:	4809      	ldr	r0, [pc, #36]	; (80085b4 <netconn_connect+0x6c>)
 800858e:	f7ff ff1d 	bl	80083cc <netconn_apimsg>
 8008592:	4603      	mov	r3, r0
 8008594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 8008598:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800859c:	4618      	mov	r0, r3
 800859e:	3728      	adds	r7, #40	; 0x28
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	08014d58 	.word	0x08014d58
 80085a8:	08014eac 	.word	0x08014eac
 80085ac:	08014db0 	.word	0x08014db0
 80085b0:	080173d4 	.word	0x080173d4
 80085b4:	080096a9 	.word	0x080096a9

080085b8 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b08a      	sub	sp, #40	; 0x28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
 80085c4:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d109      	bne.n	80085e0 <netconn_write_partly+0x28>
 80085cc:	4b31      	ldr	r3, [pc, #196]	; (8008694 <netconn_write_partly+0xdc>)
 80085ce:	f240 22e6 	movw	r2, #742	; 0x2e6
 80085d2:	4931      	ldr	r1, [pc, #196]	; (8008698 <netconn_write_partly+0xe0>)
 80085d4:	4831      	ldr	r0, [pc, #196]	; (800869c <netconn_write_partly+0xe4>)
 80085d6:	f00b fc6b 	bl	8013eb0 <iprintf>
 80085da:	f06f 030f 	mvn.w	r3, #15
 80085de:	e054      	b.n	800868a <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085e8:	2b10      	cmp	r3, #16
 80085ea:	d009      	beq.n	8008600 <netconn_write_partly+0x48>
 80085ec:	4b29      	ldr	r3, [pc, #164]	; (8008694 <netconn_write_partly+0xdc>)
 80085ee:	f240 22e7 	movw	r2, #743	; 0x2e7
 80085f2:	492b      	ldr	r1, [pc, #172]	; (80086a0 <netconn_write_partly+0xe8>)
 80085f4:	4829      	ldr	r0, [pc, #164]	; (800869c <netconn_write_partly+0xe4>)
 80085f6:	f00b fc5b 	bl	8013eb0 <iprintf>
 80085fa:	f06f 0305 	mvn.w	r3, #5
 80085fe:	e044      	b.n	800868a <netconn_write_partly+0xd2>
  if (size == 0) {
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d101      	bne.n	800860a <netconn_write_partly+0x52>
    return ERR_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	e03f      	b.n	800868a <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	7f1b      	ldrb	r3, [r3, #28]
 800860e:	f003 0302 	and.w	r3, r3, #2
 8008612:	2b00      	cmp	r3, #0
 8008614:	d104      	bne.n	8008620 <netconn_write_partly+0x68>
 8008616:	78fb      	ldrb	r3, [r7, #3]
 8008618:	f003 0304 	and.w	r3, r3, #4
 800861c:	2b00      	cmp	r3, #0
 800861e:	d001      	beq.n	8008624 <netconn_write_partly+0x6c>
 8008620:	2301      	movs	r3, #1
 8008622:	e000      	b.n	8008626 <netconn_write_partly+0x6e>
 8008624:	2300      	movs	r3, #0
 8008626:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800862a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800862e:	2b00      	cmp	r3, #0
 8008630:	d005      	beq.n	800863e <netconn_write_partly+0x86>
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	2b00      	cmp	r3, #0
 8008636:	d102      	bne.n	800863e <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008638:	f06f 0305 	mvn.w	r3, #5
 800863c:	e025      	b.n	800868a <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008646:	78fb      	ldrb	r3, [r7, #3]
 8008648:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008650:	f107 0310 	add.w	r3, r7, #16
 8008654:	4619      	mov	r1, r3
 8008656:	4813      	ldr	r0, [pc, #76]	; (80086a4 <netconn_write_partly+0xec>)
 8008658:	f7ff feb8 	bl	80083cc <netconn_apimsg>
 800865c:	4603      	mov	r3, r0
 800865e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 8008662:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10d      	bne.n	8008686 <netconn_write_partly+0xce>
 800866a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00a      	beq.n	8008686 <netconn_write_partly+0xce>
    if (dontblock) {
 8008670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008674:	2b00      	cmp	r3, #0
 8008676:	d003      	beq.n	8008680 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 8008678:	69fa      	ldr	r2, [r7, #28]
 800867a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867c:	601a      	str	r2, [r3, #0]
 800867e:	e002      	b.n	8008686 <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 8008680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008686:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800868a:	4618      	mov	r0, r3
 800868c:	3728      	adds	r7, #40	; 0x28
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	08014d58 	.word	0x08014d58
 8008698:	08014fe0 	.word	0x08014fe0
 800869c:	08014db0 	.word	0x08014db0
 80086a0:	08014ffc 	.word	0x08014ffc
 80086a4:	08009ba9 	.word	0x08009ba9

080086a8 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b088      	sub	sp, #32
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	460b      	mov	r3, r1
 80086b2:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d109      	bne.n	80086ce <netconn_close_shutdown+0x26>
 80086ba:	4b0f      	ldr	r3, [pc, #60]	; (80086f8 <netconn_close_shutdown+0x50>)
 80086bc:	f44f 724a 	mov.w	r2, #808	; 0x328
 80086c0:	490e      	ldr	r1, [pc, #56]	; (80086fc <netconn_close_shutdown+0x54>)
 80086c2:	480f      	ldr	r0, [pc, #60]	; (8008700 <netconn_close_shutdown+0x58>)
 80086c4:	f00b fbf4 	bl	8013eb0 <iprintf>
 80086c8:	f06f 030f 	mvn.w	r3, #15
 80086cc:	e00f      	b.n	80086ee <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80086d2:	78fb      	ldrb	r3, [r7, #3]
 80086d4:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80086d6:	2329      	movs	r3, #41	; 0x29
 80086d8:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80086da:	f107 0308 	add.w	r3, r7, #8
 80086de:	4619      	mov	r1, r3
 80086e0:	4808      	ldr	r0, [pc, #32]	; (8008704 <netconn_close_shutdown+0x5c>)
 80086e2:	f7ff fe73 	bl	80083cc <netconn_apimsg>
 80086e6:	4603      	mov	r3, r0
 80086e8:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 80086ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3720      	adds	r7, #32
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	08014d58 	.word	0x08014d58
 80086fc:	08015020 	.word	0x08015020
 8008700:	08014db0 	.word	0x08014db0
 8008704:	08009d09 	.word	0x08009d09

08008708 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008710:	2103      	movs	r1, #3
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f7ff ffc8 	bl	80086a8 <netconn_close_shutdown>
 8008718:	4603      	mov	r3, r0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
	...

08008724 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b088      	sub	sp, #32
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
 8008730:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d105      	bne.n	8008744 <recv_udp+0x20>
 8008738:	4b34      	ldr	r3, [pc, #208]	; (800880c <recv_udp+0xe8>)
 800873a:	22b1      	movs	r2, #177	; 0xb1
 800873c:	4934      	ldr	r1, [pc, #208]	; (8008810 <recv_udp+0xec>)
 800873e:	4835      	ldr	r0, [pc, #212]	; (8008814 <recv_udp+0xf0>)
 8008740:	f00b fbb6 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d105      	bne.n	8008756 <recv_udp+0x32>
 800874a:	4b30      	ldr	r3, [pc, #192]	; (800880c <recv_udp+0xe8>)
 800874c:	22b2      	movs	r2, #178	; 0xb2
 800874e:	4932      	ldr	r1, [pc, #200]	; (8008818 <recv_udp+0xf4>)
 8008750:	4830      	ldr	r0, [pc, #192]	; (8008814 <recv_udp+0xf0>)
 8008752:	f00b fbad 	bl	8013eb0 <iprintf>
  conn = (struct netconn *)arg;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800875a:	69fb      	ldr	r3, [r7, #28]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d103      	bne.n	8008768 <recv_udp+0x44>
    pbuf_free(p);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f002 feff 	bl	800b564 <pbuf_free>
    return;
 8008766:	e04d      	b.n	8008804 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	68ba      	ldr	r2, [r7, #8]
 800876e:	429a      	cmp	r2, r3
 8008770:	d005      	beq.n	800877e <recv_udp+0x5a>
 8008772:	4b26      	ldr	r3, [pc, #152]	; (800880c <recv_udp+0xe8>)
 8008774:	22ba      	movs	r2, #186	; 0xba
 8008776:	4929      	ldr	r1, [pc, #164]	; (800881c <recv_udp+0xf8>)
 8008778:	4826      	ldr	r0, [pc, #152]	; (8008814 <recv_udp+0xf0>)
 800877a:	f00b fb99 	bl	8013eb0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	3310      	adds	r3, #16
 8008782:	4618      	mov	r0, r3
 8008784:	f00b fa29 	bl	8013bda <sys_mbox_valid>
 8008788:	4603      	mov	r3, r0
 800878a:	2b00      	cmp	r3, #0
 800878c:	d103      	bne.n	8008796 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f002 fee8 	bl	800b564 <pbuf_free>
    return;
 8008794:	e036      	b.n	8008804 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008796:	2006      	movs	r0, #6
 8008798:	f002 f8de 	bl	800a958 <memp_malloc>
 800879c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d103      	bne.n	80087ac <recv_udp+0x88>
    pbuf_free(p);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f002 fedd 	bl	800b564 <pbuf_free>
    return;
 80087aa:	e02b      	b.n	8008804 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <recv_udp+0xa0>
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	e000      	b.n	80087c6 <recv_udp+0xa2>
 80087c4:	2300      	movs	r3, #0
 80087c6:	69ba      	ldr	r2, [r7, #24]
 80087c8:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80087ce:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	891b      	ldrh	r3, [r3, #8]
 80087d4:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	3310      	adds	r3, #16
 80087da:	69b9      	ldr	r1, [r7, #24]
 80087dc:	4618      	mov	r0, r3
 80087de:	f00b f99a 	bl	8013b16 <sys_mbox_trypost>
 80087e2:	4603      	mov	r3, r0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d003      	beq.n	80087f0 <recv_udp+0xcc>
    netbuf_delete(buf);
 80087e8:	69b8      	ldr	r0, [r7, #24]
 80087ea:	f001 fb35 	bl	8009e58 <netbuf_delete>
    return;
 80087ee:	e009      	b.n	8008804 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80087f0:	69fb      	ldr	r3, [r7, #28]
 80087f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d005      	beq.n	8008804 <recv_udp+0xe0>
 80087f8:	69fb      	ldr	r3, [r7, #28]
 80087fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fc:	8afa      	ldrh	r2, [r7, #22]
 80087fe:	2100      	movs	r1, #0
 8008800:	69f8      	ldr	r0, [r7, #28]
 8008802:	4798      	blx	r3
  }
}
 8008804:	3720      	adds	r7, #32
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	0801503c 	.word	0x0801503c
 8008810:	08015070 	.word	0x08015070
 8008814:	08015094 	.word	0x08015094
 8008818:	080150bc 	.word	0x080150bc
 800881c:	080150dc 	.word	0x080150dc

08008820 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b088      	sub	sp, #32
 8008824:	af00      	add	r7, sp, #0
 8008826:	60f8      	str	r0, [r7, #12]
 8008828:	60b9      	str	r1, [r7, #8]
 800882a:	607a      	str	r2, [r7, #4]
 800882c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d105      	bne.n	8008840 <recv_tcp+0x20>
 8008834:	4b39      	ldr	r3, [pc, #228]	; (800891c <recv_tcp+0xfc>)
 8008836:	22f9      	movs	r2, #249	; 0xf9
 8008838:	4939      	ldr	r1, [pc, #228]	; (8008920 <recv_tcp+0x100>)
 800883a:	483a      	ldr	r0, [pc, #232]	; (8008924 <recv_tcp+0x104>)
 800883c:	f00b fb38 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d105      	bne.n	8008852 <recv_tcp+0x32>
 8008846:	4b35      	ldr	r3, [pc, #212]	; (800891c <recv_tcp+0xfc>)
 8008848:	22fa      	movs	r2, #250	; 0xfa
 800884a:	4937      	ldr	r1, [pc, #220]	; (8008928 <recv_tcp+0x108>)
 800884c:	4835      	ldr	r0, [pc, #212]	; (8008924 <recv_tcp+0x104>)
 800884e:	f00b fb2f 	bl	8013eb0 <iprintf>
  conn = (struct netconn *)arg;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d102      	bne.n	8008862 <recv_tcp+0x42>
    return ERR_VAL;
 800885c:	f06f 0305 	mvn.w	r3, #5
 8008860:	e057      	b.n	8008912 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	68ba      	ldr	r2, [r7, #8]
 8008868:	429a      	cmp	r2, r3
 800886a:	d006      	beq.n	800887a <recv_tcp+0x5a>
 800886c:	4b2b      	ldr	r3, [pc, #172]	; (800891c <recv_tcp+0xfc>)
 800886e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008872:	492e      	ldr	r1, [pc, #184]	; (800892c <recv_tcp+0x10c>)
 8008874:	482b      	ldr	r0, [pc, #172]	; (8008924 <recv_tcp+0x104>)
 8008876:	f00b fb1b 	bl	8013eb0 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	3310      	adds	r3, #16
 800887e:	4618      	mov	r0, r3
 8008880:	f00b f9ab 	bl	8013bda <sys_mbox_valid>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10d      	bne.n	80088a6 <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d008      	beq.n	80088a2 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	891b      	ldrh	r3, [r3, #8]
 8008894:	4619      	mov	r1, r3
 8008896:	68b8      	ldr	r0, [r7, #8]
 8008898:	f003 fc00 	bl	800c09c <tcp_recved>
      pbuf_free(p);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f002 fe61 	bl	800b564 <pbuf_free>
    }
    return ERR_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	e035      	b.n	8008912 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 80088a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d011      	beq.n	80088d2 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00e      	beq.n	80088d2 <recv_tcp+0xb2>
 80088b4:	f00b fa98 	bl	8013de8 <sys_arch_protect>
 80088b8:	6178      	str	r0, [r7, #20]
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80088c0:	f113 0f0c 	cmn.w	r3, #12
 80088c4:	db02      	blt.n	80088cc <recv_tcp+0xac>
 80088c6:	69bb      	ldr	r3, [r7, #24]
 80088c8:	78fa      	ldrb	r2, [r7, #3]
 80088ca:	721a      	strb	r2, [r3, #8]
 80088cc:	6978      	ldr	r0, [r7, #20]
 80088ce:	f00b fa99 	bl	8013e04 <sys_arch_unprotect>
  }

  if (p != NULL) {
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <recv_tcp+0xc0>
    len = p->tot_len;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	891b      	ldrh	r3, [r3, #8]
 80088dc:	83fb      	strh	r3, [r7, #30]
 80088de:	e001      	b.n	80088e4 <recv_tcp+0xc4>
  } else {
    len = 0;
 80088e0:	2300      	movs	r3, #0
 80088e2:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 80088e4:	69bb      	ldr	r3, [r7, #24]
 80088e6:	3310      	adds	r3, #16
 80088e8:	6879      	ldr	r1, [r7, #4]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f00b f913 	bl	8013b16 <sys_mbox_trypost>
 80088f0:	4603      	mov	r3, r0
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80088f6:	f04f 33ff 	mov.w	r3, #4294967295
 80088fa:	e00a      	b.n	8008912 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <recv_tcp+0xf0>
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008908:	8bfa      	ldrh	r2, [r7, #30]
 800890a:	2100      	movs	r1, #0
 800890c:	69b8      	ldr	r0, [r7, #24]
 800890e:	4798      	blx	r3
  }

  return ERR_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3720      	adds	r7, #32
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
 800891a:	bf00      	nop
 800891c:	0801503c 	.word	0x0801503c
 8008920:	080150fc 	.word	0x080150fc
 8008924:	08015094 	.word	0x08015094
 8008928:	08015120 	.word	0x08015120
 800892c:	08015140 	.word	0x08015140

08008930 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d106      	bne.n	8008952 <poll_tcp+0x22>
 8008944:	4b29      	ldr	r3, [pc, #164]	; (80089ec <poll_tcp+0xbc>)
 8008946:	f44f 729c 	mov.w	r2, #312	; 0x138
 800894a:	4929      	ldr	r1, [pc, #164]	; (80089f0 <poll_tcp+0xc0>)
 800894c:	4829      	ldr	r0, [pc, #164]	; (80089f4 <poll_tcp+0xc4>)
 800894e:	f00b faaf 	bl	8013eb0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	785b      	ldrb	r3, [r3, #1]
 8008956:	2b01      	cmp	r3, #1
 8008958:	d104      	bne.n	8008964 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800895a:	2101      	movs	r1, #1
 800895c:	68f8      	ldr	r0, [r7, #12]
 800895e:	f000 ff7f 	bl	8009860 <lwip_netconn_do_writemore>
 8008962:	e016      	b.n	8008992 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	785b      	ldrb	r3, [r3, #1]
 8008968:	2b04      	cmp	r3, #4
 800896a:	d112      	bne.n	8008992 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00a      	beq.n	800898a <poll_tcp+0x5a>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008978:	7a5b      	ldrb	r3, [r3, #9]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d005      	beq.n	800898a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008982:	7a5a      	ldrb	r2, [r3, #9]
 8008984:	3a01      	subs	r2, #1
 8008986:	b2d2      	uxtb	r2, r2
 8008988:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800898a:	2101      	movs	r1, #1
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f000 fb6f 	bl	8009070 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	7f1b      	ldrb	r3, [r3, #28]
 8008996:	f003 0310 	and.w	r3, r3, #16
 800899a:	2b00      	cmp	r3, #0
 800899c:	d021      	beq.n	80089e2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d01d      	beq.n	80089e2 <poll_tcp+0xb2>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089ae:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80089b2:	d316      	bcc.n	80089e2 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80089bc:	2b04      	cmp	r3, #4
 80089be:	d810      	bhi.n	80089e2 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	7f1b      	ldrb	r3, [r3, #28]
 80089c4:	f023 0310 	bic.w	r3, r3, #16
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d005      	beq.n	80089e2 <poll_tcp+0xb2>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089da:	2200      	movs	r2, #0
 80089dc:	2102      	movs	r1, #2
 80089de:	68f8      	ldr	r0, [r7, #12]
 80089e0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3710      	adds	r7, #16
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}
 80089ec:	0801503c 	.word	0x0801503c
 80089f0:	08015160 	.word	0x08015160
 80089f4:	08015094 	.word	0x08015094

080089f8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b086      	sub	sp, #24
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	60f8      	str	r0, [r7, #12]
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	4613      	mov	r3, r2
 8008a04:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d106      	bne.n	8008a1e <sent_tcp+0x26>
 8008a10:	4b20      	ldr	r3, [pc, #128]	; (8008a94 <sent_tcp+0x9c>)
 8008a12:	f240 1261 	movw	r2, #353	; 0x161
 8008a16:	4920      	ldr	r1, [pc, #128]	; (8008a98 <sent_tcp+0xa0>)
 8008a18:	4820      	ldr	r0, [pc, #128]	; (8008a9c <sent_tcp+0xa4>)
 8008a1a:	f00b fa49 	bl	8013eb0 <iprintf>

  if (conn) {
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d032      	beq.n	8008a8a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	785b      	ldrb	r3, [r3, #1]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d104      	bne.n	8008a36 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	6978      	ldr	r0, [r7, #20]
 8008a30:	f000 ff16 	bl	8009860 <lwip_netconn_do_writemore>
 8008a34:	e007      	b.n	8008a46 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	785b      	ldrb	r3, [r3, #1]
 8008a3a:	2b04      	cmp	r3, #4
 8008a3c:	d103      	bne.n	8008a46 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008a3e:	2101      	movs	r1, #1
 8008a40:	6978      	ldr	r0, [r7, #20]
 8008a42:	f000 fb15 	bl	8009070 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d01d      	beq.n	8008a8a <sent_tcp+0x92>
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a56:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8008a5a:	d316      	bcc.n	8008a8a <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008a64:	2b04      	cmp	r3, #4
 8008a66:	d810      	bhi.n	8008a8a <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	7f1b      	ldrb	r3, [r3, #28]
 8008a6c:	f023 0310 	bic.w	r3, r3, #16
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d005      	beq.n	8008a8a <sent_tcp+0x92>
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a82:	88fa      	ldrh	r2, [r7, #6]
 8008a84:	2102      	movs	r1, #2
 8008a86:	6978      	ldr	r0, [r7, #20]
 8008a88:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	0801503c 	.word	0x0801503c
 8008a98:	08015160 	.word	0x08015160
 8008a9c:	08015094 	.word	0x08015094

08008aa0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b08a      	sub	sp, #40	; 0x28
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d106      	bne.n	8008ac4 <err_tcp+0x24>
 8008ab6:	4b6c      	ldr	r3, [pc, #432]	; (8008c68 <err_tcp+0x1c8>)
 8008ab8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8008abc:	496b      	ldr	r1, [pc, #428]	; (8008c6c <err_tcp+0x1cc>)
 8008abe:	486c      	ldr	r0, [pc, #432]	; (8008c70 <err_tcp+0x1d0>)
 8008ac0:	f00b f9f6 	bl	8013eb0 <iprintf>

  conn->pcb.tcp = NULL;
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	785b      	ldrb	r3, [r3, #1]
 8008ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 8008ad8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008adc:	2b04      	cmp	r3, #4
 8008ade:	d114      	bne.n	8008b0a <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d018      	beq.n	8008b1c <err_tcp+0x7c>
 8008aea:	f00b f97d 	bl	8013de8 <sys_arch_protect>
 8008aee:	61b8      	str	r0, [r7, #24]
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008af6:	f113 0f0c 	cmn.w	r3, #12
 8008afa:	db02      	blt.n	8008b02 <err_tcp+0x62>
 8008afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afe:	2200      	movs	r2, #0
 8008b00:	721a      	strb	r2, [r3, #8]
 8008b02:	69b8      	ldr	r0, [r7, #24]
 8008b04:	f00b f97e 	bl	8013e04 <sys_arch_unprotect>
 8008b08:	e008      	b.n	8008b1c <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 8008b0a:	f00b f96d 	bl	8013de8 <sys_arch_protect>
 8008b0e:	61f8      	str	r0, [r7, #28]
 8008b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b12:	78fa      	ldrb	r2, [r7, #3]
 8008b14:	721a      	strb	r2, [r3, #8]
 8008b16:	69f8      	ldr	r0, [r7, #28]
 8008b18:	f00b f974 	bl	8013e04 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d005      	beq.n	8008b30 <err_tcp+0x90>
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b28:	2200      	movs	r2, #0
 8008b2a:	2104      	movs	r1, #4
 8008b2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b2e:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d005      	beq.n	8008b44 <err_tcp+0xa4>
 8008b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2100      	movs	r1, #0
 8008b40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b42:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d005      	beq.n	8008b58 <err_tcp+0xb8>
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b50:	2200      	movs	r2, #0
 8008b52:	2102      	movs	r1, #2
 8008b54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b56:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	3310      	adds	r3, #16
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f00b f83c 	bl	8013bda <sys_mbox_valid>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d005      	beq.n	8008b74 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6a:	3310      	adds	r3, #16
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f00a ffd1 	bl	8013b16 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	3314      	adds	r3, #20
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f00b f82e 	bl	8013bda <sys_mbox_valid>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d005      	beq.n	8008b90 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 8008b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b86:	3314      	adds	r3, #20
 8008b88:	2100      	movs	r1, #0
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f00a ffc3 	bl	8013b16 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8008b90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d007      	beq.n	8008ba8 <err_tcp+0x108>
 8008b98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b9c:	2b04      	cmp	r3, #4
 8008b9e:	d003      	beq.n	8008ba8 <err_tcp+0x108>
 8008ba0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	d14d      	bne.n	8008c44 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	7f1b      	ldrb	r3, [r3, #28]
 8008bac:	f003 0304 	and.w	r3, r3, #4
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	bf14      	ite	ne
 8008bb4:	2301      	movne	r3, #1
 8008bb6:	2300      	moveq	r3, #0
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	7f1b      	ldrb	r3, [r3, #28]
 8008bc0:	f023 0304 	bic.w	r3, r3, #4
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d145      	bne.n	8008c5c <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d106      	bne.n	8008be6 <err_tcp+0x146>
 8008bd8:	4b23      	ldr	r3, [pc, #140]	; (8008c68 <err_tcp+0x1c8>)
 8008bda:	f240 12b3 	movw	r2, #435	; 0x1b3
 8008bde:	4925      	ldr	r1, [pc, #148]	; (8008c74 <err_tcp+0x1d4>)
 8008be0:	4823      	ldr	r0, [pc, #140]	; (8008c70 <err_tcp+0x1d0>)
 8008be2:	f00b f965 	bl	8013eb0 <iprintf>
      conn->current_msg->err = err;
 8008be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bea:	78fa      	ldrb	r2, [r7, #3]
 8008bec:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	330c      	adds	r3, #12
 8008bf6:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8008bf8:	6938      	ldr	r0, [r7, #16]
 8008bfa:	f00b f87a 	bl	8013cf2 <sys_sem_valid>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d106      	bne.n	8008c12 <err_tcp+0x172>
 8008c04:	4b18      	ldr	r3, [pc, #96]	; (8008c68 <err_tcp+0x1c8>)
 8008c06:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8008c0a:	491b      	ldr	r1, [pc, #108]	; (8008c78 <err_tcp+0x1d8>)
 8008c0c:	4818      	ldr	r0, [pc, #96]	; (8008c70 <err_tcp+0x1d0>)
 8008c0e:	f00b f94f 	bl	8013eb0 <iprintf>
      conn->current_msg = NULL;
 8008c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c14:	2200      	movs	r2, #0
 8008c16:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 8008c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00e      	beq.n	8008c3c <err_tcp+0x19c>
 8008c1e:	f00b f8e3 	bl	8013de8 <sys_arch_protect>
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c26:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008c2a:	f113 0f0c 	cmn.w	r3, #12
 8008c2e:	db02      	blt.n	8008c36 <err_tcp+0x196>
 8008c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c32:	78fa      	ldrb	r2, [r7, #3]
 8008c34:	721a      	strb	r2, [r3, #8]
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f00b f8e4 	bl	8013e04 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 8008c3c:	6938      	ldr	r0, [r7, #16]
 8008c3e:	f00b f83e 	bl	8013cbe <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008c42:	e00b      	b.n	8008c5c <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d008      	beq.n	8008c5e <err_tcp+0x1be>
 8008c4c:	4b06      	ldr	r3, [pc, #24]	; (8008c68 <err_tcp+0x1c8>)
 8008c4e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008c52:	490a      	ldr	r1, [pc, #40]	; (8008c7c <err_tcp+0x1dc>)
 8008c54:	4806      	ldr	r0, [pc, #24]	; (8008c70 <err_tcp+0x1d0>)
 8008c56:	f00b f92b 	bl	8013eb0 <iprintf>
  }
}
 8008c5a:	e000      	b.n	8008c5e <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 8008c5c:	bf00      	nop
}
 8008c5e:	bf00      	nop
 8008c60:	3728      	adds	r7, #40	; 0x28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}
 8008c66:	bf00      	nop
 8008c68:	0801503c 	.word	0x0801503c
 8008c6c:	08015160 	.word	0x08015160
 8008c70:	08015094 	.word	0x08015094
 8008c74:	08015170 	.word	0x08015170
 8008c78:	0801518c 	.word	0x0801518c
 8008c7c:	080151a8 	.word	0x080151a8

08008c80 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8008c8e:	6879      	ldr	r1, [r7, #4]
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f004 f8d9 	bl	800ce48 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008c96:	490a      	ldr	r1, [pc, #40]	; (8008cc0 <setup_tcp+0x40>)
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f004 f8e5 	bl	800ce68 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8008c9e:	4909      	ldr	r1, [pc, #36]	; (8008cc4 <setup_tcp+0x44>)
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f004 f903 	bl	800ceac <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	4907      	ldr	r1, [pc, #28]	; (8008cc8 <setup_tcp+0x48>)
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f004 f956 	bl	800cf5c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8008cb0:	4906      	ldr	r1, [pc, #24]	; (8008ccc <setup_tcp+0x4c>)
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f004 f91a 	bl	800ceec <tcp_err>
}
 8008cb8:	bf00      	nop
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	08008821 	.word	0x08008821
 8008cc4:	080089f9 	.word	0x080089f9
 8008cc8:	08008931 	.word	0x08008931
 8008ccc:	08008aa1 	.word	0x08008aa1

08008cd0 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008cd0:	b590      	push	{r4, r7, lr}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d006      	beq.n	8008cf4 <pcb_new+0x24>
 8008ce6:	4b2b      	ldr	r3, [pc, #172]	; (8008d94 <pcb_new+0xc4>)
 8008ce8:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8008cec:	492a      	ldr	r1, [pc, #168]	; (8008d98 <pcb_new+0xc8>)
 8008cee:	482b      	ldr	r0, [pc, #172]	; (8008d9c <pcb_new+0xcc>)
 8008cf0:	f00b f8de 	bl	8013eb0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cfe:	2b10      	cmp	r3, #16
 8008d00:	d022      	beq.n	8008d48 <pcb_new+0x78>
 8008d02:	2b20      	cmp	r3, #32
 8008d04:	d133      	bne.n	8008d6e <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681c      	ldr	r4, [r3, #0]
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f008 fc80 	bl	8011612 <udp_new_ip_type>
 8008d12:	4603      	mov	r3, r0
 8008d14:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d02a      	beq.n	8008d76 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	2b22      	cmp	r3, #34	; 0x22
 8008d28:	d104      	bne.n	8008d34 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	2201      	movs	r2, #1
 8008d32:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6858      	ldr	r0, [r3, #4]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	4917      	ldr	r1, [pc, #92]	; (8008da0 <pcb_new+0xd0>)
 8008d42:	f008 fc0b 	bl	801155c <udp_recv>
    }
    break;
 8008d46:	e016      	b.n	8008d76 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681c      	ldr	r4, [r3, #0]
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f004 f86c 	bl	800ce2c <tcp_new_ip_type>
 8008d54:	4603      	mov	r3, r0
 8008d56:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00b      	beq.n	8008d7a <pcb_new+0xaa>
      setup_tcp(msg->conn);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7ff ff8a 	bl	8008c80 <setup_tcp>
    }
    break;
 8008d6c:	e005      	b.n	8008d7a <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	22fa      	movs	r2, #250	; 0xfa
 8008d72:	711a      	strb	r2, [r3, #4]
    return;
 8008d74:	e00a      	b.n	8008d8c <pcb_new+0xbc>
    break;
 8008d76:	bf00      	nop
 8008d78:	e000      	b.n	8008d7c <pcb_new+0xac>
    break;
 8008d7a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d102      	bne.n	8008d8c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	22ff      	movs	r2, #255	; 0xff
 8008d8a:	711a      	strb	r2, [r3, #4]
  }
}
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd90      	pop	{r4, r7, pc}
 8008d92:	bf00      	nop
 8008d94:	0801503c 	.word	0x0801503c
 8008d98:	080151c4 	.word	0x080151c4
 8008d9c:	08015094 	.word	0x08015094
 8008da0:	08008725 	.word	0x08008725

08008da4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d102      	bne.n	8008dc6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f7ff ff85 	bl	8008cd0 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d012      	beq.n	8008df4 <lwip_netconn_do_newconn+0x50>
 8008dce:	f00b f80b 	bl	8013de8 <sys_arch_protect>
 8008dd2:	60b8      	str	r0, [r7, #8]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008ddc:	f113 0f0c 	cmn.w	r3, #12
 8008de0:	db05      	blt.n	8008dee <lwip_netconn_do_newconn+0x4a>
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	68fa      	ldr	r2, [r7, #12]
 8008de8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008dec:	721a      	strb	r2, [r3, #8]
 8008dee:	68b8      	ldr	r0, [r7, #8]
 8008df0:	f00b f808 	bl	8013e04 <sys_arch_unprotect>
}
 8008df4:	bf00      	nop
 8008df6:	3710      	adds	r7, #16
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	4603      	mov	r3, r0
 8008e04:	6039      	str	r1, [r7, #0]
 8008e06:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008e08:	2007      	movs	r0, #7
 8008e0a:	f001 fda5 	bl	800a958 <memp_malloc>
 8008e0e:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <netconn_alloc+0x1e>
    return NULL;
 8008e16:	2300      	movs	r3, #0
 8008e18:	e055      	b.n	8008ec6 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	79fa      	ldrb	r2, [r7, #7]
 8008e24:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 8008e2c:	79fb      	ldrb	r3, [r7, #7]
 8008e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e32:	2b10      	cmp	r3, #16
 8008e34:	d004      	beq.n	8008e40 <netconn_alloc+0x44>
 8008e36:	2b20      	cmp	r3, #32
 8008e38:	d105      	bne.n	8008e46 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 8008e3a:	2306      	movs	r3, #6
 8008e3c:	60fb      	str	r3, [r7, #12]
    break;
 8008e3e:	e00a      	b.n	8008e56 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008e40:	2306      	movs	r3, #6
 8008e42:	60fb      	str	r3, [r7, #12]
    break;
 8008e44:	e007      	b.n	8008e56 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008e46:	4b22      	ldr	r3, [pc, #136]	; (8008ed0 <netconn_alloc+0xd4>)
 8008e48:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8008e4c:	4921      	ldr	r1, [pc, #132]	; (8008ed4 <netconn_alloc+0xd8>)
 8008e4e:	4822      	ldr	r0, [pc, #136]	; (8008ed8 <netconn_alloc+0xdc>)
 8008e50:	f00b f82e 	bl	8013eb0 <iprintf>
    goto free_and_return;
 8008e54:	e032      	b.n	8008ebc <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	3310      	adds	r3, #16
 8008e5a:	68f9      	ldr	r1, [r7, #12]
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f00a fe19 	bl	8013a94 <sys_mbox_new>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d128      	bne.n	8008eba <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	330c      	adds	r3, #12
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f00a fecf 	bl	8013c12 <sys_sem_new>
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d005      	beq.n	8008e86 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	3310      	adds	r3, #16
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f00a fe22 	bl	8013ac8 <sys_mbox_free>
    goto free_and_return;
 8008e84:	e01a      	b.n	8008ebc <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	3314      	adds	r3, #20
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f00a feb5 	bl	8013bfa <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	2200      	movs	r2, #0
 8008e94:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	f04f 32ff 	mov.w	r2, #4294967295
 8008e9c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	683a      	ldr	r2, [r7, #0]
 8008ea2:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2200      	movs	r2, #0
 8008eae:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	771a      	strb	r2, [r3, #28]
  return conn;
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	e005      	b.n	8008ec6 <netconn_alloc+0xca>
    goto free_and_return;
 8008eba:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8008ebc:	68b9      	ldr	r1, [r7, #8]
 8008ebe:	2007      	movs	r0, #7
 8008ec0:	f001 fd9c 	bl	800a9fc <memp_free>
  return NULL;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3710      	adds	r7, #16
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	0801503c 	.word	0x0801503c
 8008ed4:	080151e4 	.word	0x080151e4
 8008ed8:	08015094 	.word	0x08015094

08008edc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d006      	beq.n	8008efa <netconn_free+0x1e>
 8008eec:	4b1b      	ldr	r3, [pc, #108]	; (8008f5c <netconn_free+0x80>)
 8008eee:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8008ef2:	491b      	ldr	r1, [pc, #108]	; (8008f60 <netconn_free+0x84>)
 8008ef4:	481b      	ldr	r0, [pc, #108]	; (8008f64 <netconn_free+0x88>)
 8008ef6:	f00a ffdb 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	3310      	adds	r3, #16
 8008efe:	4618      	mov	r0, r3
 8008f00:	f00a fe6b 	bl	8013bda <sys_mbox_valid>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d006      	beq.n	8008f18 <netconn_free+0x3c>
 8008f0a:	4b14      	ldr	r3, [pc, #80]	; (8008f5c <netconn_free+0x80>)
 8008f0c:	f240 22e2 	movw	r2, #738	; 0x2e2
 8008f10:	4915      	ldr	r1, [pc, #84]	; (8008f68 <netconn_free+0x8c>)
 8008f12:	4814      	ldr	r0, [pc, #80]	; (8008f64 <netconn_free+0x88>)
 8008f14:	f00a ffcc 	bl	8013eb0 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3314      	adds	r3, #20
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f00a fe5c 	bl	8013bda <sys_mbox_valid>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d006      	beq.n	8008f36 <netconn_free+0x5a>
 8008f28:	4b0c      	ldr	r3, [pc, #48]	; (8008f5c <netconn_free+0x80>)
 8008f2a:	f240 22e5 	movw	r2, #741	; 0x2e5
 8008f2e:	490f      	ldr	r1, [pc, #60]	; (8008f6c <netconn_free+0x90>)
 8008f30:	480c      	ldr	r0, [pc, #48]	; (8008f64 <netconn_free+0x88>)
 8008f32:	f00a ffbd 	bl	8013eb0 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	330c      	adds	r3, #12
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f00a fecc 	bl	8013cd8 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	330c      	adds	r3, #12
 8008f44:	4618      	mov	r0, r3
 8008f46:	f00a fee4 	bl	8013d12 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008f4a:	6879      	ldr	r1, [r7, #4]
 8008f4c:	2007      	movs	r0, #7
 8008f4e:	f001 fd55 	bl	800a9fc <memp_free>
}
 8008f52:	bf00      	nop
 8008f54:	3708      	adds	r7, #8
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	0801503c 	.word	0x0801503c
 8008f60:	0801520c 	.word	0x0801520c
 8008f64:	08015094 	.word	0x08015094
 8008f68:	0801523c 	.word	0x0801523c
 8008f6c:	08015278 	.word	0x08015278

08008f70 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b086      	sub	sp, #24
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	3310      	adds	r3, #16
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f00a fe2c 	bl	8013bda <sys_mbox_valid>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d035      	beq.n	8008ff4 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008f88:	e01e      	b.n	8008fc8 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f92:	2b10      	cmp	r3, #16
 8008f94:	d114      	bne.n	8008fc0 <netconn_drain+0x50>
        if (mem != NULL) {
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d015      	beq.n	8008fc8 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d007      	beq.n	8008fb8 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	891b      	ldrh	r3, [r3, #8]
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	4610      	mov	r0, r2
 8008fb4:	f003 f872 	bl	800c09c <tcp_recved>
          }
          pbuf_free(p);
 8008fb8:	6978      	ldr	r0, [r7, #20]
 8008fba:	f002 fad3 	bl	800b564 <pbuf_free>
 8008fbe:	e003      	b.n	8008fc8 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f000 ff48 	bl	8009e58 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	3310      	adds	r3, #16
 8008fcc:	f107 020c 	add.w	r2, r7, #12
 8008fd0:	4611      	mov	r1, r2
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f00a fdea 	bl	8013bac <sys_arch_mbox_tryfetch>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fde:	d1d4      	bne.n	8008f8a <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	3310      	adds	r3, #16
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f00a fd6f 	bl	8013ac8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	3310      	adds	r3, #16
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f00a fe03 	bl	8013bfa <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	3314      	adds	r3, #20
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f00a fdee 	bl	8013bda <sys_mbox_valid>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d02e      	beq.n	8009062 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009004:	e017      	b.n	8009036 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	4a18      	ldr	r2, [pc, #96]	; (800906c <netconn_drain+0xfc>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d013      	beq.n	8009036 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 8009012:	6938      	ldr	r0, [r7, #16]
 8009014:	f7ff ffac 	bl	8008f70 <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d007      	beq.n	8009030 <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	4618      	mov	r0, r3
 8009026:	f002 ffdf 	bl	800bfe8 <tcp_abort>
          newconn->pcb.tcp = NULL;
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	2200      	movs	r2, #0
 800902e:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 8009030:	6938      	ldr	r0, [r7, #16]
 8009032:	f7ff ff53 	bl	8008edc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	3314      	adds	r3, #20
 800903a:	f107 020c 	add.w	r2, r7, #12
 800903e:	4611      	mov	r1, r2
 8009040:	4618      	mov	r0, r3
 8009042:	f00a fdb3 	bl	8013bac <sys_arch_mbox_tryfetch>
 8009046:	4603      	mov	r3, r0
 8009048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904c:	d1db      	bne.n	8009006 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	3314      	adds	r3, #20
 8009052:	4618      	mov	r0, r3
 8009054:	f00a fd38 	bl	8013ac8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3314      	adds	r3, #20
 800905c:	4618      	mov	r0, r3
 800905e:	f00a fdcc 	bl	8013bfa <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8009062:	bf00      	nop
 8009064:	3718      	adds	r7, #24
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20007464 	.word	0x20007464

08009070 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b088      	sub	sp, #32
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	460b      	mov	r3, r1
 800907a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 800907c:	2300      	movs	r3, #0
 800907e:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d106      	bne.n	8009094 <lwip_netconn_do_close_internal+0x24>
 8009086:	4baa      	ldr	r3, [pc, #680]	; (8009330 <lwip_netconn_do_close_internal+0x2c0>)
 8009088:	f240 3243 	movw	r2, #835	; 0x343
 800908c:	49a9      	ldr	r1, [pc, #676]	; (8009334 <lwip_netconn_do_close_internal+0x2c4>)
 800908e:	48aa      	ldr	r0, [pc, #680]	; (8009338 <lwip_netconn_do_close_internal+0x2c8>)
 8009090:	f00a ff0e 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800909c:	2b10      	cmp	r3, #16
 800909e:	d006      	beq.n	80090ae <lwip_netconn_do_close_internal+0x3e>
 80090a0:	4ba3      	ldr	r3, [pc, #652]	; (8009330 <lwip_netconn_do_close_internal+0x2c0>)
 80090a2:	f44f 7251 	mov.w	r2, #836	; 0x344
 80090a6:	49a5      	ldr	r1, [pc, #660]	; (800933c <lwip_netconn_do_close_internal+0x2cc>)
 80090a8:	48a3      	ldr	r0, [pc, #652]	; (8009338 <lwip_netconn_do_close_internal+0x2c8>)
 80090aa:	f00a ff01 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	785b      	ldrb	r3, [r3, #1]
 80090b2:	2b04      	cmp	r3, #4
 80090b4:	d006      	beq.n	80090c4 <lwip_netconn_do_close_internal+0x54>
 80090b6:	4b9e      	ldr	r3, [pc, #632]	; (8009330 <lwip_netconn_do_close_internal+0x2c0>)
 80090b8:	f240 3245 	movw	r2, #837	; 0x345
 80090bc:	49a0      	ldr	r1, [pc, #640]	; (8009340 <lwip_netconn_do_close_internal+0x2d0>)
 80090be:	489e      	ldr	r0, [pc, #632]	; (8009338 <lwip_netconn_do_close_internal+0x2c8>)
 80090c0:	f00a fef6 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d106      	bne.n	80090da <lwip_netconn_do_close_internal+0x6a>
 80090cc:	4b98      	ldr	r3, [pc, #608]	; (8009330 <lwip_netconn_do_close_internal+0x2c0>)
 80090ce:	f240 3246 	movw	r2, #838	; 0x346
 80090d2:	499c      	ldr	r1, [pc, #624]	; (8009344 <lwip_netconn_do_close_internal+0x2d4>)
 80090d4:	4898      	ldr	r0, [pc, #608]	; (8009338 <lwip_netconn_do_close_internal+0x2c8>)
 80090d6:	f00a feeb 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d106      	bne.n	80090f0 <lwip_netconn_do_close_internal+0x80>
 80090e2:	4b93      	ldr	r3, [pc, #588]	; (8009330 <lwip_netconn_do_close_internal+0x2c0>)
 80090e4:	f240 3247 	movw	r2, #839	; 0x347
 80090e8:	4997      	ldr	r1, [pc, #604]	; (8009348 <lwip_netconn_do_close_internal+0x2d8>)
 80090ea:	4893      	ldr	r0, [pc, #588]	; (8009338 <lwip_netconn_do_close_internal+0x2c8>)
 80090ec:	f00a fee0 	bl	8013eb0 <iprintf>

  tpcb = conn->pcb.tcp;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fa:	7a1b      	ldrb	r3, [r3, #8]
 80090fc:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	f003 0301 	and.w	r3, r3, #1
 8009104:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009106:	7dfb      	ldrb	r3, [r7, #23]
 8009108:	f003 0302 	and.w	r3, r3, #2
 800910c:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800910e:	7dfb      	ldrb	r3, [r7, #23]
 8009110:	2b03      	cmp	r3, #3
 8009112:	d102      	bne.n	800911a <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 8009114:	2301      	movs	r3, #1
 8009116:	77bb      	strb	r3, [r7, #30]
 8009118:	e01f      	b.n	800915a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800911a:	7dbb      	ldrb	r3, [r7, #22]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00e      	beq.n	800913e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009124:	2b05      	cmp	r3, #5
 8009126:	d007      	beq.n	8009138 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009128:	69bb      	ldr	r3, [r7, #24]
 800912a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800912c:	2b06      	cmp	r3, #6
 800912e:	d003      	beq.n	8009138 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009134:	2b08      	cmp	r3, #8
 8009136:	d102      	bne.n	800913e <lwip_netconn_do_close_internal+0xce>
    close = 1;
 8009138:	2301      	movs	r3, #1
 800913a:	77bb      	strb	r3, [r7, #30]
 800913c:	e00d      	b.n	800915a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800913e:	7d7b      	ldrb	r3, [r7, #21]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d008      	beq.n	8009156 <lwip_netconn_do_close_internal+0xe6>
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	7e9b      	ldrb	r3, [r3, #26]
 8009148:	f003 0310 	and.w	r3, r3, #16
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 8009150:	2301      	movs	r3, #1
 8009152:	77bb      	strb	r3, [r7, #30]
 8009154:	e001      	b.n	800915a <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 800915a:	7fbb      	ldrb	r3, [r7, #30]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d003      	beq.n	8009168 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009160:	2100      	movs	r1, #0
 8009162:	69b8      	ldr	r0, [r7, #24]
 8009164:	f003 fe70 	bl	800ce48 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	7d1b      	ldrb	r3, [r3, #20]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d104      	bne.n	800917a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009170:	2100      	movs	r1, #0
 8009172:	69b8      	ldr	r0, [r7, #24]
 8009174:	f003 fedc 	bl	800cf30 <tcp_accept>
 8009178:	e01d      	b.n	80091b6 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800917a:	7dbb      	ldrb	r3, [r7, #22]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d007      	beq.n	8009190 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009180:	2100      	movs	r1, #0
 8009182:	69b8      	ldr	r0, [r7, #24]
 8009184:	f003 fe70 	bl	800ce68 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009188:	2100      	movs	r1, #0
 800918a:	69b8      	ldr	r0, [r7, #24]
 800918c:	f003 fed0 	bl	800cf30 <tcp_accept>
    }
    if (shut_tx) {
 8009190:	7d7b      	ldrb	r3, [r7, #21]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009196:	2100      	movs	r1, #0
 8009198:	69b8      	ldr	r0, [r7, #24]
 800919a:	f003 fe87 	bl	800ceac <tcp_sent>
    }
    if (close) {
 800919e:	7fbb      	ldrb	r3, [r7, #30]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d008      	beq.n	80091b6 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80091a4:	2200      	movs	r2, #0
 80091a6:	2100      	movs	r1, #0
 80091a8:	69b8      	ldr	r0, [r7, #24]
 80091aa:	f003 fed7 	bl	800cf5c <tcp_poll>
      tcp_err(tpcb, NULL);
 80091ae:	2100      	movs	r1, #0
 80091b0:	69b8      	ldr	r0, [r7, #24]
 80091b2:	f003 fe9b 	bl	800ceec <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 80091b6:	7fbb      	ldrb	r3, [r7, #30]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d005      	beq.n	80091c8 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80091bc:	69b8      	ldr	r0, [r7, #24]
 80091be:	f002 fe01 	bl	800bdc4 <tcp_close>
 80091c2:	4603      	mov	r3, r0
 80091c4:	77fb      	strb	r3, [r7, #31]
 80091c6:	e007      	b.n	80091d8 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80091c8:	7dbb      	ldrb	r3, [r7, #22]
 80091ca:	7d7a      	ldrb	r2, [r7, #21]
 80091cc:	4619      	mov	r1, r3
 80091ce:	69b8      	ldr	r0, [r7, #24]
 80091d0:	f002 fe10 	bl	800bdf4 <tcp_shutdown>
 80091d4:	4603      	mov	r3, r0
 80091d6:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 80091d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d102      	bne.n	80091e6 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80091e0:	2301      	movs	r3, #1
 80091e2:	777b      	strb	r3, [r7, #29]
 80091e4:	e016      	b.n	8009214 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80091e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80091ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ee:	d10f      	bne.n	8009210 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f4:	7a5b      	ldrb	r3, [r3, #9]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d10c      	bne.n	8009214 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80091fa:	2301      	movs	r3, #1
 80091fc:	777b      	strb	r3, [r7, #29]
        if (close) {
 80091fe:	7fbb      	ldrb	r3, [r7, #30]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d007      	beq.n	8009214 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009204:	69b8      	ldr	r0, [r7, #24]
 8009206:	f002 feef 	bl	800bfe8 <tcp_abort>
          err = ERR_OK;
 800920a:	2300      	movs	r3, #0
 800920c:	77fb      	strb	r3, [r7, #31]
 800920e:	e001      	b.n	8009214 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009210:	2301      	movs	r3, #1
 8009212:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 8009214:	7f7b      	ldrb	r3, [r7, #29]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d056      	beq.n	80092c8 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	330c      	adds	r3, #12
 8009222:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009228:	7ffa      	ldrb	r2, [r7, #31]
 800922a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009238:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d129      	bne.n	8009294 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 8009240:	7fbb      	ldrb	r3, [r7, #30]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00c      	beq.n	8009260 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009250:	2b00      	cmp	r3, #0
 8009252:	d005      	beq.n	8009260 <lwip_netconn_do_close_internal+0x1f0>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009258:	2200      	movs	r2, #0
 800925a:	2104      	movs	r1, #4
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	4798      	blx	r3
      }
      if (shut_rx) {
 8009260:	7dbb      	ldrb	r3, [r7, #22]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d009      	beq.n	800927a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800926a:	2b00      	cmp	r3, #0
 800926c:	d005      	beq.n	800927a <lwip_netconn_do_close_internal+0x20a>
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009272:	2200      	movs	r2, #0
 8009274:	2100      	movs	r1, #0
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	4798      	blx	r3
      }
      if (shut_tx) {
 800927a:	7d7b      	ldrb	r3, [r7, #21]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d009      	beq.n	8009294 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009284:	2b00      	cmp	r3, #0
 8009286:	d005      	beq.n	8009294 <lwip_netconn_do_close_internal+0x224>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928c:	2200      	movs	r2, #0
 800928e:	2102      	movs	r1, #2
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00e      	beq.n	80092b8 <lwip_netconn_do_close_internal+0x248>
 800929a:	f00a fda5 	bl	8013de8 <sys_arch_protect>
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80092a6:	f113 0f0c 	cmn.w	r3, #12
 80092aa:	db02      	blt.n	80092b2 <lwip_netconn_do_close_internal+0x242>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	7ffa      	ldrb	r2, [r7, #31]
 80092b0:	721a      	strb	r2, [r3, #8]
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f00a fda6 	bl	8013e04 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80092b8:	78fb      	ldrb	r3, [r7, #3]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d002      	beq.n	80092c4 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80092be:	6938      	ldr	r0, [r7, #16]
 80092c0:	f00a fcfd 	bl	8013cbe <sys_sem_signal>
    }
    return ERR_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	e02e      	b.n	8009326 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 80092c8:	7f7b      	ldrb	r3, [r7, #29]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d11e      	bne.n	800930c <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	7d1b      	ldrb	r3, [r3, #20]
 80092d2:	2b01      	cmp	r3, #1
 80092d4:	d106      	bne.n	80092e4 <lwip_netconn_do_close_internal+0x274>
 80092d6:	4b16      	ldr	r3, [pc, #88]	; (8009330 <lwip_netconn_do_close_internal+0x2c0>)
 80092d8:	f240 32e3 	movw	r2, #995	; 0x3e3
 80092dc:	491b      	ldr	r1, [pc, #108]	; (800934c <lwip_netconn_do_close_internal+0x2dc>)
 80092de:	4816      	ldr	r0, [pc, #88]	; (8009338 <lwip_netconn_do_close_internal+0x2c8>)
 80092e0:	f00a fde6 	bl	8013eb0 <iprintf>
    if (shut_tx) {
 80092e4:	7d7b      	ldrb	r3, [r7, #21]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d003      	beq.n	80092f2 <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 80092ea:	4919      	ldr	r1, [pc, #100]	; (8009350 <lwip_netconn_do_close_internal+0x2e0>)
 80092ec:	69b8      	ldr	r0, [r7, #24]
 80092ee:	f003 fddd 	bl	800ceac <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80092f2:	2201      	movs	r2, #1
 80092f4:	4917      	ldr	r1, [pc, #92]	; (8009354 <lwip_netconn_do_close_internal+0x2e4>)
 80092f6:	69b8      	ldr	r0, [r7, #24]
 80092f8:	f003 fe30 	bl	800cf5c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80092fc:	4916      	ldr	r1, [pc, #88]	; (8009358 <lwip_netconn_do_close_internal+0x2e8>)
 80092fe:	69b8      	ldr	r0, [r7, #24]
 8009300:	f003 fdf4 	bl	800ceec <tcp_err>
    tcp_arg(tpcb, conn);
 8009304:	6879      	ldr	r1, [r7, #4]
 8009306:	69b8      	ldr	r0, [r7, #24]
 8009308:	f003 fd9e 	bl	800ce48 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800930c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d106      	bne.n	8009322 <lwip_netconn_do_close_internal+0x2b2>
 8009314:	4b06      	ldr	r3, [pc, #24]	; (8009330 <lwip_netconn_do_close_internal+0x2c0>)
 8009316:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800931a:	4910      	ldr	r1, [pc, #64]	; (800935c <lwip_netconn_do_close_internal+0x2ec>)
 800931c:	4806      	ldr	r0, [pc, #24]	; (8009338 <lwip_netconn_do_close_internal+0x2c8>)
 800931e:	f00a fdc7 	bl	8013eb0 <iprintf>
  return err;
 8009322:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3720      	adds	r7, #32
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	0801503c 	.word	0x0801503c
 8009334:	080152b4 	.word	0x080152b4
 8009338:	08015094 	.word	0x08015094
 800933c:	080152c4 	.word	0x080152c4
 8009340:	080152e4 	.word	0x080152e4
 8009344:	08015308 	.word	0x08015308
 8009348:	08015170 	.word	0x08015170
 800934c:	0801531c 	.word	0x0801531c
 8009350:	080089f9 	.word	0x080089f9
 8009354:	08008931 	.word	0x08008931
 8009358:	08008aa1 	.word	0x08008aa1
 800935c:	08015340 	.word	0x08015340

08009360 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b086      	sub	sp, #24
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	785b      	ldrb	r3, [r3, #1]
 8009372:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009374:	7cfb      	ldrb	r3, [r7, #19]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00d      	beq.n	8009396 <lwip_netconn_do_delconn+0x36>
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009384:	2b10      	cmp	r3, #16
 8009386:	d006      	beq.n	8009396 <lwip_netconn_do_delconn+0x36>
 8009388:	4b6f      	ldr	r3, [pc, #444]	; (8009548 <lwip_netconn_do_delconn+0x1e8>)
 800938a:	f240 4201 	movw	r2, #1025	; 0x401
 800938e:	496f      	ldr	r1, [pc, #444]	; (800954c <lwip_netconn_do_delconn+0x1ec>)
 8009390:	486f      	ldr	r0, [pc, #444]	; (8009550 <lwip_netconn_do_delconn+0x1f0>)
 8009392:	f00a fd8d 	bl	8013eb0 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009396:	7cfb      	ldrb	r3, [r7, #19]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d005      	beq.n	80093a8 <lwip_netconn_do_delconn+0x48>
 800939c:	7cfb      	ldrb	r3, [r7, #19]
 800939e:	2b02      	cmp	r3, #2
 80093a0:	d002      	beq.n	80093a8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80093a2:	7cfb      	ldrb	r3, [r7, #19]
 80093a4:	2b03      	cmp	r3, #3
 80093a6:	d109      	bne.n	80093bc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80093a8:	7cfb      	ldrb	r3, [r7, #19]
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	d10a      	bne.n	80093c4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	7f1b      	ldrb	r3, [r3, #28]
 80093b4:	f003 0304 	and.w	r3, r3, #4
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d103      	bne.n	80093c4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	22fb      	movs	r2, #251	; 0xfb
 80093c0:	711a      	strb	r2, [r3, #4]
 80093c2:	e09c      	b.n	80094fe <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80093c4:	7cfb      	ldrb	r3, [r7, #19]
 80093c6:	2b03      	cmp	r3, #3
 80093c8:	d10d      	bne.n	80093e6 <lwip_netconn_do_delconn+0x86>
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	7f1b      	ldrb	r3, [r3, #28]
 80093d0:	f003 0304 	and.w	r3, r3, #4
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d106      	bne.n	80093e6 <lwip_netconn_do_delconn+0x86>
 80093d8:	4b5b      	ldr	r3, [pc, #364]	; (8009548 <lwip_netconn_do_delconn+0x1e8>)
 80093da:	f240 421f 	movw	r2, #1055	; 0x41f
 80093de:	495d      	ldr	r1, [pc, #372]	; (8009554 <lwip_netconn_do_delconn+0x1f4>)
 80093e0:	485b      	ldr	r0, [pc, #364]	; (8009550 <lwip_netconn_do_delconn+0x1f0>)
 80093e2:	f00a fd65 	bl	8013eb0 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	2200      	movs	r2, #0
 80093ea:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f7ff fdbd 	bl	8008f70 <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d064      	beq.n	80094ca <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800940a:	2b10      	cmp	r3, #16
 800940c:	d00e      	beq.n	800942c <lwip_netconn_do_delconn+0xcc>
 800940e:	2b20      	cmp	r3, #32
 8009410:	d000      	beq.n	8009414 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 8009412:	e056      	b.n	80094c2 <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	4618      	mov	r0, r3
 8009426:	f008 f8ab 	bl	8011580 <udp_remove>
        break;
 800942a:	e04a      	b.n	80094c2 <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800942c:	697b      	ldr	r3, [r7, #20]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009432:	2b00      	cmp	r3, #0
 8009434:	d104      	bne.n	8009440 <lwip_netconn_do_delconn+0xe0>
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	6a1b      	ldr	r3, [r3, #32]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d006      	beq.n	800944e <lwip_netconn_do_delconn+0xee>
 8009440:	4b41      	ldr	r3, [pc, #260]	; (8009548 <lwip_netconn_do_delconn+0x1e8>)
 8009442:	f240 4235 	movw	r2, #1077	; 0x435
 8009446:	4944      	ldr	r1, [pc, #272]	; (8009558 <lwip_netconn_do_delconn+0x1f8>)
 8009448:	4841      	ldr	r0, [pc, #260]	; (8009550 <lwip_netconn_do_delconn+0x1f0>)
 800944a:	f00a fd31 	bl	8013eb0 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2204      	movs	r2, #4
 8009454:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2203      	movs	r2, #3
 800945a:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	2100      	movs	r1, #0
 800946a:	4618      	mov	r0, r3
 800946c:	f7ff fe00 	bl	8009070 <lwip_netconn_do_close_internal>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d064      	beq.n	8009540 <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	785b      	ldrb	r3, [r3, #1]
 800947c:	2b04      	cmp	r3, #4
 800947e:	d006      	beq.n	800948e <lwip_netconn_do_delconn+0x12e>
 8009480:	4b31      	ldr	r3, [pc, #196]	; (8009548 <lwip_netconn_do_delconn+0x1e8>)
 8009482:	f240 423b 	movw	r2, #1083	; 0x43b
 8009486:	4935      	ldr	r1, [pc, #212]	; (800955c <lwip_netconn_do_delconn+0x1fc>)
 8009488:	4831      	ldr	r0, [pc, #196]	; (8009550 <lwip_netconn_do_delconn+0x1f0>)
 800948a:	f00a fd11 	bl	8013eb0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800948e:	4834      	ldr	r0, [pc, #208]	; (8009560 <lwip_netconn_do_delconn+0x200>)
 8009490:	f00a fc7d 	bl	8013d8e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	330c      	adds	r3, #12
 800949a:	2100      	movs	r1, #0
 800949c:	4618      	mov	r0, r3
 800949e:	f00a fbdd 	bl	8013c5c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80094a2:	482f      	ldr	r0, [pc, #188]	; (8009560 <lwip_netconn_do_delconn+0x200>)
 80094a4:	f00a fc64 	bl	8013d70 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	785b      	ldrb	r3, [r3, #1]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d046      	beq.n	8009540 <lwip_netconn_do_delconn+0x1e0>
 80094b2:	4b25      	ldr	r3, [pc, #148]	; (8009548 <lwip_netconn_do_delconn+0x1e8>)
 80094b4:	f240 423f 	movw	r2, #1087	; 0x43f
 80094b8:	4928      	ldr	r1, [pc, #160]	; (800955c <lwip_netconn_do_delconn+0x1fc>)
 80094ba:	4825      	ldr	r0, [pc, #148]	; (8009550 <lwip_netconn_do_delconn+0x1f0>)
 80094bc:	f00a fcf8 	bl	8013eb0 <iprintf>
        return;
 80094c0:	e03e      	b.n	8009540 <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2200      	movs	r2, #0
 80094c8:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d007      	beq.n	80094e4 <lwip_netconn_do_delconn+0x184>
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	6810      	ldr	r0, [r2, #0]
 80094de:	2200      	movs	r2, #0
 80094e0:	2100      	movs	r1, #0
 80094e2:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d007      	beq.n	80094fe <lwip_netconn_do_delconn+0x19e>
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f4:	697a      	ldr	r2, [r7, #20]
 80094f6:	6810      	ldr	r0, [r2, #0]
 80094f8:	2200      	movs	r2, #0
 80094fa:	2102      	movs	r1, #2
 80094fc:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	330c      	adds	r3, #12
 8009504:	4618      	mov	r0, r3
 8009506:	f00a fbf4 	bl	8013cf2 <sys_sem_valid>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d018      	beq.n	8009542 <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d014      	beq.n	8009542 <lwip_netconn_do_delconn+0x1e2>
 8009518:	f00a fc66 	bl	8013de8 <sys_arch_protect>
 800951c:	60f8      	str	r0, [r7, #12]
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009526:	f113 0f0c 	cmn.w	r3, #12
 800952a:	db05      	blt.n	8009538 <lwip_netconn_do_delconn+0x1d8>
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009536:	721a      	strb	r2, [r3, #8]
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f00a fc63 	bl	8013e04 <sys_arch_unprotect>
 800953e:	e000      	b.n	8009542 <lwip_netconn_do_delconn+0x1e2>
        return;
 8009540:	bf00      	nop
  }
}
 8009542:	3718      	adds	r7, #24
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	0801503c 	.word	0x0801503c
 800954c:	08015350 	.word	0x08015350
 8009550:	08015094 	.word	0x08015094
 8009554:	08015364 	.word	0x08015364
 8009558:	08015384 	.word	0x08015384
 800955c:	080153a0 	.word	0x080153a0
 8009560:	20007468 	.word	0x20007468

08009564 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b088      	sub	sp, #32
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	4613      	mov	r3, r2
 8009570:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t* op_completed_sem = NULL;
 8009572:	2300      	movs	r3, #0
 8009574:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d102      	bne.n	8009586 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8009580:	f06f 0305 	mvn.w	r3, #5
 8009584:	e082      	b.n	800968c <lwip_netconn_do_connected+0x128>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	785b      	ldrb	r3, [r3, #1]
 800958a:	2b03      	cmp	r3, #3
 800958c:	d006      	beq.n	800959c <lwip_netconn_do_connected+0x38>
 800958e:	4b41      	ldr	r3, [pc, #260]	; (8009694 <lwip_netconn_do_connected+0x130>)
 8009590:	f44f 6293 	mov.w	r2, #1176	; 0x498
 8009594:	4940      	ldr	r1, [pc, #256]	; (8009698 <lwip_netconn_do_connected+0x134>)
 8009596:	4841      	ldr	r0, [pc, #260]	; (800969c <lwip_netconn_do_connected+0x138>)
 8009598:	f00a fc8a 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10c      	bne.n	80095be <lwip_netconn_do_connected+0x5a>
 80095a4:	69bb      	ldr	r3, [r7, #24]
 80095a6:	7f1b      	ldrb	r3, [r3, #28]
 80095a8:	f003 0304 	and.w	r3, r3, #4
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d106      	bne.n	80095be <lwip_netconn_do_connected+0x5a>
 80095b0:	4b38      	ldr	r3, [pc, #224]	; (8009694 <lwip_netconn_do_connected+0x130>)
 80095b2:	f240 429a 	movw	r2, #1178	; 0x49a
 80095b6:	493a      	ldr	r1, [pc, #232]	; (80096a0 <lwip_netconn_do_connected+0x13c>)
 80095b8:	4838      	ldr	r0, [pc, #224]	; (800969c <lwip_netconn_do_connected+0x138>)
 80095ba:	f00a fc79 	bl	8013eb0 <iprintf>
    (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d008      	beq.n	80095d8 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ca:	79fa      	ldrb	r2, [r7, #7]
 80095cc:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	330c      	adds	r3, #12
 80095d6:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095e0:	2b10      	cmp	r3, #16
 80095e2:	d106      	bne.n	80095f2 <lwip_netconn_do_connected+0x8e>
 80095e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d102      	bne.n	80095f2 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 80095ec:	69b8      	ldr	r0, [r7, #24]
 80095ee:	f7ff fb47 	bl	8008c80 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	7f1b      	ldrb	r3, [r3, #28]
 80095f6:	f003 0304 	and.w	r3, r3, #4
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	bf0c      	ite	eq
 80095fe:	2301      	moveq	r3, #1
 8009600:	2300      	movne	r3, #0
 8009602:	b2db      	uxtb	r3, r3
 8009604:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 8009606:	69bb      	ldr	r3, [r7, #24]
 8009608:	7f1b      	ldrb	r3, [r3, #28]
 800960a:	f023 0304 	bic.w	r3, r3, #4
 800960e:	b2da      	uxtb	r2, r3
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d002      	beq.n	8009620 <lwip_netconn_do_connected+0xbc>
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10c      	bne.n	800963a <lwip_netconn_do_connected+0xd6>
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d102      	bne.n	800962c <lwip_netconn_do_connected+0xc8>
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d006      	beq.n	800963a <lwip_netconn_do_connected+0xd6>
 800962c:	4b19      	ldr	r3, [pc, #100]	; (8009694 <lwip_netconn_do_connected+0x130>)
 800962e:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8009632:	491c      	ldr	r1, [pc, #112]	; (80096a4 <lwip_netconn_do_connected+0x140>)
 8009634:	4819      	ldr	r0, [pc, #100]	; (800969c <lwip_netconn_do_connected+0x138>)
 8009636:	f00a fc3b 	bl	8013eb0 <iprintf>
    (was_blocking && op_completed_sem != NULL) ||
    (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	2200      	movs	r2, #0
 800963e:	625a      	str	r2, [r3, #36]	; 0x24
  conn->state = NETCONN_NONE;
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	2200      	movs	r2, #0
 8009644:	705a      	strb	r2, [r3, #1]
  NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d00e      	beq.n	800966a <lwip_netconn_do_connected+0x106>
 800964c:	f00a fbcc 	bl	8013de8 <sys_arch_protect>
 8009650:	6138      	str	r0, [r7, #16]
 8009652:	69bb      	ldr	r3, [r7, #24]
 8009654:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009658:	f113 0f0c 	cmn.w	r3, #12
 800965c:	db02      	blt.n	8009664 <lwip_netconn_do_connected+0x100>
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	2200      	movs	r2, #0
 8009662:	721a      	strb	r2, [r3, #8]
 8009664:	6938      	ldr	r0, [r7, #16]
 8009666:	f00a fbcd 	bl	8013e04 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800966e:	2b00      	cmp	r3, #0
 8009670:	d005      	beq.n	800967e <lwip_netconn_do_connected+0x11a>
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009676:	2200      	movs	r2, #0
 8009678:	2102      	movs	r1, #2
 800967a:	69b8      	ldr	r0, [r7, #24]
 800967c:	4798      	blx	r3

  if (was_blocking) {
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <lwip_netconn_do_connected+0x126>
    sys_sem_signal(op_completed_sem);
 8009684:	69f8      	ldr	r0, [r7, #28]
 8009686:	f00a fb1a 	bl	8013cbe <sys_sem_signal>
  }
  return ERR_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3720      	adds	r7, #32
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	0801503c 	.word	0x0801503c
 8009698:	080153a8 	.word	0x080153a8
 800969c:	08015094 	.word	0x08015094
 80096a0:	080153c8 	.word	0x080153c8
 80096a4:	08015408 	.word	0x08015408

080096a8 <lwip_netconn_do_connect>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b086      	sub	sp, #24
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	617b      	str	r3, [r7, #20]

  if (msg->conn->pcb.tcp == NULL) {
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d103      	bne.n	80096c6 <lwip_netconn_do_connect+0x1e>
    /* This may happen when calling netconn_connect() a second time */
    msg->err = ERR_CLSD;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	22f1      	movs	r2, #241	; 0xf1
 80096c2:	711a      	strb	r2, [r3, #4]
 80096c4:	e0a4      	b.n	8009810 <lwip_netconn_do_connect+0x168>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096d0:	2b10      	cmp	r3, #16
 80096d2:	d011      	beq.n	80096f8 <lwip_netconn_do_connect+0x50>
 80096d4:	2b20      	cmp	r3, #32
 80096d6:	f040 808f 	bne.w	80097f8 <lwip_netconn_do_connect+0x150>
      msg->err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	6858      	ldr	r0, [r3, #4]
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	6899      	ldr	r1, [r3, #8]
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	899b      	ldrh	r3, [r3, #12]
 80096e8:	461a      	mov	r2, r3
 80096ea:	f007 fee1 	bl	80114b0 <udp_connect>
 80096ee:	4603      	mov	r3, r0
 80096f0:	461a      	mov	r2, r3
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	711a      	strb	r2, [r3, #4]
      break;
 80096f6:	e08b      	b.n	8009810 <lwip_netconn_do_connect+0x168>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      /* Prevent connect while doing any other action. */
      if (msg->conn->state == NETCONN_CONNECT) {
 80096f8:	697b      	ldr	r3, [r7, #20]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	785b      	ldrb	r3, [r3, #1]
 80096fe:	2b03      	cmp	r3, #3
 8009700:	d103      	bne.n	800970a <lwip_netconn_do_connect+0x62>
        msg->err = ERR_ALREADY;
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	22f7      	movs	r2, #247	; 0xf7
 8009706:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_TCPIP_CORE_LOCKING */
            return;
          }
        }
      }
      break;
 8009708:	e081      	b.n	800980e <lwip_netconn_do_connect+0x166>
      } else if (msg->conn->state != NETCONN_NONE) {
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	785b      	ldrb	r3, [r3, #1]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d003      	beq.n	800971c <lwip_netconn_do_connect+0x74>
        msg->err = ERR_ISCONN;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	22f6      	movs	r2, #246	; 0xf6
 8009718:	711a      	strb	r2, [r3, #4]
      break;
 800971a:	e078      	b.n	800980e <lwip_netconn_do_connect+0x166>
        setup_tcp(msg->conn);
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4618      	mov	r0, r3
 8009722:	f7ff faad 	bl	8008c80 <setup_tcp>
        msg->err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6858      	ldr	r0, [r3, #4]
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	6899      	ldr	r1, [r3, #8]
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	899a      	ldrh	r2, [r3, #12]
 8009734:	4b44      	ldr	r3, [pc, #272]	; (8009848 <lwip_netconn_do_connect+0x1a0>)
 8009736:	f002 fd4f 	bl	800c1d8 <tcp_connect>
 800973a:	4603      	mov	r3, r0
 800973c:	461a      	mov	r2, r3
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	711a      	strb	r2, [r3, #4]
        if (msg->err == ERR_OK) {
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d160      	bne.n	800980e <lwip_netconn_do_connect+0x166>
          u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	7f1b      	ldrb	r3, [r3, #28]
 8009752:	f003 0302 	and.w	r3, r3, #2
 8009756:	2b00      	cmp	r3, #0
 8009758:	bf14      	ite	ne
 800975a:	2301      	movne	r3, #1
 800975c:	2300      	moveq	r3, #0
 800975e:	b2db      	uxtb	r3, r3
 8009760:	74fb      	strb	r3, [r7, #19]
          msg->conn->state = NETCONN_CONNECT;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2203      	movs	r2, #3
 8009768:	705a      	strb	r2, [r3, #1]
          SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800976a:	7cfb      	ldrb	r3, [r7, #19]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d009      	beq.n	8009784 <lwip_netconn_do_connect+0xdc>
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	7f1a      	ldrb	r2, [r3, #28]
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f042 0204 	orr.w	r2, r2, #4
 800977e:	b2d2      	uxtb	r2, r2
 8009780:	771a      	strb	r2, [r3, #28]
 8009782:	e008      	b.n	8009796 <lwip_netconn_do_connect+0xee>
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	7f1a      	ldrb	r2, [r3, #28]
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f022 0204 	bic.w	r2, r2, #4
 8009792:	b2d2      	uxtb	r2, r2
 8009794:	771a      	strb	r2, [r3, #28]
          if (non_blocking) {
 8009796:	7cfb      	ldrb	r3, [r7, #19]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d003      	beq.n	80097a4 <lwip_netconn_do_connect+0xfc>
            msg->err = ERR_INPROGRESS;
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	22fb      	movs	r2, #251	; 0xfb
 80097a0:	711a      	strb	r2, [r3, #4]
      break;
 80097a2:	e034      	b.n	800980e <lwip_netconn_do_connect+0x166>
            msg->conn->current_msg = msg;
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	697a      	ldr	r2, [r7, #20]
 80097aa:	625a      	str	r2, [r3, #36]	; 0x24
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	785b      	ldrb	r3, [r3, #1]
 80097b2:	2b03      	cmp	r3, #3
 80097b4:	d006      	beq.n	80097c4 <lwip_netconn_do_connect+0x11c>
 80097b6:	4b25      	ldr	r3, [pc, #148]	; (800984c <lwip_netconn_do_connect+0x1a4>)
 80097b8:	f240 42e5 	movw	r2, #1253	; 0x4e5
 80097bc:	4924      	ldr	r1, [pc, #144]	; (8009850 <lwip_netconn_do_connect+0x1a8>)
 80097be:	4825      	ldr	r0, [pc, #148]	; (8009854 <lwip_netconn_do_connect+0x1ac>)
 80097c0:	f00a fb76 	bl	8013eb0 <iprintf>
            UNLOCK_TCPIP_CORE();
 80097c4:	4824      	ldr	r0, [pc, #144]	; (8009858 <lwip_netconn_do_connect+0x1b0>)
 80097c6:	f00a fae2 	bl	8013d8e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	330c      	adds	r3, #12
 80097d0:	2100      	movs	r1, #0
 80097d2:	4618      	mov	r0, r3
 80097d4:	f00a fa42 	bl	8013c5c <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80097d8:	481f      	ldr	r0, [pc, #124]	; (8009858 <lwip_netconn_do_connect+0x1b0>)
 80097da:	f00a fac9 	bl	8013d70 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	785b      	ldrb	r3, [r3, #1]
 80097e4:	2b03      	cmp	r3, #3
 80097e6:	d12b      	bne.n	8009840 <lwip_netconn_do_connect+0x198>
 80097e8:	4b18      	ldr	r3, [pc, #96]	; (800984c <lwip_netconn_do_connect+0x1a4>)
 80097ea:	f240 42e9 	movw	r2, #1257	; 0x4e9
 80097ee:	4918      	ldr	r1, [pc, #96]	; (8009850 <lwip_netconn_do_connect+0x1a8>)
 80097f0:	4818      	ldr	r0, [pc, #96]	; (8009854 <lwip_netconn_do_connect+0x1ac>)
 80097f2:	f00a fb5d 	bl	8013eb0 <iprintf>
            return;
 80097f6:	e023      	b.n	8009840 <lwip_netconn_do_connect+0x198>
#endif /* LWIP_TCP */
    default:
      LWIP_ERROR("Invalid netconn type", 0, do{ msg->err = ERR_VAL; }while(0));
 80097f8:	4b14      	ldr	r3, [pc, #80]	; (800984c <lwip_netconn_do_connect+0x1a4>)
 80097fa:	f240 42f2 	movw	r2, #1266	; 0x4f2
 80097fe:	4917      	ldr	r1, [pc, #92]	; (800985c <lwip_netconn_do_connect+0x1b4>)
 8009800:	4814      	ldr	r0, [pc, #80]	; (8009854 <lwip_netconn_do_connect+0x1ac>)
 8009802:	f00a fb55 	bl	8013eb0 <iprintf>
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	22fa      	movs	r2, #250	; 0xfa
 800980a:	711a      	strb	r2, [r3, #4]
      break;
 800980c:	e000      	b.n	8009810 <lwip_netconn_do_connect+0x168>
      break;
 800980e:	bf00      	nop
    }
  }
  /* For all other protocols, netconn_connect() calls TCPIP_APIMSG(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d014      	beq.n	8009842 <lwip_netconn_do_connect+0x19a>
 8009818:	f00a fae6 	bl	8013de8 <sys_arch_protect>
 800981c:	60f8      	str	r0, [r7, #12]
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009826:	f113 0f0c 	cmn.w	r3, #12
 800982a:	db05      	blt.n	8009838 <lwip_netconn_do_connect+0x190>
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	697a      	ldr	r2, [r7, #20]
 8009832:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009836:	721a      	strb	r2, [r3, #8]
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f00a fae3 	bl	8013e04 <sys_arch_unprotect>
 800983e:	e000      	b.n	8009842 <lwip_netconn_do_connect+0x19a>
            return;
 8009840:	bf00      	nop
}
 8009842:	3718      	adds	r7, #24
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	08009565 	.word	0x08009565
 800984c:	0801503c 	.word	0x0801503c
 8009850:	080153a0 	.word	0x080153a0
 8009854:	08015094 	.word	0x08015094
 8009858:	20007468 	.word	0x20007468
 800985c:	08015428 	.word	0x08015428

08009860 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b08a      	sub	sp, #40	; 0x28
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	460b      	mov	r3, r1
 800986a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800986c:	2300      	movs	r3, #0
 800986e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d106      	bne.n	8009886 <lwip_netconn_do_writemore+0x26>
 8009878:	4ba3      	ldr	r3, [pc, #652]	; (8009b08 <lwip_netconn_do_writemore+0x2a8>)
 800987a:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800987e:	49a3      	ldr	r1, [pc, #652]	; (8009b0c <lwip_netconn_do_writemore+0x2ac>)
 8009880:	48a3      	ldr	r0, [pc, #652]	; (8009b10 <lwip_netconn_do_writemore+0x2b0>)
 8009882:	f00a fb15 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	785b      	ldrb	r3, [r3, #1]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d006      	beq.n	800989c <lwip_netconn_do_writemore+0x3c>
 800988e:	4b9e      	ldr	r3, [pc, #632]	; (8009b08 <lwip_netconn_do_writemore+0x2a8>)
 8009890:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8009894:	499f      	ldr	r1, [pc, #636]	; (8009b14 <lwip_netconn_do_writemore+0x2b4>)
 8009896:	489e      	ldr	r0, [pc, #632]	; (8009b10 <lwip_netconn_do_writemore+0x2b0>)
 8009898:	f00a fb0a 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d106      	bne.n	80098b2 <lwip_netconn_do_writemore+0x52>
 80098a4:	4b98      	ldr	r3, [pc, #608]	; (8009b08 <lwip_netconn_do_writemore+0x2a8>)
 80098a6:	f240 52e5 	movw	r2, #1509	; 0x5e5
 80098aa:	499b      	ldr	r1, [pc, #620]	; (8009b18 <lwip_netconn_do_writemore+0x2b8>)
 80098ac:	4898      	ldr	r0, [pc, #608]	; (8009b10 <lwip_netconn_do_writemore+0x2b0>)
 80098ae:	f00a faff 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d106      	bne.n	80098c8 <lwip_netconn_do_writemore+0x68>
 80098ba:	4b93      	ldr	r3, [pc, #588]	; (8009b08 <lwip_netconn_do_writemore+0x2a8>)
 80098bc:	f240 52e6 	movw	r2, #1510	; 0x5e6
 80098c0:	4996      	ldr	r1, [pc, #600]	; (8009b1c <lwip_netconn_do_writemore+0x2bc>)
 80098c2:	4893      	ldr	r0, [pc, #588]	; (8009b10 <lwip_netconn_do_writemore+0x2b0>)
 80098c4:	f00a faf4 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a1a      	ldr	r2, [r3, #32]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d306      	bcc.n	80098e4 <lwip_netconn_do_writemore+0x84>
 80098d6:	4b8c      	ldr	r3, [pc, #560]	; (8009b08 <lwip_netconn_do_writemore+0x2a8>)
 80098d8:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 80098dc:	4990      	ldr	r1, [pc, #576]	; (8009b20 <lwip_netconn_do_writemore+0x2c0>)
 80098de:	488c      	ldr	r0, [pc, #560]	; (8009b10 <lwip_netconn_do_writemore+0x2b0>)
 80098e0:	f00a fae6 	bl	8013eb0 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e8:	7c1b      	ldrb	r3, [r3, #16]
 80098ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	7f1b      	ldrb	r3, [r3, #28]
 80098f2:	f003 0302 	and.w	r3, r3, #2
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d105      	bne.n	8009906 <lwip_netconn_do_writemore+0xa6>
 80098fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80098fe:	f003 0304 	and.w	r3, r3, #4
 8009902:	2b00      	cmp	r3, #0
 8009904:	d001      	beq.n	800990a <lwip_netconn_do_writemore+0xaa>
 8009906:	2301      	movs	r3, #1
 8009908:	e000      	b.n	800990c <lwip_netconn_do_writemore+0xac>
 800990a:	2300      	movs	r3, #0
 800990c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009914:	689a      	ldr	r2, [r3, #8]
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6a1b      	ldr	r3, [r3, #32]
 800991a:	4413      	add	r3, r2
 800991c:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009922:	68da      	ldr	r2, [r3, #12]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6a1b      	ldr	r3, [r3, #32]
 8009928:	1ad3      	subs	r3, r2, r3
 800992a:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009932:	d309      	bcc.n	8009948 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 8009934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009938:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 800993a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800993e:	f043 0302 	orr.w	r3, r3, #2
 8009942:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009946:	e001      	b.n	800994c <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009954:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 8009956:	8afa      	ldrh	r2, [r7, #22]
 8009958:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800995a:	429a      	cmp	r2, r3
 800995c:	d212      	bcs.n	8009984 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 800995e:	8afb      	ldrh	r3, [r7, #22]
 8009960:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 8009962:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009966:	2b00      	cmp	r3, #0
 8009968:	d006      	beq.n	8009978 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 800996a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800996c:	2b00      	cmp	r3, #0
 800996e:	d109      	bne.n	8009984 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 8009970:	23f9      	movs	r3, #249	; 0xf9
 8009972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 8009976:	e02a      	b.n	80099ce <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 8009978:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800997c:	f043 0302 	orr.w	r3, r3, #2
 8009980:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a1a      	ldr	r2, [r3, #32]
 8009988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800998a:	441a      	add	r2, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	429a      	cmp	r2, r3
 8009994:	d906      	bls.n	80099a4 <lwip_netconn_do_writemore+0x144>
 8009996:	4b5c      	ldr	r3, [pc, #368]	; (8009b08 <lwip_netconn_do_writemore+0x2a8>)
 8009998:	f240 6213 	movw	r2, #1555	; 0x613
 800999c:	4961      	ldr	r1, [pc, #388]	; (8009b24 <lwip_netconn_do_writemore+0x2c4>)
 800999e:	485c      	ldr	r0, [pc, #368]	; (8009b10 <lwip_netconn_do_writemore+0x2b0>)
 80099a0:	f00a fa86 	bl	8013eb0 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6858      	ldr	r0, [r3, #4]
 80099a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80099ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80099ae:	69f9      	ldr	r1, [r7, #28]
 80099b0:	f006 f884 	bl	800fabc <tcp_write>
 80099b4:	4603      	mov	r3, r0
 80099b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80099ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d004      	beq.n	80099cc <lwip_netconn_do_writemore+0x16c>
 80099c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ca:	d133      	bne.n	8009a34 <lwip_netconn_do_writemore+0x1d4>
err_mem:
 80099cc:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 80099ce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d017      	beq.n	8009a06 <lwip_netconn_do_writemore+0x1a6>
 80099d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099dc:	68db      	ldr	r3, [r3, #12]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d211      	bcs.n	8009a06 <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d005      	beq.n	80099f6 <lwip_netconn_do_writemore+0x196>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80099f0:	2103      	movs	r1, #3
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	7f1b      	ldrb	r3, [r3, #28]
 80099fa:	f043 0310 	orr.w	r3, r3, #16
 80099fe:	b2da      	uxtb	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	771a      	strb	r2, [r3, #28]
 8009a04:	e016      	b.n	8009a34 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009a0e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009a12:	d305      	bcc.n	8009a20 <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8009a1c:	2b04      	cmp	r3, #4
 8009a1e:	d909      	bls.n	8009a34 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d005      	beq.n	8009a34 <lwip_netconn_do_writemore+0x1d4>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a2c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009a2e:	2103      	movs	r1, #3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8009a34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d134      	bne.n	8009aa6 <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6a1a      	ldr	r2, [r3, #32]
 8009a40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a42:	441a      	add	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a1a      	ldr	r2, [r3, #32]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d003      	beq.n	8009a5e <lwip_netconn_do_writemore+0x1fe>
 8009a56:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d007      	beq.n	8009a6e <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	6a12      	ldr	r2, [r2, #32]
 8009a66:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f006 fcd4 	bl	8010420 <tcp_output>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8009a7c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8009a80:	f113 0f0c 	cmn.w	r3, #12
 8009a84:	db04      	blt.n	8009a90 <lwip_netconn_do_writemore+0x230>
 8009a86:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8009a8a:	f113 0f04 	cmn.w	r3, #4
 8009a8e:	d152      	bne.n	8009b36 <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009a90:	7d3b      	ldrb	r3, [r7, #20]
 8009a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8009a96:	2301      	movs	r3, #1
 8009a98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	60da      	str	r2, [r3, #12]
 8009aa4:	e047      	b.n	8009b36 <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 8009aa6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aae:	d13b      	bne.n	8009b28 <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f006 fcb3 	bl	8010420 <tcp_output>
 8009aba:	4603      	mov	r3, r0
 8009abc:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8009abe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8009ac2:	f113 0f0c 	cmn.w	r3, #12
 8009ac6:	db04      	blt.n	8009ad2 <lwip_netconn_do_writemore+0x272>
 8009ac8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8009acc:	f113 0f04 	cmn.w	r3, #4
 8009ad0:	d10a      	bne.n	8009ae8 <lwip_netconn_do_writemore+0x288>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009ad2:	7d7b      	ldrb	r3, [r7, #21]
 8009ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	60da      	str	r2, [r3, #12]
 8009ae6:	e026      	b.n	8009b36 <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 8009ae8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d022      	beq.n	8009b36 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 8009af0:	23f9      	movs	r3, #249	; 0xf9
 8009af2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 8009af6:	2301      	movs	r3, #1
 8009af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b00:	2200      	movs	r2, #0
 8009b02:	60da      	str	r2, [r3, #12]
 8009b04:	e017      	b.n	8009b36 <lwip_netconn_do_writemore+0x2d6>
 8009b06:	bf00      	nop
 8009b08:	0801503c 	.word	0x0801503c
 8009b0c:	08015160 	.word	0x08015160
 8009b10:	08015094 	.word	0x08015094
 8009b14:	08015440 	.word	0x08015440
 8009b18:	08015170 	.word	0x08015170
 8009b1c:	08015460 	.word	0x08015460
 8009b20:	08015478 	.word	0x08015478
 8009b24:	080154ac 	.word	0x080154ac
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b32:	2200      	movs	r2, #0
 8009b34:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 8009b36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d02c      	beq.n	8009b98 <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	330c      	adds	r3, #12
 8009b46:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009b50:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00f      	beq.n	8009b8a <lwip_netconn_do_writemore+0x32a>
 8009b6a:	f00a f93d 	bl	8013de8 <sys_arch_protect>
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009b76:	f113 0f0c 	cmn.w	r3, #12
 8009b7a:	db03      	blt.n	8009b84 <lwip_netconn_do_writemore+0x324>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009b82:	721a      	strb	r2, [r3, #8]
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f00a f93d 	bl	8013e04 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009b8a:	78fb      	ldrb	r3, [r7, #3]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d006      	beq.n	8009b9e <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8009b90:	6938      	ldr	r0, [r7, #16]
 8009b92:	f00a f894 	bl	8013cbe <sys_sem_signal>
 8009b96:	e002      	b.n	8009b9e <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8009b98:	f04f 33ff 	mov.w	r3, #4294967295
 8009b9c:	e000      	b.n	8009ba0 <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3728      	adds	r7, #40	; 0x28
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009bbc:	f113 0f0c 	cmn.w	r3, #12
 8009bc0:	da06      	bge.n	8009bd0 <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	711a      	strb	r2, [r3, #4]
 8009bce:	e072      	b.n	8009cb6 <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bda:	2b10      	cmp	r3, #16
 8009bdc:	d168      	bne.n	8009cb0 <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	785b      	ldrb	r3, [r3, #1]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d003      	beq.n	8009bf0 <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	22fb      	movs	r2, #251	; 0xfb
 8009bec:	711a      	strb	r2, [r3, #4]
 8009bee:	e062      	b.n	8009cb6 <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d056      	beq.n	8009ca8 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d104      	bne.n	8009c16 <lwip_netconn_do_write+0x6e>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6a1b      	ldr	r3, [r3, #32]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d006      	beq.n	8009c24 <lwip_netconn_do_write+0x7c>
 8009c16:	4b36      	ldr	r3, [pc, #216]	; (8009cf0 <lwip_netconn_do_write+0x148>)
 8009c18:	f240 6283 	movw	r2, #1667	; 0x683
 8009c1c:	4935      	ldr	r1, [pc, #212]	; (8009cf4 <lwip_netconn_do_write+0x14c>)
 8009c1e:	4836      	ldr	r0, [pc, #216]	; (8009cf8 <lwip_netconn_do_write+0x150>)
 8009c20:	f00a f946 	bl	8013eb0 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d106      	bne.n	8009c3a <lwip_netconn_do_write+0x92>
 8009c2c:	4b30      	ldr	r3, [pc, #192]	; (8009cf0 <lwip_netconn_do_write+0x148>)
 8009c2e:	f240 6284 	movw	r2, #1668	; 0x684
 8009c32:	4932      	ldr	r1, [pc, #200]	; (8009cfc <lwip_netconn_do_write+0x154>)
 8009c34:	4830      	ldr	r0, [pc, #192]	; (8009cf8 <lwip_netconn_do_write+0x150>)
 8009c36:	f00a f93b 	bl	8013eb0 <iprintf>
        msg->conn->current_msg = msg;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2200      	movs	r2, #0
 8009c48:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	2100      	movs	r1, #0
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7ff fe05 	bl	8009860 <lwip_netconn_do_writemore>
 8009c56:	4603      	mov	r3, r0
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d044      	beq.n	8009ce6 <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	785b      	ldrb	r3, [r3, #1]
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d006      	beq.n	8009c74 <lwip_netconn_do_write+0xcc>
 8009c66:	4b22      	ldr	r3, [pc, #136]	; (8009cf0 <lwip_netconn_do_write+0x148>)
 8009c68:	f240 6289 	movw	r2, #1673	; 0x689
 8009c6c:	4924      	ldr	r1, [pc, #144]	; (8009d00 <lwip_netconn_do_write+0x158>)
 8009c6e:	4822      	ldr	r0, [pc, #136]	; (8009cf8 <lwip_netconn_do_write+0x150>)
 8009c70:	f00a f91e 	bl	8013eb0 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009c74:	4823      	ldr	r0, [pc, #140]	; (8009d04 <lwip_netconn_do_write+0x15c>)
 8009c76:	f00a f88a 	bl	8013d8e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	330c      	adds	r3, #12
 8009c80:	2100      	movs	r1, #0
 8009c82:	4618      	mov	r0, r3
 8009c84:	f009 ffea 	bl	8013c5c <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8009c88:	481e      	ldr	r0, [pc, #120]	; (8009d04 <lwip_netconn_do_write+0x15c>)
 8009c8a:	f00a f871 	bl	8013d70 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	785b      	ldrb	r3, [r3, #1]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d126      	bne.n	8009ce6 <lwip_netconn_do_write+0x13e>
 8009c98:	4b15      	ldr	r3, [pc, #84]	; (8009cf0 <lwip_netconn_do_write+0x148>)
 8009c9a:	f240 628d 	movw	r2, #1677	; 0x68d
 8009c9e:	4918      	ldr	r1, [pc, #96]	; (8009d00 <lwip_netconn_do_write+0x158>)
 8009ca0:	4815      	ldr	r0, [pc, #84]	; (8009cf8 <lwip_netconn_do_write+0x150>)
 8009ca2:	f00a f905 	bl	8013eb0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8009ca6:	e01e      	b.n	8009ce6 <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	22f5      	movs	r2, #245	; 0xf5
 8009cac:	711a      	strb	r2, [r3, #4]
 8009cae:	e002      	b.n	8009cb6 <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	22fa      	movs	r2, #250	; 0xfa
 8009cb4:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d014      	beq.n	8009ce8 <lwip_netconn_do_write+0x140>
 8009cbe:	f00a f893 	bl	8013de8 <sys_arch_protect>
 8009cc2:	60b8      	str	r0, [r7, #8]
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009ccc:	f113 0f0c 	cmn.w	r3, #12
 8009cd0:	db05      	blt.n	8009cde <lwip_netconn_do_write+0x136>
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009cdc:	721a      	strb	r2, [r3, #8]
 8009cde:	68b8      	ldr	r0, [r7, #8]
 8009ce0:	f00a f890 	bl	8013e04 <sys_arch_unprotect>
 8009ce4:	e000      	b.n	8009ce8 <lwip_netconn_do_write+0x140>
        return;
 8009ce6:	bf00      	nop
}
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	0801503c 	.word	0x0801503c
 8009cf4:	08015384 	.word	0x08015384
 8009cf8:	08015094 	.word	0x08015094
 8009cfc:	080154d8 	.word	0x080154d8
 8009d00:	080153a0 	.word	0x080153a0
 8009d04:	20007468 	.word	0x20007468

08009d08 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b086      	sub	sp, #24
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	785b      	ldrb	r3, [r3, #1]
 8009d1a:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d06e      	beq.n	8009e04 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009d30:	2b10      	cmp	r3, #16
 8009d32:	d167      	bne.n	8009e04 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009d38:	2b03      	cmp	r3, #3
 8009d3a:	d002      	beq.n	8009d42 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009d3c:	7cfb      	ldrb	r3, [r7, #19]
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d060      	beq.n	8009e04 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009d42:	7cfb      	ldrb	r3, [r7, #19]
 8009d44:	2b03      	cmp	r3, #3
 8009d46:	d103      	bne.n	8009d50 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	22f5      	movs	r2, #245	; 0xf5
 8009d4c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009d4e:	e05c      	b.n	8009e0a <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 8009d50:	7cfb      	ldrb	r3, [r7, #19]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d103      	bne.n	8009d5e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	22fb      	movs	r2, #251	; 0xfb
 8009d5a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8009d5c:	e055      	b.n	8009e0a <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	7a1b      	ldrb	r3, [r3, #8]
 8009d62:	f003 0301 	and.w	r3, r3, #1
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d004      	beq.n	8009d74 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f7ff f8fe 	bl	8008f70 <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d104      	bne.n	8009d88 <lwip_netconn_do_close+0x80>
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6a1b      	ldr	r3, [r3, #32]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d006      	beq.n	8009d96 <lwip_netconn_do_close+0x8e>
 8009d88:	4b2e      	ldr	r3, [pc, #184]	; (8009e44 <lwip_netconn_do_close+0x13c>)
 8009d8a:	f240 721c 	movw	r2, #1820	; 0x71c
 8009d8e:	492e      	ldr	r1, [pc, #184]	; (8009e48 <lwip_netconn_do_close+0x140>)
 8009d90:	482e      	ldr	r0, [pc, #184]	; (8009e4c <lwip_netconn_do_close+0x144>)
 8009d92:	f00a f88d 	bl	8013eb0 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2204      	movs	r2, #4
 8009d9c:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	697a      	ldr	r2, [r7, #20]
 8009da4:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2100      	movs	r1, #0
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7ff f95f 	bl	8009070 <lwip_netconn_do_close_internal>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d040      	beq.n	8009e3a <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	785b      	ldrb	r3, [r3, #1]
 8009dbe:	2b04      	cmp	r3, #4
 8009dc0:	d006      	beq.n	8009dd0 <lwip_netconn_do_close+0xc8>
 8009dc2:	4b20      	ldr	r3, [pc, #128]	; (8009e44 <lwip_netconn_do_close+0x13c>)
 8009dc4:	f240 7221 	movw	r2, #1825	; 0x721
 8009dc8:	4921      	ldr	r1, [pc, #132]	; (8009e50 <lwip_netconn_do_close+0x148>)
 8009dca:	4820      	ldr	r0, [pc, #128]	; (8009e4c <lwip_netconn_do_close+0x144>)
 8009dcc:	f00a f870 	bl	8013eb0 <iprintf>
        UNLOCK_TCPIP_CORE();
 8009dd0:	4820      	ldr	r0, [pc, #128]	; (8009e54 <lwip_netconn_do_close+0x14c>)
 8009dd2:	f009 ffdc 	bl	8013d8e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	330c      	adds	r3, #12
 8009ddc:	2100      	movs	r1, #0
 8009dde:	4618      	mov	r0, r3
 8009de0:	f009 ff3c 	bl	8013c5c <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8009de4:	481b      	ldr	r0, [pc, #108]	; (8009e54 <lwip_netconn_do_close+0x14c>)
 8009de6:	f009 ffc3 	bl	8013d70 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	785b      	ldrb	r3, [r3, #1]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d022      	beq.n	8009e3a <lwip_netconn_do_close+0x132>
 8009df4:	4b13      	ldr	r3, [pc, #76]	; (8009e44 <lwip_netconn_do_close+0x13c>)
 8009df6:	f240 7225 	movw	r2, #1829	; 0x725
 8009dfa:	4915      	ldr	r1, [pc, #84]	; (8009e50 <lwip_netconn_do_close+0x148>)
 8009dfc:	4813      	ldr	r0, [pc, #76]	; (8009e4c <lwip_netconn_do_close+0x144>)
 8009dfe:	f00a f857 	bl	8013eb0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8009e02:	e01a      	b.n	8009e3a <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	22f5      	movs	r2, #245	; 0xf5
 8009e08:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d014      	beq.n	8009e3c <lwip_netconn_do_close+0x134>
 8009e12:	f009 ffe9 	bl	8013de8 <sys_arch_protect>
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009e20:	f113 0f0c 	cmn.w	r3, #12
 8009e24:	db05      	blt.n	8009e32 <lwip_netconn_do_close+0x12a>
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	697a      	ldr	r2, [r7, #20]
 8009e2c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8009e30:	721a      	strb	r2, [r3, #8]
 8009e32:	68f8      	ldr	r0, [r7, #12]
 8009e34:	f009 ffe6 	bl	8013e04 <sys_arch_unprotect>
 8009e38:	e000      	b.n	8009e3c <lwip_netconn_do_close+0x134>
      return;
 8009e3a:	bf00      	nop
}
 8009e3c:	3718      	adds	r7, #24
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	0801503c 	.word	0x0801503c
 8009e48:	08015384 	.word	0x08015384
 8009e4c:	08015094 	.word	0x08015094
 8009e50:	080153a0 	.word	0x080153a0
 8009e54:	20007468 	.word	0x20007468

08009e58 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d013      	beq.n	8009e8e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00b      	beq.n	8009e86 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4618      	mov	r0, r3
 8009e74:	f001 fb76 	bl	800b564 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	605a      	str	r2, [r3, #4]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	685a      	ldr	r2, [r3, #4]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8009e86:	6879      	ldr	r1, [r7, #4]
 8009e88:	2006      	movs	r0, #6
 8009e8a:	f000 fdb7 	bl	800a9fc <memp_free>
  }
}
 8009e8e:	bf00      	nop
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
	...

08009e98 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8009ea0:	4b29      	ldr	r3, [pc, #164]	; (8009f48 <tcpip_thread+0xb0>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d005      	beq.n	8009eb4 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 8009ea8:	4b27      	ldr	r3, [pc, #156]	; (8009f48 <tcpip_thread+0xb0>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a27      	ldr	r2, [pc, #156]	; (8009f4c <tcpip_thread+0xb4>)
 8009eae:	6812      	ldr	r2, [r2, #0]
 8009eb0:	4610      	mov	r0, r2
 8009eb2:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8009eb4:	4826      	ldr	r0, [pc, #152]	; (8009f50 <tcpip_thread+0xb8>)
 8009eb6:	f009 ff5b 	bl	8013d70 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8009eba:	4825      	ldr	r0, [pc, #148]	; (8009f50 <tcpip_thread+0xb8>)
 8009ebc:	f009 ff67 	bl	8013d8e <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8009ec0:	f107 030c 	add.w	r3, r7, #12
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	4823      	ldr	r0, [pc, #140]	; (8009f54 <tcpip_thread+0xbc>)
 8009ec8:	f007 f8fe 	bl	80110c8 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009ecc:	4820      	ldr	r0, [pc, #128]	; (8009f50 <tcpip_thread+0xb8>)
 8009ece:	f009 ff4f 	bl	8013d70 <sys_mutex_lock>
    if (msg == NULL) {
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d106      	bne.n	8009ee6 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009ed8:	4b1f      	ldr	r3, [pc, #124]	; (8009f58 <tcpip_thread+0xc0>)
 8009eda:	2269      	movs	r2, #105	; 0x69
 8009edc:	491f      	ldr	r1, [pc, #124]	; (8009f5c <tcpip_thread+0xc4>)
 8009ede:	4820      	ldr	r0, [pc, #128]	; (8009f60 <tcpip_thread+0xc8>)
 8009ee0:	f009 ffe6 	bl	8013eb0 <iprintf>
      continue;
 8009ee4:	e02f      	b.n	8009f46 <tcpip_thread+0xae>
    }
    switch (msg->type) {
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	2b03      	cmp	r3, #3
 8009eec:	d011      	beq.n	8009f12 <tcpip_thread+0x7a>
 8009eee:	2b04      	cmp	r3, #4
 8009ef0:	d01b      	beq.n	8009f2a <tcpip_thread+0x92>
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d120      	bne.n	8009f38 <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	6850      	ldr	r0, [r2, #4]
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	6892      	ldr	r2, [r2, #8]
 8009f02:	4611      	mov	r1, r2
 8009f04:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	4619      	mov	r1, r3
 8009f0a:	2009      	movs	r0, #9
 8009f0c:	f000 fd76 	bl	800a9fc <memp_free>
      break;
 8009f10:	e019      	b.n	8009f46 <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	68fa      	ldr	r2, [r7, #12]
 8009f18:	6892      	ldr	r2, [r2, #8]
 8009f1a:	4610      	mov	r0, r2
 8009f1c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	4619      	mov	r1, r3
 8009f22:	2008      	movs	r0, #8
 8009f24:	f000 fd6a 	bl	800a9fc <memp_free>
      break;
 8009f28:	e00d      	b.n	8009f46 <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	68fa      	ldr	r2, [r7, #12]
 8009f30:	6892      	ldr	r2, [r2, #8]
 8009f32:	4610      	mov	r0, r2
 8009f34:	4798      	blx	r3
      break;
 8009f36:	e006      	b.n	8009f46 <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009f38:	4b07      	ldr	r3, [pc, #28]	; (8009f58 <tcpip_thread+0xc0>)
 8009f3a:	229b      	movs	r2, #155	; 0x9b
 8009f3c:	4907      	ldr	r1, [pc, #28]	; (8009f5c <tcpip_thread+0xc4>)
 8009f3e:	4808      	ldr	r0, [pc, #32]	; (8009f60 <tcpip_thread+0xc8>)
 8009f40:	f009 ffb6 	bl	8013eb0 <iprintf>
      break;
 8009f44:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 8009f46:	e7b8      	b.n	8009eba <tcpip_thread+0x22>
 8009f48:	20002908 	.word	0x20002908
 8009f4c:	2000290c 	.word	0x2000290c
 8009f50:	20007468 	.word	0x20007468
 8009f54:	20002910 	.word	0x20002910
 8009f58:	08015504 	.word	0x08015504
 8009f5c:	08015534 	.word	0x08015534
 8009f60:	08015554 	.word	0x08015554

08009f64 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8009f70:	481a      	ldr	r0, [pc, #104]	; (8009fdc <tcpip_inpkt+0x78>)
 8009f72:	f009 fe32 	bl	8013bda <sys_mbox_valid>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d105      	bne.n	8009f88 <tcpip_inpkt+0x24>
 8009f7c:	4b18      	ldr	r3, [pc, #96]	; (8009fe0 <tcpip_inpkt+0x7c>)
 8009f7e:	22b5      	movs	r2, #181	; 0xb5
 8009f80:	4918      	ldr	r1, [pc, #96]	; (8009fe4 <tcpip_inpkt+0x80>)
 8009f82:	4819      	ldr	r0, [pc, #100]	; (8009fe8 <tcpip_inpkt+0x84>)
 8009f84:	f009 ff94 	bl	8013eb0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009f88:	2009      	movs	r0, #9
 8009f8a:	f000 fce5 	bl	800a958 <memp_malloc>
 8009f8e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d102      	bne.n	8009f9c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009f96:	f04f 33ff 	mov.w	r3, #4294967295
 8009f9a:	e01a      	b.n	8009fd2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009fa2:	697b      	ldr	r3, [r7, #20]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8009fb4:	6979      	ldr	r1, [r7, #20]
 8009fb6:	4809      	ldr	r0, [pc, #36]	; (8009fdc <tcpip_inpkt+0x78>)
 8009fb8:	f009 fdad 	bl	8013b16 <sys_mbox_trypost>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d006      	beq.n	8009fd0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009fc2:	6979      	ldr	r1, [r7, #20]
 8009fc4:	2009      	movs	r0, #9
 8009fc6:	f000 fd19 	bl	800a9fc <memp_free>
    return ERR_MEM;
 8009fca:	f04f 33ff 	mov.w	r3, #4294967295
 8009fce:	e000      	b.n	8009fd2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009fd0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	20002910 	.word	0x20002910
 8009fe0:	08015504 	.word	0x08015504
 8009fe4:	0801557c 	.word	0x0801557c
 8009fe8:	08015554 	.word	0x08015554

08009fec <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009ffc:	f003 0318 	and.w	r3, r3, #24
 800a000:	2b00      	cmp	r3, #0
 800a002:	d006      	beq.n	800a012 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a004:	4a08      	ldr	r2, [pc, #32]	; (800a028 <tcpip_input+0x3c>)
 800a006:	6839      	ldr	r1, [r7, #0]
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7ff ffab 	bl	8009f64 <tcpip_inpkt>
 800a00e:	4603      	mov	r3, r0
 800a010:	e005      	b.n	800a01e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800a012:	4a06      	ldr	r2, [pc, #24]	; (800a02c <tcpip_input+0x40>)
 800a014:	6839      	ldr	r1, [r7, #0]
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f7ff ffa4 	bl	8009f64 <tcpip_inpkt>
 800a01c:	4603      	mov	r3, r0
}
 800a01e:	4618      	mov	r0, r3
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	080138dd 	.word	0x080138dd
 800a02c:	080128a5 	.word	0x080128a5

0800a030 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b086      	sub	sp, #24
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	4613      	mov	r3, r2
 800a03c:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800a03e:	481d      	ldr	r0, [pc, #116]	; (800a0b4 <tcpip_callback_with_block+0x84>)
 800a040:	f009 fdcb 	bl	8013bda <sys_mbox_valid>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d105      	bne.n	800a056 <tcpip_callback_with_block+0x26>
 800a04a:	4b1b      	ldr	r3, [pc, #108]	; (800a0b8 <tcpip_callback_with_block+0x88>)
 800a04c:	22ee      	movs	r2, #238	; 0xee
 800a04e:	491b      	ldr	r1, [pc, #108]	; (800a0bc <tcpip_callback_with_block+0x8c>)
 800a050:	481b      	ldr	r0, [pc, #108]	; (800a0c0 <tcpip_callback_with_block+0x90>)
 800a052:	f009 ff2d 	bl	8013eb0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a056:	2008      	movs	r0, #8
 800a058:	f000 fc7e 	bl	800a958 <memp_malloc>
 800a05c:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d102      	bne.n	800a06a <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800a064:	f04f 33ff 	mov.w	r3, #4294967295
 800a068:	e01f      	b.n	800a0aa <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	2203      	movs	r2, #3
 800a06e:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	68ba      	ldr	r2, [r7, #8]
 800a07a:	609a      	str	r2, [r3, #8]
  if (block) {
 800a07c:	79fb      	ldrb	r3, [r7, #7]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d004      	beq.n	800a08c <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800a082:	6979      	ldr	r1, [r7, #20]
 800a084:	480b      	ldr	r0, [pc, #44]	; (800a0b4 <tcpip_callback_with_block+0x84>)
 800a086:	f009 fd31 	bl	8013aec <sys_mbox_post>
 800a08a:	e00d      	b.n	800a0a8 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800a08c:	6979      	ldr	r1, [r7, #20]
 800a08e:	4809      	ldr	r0, [pc, #36]	; (800a0b4 <tcpip_callback_with_block+0x84>)
 800a090:	f009 fd41 	bl	8013b16 <sys_mbox_trypost>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d006      	beq.n	800a0a8 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a09a:	6979      	ldr	r1, [r7, #20]
 800a09c:	2008      	movs	r0, #8
 800a09e:	f000 fcad 	bl	800a9fc <memp_free>
      return ERR_MEM;
 800a0a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a6:	e000      	b.n	800a0aa <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800a0a8:	2300      	movs	r3, #0
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	20002910 	.word	0x20002910
 800a0b8:	08015504 	.word	0x08015504
 800a0bc:	0801557c 	.word	0x0801557c
 800a0c0:	08015554 	.word	0x08015554

0800a0c4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b084      	sub	sp, #16
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800a0d0:	4806      	ldr	r0, [pc, #24]	; (800a0ec <tcpip_send_msg_wait_sem+0x28>)
 800a0d2:	f009 fe4d 	bl	8013d70 <sys_mutex_lock>
  fn(apimsg);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	68b8      	ldr	r0, [r7, #8]
 800a0da:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800a0dc:	4803      	ldr	r0, [pc, #12]	; (800a0ec <tcpip_send_msg_wait_sem+0x28>)
 800a0de:	f009 fe56 	bl	8013d8e <sys_mutex_unlock>
  return ERR_OK;
 800a0e2:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3710      	adds	r7, #16
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	20007468 	.word	0x20007468

0800a0f0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af02      	add	r7, sp, #8
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a0fa:	f000 f868 	bl	800a1ce <lwip_init>

  tcpip_init_done = initfunc;
 800a0fe:	4a17      	ldr	r2, [pc, #92]	; (800a15c <tcpip_init+0x6c>)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a104:	4a16      	ldr	r2, [pc, #88]	; (800a160 <tcpip_init+0x70>)
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a10a:	2106      	movs	r1, #6
 800a10c:	4815      	ldr	r0, [pc, #84]	; (800a164 <tcpip_init+0x74>)
 800a10e:	f009 fcc1 	bl	8013a94 <sys_mbox_new>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d006      	beq.n	800a126 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a118:	4b13      	ldr	r3, [pc, #76]	; (800a168 <tcpip_init+0x78>)
 800a11a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800a11e:	4913      	ldr	r1, [pc, #76]	; (800a16c <tcpip_init+0x7c>)
 800a120:	4813      	ldr	r0, [pc, #76]	; (800a170 <tcpip_init+0x80>)
 800a122:	f009 fec5 	bl	8013eb0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a126:	4813      	ldr	r0, [pc, #76]	; (800a174 <tcpip_init+0x84>)
 800a128:	f009 fe0c 	bl	8013d44 <sys_mutex_new>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d006      	beq.n	800a140 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a132:	4b0d      	ldr	r3, [pc, #52]	; (800a168 <tcpip_init+0x78>)
 800a134:	f240 12d9 	movw	r2, #473	; 0x1d9
 800a138:	490f      	ldr	r1, [pc, #60]	; (800a178 <tcpip_init+0x88>)
 800a13a:	480d      	ldr	r0, [pc, #52]	; (800a170 <tcpip_init+0x80>)
 800a13c:	f009 feb8 	bl	8013eb0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a140:	2318      	movs	r3, #24
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a148:	2200      	movs	r2, #0
 800a14a:	490c      	ldr	r1, [pc, #48]	; (800a17c <tcpip_init+0x8c>)
 800a14c:	480c      	ldr	r0, [pc, #48]	; (800a180 <tcpip_init+0x90>)
 800a14e:	f009 fe2b 	bl	8013da8 <sys_thread_new>
}
 800a152:	bf00      	nop
 800a154:	3708      	adds	r7, #8
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}
 800a15a:	bf00      	nop
 800a15c:	20002908 	.word	0x20002908
 800a160:	2000290c 	.word	0x2000290c
 800a164:	20002910 	.word	0x20002910
 800a168:	08015504 	.word	0x08015504
 800a16c:	0801558c 	.word	0x0801558c
 800a170:	08015554 	.word	0x08015554
 800a174:	20007468 	.word	0x20007468
 800a178:	080155b0 	.word	0x080155b0
 800a17c:	08009e99 	.word	0x08009e99
 800a180:	080155d4 	.word	0x080155d4

0800a184 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	4603      	mov	r3, r0
 800a18c:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800a18e:	88fb      	ldrh	r3, [r7, #6]
 800a190:	ba5b      	rev16	r3, r3
 800a192:	b29b      	uxth	r3, r3
}
 800a194:	4618      	mov	r0, r3
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	bc80      	pop	{r7}
 800a19c:	4770      	bx	lr

0800a19e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a19e:	b480      	push	{r7}
 800a1a0:	b083      	sub	sp, #12
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	061a      	lsls	r2, r3, #24
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	021b      	lsls	r3, r3, #8
 800a1ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a1b2:	431a      	orrs	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	0a1b      	lsrs	r3, r3, #8
 800a1b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a1bc:	431a      	orrs	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	0e1b      	lsrs	r3, r3, #24
 800a1c2:	4313      	orrs	r3, r2
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bc80      	pop	{r7}
 800a1cc:	4770      	bx	lr

0800a1ce <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b082      	sub	sp, #8
 800a1d2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a1d8:	f009 fda8 	bl	8013d2c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a1dc:	f000 f8a6 	bl	800a32c <mem_init>
  memp_init();
 800a1e0:	f000 fb6e 	bl	800a8c0 <memp_init>
  pbuf_init();
  netif_init();
 800a1e4:	f000 fc34 	bl	800aa50 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a1e8:	f006 ff94 	bl	8011114 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a1ec:	f001 fc2e 	bl	800ba4c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800a1f0:	f006 fe26 	bl	8010e40 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a1f4:	bf00      	nop
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a204:	4b40      	ldr	r3, [pc, #256]	; (800a308 <plug_holes+0x10c>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d206      	bcs.n	800a21c <plug_holes+0x20>
 800a20e:	4b3f      	ldr	r3, [pc, #252]	; (800a30c <plug_holes+0x110>)
 800a210:	f240 125d 	movw	r2, #349	; 0x15d
 800a214:	493e      	ldr	r1, [pc, #248]	; (800a310 <plug_holes+0x114>)
 800a216:	483f      	ldr	r0, [pc, #252]	; (800a314 <plug_holes+0x118>)
 800a218:	f009 fe4a 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a21c:	4b3e      	ldr	r3, [pc, #248]	; (800a318 <plug_holes+0x11c>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	429a      	cmp	r2, r3
 800a224:	d306      	bcc.n	800a234 <plug_holes+0x38>
 800a226:	4b39      	ldr	r3, [pc, #228]	; (800a30c <plug_holes+0x110>)
 800a228:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800a22c:	493b      	ldr	r1, [pc, #236]	; (800a31c <plug_holes+0x120>)
 800a22e:	4839      	ldr	r0, [pc, #228]	; (800a314 <plug_holes+0x118>)
 800a230:	f009 fe3e 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	791b      	ldrb	r3, [r3, #4]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d006      	beq.n	800a24a <plug_holes+0x4e>
 800a23c:	4b33      	ldr	r3, [pc, #204]	; (800a30c <plug_holes+0x110>)
 800a23e:	f240 125f 	movw	r2, #351	; 0x15f
 800a242:	4937      	ldr	r1, [pc, #220]	; (800a320 <plug_holes+0x124>)
 800a244:	4833      	ldr	r0, [pc, #204]	; (800a314 <plug_holes+0x118>)
 800a246:	f009 fe33 	bl	8013eb0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	881b      	ldrh	r3, [r3, #0]
 800a24e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a252:	d906      	bls.n	800a262 <plug_holes+0x66>
 800a254:	4b2d      	ldr	r3, [pc, #180]	; (800a30c <plug_holes+0x110>)
 800a256:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800a25a:	4932      	ldr	r1, [pc, #200]	; (800a324 <plug_holes+0x128>)
 800a25c:	482d      	ldr	r0, [pc, #180]	; (800a314 <plug_holes+0x118>)
 800a25e:	f009 fe27 	bl	8013eb0 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800a262:	4b29      	ldr	r3, [pc, #164]	; (800a308 <plug_holes+0x10c>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	8812      	ldrh	r2, [r2, #0]
 800a26a:	4413      	add	r3, r2
 800a26c:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a26e:	687a      	ldr	r2, [r7, #4]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	429a      	cmp	r2, r3
 800a274:	d01f      	beq.n	800a2b6 <plug_holes+0xba>
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	791b      	ldrb	r3, [r3, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d11b      	bne.n	800a2b6 <plug_holes+0xba>
 800a27e:	4b26      	ldr	r3, [pc, #152]	; (800a318 <plug_holes+0x11c>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	429a      	cmp	r2, r3
 800a286:	d016      	beq.n	800a2b6 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a288:	4b27      	ldr	r3, [pc, #156]	; (800a328 <plug_holes+0x12c>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d102      	bne.n	800a298 <plug_holes+0x9c>
      lfree = mem;
 800a292:	4a25      	ldr	r2, [pc, #148]	; (800a328 <plug_holes+0x12c>)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	881a      	ldrh	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a19      	ldr	r2, [pc, #100]	; (800a308 <plug_holes+0x10c>)
 800a2a4:	6812      	ldr	r2, [r2, #0]
 800a2a6:	1a99      	subs	r1, r3, r2
 800a2a8:	4b17      	ldr	r3, [pc, #92]	; (800a308 <plug_holes+0x10c>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	68fa      	ldr	r2, [r7, #12]
 800a2ae:	8812      	ldrh	r2, [r2, #0]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	b28a      	uxth	r2, r1
 800a2b4:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800a2b6:	4b14      	ldr	r3, [pc, #80]	; (800a308 <plug_holes+0x10c>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	8852      	ldrh	r2, [r2, #2]
 800a2be:	4413      	add	r3, r2
 800a2c0:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a2c2:	68ba      	ldr	r2, [r7, #8]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d01a      	beq.n	800a300 <plug_holes+0x104>
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	791b      	ldrb	r3, [r3, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d116      	bne.n	800a300 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a2d2:	4b15      	ldr	r3, [pc, #84]	; (800a328 <plug_holes+0x12c>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d102      	bne.n	800a2e2 <plug_holes+0xe6>
      lfree = pmem;
 800a2dc:	4a12      	ldr	r2, [pc, #72]	; (800a328 <plug_holes+0x12c>)
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	881a      	ldrh	r2, [r3, #0]
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	4a06      	ldr	r2, [pc, #24]	; (800a308 <plug_holes+0x10c>)
 800a2ee:	6812      	ldr	r2, [r2, #0]
 800a2f0:	1a99      	subs	r1, r3, r2
 800a2f2:	4b05      	ldr	r3, [pc, #20]	; (800a308 <plug_holes+0x10c>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	8812      	ldrh	r2, [r2, #0]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	b28a      	uxth	r2, r1
 800a2fe:	805a      	strh	r2, [r3, #2]
  }
}
 800a300:	bf00      	nop
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	20002914 	.word	0x20002914
 800a30c:	080155e4 	.word	0x080155e4
 800a310:	08015614 	.word	0x08015614
 800a314:	0801562c 	.word	0x0801562c
 800a318:	20002918 	.word	0x20002918
 800a31c:	08015654 	.word	0x08015654
 800a320:	08015670 	.word	0x08015670
 800a324:	0801568c 	.word	0x0801568c
 800a328:	2000291c 	.word	0x2000291c

0800a32c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a332:	4b1e      	ldr	r3, [pc, #120]	; (800a3ac <mem_init+0x80>)
 800a334:	3303      	adds	r3, #3
 800a336:	f023 0303 	bic.w	r3, r3, #3
 800a33a:	461a      	mov	r2, r3
 800a33c:	4b1c      	ldr	r3, [pc, #112]	; (800a3b0 <mem_init+0x84>)
 800a33e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a340:	4b1b      	ldr	r3, [pc, #108]	; (800a3b0 <mem_init+0x84>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a34c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800a35a:	4b15      	ldr	r3, [pc, #84]	; (800a3b0 <mem_init+0x84>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800a362:	4a14      	ldr	r2, [pc, #80]	; (800a3b4 <mem_init+0x88>)
 800a364:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a366:	4b13      	ldr	r3, [pc, #76]	; (800a3b4 <mem_init+0x88>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2201      	movs	r2, #1
 800a36c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a36e:	4b11      	ldr	r3, [pc, #68]	; (800a3b4 <mem_init+0x88>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a376:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a378:	4b0e      	ldr	r3, [pc, #56]	; (800a3b4 <mem_init+0x88>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800a380:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a382:	4b0b      	ldr	r3, [pc, #44]	; (800a3b0 <mem_init+0x84>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a0c      	ldr	r2, [pc, #48]	; (800a3b8 <mem_init+0x8c>)
 800a388:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a38a:	480c      	ldr	r0, [pc, #48]	; (800a3bc <mem_init+0x90>)
 800a38c:	f009 fcda 	bl	8013d44 <sys_mutex_new>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d006      	beq.n	800a3a4 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a396:	4b0a      	ldr	r3, [pc, #40]	; (800a3c0 <mem_init+0x94>)
 800a398:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800a39c:	4909      	ldr	r1, [pc, #36]	; (800a3c4 <mem_init+0x98>)
 800a39e:	480a      	ldr	r0, [pc, #40]	; (800a3c8 <mem_init+0x9c>)
 800a3a0:	f009 fd86 	bl	8013eb0 <iprintf>
  }
}
 800a3a4:	bf00      	nop
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	20007484 	.word	0x20007484
 800a3b0:	20002914 	.word	0x20002914
 800a3b4:	20002918 	.word	0x20002918
 800a3b8:	2000291c 	.word	0x2000291c
 800a3bc:	20002920 	.word	0x20002920
 800a3c0:	080155e4 	.word	0x080155e4
 800a3c4:	080156b8 	.word	0x080156b8
 800a3c8:	0801562c 	.word	0x0801562c

0800a3cc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d050      	beq.n	800a47c <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f003 0303 	and.w	r3, r3, #3
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d006      	beq.n	800a3f2 <mem_free+0x26>
 800a3e4:	4b27      	ldr	r3, [pc, #156]	; (800a484 <mem_free+0xb8>)
 800a3e6:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800a3ea:	4927      	ldr	r1, [pc, #156]	; (800a488 <mem_free+0xbc>)
 800a3ec:	4827      	ldr	r0, [pc, #156]	; (800a48c <mem_free+0xc0>)
 800a3ee:	f009 fd5f 	bl	8013eb0 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a3f2:	4b27      	ldr	r3, [pc, #156]	; (800a490 <mem_free+0xc4>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d304      	bcc.n	800a406 <mem_free+0x3a>
 800a3fc:	4b25      	ldr	r3, [pc, #148]	; (800a494 <mem_free+0xc8>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	429a      	cmp	r2, r3
 800a404:	d306      	bcc.n	800a414 <mem_free+0x48>
 800a406:	4b1f      	ldr	r3, [pc, #124]	; (800a484 <mem_free+0xb8>)
 800a408:	f240 12af 	movw	r2, #431	; 0x1af
 800a40c:	4922      	ldr	r1, [pc, #136]	; (800a498 <mem_free+0xcc>)
 800a40e:	481f      	ldr	r0, [pc, #124]	; (800a48c <mem_free+0xc0>)
 800a410:	f009 fd4e 	bl	8013eb0 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a414:	4b1e      	ldr	r3, [pc, #120]	; (800a490 <mem_free+0xc4>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d304      	bcc.n	800a428 <mem_free+0x5c>
 800a41e:	4b1d      	ldr	r3, [pc, #116]	; (800a494 <mem_free+0xc8>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	429a      	cmp	r2, r3
 800a426:	d306      	bcc.n	800a436 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800a428:	f009 fcde 	bl	8013de8 <sys_arch_protect>
 800a42c:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800a42e:	68b8      	ldr	r0, [r7, #8]
 800a430:	f009 fce8 	bl	8013e04 <sys_arch_unprotect>
    return;
 800a434:	e023      	b.n	800a47e <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a436:	4819      	ldr	r0, [pc, #100]	; (800a49c <mem_free+0xd0>)
 800a438:	f009 fc9a 	bl	8013d70 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	3b08      	subs	r3, #8
 800a440:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	791b      	ldrb	r3, [r3, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d106      	bne.n	800a458 <mem_free+0x8c>
 800a44a:	4b0e      	ldr	r3, [pc, #56]	; (800a484 <mem_free+0xb8>)
 800a44c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800a450:	4913      	ldr	r1, [pc, #76]	; (800a4a0 <mem_free+0xd4>)
 800a452:	480e      	ldr	r0, [pc, #56]	; (800a48c <mem_free+0xc0>)
 800a454:	f009 fd2c 	bl	8013eb0 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a45e:	4b11      	ldr	r3, [pc, #68]	; (800a4a4 <mem_free+0xd8>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	429a      	cmp	r2, r3
 800a466:	d202      	bcs.n	800a46e <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a468:	4a0e      	ldr	r2, [pc, #56]	; (800a4a4 <mem_free+0xd8>)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f7ff fec4 	bl	800a1fc <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a474:	4809      	ldr	r0, [pc, #36]	; (800a49c <mem_free+0xd0>)
 800a476:	f009 fc8a 	bl	8013d8e <sys_mutex_unlock>
 800a47a:	e000      	b.n	800a47e <mem_free+0xb2>
    return;
 800a47c:	bf00      	nop
}
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	080155e4 	.word	0x080155e4
 800a488:	080156d4 	.word	0x080156d4
 800a48c:	0801562c 	.word	0x0801562c
 800a490:	20002914 	.word	0x20002914
 800a494:	20002918 	.word	0x20002918
 800a498:	080156f8 	.word	0x080156f8
 800a49c:	20002920 	.word	0x20002920
 800a4a0:	08015710 	.word	0x08015710
 800a4a4:	2000291c 	.word	0x2000291c

0800a4a8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b088      	sub	sp, #32
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800a4b4:	887b      	ldrh	r3, [r7, #2]
 800a4b6:	3303      	adds	r3, #3
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	f023 0303 	bic.w	r3, r3, #3
 800a4be:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800a4c0:	887b      	ldrh	r3, [r7, #2]
 800a4c2:	2b0b      	cmp	r3, #11
 800a4c4:	d801      	bhi.n	800a4ca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a4c6:	230c      	movs	r3, #12
 800a4c8:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800a4ca:	887b      	ldrh	r3, [r7, #2]
 800a4cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a4d0:	d901      	bls.n	800a4d6 <mem_trim+0x2e>
    return NULL;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	e0bd      	b.n	800a652 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a4d6:	4b61      	ldr	r3, [pc, #388]	; (800a65c <mem_trim+0x1b4>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d304      	bcc.n	800a4ea <mem_trim+0x42>
 800a4e0:	4b5f      	ldr	r3, [pc, #380]	; (800a660 <mem_trim+0x1b8>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d306      	bcc.n	800a4f8 <mem_trim+0x50>
 800a4ea:	4b5e      	ldr	r3, [pc, #376]	; (800a664 <mem_trim+0x1bc>)
 800a4ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a4f0:	495d      	ldr	r1, [pc, #372]	; (800a668 <mem_trim+0x1c0>)
 800a4f2:	485e      	ldr	r0, [pc, #376]	; (800a66c <mem_trim+0x1c4>)
 800a4f4:	f009 fcdc 	bl	8013eb0 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a4f8:	4b58      	ldr	r3, [pc, #352]	; (800a65c <mem_trim+0x1b4>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d304      	bcc.n	800a50c <mem_trim+0x64>
 800a502:	4b57      	ldr	r3, [pc, #348]	; (800a660 <mem_trim+0x1b8>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d307      	bcc.n	800a51c <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800a50c:	f009 fc6c 	bl	8013de8 <sys_arch_protect>
 800a510:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f009 fc76 	bl	8013e04 <sys_arch_unprotect>
    return rmem;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	e09a      	b.n	800a652 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	3b08      	subs	r3, #8
 800a520:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	4a4d      	ldr	r2, [pc, #308]	; (800a65c <mem_trim+0x1b4>)
 800a526:	6812      	ldr	r2, [r2, #0]
 800a528:	1a9b      	subs	r3, r3, r2
 800a52a:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	881a      	ldrh	r2, [r3, #0]
 800a530:	8b7b      	ldrh	r3, [r7, #26]
 800a532:	1ad3      	subs	r3, r2, r3
 800a534:	b29b      	uxth	r3, r3
 800a536:	3b08      	subs	r3, #8
 800a538:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a53a:	887a      	ldrh	r2, [r7, #2]
 800a53c:	8b3b      	ldrh	r3, [r7, #24]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d906      	bls.n	800a550 <mem_trim+0xa8>
 800a542:	4b48      	ldr	r3, [pc, #288]	; (800a664 <mem_trim+0x1bc>)
 800a544:	f240 2206 	movw	r2, #518	; 0x206
 800a548:	4949      	ldr	r1, [pc, #292]	; (800a670 <mem_trim+0x1c8>)
 800a54a:	4848      	ldr	r0, [pc, #288]	; (800a66c <mem_trim+0x1c4>)
 800a54c:	f009 fcb0 	bl	8013eb0 <iprintf>
  if (newsize > size) {
 800a550:	887a      	ldrh	r2, [r7, #2]
 800a552:	8b3b      	ldrh	r3, [r7, #24]
 800a554:	429a      	cmp	r2, r3
 800a556:	d901      	bls.n	800a55c <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800a558:	2300      	movs	r3, #0
 800a55a:	e07a      	b.n	800a652 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800a55c:	887a      	ldrh	r2, [r7, #2]
 800a55e:	8b3b      	ldrh	r3, [r7, #24]
 800a560:	429a      	cmp	r2, r3
 800a562:	d101      	bne.n	800a568 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	e074      	b.n	800a652 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a568:	4842      	ldr	r0, [pc, #264]	; (800a674 <mem_trim+0x1cc>)
 800a56a:	f009 fc01 	bl	8013d70 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800a56e:	4b3b      	ldr	r3, [pc, #236]	; (800a65c <mem_trim+0x1b4>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	69fa      	ldr	r2, [r7, #28]
 800a574:	8812      	ldrh	r2, [r2, #0]
 800a576:	4413      	add	r3, r2
 800a578:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	791b      	ldrb	r3, [r3, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d131      	bne.n	800a5e6 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	881b      	ldrh	r3, [r3, #0]
 800a586:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800a588:	8b7a      	ldrh	r2, [r7, #26]
 800a58a:	887b      	ldrh	r3, [r7, #2]
 800a58c:	4413      	add	r3, r2
 800a58e:	b29b      	uxth	r3, r3
 800a590:	3308      	adds	r3, #8
 800a592:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800a594:	4b38      	ldr	r3, [pc, #224]	; (800a678 <mem_trim+0x1d0>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	697a      	ldr	r2, [r7, #20]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d105      	bne.n	800a5aa <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800a59e:	4b2f      	ldr	r3, [pc, #188]	; (800a65c <mem_trim+0x1b4>)
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	8a7b      	ldrh	r3, [r7, #18]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	4a34      	ldr	r2, [pc, #208]	; (800a678 <mem_trim+0x1d0>)
 800a5a8:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800a5aa:	4b2c      	ldr	r3, [pc, #176]	; (800a65c <mem_trim+0x1b4>)
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	8a7b      	ldrh	r3, [r7, #18]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	8a3a      	ldrh	r2, [r7, #16]
 800a5be:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	8b7a      	ldrh	r2, [r7, #26]
 800a5c4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	8a7a      	ldrh	r2, [r7, #18]
 800a5ca:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	881b      	ldrh	r3, [r3, #0]
 800a5d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a5d4:	d039      	beq.n	800a64a <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800a5d6:	4b21      	ldr	r3, [pc, #132]	; (800a65c <mem_trim+0x1b4>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	697a      	ldr	r2, [r7, #20]
 800a5dc:	8812      	ldrh	r2, [r2, #0]
 800a5de:	4413      	add	r3, r2
 800a5e0:	8a7a      	ldrh	r2, [r7, #18]
 800a5e2:	805a      	strh	r2, [r3, #2]
 800a5e4:	e031      	b.n	800a64a <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a5e6:	887b      	ldrh	r3, [r7, #2]
 800a5e8:	f103 0214 	add.w	r2, r3, #20
 800a5ec:	8b3b      	ldrh	r3, [r7, #24]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d82b      	bhi.n	800a64a <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800a5f2:	8b7a      	ldrh	r2, [r7, #26]
 800a5f4:	887b      	ldrh	r3, [r7, #2]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	b29b      	uxth	r3, r3
 800a5fa:	3308      	adds	r3, #8
 800a5fc:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800a5fe:	4b17      	ldr	r3, [pc, #92]	; (800a65c <mem_trim+0x1b4>)
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	8a7b      	ldrh	r3, [r7, #18]
 800a604:	4413      	add	r3, r2
 800a606:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800a608:	4b1b      	ldr	r3, [pc, #108]	; (800a678 <mem_trim+0x1d0>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	697a      	ldr	r2, [r7, #20]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d202      	bcs.n	800a618 <mem_trim+0x170>
      lfree = mem2;
 800a612:	4a19      	ldr	r2, [pc, #100]	; (800a678 <mem_trim+0x1d0>)
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	2200      	movs	r2, #0
 800a61c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	881a      	ldrh	r2, [r3, #0]
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	8b7a      	ldrh	r2, [r7, #26]
 800a62a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	8a7a      	ldrh	r2, [r7, #18]
 800a630:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a63a:	d006      	beq.n	800a64a <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800a63c:	4b07      	ldr	r3, [pc, #28]	; (800a65c <mem_trim+0x1b4>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	697a      	ldr	r2, [r7, #20]
 800a642:	8812      	ldrh	r2, [r2, #0]
 800a644:	4413      	add	r3, r2
 800a646:	8a7a      	ldrh	r2, [r7, #18]
 800a648:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a64a:	480a      	ldr	r0, [pc, #40]	; (800a674 <mem_trim+0x1cc>)
 800a64c:	f009 fb9f 	bl	8013d8e <sys_mutex_unlock>
  return rmem;
 800a650:	687b      	ldr	r3, [r7, #4]
}
 800a652:	4618      	mov	r0, r3
 800a654:	3720      	adds	r7, #32
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	20002914 	.word	0x20002914
 800a660:	20002918 	.word	0x20002918
 800a664:	080155e4 	.word	0x080155e4
 800a668:	08015724 	.word	0x08015724
 800a66c:	0801562c 	.word	0x0801562c
 800a670:	0801573c 	.word	0x0801573c
 800a674:	20002920 	.word	0x20002920
 800a678:	2000291c 	.word	0x2000291c

0800a67c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b088      	sub	sp, #32
 800a680:	af00      	add	r7, sp, #0
 800a682:	4603      	mov	r3, r0
 800a684:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800a686:	88fb      	ldrh	r3, [r7, #6]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d101      	bne.n	800a690 <mem_malloc+0x14>
    return NULL;
 800a68c:	2300      	movs	r3, #0
 800a68e:	e0d1      	b.n	800a834 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800a690:	88fb      	ldrh	r3, [r7, #6]
 800a692:	3303      	adds	r3, #3
 800a694:	b29b      	uxth	r3, r3
 800a696:	f023 0303 	bic.w	r3, r3, #3
 800a69a:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800a69c:	88fb      	ldrh	r3, [r7, #6]
 800a69e:	2b0b      	cmp	r3, #11
 800a6a0:	d801      	bhi.n	800a6a6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a6a2:	230c      	movs	r3, #12
 800a6a4:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800a6a6:	88fb      	ldrh	r3, [r7, #6]
 800a6a8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a6ac:	d901      	bls.n	800a6b2 <mem_malloc+0x36>
    return NULL;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	e0c0      	b.n	800a834 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a6b2:	4862      	ldr	r0, [pc, #392]	; (800a83c <mem_malloc+0x1c0>)
 800a6b4:	f009 fb5c 	bl	8013d70 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800a6b8:	4b61      	ldr	r3, [pc, #388]	; (800a840 <mem_malloc+0x1c4>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	461a      	mov	r2, r3
 800a6be:	4b61      	ldr	r3, [pc, #388]	; (800a844 <mem_malloc+0x1c8>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	1ad3      	subs	r3, r2, r3
 800a6c4:	83fb      	strh	r3, [r7, #30]
 800a6c6:	e0aa      	b.n	800a81e <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800a6c8:	4b5e      	ldr	r3, [pc, #376]	; (800a844 <mem_malloc+0x1c8>)
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	8bfb      	ldrh	r3, [r7, #30]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	791b      	ldrb	r3, [r3, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f040 809b 	bne.w	800a812 <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	8bfb      	ldrh	r3, [r7, #30]
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	f1a3 0208 	sub.w	r2, r3, #8
 800a6ea:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	f0c0 8090 	bcc.w	800a812 <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	881b      	ldrh	r3, [r3, #0]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	8bfb      	ldrh	r3, [r7, #30]
 800a6fa:	1ad3      	subs	r3, r2, r3
 800a6fc:	f1a3 0208 	sub.w	r2, r3, #8
 800a700:	88fb      	ldrh	r3, [r7, #6]
 800a702:	3314      	adds	r3, #20
 800a704:	429a      	cmp	r2, r3
 800a706:	d327      	bcc.n	800a758 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800a708:	8bfa      	ldrh	r2, [r7, #30]
 800a70a:	88fb      	ldrh	r3, [r7, #6]
 800a70c:	4413      	add	r3, r2
 800a70e:	b29b      	uxth	r3, r3
 800a710:	3308      	adds	r3, #8
 800a712:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800a714:	4b4b      	ldr	r3, [pc, #300]	; (800a844 <mem_malloc+0x1c8>)
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	8a7b      	ldrh	r3, [r7, #18]
 800a71a:	4413      	add	r3, r2
 800a71c:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	2200      	movs	r2, #0
 800a722:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	881a      	ldrh	r2, [r3, #0]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	8bfa      	ldrh	r2, [r7, #30]
 800a730:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	8a7a      	ldrh	r2, [r7, #18]
 800a736:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	2201      	movs	r2, #1
 800a73c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	881b      	ldrh	r3, [r3, #0]
 800a742:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a746:	d00a      	beq.n	800a75e <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800a748:	4b3e      	ldr	r3, [pc, #248]	; (800a844 <mem_malloc+0x1c8>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	8812      	ldrh	r2, [r2, #0]
 800a750:	4413      	add	r3, r2
 800a752:	8a7a      	ldrh	r2, [r7, #18]
 800a754:	805a      	strh	r2, [r3, #2]
 800a756:	e002      	b.n	800a75e <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	2201      	movs	r2, #1
 800a75c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a75e:	4b38      	ldr	r3, [pc, #224]	; (800a840 <mem_malloc+0x1c4>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	697a      	ldr	r2, [r7, #20]
 800a764:	429a      	cmp	r2, r3
 800a766:	d127      	bne.n	800a7b8 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800a768:	4b35      	ldr	r3, [pc, #212]	; (800a840 <mem_malloc+0x1c4>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a76e:	e005      	b.n	800a77c <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800a770:	4b34      	ldr	r3, [pc, #208]	; (800a844 <mem_malloc+0x1c8>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	69ba      	ldr	r2, [r7, #24]
 800a776:	8812      	ldrh	r2, [r2, #0]
 800a778:	4413      	add	r3, r2
 800a77a:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a77c:	69bb      	ldr	r3, [r7, #24]
 800a77e:	791b      	ldrb	r3, [r3, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d004      	beq.n	800a78e <mem_malloc+0x112>
 800a784:	4b30      	ldr	r3, [pc, #192]	; (800a848 <mem_malloc+0x1cc>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	69ba      	ldr	r2, [r7, #24]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d1f0      	bne.n	800a770 <mem_malloc+0xf4>
          }
          lfree = cur;
 800a78e:	4a2c      	ldr	r2, [pc, #176]	; (800a840 <mem_malloc+0x1c4>)
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a794:	4b2a      	ldr	r3, [pc, #168]	; (800a840 <mem_malloc+0x1c4>)
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	4b2b      	ldr	r3, [pc, #172]	; (800a848 <mem_malloc+0x1cc>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d00b      	beq.n	800a7b8 <mem_malloc+0x13c>
 800a7a0:	4b27      	ldr	r3, [pc, #156]	; (800a840 <mem_malloc+0x1c4>)
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	791b      	ldrb	r3, [r3, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d006      	beq.n	800a7b8 <mem_malloc+0x13c>
 800a7aa:	4b28      	ldr	r3, [pc, #160]	; (800a84c <mem_malloc+0x1d0>)
 800a7ac:	f240 22cf 	movw	r2, #719	; 0x2cf
 800a7b0:	4927      	ldr	r1, [pc, #156]	; (800a850 <mem_malloc+0x1d4>)
 800a7b2:	4828      	ldr	r0, [pc, #160]	; (800a854 <mem_malloc+0x1d8>)
 800a7b4:	f009 fb7c 	bl	8013eb0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a7b8:	4820      	ldr	r0, [pc, #128]	; (800a83c <mem_malloc+0x1c0>)
 800a7ba:	f009 fae8 	bl	8013d8e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a7be:	88fa      	ldrh	r2, [r7, #6]
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	3308      	adds	r3, #8
 800a7c6:	4a20      	ldr	r2, [pc, #128]	; (800a848 <mem_malloc+0x1cc>)
 800a7c8:	6812      	ldr	r2, [r2, #0]
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d906      	bls.n	800a7dc <mem_malloc+0x160>
 800a7ce:	4b1f      	ldr	r3, [pc, #124]	; (800a84c <mem_malloc+0x1d0>)
 800a7d0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800a7d4:	4920      	ldr	r1, [pc, #128]	; (800a858 <mem_malloc+0x1dc>)
 800a7d6:	481f      	ldr	r0, [pc, #124]	; (800a854 <mem_malloc+0x1d8>)
 800a7d8:	f009 fb6a 	bl	8013eb0 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	f003 0303 	and.w	r3, r3, #3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d006      	beq.n	800a7f4 <mem_malloc+0x178>
 800a7e6:	4b19      	ldr	r3, [pc, #100]	; (800a84c <mem_malloc+0x1d0>)
 800a7e8:	f240 22d6 	movw	r2, #726	; 0x2d6
 800a7ec:	491b      	ldr	r1, [pc, #108]	; (800a85c <mem_malloc+0x1e0>)
 800a7ee:	4819      	ldr	r0, [pc, #100]	; (800a854 <mem_malloc+0x1d8>)
 800a7f0:	f009 fb5e 	bl	8013eb0 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	f003 0303 	and.w	r3, r3, #3
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d006      	beq.n	800a80c <mem_malloc+0x190>
 800a7fe:	4b13      	ldr	r3, [pc, #76]	; (800a84c <mem_malloc+0x1d0>)
 800a800:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800a804:	4916      	ldr	r1, [pc, #88]	; (800a860 <mem_malloc+0x1e4>)
 800a806:	4813      	ldr	r0, [pc, #76]	; (800a854 <mem_malloc+0x1d8>)
 800a808:	f009 fb52 	bl	8013eb0 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	3308      	adds	r3, #8
 800a810:	e010      	b.n	800a834 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800a812:	4b0c      	ldr	r3, [pc, #48]	; (800a844 <mem_malloc+0x1c8>)
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	8bfb      	ldrh	r3, [r7, #30]
 800a818:	4413      	add	r3, r2
 800a81a:	881b      	ldrh	r3, [r3, #0]
 800a81c:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800a81e:	8bfa      	ldrh	r2, [r7, #30]
 800a820:	88fb      	ldrh	r3, [r7, #6]
 800a822:	f5c3 63fa 	rsb	r3, r3, #2000	; 0x7d0
 800a826:	429a      	cmp	r2, r3
 800a828:	f4ff af4e 	bcc.w	800a6c8 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a82c:	4803      	ldr	r0, [pc, #12]	; (800a83c <mem_malloc+0x1c0>)
 800a82e:	f009 faae 	bl	8013d8e <sys_mutex_unlock>
  return NULL;
 800a832:	2300      	movs	r3, #0
}
 800a834:	4618      	mov	r0, r3
 800a836:	3720      	adds	r7, #32
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	20002920 	.word	0x20002920
 800a840:	2000291c 	.word	0x2000291c
 800a844:	20002914 	.word	0x20002914
 800a848:	20002918 	.word	0x20002918
 800a84c:	080155e4 	.word	0x080155e4
 800a850:	0801575c 	.word	0x0801575c
 800a854:	0801562c 	.word	0x0801562c
 800a858:	08015778 	.word	0x08015778
 800a85c:	080157a8 	.word	0x080157a8
 800a860:	080157d8 	.word	0x080157d8

0800a864 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a864:	b480      	push	{r7}
 800a866:	b085      	sub	sp, #20
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	2200      	movs	r2, #0
 800a872:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	3303      	adds	r3, #3
 800a87a:	f023 0303 	bic.w	r3, r3, #3
 800a87e:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a880:	2300      	movs	r3, #0
 800a882:	60fb      	str	r3, [r7, #12]
 800a884:	e011      	b.n	800a8aa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	881b      	ldrh	r3, [r3, #0]
 800a89c:	461a      	mov	r2, r3
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	60fb      	str	r3, [r7, #12]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	885b      	ldrh	r3, [r3, #2]
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	dbe7      	blt.n	800a886 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a8b6:	bf00      	nop
 800a8b8:	3714      	adds	r7, #20
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bc80      	pop	{r7}
 800a8be:	4770      	bx	lr

0800a8c0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	80fb      	strh	r3, [r7, #6]
 800a8ca:	e009      	b.n	800a8e0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a8cc:	88fb      	ldrh	r3, [r7, #6]
 800a8ce:	4a08      	ldr	r2, [pc, #32]	; (800a8f0 <memp_init+0x30>)
 800a8d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7ff ffc5 	bl	800a864 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a8da:	88fb      	ldrh	r3, [r7, #6]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	80fb      	strh	r3, [r7, #6]
 800a8e0:	88fb      	ldrh	r3, [r7, #6]
 800a8e2:	2b0c      	cmp	r3, #12
 800a8e4:	d9f2      	bls.n	800a8cc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a8e6:	bf00      	nop
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	08017360 	.word	0x08017360

0800a8f4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a8fc:	f009 fa74 	bl	8013de8 <sys_arch_protect>
 800a900:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d015      	beq.n	800a93c <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	68ba      	ldr	r2, [r7, #8]
 800a916:	6812      	ldr	r2, [r2, #0]
 800a918:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	f003 0303 	and.w	r3, r3, #3
 800a920:	2b00      	cmp	r3, #0
 800a922:	d006      	beq.n	800a932 <do_memp_malloc_pool+0x3e>
 800a924:	4b09      	ldr	r3, [pc, #36]	; (800a94c <do_memp_malloc_pool+0x58>)
 800a926:	f240 1249 	movw	r2, #329	; 0x149
 800a92a:	4909      	ldr	r1, [pc, #36]	; (800a950 <do_memp_malloc_pool+0x5c>)
 800a92c:	4809      	ldr	r0, [pc, #36]	; (800a954 <do_memp_malloc_pool+0x60>)
 800a92e:	f009 fabf 	bl	8013eb0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f009 fa66 	bl	8013e04 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	e003      	b.n	800a944 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f009 fa61 	bl	8013e04 <sys_arch_unprotect>
  return NULL;
 800a942:	2300      	movs	r3, #0
}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	080157fc 	.word	0x080157fc
 800a950:	0801582c 	.word	0x0801582c
 800a954:	08015850 	.word	0x08015850

0800a958 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	4603      	mov	r3, r0
 800a960:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a962:	79fb      	ldrb	r3, [r7, #7]
 800a964:	2b0c      	cmp	r3, #12
 800a966:	d908      	bls.n	800a97a <memp_malloc+0x22>
 800a968:	4b0a      	ldr	r3, [pc, #40]	; (800a994 <memp_malloc+0x3c>)
 800a96a:	f240 1287 	movw	r2, #391	; 0x187
 800a96e:	490a      	ldr	r1, [pc, #40]	; (800a998 <memp_malloc+0x40>)
 800a970:	480a      	ldr	r0, [pc, #40]	; (800a99c <memp_malloc+0x44>)
 800a972:	f009 fa9d 	bl	8013eb0 <iprintf>
 800a976:	2300      	movs	r3, #0
 800a978:	e008      	b.n	800a98c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a97a:	79fb      	ldrb	r3, [r7, #7]
 800a97c:	4a08      	ldr	r2, [pc, #32]	; (800a9a0 <memp_malloc+0x48>)
 800a97e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a982:	4618      	mov	r0, r3
 800a984:	f7ff ffb6 	bl	800a8f4 <do_memp_malloc_pool>
 800a988:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a98a:	68fb      	ldr	r3, [r7, #12]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3710      	adds	r7, #16
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	080157fc 	.word	0x080157fc
 800a998:	0801588c 	.word	0x0801588c
 800a99c:	08015850 	.word	0x08015850
 800a9a0:	08017360 	.word	0x08017360

0800a9a4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	f003 0303 	and.w	r3, r3, #3
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d006      	beq.n	800a9c6 <do_memp_free_pool+0x22>
 800a9b8:	4b0d      	ldr	r3, [pc, #52]	; (800a9f0 <do_memp_free_pool+0x4c>)
 800a9ba:	f240 129d 	movw	r2, #413	; 0x19d
 800a9be:	490d      	ldr	r1, [pc, #52]	; (800a9f4 <do_memp_free_pool+0x50>)
 800a9c0:	480d      	ldr	r0, [pc, #52]	; (800a9f8 <do_memp_free_pool+0x54>)
 800a9c2:	f009 fa75 	bl	8013eb0 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800a9ca:	f009 fa0d 	bl	8013de8 <sys_arch_protect>
 800a9ce:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	689b      	ldr	r3, [r3, #8]
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800a9e2:	68b8      	ldr	r0, [r7, #8]
 800a9e4:	f009 fa0e 	bl	8013e04 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800a9e8:	bf00      	nop
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	080157fc 	.word	0x080157fc
 800a9f4:	080158ac 	.word	0x080158ac
 800a9f8:	08015850 	.word	0x08015850

0800a9fc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	4603      	mov	r3, r0
 800aa04:	6039      	str	r1, [r7, #0]
 800aa06:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800aa08:	79fb      	ldrb	r3, [r7, #7]
 800aa0a:	2b0c      	cmp	r3, #12
 800aa0c:	d907      	bls.n	800aa1e <memp_free+0x22>
 800aa0e:	4b0c      	ldr	r3, [pc, #48]	; (800aa40 <memp_free+0x44>)
 800aa10:	f240 12db 	movw	r2, #475	; 0x1db
 800aa14:	490b      	ldr	r1, [pc, #44]	; (800aa44 <memp_free+0x48>)
 800aa16:	480c      	ldr	r0, [pc, #48]	; (800aa48 <memp_free+0x4c>)
 800aa18:	f009 fa4a 	bl	8013eb0 <iprintf>
 800aa1c:	e00c      	b.n	800aa38 <memp_free+0x3c>

  if (mem == NULL) {
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d008      	beq.n	800aa36 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800aa24:	79fb      	ldrb	r3, [r7, #7]
 800aa26:	4a09      	ldr	r2, [pc, #36]	; (800aa4c <memp_free+0x50>)
 800aa28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa2c:	6839      	ldr	r1, [r7, #0]
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7ff ffb8 	bl	800a9a4 <do_memp_free_pool>
 800aa34:	e000      	b.n	800aa38 <memp_free+0x3c>
    return;
 800aa36:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800aa38:	3708      	adds	r7, #8
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	080157fc 	.word	0x080157fc
 800aa44:	080158cc 	.word	0x080158cc
 800aa48:	08015850 	.word	0x08015850
 800aa4c:	08017360 	.word	0x08017360

0800aa50 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800aa50:	b480      	push	{r7}
 800aa52:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800aa54:	bf00      	nop
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bc80      	pop	{r7}
 800aa5a:	4770      	bx	lr

0800aa5c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	607a      	str	r2, [r7, #4]
 800aa68:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d105      	bne.n	800aa7c <netif_add+0x20>
 800aa70:	4b21      	ldr	r3, [pc, #132]	; (800aaf8 <netif_add+0x9c>)
 800aa72:	22fb      	movs	r2, #251	; 0xfb
 800aa74:	4921      	ldr	r1, [pc, #132]	; (800aafc <netif_add+0xa0>)
 800aa76:	4822      	ldr	r0, [pc, #136]	; (800ab00 <netif_add+0xa4>)
 800aa78:	f009 fa1a 	bl	8013eb0 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2200      	movs	r2, #0
 800aa86:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	2200      	movs	r2, #0
 800aa92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	2203      	movs	r2, #3
 800aa9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	69ba      	ldr	r2, [r7, #24]
 800aaa8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 800aaaa:	4b16      	ldr	r3, [pc, #88]	; (800ab04 <netif_add+0xa8>)
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	1c5a      	adds	r2, r3, #1
 800aab0:	b2d1      	uxtb	r1, r2
 800aab2:	4a14      	ldr	r2, [pc, #80]	; (800ab04 <netif_add+0xa8>)
 800aab4:	7011      	strb	r1, [r2, #0]
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6a3a      	ldr	r2, [r7, #32]
 800aac0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	68b9      	ldr	r1, [r7, #8]
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f000 f81f 	bl	800ab0c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	4798      	blx	r3
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d001      	beq.n	800aade <netif_add+0x82>
    return NULL;
 800aada:	2300      	movs	r3, #0
 800aadc:	e007      	b.n	800aaee <netif_add+0x92>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800aade:	4b0a      	ldr	r3, [pc, #40]	; (800ab08 <netif_add+0xac>)
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800aae6:	4a08      	ldr	r2, [pc, #32]	; (800ab08 <netif_add+0xac>)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800aaec:	68fb      	ldr	r3, [r7, #12]
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	080158e8 	.word	0x080158e8
 800aafc:	0801591c 	.word	0x0801591c
 800ab00:	08015934 	.word	0x08015934
 800ab04:	20002958 	.word	0x20002958
 800ab08:	2000acfc 	.word	0x2000acfc

0800ab0c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
 800ab18:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d003      	beq.n	800ab28 <netif_set_addr+0x1c>
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d10c      	bne.n	800ab42 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800ab28:	68b9      	ldr	r1, [r7, #8]
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f000 f81a 	bl	800ab64 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800ab30:	6879      	ldr	r1, [r7, #4]
 800ab32:	68f8      	ldr	r0, [r7, #12]
 800ab34:	f000 f861 	bl	800abfa <netif_set_netmask>
    netif_set_gw(netif, gw);
 800ab38:	6839      	ldr	r1, [r7, #0]
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	f000 f84a 	bl	800abd4 <netif_set_gw>
 800ab40:	e00b      	b.n	800ab5a <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800ab42:	6879      	ldr	r1, [r7, #4]
 800ab44:	68f8      	ldr	r0, [r7, #12]
 800ab46:	f000 f858 	bl	800abfa <netif_set_netmask>
    netif_set_gw(netif, gw);
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f000 f841 	bl	800abd4 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800ab52:	68b9      	ldr	r1, [r7, #8]
 800ab54:	68f8      	ldr	r0, [r7, #12]
 800ab56:	f000 f805 	bl	800ab64 <netif_set_ipaddr>
  }
}
 800ab5a:	bf00      	nop
 800ab5c:	3710      	adds	r7, #16
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
	...

0800ab64 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d003      	beq.n	800ab7c <netif_set_ipaddr+0x18>
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	60fb      	str	r3, [r7, #12]
 800ab7a:	e002      	b.n	800ab82 <netif_set_ipaddr+0x1e>
 800ab7c:	4b14      	ldr	r3, [pc, #80]	; (800abd0 <netif_set_ipaddr+0x6c>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	3304      	adds	r3, #4
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d01c      	beq.n	800abc8 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	3304      	adds	r3, #4
 800ab92:	f107 020c 	add.w	r2, r7, #12
 800ab96:	4611      	mov	r1, r2
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f002 fb1d 	bl	800d1d8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	3304      	adds	r3, #4
 800aba2:	f107 020c 	add.w	r2, r7, #12
 800aba6:	4611      	mov	r1, r2
 800aba8:	4618      	mov	r0, r3
 800abaa:	f006 fd3f 	bl	801162c <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <netif_set_ipaddr+0x56>
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	e000      	b.n	800abbc <netif_set_ipaddr+0x58>
 800abba:	2300      	movs	r3, #0
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800abc0:	2101      	movs	r1, #1
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 f85d 	bl	800ac82 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800abc8:	bf00      	nop
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	080173d4 	.word	0x080173d4

0800abd4 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d002      	beq.n	800abea <netif_set_gw+0x16>
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	e000      	b.n	800abec <netif_set_gw+0x18>
 800abea:	2300      	movs	r3, #0
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800abf0:	bf00      	nop
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bc80      	pop	{r7}
 800abf8:	4770      	bx	lr

0800abfa <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800abfa:	b480      	push	{r7}
 800abfc:	b083      	sub	sp, #12
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
 800ac02:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d002      	beq.n	800ac10 <netif_set_netmask+0x16>
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	e000      	b.n	800ac12 <netif_set_netmask+0x18>
 800ac10:	2300      	movs	r3, #0
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800ac16:	bf00      	nop
 800ac18:	370c      	adds	r7, #12
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bc80      	pop	{r7}
 800ac1e:	4770      	bx	lr

0800ac20 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b083      	sub	sp, #12
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ac28:	4a03      	ldr	r2, [pc, #12]	; (800ac38 <netif_set_default+0x18>)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ac2e:	bf00      	nop
 800ac30:	370c      	adds	r7, #12
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bc80      	pop	{r7}
 800ac36:	4770      	bx	lr
 800ac38:	2000ad00 	.word	0x2000ad00

0800ac3c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ac4a:	f003 0301 	and.w	r3, r3, #1
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d113      	bne.n	800ac7a <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ac58:	f043 0301 	orr.w	r3, r3, #1
 800ac5c:	b2da      	uxtb	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ac6a:	f003 0304 	and.w	r3, r3, #4
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d003      	beq.n	800ac7a <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800ac72:	2103      	movs	r1, #3
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 f804 	bl	800ac82 <netif_issue_reports>
    }
  }
}
 800ac7a:	bf00      	nop
 800ac7c:	3708      	adds	r7, #8
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800ac82:	b580      	push	{r7, lr}
 800ac84:	b082      	sub	sp, #8
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ac8e:	78fb      	ldrb	r3, [r7, #3]
 800ac90:	f003 0301 	and.w	r3, r3, #1
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d011      	beq.n	800acbc <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	3304      	adds	r3, #4
 800ac9c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00c      	beq.n	800acbc <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800aca8:	f003 0308 	and.w	r3, r3, #8
 800acac:	2b00      	cmp	r3, #0
 800acae:	d005      	beq.n	800acbc <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	3304      	adds	r3, #4
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f007 fbea 	bl	8012490 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800acbc:	bf00      	nop
 800acbe:	3708      	adds	r7, #8
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800acd2:	f003 0301 	and.w	r3, r3, #1
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d012      	beq.n	800ad00 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ace0:	f023 0301 	bic.w	r3, r3, #1
 800ace4:	b2da      	uxtb	r2, r3
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800acf2:	f003 0308 	and.w	r3, r3, #8
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d002      	beq.n	800ad00 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f006 ff8e 	bl	8011c1c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ad00:	bf00      	nop
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ad16:	f003 0304 	and.w	r3, r3, #4
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d11b      	bne.n	800ad56 <netif_set_link_up+0x4e>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ad24:	f043 0304 	orr.w	r3, r3, #4
 800ad28:	b2da      	uxtb	r2, r3
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ad36:	f003 0301 	and.w	r3, r3, #1
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d003      	beq.n	800ad46 <netif_set_link_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800ad3e:	2103      	movs	r1, #3
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f7ff ff9e 	bl	800ac82 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	69db      	ldr	r3, [r3, #28]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d003      	beq.n	800ad56 <netif_set_link_up+0x4e>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	69db      	ldr	r3, [r3, #28]
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	4798      	blx	r3
  }
}
 800ad56:	bf00      	nop
 800ad58:	3708      	adds	r7, #8
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b082      	sub	sp, #8
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ad6c:	f003 0304 	and.w	r3, r3, #4
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d010      	beq.n	800ad96 <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ad7a:	f023 0304 	bic.w	r3, r3, #4
 800ad7e:	b2da      	uxtb	r2, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    NETIF_LINK_CALLBACK(netif);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	69db      	ldr	r3, [r3, #28]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d003      	beq.n	800ad96 <netif_set_link_down+0x38>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	69db      	ldr	r3, [r3, #28]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	4798      	blx	r3
  }
}
 800ad96:	bf00      	nop
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b083      	sub	sp, #12
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
 800ada6:	6039      	str	r1, [r7, #0]
  if (netif) {
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d002      	beq.n	800adb4 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	683a      	ldr	r2, [r7, #0]
 800adb2:	61da      	str	r2, [r3, #28]
  }
}
 800adb4:	bf00      	nop
 800adb6:	370c      	adds	r7, #12
 800adb8:	46bd      	mov	sp, r7
 800adba:	bc80      	pop	{r7}
 800adbc:	4770      	bx	lr
	...

0800adc0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b082      	sub	sp, #8
 800adc4:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800adc6:	f009 f80f 	bl	8013de8 <sys_arch_protect>
 800adca:	6038      	str	r0, [r7, #0]
 800adcc:	4b0f      	ldr	r3, [pc, #60]	; (800ae0c <pbuf_free_ooseq+0x4c>)
 800adce:	2200      	movs	r2, #0
 800add0:	701a      	strb	r2, [r3, #0]
 800add2:	6838      	ldr	r0, [r7, #0]
 800add4:	f009 f816 	bl	8013e04 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800add8:	4b0d      	ldr	r3, [pc, #52]	; (800ae10 <pbuf_free_ooseq+0x50>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	607b      	str	r3, [r7, #4]
 800adde:	e00f      	b.n	800ae00 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d008      	beq.n	800adfa <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adec:	4618      	mov	r0, r3
 800adee:	f001 fe74 	bl	800cada <tcp_segs_free>
      pcb->ooseq = NULL;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800adf8:	e005      	b.n	800ae06 <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	607b      	str	r3, [r7, #4]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1ec      	bne.n	800ade0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800ae06:	3708      	adds	r7, #8
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	2000ad04 	.word	0x2000ad04
 800ae10:	2000ad0c 	.word	0x2000ad0c

0800ae14 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ae1c:	f7ff ffd0 	bl	800adc0 <pbuf_free_ooseq>
}
 800ae20:	bf00      	nop
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800ae2e:	f008 ffdb 	bl	8013de8 <sys_arch_protect>
 800ae32:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800ae34:	4b10      	ldr	r3, [pc, #64]	; (800ae78 <pbuf_pool_is_empty+0x50>)
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ae3a:	4b0f      	ldr	r3, [pc, #60]	; (800ae78 <pbuf_pool_is_empty+0x50>)
 800ae3c:	2201      	movs	r2, #1
 800ae3e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f008 ffdf 	bl	8013e04 <sys_arch_unprotect>

  if (!queued) {
 800ae46:	78fb      	ldrb	r3, [r7, #3]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d110      	bne.n	800ae6e <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	2100      	movs	r1, #0
 800ae50:	480a      	ldr	r0, [pc, #40]	; (800ae7c <pbuf_pool_is_empty+0x54>)
 800ae52:	f7ff f8ed 	bl	800a030 <tcpip_callback_with_block>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d008      	beq.n	800ae6e <pbuf_pool_is_empty+0x46>
 800ae5c:	f008 ffc4 	bl	8013de8 <sys_arch_protect>
 800ae60:	6078      	str	r0, [r7, #4]
 800ae62:	4b05      	ldr	r3, [pc, #20]	; (800ae78 <pbuf_pool_is_empty+0x50>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	701a      	strb	r2, [r3, #0]
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f008 ffcb 	bl	8013e04 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ae6e:	bf00      	nop
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	2000ad04 	.word	0x2000ad04
 800ae7c:	0800ae15 	.word	0x0800ae15

0800ae80 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b088      	sub	sp, #32
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	4603      	mov	r3, r0
 800ae88:	71fb      	strb	r3, [r7, #7]
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	80bb      	strh	r3, [r7, #4]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800ae92:	79fb      	ldrb	r3, [r7, #7]
 800ae94:	2b04      	cmp	r3, #4
 800ae96:	d81c      	bhi.n	800aed2 <pbuf_alloc+0x52>
 800ae98:	a201      	add	r2, pc, #4	; (adr r2, 800aea0 <pbuf_alloc+0x20>)
 800ae9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae9e:	bf00      	nop
 800aea0:	0800aeb5 	.word	0x0800aeb5
 800aea4:	0800aebb 	.word	0x0800aebb
 800aea8:	0800aec1 	.word	0x0800aec1
 800aeac:	0800aec7 	.word	0x0800aec7
 800aeb0:	0800aecd 	.word	0x0800aecd
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800aeb4:	2336      	movs	r3, #54	; 0x36
 800aeb6:	82fb      	strh	r3, [r7, #22]
    break;
 800aeb8:	e014      	b.n	800aee4 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800aeba:	2322      	movs	r3, #34	; 0x22
 800aebc:	82fb      	strh	r3, [r7, #22]
    break;
 800aebe:	e011      	b.n	800aee4 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800aec0:	230e      	movs	r3, #14
 800aec2:	82fb      	strh	r3, [r7, #22]
    break;
 800aec4:	e00e      	b.n	800aee4 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800aec6:	2300      	movs	r3, #0
 800aec8:	82fb      	strh	r3, [r7, #22]
    break;
 800aeca:	e00b      	b.n	800aee4 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	82fb      	strh	r3, [r7, #22]
    break;
 800aed0:	e008      	b.n	800aee4 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800aed2:	4ba5      	ldr	r3, [pc, #660]	; (800b168 <pbuf_alloc+0x2e8>)
 800aed4:	f44f 728b 	mov.w	r2, #278	; 0x116
 800aed8:	49a4      	ldr	r1, [pc, #656]	; (800b16c <pbuf_alloc+0x2ec>)
 800aeda:	48a5      	ldr	r0, [pc, #660]	; (800b170 <pbuf_alloc+0x2f0>)
 800aedc:	f008 ffe8 	bl	8013eb0 <iprintf>
    return NULL;
 800aee0:	2300      	movs	r3, #0
 800aee2:	e15d      	b.n	800b1a0 <pbuf_alloc+0x320>
  }

  switch (type) {
 800aee4:	79bb      	ldrb	r3, [r7, #6]
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	f200 8134 	bhi.w	800b154 <pbuf_alloc+0x2d4>
 800aeec:	a201      	add	r2, pc, #4	; (adr r2, 800aef4 <pbuf_alloc+0x74>)
 800aeee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef2:	bf00      	nop
 800aef4:	0800b095 	.word	0x0800b095
 800aef8:	0800b121 	.word	0x0800b121
 800aefc:	0800b121 	.word	0x0800b121
 800af00:	0800af05 	.word	0x0800af05
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800af04:	200c      	movs	r0, #12
 800af06:	f7ff fd27 	bl	800a958 <memp_malloc>
 800af0a:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d103      	bne.n	800af1a <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800af12:	f7ff ff89 	bl	800ae28 <pbuf_pool_is_empty>
      return NULL;
 800af16:	2300      	movs	r3, #0
 800af18:	e142      	b.n	800b1a0 <pbuf_alloc+0x320>
    }
    p->type = type;
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	79ba      	ldrb	r2, [r7, #6]
 800af1e:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	2200      	movs	r2, #0
 800af24:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800af26:	8afb      	ldrh	r3, [r7, #22]
 800af28:	3310      	adds	r3, #16
 800af2a:	69fa      	ldr	r2, [r7, #28]
 800af2c:	4413      	add	r3, r2
 800af2e:	3303      	adds	r3, #3
 800af30:	f023 0303 	bic.w	r3, r3, #3
 800af34:	461a      	mov	r2, r3
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800af3a:	69fb      	ldr	r3, [r7, #28]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	f003 0303 	and.w	r3, r3, #3
 800af42:	2b00      	cmp	r3, #0
 800af44:	d006      	beq.n	800af54 <pbuf_alloc+0xd4>
 800af46:	4b88      	ldr	r3, [pc, #544]	; (800b168 <pbuf_alloc+0x2e8>)
 800af48:	f240 1229 	movw	r2, #297	; 0x129
 800af4c:	4989      	ldr	r1, [pc, #548]	; (800b174 <pbuf_alloc+0x2f4>)
 800af4e:	4888      	ldr	r0, [pc, #544]	; (800b170 <pbuf_alloc+0x2f0>)
 800af50:	f008 ffae 	bl	8013eb0 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	88ba      	ldrh	r2, [r7, #4]
 800af58:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800af5a:	8afb      	ldrh	r3, [r7, #22]
 800af5c:	3303      	adds	r3, #3
 800af5e:	f023 0303 	bic.w	r3, r3, #3
 800af62:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800af66:	88bb      	ldrh	r3, [r7, #4]
 800af68:	4293      	cmp	r3, r2
 800af6a:	bf28      	it	cs
 800af6c:	4613      	movcs	r3, r2
 800af6e:	b29a      	uxth	r2, r3
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	69fa      	ldr	r2, [r7, #28]
 800af7a:	8952      	ldrh	r2, [r2, #10]
 800af7c:	441a      	add	r2, r3
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800af84:	429a      	cmp	r2, r3
 800af86:	d906      	bls.n	800af96 <pbuf_alloc+0x116>
 800af88:	4b77      	ldr	r3, [pc, #476]	; (800b168 <pbuf_alloc+0x2e8>)
 800af8a:	f44f 7298 	mov.w	r2, #304	; 0x130
 800af8e:	497a      	ldr	r1, [pc, #488]	; (800b178 <pbuf_alloc+0x2f8>)
 800af90:	4877      	ldr	r0, [pc, #476]	; (800b170 <pbuf_alloc+0x2f0>)
 800af92:	f008 ff8d 	bl	8013eb0 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800af96:	8afb      	ldrh	r3, [r7, #22]
 800af98:	3303      	adds	r3, #3
 800af9a:	f023 0303 	bic.w	r3, r3, #3
 800af9e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800afa2:	d106      	bne.n	800afb2 <pbuf_alloc+0x132>
 800afa4:	4b70      	ldr	r3, [pc, #448]	; (800b168 <pbuf_alloc+0x2e8>)
 800afa6:	f44f 7299 	mov.w	r2, #306	; 0x132
 800afaa:	4974      	ldr	r1, [pc, #464]	; (800b17c <pbuf_alloc+0x2fc>)
 800afac:	4870      	ldr	r0, [pc, #448]	; (800b170 <pbuf_alloc+0x2f0>)
 800afae:	f008 ff7f 	bl	8013eb0 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	2201      	movs	r2, #1
 800afb6:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800afb8:	69fb      	ldr	r3, [r7, #28]
 800afba:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800afbc:	88bb      	ldrh	r3, [r7, #4]
 800afbe:	69fa      	ldr	r2, [r7, #28]
 800afc0:	8952      	ldrh	r2, [r2, #10]
 800afc2:	1a9b      	subs	r3, r3, r2
 800afc4:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800afc6:	e061      	b.n	800b08c <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800afc8:	200c      	movs	r0, #12
 800afca:	f7ff fcc5 	bl	800a958 <memp_malloc>
 800afce:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d106      	bne.n	800afe4 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800afd6:	f7ff ff27 	bl	800ae28 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800afda:	69f8      	ldr	r0, [r7, #28]
 800afdc:	f000 fac2 	bl	800b564 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800afe0:	2300      	movs	r3, #0
 800afe2:	e0dd      	b.n	800b1a0 <pbuf_alloc+0x320>
      }
      q->type = type;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	79ba      	ldrb	r2, [r7, #6]
 800afe8:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2200      	movs	r2, #0
 800afee:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2200      	movs	r2, #0
 800aff4:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b002:	4293      	cmp	r3, r2
 800b004:	dd06      	ble.n	800b014 <pbuf_alloc+0x194>
 800b006:	4b58      	ldr	r3, [pc, #352]	; (800b168 <pbuf_alloc+0x2e8>)
 800b008:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800b00c:	495c      	ldr	r1, [pc, #368]	; (800b180 <pbuf_alloc+0x300>)
 800b00e:	4858      	ldr	r0, [pc, #352]	; (800b170 <pbuf_alloc+0x2f0>)
 800b010:	f008 ff4e 	bl	8013eb0 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	b29a      	uxth	r2, r3
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	b29b      	uxth	r3, r3
 800b020:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b024:	bf28      	it	cs
 800b026:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800b02a:	b29a      	uxth	r2, r3
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f103 0210 	add.w	r2, r3, #16
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	f003 0303 	and.w	r3, r3, #3
 800b042:	2b00      	cmp	r3, #0
 800b044:	d006      	beq.n	800b054 <pbuf_alloc+0x1d4>
 800b046:	4b48      	ldr	r3, [pc, #288]	; (800b168 <pbuf_alloc+0x2e8>)
 800b048:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800b04c:	494d      	ldr	r1, [pc, #308]	; (800b184 <pbuf_alloc+0x304>)
 800b04e:	4848      	ldr	r0, [pc, #288]	; (800b170 <pbuf_alloc+0x2f0>)
 800b050:	f008 ff2e 	bl	8013eb0 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	69fa      	ldr	r2, [r7, #28]
 800b05a:	8952      	ldrh	r2, [r2, #10]
 800b05c:	441a      	add	r2, r3
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800b064:	429a      	cmp	r2, r3
 800b066:	d906      	bls.n	800b076 <pbuf_alloc+0x1f6>
 800b068:	4b3f      	ldr	r3, [pc, #252]	; (800b168 <pbuf_alloc+0x2e8>)
 800b06a:	f240 1255 	movw	r2, #341	; 0x155
 800b06e:	4942      	ldr	r1, [pc, #264]	; (800b178 <pbuf_alloc+0x2f8>)
 800b070:	483f      	ldr	r0, [pc, #252]	; (800b170 <pbuf_alloc+0x2f0>)
 800b072:	f008 ff1d 	bl	8013eb0 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2201      	movs	r2, #1
 800b07a:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	895b      	ldrh	r3, [r3, #10]
 800b080:	461a      	mov	r2, r3
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	1a9b      	subs	r3, r3, r2
 800b086:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	dc9a      	bgt.n	800afc8 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800b092:	e07e      	b.n	800b192 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800b094:	8afb      	ldrh	r3, [r7, #22]
 800b096:	3313      	adds	r3, #19
 800b098:	b29b      	uxth	r3, r3
 800b09a:	f023 0303 	bic.w	r3, r3, #3
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	88bb      	ldrh	r3, [r7, #4]
 800b0a2:	3303      	adds	r3, #3
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	f023 0303 	bic.w	r3, r3, #3
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	4413      	add	r3, r2
 800b0ae:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800b0b0:	897a      	ldrh	r2, [r7, #10]
 800b0b2:	88bb      	ldrh	r3, [r7, #4]
 800b0b4:	3303      	adds	r3, #3
 800b0b6:	f023 0303 	bic.w	r3, r3, #3
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d201      	bcs.n	800b0c2 <pbuf_alloc+0x242>
        return NULL;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	e06e      	b.n	800b1a0 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800b0c2:	897b      	ldrh	r3, [r7, #10]
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7ff fad9 	bl	800a67c <mem_malloc>
 800b0ca:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800b0cc:	69fb      	ldr	r3, [r7, #28]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d101      	bne.n	800b0d6 <pbuf_alloc+0x256>
      return NULL;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	e064      	b.n	800b1a0 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800b0d6:	8afb      	ldrh	r3, [r7, #22]
 800b0d8:	3310      	adds	r3, #16
 800b0da:	69fa      	ldr	r2, [r7, #28]
 800b0dc:	4413      	add	r3, r2
 800b0de:	3303      	adds	r3, #3
 800b0e0:	f023 0303 	bic.w	r3, r3, #3
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	88ba      	ldrh	r2, [r7, #4]
 800b0ee:	811a      	strh	r2, [r3, #8]
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	891a      	ldrh	r2, [r3, #8]
 800b0f4:	69fb      	ldr	r3, [r7, #28]
 800b0f6:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	601a      	str	r2, [r3, #0]
    p->type = type;
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	79ba      	ldrb	r2, [r7, #6]
 800b102:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	f003 0303 	and.w	r3, r3, #3
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d03f      	beq.n	800b190 <pbuf_alloc+0x310>
 800b110:	4b15      	ldr	r3, [pc, #84]	; (800b168 <pbuf_alloc+0x2e8>)
 800b112:	f240 1277 	movw	r2, #375	; 0x177
 800b116:	491c      	ldr	r1, [pc, #112]	; (800b188 <pbuf_alloc+0x308>)
 800b118:	4815      	ldr	r0, [pc, #84]	; (800b170 <pbuf_alloc+0x2f0>)
 800b11a:	f008 fec9 	bl	8013eb0 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800b11e:	e037      	b.n	800b190 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b120:	200b      	movs	r0, #11
 800b122:	f7ff fc19 	bl	800a958 <memp_malloc>
 800b126:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800b128:	69fb      	ldr	r3, [r7, #28]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d101      	bne.n	800b132 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800b12e:	2300      	movs	r3, #0
 800b130:	e036      	b.n	800b1a0 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800b132:	69fb      	ldr	r3, [r7, #28]
 800b134:	2200      	movs	r2, #0
 800b136:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	88ba      	ldrh	r2, [r7, #4]
 800b13c:	811a      	strh	r2, [r3, #8]
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	891a      	ldrh	r2, [r3, #8]
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800b146:	69fb      	ldr	r3, [r7, #28]
 800b148:	2200      	movs	r2, #0
 800b14a:	601a      	str	r2, [r3, #0]
    p->type = type;
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	79ba      	ldrb	r2, [r7, #6]
 800b150:	731a      	strb	r2, [r3, #12]
    break;
 800b152:	e01e      	b.n	800b192 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b154:	4b04      	ldr	r3, [pc, #16]	; (800b168 <pbuf_alloc+0x2e8>)
 800b156:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800b15a:	490c      	ldr	r1, [pc, #48]	; (800b18c <pbuf_alloc+0x30c>)
 800b15c:	4804      	ldr	r0, [pc, #16]	; (800b170 <pbuf_alloc+0x2f0>)
 800b15e:	f008 fea7 	bl	8013eb0 <iprintf>
    return NULL;
 800b162:	2300      	movs	r3, #0
 800b164:	e01c      	b.n	800b1a0 <pbuf_alloc+0x320>
 800b166:	bf00      	nop
 800b168:	0801595c 	.word	0x0801595c
 800b16c:	0801598c 	.word	0x0801598c
 800b170:	080159a8 	.word	0x080159a8
 800b174:	080159d0 	.word	0x080159d0
 800b178:	08015a00 	.word	0x08015a00
 800b17c:	08015a34 	.word	0x08015a34
 800b180:	08015a68 	.word	0x08015a68
 800b184:	08015a7c 	.word	0x08015a7c
 800b188:	08015aac 	.word	0x08015aac
 800b18c:	08015ad8 	.word	0x08015ad8
    break;
 800b190:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	2201      	movs	r2, #1
 800b196:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	2200      	movs	r2, #0
 800b19c:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b19e:	69fb      	ldr	r3, [r7, #28]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3720      	adds	r7, #32
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	603b      	str	r3, [r7, #0]
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	71fb      	strb	r3, [r7, #7]
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	80bb      	strh	r3, [r7, #4]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800b1bc:	79fb      	ldrb	r3, [r7, #7]
 800b1be:	2b04      	cmp	r3, #4
 800b1c0:	d81b      	bhi.n	800b1fa <pbuf_alloced_custom+0x52>
 800b1c2:	a201      	add	r2, pc, #4	; (adr r2, 800b1c8 <pbuf_alloced_custom+0x20>)
 800b1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c8:	0800b1dd 	.word	0x0800b1dd
 800b1cc:	0800b1e3 	.word	0x0800b1e3
 800b1d0:	0800b1e9 	.word	0x0800b1e9
 800b1d4:	0800b1ef 	.word	0x0800b1ef
 800b1d8:	0800b1f5 	.word	0x0800b1f5
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800b1dc:	2336      	movs	r3, #54	; 0x36
 800b1de:	81fb      	strh	r3, [r7, #14]
    break;
 800b1e0:	e014      	b.n	800b20c <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800b1e2:	2322      	movs	r3, #34	; 0x22
 800b1e4:	81fb      	strh	r3, [r7, #14]
    break;
 800b1e6:	e011      	b.n	800b20c <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800b1e8:	230e      	movs	r3, #14
 800b1ea:	81fb      	strh	r3, [r7, #14]
    break;
 800b1ec:	e00e      	b.n	800b20c <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	81fb      	strh	r3, [r7, #14]
    break;
 800b1f2:	e00b      	b.n	800b20c <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	81fb      	strh	r3, [r7, #14]
    break;
 800b1f8:	e008      	b.n	800b20c <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800b1fa:	4b1d      	ldr	r3, [pc, #116]	; (800b270 <pbuf_alloced_custom+0xc8>)
 800b1fc:	f240 12c5 	movw	r2, #453	; 0x1c5
 800b200:	491c      	ldr	r1, [pc, #112]	; (800b274 <pbuf_alloced_custom+0xcc>)
 800b202:	481d      	ldr	r0, [pc, #116]	; (800b278 <pbuf_alloced_custom+0xd0>)
 800b204:	f008 fe54 	bl	8013eb0 <iprintf>
    return NULL;
 800b208:	2300      	movs	r3, #0
 800b20a:	e02d      	b.n	800b268 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b20c:	89fb      	ldrh	r3, [r7, #14]
 800b20e:	3303      	adds	r3, #3
 800b210:	f023 0203 	bic.w	r2, r3, #3
 800b214:	88bb      	ldrh	r3, [r7, #4]
 800b216:	441a      	add	r2, r3
 800b218:	8bbb      	ldrh	r3, [r7, #28]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d901      	bls.n	800b222 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b21e:	2300      	movs	r3, #0
 800b220:	e022      	b.n	800b268 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	2200      	movs	r2, #0
 800b226:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800b228:	69bb      	ldr	r3, [r7, #24]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d008      	beq.n	800b240 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b22e:	89fb      	ldrh	r3, [r7, #14]
 800b230:	3303      	adds	r3, #3
 800b232:	f023 0303 	bic.w	r3, r3, #3
 800b236:	69ba      	ldr	r2, [r7, #24]
 800b238:	441a      	add	r2, r3
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	605a      	str	r2, [r3, #4]
 800b23e:	e002      	b.n	800b246 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	2200      	movs	r2, #0
 800b244:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	2202      	movs	r2, #2
 800b24a:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	88ba      	ldrh	r2, [r7, #4]
 800b250:	811a      	strh	r2, [r3, #8]
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	891a      	ldrh	r2, [r3, #8]
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	79ba      	ldrb	r2, [r7, #6]
 800b25e:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	2201      	movs	r2, #1
 800b264:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800b266:	683b      	ldr	r3, [r7, #0]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	0801595c 	.word	0x0801595c
 800b274:	08015af4 	.word	0x08015af4
 800b278:	080159a8 	.word	0x080159a8

0800b27c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b086      	sub	sp, #24
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	460b      	mov	r3, r1
 800b286:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d106      	bne.n	800b29c <pbuf_realloc+0x20>
 800b28e:	4b4b      	ldr	r3, [pc, #300]	; (800b3bc <pbuf_realloc+0x140>)
 800b290:	f240 12f3 	movw	r2, #499	; 0x1f3
 800b294:	494a      	ldr	r1, [pc, #296]	; (800b3c0 <pbuf_realloc+0x144>)
 800b296:	484b      	ldr	r0, [pc, #300]	; (800b3c4 <pbuf_realloc+0x148>)
 800b298:	f008 fe0a 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	7b1b      	ldrb	r3, [r3, #12]
 800b2a0:	2b03      	cmp	r3, #3
 800b2a2:	d012      	beq.n	800b2ca <pbuf_realloc+0x4e>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	7b1b      	ldrb	r3, [r3, #12]
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d00e      	beq.n	800b2ca <pbuf_realloc+0x4e>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	7b1b      	ldrb	r3, [r3, #12]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00a      	beq.n	800b2ca <pbuf_realloc+0x4e>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	7b1b      	ldrb	r3, [r3, #12]
 800b2b8:	2b02      	cmp	r3, #2
 800b2ba:	d006      	beq.n	800b2ca <pbuf_realloc+0x4e>
 800b2bc:	4b3f      	ldr	r3, [pc, #252]	; (800b3bc <pbuf_realloc+0x140>)
 800b2be:	f240 12f7 	movw	r2, #503	; 0x1f7
 800b2c2:	4941      	ldr	r1, [pc, #260]	; (800b3c8 <pbuf_realloc+0x14c>)
 800b2c4:	483f      	ldr	r0, [pc, #252]	; (800b3c4 <pbuf_realloc+0x148>)
 800b2c6:	f008 fdf3 	bl	8013eb0 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	891b      	ldrh	r3, [r3, #8]
 800b2ce:	887a      	ldrh	r2, [r7, #2]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d26f      	bcs.n	800b3b4 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800b2d4:	887b      	ldrh	r3, [r7, #2]
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	8912      	ldrh	r2, [r2, #8]
 800b2da:	1a9b      	subs	r3, r3, r2
 800b2dc:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b2de:	887b      	ldrh	r3, [r7, #2]
 800b2e0:	827b      	strh	r3, [r7, #18]
  q = p;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b2e6:	e025      	b.n	800b334 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	895b      	ldrh	r3, [r3, #10]
 800b2ec:	8a7a      	ldrh	r2, [r7, #18]
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	dd06      	ble.n	800b30a <pbuf_realloc+0x8e>
 800b2fc:	4b2f      	ldr	r3, [pc, #188]	; (800b3bc <pbuf_realloc+0x140>)
 800b2fe:	f240 220b 	movw	r2, #523	; 0x20b
 800b302:	4932      	ldr	r1, [pc, #200]	; (800b3cc <pbuf_realloc+0x150>)
 800b304:	482f      	ldr	r0, [pc, #188]	; (800b3c4 <pbuf_realloc+0x148>)
 800b306:	f008 fdd3 	bl	8013eb0 <iprintf>
    q->tot_len += (u16_t)grow;
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	891a      	ldrh	r2, [r3, #8]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	b29b      	uxth	r3, r3
 800b312:	4413      	add	r3, r2
 800b314:	b29a      	uxth	r2, r3
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d106      	bne.n	800b334 <pbuf_realloc+0xb8>
 800b326:	4b25      	ldr	r3, [pc, #148]	; (800b3bc <pbuf_realloc+0x140>)
 800b328:	f240 220f 	movw	r2, #527	; 0x20f
 800b32c:	4928      	ldr	r1, [pc, #160]	; (800b3d0 <pbuf_realloc+0x154>)
 800b32e:	4825      	ldr	r0, [pc, #148]	; (800b3c4 <pbuf_realloc+0x148>)
 800b330:	f008 fdbe 	bl	8013eb0 <iprintf>
  while (rem_len > q->len) {
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	895b      	ldrh	r3, [r3, #10]
 800b338:	8a7a      	ldrh	r2, [r7, #18]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	d8d4      	bhi.n	800b2e8 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	7b1b      	ldrb	r3, [r3, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d122      	bne.n	800b38c <pbuf_realloc+0x110>
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	895b      	ldrh	r3, [r3, #10]
 800b34a:	8a7a      	ldrh	r2, [r7, #18]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d01d      	beq.n	800b38c <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	7b5b      	ldrb	r3, [r3, #13]
 800b354:	f003 0302 	and.w	r3, r3, #2
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d117      	bne.n	800b38c <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800b35c:	697b      	ldr	r3, [r7, #20]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	461a      	mov	r2, r3
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	1ad3      	subs	r3, r2, r3
 800b366:	b29a      	uxth	r2, r3
 800b368:	8a7b      	ldrh	r3, [r7, #18]
 800b36a:	4413      	add	r3, r2
 800b36c:	b29b      	uxth	r3, r3
 800b36e:	4619      	mov	r1, r3
 800b370:	6978      	ldr	r0, [r7, #20]
 800b372:	f7ff f899 	bl	800a4a8 <mem_trim>
 800b376:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d106      	bne.n	800b38c <pbuf_realloc+0x110>
 800b37e:	4b0f      	ldr	r3, [pc, #60]	; (800b3bc <pbuf_realloc+0x140>)
 800b380:	f240 221d 	movw	r2, #541	; 0x21d
 800b384:	4913      	ldr	r1, [pc, #76]	; (800b3d4 <pbuf_realloc+0x158>)
 800b386:	480f      	ldr	r0, [pc, #60]	; (800b3c4 <pbuf_realloc+0x148>)
 800b388:	f008 fd92 	bl	8013eb0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	8a7a      	ldrh	r2, [r7, #18]
 800b390:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	895a      	ldrh	r2, [r3, #10]
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d004      	beq.n	800b3ac <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f000 f8dc 	bl	800b564 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	601a      	str	r2, [r3, #0]
 800b3b2:	e000      	b.n	800b3b6 <pbuf_realloc+0x13a>
    return;
 800b3b4:	bf00      	nop

}
 800b3b6:	3718      	adds	r7, #24
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}
 800b3bc:	0801595c 	.word	0x0801595c
 800b3c0:	08015b18 	.word	0x08015b18
 800b3c4:	080159a8 	.word	0x080159a8
 800b3c8:	08015b30 	.word	0x08015b30
 800b3cc:	08015b4c 	.word	0x08015b4c
 800b3d0:	08015b60 	.word	0x08015b60
 800b3d4:	08015b78 	.word	0x08015b78

0800b3d8 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	807b      	strh	r3, [r7, #2]
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d106      	bne.n	800b3fc <pbuf_header_impl+0x24>
 800b3ee:	4b46      	ldr	r3, [pc, #280]	; (800b508 <pbuf_header_impl+0x130>)
 800b3f0:	f240 223f 	movw	r2, #575	; 0x23f
 800b3f4:	4945      	ldr	r1, [pc, #276]	; (800b50c <pbuf_header_impl+0x134>)
 800b3f6:	4846      	ldr	r0, [pc, #280]	; (800b510 <pbuf_header_impl+0x138>)
 800b3f8:	f008 fd5a 	bl	8013eb0 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800b3fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d002      	beq.n	800b40a <pbuf_header_impl+0x32>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d101      	bne.n	800b40e <pbuf_header_impl+0x36>
    return 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	e078      	b.n	800b500 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800b40e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b412:	2b00      	cmp	r3, #0
 800b414:	da10      	bge.n	800b438 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800b416:	887b      	ldrh	r3, [r7, #2]
 800b418:	425b      	negs	r3, r3
 800b41a:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	895b      	ldrh	r3, [r3, #10]
 800b420:	89fa      	ldrh	r2, [r7, #14]
 800b422:	429a      	cmp	r2, r3
 800b424:	d90a      	bls.n	800b43c <pbuf_header_impl+0x64>
 800b426:	4b38      	ldr	r3, [pc, #224]	; (800b508 <pbuf_header_impl+0x130>)
 800b428:	f240 2247 	movw	r2, #583	; 0x247
 800b42c:	4939      	ldr	r1, [pc, #228]	; (800b514 <pbuf_header_impl+0x13c>)
 800b42e:	4838      	ldr	r0, [pc, #224]	; (800b510 <pbuf_header_impl+0x138>)
 800b430:	f008 fd3e 	bl	8013eb0 <iprintf>
 800b434:	2301      	movs	r3, #1
 800b436:	e063      	b.n	800b500 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800b438:	887b      	ldrh	r3, [r7, #2]
 800b43a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	7b1b      	ldrb	r3, [r3, #12]
 800b440:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800b448:	89bb      	ldrh	r3, [r7, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d002      	beq.n	800b454 <pbuf_header_impl+0x7c>
 800b44e:	89bb      	ldrh	r3, [r7, #12]
 800b450:	2b03      	cmp	r3, #3
 800b452:	d112      	bne.n	800b47a <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	685a      	ldr	r2, [r3, #4]
 800b458:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b45c:	425b      	negs	r3, r3
 800b45e:	441a      	add	r2, r3
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	685a      	ldr	r2, [r3, #4]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	3310      	adds	r3, #16
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d238      	bcs.n	800b4e2 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	68ba      	ldr	r2, [r7, #8]
 800b474:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800b476:	2301      	movs	r3, #1
 800b478:	e042      	b.n	800b500 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800b47a:	89bb      	ldrh	r3, [r7, #12]
 800b47c:	2b02      	cmp	r3, #2
 800b47e:	d002      	beq.n	800b486 <pbuf_header_impl+0xae>
 800b480:	89bb      	ldrh	r3, [r7, #12]
 800b482:	2b01      	cmp	r3, #1
 800b484:	d124      	bne.n	800b4d0 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800b486:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	da0d      	bge.n	800b4aa <pbuf_header_impl+0xd2>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	895b      	ldrh	r3, [r3, #10]
 800b492:	89fa      	ldrh	r2, [r7, #14]
 800b494:	429a      	cmp	r2, r3
 800b496:	d808      	bhi.n	800b4aa <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	685a      	ldr	r2, [r3, #4]
 800b49c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b4a0:	425b      	negs	r3, r3
 800b4a2:	441a      	add	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	605a      	str	r2, [r3, #4]
 800b4a8:	e011      	b.n	800b4ce <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800b4aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	dd0b      	ble.n	800b4ca <pbuf_header_impl+0xf2>
 800b4b2:	787b      	ldrb	r3, [r7, #1]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d008      	beq.n	800b4ca <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	685a      	ldr	r2, [r3, #4]
 800b4bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b4c0:	425b      	negs	r3, r3
 800b4c2:	441a      	add	r2, r3
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	605a      	str	r2, [r3, #4]
 800b4c8:	e001      	b.n	800b4ce <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e018      	b.n	800b500 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800b4ce:	e008      	b.n	800b4e2 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800b4d0:	4b0d      	ldr	r3, [pc, #52]	; (800b508 <pbuf_header_impl+0x130>)
 800b4d2:	f240 2277 	movw	r2, #631	; 0x277
 800b4d6:	4910      	ldr	r1, [pc, #64]	; (800b518 <pbuf_header_impl+0x140>)
 800b4d8:	480d      	ldr	r0, [pc, #52]	; (800b510 <pbuf_header_impl+0x138>)
 800b4da:	f008 fce9 	bl	8013eb0 <iprintf>
    return 1;
 800b4de:	2301      	movs	r3, #1
 800b4e0:	e00e      	b.n	800b500 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	895a      	ldrh	r2, [r3, #10]
 800b4e6:	887b      	ldrh	r3, [r7, #2]
 800b4e8:	4413      	add	r3, r2
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	891a      	ldrh	r2, [r3, #8]
 800b4f4:	887b      	ldrh	r3, [r7, #2]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	b29a      	uxth	r2, r3
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3710      	adds	r7, #16
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	0801595c 	.word	0x0801595c
 800b50c:	08015b94 	.word	0x08015b94
 800b510:	080159a8 	.word	0x080159a8
 800b514:	08015ba0 	.word	0x08015ba0
 800b518:	08015bc0 	.word	0x08015bc0

0800b51c <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	460b      	mov	r3, r1
 800b526:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800b528:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b52c:	2200      	movs	r2, #0
 800b52e:	4619      	mov	r1, r3
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7ff ff51 	bl	800b3d8 <pbuf_header_impl>
 800b536:	4603      	mov	r3, r0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3708      	adds	r7, #8
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	460b      	mov	r3, r1
 800b54a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800b54c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b550:	2201      	movs	r2, #1
 800b552:	4619      	mov	r1, r3
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f7ff ff3f 	bl	800b3d8 <pbuf_header_impl>
 800b55a:	4603      	mov	r3, r0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b088      	sub	sp, #32
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d10b      	bne.n	800b58a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d106      	bne.n	800b586 <pbuf_free+0x22>
 800b578:	4b41      	ldr	r3, [pc, #260]	; (800b680 <pbuf_free+0x11c>)
 800b57a:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b57e:	4941      	ldr	r1, [pc, #260]	; (800b684 <pbuf_free+0x120>)
 800b580:	4841      	ldr	r0, [pc, #260]	; (800b688 <pbuf_free+0x124>)
 800b582:	f008 fc95 	bl	8013eb0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b586:	2300      	movs	r3, #0
 800b588:	e076      	b.n	800b678 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	7b1b      	ldrb	r3, [r3, #12]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d012      	beq.n	800b5b8 <pbuf_free+0x54>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	7b1b      	ldrb	r3, [r3, #12]
 800b596:	2b01      	cmp	r3, #1
 800b598:	d00e      	beq.n	800b5b8 <pbuf_free+0x54>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	7b1b      	ldrb	r3, [r3, #12]
 800b59e:	2b02      	cmp	r3, #2
 800b5a0:	d00a      	beq.n	800b5b8 <pbuf_free+0x54>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	7b1b      	ldrb	r3, [r3, #12]
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d006      	beq.n	800b5b8 <pbuf_free+0x54>
 800b5aa:	4b35      	ldr	r3, [pc, #212]	; (800b680 <pbuf_free+0x11c>)
 800b5ac:	f240 22de 	movw	r2, #734	; 0x2de
 800b5b0:	4936      	ldr	r1, [pc, #216]	; (800b68c <pbuf_free+0x128>)
 800b5b2:	4835      	ldr	r0, [pc, #212]	; (800b688 <pbuf_free+0x124>)
 800b5b4:	f008 fc7c 	bl	8013eb0 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b5bc:	e058      	b.n	800b670 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b5be:	f008 fc13 	bl	8013de8 <sys_arch_protect>
 800b5c2:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	89db      	ldrh	r3, [r3, #14]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d106      	bne.n	800b5da <pbuf_free+0x76>
 800b5cc:	4b2c      	ldr	r3, [pc, #176]	; (800b680 <pbuf_free+0x11c>)
 800b5ce:	f240 22eb 	movw	r2, #747	; 0x2eb
 800b5d2:	492f      	ldr	r1, [pc, #188]	; (800b690 <pbuf_free+0x12c>)
 800b5d4:	482c      	ldr	r0, [pc, #176]	; (800b688 <pbuf_free+0x124>)
 800b5d6:	f008 fc6b 	bl	8013eb0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	89db      	ldrh	r3, [r3, #14]
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	b29a      	uxth	r2, r3
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	81da      	strh	r2, [r3, #14]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	89db      	ldrh	r3, [r3, #14]
 800b5ea:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800b5ec:	69b8      	ldr	r0, [r7, #24]
 800b5ee:	f008 fc09 	bl	8013e04 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b5f2:	8afb      	ldrh	r3, [r7, #22]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d139      	bne.n	800b66c <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	7b1b      	ldrb	r3, [r3, #12]
 800b602:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	7b5b      	ldrb	r3, [r3, #13]
 800b608:	f003 0302 	and.w	r3, r3, #2
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d011      	beq.n	800b634 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	691b      	ldr	r3, [r3, #16]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d106      	bne.n	800b62a <pbuf_free+0xc6>
 800b61c:	4b18      	ldr	r3, [pc, #96]	; (800b680 <pbuf_free+0x11c>)
 800b61e:	f240 22f9 	movw	r2, #761	; 0x2f9
 800b622:	491c      	ldr	r1, [pc, #112]	; (800b694 <pbuf_free+0x130>)
 800b624:	4818      	ldr	r0, [pc, #96]	; (800b688 <pbuf_free+0x124>)
 800b626:	f008 fc43 	bl	8013eb0 <iprintf>
        pc->custom_free_function(p);
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	691b      	ldr	r3, [r3, #16]
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	4798      	blx	r3
 800b632:	e015      	b.n	800b660 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800b634:	89fb      	ldrh	r3, [r7, #14]
 800b636:	2b03      	cmp	r3, #3
 800b638:	d104      	bne.n	800b644 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800b63a:	6879      	ldr	r1, [r7, #4]
 800b63c:	200c      	movs	r0, #12
 800b63e:	f7ff f9dd 	bl	800a9fc <memp_free>
 800b642:	e00d      	b.n	800b660 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800b644:	89fb      	ldrh	r3, [r7, #14]
 800b646:	2b01      	cmp	r3, #1
 800b648:	d002      	beq.n	800b650 <pbuf_free+0xec>
 800b64a:	89fb      	ldrh	r3, [r7, #14]
 800b64c:	2b02      	cmp	r3, #2
 800b64e:	d104      	bne.n	800b65a <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800b650:	6879      	ldr	r1, [r7, #4]
 800b652:	200b      	movs	r0, #11
 800b654:	f7ff f9d2 	bl	800a9fc <memp_free>
 800b658:	e002      	b.n	800b660 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7fe feb6 	bl	800a3cc <mem_free>
        }
      }
      count++;
 800b660:	7ffb      	ldrb	r3, [r7, #31]
 800b662:	3301      	adds	r3, #1
 800b664:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	607b      	str	r3, [r7, #4]
 800b66a:	e001      	b.n	800b670 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800b66c:	2300      	movs	r3, #0
 800b66e:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1a3      	bne.n	800b5be <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b676:	7ffb      	ldrb	r3, [r7, #31]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3720      	adds	r7, #32
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	0801595c 	.word	0x0801595c
 800b684:	08015b94 	.word	0x08015b94
 800b688:	080159a8 	.word	0x080159a8
 800b68c:	08015bd0 	.word	0x08015bd0
 800b690:	08015be8 	.word	0x08015be8
 800b694:	08015c00 	.word	0x08015c00

0800b698 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b6a4:	e005      	b.n	800b6b2 <pbuf_clen+0x1a>
    ++len;
 800b6a6:	89fb      	ldrh	r3, [r7, #14]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d1f6      	bne.n	800b6a6 <pbuf_clen+0xe>
  }
  return len;
 800b6b8:	89fb      	ldrh	r3, [r7, #14]
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3714      	adds	r7, #20
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bc80      	pop	{r7}
 800b6c2:	4770      	bx	lr

0800b6c4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d016      	beq.n	800b700 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800b6d2:	f008 fb89 	bl	8013de8 <sys_arch_protect>
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	89db      	ldrh	r3, [r3, #14]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	81da      	strh	r2, [r3, #14]
 800b6e4:	68f8      	ldr	r0, [r7, #12]
 800b6e6:	f008 fb8d 	bl	8013e04 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	89db      	ldrh	r3, [r3, #14]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d106      	bne.n	800b700 <pbuf_ref+0x3c>
 800b6f2:	4b05      	ldr	r3, [pc, #20]	; (800b708 <pbuf_ref+0x44>)
 800b6f4:	f240 3239 	movw	r2, #825	; 0x339
 800b6f8:	4904      	ldr	r1, [pc, #16]	; (800b70c <pbuf_ref+0x48>)
 800b6fa:	4805      	ldr	r0, [pc, #20]	; (800b710 <pbuf_ref+0x4c>)
 800b6fc:	f008 fbd8 	bl	8013eb0 <iprintf>
  }
}
 800b700:	bf00      	nop
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	0801595c 	.word	0x0801595c
 800b70c:	08015c24 	.word	0x08015c24
 800b710:	080159a8 	.word	0x080159a8

0800b714 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d002      	beq.n	800b72a <pbuf_cat+0x16>
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d107      	bne.n	800b73a <pbuf_cat+0x26>
 800b72a:	4b20      	ldr	r3, [pc, #128]	; (800b7ac <pbuf_cat+0x98>)
 800b72c:	f240 324d 	movw	r2, #845	; 0x34d
 800b730:	491f      	ldr	r1, [pc, #124]	; (800b7b0 <pbuf_cat+0x9c>)
 800b732:	4820      	ldr	r0, [pc, #128]	; (800b7b4 <pbuf_cat+0xa0>)
 800b734:	f008 fbbc 	bl	8013eb0 <iprintf>
 800b738:	e034      	b.n	800b7a4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	60fb      	str	r3, [r7, #12]
 800b73e:	e00a      	b.n	800b756 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	891a      	ldrh	r2, [r3, #8]
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	891b      	ldrh	r3, [r3, #8]
 800b748:	4413      	add	r3, r2
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	60fb      	str	r3, [r7, #12]
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d1f0      	bne.n	800b740 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	891a      	ldrh	r2, [r3, #8]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	895b      	ldrh	r3, [r3, #10]
 800b766:	429a      	cmp	r2, r3
 800b768:	d006      	beq.n	800b778 <pbuf_cat+0x64>
 800b76a:	4b10      	ldr	r3, [pc, #64]	; (800b7ac <pbuf_cat+0x98>)
 800b76c:	f240 3255 	movw	r2, #853	; 0x355
 800b770:	4911      	ldr	r1, [pc, #68]	; (800b7b8 <pbuf_cat+0xa4>)
 800b772:	4810      	ldr	r0, [pc, #64]	; (800b7b4 <pbuf_cat+0xa0>)
 800b774:	f008 fb9c 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d006      	beq.n	800b78e <pbuf_cat+0x7a>
 800b780:	4b0a      	ldr	r3, [pc, #40]	; (800b7ac <pbuf_cat+0x98>)
 800b782:	f240 3256 	movw	r2, #854	; 0x356
 800b786:	490d      	ldr	r1, [pc, #52]	; (800b7bc <pbuf_cat+0xa8>)
 800b788:	480a      	ldr	r0, [pc, #40]	; (800b7b4 <pbuf_cat+0xa0>)
 800b78a:	f008 fb91 	bl	8013eb0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	891a      	ldrh	r2, [r3, #8]
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	891b      	ldrh	r3, [r3, #8]
 800b796:	4413      	add	r3, r2
 800b798:	b29a      	uxth	r2, r3
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	683a      	ldr	r2, [r7, #0]
 800b7a2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	0801595c 	.word	0x0801595c
 800b7b0:	08015c38 	.word	0x08015c38
 800b7b4:	080159a8 	.word	0x080159a8
 800b7b8:	08015c70 	.word	0x08015c70
 800b7bc:	08015ca0 	.word	0x08015ca0

0800b7c0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b084      	sub	sp, #16
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
 800b7c8:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	81fb      	strh	r3, [r7, #14]
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d008      	beq.n	800b7ea <pbuf_copy+0x2a>
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d005      	beq.n	800b7ea <pbuf_copy+0x2a>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	891a      	ldrh	r2, [r3, #8]
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	891b      	ldrh	r3, [r3, #8]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d209      	bcs.n	800b7fe <pbuf_copy+0x3e>
 800b7ea:	4b54      	ldr	r3, [pc, #336]	; (800b93c <pbuf_copy+0x17c>)
 800b7ec:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b7f0:	4953      	ldr	r1, [pc, #332]	; (800b940 <pbuf_copy+0x180>)
 800b7f2:	4854      	ldr	r0, [pc, #336]	; (800b944 <pbuf_copy+0x184>)
 800b7f4:	f008 fb5c 	bl	8013eb0 <iprintf>
 800b7f8:	f06f 030f 	mvn.w	r3, #15
 800b7fc:	e099      	b.n	800b932 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	895b      	ldrh	r3, [r3, #10]
 800b802:	461a      	mov	r2, r3
 800b804:	89fb      	ldrh	r3, [r7, #14]
 800b806:	1ad2      	subs	r2, r2, r3
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	895b      	ldrh	r3, [r3, #10]
 800b80c:	4619      	mov	r1, r3
 800b80e:	89bb      	ldrh	r3, [r7, #12]
 800b810:	1acb      	subs	r3, r1, r3
 800b812:	429a      	cmp	r2, r3
 800b814:	db05      	blt.n	800b822 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	895a      	ldrh	r2, [r3, #10]
 800b81a:	89bb      	ldrh	r3, [r7, #12]
 800b81c:	1ad3      	subs	r3, r2, r3
 800b81e:	817b      	strh	r3, [r7, #10]
 800b820:	e004      	b.n	800b82c <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	895a      	ldrh	r2, [r3, #10]
 800b826:	89fb      	ldrh	r3, [r7, #14]
 800b828:	1ad3      	subs	r3, r2, r3
 800b82a:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	685a      	ldr	r2, [r3, #4]
 800b830:	89fb      	ldrh	r3, [r7, #14]
 800b832:	18d0      	adds	r0, r2, r3
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	685a      	ldr	r2, [r3, #4]
 800b838:	89bb      	ldrh	r3, [r7, #12]
 800b83a:	4413      	add	r3, r2
 800b83c:	897a      	ldrh	r2, [r7, #10]
 800b83e:	4619      	mov	r1, r3
 800b840:	f008 fb23 	bl	8013e8a <memcpy>
    offset_to += len;
 800b844:	89fa      	ldrh	r2, [r7, #14]
 800b846:	897b      	ldrh	r3, [r7, #10]
 800b848:	4413      	add	r3, r2
 800b84a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800b84c:	89ba      	ldrh	r2, [r7, #12]
 800b84e:	897b      	ldrh	r3, [r7, #10]
 800b850:	4413      	add	r3, r2
 800b852:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	895b      	ldrh	r3, [r3, #10]
 800b858:	89fa      	ldrh	r2, [r7, #14]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d906      	bls.n	800b86c <pbuf_copy+0xac>
 800b85e:	4b37      	ldr	r3, [pc, #220]	; (800b93c <pbuf_copy+0x17c>)
 800b860:	f240 32cd 	movw	r2, #973	; 0x3cd
 800b864:	4938      	ldr	r1, [pc, #224]	; (800b948 <pbuf_copy+0x188>)
 800b866:	4837      	ldr	r0, [pc, #220]	; (800b944 <pbuf_copy+0x184>)
 800b868:	f008 fb22 	bl	8013eb0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	895b      	ldrh	r3, [r3, #10]
 800b870:	89ba      	ldrh	r2, [r7, #12]
 800b872:	429a      	cmp	r2, r3
 800b874:	d906      	bls.n	800b884 <pbuf_copy+0xc4>
 800b876:	4b31      	ldr	r3, [pc, #196]	; (800b93c <pbuf_copy+0x17c>)
 800b878:	f240 32ce 	movw	r2, #974	; 0x3ce
 800b87c:	4933      	ldr	r1, [pc, #204]	; (800b94c <pbuf_copy+0x18c>)
 800b87e:	4831      	ldr	r0, [pc, #196]	; (800b944 <pbuf_copy+0x184>)
 800b880:	f008 fb16 	bl	8013eb0 <iprintf>
    if (offset_from >= p_from->len) {
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	895b      	ldrh	r3, [r3, #10]
 800b888:	89ba      	ldrh	r2, [r7, #12]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d304      	bcc.n	800b898 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b88e:	2300      	movs	r3, #0
 800b890:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	895b      	ldrh	r3, [r3, #10]
 800b89c:	89fa      	ldrh	r2, [r7, #14]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d114      	bne.n	800b8cc <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d10c      	bne.n	800b8cc <pbuf_copy+0x10c>
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d009      	beq.n	800b8cc <pbuf_copy+0x10c>
 800b8b8:	4b20      	ldr	r3, [pc, #128]	; (800b93c <pbuf_copy+0x17c>)
 800b8ba:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b8be:	4924      	ldr	r1, [pc, #144]	; (800b950 <pbuf_copy+0x190>)
 800b8c0:	4820      	ldr	r0, [pc, #128]	; (800b944 <pbuf_copy+0x184>)
 800b8c2:	f008 faf5 	bl	8013eb0 <iprintf>
 800b8c6:	f06f 030f 	mvn.w	r3, #15
 800b8ca:	e032      	b.n	800b932 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d013      	beq.n	800b8fa <pbuf_copy+0x13a>
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	895a      	ldrh	r2, [r3, #10]
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	891b      	ldrh	r3, [r3, #8]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d10d      	bne.n	800b8fa <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d009      	beq.n	800b8fa <pbuf_copy+0x13a>
 800b8e6:	4b15      	ldr	r3, [pc, #84]	; (800b93c <pbuf_copy+0x17c>)
 800b8e8:	f240 32de 	movw	r2, #990	; 0x3de
 800b8ec:	4919      	ldr	r1, [pc, #100]	; (800b954 <pbuf_copy+0x194>)
 800b8ee:	4815      	ldr	r0, [pc, #84]	; (800b944 <pbuf_copy+0x184>)
 800b8f0:	f008 fade 	bl	8013eb0 <iprintf>
 800b8f4:	f06f 0305 	mvn.w	r3, #5
 800b8f8:	e01b      	b.n	800b932 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d013      	beq.n	800b928 <pbuf_copy+0x168>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	895a      	ldrh	r2, [r3, #10]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	891b      	ldrh	r3, [r3, #8]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d10d      	bne.n	800b928 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d009      	beq.n	800b928 <pbuf_copy+0x168>
 800b914:	4b09      	ldr	r3, [pc, #36]	; (800b93c <pbuf_copy+0x17c>)
 800b916:	f240 32e3 	movw	r2, #995	; 0x3e3
 800b91a:	490e      	ldr	r1, [pc, #56]	; (800b954 <pbuf_copy+0x194>)
 800b91c:	4809      	ldr	r0, [pc, #36]	; (800b944 <pbuf_copy+0x184>)
 800b91e:	f008 fac7 	bl	8013eb0 <iprintf>
 800b922:	f06f 0305 	mvn.w	r3, #5
 800b926:	e004      	b.n	800b932 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	f47f af67 	bne.w	800b7fe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3710      	adds	r7, #16
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	0801595c 	.word	0x0801595c
 800b940:	08015cec 	.word	0x08015cec
 800b944:	080159a8 	.word	0x080159a8
 800b948:	08015d1c 	.word	0x08015d1c
 800b94c:	08015d34 	.word	0x08015d34
 800b950:	08015d50 	.word	0x08015d50
 800b954:	08015d60 	.word	0x08015d60

0800b958 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b088      	sub	sp, #32
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	4611      	mov	r1, r2
 800b964:	461a      	mov	r2, r3
 800b966:	460b      	mov	r3, r1
 800b968:	80fb      	strh	r3, [r7, #6]
 800b96a:	4613      	mov	r3, r2
 800b96c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b96e:	2300      	movs	r3, #0
 800b970:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d108      	bne.n	800b98a <pbuf_copy_partial+0x32>
 800b978:	4b30      	ldr	r3, [pc, #192]	; (800ba3c <pbuf_copy_partial+0xe4>)
 800b97a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800b97e:	4930      	ldr	r1, [pc, #192]	; (800ba40 <pbuf_copy_partial+0xe8>)
 800b980:	4830      	ldr	r0, [pc, #192]	; (800ba44 <pbuf_copy_partial+0xec>)
 800b982:	f008 fa95 	bl	8013eb0 <iprintf>
 800b986:	2300      	movs	r3, #0
 800b988:	e054      	b.n	800ba34 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d108      	bne.n	800b9a2 <pbuf_copy_partial+0x4a>
 800b990:	4b2a      	ldr	r3, [pc, #168]	; (800ba3c <pbuf_copy_partial+0xe4>)
 800b992:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800b996:	492c      	ldr	r1, [pc, #176]	; (800ba48 <pbuf_copy_partial+0xf0>)
 800b998:	482a      	ldr	r0, [pc, #168]	; (800ba44 <pbuf_copy_partial+0xec>)
 800b99a:	f008 fa89 	bl	8013eb0 <iprintf>
 800b99e:	2300      	movs	r3, #0
 800b9a0:	e048      	b.n	800ba34 <pbuf_copy_partial+0xdc>

  left = 0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d002      	beq.n	800b9b2 <pbuf_copy_partial+0x5a>
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d101      	bne.n	800b9b6 <pbuf_copy_partial+0x5e>
    return 0;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	e03e      	b.n	800ba34 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	61fb      	str	r3, [r7, #28]
 800b9ba:	e034      	b.n	800ba26 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800b9bc:	88bb      	ldrh	r3, [r7, #4]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d00a      	beq.n	800b9d8 <pbuf_copy_partial+0x80>
 800b9c2:	69fb      	ldr	r3, [r7, #28]
 800b9c4:	895b      	ldrh	r3, [r3, #10]
 800b9c6:	88ba      	ldrh	r2, [r7, #4]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d305      	bcc.n	800b9d8 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	895b      	ldrh	r3, [r3, #10]
 800b9d0:	88ba      	ldrh	r2, [r7, #4]
 800b9d2:	1ad3      	subs	r3, r2, r3
 800b9d4:	80bb      	strh	r3, [r7, #4]
 800b9d6:	e023      	b.n	800ba20 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800b9d8:	69fb      	ldr	r3, [r7, #28]
 800b9da:	895a      	ldrh	r2, [r3, #10]
 800b9dc:	88bb      	ldrh	r3, [r7, #4]
 800b9de:	1ad3      	subs	r3, r2, r3
 800b9e0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b9e2:	8b3a      	ldrh	r2, [r7, #24]
 800b9e4:	88fb      	ldrh	r3, [r7, #6]
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d901      	bls.n	800b9ee <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800b9ea:	88fb      	ldrh	r3, [r7, #6]
 800b9ec:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800b9ee:	8b7b      	ldrh	r3, [r7, #26]
 800b9f0:	68ba      	ldr	r2, [r7, #8]
 800b9f2:	18d0      	adds	r0, r2, r3
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	685a      	ldr	r2, [r3, #4]
 800b9f8:	88bb      	ldrh	r3, [r7, #4]
 800b9fa:	4413      	add	r3, r2
 800b9fc:	8b3a      	ldrh	r2, [r7, #24]
 800b9fe:	4619      	mov	r1, r3
 800ba00:	f008 fa43 	bl	8013e8a <memcpy>
      copied_total += buf_copy_len;
 800ba04:	8afa      	ldrh	r2, [r7, #22]
 800ba06:	8b3b      	ldrh	r3, [r7, #24]
 800ba08:	4413      	add	r3, r2
 800ba0a:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800ba0c:	8b7a      	ldrh	r2, [r7, #26]
 800ba0e:	8b3b      	ldrh	r3, [r7, #24]
 800ba10:	4413      	add	r3, r2
 800ba12:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800ba14:	88fa      	ldrh	r2, [r7, #6]
 800ba16:	8b3b      	ldrh	r3, [r7, #24]
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	61fb      	str	r3, [r7, #28]
 800ba26:	88fb      	ldrh	r3, [r7, #6]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d002      	beq.n	800ba32 <pbuf_copy_partial+0xda>
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1c4      	bne.n	800b9bc <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800ba32:	8afb      	ldrh	r3, [r7, #22]
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3720      	adds	r7, #32
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}
 800ba3c:	0801595c 	.word	0x0801595c
 800ba40:	08015d8c 	.word	0x08015d8c
 800ba44:	080159a8 	.word	0x080159a8
 800ba48:	08015dac 	.word	0x08015dac

0800ba4c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800ba50:	bf00      	nop
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bc80      	pop	{r7}
 800ba56:	4770      	bx	lr

0800ba58 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ba5c:	f000 ff70 	bl	800c940 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ba60:	4b07      	ldr	r3, [pc, #28]	; (800ba80 <tcp_tmr+0x28>)
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	3301      	adds	r3, #1
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	4b05      	ldr	r3, [pc, #20]	; (800ba80 <tcp_tmr+0x28>)
 800ba6a:	701a      	strb	r2, [r3, #0]
 800ba6c:	4b04      	ldr	r3, [pc, #16]	; (800ba80 <tcp_tmr+0x28>)
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	f003 0301 	and.w	r3, r3, #1
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d001      	beq.n	800ba7c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ba78:	f000 fca2 	bl	800c3c0 <tcp_slowtmr>
  }
}
 800ba7c:	bf00      	nop
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	20002959 	.word	0x20002959

0800ba84 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	60fb      	str	r3, [r7, #12]
 800ba92:	e00a      	b.n	800baaa <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba98:	683a      	ldr	r2, [r7, #0]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d102      	bne.n	800baa4 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2200      	movs	r2, #0
 800baa2:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	60fb      	str	r3, [r7, #12]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d1f1      	bne.n	800ba94 <tcp_remove_listener+0x10>
      }
   }
}
 800bab0:	bf00      	nop
 800bab2:	3714      	adds	r7, #20
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bc80      	pop	{r7}
 800bab8:	4770      	bx	lr
	...

0800babc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d105      	bne.n	800bad6 <tcp_listen_closed+0x1a>
 800baca:	4b13      	ldr	r3, [pc, #76]	; (800bb18 <tcp_listen_closed+0x5c>)
 800bacc:	22c0      	movs	r2, #192	; 0xc0
 800bace:	4913      	ldr	r1, [pc, #76]	; (800bb1c <tcp_listen_closed+0x60>)
 800bad0:	4813      	ldr	r0, [pc, #76]	; (800bb20 <tcp_listen_closed+0x64>)
 800bad2:	f008 f9ed 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	7d1b      	ldrb	r3, [r3, #20]
 800bada:	2b01      	cmp	r3, #1
 800badc:	d005      	beq.n	800baea <tcp_listen_closed+0x2e>
 800bade:	4b0e      	ldr	r3, [pc, #56]	; (800bb18 <tcp_listen_closed+0x5c>)
 800bae0:	22c1      	movs	r2, #193	; 0xc1
 800bae2:	4910      	ldr	r1, [pc, #64]	; (800bb24 <tcp_listen_closed+0x68>)
 800bae4:	480e      	ldr	r0, [pc, #56]	; (800bb20 <tcp_listen_closed+0x64>)
 800bae6:	f008 f9e3 	bl	8013eb0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800baea:	2301      	movs	r3, #1
 800baec:	60fb      	str	r3, [r7, #12]
 800baee:	e00b      	b.n	800bb08 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800baf0:	4a0d      	ldr	r2, [pc, #52]	; (800bb28 <tcp_listen_closed+0x6c>)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	6879      	ldr	r1, [r7, #4]
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7ff ffc1 	bl	800ba84 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	3301      	adds	r3, #1
 800bb06:	60fb      	str	r3, [r7, #12]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2b03      	cmp	r3, #3
 800bb0c:	d9f0      	bls.n	800baf0 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bb0e:	bf00      	nop
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	08015ee0 	.word	0x08015ee0
 800bb1c:	08015f10 	.word	0x08015f10
 800bb20:	08015f1c 	.word	0x08015f1c
 800bb24:	08015f44 	.word	0x08015f44
 800bb28:	080173ac 	.word	0x080173ac

0800bb2c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bb2c:	b5b0      	push	{r4, r5, r7, lr}
 800bb2e:	b086      	sub	sp, #24
 800bb30:	af02      	add	r7, sp, #8
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	460b      	mov	r3, r1
 800bb36:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bb38:	78fb      	ldrb	r3, [r7, #3]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d075      	beq.n	800bc2a <tcp_close_shutdown+0xfe>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	7d1b      	ldrb	r3, [r3, #20]
 800bb42:	2b04      	cmp	r3, #4
 800bb44:	d003      	beq.n	800bb4e <tcp_close_shutdown+0x22>
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	7d1b      	ldrb	r3, [r3, #20]
 800bb4a:	2b07      	cmp	r3, #7
 800bb4c:	d16d      	bne.n	800bc2a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d104      	bne.n	800bb60 <tcp_close_shutdown+0x34>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb5a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bb5e:	d064      	beq.n	800bc2a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	7e9b      	ldrb	r3, [r3, #26]
 800bb64:	f003 0310 	and.w	r3, r3, #16
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d106      	bne.n	800bb7a <tcp_close_shutdown+0x4e>
 800bb6c:	4b59      	ldr	r3, [pc, #356]	; (800bcd4 <tcp_close_shutdown+0x1a8>)
 800bb6e:	f240 120f 	movw	r2, #271	; 0x10f
 800bb72:	4959      	ldr	r1, [pc, #356]	; (800bcd8 <tcp_close_shutdown+0x1ac>)
 800bb74:	4859      	ldr	r0, [pc, #356]	; (800bcdc <tcp_close_shutdown+0x1b0>)
 800bb76:	f008 f99b 	bl	8013eb0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800bb82:	687c      	ldr	r4, [r7, #4]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	1d1d      	adds	r5, r3, #4
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	8adb      	ldrh	r3, [r3, #22]
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	8b12      	ldrh	r2, [r2, #24]
 800bb90:	9201      	str	r2, [sp, #4]
 800bb92:	9300      	str	r3, [sp, #0]
 800bb94:	462b      	mov	r3, r5
 800bb96:	4622      	mov	r2, r4
 800bb98:	f004 fecc 	bl	8010934 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f001 fa01 	bl	800cfa4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bba2:	4b4f      	ldr	r3, [pc, #316]	; (800bce0 <tcp_close_shutdown+0x1b4>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d105      	bne.n	800bbb8 <tcp_close_shutdown+0x8c>
 800bbac:	4b4c      	ldr	r3, [pc, #304]	; (800bce0 <tcp_close_shutdown+0x1b4>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	4a4b      	ldr	r2, [pc, #300]	; (800bce0 <tcp_close_shutdown+0x1b4>)
 800bbb4:	6013      	str	r3, [r2, #0]
 800bbb6:	e013      	b.n	800bbe0 <tcp_close_shutdown+0xb4>
 800bbb8:	4b49      	ldr	r3, [pc, #292]	; (800bce0 <tcp_close_shutdown+0x1b4>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	60fb      	str	r3, [r7, #12]
 800bbbe:	e00c      	b.n	800bbda <tcp_close_shutdown+0xae>
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d104      	bne.n	800bbd4 <tcp_close_shutdown+0xa8>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	68da      	ldr	r2, [r3, #12]
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	60da      	str	r2, [r3, #12]
 800bbd2:	e005      	b.n	800bbe0 <tcp_close_shutdown+0xb4>
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	60fb      	str	r3, [r7, #12]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d1ef      	bne.n	800bbc0 <tcp_close_shutdown+0x94>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	60da      	str	r2, [r3, #12]
 800bbe6:	4b3f      	ldr	r3, [pc, #252]	; (800bce4 <tcp_close_shutdown+0x1b8>)
 800bbe8:	2201      	movs	r2, #1
 800bbea:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	7d1b      	ldrb	r3, [r3, #20]
 800bbf0:	2b04      	cmp	r3, #4
 800bbf2:	d10c      	bne.n	800bc0e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	220a      	movs	r2, #10
 800bbf8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bbfa:	4b3b      	ldr	r3, [pc, #236]	; (800bce8 <tcp_close_shutdown+0x1bc>)
 800bbfc:	681a      	ldr	r2, [r3, #0]
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	60da      	str	r2, [r3, #12]
 800bc02:	4a39      	ldr	r2, [pc, #228]	; (800bce8 <tcp_close_shutdown+0x1bc>)
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6013      	str	r3, [r2, #0]
 800bc08:	f005 f8e4 	bl	8010dd4 <tcp_timer_needed>
 800bc0c:	e00b      	b.n	800bc26 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800bc0e:	4b37      	ldr	r3, [pc, #220]	; (800bcec <tcp_close_shutdown+0x1c0>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d102      	bne.n	800bc1e <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800bc18:	f003 fd24 	bl	800f664 <tcp_trigger_input_pcb_close>
 800bc1c:	e003      	b.n	800bc26 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800bc1e:	6879      	ldr	r1, [r7, #4]
 800bc20:	2001      	movs	r0, #1
 800bc22:	f7fe feeb 	bl	800a9fc <memp_free>
        }
      }
      return ERR_OK;
 800bc26:	2300      	movs	r3, #0
 800bc28:	e050      	b.n	800bccc <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	7d1b      	ldrb	r3, [r3, #20]
 800bc2e:	2b01      	cmp	r3, #1
 800bc30:	d02e      	beq.n	800bc90 <tcp_close_shutdown+0x164>
 800bc32:	2b02      	cmp	r3, #2
 800bc34:	d038      	beq.n	800bca8 <tcp_close_shutdown+0x17c>
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d142      	bne.n	800bcc0 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	8adb      	ldrh	r3, [r3, #22]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d021      	beq.n	800bc86 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800bc42:	4b2b      	ldr	r3, [pc, #172]	; (800bcf0 <tcp_close_shutdown+0x1c4>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d105      	bne.n	800bc58 <tcp_close_shutdown+0x12c>
 800bc4c:	4b28      	ldr	r3, [pc, #160]	; (800bcf0 <tcp_close_shutdown+0x1c4>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	4a27      	ldr	r2, [pc, #156]	; (800bcf0 <tcp_close_shutdown+0x1c4>)
 800bc54:	6013      	str	r3, [r2, #0]
 800bc56:	e013      	b.n	800bc80 <tcp_close_shutdown+0x154>
 800bc58:	4b25      	ldr	r3, [pc, #148]	; (800bcf0 <tcp_close_shutdown+0x1c4>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	60bb      	str	r3, [r7, #8]
 800bc5e:	e00c      	b.n	800bc7a <tcp_close_shutdown+0x14e>
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	68db      	ldr	r3, [r3, #12]
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d104      	bne.n	800bc74 <tcp_close_shutdown+0x148>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	68da      	ldr	r2, [r3, #12]
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	60da      	str	r2, [r3, #12]
 800bc72:	e005      	b.n	800bc80 <tcp_close_shutdown+0x154>
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	60bb      	str	r3, [r7, #8]
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d1ef      	bne.n	800bc60 <tcp_close_shutdown+0x134>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800bc86:	6879      	ldr	r1, [r7, #4]
 800bc88:	2001      	movs	r0, #1
 800bc8a:	f7fe feb7 	bl	800a9fc <memp_free>
    break;
 800bc8e:	e01c      	b.n	800bcca <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f7ff ff13 	bl	800babc <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bc96:	6879      	ldr	r1, [r7, #4]
 800bc98:	4816      	ldr	r0, [pc, #88]	; (800bcf4 <tcp_close_shutdown+0x1c8>)
 800bc9a:	f001 f9c5 	bl	800d028 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bc9e:	6879      	ldr	r1, [r7, #4]
 800bca0:	2002      	movs	r0, #2
 800bca2:	f7fe feab 	bl	800a9fc <memp_free>
    break;
 800bca6:	e010      	b.n	800bcca <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800bca8:	6879      	ldr	r1, [r7, #4]
 800bcaa:	480d      	ldr	r0, [pc, #52]	; (800bce0 <tcp_close_shutdown+0x1b4>)
 800bcac:	f001 f9bc 	bl	800d028 <tcp_pcb_remove>
 800bcb0:	4b0c      	ldr	r3, [pc, #48]	; (800bce4 <tcp_close_shutdown+0x1b8>)
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800bcb6:	6879      	ldr	r1, [r7, #4]
 800bcb8:	2001      	movs	r0, #1
 800bcba:	f7fe fe9f 	bl	800a9fc <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800bcbe:	e004      	b.n	800bcca <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 f819 	bl	800bcf8 <tcp_close_shutdown_fin>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	e000      	b.n	800bccc <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800bcca:	2300      	movs	r3, #0
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3710      	adds	r7, #16
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bdb0      	pop	{r4, r5, r7, pc}
 800bcd4:	08015ee0 	.word	0x08015ee0
 800bcd8:	08015f5c 	.word	0x08015f5c
 800bcdc:	08015f1c 	.word	0x08015f1c
 800bce0:	2000ad0c 	.word	0x2000ad0c
 800bce4:	2000ad08 	.word	0x2000ad08
 800bce8:	2000ad1c 	.word	0x2000ad1c
 800bcec:	2000ad20 	.word	0x2000ad20
 800bcf0:	2000ad18 	.word	0x2000ad18
 800bcf4:	2000ad14 	.word	0x2000ad14

0800bcf8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d106      	bne.n	800bd14 <tcp_close_shutdown_fin+0x1c>
 800bd06:	4b2c      	ldr	r3, [pc, #176]	; (800bdb8 <tcp_close_shutdown_fin+0xc0>)
 800bd08:	f240 124d 	movw	r2, #333	; 0x14d
 800bd0c:	492b      	ldr	r1, [pc, #172]	; (800bdbc <tcp_close_shutdown_fin+0xc4>)
 800bd0e:	482c      	ldr	r0, [pc, #176]	; (800bdc0 <tcp_close_shutdown_fin+0xc8>)
 800bd10:	f008 f8ce 	bl	8013eb0 <iprintf>

  switch (pcb->state) {
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	7d1b      	ldrb	r3, [r3, #20]
 800bd18:	2b04      	cmp	r3, #4
 800bd1a:	d010      	beq.n	800bd3e <tcp_close_shutdown_fin+0x46>
 800bd1c:	2b07      	cmp	r3, #7
 800bd1e:	d01b      	beq.n	800bd58 <tcp_close_shutdown_fin+0x60>
 800bd20:	2b03      	cmp	r3, #3
 800bd22:	d126      	bne.n	800bd72 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f003 fd29 	bl	800f77c <tcp_send_fin>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bd2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d11f      	bne.n	800bd76 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2205      	movs	r2, #5
 800bd3a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800bd3c:	e01b      	b.n	800bd76 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f003 fd1c 	bl	800f77c <tcp_send_fin>
 800bd44:	4603      	mov	r3, r0
 800bd46:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bd48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d114      	bne.n	800bd7a <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2205      	movs	r2, #5
 800bd54:	751a      	strb	r2, [r3, #20]
    }
    break;
 800bd56:	e010      	b.n	800bd7a <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f003 fd0f 	bl	800f77c <tcp_send_fin>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800bd62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d109      	bne.n	800bd7e <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2209      	movs	r2, #9
 800bd6e:	751a      	strb	r2, [r3, #20]
    }
    break;
 800bd70:	e005      	b.n	800bd7e <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800bd72:	2300      	movs	r3, #0
 800bd74:	e01c      	b.n	800bdb0 <tcp_close_shutdown_fin+0xb8>
    break;
 800bd76:	bf00      	nop
 800bd78:	e002      	b.n	800bd80 <tcp_close_shutdown_fin+0x88>
    break;
 800bd7a:	bf00      	nop
 800bd7c:	e000      	b.n	800bd80 <tcp_close_shutdown_fin+0x88>
    break;
 800bd7e:	bf00      	nop
  }

  if (err == ERR_OK) {
 800bd80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d103      	bne.n	800bd90 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f004 fb49 	bl	8010420 <tcp_output>
 800bd8e:	e00d      	b.n	800bdac <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800bd90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd98:	d108      	bne.n	800bdac <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	7e9b      	ldrb	r3, [r3, #26]
 800bd9e:	f043 0308 	orr.w	r3, r3, #8
 800bda2:	b2da      	uxtb	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	e001      	b.n	800bdb0 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800bdac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3710      	adds	r7, #16
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	08015ee0 	.word	0x08015ee0
 800bdbc:	08015f10 	.word	0x08015f10
 800bdc0:	08015f1c 	.word	0x08015f1c

0800bdc4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b082      	sub	sp, #8
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	7d1b      	ldrb	r3, [r3, #20]
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d006      	beq.n	800bde2 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	7e9b      	ldrb	r3, [r3, #26]
 800bdd8:	f043 0310 	orr.w	r3, r3, #16
 800bddc:	b2da      	uxtb	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bde2:	2101      	movs	r1, #1
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f7ff fea1 	bl	800bb2c <tcp_close_shutdown>
 800bdea:	4603      	mov	r3, r0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b084      	sub	sp, #16
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	7d1b      	ldrb	r3, [r3, #20]
 800be04:	2b01      	cmp	r3, #1
 800be06:	d102      	bne.n	800be0e <tcp_shutdown+0x1a>
    return ERR_CONN;
 800be08:	f06f 030a 	mvn.w	r3, #10
 800be0c:	e035      	b.n	800be7a <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d01b      	beq.n	800be4c <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	7e9b      	ldrb	r3, [r3, #26]
 800be18:	f043 0310 	orr.w	r3, r3, #16
 800be1c:	b2da      	uxtb	r2, r3
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d005      	beq.n	800be34 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800be28:	2101      	movs	r1, #1
 800be2a:	68f8      	ldr	r0, [r7, #12]
 800be2c:	f7ff fe7e 	bl	800bb2c <tcp_close_shutdown>
 800be30:	4603      	mov	r3, r0
 800be32:	e022      	b.n	800be7a <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d007      	beq.n	800be4c <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be40:	4618      	mov	r0, r3
 800be42:	f7ff fb8f 	bl	800b564 <pbuf_free>
      pcb->refused_data = NULL;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	2200      	movs	r2, #0
 800be4a:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d012      	beq.n	800be78 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	7d1b      	ldrb	r3, [r3, #20]
 800be56:	2b03      	cmp	r3, #3
 800be58:	db0b      	blt.n	800be72 <tcp_shutdown+0x7e>
 800be5a:	2b04      	cmp	r3, #4
 800be5c:	dd01      	ble.n	800be62 <tcp_shutdown+0x6e>
 800be5e:	2b07      	cmp	r3, #7
 800be60:	d107      	bne.n	800be72 <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	b2db      	uxtb	r3, r3
 800be66:	4619      	mov	r1, r3
 800be68:	68f8      	ldr	r0, [r7, #12]
 800be6a:	f7ff fe5f 	bl	800bb2c <tcp_close_shutdown>
 800be6e:	4603      	mov	r3, r0
 800be70:	e003      	b.n	800be7a <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 800be72:	f06f 030a 	mvn.w	r3, #10
 800be76:	e000      	b.n	800be7a <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
	...

0800be84 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b08c      	sub	sp, #48	; 0x30
 800be88:	af02      	add	r7, sp, #8
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	7d1b      	ldrb	r3, [r3, #20]
 800be92:	2b01      	cmp	r3, #1
 800be94:	d106      	bne.n	800bea4 <tcp_abandon+0x20>
 800be96:	4b4d      	ldr	r3, [pc, #308]	; (800bfcc <tcp_abandon+0x148>)
 800be98:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800be9c:	494c      	ldr	r1, [pc, #304]	; (800bfd0 <tcp_abandon+0x14c>)
 800be9e:	484d      	ldr	r0, [pc, #308]	; (800bfd4 <tcp_abandon+0x150>)
 800bea0:	f008 f806 	bl	8013eb0 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	7d1b      	ldrb	r3, [r3, #20]
 800bea8:	2b0a      	cmp	r3, #10
 800beaa:	d108      	bne.n	800bebe <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800beac:	6879      	ldr	r1, [r7, #4]
 800beae:	484a      	ldr	r0, [pc, #296]	; (800bfd8 <tcp_abandon+0x154>)
 800beb0:	f001 f8ba 	bl	800d028 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800beb4:	6879      	ldr	r1, [r7, #4]
 800beb6:	2001      	movs	r0, #1
 800beb8:	f7fe fda0 	bl	800a9fc <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800bebc:	e081      	b.n	800bfc2 <tcp_abandon+0x13e>
    int send_rst = 0;
 800bebe:	2300      	movs	r3, #0
 800bec0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800bec2:	2300      	movs	r3, #0
 800bec4:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beca:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed0:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bed8:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	691b      	ldr	r3, [r3, #16]
 800bede:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	7d1b      	ldrb	r3, [r3, #20]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d126      	bne.n	800bf36 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	8adb      	ldrh	r3, [r3, #22]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d02e      	beq.n	800bf4e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bef0:	4b3a      	ldr	r3, [pc, #232]	; (800bfdc <tcp_abandon+0x158>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d105      	bne.n	800bf06 <tcp_abandon+0x82>
 800befa:	4b38      	ldr	r3, [pc, #224]	; (800bfdc <tcp_abandon+0x158>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	68db      	ldr	r3, [r3, #12]
 800bf00:	4a36      	ldr	r2, [pc, #216]	; (800bfdc <tcp_abandon+0x158>)
 800bf02:	6013      	str	r3, [r2, #0]
 800bf04:	e013      	b.n	800bf2e <tcp_abandon+0xaa>
 800bf06:	4b35      	ldr	r3, [pc, #212]	; (800bfdc <tcp_abandon+0x158>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	61fb      	str	r3, [r7, #28]
 800bf0c:	e00c      	b.n	800bf28 <tcp_abandon+0xa4>
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d104      	bne.n	800bf22 <tcp_abandon+0x9e>
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	68da      	ldr	r2, [r3, #12]
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	60da      	str	r2, [r3, #12]
 800bf20:	e005      	b.n	800bf2e <tcp_abandon+0xaa>
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	68db      	ldr	r3, [r3, #12]
 800bf26:	61fb      	str	r3, [r7, #28]
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d1ef      	bne.n	800bf0e <tcp_abandon+0x8a>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	60da      	str	r2, [r3, #12]
 800bf34:	e00b      	b.n	800bf4e <tcp_abandon+0xca>
      send_rst = reset;
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	8adb      	ldrh	r3, [r3, #22]
 800bf3e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bf40:	6879      	ldr	r1, [r7, #4]
 800bf42:	4827      	ldr	r0, [pc, #156]	; (800bfe0 <tcp_abandon+0x15c>)
 800bf44:	f001 f870 	bl	800d028 <tcp_pcb_remove>
 800bf48:	4b26      	ldr	r3, [pc, #152]	; (800bfe4 <tcp_abandon+0x160>)
 800bf4a:	2201      	movs	r2, #1
 800bf4c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d004      	beq.n	800bf60 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f000 fdbd 	bl	800cada <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d004      	beq.n	800bf72 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f000 fdb4 	bl	800cada <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d004      	beq.n	800bf84 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f000 fdab 	bl	800cada <tcp_segs_free>
    if (send_rst) {
 800bf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00c      	beq.n	800bfa4 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	1d19      	adds	r1, r3, #4
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	8b1b      	ldrh	r3, [r3, #24]
 800bf94:	9301      	str	r3, [sp, #4]
 800bf96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	6979      	ldr	r1, [r7, #20]
 800bf9e:	69b8      	ldr	r0, [r7, #24]
 800bfa0:	f004 fcc8 	bl	8010934 <tcp_rst>
    last_state = pcb->state;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	7d1b      	ldrb	r3, [r3, #20]
 800bfa8:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800bfaa:	6879      	ldr	r1, [r7, #4]
 800bfac:	2001      	movs	r0, #1
 800bfae:	f7fe fd25 	bl	800a9fc <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d004      	beq.n	800bfc2 <tcp_abandon+0x13e>
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	f06f 010c 	mvn.w	r1, #12
 800bfbe:	68f8      	ldr	r0, [r7, #12]
 800bfc0:	4798      	blx	r3
}
 800bfc2:	bf00      	nop
 800bfc4:	3728      	adds	r7, #40	; 0x28
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	08015ee0 	.word	0x08015ee0
 800bfd0:	08015f78 	.word	0x08015f78
 800bfd4:	08015f1c 	.word	0x08015f1c
 800bfd8:	2000ad1c 	.word	0x2000ad1c
 800bfdc:	2000ad18 	.word	0x2000ad18
 800bfe0:	2000ad0c 	.word	0x2000ad0c
 800bfe4:	2000ad08 	.word	0x2000ad08

0800bfe8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800bff0:	2101      	movs	r1, #1
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f7ff ff46 	bl	800be84 <tcp_abandon>
}
 800bff8:	bf00      	nop
 800bffa:	3708      	adds	r7, #8
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}

0800c000 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b084      	sub	sp, #16
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00c:	687a      	ldr	r2, [r7, #4]
 800c00e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c010:	4413      	add	r3, r2
 800c012:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c01c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c020:	bf28      	it	cs
 800c022:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c026:	b292      	uxth	r2, r2
 800c028:	4413      	add	r3, r2
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	1ad3      	subs	r3, r2, r3
 800c02e:	2b00      	cmp	r3, #0
 800c030:	db08      	blt.n	800c044 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c03e:	68fa      	ldr	r2, [r7, #12]
 800c040:	1ad3      	subs	r3, r2, r3
 800c042:	e020      	b.n	800c086 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c04c:	1ad3      	subs	r3, r2, r3
 800c04e:	2b00      	cmp	r3, #0
 800c050:	dd03      	ble.n	800c05a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2200      	movs	r2, #0
 800c056:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c058:	e014      	b.n	800c084 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c062:	1ad3      	subs	r3, r2, r3
 800c064:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c06c:	d306      	bcc.n	800c07c <tcp_update_rcv_ann_wnd+0x7c>
 800c06e:	4b08      	ldr	r3, [pc, #32]	; (800c090 <tcp_update_rcv_ann_wnd+0x90>)
 800c070:	f44f 7242 	mov.w	r2, #776	; 0x308
 800c074:	4907      	ldr	r1, [pc, #28]	; (800c094 <tcp_update_rcv_ann_wnd+0x94>)
 800c076:	4808      	ldr	r0, [pc, #32]	; (800c098 <tcp_update_rcv_ann_wnd+0x98>)
 800c078:	f007 ff1a 	bl	8013eb0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	b29a      	uxth	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c084:	2300      	movs	r3, #0
  }
}
 800c086:	4618      	mov	r0, r3
 800c088:	3710      	adds	r7, #16
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	08015ee0 	.word	0x08015ee0
 800c094:	08015ff8 	.word	0x08015ff8
 800c098:	08015f1c 	.word	0x08015f1c

0800c09c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	7d1b      	ldrb	r3, [r3, #20]
 800c0ac:	2b01      	cmp	r3, #1
 800c0ae:	d106      	bne.n	800c0be <tcp_recved+0x22>
 800c0b0:	4b23      	ldr	r3, [pc, #140]	; (800c140 <tcp_recved+0xa4>)
 800c0b2:	f44f 7248 	mov.w	r2, #800	; 0x320
 800c0b6:	4923      	ldr	r1, [pc, #140]	; (800c144 <tcp_recved+0xa8>)
 800c0b8:	4823      	ldr	r0, [pc, #140]	; (800c148 <tcp_recved+0xac>)
 800c0ba:	f007 fef9 	bl	8013eb0 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c0c2:	887b      	ldrh	r3, [r7, #2]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	b29a      	uxth	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0d0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c0d4:	d904      	bls.n	800c0e0 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c0dc:	851a      	strh	r2, [r3, #40]	; 0x28
 800c0de:	e017      	b.n	800c110 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d113      	bne.n	800c110 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	7d1b      	ldrb	r3, [r3, #20]
 800c0ec:	2b07      	cmp	r3, #7
 800c0ee:	d003      	beq.n	800c0f8 <tcp_recved+0x5c>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	7d1b      	ldrb	r3, [r3, #20]
 800c0f4:	2b09      	cmp	r3, #9
 800c0f6:	d104      	bne.n	800c102 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c0fe:	851a      	strh	r2, [r3, #40]	; 0x28
 800c100:	e006      	b.n	800c110 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800c102:	4b0f      	ldr	r3, [pc, #60]	; (800c140 <tcp_recved+0xa4>)
 800c104:	f240 322d 	movw	r2, #813	; 0x32d
 800c108:	4910      	ldr	r1, [pc, #64]	; (800c14c <tcp_recved+0xb0>)
 800c10a:	480f      	ldr	r0, [pc, #60]	; (800c148 <tcp_recved+0xac>)
 800c10c:	f007 fed0 	bl	8013eb0 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f7ff ff75 	bl	800c000 <tcp_update_rcv_ann_wnd>
 800c116:	4603      	mov	r3, r0
 800c118:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c120:	db09      	blt.n	800c136 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	7e9b      	ldrb	r3, [r3, #26]
 800c126:	f043 0302 	orr.w	r3, r3, #2
 800c12a:	b2da      	uxtb	r2, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f004 f975 	bl	8010420 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c136:	bf00      	nop
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	08015ee0 	.word	0x08015ee0
 800c144:	08016014 	.word	0x08016014
 800c148:	08015f1c 	.word	0x08015f1c
 800c14c:	0801603c 	.word	0x0801603c

0800c150 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c156:	2300      	movs	r3, #0
 800c158:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800c15a:	4b1d      	ldr	r3, [pc, #116]	; (800c1d0 <tcp_new_port+0x80>)
 800c15c:	881b      	ldrh	r3, [r3, #0]
 800c15e:	1c5a      	adds	r2, r3, #1
 800c160:	b291      	uxth	r1, r2
 800c162:	4a1b      	ldr	r2, [pc, #108]	; (800c1d0 <tcp_new_port+0x80>)
 800c164:	8011      	strh	r1, [r2, #0]
 800c166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d103      	bne.n	800c176 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c16e:	4b18      	ldr	r3, [pc, #96]	; (800c1d0 <tcp_new_port+0x80>)
 800c170:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c174:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c176:	2300      	movs	r3, #0
 800c178:	71fb      	strb	r3, [r7, #7]
 800c17a:	e01e      	b.n	800c1ba <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c17c:	79fb      	ldrb	r3, [r7, #7]
 800c17e:	4a15      	ldr	r2, [pc, #84]	; (800c1d4 <tcp_new_port+0x84>)
 800c180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	603b      	str	r3, [r7, #0]
 800c188:	e011      	b.n	800c1ae <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	8ada      	ldrh	r2, [r3, #22]
 800c18e:	4b10      	ldr	r3, [pc, #64]	; (800c1d0 <tcp_new_port+0x80>)
 800c190:	881b      	ldrh	r3, [r3, #0]
 800c192:	429a      	cmp	r2, r3
 800c194:	d108      	bne.n	800c1a8 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c196:	88bb      	ldrh	r3, [r7, #4]
 800c198:	3301      	adds	r3, #1
 800c19a:	80bb      	strh	r3, [r7, #4]
 800c19c:	88bb      	ldrh	r3, [r7, #4]
 800c19e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1a2:	d3da      	bcc.n	800c15a <tcp_new_port+0xa>
          return 0;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	e00d      	b.n	800c1c4 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	603b      	str	r3, [r7, #0]
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d1ea      	bne.n	800c18a <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c1b4:	79fb      	ldrb	r3, [r7, #7]
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	71fb      	strb	r3, [r7, #7]
 800c1ba:	79fb      	ldrb	r3, [r7, #7]
 800c1bc:	2b03      	cmp	r3, #3
 800c1be:	d9dd      	bls.n	800c17c <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c1c0:	4b03      	ldr	r3, [pc, #12]	; (800c1d0 <tcp_new_port+0x80>)
 800c1c2:	881b      	ldrh	r3, [r3, #0]
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	370c      	adds	r7, #12
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bc80      	pop	{r7}
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	20000010 	.word	0x20000010
 800c1d4:	080173ac 	.word	0x080173ac

0800c1d8 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
      tcp_connected_fn connected)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b08a      	sub	sp, #40	; 0x28
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	603b      	str	r3, [r7, #0]
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	80fb      	strh	r3, [r7, #6]
  err_t ret;
  u32_t iss;
  u16_t old_local_port;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d002      	beq.n	800c1f4 <tcp_connect+0x1c>
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d102      	bne.n	800c1fa <tcp_connect+0x22>
    return ERR_VAL;
 800c1f4:	f06f 0305 	mvn.w	r3, #5
 800c1f8:	e0d1      	b.n	800c39e <tcp_connect+0x1c6>
  }

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	7d1b      	ldrb	r3, [r3, #20]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d009      	beq.n	800c216 <tcp_connect+0x3e>
 800c202:	4b69      	ldr	r3, [pc, #420]	; (800c3a8 <tcp_connect+0x1d0>)
 800c204:	f44f 725e 	mov.w	r2, #888	; 0x378
 800c208:	4968      	ldr	r1, [pc, #416]	; (800c3ac <tcp_connect+0x1d4>)
 800c20a:	4869      	ldr	r0, [pc, #420]	; (800c3b0 <tcp_connect+0x1d8>)
 800c20c:	f007 fe50 	bl	8013eb0 <iprintf>
 800c210:	f06f 0309 	mvn.w	r3, #9
 800c214:	e0c3      	b.n	800c39e <tcp_connect+0x1c6>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d002      	beq.n	800c222 <tcp_connect+0x4a>
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	e000      	b.n	800c224 <tcp_connect+0x4c>
 800c222:	2300      	movs	r3, #0
 800c224:	68fa      	ldr	r2, [r7, #12]
 800c226:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	88fa      	ldrh	r2, [r7, #6]
 800c22c:	831a      	strh	r2, [r3, #24]

  /* check if we have a route to the remote host */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d003      	beq.n	800c23c <tcp_connect+0x64>
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d11a      	bne.n	800c272 <tcp_connect+0x9a>
    /* no local IP address set, yet. */
    struct netif *netif;
    const ip_addr_t *local_ip;
    ip_route_get_local_ip(&pcb->local_ip, &pcb->remote_ip, netif, local_ip);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	3304      	adds	r3, #4
 800c240:	4618      	mov	r0, r3
 800c242:	f006 fac5 	bl	80127d0 <ip4_route>
 800c246:	6238      	str	r0, [r7, #32]
 800c248:	6a3b      	ldr	r3, [r7, #32]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d002      	beq.n	800c254 <tcp_connect+0x7c>
 800c24e:	6a3b      	ldr	r3, [r7, #32]
 800c250:	3304      	adds	r3, #4
 800c252:	e000      	b.n	800c256 <tcp_connect+0x7e>
 800c254:	2300      	movs	r3, #0
 800c256:	61fb      	str	r3, [r7, #28]
    if ((netif == NULL) || (local_ip == NULL)) {
 800c258:	6a3b      	ldr	r3, [r7, #32]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d002      	beq.n	800c264 <tcp_connect+0x8c>
 800c25e:	69fb      	ldr	r3, [r7, #28]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d102      	bne.n	800c26a <tcp_connect+0x92>
      /* Don't even try to send a SYN packet if we have no route
         since that will fail. */
      return ERR_RTE;
 800c264:	f06f 0303 	mvn.w	r3, #3
 800c268:	e099      	b.n	800c39e <tcp_connect+0x1c6>
    }
    /* Use the address as local address of the pcb. */
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c26a:	69fb      	ldr	r3, [r7, #28]
 800c26c:	681a      	ldr	r2, [r3, #0]
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	601a      	str	r2, [r3, #0]
  }

  old_local_port = pcb->local_port;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	8adb      	ldrh	r3, [r3, #22]
 800c276:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	8adb      	ldrh	r3, [r3, #22]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d10c      	bne.n	800c29a <tcp_connect+0xc2>
    pcb->local_port = tcp_new_port();
 800c280:	f7ff ff66 	bl	800c150 <tcp_new_port>
 800c284:	4603      	mov	r3, r0
 800c286:	461a      	mov	r2, r3
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	8adb      	ldrh	r3, [r3, #22]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d102      	bne.n	800c29a <tcp_connect+0xc2>
      return ERR_BUF;
 800c294:	f06f 0301 	mvn.w	r3, #1
 800c298:	e081      	b.n	800c39e <tcp_connect+0x1c6>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800c29a:	68f8      	ldr	r0, [r7, #12]
 800c29c:	f000 ff40 	bl	800d120 <tcp_next_iss>
 800c2a0:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	697a      	ldr	r2, [r7, #20]
 800c2ac:	64da      	str	r2, [r3, #76]	; 0x4c
  pcb->lastack = iss - 1;
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	1e5a      	subs	r2, r3, #1
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	1e5a      	subs	r2, r3, #1
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	655a      	str	r2, [r3, #84]	; 0x54
  pcb->snd_lbb = iss - 1;
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	1e5a      	subs	r2, r3, #1
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	659a      	str	r2, [r3, #88]	; 0x58
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c2cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c2e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c2ee:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	3304      	adds	r3, #4
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	4610      	mov	r0, r2
 800c2fc:	f000 ff26 	bl	800d14c <tcp_eff_send_mss_impl>
 800c300:	4603      	mov	r3, r0
 800c302:	461a      	mov	r2, r3
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2201      	movs	r2, #1
 800c30c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	683a      	ldr	r2, [r7, #0]
 800c314:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800c318:	2102      	movs	r1, #2
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f003 ff28 	bl	8010170 <tcp_enqueue_flags>
 800c320:	4603      	mov	r3, r0
 800c322:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800c324:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d136      	bne.n	800c39a <tcp_connect+0x1c2>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2202      	movs	r2, #2
 800c330:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800c332:	8b7b      	ldrh	r3, [r7, #26]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d021      	beq.n	800c37c <tcp_connect+0x1a4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800c338:	4b1e      	ldr	r3, [pc, #120]	; (800c3b4 <tcp_connect+0x1dc>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d105      	bne.n	800c34e <tcp_connect+0x176>
 800c342:	4b1c      	ldr	r3, [pc, #112]	; (800c3b4 <tcp_connect+0x1dc>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	4a1a      	ldr	r2, [pc, #104]	; (800c3b4 <tcp_connect+0x1dc>)
 800c34a:	6013      	str	r3, [r2, #0]
 800c34c:	e013      	b.n	800c376 <tcp_connect+0x19e>
 800c34e:	4b19      	ldr	r3, [pc, #100]	; (800c3b4 <tcp_connect+0x1dc>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	627b      	str	r3, [r7, #36]	; 0x24
 800c354:	e00c      	b.n	800c370 <tcp_connect+0x198>
 800c356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c358:	68db      	ldr	r3, [r3, #12]
 800c35a:	68fa      	ldr	r2, [r7, #12]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d104      	bne.n	800c36a <tcp_connect+0x192>
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	68da      	ldr	r2, [r3, #12]
 800c364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c366:	60da      	str	r2, [r3, #12]
 800c368:	e005      	b.n	800c376 <tcp_connect+0x19e>
 800c36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36c:	68db      	ldr	r3, [r3, #12]
 800c36e:	627b      	str	r3, [r7, #36]	; 0x24
 800c370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c372:	2b00      	cmp	r3, #0
 800c374:	d1ef      	bne.n	800c356 <tcp_connect+0x17e>
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	2200      	movs	r2, #0
 800c37a:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800c37c:	4b0e      	ldr	r3, [pc, #56]	; (800c3b8 <tcp_connect+0x1e0>)
 800c37e:	681a      	ldr	r2, [r3, #0]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	60da      	str	r2, [r3, #12]
 800c384:	4a0c      	ldr	r2, [pc, #48]	; (800c3b8 <tcp_connect+0x1e0>)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6013      	str	r3, [r2, #0]
 800c38a:	f004 fd23 	bl	8010dd4 <tcp_timer_needed>
 800c38e:	4b0b      	ldr	r3, [pc, #44]	; (800c3bc <tcp_connect+0x1e4>)
 800c390:	2201      	movs	r2, #1
 800c392:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	f004 f843 	bl	8010420 <tcp_output>
  }
  return ret;
 800c39a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3728      	adds	r7, #40	; 0x28
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	08015ee0 	.word	0x08015ee0
 800c3ac:	08016060 	.word	0x08016060
 800c3b0:	08015f1c 	.word	0x08015f1c
 800c3b4:	2000ad18 	.word	0x2000ad18
 800c3b8:	2000ad0c 	.word	0x2000ad0c
 800c3bc:	2000ad08 	.word	0x2000ad08

0800c3c0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c3c0:	b5b0      	push	{r4, r5, r7, lr}
 800c3c2:	b08c      	sub	sp, #48	; 0x30
 800c3c4:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800c3ca:	4b97      	ldr	r3, [pc, #604]	; (800c628 <tcp_slowtmr+0x268>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	4a95      	ldr	r2, [pc, #596]	; (800c628 <tcp_slowtmr+0x268>)
 800c3d2:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c3d4:	4b95      	ldr	r3, [pc, #596]	; (800c62c <tcp_slowtmr+0x26c>)
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	3301      	adds	r3, #1
 800c3da:	b2da      	uxtb	r2, r3
 800c3dc:	4b93      	ldr	r3, [pc, #588]	; (800c62c <tcp_slowtmr+0x26c>)
 800c3de:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800c3e4:	4b92      	ldr	r3, [pc, #584]	; (800c630 <tcp_slowtmr+0x270>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c3ea:	e227      	b.n	800c83c <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ee:	7d1b      	ldrb	r3, [r3, #20]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d106      	bne.n	800c402 <tcp_slowtmr+0x42>
 800c3f4:	4b8f      	ldr	r3, [pc, #572]	; (800c634 <tcp_slowtmr+0x274>)
 800c3f6:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800c3fa:	498f      	ldr	r1, [pc, #572]	; (800c638 <tcp_slowtmr+0x278>)
 800c3fc:	488f      	ldr	r0, [pc, #572]	; (800c63c <tcp_slowtmr+0x27c>)
 800c3fe:	f007 fd57 	bl	8013eb0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c404:	7d1b      	ldrb	r3, [r3, #20]
 800c406:	2b01      	cmp	r3, #1
 800c408:	d106      	bne.n	800c418 <tcp_slowtmr+0x58>
 800c40a:	4b8a      	ldr	r3, [pc, #552]	; (800c634 <tcp_slowtmr+0x274>)
 800c40c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800c410:	498b      	ldr	r1, [pc, #556]	; (800c640 <tcp_slowtmr+0x280>)
 800c412:	488a      	ldr	r0, [pc, #552]	; (800c63c <tcp_slowtmr+0x27c>)
 800c414:	f007 fd4c 	bl	8013eb0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41a:	7d1b      	ldrb	r3, [r3, #20]
 800c41c:	2b0a      	cmp	r3, #10
 800c41e:	d106      	bne.n	800c42e <tcp_slowtmr+0x6e>
 800c420:	4b84      	ldr	r3, [pc, #528]	; (800c634 <tcp_slowtmr+0x274>)
 800c422:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800c426:	4987      	ldr	r1, [pc, #540]	; (800c644 <tcp_slowtmr+0x284>)
 800c428:	4884      	ldr	r0, [pc, #528]	; (800c63c <tcp_slowtmr+0x27c>)
 800c42a:	f007 fd41 	bl	8013eb0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c430:	7f5a      	ldrb	r2, [r3, #29]
 800c432:	4b7e      	ldr	r3, [pc, #504]	; (800c62c <tcp_slowtmr+0x26c>)
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	429a      	cmp	r2, r3
 800c438:	d103      	bne.n	800c442 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800c43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43c:	68db      	ldr	r3, [r3, #12]
 800c43e:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800c440:	e1fc      	b.n	800c83c <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c442:	4b7a      	ldr	r3, [pc, #488]	; (800c62c <tcp_slowtmr+0x26c>)
 800c444:	781a      	ldrb	r2, [r3, #0]
 800c446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c448:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800c44a:	2300      	movs	r3, #0
 800c44c:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800c44e:	2300      	movs	r3, #0
 800c450:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c454:	7d1b      	ldrb	r3, [r3, #20]
 800c456:	2b02      	cmp	r3, #2
 800c458:	d108      	bne.n	800c46c <tcp_slowtmr+0xac>
 800c45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c460:	2b05      	cmp	r3, #5
 800c462:	d903      	bls.n	800c46c <tcp_slowtmr+0xac>
      ++pcb_remove;
 800c464:	7ffb      	ldrb	r3, [r7, #31]
 800c466:	3301      	adds	r3, #1
 800c468:	77fb      	strb	r3, [r7, #31]
 800c46a:	e0a2      	b.n	800c5b2 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800c46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c472:	2b0b      	cmp	r3, #11
 800c474:	d903      	bls.n	800c47e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800c476:	7ffb      	ldrb	r3, [r7, #31]
 800c478:	3301      	adds	r3, #1
 800c47a:	77fb      	strb	r3, [r7, #31]
 800c47c:	e099      	b.n	800c5b2 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c480:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c484:	2b00      	cmp	r3, #0
 800c486:	d032      	beq.n	800c4ee <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800c488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c48e:	3b01      	subs	r3, #1
 800c490:	4a6d      	ldr	r2, [pc, #436]	; (800c648 <tcp_slowtmr+0x288>)
 800c492:	5cd3      	ldrb	r3, [r2, r3]
 800c494:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800c496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c498:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800c49c:	7cfa      	ldrb	r2, [r7, #19]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d907      	bls.n	800c4b2 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800c4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	b2da      	uxtb	r2, r3
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ae:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800c4b8:	7cfa      	ldrb	r2, [r7, #19]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d879      	bhi.n	800c5b2 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800c4be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c4c0:	f004 fbc8 	bl	8010c54 <tcp_zero_window_probe>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d173      	bne.n	800c5b2 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800c4ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c4d8:	2b06      	cmp	r3, #6
 800c4da:	d86a      	bhi.n	800c5b2 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800c4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4de:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	b2da      	uxtb	r2, r3
 800c4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800c4ec:	e061      	b.n	800c5b2 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800c4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	db08      	blt.n	800c50a <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800c4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4fa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	3301      	adds	r3, #1
 800c502:	b29b      	uxth	r3, r3
 800c504:	b21a      	sxth	r2, r3
 800c506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c508:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800c50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d04f      	beq.n	800c5b2 <tcp_slowtmr+0x1f2>
 800c512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c514:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c51e:	429a      	cmp	r2, r3
 800c520:	db47      	blt.n	800c5b2 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800c522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c524:	7d1b      	ldrb	r3, [r3, #20]
 800c526:	2b02      	cmp	r3, #2
 800c528:	d018      	beq.n	800c55c <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800c52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c530:	2b0c      	cmp	r3, #12
 800c532:	bf28      	it	cs
 800c534:	230c      	movcs	r3, #12
 800c536:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c53e:	10db      	asrs	r3, r3, #3
 800c540:	b21b      	sxth	r3, r3
 800c542:	461a      	mov	r2, r3
 800c544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c546:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c54a:	4413      	add	r3, r2
 800c54c:	7dfa      	ldrb	r2, [r7, #23]
 800c54e:	493f      	ldr	r1, [pc, #252]	; (800c64c <tcp_slowtmr+0x28c>)
 800c550:	5c8a      	ldrb	r2, [r1, r2]
 800c552:	4093      	lsls	r3, r2
 800c554:	b21a      	sxth	r2, r3
 800c556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c558:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800c55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55e:	2200      	movs	r2, #0
 800c560:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c564:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c56e:	4293      	cmp	r3, r2
 800c570:	bf28      	it	cs
 800c572:	4613      	movcs	r3, r2
 800c574:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800c576:	8abb      	ldrh	r3, [r7, #20]
 800c578:	085b      	lsrs	r3, r3, #1
 800c57a:	b29a      	uxth	r2, r3
 800c57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c584:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c58c:	005b      	lsls	r3, r3, #1
 800c58e:	b29b      	uxth	r3, r3
 800c590:	429a      	cmp	r2, r3
 800c592:	d206      	bcs.n	800c5a2 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800c594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c596:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c598:	005b      	lsls	r3, r3, #1
 800c59a:	b29a      	uxth	r2, r3
 800c59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800c5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800c5ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c5ae:	f004 fa37 	bl	8010a20 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b4:	7d1b      	ldrb	r3, [r3, #20]
 800c5b6:	2b06      	cmp	r3, #6
 800c5b8:	d10f      	bne.n	800c5da <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5bc:	7e9b      	ldrb	r3, [r3, #26]
 800c5be:	f003 0310 	and.w	r3, r3, #16
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d009      	beq.n	800c5da <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c5c6:	4b18      	ldr	r3, [pc, #96]	; (800c628 <tcp_slowtmr+0x268>)
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5cc:	6a1b      	ldr	r3, [r3, #32]
 800c5ce:	1ad3      	subs	r3, r2, r3
 800c5d0:	2b28      	cmp	r3, #40	; 0x28
 800c5d2:	d902      	bls.n	800c5da <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c5d4:	7ffb      	ldrb	r3, [r7, #31]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5dc:	7a1b      	ldrb	r3, [r3, #8]
 800c5de:	f003 0308 	and.w	r3, r3, #8
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d05d      	beq.n	800c6a2 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800c5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e8:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c5ea:	2b04      	cmp	r3, #4
 800c5ec:	d003      	beq.n	800c5f6 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800c5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f0:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800c5f2:	2b07      	cmp	r3, #7
 800c5f4:	d155      	bne.n	800c6a2 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c5f6:	4b0c      	ldr	r3, [pc, #48]	; (800c628 <tcp_slowtmr+0x268>)
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fc:	6a1b      	ldr	r3, [r3, #32]
 800c5fe:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800c600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c606:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800c60a:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800c60e:	4910      	ldr	r1, [pc, #64]	; (800c650 <tcp_slowtmr+0x290>)
 800c610:	fba1 1303 	umull	r1, r3, r1, r3
 800c614:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c616:	429a      	cmp	r2, r3
 800c618:	d91c      	bls.n	800c654 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c61a:	7ffb      	ldrb	r3, [r7, #31]
 800c61c:	3301      	adds	r3, #1
 800c61e:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800c620:	7fbb      	ldrb	r3, [r7, #30]
 800c622:	3301      	adds	r3, #1
 800c624:	77bb      	strb	r3, [r7, #30]
 800c626:	e03c      	b.n	800c6a2 <tcp_slowtmr+0x2e2>
 800c628:	2000ad10 	.word	0x2000ad10
 800c62c:	2000295a 	.word	0x2000295a
 800c630:	2000ad0c 	.word	0x2000ad0c
 800c634:	08015ee0 	.word	0x08015ee0
 800c638:	08016090 	.word	0x08016090
 800c63c:	08015f1c 	.word	0x08015f1c
 800c640:	080160bc 	.word	0x080160bc
 800c644:	080160e8 	.word	0x080160e8
 800c648:	080173a4 	.word	0x080173a4
 800c64c:	08017394 	.word	0x08017394
 800c650:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c654:	4b97      	ldr	r3, [pc, #604]	; (800c8b4 <tcp_slowtmr+0x4f4>)
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65a:	6a1b      	ldr	r3, [r3, #32]
 800c65c:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c660:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800c664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c666:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800c66a:	4618      	mov	r0, r3
 800c66c:	4b92      	ldr	r3, [pc, #584]	; (800c8b8 <tcp_slowtmr+0x4f8>)
 800c66e:	fb03 f300 	mul.w	r3, r3, r0
 800c672:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800c674:	4991      	ldr	r1, [pc, #580]	; (800c8bc <tcp_slowtmr+0x4fc>)
 800c676:	fba1 1303 	umull	r1, r3, r1, r3
 800c67a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d910      	bls.n	800c6a2 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800c680:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c682:	f004 faaa 	bl	8010bda <tcp_keepalive>
 800c686:	4603      	mov	r3, r0
 800c688:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800c68a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d107      	bne.n	800c6a2 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800c692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c694:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800c698:	3301      	adds	r3, #1
 800c69a:	b2da      	uxtb	r2, r3
 800c69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d016      	beq.n	800c6d8 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800c6aa:	4b82      	ldr	r3, [pc, #520]	; (800c8b4 <tcp_slowtmr+0x4f4>)
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b0:	6a1b      	ldr	r3, [r3, #32]
 800c6b2:	1ad2      	subs	r2, r2, r3
 800c6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	460b      	mov	r3, r1
 800c6be:	005b      	lsls	r3, r3, #1
 800c6c0:	440b      	add	r3, r1
 800c6c2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d307      	bcc.n	800c6d8 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800c6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f000 fa04 	bl	800cada <tcp_segs_free>
      pcb->ooseq = NULL;
 800c6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6da:	7d1b      	ldrb	r3, [r3, #20]
 800c6dc:	2b03      	cmp	r3, #3
 800c6de:	d109      	bne.n	800c6f4 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c6e0:	4b74      	ldr	r3, [pc, #464]	; (800c8b4 <tcp_slowtmr+0x4f4>)
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e6:	6a1b      	ldr	r3, [r3, #32]
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	2b28      	cmp	r3, #40	; 0x28
 800c6ec:	d902      	bls.n	800c6f4 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c6ee:	7ffb      	ldrb	r3, [r7, #31]
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f6:	7d1b      	ldrb	r3, [r3, #20]
 800c6f8:	2b09      	cmp	r3, #9
 800c6fa:	d109      	bne.n	800c710 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c6fc:	4b6d      	ldr	r3, [pc, #436]	; (800c8b4 <tcp_slowtmr+0x4f4>)
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c702:	6a1b      	ldr	r3, [r3, #32]
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	2bf0      	cmp	r3, #240	; 0xf0
 800c708:	d902      	bls.n	800c710 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800c70a:	7ffb      	ldrb	r3, [r7, #31]
 800c70c:	3301      	adds	r3, #1
 800c70e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c710:	7ffb      	ldrb	r3, [r7, #31]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d05d      	beq.n	800c7d2 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c71c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c71e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c720:	f000 fc40 	bl	800cfa4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c724:	6a3b      	ldr	r3, [r7, #32]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d010      	beq.n	800c74c <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c72a:	4b65      	ldr	r3, [pc, #404]	; (800c8c0 <tcp_slowtmr+0x500>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c730:	429a      	cmp	r2, r3
 800c732:	d106      	bne.n	800c742 <tcp_slowtmr+0x382>
 800c734:	4b63      	ldr	r3, [pc, #396]	; (800c8c4 <tcp_slowtmr+0x504>)
 800c736:	f240 4289 	movw	r2, #1161	; 0x489
 800c73a:	4963      	ldr	r1, [pc, #396]	; (800c8c8 <tcp_slowtmr+0x508>)
 800c73c:	4863      	ldr	r0, [pc, #396]	; (800c8cc <tcp_slowtmr+0x50c>)
 800c73e:	f007 fbb7 	bl	8013eb0 <iprintf>
        prev->next = pcb->next;
 800c742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c744:	68da      	ldr	r2, [r3, #12]
 800c746:	6a3b      	ldr	r3, [r7, #32]
 800c748:	60da      	str	r2, [r3, #12]
 800c74a:	e00f      	b.n	800c76c <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c74c:	4b5c      	ldr	r3, [pc, #368]	; (800c8c0 <tcp_slowtmr+0x500>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c752:	429a      	cmp	r2, r3
 800c754:	d006      	beq.n	800c764 <tcp_slowtmr+0x3a4>
 800c756:	4b5b      	ldr	r3, [pc, #364]	; (800c8c4 <tcp_slowtmr+0x504>)
 800c758:	f240 428d 	movw	r2, #1165	; 0x48d
 800c75c:	495c      	ldr	r1, [pc, #368]	; (800c8d0 <tcp_slowtmr+0x510>)
 800c75e:	485b      	ldr	r0, [pc, #364]	; (800c8cc <tcp_slowtmr+0x50c>)
 800c760:	f007 fba6 	bl	8013eb0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	4a55      	ldr	r2, [pc, #340]	; (800c8c0 <tcp_slowtmr+0x500>)
 800c76a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c76c:	7fbb      	ldrb	r3, [r7, #30]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d010      	beq.n	800c794 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c774:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c778:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800c77a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800c77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77e:	1d1d      	adds	r5, r3, #4
 800c780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c782:	8adb      	ldrh	r3, [r3, #22]
 800c784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c786:	8b12      	ldrh	r2, [r2, #24]
 800c788:	9201      	str	r2, [sp, #4]
 800c78a:	9300      	str	r3, [sp, #0]
 800c78c:	462b      	mov	r3, r5
 800c78e:	4622      	mov	r2, r4
 800c790:	f004 f8d0 	bl	8010934 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c796:	691b      	ldr	r3, [r3, #16]
 800c798:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c79c:	7d1b      	ldrb	r3, [r3, #20]
 800c79e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800c7aa:	6839      	ldr	r1, [r7, #0]
 800c7ac:	2001      	movs	r0, #1
 800c7ae:	f7fe f925 	bl	800a9fc <memp_free>

      tcp_active_pcbs_changed = 0;
 800c7b2:	4b48      	ldr	r3, [pc, #288]	; (800c8d4 <tcp_slowtmr+0x514>)
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d004      	beq.n	800c7c8 <tcp_slowtmr+0x408>
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	f06f 010c 	mvn.w	r1, #12
 800c7c4:	68b8      	ldr	r0, [r7, #8]
 800c7c6:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c7c8:	4b42      	ldr	r3, [pc, #264]	; (800c8d4 <tcp_slowtmr+0x514>)
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d035      	beq.n	800c83c <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800c7d0:	e606      	b.n	800c3e0 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d4:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800c7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d8:	68db      	ldr	r3, [r3, #12]
 800c7da:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c7dc:	6a3b      	ldr	r3, [r7, #32]
 800c7de:	7edb      	ldrb	r3, [r3, #27]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	b2da      	uxtb	r2, r3
 800c7e4:	6a3b      	ldr	r3, [r7, #32]
 800c7e6:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800c7e8:	6a3b      	ldr	r3, [r7, #32]
 800c7ea:	7eda      	ldrb	r2, [r3, #27]
 800c7ec:	6a3b      	ldr	r3, [r7, #32]
 800c7ee:	7f1b      	ldrb	r3, [r3, #28]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d323      	bcc.n	800c83c <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800c7f4:	6a3b      	ldr	r3, [r7, #32]
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c7fa:	4b36      	ldr	r3, [pc, #216]	; (800c8d4 <tcp_slowtmr+0x514>)
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c800:	6a3b      	ldr	r3, [r7, #32]
 800c802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c806:	2b00      	cmp	r3, #0
 800c808:	d00a      	beq.n	800c820 <tcp_slowtmr+0x460>
 800c80a:	6a3b      	ldr	r3, [r7, #32]
 800c80c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c810:	6a3a      	ldr	r2, [r7, #32]
 800c812:	6912      	ldr	r2, [r2, #16]
 800c814:	6a39      	ldr	r1, [r7, #32]
 800c816:	4610      	mov	r0, r2
 800c818:	4798      	blx	r3
 800c81a:	4603      	mov	r3, r0
 800c81c:	777b      	strb	r3, [r7, #29]
 800c81e:	e001      	b.n	800c824 <tcp_slowtmr+0x464>
 800c820:	2300      	movs	r3, #0
 800c822:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800c824:	4b2b      	ldr	r3, [pc, #172]	; (800c8d4 <tcp_slowtmr+0x514>)
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d000      	beq.n	800c82e <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800c82c:	e5d8      	b.n	800c3e0 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c82e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d102      	bne.n	800c83c <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800c836:	6a38      	ldr	r0, [r7, #32]
 800c838:	f003 fdf2 	bl	8010420 <tcp_output>
  while (pcb != NULL) {
 800c83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83e:	2b00      	cmp	r3, #0
 800c840:	f47f add4 	bne.w	800c3ec <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c844:	2300      	movs	r3, #0
 800c846:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800c848:	4b23      	ldr	r3, [pc, #140]	; (800c8d8 <tcp_slowtmr+0x518>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800c84e:	e068      	b.n	800c922 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c852:	7d1b      	ldrb	r3, [r3, #20]
 800c854:	2b0a      	cmp	r3, #10
 800c856:	d006      	beq.n	800c866 <tcp_slowtmr+0x4a6>
 800c858:	4b1a      	ldr	r3, [pc, #104]	; (800c8c4 <tcp_slowtmr+0x504>)
 800c85a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800c85e:	491f      	ldr	r1, [pc, #124]	; (800c8dc <tcp_slowtmr+0x51c>)
 800c860:	481a      	ldr	r0, [pc, #104]	; (800c8cc <tcp_slowtmr+0x50c>)
 800c862:	f007 fb25 	bl	8013eb0 <iprintf>
    pcb_remove = 0;
 800c866:	2300      	movs	r3, #0
 800c868:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c86a:	4b12      	ldr	r3, [pc, #72]	; (800c8b4 <tcp_slowtmr+0x4f4>)
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c870:	6a1b      	ldr	r3, [r3, #32]
 800c872:	1ad3      	subs	r3, r2, r3
 800c874:	2bf0      	cmp	r3, #240	; 0xf0
 800c876:	d902      	bls.n	800c87e <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800c878:	7ffb      	ldrb	r3, [r7, #31]
 800c87a:	3301      	adds	r3, #1
 800c87c:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c87e:	7ffb      	ldrb	r3, [r7, #31]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d049      	beq.n	800c918 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c886:	f000 fb8d 	bl	800cfa4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c88a:	6a3b      	ldr	r3, [r7, #32]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d029      	beq.n	800c8e4 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c890:	4b11      	ldr	r3, [pc, #68]	; (800c8d8 <tcp_slowtmr+0x518>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c896:	429a      	cmp	r2, r3
 800c898:	d106      	bne.n	800c8a8 <tcp_slowtmr+0x4e8>
 800c89a:	4b0a      	ldr	r3, [pc, #40]	; (800c8c4 <tcp_slowtmr+0x504>)
 800c89c:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800c8a0:	490f      	ldr	r1, [pc, #60]	; (800c8e0 <tcp_slowtmr+0x520>)
 800c8a2:	480a      	ldr	r0, [pc, #40]	; (800c8cc <tcp_slowtmr+0x50c>)
 800c8a4:	f007 fb04 	bl	8013eb0 <iprintf>
        prev->next = pcb->next;
 800c8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8aa:	68da      	ldr	r2, [r3, #12]
 800c8ac:	6a3b      	ldr	r3, [r7, #32]
 800c8ae:	60da      	str	r2, [r3, #12]
 800c8b0:	e028      	b.n	800c904 <tcp_slowtmr+0x544>
 800c8b2:	bf00      	nop
 800c8b4:	2000ad10 	.word	0x2000ad10
 800c8b8:	000124f8 	.word	0x000124f8
 800c8bc:	10624dd3 	.word	0x10624dd3
 800c8c0:	2000ad0c 	.word	0x2000ad0c
 800c8c4:	08015ee0 	.word	0x08015ee0
 800c8c8:	08016118 	.word	0x08016118
 800c8cc:	08015f1c 	.word	0x08015f1c
 800c8d0:	08016144 	.word	0x08016144
 800c8d4:	2000ad08 	.word	0x2000ad08
 800c8d8:	2000ad1c 	.word	0x2000ad1c
 800c8dc:	08016170 	.word	0x08016170
 800c8e0:	080161a0 	.word	0x080161a0
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c8e4:	4b12      	ldr	r3, [pc, #72]	; (800c930 <tcp_slowtmr+0x570>)
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8ea:	429a      	cmp	r2, r3
 800c8ec:	d006      	beq.n	800c8fc <tcp_slowtmr+0x53c>
 800c8ee:	4b11      	ldr	r3, [pc, #68]	; (800c934 <tcp_slowtmr+0x574>)
 800c8f0:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800c8f4:	4910      	ldr	r1, [pc, #64]	; (800c938 <tcp_slowtmr+0x578>)
 800c8f6:	4811      	ldr	r0, [pc, #68]	; (800c93c <tcp_slowtmr+0x57c>)
 800c8f8:	f007 fada 	bl	8013eb0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	4a0b      	ldr	r2, [pc, #44]	; (800c930 <tcp_slowtmr+0x570>)
 800c902:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c906:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800c908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800c90e:	69b9      	ldr	r1, [r7, #24]
 800c910:	2001      	movs	r0, #1
 800c912:	f7fe f873 	bl	800a9fc <memp_free>
 800c916:	e004      	b.n	800c922 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800c918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91a:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800c91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91e:	68db      	ldr	r3, [r3, #12]
 800c920:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800c922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c924:	2b00      	cmp	r3, #0
 800c926:	d193      	bne.n	800c850 <tcp_slowtmr+0x490>
    }
  }
}
 800c928:	bf00      	nop
 800c92a:	3728      	adds	r7, #40	; 0x28
 800c92c:	46bd      	mov	sp, r7
 800c92e:	bdb0      	pop	{r4, r5, r7, pc}
 800c930:	2000ad1c 	.word	0x2000ad1c
 800c934:	08015ee0 	.word	0x08015ee0
 800c938:	080161c8 	.word	0x080161c8
 800c93c:	08015f1c 	.word	0x08015f1c

0800c940 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c940:	b580      	push	{r7, lr}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c946:	4b2d      	ldr	r3, [pc, #180]	; (800c9fc <tcp_fasttmr+0xbc>)
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	3301      	adds	r3, #1
 800c94c:	b2da      	uxtb	r2, r3
 800c94e:	4b2b      	ldr	r3, [pc, #172]	; (800c9fc <tcp_fasttmr+0xbc>)
 800c950:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c952:	4b2b      	ldr	r3, [pc, #172]	; (800ca00 <tcp_fasttmr+0xc0>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c958:	e048      	b.n	800c9ec <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	7f5a      	ldrb	r2, [r3, #29]
 800c95e:	4b27      	ldr	r3, [pc, #156]	; (800c9fc <tcp_fasttmr+0xbc>)
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	429a      	cmp	r2, r3
 800c964:	d03f      	beq.n	800c9e6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c966:	4b25      	ldr	r3, [pc, #148]	; (800c9fc <tcp_fasttmr+0xbc>)
 800c968:	781a      	ldrb	r2, [r3, #0]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	7e9b      	ldrb	r3, [r3, #26]
 800c972:	f003 0301 	and.w	r3, r3, #1
 800c976:	2b00      	cmp	r3, #0
 800c978:	d010      	beq.n	800c99c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	7e9b      	ldrb	r3, [r3, #26]
 800c97e:	f043 0302 	orr.w	r3, r3, #2
 800c982:	b2da      	uxtb	r2, r3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f003 fd49 	bl	8010420 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	7e9b      	ldrb	r3, [r3, #26]
 800c992:	f023 0303 	bic.w	r3, r3, #3
 800c996:	b2da      	uxtb	r2, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	7e9b      	ldrb	r3, [r3, #26]
 800c9a0:	f003 0308 	and.w	r3, r3, #8
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d009      	beq.n	800c9bc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	7e9b      	ldrb	r3, [r3, #26]
 800c9ac:	f023 0308 	bic.w	r3, r3, #8
 800c9b0:	b2da      	uxtb	r2, r3
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f7ff f99e 	bl	800bcf8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d00a      	beq.n	800c9e0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c9ca:	4b0e      	ldr	r3, [pc, #56]	; (800ca04 <tcp_fasttmr+0xc4>)
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f000 f819 	bl	800ca08 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c9d6:	4b0b      	ldr	r3, [pc, #44]	; (800ca04 <tcp_fasttmr+0xc4>)
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d000      	beq.n	800c9e0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c9de:	e7b8      	b.n	800c952 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	607b      	str	r3, [r7, #4]
 800c9e4:	e002      	b.n	800c9ec <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	68db      	ldr	r3, [r3, #12]
 800c9ea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1b3      	bne.n	800c95a <tcp_fasttmr+0x1a>
    }
  }
}
 800c9f2:	bf00      	nop
 800c9f4:	3708      	adds	r7, #8
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
 800c9fa:	bf00      	nop
 800c9fc:	2000295a 	.word	0x2000295a
 800ca00:	2000ad0c 	.word	0x2000ad0c
 800ca04:	2000ad08 	.word	0x2000ad08

0800ca08 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ca08:	b590      	push	{r4, r7, lr}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca14:	7b5b      	ldrb	r3, [r3, #13]
 800ca16:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca1c:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2200      	movs	r2, #0
 800ca22:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d00b      	beq.n	800ca46 <tcp_process_refused_data+0x3e>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6918      	ldr	r0, [r3, #16]
 800ca38:	2300      	movs	r3, #0
 800ca3a:	68ba      	ldr	r2, [r7, #8]
 800ca3c:	6879      	ldr	r1, [r7, #4]
 800ca3e:	47a0      	blx	r4
 800ca40:	4603      	mov	r3, r0
 800ca42:	73fb      	strb	r3, [r7, #15]
 800ca44:	e007      	b.n	800ca56 <tcp_process_refused_data+0x4e>
 800ca46:	2300      	movs	r3, #0
 800ca48:	68ba      	ldr	r2, [r7, #8]
 800ca4a:	6879      	ldr	r1, [r7, #4]
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	f000 f88c 	bl	800cb6a <tcp_recv_null>
 800ca52:	4603      	mov	r3, r0
 800ca54:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ca56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d12a      	bne.n	800cab4 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800ca5e:	7bbb      	ldrb	r3, [r7, #14]
 800ca60:	f003 0320 	and.w	r3, r3, #32
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d033      	beq.n	800cad0 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca6c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ca70:	d005      	beq.n	800ca7e <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca76:	3301      	adds	r3, #1
 800ca78:	b29a      	uxth	r2, r3
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d00b      	beq.n	800caa0 <tcp_process_refused_data+0x98>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6918      	ldr	r0, [r3, #16]
 800ca92:	2300      	movs	r3, #0
 800ca94:	2200      	movs	r2, #0
 800ca96:	6879      	ldr	r1, [r7, #4]
 800ca98:	47a0      	blx	r4
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	73fb      	strb	r3, [r7, #15]
 800ca9e:	e001      	b.n	800caa4 <tcp_process_refused_data+0x9c>
 800caa0:	2300      	movs	r3, #0
 800caa2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800caa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caa8:	f113 0f0d 	cmn.w	r3, #13
 800caac:	d110      	bne.n	800cad0 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800caae:	f06f 030c 	mvn.w	r3, #12
 800cab2:	e00e      	b.n	800cad2 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800cab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cab8:	f113 0f0d 	cmn.w	r3, #13
 800cabc:	d102      	bne.n	800cac4 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800cabe:	f06f 030c 	mvn.w	r3, #12
 800cac2:	e006      	b.n	800cad2 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	68ba      	ldr	r2, [r7, #8]
 800cac8:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800caca:	f06f 0304 	mvn.w	r3, #4
 800cace:	e000      	b.n	800cad2 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800cad0:	2300      	movs	r3, #0
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3714      	adds	r7, #20
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd90      	pop	{r4, r7, pc}

0800cada <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cada:	b580      	push	{r7, lr}
 800cadc:	b084      	sub	sp, #16
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800cae2:	e007      	b.n	800caf4 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 f809 	bl	800cb02 <tcp_seg_free>
    seg = next;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1f4      	bne.n	800cae4 <tcp_segs_free+0xa>
  }
}
 800cafa:	bf00      	nop
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b082      	sub	sp, #8
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d00c      	beq.n	800cb2a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d004      	beq.n	800cb22 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f7fe fd21 	bl	800b564 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cb22:	6879      	ldr	r1, [r7, #4]
 800cb24:	2003      	movs	r0, #3
 800cb26:	f7fd ff69 	bl	800a9fc <memp_free>
  }
}
 800cb2a:	bf00      	nop
 800cb2c:	3708      	adds	r7, #8
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}

0800cb32 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cb32:	b580      	push	{r7, lr}
 800cb34:	b084      	sub	sp, #16
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cb3a:	2003      	movs	r0, #3
 800cb3c:	f7fd ff0c 	bl	800a958 <memp_malloc>
 800cb40:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d101      	bne.n	800cb4c <tcp_seg_copy+0x1a>
    return NULL;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	e00a      	b.n	800cb62 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cb4c:	2210      	movs	r2, #16
 800cb4e:	6879      	ldr	r1, [r7, #4]
 800cb50:	68f8      	ldr	r0, [r7, #12]
 800cb52:	f007 f99a 	bl	8013e8a <memcpy>
  pbuf_ref(cseg->p);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fe fdb2 	bl	800b6c4 <pbuf_ref>
  return cseg;
 800cb60:	68fb      	ldr	r3, [r7, #12]
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3710      	adds	r7, #16
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}

0800cb6a <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cb6a:	b580      	push	{r7, lr}
 800cb6c:	b084      	sub	sp, #16
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	60f8      	str	r0, [r7, #12]
 800cb72:	60b9      	str	r1, [r7, #8]
 800cb74:	607a      	str	r2, [r7, #4]
 800cb76:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d009      	beq.n	800cb92 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	891b      	ldrh	r3, [r3, #8]
 800cb82:	4619      	mov	r1, r3
 800cb84:	68b8      	ldr	r0, [r7, #8]
 800cb86:	f7ff fa89 	bl	800c09c <tcp_recved>
    pbuf_free(p);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7fe fcea 	bl	800b564 <pbuf_free>
 800cb90:	e008      	b.n	800cba4 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800cb92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d104      	bne.n	800cba4 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800cb9a:	68b8      	ldr	r0, [r7, #8]
 800cb9c:	f7ff f912 	bl	800bdc4 <tcp_close>
 800cba0:	4603      	mov	r3, r0
 800cba2:	e000      	b.n	800cba6 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800cba4:	2300      	movs	r3, #0
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
	...

0800cbb0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b086      	sub	sp, #24
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cbba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	db01      	blt.n	800cbc6 <tcp_kill_prio+0x16>
 800cbc2:	79fb      	ldrb	r3, [r7, #7]
 800cbc4:	e000      	b.n	800cbc8 <tcp_kill_prio+0x18>
 800cbc6:	237f      	movs	r3, #127	; 0x7f
 800cbc8:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cbce:	2300      	movs	r3, #0
 800cbd0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbd2:	4b16      	ldr	r3, [pc, #88]	; (800cc2c <tcp_kill_prio+0x7c>)
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	617b      	str	r3, [r7, #20]
 800cbd8:	e01a      	b.n	800cc10 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	7d5b      	ldrb	r3, [r3, #21]
 800cbde:	7afa      	ldrb	r2, [r7, #11]
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d312      	bcc.n	800cc0a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cbe4:	4b12      	ldr	r3, [pc, #72]	; (800cc30 <tcp_kill_prio+0x80>)
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	6a1b      	ldr	r3, [r3, #32]
 800cbec:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800cbee:	68fa      	ldr	r2, [r7, #12]
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	d80a      	bhi.n	800cc0a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800cbf4:	4b0e      	ldr	r3, [pc, #56]	; (800cc30 <tcp_kill_prio+0x80>)
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	6a1b      	ldr	r3, [r3, #32]
 800cbfc:	1ad3      	subs	r3, r2, r3
 800cbfe:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	7d5b      	ldrb	r3, [r3, #21]
 800cc08:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	617b      	str	r3, [r7, #20]
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d1e1      	bne.n	800cbda <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800cc16:	693b      	ldr	r3, [r7, #16]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d002      	beq.n	800cc22 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cc1c:	6938      	ldr	r0, [r7, #16]
 800cc1e:	f7ff f9e3 	bl	800bfe8 <tcp_abort>
  }
}
 800cc22:	bf00      	nop
 800cc24:	3718      	adds	r7, #24
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
 800cc2a:	bf00      	nop
 800cc2c:	2000ad0c 	.word	0x2000ad0c
 800cc30:	2000ad10 	.word	0x2000ad10

0800cc34 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b086      	sub	sp, #24
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800cc3e:	79fb      	ldrb	r3, [r7, #7]
 800cc40:	2b08      	cmp	r3, #8
 800cc42:	d009      	beq.n	800cc58 <tcp_kill_state+0x24>
 800cc44:	79fb      	ldrb	r3, [r7, #7]
 800cc46:	2b09      	cmp	r3, #9
 800cc48:	d006      	beq.n	800cc58 <tcp_kill_state+0x24>
 800cc4a:	4b1a      	ldr	r3, [pc, #104]	; (800ccb4 <tcp_kill_state+0x80>)
 800cc4c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800cc50:	4919      	ldr	r1, [pc, #100]	; (800ccb8 <tcp_kill_state+0x84>)
 800cc52:	481a      	ldr	r0, [pc, #104]	; (800ccbc <tcp_kill_state+0x88>)
 800cc54:	f007 f92c 	bl	8013eb0 <iprintf>

  inactivity = 0;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc60:	4b17      	ldr	r3, [pc, #92]	; (800ccc0 <tcp_kill_state+0x8c>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	617b      	str	r3, [r7, #20]
 800cc66:	e017      	b.n	800cc98 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	7d1b      	ldrb	r3, [r3, #20]
 800cc6c:	79fa      	ldrb	r2, [r7, #7]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d10f      	bne.n	800cc92 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cc72:	4b14      	ldr	r3, [pc, #80]	; (800ccc4 <tcp_kill_state+0x90>)
 800cc74:	681a      	ldr	r2, [r3, #0]
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	6a1b      	ldr	r3, [r3, #32]
 800cc7a:	1ad3      	subs	r3, r2, r3
 800cc7c:	68fa      	ldr	r2, [r7, #12]
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d807      	bhi.n	800cc92 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800cc82:	4b10      	ldr	r3, [pc, #64]	; (800ccc4 <tcp_kill_state+0x90>)
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	697b      	ldr	r3, [r7, #20]
 800cc88:	6a1b      	ldr	r3, [r3, #32]
 800cc8a:	1ad3      	subs	r3, r2, r3
 800cc8c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	68db      	ldr	r3, [r3, #12]
 800cc96:	617b      	str	r3, [r7, #20]
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1e4      	bne.n	800cc68 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d003      	beq.n	800ccac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800cca4:	2100      	movs	r1, #0
 800cca6:	6938      	ldr	r0, [r7, #16]
 800cca8:	f7ff f8ec 	bl	800be84 <tcp_abandon>
  }
}
 800ccac:	bf00      	nop
 800ccae:	3718      	adds	r7, #24
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}
 800ccb4:	08015ee0 	.word	0x08015ee0
 800ccb8:	080161f0 	.word	0x080161f0
 800ccbc:	08015f1c 	.word	0x08015f1c
 800ccc0:	2000ad0c 	.word	0x2000ad0c
 800ccc4:	2000ad10 	.word	0x2000ad10

0800ccc8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b084      	sub	sp, #16
 800cccc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccd6:	4b12      	ldr	r3, [pc, #72]	; (800cd20 <tcp_kill_timewait+0x58>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	60fb      	str	r3, [r7, #12]
 800ccdc:	e012      	b.n	800cd04 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ccde:	4b11      	ldr	r3, [pc, #68]	; (800cd24 <tcp_kill_timewait+0x5c>)
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	6a1b      	ldr	r3, [r3, #32]
 800cce6:	1ad3      	subs	r3, r2, r3
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d807      	bhi.n	800ccfe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ccee:	4b0d      	ldr	r3, [pc, #52]	; (800cd24 <tcp_kill_timewait+0x5c>)
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	6a1b      	ldr	r3, [r3, #32]
 800ccf6:	1ad3      	subs	r3, r2, r3
 800ccf8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	60fb      	str	r3, [r7, #12]
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d1e9      	bne.n	800ccde <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d002      	beq.n	800cd16 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cd10:	68b8      	ldr	r0, [r7, #8]
 800cd12:	f7ff f969 	bl	800bfe8 <tcp_abort>
  }
}
 800cd16:	bf00      	nop
 800cd18:	3710      	adds	r7, #16
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	2000ad1c 	.word	0x2000ad1c
 800cd24:	2000ad10 	.word	0x2000ad10

0800cd28 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	4603      	mov	r3, r0
 800cd30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cd32:	2001      	movs	r0, #1
 800cd34:	f7fd fe10 	bl	800a958 <memp_malloc>
 800cd38:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d124      	bne.n	800cd8a <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800cd40:	f7ff ffc2 	bl	800ccc8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cd44:	2001      	movs	r0, #1
 800cd46:	f7fd fe07 	bl	800a958 <memp_malloc>
 800cd4a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d11b      	bne.n	800cd8a <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800cd52:	2009      	movs	r0, #9
 800cd54:	f7ff ff6e 	bl	800cc34 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cd58:	2001      	movs	r0, #1
 800cd5a:	f7fd fdfd 	bl	800a958 <memp_malloc>
 800cd5e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d111      	bne.n	800cd8a <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800cd66:	2008      	movs	r0, #8
 800cd68:	f7ff ff64 	bl	800cc34 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cd6c:	2001      	movs	r0, #1
 800cd6e:	f7fd fdf3 	bl	800a958 <memp_malloc>
 800cd72:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d107      	bne.n	800cd8a <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800cd7a:	79fb      	ldrb	r3, [r7, #7]
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f7ff ff17 	bl	800cbb0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cd82:	2001      	movs	r0, #1
 800cd84:	f7fd fde8 	bl	800a958 <memp_malloc>
 800cd88:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d03f      	beq.n	800ce10 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800cd90:	2298      	movs	r2, #152	; 0x98
 800cd92:	2100      	movs	r1, #0
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f007 f883 	bl	8013ea0 <memset>
    pcb->prio = prio;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	79fa      	ldrb	r2, [r7, #7]
 800cd9e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cda6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cdb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	22ff      	movs	r2, #255	; 0xff
 800cdbe:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cdc6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2206      	movs	r2, #6
 800cdcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	2206      	movs	r2, #6
 800cdd4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cddc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2201      	movs	r2, #1
 800cde2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800cde6:	4b0d      	ldr	r3, [pc, #52]	; (800ce1c <tcp_alloc+0xf4>)
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800cdee:	4b0c      	ldr	r3, [pc, #48]	; (800ce20 <tcp_alloc+0xf8>)
 800cdf0:	781a      	ldrb	r2, [r3, #0]
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cdfc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	4a08      	ldr	r2, [pc, #32]	; (800ce24 <tcp_alloc+0xfc>)
 800ce04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	4a07      	ldr	r2, [pc, #28]	; (800ce28 <tcp_alloc+0x100>)
 800ce0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ce10:	68fb      	ldr	r3, [r7, #12]
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	2000ad10 	.word	0x2000ad10
 800ce20:	2000295a 	.word	0x2000295a
 800ce24:	0800cb6b 	.word	0x0800cb6b
 800ce28:	006ddd00 	.word	0x006ddd00

0800ce2c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b084      	sub	sp, #16
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	4603      	mov	r3, r0
 800ce34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ce36:	2040      	movs	r0, #64	; 0x40
 800ce38:	f7ff ff76 	bl	800cd28 <tcp_alloc>
 800ce3c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3710      	adds	r7, #16
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b083      	sub	sp, #12
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d002      	beq.n	800ce5e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	683a      	ldr	r2, [r7, #0]
 800ce5c:	611a      	str	r2, [r3, #16]
  }
}
 800ce5e:	bf00      	nop
 800ce60:	370c      	adds	r7, #12
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bc80      	pop	{r7}
 800ce66:	4770      	bx	lr

0800ce68 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00e      	beq.n	800ce96 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	7d1b      	ldrb	r3, [r3, #20]
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d106      	bne.n	800ce8e <tcp_recv+0x26>
 800ce80:	4b07      	ldr	r3, [pc, #28]	; (800cea0 <tcp_recv+0x38>)
 800ce82:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800ce86:	4907      	ldr	r1, [pc, #28]	; (800cea4 <tcp_recv+0x3c>)
 800ce88:	4807      	ldr	r0, [pc, #28]	; (800cea8 <tcp_recv+0x40>)
 800ce8a:	f007 f811 	bl	8013eb0 <iprintf>
    pcb->recv = recv;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	683a      	ldr	r2, [r7, #0]
 800ce92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ce96:	bf00      	nop
 800ce98:	3708      	adds	r7, #8
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	08015ee0 	.word	0x08015ee0
 800cea4:	08016200 	.word	0x08016200
 800cea8:	08015f1c 	.word	0x08015f1c

0800ceac <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b082      	sub	sp, #8
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d00d      	beq.n	800ced8 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	7d1b      	ldrb	r3, [r3, #20]
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d106      	bne.n	800ced2 <tcp_sent+0x26>
 800cec4:	4b06      	ldr	r3, [pc, #24]	; (800cee0 <tcp_sent+0x34>)
 800cec6:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800ceca:	4906      	ldr	r1, [pc, #24]	; (800cee4 <tcp_sent+0x38>)
 800cecc:	4806      	ldr	r0, [pc, #24]	; (800cee8 <tcp_sent+0x3c>)
 800cece:	f006 ffef 	bl	8013eb0 <iprintf>
    pcb->sent = sent;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	683a      	ldr	r2, [r7, #0]
 800ced6:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800ced8:	bf00      	nop
 800ceda:	3708      	adds	r7, #8
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	08015ee0 	.word	0x08015ee0
 800cee4:	08016228 	.word	0x08016228
 800cee8:	08015f1c 	.word	0x08015f1c

0800ceec <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d00e      	beq.n	800cf1a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	7d1b      	ldrb	r3, [r3, #20]
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d106      	bne.n	800cf12 <tcp_err+0x26>
 800cf04:	4b07      	ldr	r3, [pc, #28]	; (800cf24 <tcp_err+0x38>)
 800cf06:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800cf0a:	4907      	ldr	r1, [pc, #28]	; (800cf28 <tcp_err+0x3c>)
 800cf0c:	4807      	ldr	r0, [pc, #28]	; (800cf2c <tcp_err+0x40>)
 800cf0e:	f006 ffcf 	bl	8013eb0 <iprintf>
    pcb->errf = err;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	683a      	ldr	r2, [r7, #0]
 800cf16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800cf1a:	bf00      	nop
 800cf1c:	3708      	adds	r7, #8
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	bf00      	nop
 800cf24:	08015ee0 	.word	0x08015ee0
 800cf28:	08016250 	.word	0x08016250
 800cf2c:	08015f1c 	.word	0x08015f1c

0800cf30 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b085      	sub	sp, #20
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d008      	beq.n	800cf52 <tcp_accept+0x22>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	7d1b      	ldrb	r3, [r3, #20]
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d104      	bne.n	800cf52 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	683a      	ldr	r2, [r7, #0]
 800cf50:	619a      	str	r2, [r3, #24]
  }
}
 800cf52:	bf00      	nop
 800cf54:	3714      	adds	r7, #20
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bc80      	pop	{r7}
 800cf5a:	4770      	bx	lr

0800cf5c <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	4613      	mov	r3, r2
 800cf68:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	7d1b      	ldrb	r3, [r3, #20]
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d106      	bne.n	800cf80 <tcp_poll+0x24>
 800cf72:	4b09      	ldr	r3, [pc, #36]	; (800cf98 <tcp_poll+0x3c>)
 800cf74:	f240 7203 	movw	r2, #1795	; 0x703
 800cf78:	4908      	ldr	r1, [pc, #32]	; (800cf9c <tcp_poll+0x40>)
 800cf7a:	4809      	ldr	r0, [pc, #36]	; (800cfa0 <tcp_poll+0x44>)
 800cf7c:	f006 ff98 	bl	8013eb0 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	68ba      	ldr	r2, [r7, #8]
 800cf84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	79fa      	ldrb	r2, [r7, #7]
 800cf8c:	771a      	strb	r2, [r3, #28]
}
 800cf8e:	bf00      	nop
 800cf90:	3710      	adds	r7, #16
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	08015ee0 	.word	0x08015ee0
 800cf9c:	08016278 	.word	0x08016278
 800cfa0:	08015f1c 	.word	0x08015f1c

0800cfa4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	7d1b      	ldrb	r3, [r3, #20]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d034      	beq.n	800d01e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800cfb8:	2b0a      	cmp	r3, #10
 800cfba:	d030      	beq.n	800d01e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800cfc0:	2b01      	cmp	r3, #1
 800cfc2:	d02c      	beq.n	800d01e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d007      	beq.n	800cfdc <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7fe fac7 	bl	800b564 <pbuf_free>
      pcb->refused_data = NULL;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7ff fd7a 	bl	800cada <tcp_segs_free>
    pcb->ooseq = NULL;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cff2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cff8:	4618      	mov	r0, r3
 800cffa:	f7ff fd6e 	bl	800cada <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d002:	4618      	mov	r0, r3
 800d004:	f7ff fd69 	bl	800cada <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2200      	movs	r2, #0
 800d00c:	669a      	str	r2, [r3, #104]	; 0x68
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2200      	movs	r2, #0
 800d01a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800d01e:	bf00      	nop
 800d020:	3708      	adds	r7, #8
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
	...

0800d028 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b084      	sub	sp, #16
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	683a      	ldr	r2, [r7, #0]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d105      	bne.n	800d048 <tcp_pcb_remove+0x20>
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	68da      	ldr	r2, [r3, #12]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	601a      	str	r2, [r3, #0]
 800d046:	e013      	b.n	800d070 <tcp_pcb_remove+0x48>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	60fb      	str	r3, [r7, #12]
 800d04e:	e00c      	b.n	800d06a <tcp_pcb_remove+0x42>
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	683a      	ldr	r2, [r7, #0]
 800d056:	429a      	cmp	r2, r3
 800d058:	d104      	bne.n	800d064 <tcp_pcb_remove+0x3c>
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	68da      	ldr	r2, [r3, #12]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	60da      	str	r2, [r3, #12]
 800d062:	e005      	b.n	800d070 <tcp_pcb_remove+0x48>
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	68db      	ldr	r3, [r3, #12]
 800d068:	60fb      	str	r3, [r7, #12]
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d1ef      	bne.n	800d050 <tcp_pcb_remove+0x28>
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	2200      	movs	r2, #0
 800d074:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d076:	6838      	ldr	r0, [r7, #0]
 800d078:	f7ff ff94 	bl	800cfa4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	7d1b      	ldrb	r3, [r3, #20]
 800d080:	2b0a      	cmp	r3, #10
 800d082:	d013      	beq.n	800d0ac <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d00f      	beq.n	800d0ac <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	7e9b      	ldrb	r3, [r3, #26]
 800d090:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800d094:	2b00      	cmp	r3, #0
 800d096:	d009      	beq.n	800d0ac <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	7e9b      	ldrb	r3, [r3, #26]
 800d09c:	f043 0302 	orr.w	r3, r3, #2
 800d0a0:	b2da      	uxtb	r2, r3
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800d0a6:	6838      	ldr	r0, [r7, #0]
 800d0a8:	f003 f9ba 	bl	8010420 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	7d1b      	ldrb	r3, [r3, #20]
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d020      	beq.n	800d0f6 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d006      	beq.n	800d0ca <tcp_pcb_remove+0xa2>
 800d0bc:	4b13      	ldr	r3, [pc, #76]	; (800d10c <tcp_pcb_remove+0xe4>)
 800d0be:	f240 7253 	movw	r2, #1875	; 0x753
 800d0c2:	4913      	ldr	r1, [pc, #76]	; (800d110 <tcp_pcb_remove+0xe8>)
 800d0c4:	4813      	ldr	r0, [pc, #76]	; (800d114 <tcp_pcb_remove+0xec>)
 800d0c6:	f006 fef3 	bl	8013eb0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d006      	beq.n	800d0e0 <tcp_pcb_remove+0xb8>
 800d0d2:	4b0e      	ldr	r3, [pc, #56]	; (800d10c <tcp_pcb_remove+0xe4>)
 800d0d4:	f240 7254 	movw	r2, #1876	; 0x754
 800d0d8:	490f      	ldr	r1, [pc, #60]	; (800d118 <tcp_pcb_remove+0xf0>)
 800d0da:	480e      	ldr	r0, [pc, #56]	; (800d114 <tcp_pcb_remove+0xec>)
 800d0dc:	f006 fee8 	bl	8013eb0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d006      	beq.n	800d0f6 <tcp_pcb_remove+0xce>
 800d0e8:	4b08      	ldr	r3, [pc, #32]	; (800d10c <tcp_pcb_remove+0xe4>)
 800d0ea:	f240 7256 	movw	r2, #1878	; 0x756
 800d0ee:	490b      	ldr	r1, [pc, #44]	; (800d11c <tcp_pcb_remove+0xf4>)
 800d0f0:	4808      	ldr	r0, [pc, #32]	; (800d114 <tcp_pcb_remove+0xec>)
 800d0f2:	f006 fedd 	bl	8013eb0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	2200      	movs	r2, #0
 800d100:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d102:	bf00      	nop
 800d104:	3710      	adds	r7, #16
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}
 800d10a:	bf00      	nop
 800d10c:	08015ee0 	.word	0x08015ee0
 800d110:	08016298 	.word	0x08016298
 800d114:	08015f1c 	.word	0x08015f1c
 800d118:	080162b0 	.word	0x080162b0
 800d11c:	080162cc 	.word	0x080162cc

0800d120 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d120:	b480      	push	{r7}
 800d122:	b083      	sub	sp, #12
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d128:	4b06      	ldr	r3, [pc, #24]	; (800d144 <tcp_next_iss+0x24>)
 800d12a:	681a      	ldr	r2, [r3, #0]
 800d12c:	4b06      	ldr	r3, [pc, #24]	; (800d148 <tcp_next_iss+0x28>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	4413      	add	r3, r2
 800d132:	4a04      	ldr	r2, [pc, #16]	; (800d144 <tcp_next_iss+0x24>)
 800d134:	6013      	str	r3, [r2, #0]
  return iss;
 800d136:	4b03      	ldr	r3, [pc, #12]	; (800d144 <tcp_next_iss+0x24>)
 800d138:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	370c      	adds	r7, #12
 800d13e:	46bd      	mov	sp, r7
 800d140:	bc80      	pop	{r7}
 800d142:	4770      	bx	lr
 800d144:	20000014 	.word	0x20000014
 800d148:	2000ad10 	.word	0x2000ad10

0800d14c <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b084      	sub	sp, #16
 800d150:	af00      	add	r7, sp, #0
 800d152:	4603      	mov	r3, r0
 800d154:	6039      	str	r1, [r7, #0]
 800d156:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800d158:	6838      	ldr	r0, [r7, #0]
 800d15a:	f005 fb39 	bl	80127d0 <ip4_route>
 800d15e:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d101      	bne.n	800d16a <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800d166:	88fb      	ldrh	r3, [r7, #6]
 800d168:	e010      	b.n	800d18c <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d16e:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d170:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d008      	beq.n	800d18a <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800d178:	897b      	ldrh	r3, [r7, #10]
 800d17a:	3b28      	subs	r3, #40	; 0x28
 800d17c:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d17e:	893a      	ldrh	r2, [r7, #8]
 800d180:	88fb      	ldrh	r3, [r7, #6]
 800d182:	4293      	cmp	r3, r2
 800d184:	bf28      	it	cs
 800d186:	4613      	movcs	r3, r2
 800d188:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800d18a:	88fb      	ldrh	r3, [r7, #6]
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3710      	adds	r7, #16
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d1a2:	e011      	b.n	800d1c8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d108      	bne.n	800d1c2 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	68db      	ldr	r3, [r3, #12]
 800d1b4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d1b6:	68f8      	ldr	r0, [r7, #12]
 800d1b8:	f7fe ff16 	bl	800bfe8 <tcp_abort>
      pcb = next;
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	60fb      	str	r3, [r7, #12]
 800d1c0:	e002      	b.n	800d1c8 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	68db      	ldr	r3, [r3, #12]
 800d1c6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d1ea      	bne.n	800d1a4 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800d1ce:	bf00      	nop
 800d1d0:	3710      	adds	r7, #16
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}
	...

0800d1d8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d02c      	beq.n	800d242 <tcp_netif_ip_addr_changed+0x6a>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d028      	beq.n	800d242 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d1f0:	4b16      	ldr	r3, [pc, #88]	; (800d24c <tcp_netif_ip_addr_changed+0x74>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f7ff ffcc 	bl	800d194 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d1fc:	4b14      	ldr	r3, [pc, #80]	; (800d250 <tcp_netif_ip_addr_changed+0x78>)
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4619      	mov	r1, r3
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f7ff ffc6 	bl	800d194 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d019      	beq.n	800d242 <tcp_netif_ip_addr_changed+0x6a>
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d015      	beq.n	800d242 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800d216:	4b0f      	ldr	r3, [pc, #60]	; (800d254 <tcp_netif_ip_addr_changed+0x7c>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	60fb      	str	r3, [r7, #12]
 800d21c:	e00e      	b.n	800d23c <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	68db      	ldr	r3, [r3, #12]
 800d222:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	d103      	bne.n	800d238 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	60fb      	str	r3, [r7, #12]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d1ed      	bne.n	800d21e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d242:	bf00      	nop
 800d244:	3710      	adds	r7, #16
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}
 800d24a:	bf00      	nop
 800d24c:	2000ad0c 	.word	0x2000ad0c
 800d250:	2000ad18 	.word	0x2000ad18
 800d254:	2000ad14 	.word	0x2000ad14

0800d258 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d258:	b590      	push	{r4, r7, lr}
 800d25a:	b08b      	sub	sp, #44	; 0x2c
 800d25c:	af02      	add	r7, sp, #8
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	4a82      	ldr	r2, [pc, #520]	; (800d470 <tcp_input+0x218>)
 800d268:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	895b      	ldrh	r3, [r3, #10]
 800d26e:	2b13      	cmp	r3, #19
 800d270:	f240 838a 	bls.w	800d988 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d274:	4b7f      	ldr	r3, [pc, #508]	; (800d474 <tcp_input+0x21c>)
 800d276:	695a      	ldr	r2, [r3, #20]
 800d278:	4b7e      	ldr	r3, [pc, #504]	; (800d474 <tcp_input+0x21c>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4619      	mov	r1, r3
 800d27e:	4610      	mov	r0, r2
 800d280:	f005 fd20 	bl	8012cc4 <ip4_addr_isbroadcast_u32>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	f040 8380 	bne.w	800d98c <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d28c:	4b79      	ldr	r3, [pc, #484]	; (800d474 <tcp_input+0x21c>)
 800d28e:	695b      	ldr	r3, [r3, #20]
 800d290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d294:	2be0      	cmp	r3, #224	; 0xe0
 800d296:	f000 8379 	beq.w	800d98c <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800d29a:	4b75      	ldr	r3, [pc, #468]	; (800d470 <tcp_input+0x218>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	899b      	ldrh	r3, [r3, #12]
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f7fc ff6e 	bl	800a184 <lwip_htons>
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	0b1b      	lsrs	r3, r3, #12
 800d2ac:	b29b      	uxth	r3, r3
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	009b      	lsls	r3, r3, #2
 800d2b2:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d2b4:	7cbb      	ldrb	r3, [r7, #18]
 800d2b6:	2b13      	cmp	r3, #19
 800d2b8:	f240 8368 	bls.w	800d98c <tcp_input+0x734>
 800d2bc:	7cbb      	ldrb	r3, [r7, #18]
 800d2be:	b29a      	uxth	r2, r3
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	891b      	ldrh	r3, [r3, #8]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	f200 8361 	bhi.w	800d98c <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800d2ca:	7cbb      	ldrb	r3, [r7, #18]
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	3b14      	subs	r3, #20
 800d2d0:	b29a      	uxth	r2, r3
 800d2d2:	4b69      	ldr	r3, [pc, #420]	; (800d478 <tcp_input+0x220>)
 800d2d4:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d2d6:	4b69      	ldr	r3, [pc, #420]	; (800d47c <tcp_input+0x224>)
 800d2d8:	2200      	movs	r2, #0
 800d2da:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	895a      	ldrh	r2, [r3, #10]
 800d2e0:	7cbb      	ldrb	r3, [r7, #18]
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	429a      	cmp	r2, r3
 800d2e6:	d30d      	bcc.n	800d304 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d2e8:	4b63      	ldr	r3, [pc, #396]	; (800d478 <tcp_input+0x220>)
 800d2ea:	881a      	ldrh	r2, [r3, #0]
 800d2ec:	4b64      	ldr	r3, [pc, #400]	; (800d480 <tcp_input+0x228>)
 800d2ee:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800d2f0:	7cbb      	ldrb	r3, [r7, #18]
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	425b      	negs	r3, r3
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	b21b      	sxth	r3, r3
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f7fe f90d 	bl	800b51c <pbuf_header>
 800d302:	e055      	b.n	800d3b0 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d105      	bne.n	800d318 <tcp_input+0xc0>
 800d30c:	4b5d      	ldr	r3, [pc, #372]	; (800d484 <tcp_input+0x22c>)
 800d30e:	22b2      	movs	r2, #178	; 0xb2
 800d310:	495d      	ldr	r1, [pc, #372]	; (800d488 <tcp_input+0x230>)
 800d312:	485e      	ldr	r0, [pc, #376]	; (800d48c <tcp_input+0x234>)
 800d314:	f006 fdcc 	bl	8013eb0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800d318:	f06f 0113 	mvn.w	r1, #19
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f7fe f8fd 	bl	800b51c <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	895a      	ldrh	r2, [r3, #10]
 800d326:	4b56      	ldr	r3, [pc, #344]	; (800d480 <tcp_input+0x228>)
 800d328:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800d32a:	4b53      	ldr	r3, [pc, #332]	; (800d478 <tcp_input+0x220>)
 800d32c:	881a      	ldrh	r2, [r3, #0]
 800d32e:	4b54      	ldr	r3, [pc, #336]	; (800d480 <tcp_input+0x228>)
 800d330:	881b      	ldrh	r3, [r3, #0]
 800d332:	1ad3      	subs	r3, r2, r3
 800d334:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800d336:	4b52      	ldr	r3, [pc, #328]	; (800d480 <tcp_input+0x228>)
 800d338:	881b      	ldrh	r3, [r3, #0]
 800d33a:	425b      	negs	r3, r3
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	b21b      	sxth	r3, r3
 800d340:	4619      	mov	r1, r3
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f7fe f8ea 	bl	800b51c <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	895b      	ldrh	r3, [r3, #10]
 800d34e:	8a3a      	ldrh	r2, [r7, #16]
 800d350:	429a      	cmp	r2, r3
 800d352:	f200 831d 	bhi.w	800d990 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	4a47      	ldr	r2, [pc, #284]	; (800d47c <tcp_input+0x224>)
 800d35e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	8a3b      	ldrh	r3, [r7, #16]
 800d366:	425b      	negs	r3, r3
 800d368:	b29b      	uxth	r3, r3
 800d36a:	b21b      	sxth	r3, r3
 800d36c:	4619      	mov	r1, r3
 800d36e:	4610      	mov	r0, r2
 800d370:	f7fe f8d4 	bl	800b51c <pbuf_header>
    p->tot_len -= opt2len;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	891a      	ldrh	r2, [r3, #8]
 800d378:	8a3b      	ldrh	r3, [r7, #16]
 800d37a:	1ad3      	subs	r3, r2, r3
 800d37c:	b29a      	uxth	r2, r3
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	895b      	ldrh	r3, [r3, #10]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d005      	beq.n	800d396 <tcp_input+0x13e>
 800d38a:	4b3e      	ldr	r3, [pc, #248]	; (800d484 <tcp_input+0x22c>)
 800d38c:	22cf      	movs	r2, #207	; 0xcf
 800d38e:	4940      	ldr	r1, [pc, #256]	; (800d490 <tcp_input+0x238>)
 800d390:	483e      	ldr	r0, [pc, #248]	; (800d48c <tcp_input+0x234>)
 800d392:	f006 fd8d 	bl	8013eb0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	891a      	ldrh	r2, [r3, #8]
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	891b      	ldrh	r3, [r3, #8]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d005      	beq.n	800d3b0 <tcp_input+0x158>
 800d3a4:	4b37      	ldr	r3, [pc, #220]	; (800d484 <tcp_input+0x22c>)
 800d3a6:	22d0      	movs	r2, #208	; 0xd0
 800d3a8:	493a      	ldr	r1, [pc, #232]	; (800d494 <tcp_input+0x23c>)
 800d3aa:	4838      	ldr	r0, [pc, #224]	; (800d48c <tcp_input+0x234>)
 800d3ac:	f006 fd80 	bl	8013eb0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d3b0:	4b2f      	ldr	r3, [pc, #188]	; (800d470 <tcp_input+0x218>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	881b      	ldrh	r3, [r3, #0]
 800d3b6:	b29a      	uxth	r2, r3
 800d3b8:	4b2d      	ldr	r3, [pc, #180]	; (800d470 <tcp_input+0x218>)
 800d3ba:	681c      	ldr	r4, [r3, #0]
 800d3bc:	4610      	mov	r0, r2
 800d3be:	f7fc fee1 	bl	800a184 <lwip_htons>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d3c6:	4b2a      	ldr	r3, [pc, #168]	; (800d470 <tcp_input+0x218>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	885b      	ldrh	r3, [r3, #2]
 800d3cc:	b29a      	uxth	r2, r3
 800d3ce:	4b28      	ldr	r3, [pc, #160]	; (800d470 <tcp_input+0x218>)
 800d3d0:	681c      	ldr	r4, [r3, #0]
 800d3d2:	4610      	mov	r0, r2
 800d3d4:	f7fc fed6 	bl	800a184 <lwip_htons>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d3dc:	4b24      	ldr	r3, [pc, #144]	; (800d470 <tcp_input+0x218>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	685a      	ldr	r2, [r3, #4]
 800d3e2:	4b23      	ldr	r3, [pc, #140]	; (800d470 <tcp_input+0x218>)
 800d3e4:	681c      	ldr	r4, [r3, #0]
 800d3e6:	4610      	mov	r0, r2
 800d3e8:	f7fc fed9 	bl	800a19e <lwip_htonl>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	6063      	str	r3, [r4, #4]
 800d3f0:	6863      	ldr	r3, [r4, #4]
 800d3f2:	4a29      	ldr	r2, [pc, #164]	; (800d498 <tcp_input+0x240>)
 800d3f4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d3f6:	4b1e      	ldr	r3, [pc, #120]	; (800d470 <tcp_input+0x218>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	689a      	ldr	r2, [r3, #8]
 800d3fc:	4b1c      	ldr	r3, [pc, #112]	; (800d470 <tcp_input+0x218>)
 800d3fe:	681c      	ldr	r4, [r3, #0]
 800d400:	4610      	mov	r0, r2
 800d402:	f7fc fecc 	bl	800a19e <lwip_htonl>
 800d406:	4603      	mov	r3, r0
 800d408:	60a3      	str	r3, [r4, #8]
 800d40a:	68a3      	ldr	r3, [r4, #8]
 800d40c:	4a23      	ldr	r2, [pc, #140]	; (800d49c <tcp_input+0x244>)
 800d40e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d410:	4b17      	ldr	r3, [pc, #92]	; (800d470 <tcp_input+0x218>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	89db      	ldrh	r3, [r3, #14]
 800d416:	b29a      	uxth	r2, r3
 800d418:	4b15      	ldr	r3, [pc, #84]	; (800d470 <tcp_input+0x218>)
 800d41a:	681c      	ldr	r4, [r3, #0]
 800d41c:	4610      	mov	r0, r2
 800d41e:	f7fc feb1 	bl	800a184 <lwip_htons>
 800d422:	4603      	mov	r3, r0
 800d424:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d426:	4b12      	ldr	r3, [pc, #72]	; (800d470 <tcp_input+0x218>)
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	899b      	ldrh	r3, [r3, #12]
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	4618      	mov	r0, r3
 800d430:	f7fc fea8 	bl	800a184 <lwip_htons>
 800d434:	4603      	mov	r3, r0
 800d436:	b2db      	uxtb	r3, r3
 800d438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d43c:	b2da      	uxtb	r2, r3
 800d43e:	4b18      	ldr	r3, [pc, #96]	; (800d4a0 <tcp_input+0x248>)
 800d440:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	891a      	ldrh	r2, [r3, #8]
 800d446:	4b16      	ldr	r3, [pc, #88]	; (800d4a0 <tcp_input+0x248>)
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	f003 0303 	and.w	r3, r3, #3
 800d44e:	2b00      	cmp	r3, #0
 800d450:	bf14      	ite	ne
 800d452:	2301      	movne	r3, #1
 800d454:	2300      	moveq	r3, #0
 800d456:	b2db      	uxtb	r3, r3
 800d458:	b29b      	uxth	r3, r3
 800d45a:	4413      	add	r3, r2
 800d45c:	b29a      	uxth	r2, r3
 800d45e:	4b11      	ldr	r3, [pc, #68]	; (800d4a4 <tcp_input+0x24c>)
 800d460:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d462:	2300      	movs	r3, #0
 800d464:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d466:	4b10      	ldr	r3, [pc, #64]	; (800d4a8 <tcp_input+0x250>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	61fb      	str	r3, [r7, #28]
 800d46c:	e082      	b.n	800d574 <tcp_input+0x31c>
 800d46e:	bf00      	nop
 800d470:	2000296c 	.word	0x2000296c
 800d474:	2000746c 	.word	0x2000746c
 800d478:	20002970 	.word	0x20002970
 800d47c:	20002974 	.word	0x20002974
 800d480:	20002972 	.word	0x20002972
 800d484:	080162e4 	.word	0x080162e4
 800d488:	08016318 	.word	0x08016318
 800d48c:	08016328 	.word	0x08016328
 800d490:	08016350 	.word	0x08016350
 800d494:	0801635c 	.word	0x0801635c
 800d498:	2000297c 	.word	0x2000297c
 800d49c:	20002980 	.word	0x20002980
 800d4a0:	20002988 	.word	0x20002988
 800d4a4:	20002986 	.word	0x20002986
 800d4a8:	2000ad0c 	.word	0x2000ad0c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	7d1b      	ldrb	r3, [r3, #20]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d105      	bne.n	800d4c0 <tcp_input+0x268>
 800d4b4:	4b8f      	ldr	r3, [pc, #572]	; (800d6f4 <tcp_input+0x49c>)
 800d4b6:	22e2      	movs	r2, #226	; 0xe2
 800d4b8:	498f      	ldr	r1, [pc, #572]	; (800d6f8 <tcp_input+0x4a0>)
 800d4ba:	4890      	ldr	r0, [pc, #576]	; (800d6fc <tcp_input+0x4a4>)
 800d4bc:	f006 fcf8 	bl	8013eb0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d4c0:	69fb      	ldr	r3, [r7, #28]
 800d4c2:	7d1b      	ldrb	r3, [r3, #20]
 800d4c4:	2b0a      	cmp	r3, #10
 800d4c6:	d105      	bne.n	800d4d4 <tcp_input+0x27c>
 800d4c8:	4b8a      	ldr	r3, [pc, #552]	; (800d6f4 <tcp_input+0x49c>)
 800d4ca:	22e3      	movs	r2, #227	; 0xe3
 800d4cc:	498c      	ldr	r1, [pc, #560]	; (800d700 <tcp_input+0x4a8>)
 800d4ce:	488b      	ldr	r0, [pc, #556]	; (800d6fc <tcp_input+0x4a4>)
 800d4d0:	f006 fcee 	bl	8013eb0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d4d4:	69fb      	ldr	r3, [r7, #28]
 800d4d6:	7d1b      	ldrb	r3, [r3, #20]
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d105      	bne.n	800d4e8 <tcp_input+0x290>
 800d4dc:	4b85      	ldr	r3, [pc, #532]	; (800d6f4 <tcp_input+0x49c>)
 800d4de:	22e4      	movs	r2, #228	; 0xe4
 800d4e0:	4988      	ldr	r1, [pc, #544]	; (800d704 <tcp_input+0x4ac>)
 800d4e2:	4886      	ldr	r0, [pc, #536]	; (800d6fc <tcp_input+0x4a4>)
 800d4e4:	f006 fce4 	bl	8013eb0 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800d4e8:	69fb      	ldr	r3, [r7, #28]
 800d4ea:	8b1a      	ldrh	r2, [r3, #24]
 800d4ec:	4b86      	ldr	r3, [pc, #536]	; (800d708 <tcp_input+0x4b0>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	881b      	ldrh	r3, [r3, #0]
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	429a      	cmp	r2, r3
 800d4f6:	d138      	bne.n	800d56a <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	8ada      	ldrh	r2, [r3, #22]
 800d4fc:	4b82      	ldr	r3, [pc, #520]	; (800d708 <tcp_input+0x4b0>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	885b      	ldrh	r3, [r3, #2]
 800d502:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d504:	429a      	cmp	r2, r3
 800d506:	d130      	bne.n	800d56a <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d508:	69fb      	ldr	r3, [r7, #28]
 800d50a:	685a      	ldr	r2, [r3, #4]
 800d50c:	4b7f      	ldr	r3, [pc, #508]	; (800d70c <tcp_input+0x4b4>)
 800d50e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d510:	429a      	cmp	r2, r3
 800d512:	d12a      	bne.n	800d56a <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d514:	69fb      	ldr	r3, [r7, #28]
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	4b7c      	ldr	r3, [pc, #496]	; (800d70c <tcp_input+0x4b4>)
 800d51a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d124      	bne.n	800d56a <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d520:	69fb      	ldr	r3, [r7, #28]
 800d522:	68db      	ldr	r3, [r3, #12]
 800d524:	69fa      	ldr	r2, [r7, #28]
 800d526:	429a      	cmp	r2, r3
 800d528:	d105      	bne.n	800d536 <tcp_input+0x2de>
 800d52a:	4b72      	ldr	r3, [pc, #456]	; (800d6f4 <tcp_input+0x49c>)
 800d52c:	22ec      	movs	r2, #236	; 0xec
 800d52e:	4978      	ldr	r1, [pc, #480]	; (800d710 <tcp_input+0x4b8>)
 800d530:	4872      	ldr	r0, [pc, #456]	; (800d6fc <tcp_input+0x4a4>)
 800d532:	f006 fcbd 	bl	8013eb0 <iprintf>
      if (prev != NULL) {
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d00a      	beq.n	800d552 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	68da      	ldr	r2, [r3, #12]
 800d540:	69bb      	ldr	r3, [r7, #24]
 800d542:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d544:	4b73      	ldr	r3, [pc, #460]	; (800d714 <tcp_input+0x4bc>)
 800d546:	681a      	ldr	r2, [r3, #0]
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d54c:	4a71      	ldr	r2, [pc, #452]	; (800d714 <tcp_input+0x4bc>)
 800d54e:	69fb      	ldr	r3, [r7, #28]
 800d550:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d552:	69fb      	ldr	r3, [r7, #28]
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	69fa      	ldr	r2, [r7, #28]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d10f      	bne.n	800d57c <tcp_input+0x324>
 800d55c:	4b65      	ldr	r3, [pc, #404]	; (800d6f4 <tcp_input+0x49c>)
 800d55e:	22f4      	movs	r2, #244	; 0xf4
 800d560:	496d      	ldr	r1, [pc, #436]	; (800d718 <tcp_input+0x4c0>)
 800d562:	4866      	ldr	r0, [pc, #408]	; (800d6fc <tcp_input+0x4a4>)
 800d564:	f006 fca4 	bl	8013eb0 <iprintf>
      break;
 800d568:	e008      	b.n	800d57c <tcp_input+0x324>
    }
    prev = pcb;
 800d56a:	69fb      	ldr	r3, [r7, #28]
 800d56c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d56e:	69fb      	ldr	r3, [r7, #28]
 800d570:	68db      	ldr	r3, [r3, #12]
 800d572:	61fb      	str	r3, [r7, #28]
 800d574:	69fb      	ldr	r3, [r7, #28]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d198      	bne.n	800d4ac <tcp_input+0x254>
 800d57a:	e000      	b.n	800d57e <tcp_input+0x326>
      break;
 800d57c:	bf00      	nop
  }

  if (pcb == NULL) {
 800d57e:	69fb      	ldr	r3, [r7, #28]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d173      	bne.n	800d66c <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d584:	4b65      	ldr	r3, [pc, #404]	; (800d71c <tcp_input+0x4c4>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	61fb      	str	r3, [r7, #28]
 800d58a:	e02f      	b.n	800d5ec <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d58c:	69fb      	ldr	r3, [r7, #28]
 800d58e:	7d1b      	ldrb	r3, [r3, #20]
 800d590:	2b0a      	cmp	r3, #10
 800d592:	d005      	beq.n	800d5a0 <tcp_input+0x348>
 800d594:	4b57      	ldr	r3, [pc, #348]	; (800d6f4 <tcp_input+0x49c>)
 800d596:	22fe      	movs	r2, #254	; 0xfe
 800d598:	4961      	ldr	r1, [pc, #388]	; (800d720 <tcp_input+0x4c8>)
 800d59a:	4858      	ldr	r0, [pc, #352]	; (800d6fc <tcp_input+0x4a4>)
 800d59c:	f006 fc88 	bl	8013eb0 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800d5a0:	69fb      	ldr	r3, [r7, #28]
 800d5a2:	8b1a      	ldrh	r2, [r3, #24]
 800d5a4:	4b58      	ldr	r3, [pc, #352]	; (800d708 <tcp_input+0x4b0>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	881b      	ldrh	r3, [r3, #0]
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d11a      	bne.n	800d5e6 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800d5b0:	69fb      	ldr	r3, [r7, #28]
 800d5b2:	8ada      	ldrh	r2, [r3, #22]
 800d5b4:	4b54      	ldr	r3, [pc, #336]	; (800d708 <tcp_input+0x4b0>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	885b      	ldrh	r3, [r3, #2]
 800d5ba:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d112      	bne.n	800d5e6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d5c0:	69fb      	ldr	r3, [r7, #28]
 800d5c2:	685a      	ldr	r2, [r3, #4]
 800d5c4:	4b51      	ldr	r3, [pc, #324]	; (800d70c <tcp_input+0x4b4>)
 800d5c6:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d10c      	bne.n	800d5e6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d5cc:	69fb      	ldr	r3, [r7, #28]
 800d5ce:	681a      	ldr	r2, [r3, #0]
 800d5d0:	4b4e      	ldr	r3, [pc, #312]	; (800d70c <tcp_input+0x4b4>)
 800d5d2:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d106      	bne.n	800d5e6 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800d5d8:	69f8      	ldr	r0, [r7, #28]
 800d5da:	f000 fb15 	bl	800dc08 <tcp_timewait_input>
        pbuf_free(p);
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f7fd ffc0 	bl	800b564 <pbuf_free>
        return;
 800d5e4:	e1da      	b.n	800d99c <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5e6:	69fb      	ldr	r3, [r7, #28]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	61fb      	str	r3, [r7, #28]
 800d5ec:	69fb      	ldr	r3, [r7, #28]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d1cc      	bne.n	800d58c <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d5f6:	4b4b      	ldr	r3, [pc, #300]	; (800d724 <tcp_input+0x4cc>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	617b      	str	r3, [r7, #20]
 800d5fc:	e019      	b.n	800d632 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	8ada      	ldrh	r2, [r3, #22]
 800d602:	4b41      	ldr	r3, [pc, #260]	; (800d708 <tcp_input+0x4b0>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	885b      	ldrh	r3, [r3, #2]
 800d608:	b29b      	uxth	r3, r3
 800d60a:	429a      	cmp	r2, r3
 800d60c:	d10c      	bne.n	800d628 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	4b3e      	ldr	r3, [pc, #248]	; (800d70c <tcp_input+0x4b4>)
 800d614:	695b      	ldr	r3, [r3, #20]
 800d616:	429a      	cmp	r2, r3
 800d618:	d00f      	beq.n	800d63a <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d00d      	beq.n	800d63c <tcp_input+0x3e4>
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	2b00      	cmp	r3, #0
 800d626:	d009      	beq.n	800d63c <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	68db      	ldr	r3, [r3, #12]
 800d630:	617b      	str	r3, [r7, #20]
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d1e2      	bne.n	800d5fe <tcp_input+0x3a6>
 800d638:	e000      	b.n	800d63c <tcp_input+0x3e4>
            break;
 800d63a:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d014      	beq.n	800d66c <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d642:	69bb      	ldr	r3, [r7, #24]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d00a      	beq.n	800d65e <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	68da      	ldr	r2, [r3, #12]
 800d64c:	69bb      	ldr	r3, [r7, #24]
 800d64e:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d650:	4b34      	ldr	r3, [pc, #208]	; (800d724 <tcp_input+0x4cc>)
 800d652:	681a      	ldr	r2, [r3, #0]
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d658:	4a32      	ldr	r2, [pc, #200]	; (800d724 <tcp_input+0x4cc>)
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800d65e:	6978      	ldr	r0, [r7, #20]
 800d660:	f000 f9f0 	bl	800da44 <tcp_listen_input>
      pbuf_free(p);
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f7fd ff7d 	bl	800b564 <pbuf_free>
      return;
 800d66a:	e197      	b.n	800d99c <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800d66c:	69fb      	ldr	r3, [r7, #28]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	f000 8164 	beq.w	800d93c <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d674:	4b2c      	ldr	r3, [pc, #176]	; (800d728 <tcp_input+0x4d0>)
 800d676:	2200      	movs	r2, #0
 800d678:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	891a      	ldrh	r2, [r3, #8]
 800d67e:	4b2a      	ldr	r3, [pc, #168]	; (800d728 <tcp_input+0x4d0>)
 800d680:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d682:	4a29      	ldr	r2, [pc, #164]	; (800d728 <tcp_input+0x4d0>)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d688:	4b1f      	ldr	r3, [pc, #124]	; (800d708 <tcp_input+0x4b0>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	4a26      	ldr	r2, [pc, #152]	; (800d728 <tcp_input+0x4d0>)
 800d68e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d690:	4b26      	ldr	r3, [pc, #152]	; (800d72c <tcp_input+0x4d4>)
 800d692:	2200      	movs	r2, #0
 800d694:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d696:	4b26      	ldr	r3, [pc, #152]	; (800d730 <tcp_input+0x4d8>)
 800d698:	2200      	movs	r2, #0
 800d69a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d69c:	4b25      	ldr	r3, [pc, #148]	; (800d734 <tcp_input+0x4dc>)
 800d69e:	2200      	movs	r2, #0
 800d6a0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d6a2:	4b25      	ldr	r3, [pc, #148]	; (800d738 <tcp_input+0x4e0>)
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	f003 0308 	and.w	r3, r3, #8
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d006      	beq.n	800d6bc <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	7b5b      	ldrb	r3, [r3, #13]
 800d6b2:	f043 0301 	orr.w	r3, r3, #1
 800d6b6:	b2da      	uxtb	r2, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d6bc:	69fb      	ldr	r3, [r7, #28]
 800d6be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d03d      	beq.n	800d740 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d6c4:	69f8      	ldr	r0, [r7, #28]
 800d6c6:	f7ff f99f 	bl	800ca08 <tcp_process_refused_data>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	f113 0f0d 	cmn.w	r3, #13
 800d6d0:	d007      	beq.n	800d6e2 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d032      	beq.n	800d740 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d6da:	4b18      	ldr	r3, [pc, #96]	; (800d73c <tcp_input+0x4e4>)
 800d6dc:	881b      	ldrh	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d02e      	beq.n	800d740 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	f040 8108 	bne.w	800d8fc <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d6ec:	69f8      	ldr	r0, [r7, #28]
 800d6ee:	f002 fe3b 	bl	8010368 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d6f2:	e103      	b.n	800d8fc <tcp_input+0x6a4>
 800d6f4:	080162e4 	.word	0x080162e4
 800d6f8:	0801637c 	.word	0x0801637c
 800d6fc:	08016328 	.word	0x08016328
 800d700:	080163a4 	.word	0x080163a4
 800d704:	080163d0 	.word	0x080163d0
 800d708:	2000296c 	.word	0x2000296c
 800d70c:	2000746c 	.word	0x2000746c
 800d710:	080163f8 	.word	0x080163f8
 800d714:	2000ad0c 	.word	0x2000ad0c
 800d718:	08016424 	.word	0x08016424
 800d71c:	2000ad1c 	.word	0x2000ad1c
 800d720:	08016450 	.word	0x08016450
 800d724:	2000ad14 	.word	0x2000ad14
 800d728:	2000295c 	.word	0x2000295c
 800d72c:	2000298c 	.word	0x2000298c
 800d730:	20002989 	.word	0x20002989
 800d734:	20002984 	.word	0x20002984
 800d738:	20002988 	.word	0x20002988
 800d73c:	20002986 	.word	0x20002986
      }
    }
    tcp_input_pcb = pcb;
 800d740:	4a98      	ldr	r2, [pc, #608]	; (800d9a4 <tcp_input+0x74c>)
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d746:	69f8      	ldr	r0, [r7, #28]
 800d748:	f000 fac6 	bl	800dcd8 <tcp_process>
 800d74c:	4603      	mov	r3, r0
 800d74e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d750:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d754:	f113 0f0d 	cmn.w	r3, #13
 800d758:	f000 80d2 	beq.w	800d900 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800d75c:	4b92      	ldr	r3, [pc, #584]	; (800d9a8 <tcp_input+0x750>)
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	f003 0308 	and.w	r3, r3, #8
 800d764:	2b00      	cmp	r3, #0
 800d766:	d016      	beq.n	800d796 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d008      	beq.n	800d784 <tcp_input+0x52c>
 800d772:	69fb      	ldr	r3, [r7, #28]
 800d774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d778:	69fa      	ldr	r2, [r7, #28]
 800d77a:	6912      	ldr	r2, [r2, #16]
 800d77c:	f06f 010d 	mvn.w	r1, #13
 800d780:	4610      	mov	r0, r2
 800d782:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d784:	69f9      	ldr	r1, [r7, #28]
 800d786:	4889      	ldr	r0, [pc, #548]	; (800d9ac <tcp_input+0x754>)
 800d788:	f7ff fc4e 	bl	800d028 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800d78c:	69f9      	ldr	r1, [r7, #28]
 800d78e:	2001      	movs	r0, #1
 800d790:	f7fd f934 	bl	800a9fc <memp_free>
 800d794:	e0bf      	b.n	800d916 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800d796:	2300      	movs	r3, #0
 800d798:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d79a:	4b85      	ldr	r3, [pc, #532]	; (800d9b0 <tcp_input+0x758>)
 800d79c:	881b      	ldrh	r3, [r3, #0]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d01b      	beq.n	800d7da <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d7a2:	4b83      	ldr	r3, [pc, #524]	; (800d9b0 <tcp_input+0x758>)
 800d7a4:	881b      	ldrh	r3, [r3, #0]
 800d7a6:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d009      	beq.n	800d7c4 <tcp_input+0x56c>
 800d7b0:	69fb      	ldr	r3, [r7, #28]
 800d7b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7b4:	69fa      	ldr	r2, [r7, #28]
 800d7b6:	6910      	ldr	r0, [r2, #16]
 800d7b8:	89fa      	ldrh	r2, [r7, #14]
 800d7ba:	69f9      	ldr	r1, [r7, #28]
 800d7bc:	4798      	blx	r3
 800d7be:	4603      	mov	r3, r0
 800d7c0:	74fb      	strb	r3, [r7, #19]
 800d7c2:	e001      	b.n	800d7c8 <tcp_input+0x570>
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d7c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d7cc:	f113 0f0d 	cmn.w	r3, #13
 800d7d0:	f000 8098 	beq.w	800d904 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d7d4:	4b76      	ldr	r3, [pc, #472]	; (800d9b0 <tcp_input+0x758>)
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d7da:	69f8      	ldr	r0, [r7, #28]
 800d7dc:	f000 f900 	bl	800d9e0 <tcp_input_delayed_close>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	f040 8090 	bne.w	800d908 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d7e8:	4b72      	ldr	r3, [pc, #456]	; (800d9b4 <tcp_input+0x75c>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d041      	beq.n	800d874 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d7f0:	69fb      	ldr	r3, [r7, #28]
 800d7f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d006      	beq.n	800d806 <tcp_input+0x5ae>
 800d7f8:	4b6f      	ldr	r3, [pc, #444]	; (800d9b8 <tcp_input+0x760>)
 800d7fa:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800d7fe:	496f      	ldr	r1, [pc, #444]	; (800d9bc <tcp_input+0x764>)
 800d800:	486f      	ldr	r0, [pc, #444]	; (800d9c0 <tcp_input+0x768>)
 800d802:	f006 fb55 	bl	8013eb0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d806:	69fb      	ldr	r3, [r7, #28]
 800d808:	7e9b      	ldrb	r3, [r3, #26]
 800d80a:	f003 0310 	and.w	r3, r3, #16
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d008      	beq.n	800d824 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d812:	4b68      	ldr	r3, [pc, #416]	; (800d9b4 <tcp_input+0x75c>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4618      	mov	r0, r3
 800d818:	f7fd fea4 	bl	800b564 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d81c:	69f8      	ldr	r0, [r7, #28]
 800d81e:	f7fe fbe3 	bl	800bfe8 <tcp_abort>
            goto aborted;
 800d822:	e078      	b.n	800d916 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00c      	beq.n	800d848 <tcp_input+0x5f0>
 800d82e:	69fb      	ldr	r3, [r7, #28]
 800d830:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	6918      	ldr	r0, [r3, #16]
 800d838:	4b5e      	ldr	r3, [pc, #376]	; (800d9b4 <tcp_input+0x75c>)
 800d83a:	681a      	ldr	r2, [r3, #0]
 800d83c:	2300      	movs	r3, #0
 800d83e:	69f9      	ldr	r1, [r7, #28]
 800d840:	47a0      	blx	r4
 800d842:	4603      	mov	r3, r0
 800d844:	74fb      	strb	r3, [r7, #19]
 800d846:	e008      	b.n	800d85a <tcp_input+0x602>
 800d848:	4b5a      	ldr	r3, [pc, #360]	; (800d9b4 <tcp_input+0x75c>)
 800d84a:	681a      	ldr	r2, [r3, #0]
 800d84c:	2300      	movs	r3, #0
 800d84e:	69f9      	ldr	r1, [r7, #28]
 800d850:	2000      	movs	r0, #0
 800d852:	f7ff f98a 	bl	800cb6a <tcp_recv_null>
 800d856:	4603      	mov	r3, r0
 800d858:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d85a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d85e:	f113 0f0d 	cmn.w	r3, #13
 800d862:	d053      	beq.n	800d90c <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d864:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d003      	beq.n	800d874 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d86c:	4b51      	ldr	r3, [pc, #324]	; (800d9b4 <tcp_input+0x75c>)
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d874:	4b4c      	ldr	r3, [pc, #304]	; (800d9a8 <tcp_input+0x750>)
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	f003 0320 	and.w	r3, r3, #32
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d030      	beq.n	800d8e2 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d884:	2b00      	cmp	r3, #0
 800d886:	d009      	beq.n	800d89c <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d888:	69fb      	ldr	r3, [r7, #28]
 800d88a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d88c:	7b5a      	ldrb	r2, [r3, #13]
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d892:	f042 0220 	orr.w	r2, r2, #32
 800d896:	b2d2      	uxtb	r2, r2
 800d898:	735a      	strb	r2, [r3, #13]
 800d89a:	e022      	b.n	800d8e2 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8a0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d8a4:	d005      	beq.n	800d8b2 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800d8a6:	69fb      	ldr	r3, [r7, #28]
 800d8a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d8aa:	3301      	adds	r3, #1
 800d8ac:	b29a      	uxth	r2, r3
 800d8ae:	69fb      	ldr	r3, [r7, #28]
 800d8b0:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d8b2:	69fb      	ldr	r3, [r7, #28]
 800d8b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d00b      	beq.n	800d8d4 <tcp_input+0x67c>
 800d8bc:	69fb      	ldr	r3, [r7, #28]
 800d8be:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	6918      	ldr	r0, [r3, #16]
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	69f9      	ldr	r1, [r7, #28]
 800d8cc:	47a0      	blx	r4
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	74fb      	strb	r3, [r7, #19]
 800d8d2:	e001      	b.n	800d8d8 <tcp_input+0x680>
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d8d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d8dc:	f113 0f0d 	cmn.w	r3, #13
 800d8e0:	d016      	beq.n	800d910 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d8e2:	4b30      	ldr	r3, [pc, #192]	; (800d9a4 <tcp_input+0x74c>)
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d8e8:	69f8      	ldr	r0, [r7, #28]
 800d8ea:	f000 f879 	bl	800d9e0 <tcp_input_delayed_close>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d10f      	bne.n	800d914 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d8f4:	69f8      	ldr	r0, [r7, #28]
 800d8f6:	f002 fd93 	bl	8010420 <tcp_output>
 800d8fa:	e00c      	b.n	800d916 <tcp_input+0x6be>
        goto aborted;
 800d8fc:	bf00      	nop
 800d8fe:	e00a      	b.n	800d916 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d900:	bf00      	nop
 800d902:	e008      	b.n	800d916 <tcp_input+0x6be>
              goto aborted;
 800d904:	bf00      	nop
 800d906:	e006      	b.n	800d916 <tcp_input+0x6be>
          goto aborted;
 800d908:	bf00      	nop
 800d90a:	e004      	b.n	800d916 <tcp_input+0x6be>
            goto aborted;
 800d90c:	bf00      	nop
 800d90e:	e002      	b.n	800d916 <tcp_input+0x6be>
              goto aborted;
 800d910:	bf00      	nop
 800d912:	e000      	b.n	800d916 <tcp_input+0x6be>
          goto aborted;
 800d914:	bf00      	nop
    tcp_input_pcb = NULL;
 800d916:	4b23      	ldr	r3, [pc, #140]	; (800d9a4 <tcp_input+0x74c>)
 800d918:	2200      	movs	r2, #0
 800d91a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d91c:	4b25      	ldr	r3, [pc, #148]	; (800d9b4 <tcp_input+0x75c>)
 800d91e:	2200      	movs	r2, #0
 800d920:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800d922:	4b28      	ldr	r3, [pc, #160]	; (800d9c4 <tcp_input+0x76c>)
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d037      	beq.n	800d99a <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800d92a:	4b26      	ldr	r3, [pc, #152]	; (800d9c4 <tcp_input+0x76c>)
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	4618      	mov	r0, r3
 800d930:	f7fd fe18 	bl	800b564 <pbuf_free>
      inseg.p = NULL;
 800d934:	4b23      	ldr	r3, [pc, #140]	; (800d9c4 <tcp_input+0x76c>)
 800d936:	2200      	movs	r2, #0
 800d938:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d93a:	e02e      	b.n	800d99a <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d93c:	4b22      	ldr	r3, [pc, #136]	; (800d9c8 <tcp_input+0x770>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	899b      	ldrh	r3, [r3, #12]
 800d942:	b29b      	uxth	r3, r3
 800d944:	4618      	mov	r0, r3
 800d946:	f7fc fc1d 	bl	800a184 <lwip_htons>
 800d94a:	4603      	mov	r3, r0
 800d94c:	f003 0304 	and.w	r3, r3, #4
 800d950:	2b00      	cmp	r3, #0
 800d952:	d115      	bne.n	800d980 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d954:	4b1d      	ldr	r3, [pc, #116]	; (800d9cc <tcp_input+0x774>)
 800d956:	6818      	ldr	r0, [r3, #0]
 800d958:	4b1d      	ldr	r3, [pc, #116]	; (800d9d0 <tcp_input+0x778>)
 800d95a:	881b      	ldrh	r3, [r3, #0]
 800d95c:	461a      	mov	r2, r3
 800d95e:	4b1d      	ldr	r3, [pc, #116]	; (800d9d4 <tcp_input+0x77c>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d964:	4b18      	ldr	r3, [pc, #96]	; (800d9c8 <tcp_input+0x770>)
 800d966:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d968:	885b      	ldrh	r3, [r3, #2]
 800d96a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d96c:	4a16      	ldr	r2, [pc, #88]	; (800d9c8 <tcp_input+0x770>)
 800d96e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800d970:	8812      	ldrh	r2, [r2, #0]
 800d972:	b292      	uxth	r2, r2
 800d974:	9201      	str	r2, [sp, #4]
 800d976:	9300      	str	r3, [sp, #0]
 800d978:	4b17      	ldr	r3, [pc, #92]	; (800d9d8 <tcp_input+0x780>)
 800d97a:	4a18      	ldr	r2, [pc, #96]	; (800d9dc <tcp_input+0x784>)
 800d97c:	f002 ffda 	bl	8010934 <tcp_rst>
    pbuf_free(p);
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f7fd fdef 	bl	800b564 <pbuf_free>
  return;
 800d986:	e008      	b.n	800d99a <tcp_input+0x742>
    goto dropped;
 800d988:	bf00      	nop
 800d98a:	e002      	b.n	800d992 <tcp_input+0x73a>
dropped:
 800d98c:	bf00      	nop
 800d98e:	e000      	b.n	800d992 <tcp_input+0x73a>
      goto dropped;
 800d990:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	f7fd fde6 	bl	800b564 <pbuf_free>
 800d998:	e000      	b.n	800d99c <tcp_input+0x744>
  return;
 800d99a:	bf00      	nop
}
 800d99c:	3724      	adds	r7, #36	; 0x24
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd90      	pop	{r4, r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	2000ad20 	.word	0x2000ad20
 800d9a8:	20002989 	.word	0x20002989
 800d9ac:	2000ad0c 	.word	0x2000ad0c
 800d9b0:	20002984 	.word	0x20002984
 800d9b4:	2000298c 	.word	0x2000298c
 800d9b8:	080162e4 	.word	0x080162e4
 800d9bc:	08016480 	.word	0x08016480
 800d9c0:	08016328 	.word	0x08016328
 800d9c4:	2000295c 	.word	0x2000295c
 800d9c8:	2000296c 	.word	0x2000296c
 800d9cc:	20002980 	.word	0x20002980
 800d9d0:	20002986 	.word	0x20002986
 800d9d4:	2000297c 	.word	0x2000297c
 800d9d8:	2000747c 	.word	0x2000747c
 800d9dc:	20007480 	.word	0x20007480

0800d9e0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800d9e8:	4b14      	ldr	r3, [pc, #80]	; (800da3c <tcp_input_delayed_close+0x5c>)
 800d9ea:	781b      	ldrb	r3, [r3, #0]
 800d9ec:	f003 0310 	and.w	r3, r3, #16
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d01d      	beq.n	800da30 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	7e9b      	ldrb	r3, [r3, #26]
 800d9f8:	f003 0310 	and.w	r3, r3, #16
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d10d      	bne.n	800da1c <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da06:	2b00      	cmp	r3, #0
 800da08:	d008      	beq.n	800da1c <tcp_input_delayed_close+0x3c>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800da10:	687a      	ldr	r2, [r7, #4]
 800da12:	6912      	ldr	r2, [r2, #16]
 800da14:	f06f 010e 	mvn.w	r1, #14
 800da18:	4610      	mov	r0, r2
 800da1a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800da1c:	6879      	ldr	r1, [r7, #4]
 800da1e:	4808      	ldr	r0, [pc, #32]	; (800da40 <tcp_input_delayed_close+0x60>)
 800da20:	f7ff fb02 	bl	800d028 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800da24:	6879      	ldr	r1, [r7, #4]
 800da26:	2001      	movs	r0, #1
 800da28:	f7fc ffe8 	bl	800a9fc <memp_free>
    return 1;
 800da2c:	2301      	movs	r3, #1
 800da2e:	e000      	b.n	800da32 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3708      	adds	r7, #8
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	20002989 	.word	0x20002989
 800da40:	2000ad0c 	.word	0x2000ad0c

0800da44 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b088      	sub	sp, #32
 800da48:	af02      	add	r7, sp, #8
 800da4a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800da4c:	4b64      	ldr	r3, [pc, #400]	; (800dbe0 <tcp_listen_input+0x19c>)
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	f003 0304 	and.w	r3, r3, #4
 800da54:	2b00      	cmp	r3, #0
 800da56:	f040 80bc 	bne.w	800dbd2 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800da5a:	4b61      	ldr	r3, [pc, #388]	; (800dbe0 <tcp_listen_input+0x19c>)
 800da5c:	781b      	ldrb	r3, [r3, #0]
 800da5e:	f003 0310 	and.w	r3, r3, #16
 800da62:	2b00      	cmp	r3, #0
 800da64:	d016      	beq.n	800da94 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800da66:	4b5f      	ldr	r3, [pc, #380]	; (800dbe4 <tcp_listen_input+0x1a0>)
 800da68:	6818      	ldr	r0, [r3, #0]
 800da6a:	4b5f      	ldr	r3, [pc, #380]	; (800dbe8 <tcp_listen_input+0x1a4>)
 800da6c:	881b      	ldrh	r3, [r3, #0]
 800da6e:	461a      	mov	r2, r3
 800da70:	4b5e      	ldr	r3, [pc, #376]	; (800dbec <tcp_listen_input+0x1a8>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da76:	4b5e      	ldr	r3, [pc, #376]	; (800dbf0 <tcp_listen_input+0x1ac>)
 800da78:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800da7a:	885b      	ldrh	r3, [r3, #2]
 800da7c:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da7e:	4a5c      	ldr	r2, [pc, #368]	; (800dbf0 <tcp_listen_input+0x1ac>)
 800da80:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800da82:	8812      	ldrh	r2, [r2, #0]
 800da84:	b292      	uxth	r2, r2
 800da86:	9201      	str	r2, [sp, #4]
 800da88:	9300      	str	r3, [sp, #0]
 800da8a:	4b5a      	ldr	r3, [pc, #360]	; (800dbf4 <tcp_listen_input+0x1b0>)
 800da8c:	4a5a      	ldr	r2, [pc, #360]	; (800dbf8 <tcp_listen_input+0x1b4>)
 800da8e:	f002 ff51 	bl	8010934 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800da92:	e0a0      	b.n	800dbd6 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800da94:	4b52      	ldr	r3, [pc, #328]	; (800dbe0 <tcp_listen_input+0x19c>)
 800da96:	781b      	ldrb	r3, [r3, #0]
 800da98:	f003 0302 	and.w	r3, r3, #2
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	f000 809a 	beq.w	800dbd6 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	7d5b      	ldrb	r3, [r3, #21]
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7ff f93e 	bl	800cd28 <tcp_alloc>
 800daac:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d111      	bne.n	800dad8 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	699b      	ldr	r3, [r3, #24]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d00a      	beq.n	800dad2 <tcp_listen_input+0x8e>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	699b      	ldr	r3, [r3, #24]
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	6910      	ldr	r0, [r2, #16]
 800dac4:	f04f 32ff 	mov.w	r2, #4294967295
 800dac8:	2100      	movs	r1, #0
 800daca:	4798      	blx	r3
 800dacc:	4603      	mov	r3, r0
 800dace:	73bb      	strb	r3, [r7, #14]
      return;
 800dad0:	e082      	b.n	800dbd8 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dad2:	23f0      	movs	r3, #240	; 0xf0
 800dad4:	73bb      	strb	r3, [r7, #14]
      return;
 800dad6:	e07f      	b.n	800dbd8 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800dad8:	4b48      	ldr	r3, [pc, #288]	; (800dbfc <tcp_listen_input+0x1b8>)
 800dada:	695a      	ldr	r2, [r3, #20]
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800dae0:	4b46      	ldr	r3, [pc, #280]	; (800dbfc <tcp_listen_input+0x1b8>)
 800dae2:	691a      	ldr	r2, [r3, #16]
 800dae4:	697b      	ldr	r3, [r7, #20]
 800dae6:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	8ada      	ldrh	r2, [r3, #22]
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800daf0:	4b3f      	ldr	r3, [pc, #252]	; (800dbf0 <tcp_listen_input+0x1ac>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	881b      	ldrh	r3, [r3, #0]
 800daf6:	b29a      	uxth	r2, r3
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	2203      	movs	r2, #3
 800db00:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800db02:	4b3a      	ldr	r3, [pc, #232]	; (800dbec <tcp_listen_input+0x1a8>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	1c5a      	adds	r2, r3, #1
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800db14:	6978      	ldr	r0, [r7, #20]
 800db16:	f7ff fb03 	bl	800d120 <tcp_next_iss>
 800db1a:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	693a      	ldr	r2, [r7, #16]
 800db20:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	693a      	ldr	r2, [r7, #16]
 800db26:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	693a      	ldr	r2, [r7, #16]
 800db2c:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	693a      	ldr	r2, [r7, #16]
 800db32:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800db34:	4b2d      	ldr	r3, [pc, #180]	; (800dbec <tcp_listen_input+0x1a8>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	1e5a      	subs	r2, r3, #1
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	691a      	ldr	r2, [r3, #16]
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	687a      	ldr	r2, [r7, #4]
 800db4a:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	7a1b      	ldrb	r3, [r3, #8]
 800db50:	f003 030c 	and.w	r3, r3, #12
 800db54:	b2da      	uxtb	r2, r3
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800db5a:	4b29      	ldr	r3, [pc, #164]	; (800dc00 <tcp_listen_input+0x1bc>)
 800db5c:	681a      	ldr	r2, [r3, #0]
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	60da      	str	r2, [r3, #12]
 800db62:	4a27      	ldr	r2, [pc, #156]	; (800dc00 <tcp_listen_input+0x1bc>)
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	6013      	str	r3, [r2, #0]
 800db68:	f003 f934 	bl	8010dd4 <tcp_timer_needed>
 800db6c:	4b25      	ldr	r3, [pc, #148]	; (800dc04 <tcp_listen_input+0x1c0>)
 800db6e:	2201      	movs	r2, #1
 800db70:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800db72:	6978      	ldr	r0, [r7, #20]
 800db74:	f001 fd12 	bl	800f59c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800db78:	4b1d      	ldr	r3, [pc, #116]	; (800dbf0 <tcp_listen_input+0x1ac>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	89db      	ldrh	r3, [r3, #14]
 800db7e:	b29a      	uxth	r2, r3
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	3304      	adds	r3, #4
 800db9a:	4619      	mov	r1, r3
 800db9c:	4610      	mov	r0, r2
 800db9e:	f7ff fad5 	bl	800d14c <tcp_eff_send_mss_impl>
 800dba2:	4603      	mov	r3, r0
 800dba4:	461a      	mov	r2, r3
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800dbaa:	2112      	movs	r1, #18
 800dbac:	6978      	ldr	r0, [r7, #20]
 800dbae:	f002 fadf 	bl	8010170 <tcp_enqueue_flags>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800dbb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d004      	beq.n	800dbc8 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800dbbe:	2100      	movs	r1, #0
 800dbc0:	6978      	ldr	r0, [r7, #20]
 800dbc2:	f7fe f95f 	bl	800be84 <tcp_abandon>
      return;
 800dbc6:	e007      	b.n	800dbd8 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800dbc8:	6978      	ldr	r0, [r7, #20]
 800dbca:	f002 fc29 	bl	8010420 <tcp_output>
  return;
 800dbce:	bf00      	nop
 800dbd0:	e001      	b.n	800dbd6 <tcp_listen_input+0x192>
    return;
 800dbd2:	bf00      	nop
 800dbd4:	e000      	b.n	800dbd8 <tcp_listen_input+0x194>
  return;
 800dbd6:	bf00      	nop
}
 800dbd8:	3718      	adds	r7, #24
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	20002988 	.word	0x20002988
 800dbe4:	20002980 	.word	0x20002980
 800dbe8:	20002986 	.word	0x20002986
 800dbec:	2000297c 	.word	0x2000297c
 800dbf0:	2000296c 	.word	0x2000296c
 800dbf4:	2000747c 	.word	0x2000747c
 800dbf8:	20007480 	.word	0x20007480
 800dbfc:	2000746c 	.word	0x2000746c
 800dc00:	2000ad0c 	.word	0x2000ad0c
 800dc04:	2000ad08 	.word	0x2000ad08

0800dc08 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b084      	sub	sp, #16
 800dc0c:	af02      	add	r7, sp, #8
 800dc0e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800dc10:	4b29      	ldr	r3, [pc, #164]	; (800dcb8 <tcp_timewait_input+0xb0>)
 800dc12:	781b      	ldrb	r3, [r3, #0]
 800dc14:	f003 0304 	and.w	r3, r3, #4
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d147      	bne.n	800dcac <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800dc1c:	4b26      	ldr	r3, [pc, #152]	; (800dcb8 <tcp_timewait_input+0xb0>)
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	f003 0302 	and.w	r3, r3, #2
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d027      	beq.n	800dc78 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800dc28:	4b24      	ldr	r3, [pc, #144]	; (800dcbc <tcp_timewait_input+0xb4>)
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc30:	1ad3      	subs	r3, r2, r3
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	db2a      	blt.n	800dc8c <tcp_timewait_input+0x84>
 800dc36:	4b21      	ldr	r3, [pc, #132]	; (800dcbc <tcp_timewait_input+0xb4>)
 800dc38:	681a      	ldr	r2, [r3, #0]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc3e:	6879      	ldr	r1, [r7, #4]
 800dc40:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dc42:	440b      	add	r3, r1
 800dc44:	1ad3      	subs	r3, r2, r3
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	dc20      	bgt.n	800dc8c <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc4a:	4b1d      	ldr	r3, [pc, #116]	; (800dcc0 <tcp_timewait_input+0xb8>)
 800dc4c:	6818      	ldr	r0, [r3, #0]
 800dc4e:	4b1d      	ldr	r3, [pc, #116]	; (800dcc4 <tcp_timewait_input+0xbc>)
 800dc50:	881b      	ldrh	r3, [r3, #0]
 800dc52:	461a      	mov	r2, r3
 800dc54:	4b19      	ldr	r3, [pc, #100]	; (800dcbc <tcp_timewait_input+0xb4>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dc5a:	4b1b      	ldr	r3, [pc, #108]	; (800dcc8 <tcp_timewait_input+0xc0>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc5e:	885b      	ldrh	r3, [r3, #2]
 800dc60:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dc62:	4a19      	ldr	r2, [pc, #100]	; (800dcc8 <tcp_timewait_input+0xc0>)
 800dc64:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc66:	8812      	ldrh	r2, [r2, #0]
 800dc68:	b292      	uxth	r2, r2
 800dc6a:	9201      	str	r2, [sp, #4]
 800dc6c:	9300      	str	r3, [sp, #0]
 800dc6e:	4b17      	ldr	r3, [pc, #92]	; (800dccc <tcp_timewait_input+0xc4>)
 800dc70:	4a17      	ldr	r2, [pc, #92]	; (800dcd0 <tcp_timewait_input+0xc8>)
 800dc72:	f002 fe5f 	bl	8010934 <tcp_rst>
      return;
 800dc76:	e01c      	b.n	800dcb2 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800dc78:	4b0f      	ldr	r3, [pc, #60]	; (800dcb8 <tcp_timewait_input+0xb0>)
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	f003 0301 	and.w	r3, r3, #1
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d003      	beq.n	800dc8c <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800dc84:	4b13      	ldr	r3, [pc, #76]	; (800dcd4 <tcp_timewait_input+0xcc>)
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800dc8c:	4b0d      	ldr	r3, [pc, #52]	; (800dcc4 <tcp_timewait_input+0xbc>)
 800dc8e:	881b      	ldrh	r3, [r3, #0]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d00d      	beq.n	800dcb0 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	7e9b      	ldrb	r3, [r3, #26]
 800dc98:	f043 0302 	orr.w	r3, r3, #2
 800dc9c:	b2da      	uxtb	r2, r3
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f002 fbbc 	bl	8010420 <tcp_output>
  }
  return;
 800dca8:	bf00      	nop
 800dcaa:	e001      	b.n	800dcb0 <tcp_timewait_input+0xa8>
    return;
 800dcac:	bf00      	nop
 800dcae:	e000      	b.n	800dcb2 <tcp_timewait_input+0xaa>
  return;
 800dcb0:	bf00      	nop
}
 800dcb2:	3708      	adds	r7, #8
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}
 800dcb8:	20002988 	.word	0x20002988
 800dcbc:	2000297c 	.word	0x2000297c
 800dcc0:	20002980 	.word	0x20002980
 800dcc4:	20002986 	.word	0x20002986
 800dcc8:	2000296c 	.word	0x2000296c
 800dccc:	2000747c 	.word	0x2000747c
 800dcd0:	20007480 	.word	0x20007480
 800dcd4:	2000ad10 	.word	0x2000ad10

0800dcd8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b08a      	sub	sp, #40	; 0x28
 800dcdc:	af02      	add	r7, sp, #8
 800dcde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800dce0:	2300      	movs	r3, #0
 800dce2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800dce4:	2300      	movs	r3, #0
 800dce6:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800dce8:	4ba4      	ldr	r3, [pc, #656]	; (800df7c <tcp_process+0x2a4>)
 800dcea:	781b      	ldrb	r3, [r3, #0]
 800dcec:	f003 0304 	and.w	r3, r3, #4
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d04e      	beq.n	800dd92 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	7d1b      	ldrb	r3, [r3, #20]
 800dcf8:	2b02      	cmp	r3, #2
 800dcfa:	d108      	bne.n	800dd0e <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd00:	4b9f      	ldr	r3, [pc, #636]	; (800df80 <tcp_process+0x2a8>)
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d123      	bne.n	800dd50 <tcp_process+0x78>
        acceptable = 1;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	76fb      	strb	r3, [r7, #27]
 800dd0c:	e020      	b.n	800dd50 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd12:	4b9c      	ldr	r3, [pc, #624]	; (800df84 <tcp_process+0x2ac>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d102      	bne.n	800dd20 <tcp_process+0x48>
        acceptable = 1;
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	76fb      	strb	r3, [r7, #27]
 800dd1e:	e017      	b.n	800dd50 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dd20:	4b98      	ldr	r3, [pc, #608]	; (800df84 <tcp_process+0x2ac>)
 800dd22:	681a      	ldr	r2, [r3, #0]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd28:	1ad3      	subs	r3, r2, r3
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	db10      	blt.n	800dd50 <tcp_process+0x78>
 800dd2e:	4b95      	ldr	r3, [pc, #596]	; (800df84 <tcp_process+0x2ac>)
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd36:	6879      	ldr	r1, [r7, #4]
 800dd38:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dd3a:	440b      	add	r3, r1
 800dd3c:	1ad3      	subs	r3, r2, r3
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	dc06      	bgt.n	800dd50 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	7e9b      	ldrb	r3, [r3, #26]
 800dd46:	f043 0302 	orr.w	r3, r3, #2
 800dd4a:	b2da      	uxtb	r2, r3
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800dd50:	7efb      	ldrb	r3, [r7, #27]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d01b      	beq.n	800dd8e <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	7d1b      	ldrb	r3, [r3, #20]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d106      	bne.n	800dd6c <tcp_process+0x94>
 800dd5e:	4b8a      	ldr	r3, [pc, #552]	; (800df88 <tcp_process+0x2b0>)
 800dd60:	f240 22e7 	movw	r2, #743	; 0x2e7
 800dd64:	4989      	ldr	r1, [pc, #548]	; (800df8c <tcp_process+0x2b4>)
 800dd66:	488a      	ldr	r0, [pc, #552]	; (800df90 <tcp_process+0x2b8>)
 800dd68:	f006 f8a2 	bl	8013eb0 <iprintf>
      recv_flags |= TF_RESET;
 800dd6c:	4b89      	ldr	r3, [pc, #548]	; (800df94 <tcp_process+0x2bc>)
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	f043 0308 	orr.w	r3, r3, #8
 800dd74:	b2da      	uxtb	r2, r3
 800dd76:	4b87      	ldr	r3, [pc, #540]	; (800df94 <tcp_process+0x2bc>)
 800dd78:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	7e9b      	ldrb	r3, [r3, #26]
 800dd7e:	f023 0301 	bic.w	r3, r3, #1
 800dd82:	b2da      	uxtb	r2, r3
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800dd88:	f06f 030d 	mvn.w	r3, #13
 800dd8c:	e34d      	b.n	800e42a <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	e34b      	b.n	800e42a <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800dd92:	4b7a      	ldr	r3, [pc, #488]	; (800df7c <tcp_process+0x2a4>)
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	f003 0302 	and.w	r3, r3, #2
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d010      	beq.n	800ddc0 <tcp_process+0xe8>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	7d1b      	ldrb	r3, [r3, #20]
 800dda2:	2b02      	cmp	r3, #2
 800dda4:	d00c      	beq.n	800ddc0 <tcp_process+0xe8>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	7d1b      	ldrb	r3, [r3, #20]
 800ddaa:	2b03      	cmp	r3, #3
 800ddac:	d008      	beq.n	800ddc0 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	7e9b      	ldrb	r3, [r3, #26]
 800ddb2:	f043 0302 	orr.w	r3, r3, #2
 800ddb6:	b2da      	uxtb	r2, r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	e334      	b.n	800e42a <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	7e9b      	ldrb	r3, [r3, #26]
 800ddc4:	f003 0310 	and.w	r3, r3, #16
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d103      	bne.n	800ddd4 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ddcc:	4b72      	ldr	r3, [pc, #456]	; (800df98 <tcp_process+0x2c0>)
 800ddce:	681a      	ldr	r2, [r3, #0]
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f001 fbdd 	bl	800f59c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	7d1b      	ldrb	r3, [r3, #20]
 800dde6:	3b02      	subs	r3, #2
 800dde8:	2b07      	cmp	r3, #7
 800ddea:	f200 830e 	bhi.w	800e40a <tcp_process+0x732>
 800ddee:	a201      	add	r2, pc, #4	; (adr r2, 800ddf4 <tcp_process+0x11c>)
 800ddf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddf4:	0800de15 	.word	0x0800de15
 800ddf8:	0800e00d 	.word	0x0800e00d
 800ddfc:	0800e165 	.word	0x0800e165
 800de00:	0800e18f 	.word	0x0800e18f
 800de04:	0800e2b9 	.word	0x0800e2b9
 800de08:	0800e165 	.word	0x0800e165
 800de0c:	0800e345 	.word	0x0800e345
 800de10:	0800e3d5 	.word	0x0800e3d5
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800de14:	4b59      	ldr	r3, [pc, #356]	; (800df7c <tcp_process+0x2a4>)
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	f003 0310 	and.w	r3, r3, #16
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	f000 80cb 	beq.w	800dfb8 <tcp_process+0x2e0>
 800de22:	4b56      	ldr	r3, [pc, #344]	; (800df7c <tcp_process+0x2a4>)
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	f003 0302 	and.w	r3, r3, #2
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	f000 80c4 	beq.w	800dfb8 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de34:	1c5a      	adds	r2, r3, #1
 800de36:	4b52      	ldr	r3, [pc, #328]	; (800df80 <tcp_process+0x2a8>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	429a      	cmp	r2, r3
 800de3c:	f040 80bc 	bne.w	800dfb8 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800de40:	4b50      	ldr	r3, [pc, #320]	; (800df84 <tcp_process+0x2ac>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	1c5a      	adds	r2, r3, #1
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800de52:	4b4b      	ldr	r3, [pc, #300]	; (800df80 <tcp_process+0x2a8>)
 800de54:	681a      	ldr	r2, [r3, #0]
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800de5a:	4b50      	ldr	r3, [pc, #320]	; (800df9c <tcp_process+0x2c4>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	89db      	ldrh	r3, [r3, #14]
 800de60:	b29a      	uxth	r2, r3
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800de74:	4b43      	ldr	r3, [pc, #268]	; (800df84 <tcp_process+0x2ac>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	1e5a      	subs	r2, r3, #1
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2204      	movs	r2, #4
 800de82:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	3304      	adds	r3, #4
 800de8c:	4619      	mov	r1, r3
 800de8e:	4610      	mov	r0, r2
 800de90:	f7ff f95c 	bl	800d14c <tcp_eff_send_mss_impl>
 800de94:	4603      	mov	r3, r0
 800de96:	461a      	mov	r2, r3
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dea0:	005b      	lsls	r3, r3, #1
 800dea2:	f241 121c 	movw	r2, #4380	; 0x111c
 800dea6:	429a      	cmp	r2, r3
 800dea8:	bf38      	it	cc
 800deaa:	461a      	movcc	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	4293      	cmp	r3, r2
 800deb4:	bf28      	it	cs
 800deb6:	4613      	movcs	r3, r2
 800deb8:	b29a      	uxth	r2, r3
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d106      	bne.n	800ded8 <tcp_process+0x200>
 800deca:	4b2f      	ldr	r3, [pc, #188]	; (800df88 <tcp_process+0x2b0>)
 800decc:	f240 321a 	movw	r2, #794	; 0x31a
 800ded0:	4933      	ldr	r1, [pc, #204]	; (800dfa0 <tcp_process+0x2c8>)
 800ded2:	482f      	ldr	r0, [pc, #188]	; (800df90 <tcp_process+0x2b8>)
 800ded4:	f005 ffec 	bl	8013eb0 <iprintf>
      --pcb->snd_queuelen;
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dede:	3b01      	subs	r3, #1
 800dee0:	b29a      	uxth	r2, r3
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800deec:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800deee:	69fb      	ldr	r3, [r7, #28]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d111      	bne.n	800df18 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800def8:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800defa:	69fb      	ldr	r3, [r7, #28]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d106      	bne.n	800df0e <tcp_process+0x236>
 800df00:	4b21      	ldr	r3, [pc, #132]	; (800df88 <tcp_process+0x2b0>)
 800df02:	f240 3222 	movw	r2, #802	; 0x322
 800df06:	4927      	ldr	r1, [pc, #156]	; (800dfa4 <tcp_process+0x2cc>)
 800df08:	4821      	ldr	r0, [pc, #132]	; (800df90 <tcp_process+0x2b8>)
 800df0a:	f005 ffd1 	bl	8013eb0 <iprintf>
        pcb->unsent = rseg->next;
 800df0e:	69fb      	ldr	r3, [r7, #28]
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	669a      	str	r2, [r3, #104]	; 0x68
 800df16:	e003      	b.n	800df20 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800df18:	69fb      	ldr	r3, [r7, #28]
 800df1a:	681a      	ldr	r2, [r3, #0]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800df20:	69f8      	ldr	r0, [r7, #28]
 800df22:	f7fe fdee 	bl	800cb02 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d104      	bne.n	800df38 <tcp_process+0x260>
        pcb->rtime = -1;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df34:	861a      	strh	r2, [r3, #48]	; 0x30
 800df36:	e006      	b.n	800df46 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	2200      	movs	r2, #0
 800df42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d00a      	beq.n	800df66 <tcp_process+0x28e>
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df56:	687a      	ldr	r2, [r7, #4]
 800df58:	6910      	ldr	r0, [r2, #16]
 800df5a:	2200      	movs	r2, #0
 800df5c:	6879      	ldr	r1, [r7, #4]
 800df5e:	4798      	blx	r3
 800df60:	4603      	mov	r3, r0
 800df62:	76bb      	strb	r3, [r7, #26]
 800df64:	e001      	b.n	800df6a <tcp_process+0x292>
 800df66:	2300      	movs	r3, #0
 800df68:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800df6a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800df6e:	f113 0f0d 	cmn.w	r3, #13
 800df72:	d119      	bne.n	800dfa8 <tcp_process+0x2d0>
        return ERR_ABRT;
 800df74:	f06f 030c 	mvn.w	r3, #12
 800df78:	e257      	b.n	800e42a <tcp_process+0x752>
 800df7a:	bf00      	nop
 800df7c:	20002988 	.word	0x20002988
 800df80:	20002980 	.word	0x20002980
 800df84:	2000297c 	.word	0x2000297c
 800df88:	080162e4 	.word	0x080162e4
 800df8c:	0801649c 	.word	0x0801649c
 800df90:	08016328 	.word	0x08016328
 800df94:	20002989 	.word	0x20002989
 800df98:	2000ad10 	.word	0x2000ad10
 800df9c:	2000296c 	.word	0x2000296c
 800dfa0:	080164bc 	.word	0x080164bc
 800dfa4:	080164d4 	.word	0x080164d4
      }
      tcp_ack_now(pcb);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	7e9b      	ldrb	r3, [r3, #26]
 800dfac:	f043 0302 	orr.w	r3, r3, #2
 800dfb0:	b2da      	uxtb	r2, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800dfb6:	e22a      	b.n	800e40e <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800dfb8:	4b9f      	ldr	r3, [pc, #636]	; (800e238 <tcp_process+0x560>)
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	f003 0310 	and.w	r3, r3, #16
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	f000 8224 	beq.w	800e40e <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfc6:	4b9d      	ldr	r3, [pc, #628]	; (800e23c <tcp_process+0x564>)
 800dfc8:	6818      	ldr	r0, [r3, #0]
 800dfca:	4b9d      	ldr	r3, [pc, #628]	; (800e240 <tcp_process+0x568>)
 800dfcc:	881b      	ldrh	r3, [r3, #0]
 800dfce:	461a      	mov	r2, r3
 800dfd0:	4b9c      	ldr	r3, [pc, #624]	; (800e244 <tcp_process+0x56c>)
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dfd6:	4b9c      	ldr	r3, [pc, #624]	; (800e248 <tcp_process+0x570>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfda:	885b      	ldrh	r3, [r3, #2]
 800dfdc:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dfde:	4a9a      	ldr	r2, [pc, #616]	; (800e248 <tcp_process+0x570>)
 800dfe0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfe2:	8812      	ldrh	r2, [r2, #0]
 800dfe4:	b292      	uxth	r2, r2
 800dfe6:	9201      	str	r2, [sp, #4]
 800dfe8:	9300      	str	r3, [sp, #0]
 800dfea:	4b98      	ldr	r3, [pc, #608]	; (800e24c <tcp_process+0x574>)
 800dfec:	4a98      	ldr	r2, [pc, #608]	; (800e250 <tcp_process+0x578>)
 800dfee:	f002 fca1 	bl	8010934 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dff8:	2b05      	cmp	r3, #5
 800dffa:	f200 8208 	bhi.w	800e40e <tcp_process+0x736>
        pcb->rtime = 0;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2200      	movs	r2, #0
 800e002:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f002 fd0b 	bl	8010a20 <tcp_rexmit_rto>
    break;
 800e00a:	e200      	b.n	800e40e <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800e00c:	4b8a      	ldr	r3, [pc, #552]	; (800e238 <tcp_process+0x560>)
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	f003 0310 	and.w	r3, r3, #16
 800e014:	2b00      	cmp	r3, #0
 800e016:	f000 8091 	beq.w	800e13c <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800e01a:	4b88      	ldr	r3, [pc, #544]	; (800e23c <tcp_process+0x564>)
 800e01c:	681a      	ldr	r2, [r3, #0]
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e022:	1ad3      	subs	r3, r2, r3
 800e024:	3b01      	subs	r3, #1
 800e026:	2b00      	cmp	r3, #0
 800e028:	db71      	blt.n	800e10e <tcp_process+0x436>
 800e02a:	4b84      	ldr	r3, [pc, #528]	; (800e23c <tcp_process+0x564>)
 800e02c:	681a      	ldr	r2, [r3, #0]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e032:	1ad3      	subs	r3, r2, r3
 800e034:	2b00      	cmp	r3, #0
 800e036:	dc6a      	bgt.n	800e10e <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2204      	movs	r2, #4
 800e03c:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e042:	2b00      	cmp	r3, #0
 800e044:	d00b      	beq.n	800e05e <tcp_process+0x386>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e04a:	699b      	ldr	r3, [r3, #24]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d106      	bne.n	800e05e <tcp_process+0x386>
 800e050:	4b80      	ldr	r3, [pc, #512]	; (800e254 <tcp_process+0x57c>)
 800e052:	f240 3251 	movw	r2, #849	; 0x351
 800e056:	4980      	ldr	r1, [pc, #512]	; (800e258 <tcp_process+0x580>)
 800e058:	4880      	ldr	r0, [pc, #512]	; (800e25c <tcp_process+0x584>)
 800e05a:	f005 ff29 	bl	8013eb0 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e062:	2b00      	cmp	r3, #0
 800e064:	d102      	bne.n	800e06c <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800e066:	23fa      	movs	r3, #250	; 0xfa
 800e068:	76bb      	strb	r3, [r7, #26]
 800e06a:	e011      	b.n	800e090 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e070:	699b      	ldr	r3, [r3, #24]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d00a      	beq.n	800e08c <tcp_process+0x3b4>
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e07a:	699b      	ldr	r3, [r3, #24]
 800e07c:	687a      	ldr	r2, [r7, #4]
 800e07e:	6910      	ldr	r0, [r2, #16]
 800e080:	2200      	movs	r2, #0
 800e082:	6879      	ldr	r1, [r7, #4]
 800e084:	4798      	blx	r3
 800e086:	4603      	mov	r3, r0
 800e088:	76bb      	strb	r3, [r7, #26]
 800e08a:	e001      	b.n	800e090 <tcp_process+0x3b8>
 800e08c:	23f0      	movs	r3, #240	; 0xf0
 800e08e:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800e090:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d00a      	beq.n	800e0ae <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800e098:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e09c:	f113 0f0d 	cmn.w	r3, #13
 800e0a0:	d002      	beq.n	800e0a8 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f7fd ffa0 	bl	800bfe8 <tcp_abort>
          }
          return ERR_ABRT;
 800e0a8:	f06f 030c 	mvn.w	r3, #12
 800e0ac:	e1bd      	b.n	800e42a <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 fa42 	bl	800e538 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800e0b4:	4b6a      	ldr	r3, [pc, #424]	; (800e260 <tcp_process+0x588>)
 800e0b6:	881b      	ldrh	r3, [r3, #0]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d005      	beq.n	800e0c8 <tcp_process+0x3f0>
          recv_acked--;
 800e0bc:	4b68      	ldr	r3, [pc, #416]	; (800e260 <tcp_process+0x588>)
 800e0be:	881b      	ldrh	r3, [r3, #0]
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	b29a      	uxth	r2, r3
 800e0c4:	4b66      	ldr	r3, [pc, #408]	; (800e260 <tcp_process+0x588>)
 800e0c6:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e0cc:	005b      	lsls	r3, r3, #1
 800e0ce:	f241 121c 	movw	r2, #4380	; 0x111c
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	bf38      	it	cc
 800e0d6:	461a      	movcc	r2, r3
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e0dc:	009b      	lsls	r3, r3, #2
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	bf28      	it	cs
 800e0e2:	4613      	movcs	r3, r2
 800e0e4:	b29a      	uxth	r2, r3
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800e0ec:	4b5d      	ldr	r3, [pc, #372]	; (800e264 <tcp_process+0x58c>)
 800e0ee:	781b      	ldrb	r3, [r3, #0]
 800e0f0:	f003 0320 	and.w	r3, r3, #32
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d034      	beq.n	800e162 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	7e9b      	ldrb	r3, [r3, #26]
 800e0fc:	f043 0302 	orr.w	r3, r3, #2
 800e100:	b2da      	uxtb	r2, r3
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2207      	movs	r2, #7
 800e10a:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800e10c:	e029      	b.n	800e162 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e10e:	4b4b      	ldr	r3, [pc, #300]	; (800e23c <tcp_process+0x564>)
 800e110:	6818      	ldr	r0, [r3, #0]
 800e112:	4b4b      	ldr	r3, [pc, #300]	; (800e240 <tcp_process+0x568>)
 800e114:	881b      	ldrh	r3, [r3, #0]
 800e116:	461a      	mov	r2, r3
 800e118:	4b4a      	ldr	r3, [pc, #296]	; (800e244 <tcp_process+0x56c>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e11e:	4b4a      	ldr	r3, [pc, #296]	; (800e248 <tcp_process+0x570>)
 800e120:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e122:	885b      	ldrh	r3, [r3, #2]
 800e124:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e126:	4a48      	ldr	r2, [pc, #288]	; (800e248 <tcp_process+0x570>)
 800e128:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800e12a:	8812      	ldrh	r2, [r2, #0]
 800e12c:	b292      	uxth	r2, r2
 800e12e:	9201      	str	r2, [sp, #4]
 800e130:	9300      	str	r3, [sp, #0]
 800e132:	4b46      	ldr	r3, [pc, #280]	; (800e24c <tcp_process+0x574>)
 800e134:	4a46      	ldr	r2, [pc, #280]	; (800e250 <tcp_process+0x578>)
 800e136:	f002 fbfd 	bl	8010934 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800e13a:	e16a      	b.n	800e412 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e13c:	4b3e      	ldr	r3, [pc, #248]	; (800e238 <tcp_process+0x560>)
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	f003 0302 	and.w	r3, r3, #2
 800e144:	2b00      	cmp	r3, #0
 800e146:	f000 8164 	beq.w	800e412 <tcp_process+0x73a>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e14e:	1e5a      	subs	r2, r3, #1
 800e150:	4b3c      	ldr	r3, [pc, #240]	; (800e244 <tcp_process+0x56c>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	429a      	cmp	r2, r3
 800e156:	f040 815c 	bne.w	800e412 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f002 fc96 	bl	8010a8c <tcp_rexmit>
    break;
 800e160:	e157      	b.n	800e412 <tcp_process+0x73a>
 800e162:	e156      	b.n	800e412 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f000 f9e7 	bl	800e538 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e16a:	4b3e      	ldr	r3, [pc, #248]	; (800e264 <tcp_process+0x58c>)
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	f003 0320 	and.w	r3, r3, #32
 800e172:	2b00      	cmp	r3, #0
 800e174:	f000 814f 	beq.w	800e416 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	7e9b      	ldrb	r3, [r3, #26]
 800e17c:	f043 0302 	orr.w	r3, r3, #2
 800e180:	b2da      	uxtb	r2, r3
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2207      	movs	r2, #7
 800e18a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800e18c:	e143      	b.n	800e416 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f000 f9d2 	bl	800e538 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800e194:	4b33      	ldr	r3, [pc, #204]	; (800e264 <tcp_process+0x58c>)
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	f003 0320 	and.w	r3, r3, #32
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d074      	beq.n	800e28a <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e1a0:	4b25      	ldr	r3, [pc, #148]	; (800e238 <tcp_process+0x560>)
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	f003 0310 	and.w	r3, r3, #16
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d063      	beq.n	800e274 <tcp_process+0x59c>
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e1b0:	4b22      	ldr	r3, [pc, #136]	; (800e23c <tcp_process+0x564>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d15d      	bne.n	800e274 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d159      	bne.n	800e274 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	7e9b      	ldrb	r3, [r3, #26]
 800e1c4:	f043 0302 	orr.w	r3, r3, #2
 800e1c8:	b2da      	uxtb	r2, r3
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f7fe fee8 	bl	800cfa4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e1d4:	4b24      	ldr	r3, [pc, #144]	; (800e268 <tcp_process+0x590>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	687a      	ldr	r2, [r7, #4]
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d105      	bne.n	800e1ea <tcp_process+0x512>
 800e1de:	4b22      	ldr	r3, [pc, #136]	; (800e268 <tcp_process+0x590>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	68db      	ldr	r3, [r3, #12]
 800e1e4:	4a20      	ldr	r2, [pc, #128]	; (800e268 <tcp_process+0x590>)
 800e1e6:	6013      	str	r3, [r2, #0]
 800e1e8:	e013      	b.n	800e212 <tcp_process+0x53a>
 800e1ea:	4b1f      	ldr	r3, [pc, #124]	; (800e268 <tcp_process+0x590>)
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	617b      	str	r3, [r7, #20]
 800e1f0:	e00c      	b.n	800e20c <tcp_process+0x534>
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	68db      	ldr	r3, [r3, #12]
 800e1f6:	687a      	ldr	r2, [r7, #4]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d104      	bne.n	800e206 <tcp_process+0x52e>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	68da      	ldr	r2, [r3, #12]
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	60da      	str	r2, [r3, #12]
 800e204:	e005      	b.n	800e212 <tcp_process+0x53a>
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	68db      	ldr	r3, [r3, #12]
 800e20a:	617b      	str	r3, [r7, #20]
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d1ef      	bne.n	800e1f2 <tcp_process+0x51a>
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2200      	movs	r2, #0
 800e216:	60da      	str	r2, [r3, #12]
 800e218:	4b14      	ldr	r3, [pc, #80]	; (800e26c <tcp_process+0x594>)
 800e21a:	2201      	movs	r2, #1
 800e21c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	220a      	movs	r2, #10
 800e222:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e224:	4b12      	ldr	r3, [pc, #72]	; (800e270 <tcp_process+0x598>)
 800e226:	681a      	ldr	r2, [r3, #0]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	60da      	str	r2, [r3, #12]
 800e22c:	4a10      	ldr	r2, [pc, #64]	; (800e270 <tcp_process+0x598>)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6013      	str	r3, [r2, #0]
 800e232:	f002 fdcf 	bl	8010dd4 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800e236:	e0f0      	b.n	800e41a <tcp_process+0x742>
 800e238:	20002988 	.word	0x20002988
 800e23c:	20002980 	.word	0x20002980
 800e240:	20002986 	.word	0x20002986
 800e244:	2000297c 	.word	0x2000297c
 800e248:	2000296c 	.word	0x2000296c
 800e24c:	2000747c 	.word	0x2000747c
 800e250:	20007480 	.word	0x20007480
 800e254:	080162e4 	.word	0x080162e4
 800e258:	080164e8 	.word	0x080164e8
 800e25c:	08016328 	.word	0x08016328
 800e260:	20002984 	.word	0x20002984
 800e264:	20002989 	.word	0x20002989
 800e268:	2000ad0c 	.word	0x2000ad0c
 800e26c:	2000ad08 	.word	0x2000ad08
 800e270:	2000ad1c 	.word	0x2000ad1c
        tcp_ack_now(pcb);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	7e9b      	ldrb	r3, [r3, #26]
 800e278:	f043 0302 	orr.w	r3, r3, #2
 800e27c:	b2da      	uxtb	r2, r3
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2208      	movs	r2, #8
 800e286:	751a      	strb	r2, [r3, #20]
    break;
 800e288:	e0c7      	b.n	800e41a <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e28a:	4b6a      	ldr	r3, [pc, #424]	; (800e434 <tcp_process+0x75c>)
 800e28c:	781b      	ldrb	r3, [r3, #0]
 800e28e:	f003 0310 	and.w	r3, r3, #16
 800e292:	2b00      	cmp	r3, #0
 800e294:	f000 80c1 	beq.w	800e41a <tcp_process+0x742>
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e29c:	4b66      	ldr	r3, [pc, #408]	; (800e438 <tcp_process+0x760>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	f040 80ba 	bne.w	800e41a <tcp_process+0x742>
               pcb->unsent == NULL) {
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	f040 80b5 	bne.w	800e41a <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2206      	movs	r2, #6
 800e2b4:	751a      	strb	r2, [r3, #20]
    break;
 800e2b6:	e0b0      	b.n	800e41a <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f000 f93d 	bl	800e538 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800e2be:	4b5f      	ldr	r3, [pc, #380]	; (800e43c <tcp_process+0x764>)
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	f003 0320 	and.w	r3, r3, #32
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	f000 80a9 	beq.w	800e41e <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	7e9b      	ldrb	r3, [r3, #26]
 800e2d0:	f043 0302 	orr.w	r3, r3, #2
 800e2d4:	b2da      	uxtb	r2, r3
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f7fe fe62 	bl	800cfa4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e2e0:	4b57      	ldr	r3, [pc, #348]	; (800e440 <tcp_process+0x768>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	429a      	cmp	r2, r3
 800e2e8:	d105      	bne.n	800e2f6 <tcp_process+0x61e>
 800e2ea:	4b55      	ldr	r3, [pc, #340]	; (800e440 <tcp_process+0x768>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	68db      	ldr	r3, [r3, #12]
 800e2f0:	4a53      	ldr	r2, [pc, #332]	; (800e440 <tcp_process+0x768>)
 800e2f2:	6013      	str	r3, [r2, #0]
 800e2f4:	e013      	b.n	800e31e <tcp_process+0x646>
 800e2f6:	4b52      	ldr	r3, [pc, #328]	; (800e440 <tcp_process+0x768>)
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	613b      	str	r3, [r7, #16]
 800e2fc:	e00c      	b.n	800e318 <tcp_process+0x640>
 800e2fe:	693b      	ldr	r3, [r7, #16]
 800e300:	68db      	ldr	r3, [r3, #12]
 800e302:	687a      	ldr	r2, [r7, #4]
 800e304:	429a      	cmp	r2, r3
 800e306:	d104      	bne.n	800e312 <tcp_process+0x63a>
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	68da      	ldr	r2, [r3, #12]
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	60da      	str	r2, [r3, #12]
 800e310:	e005      	b.n	800e31e <tcp_process+0x646>
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	68db      	ldr	r3, [r3, #12]
 800e316:	613b      	str	r3, [r7, #16]
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d1ef      	bne.n	800e2fe <tcp_process+0x626>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2200      	movs	r2, #0
 800e322:	60da      	str	r2, [r3, #12]
 800e324:	4b47      	ldr	r3, [pc, #284]	; (800e444 <tcp_process+0x76c>)
 800e326:	2201      	movs	r2, #1
 800e328:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	220a      	movs	r2, #10
 800e32e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800e330:	4b45      	ldr	r3, [pc, #276]	; (800e448 <tcp_process+0x770>)
 800e332:	681a      	ldr	r2, [r3, #0]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	60da      	str	r2, [r3, #12]
 800e338:	4a43      	ldr	r2, [pc, #268]	; (800e448 <tcp_process+0x770>)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	6013      	str	r3, [r2, #0]
 800e33e:	f002 fd49 	bl	8010dd4 <tcp_timer_needed>
    }
    break;
 800e342:	e06c      	b.n	800e41e <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f000 f8f7 	bl	800e538 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e34a:	4b3a      	ldr	r3, [pc, #232]	; (800e434 <tcp_process+0x75c>)
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	f003 0310 	and.w	r3, r3, #16
 800e352:	2b00      	cmp	r3, #0
 800e354:	d065      	beq.n	800e422 <tcp_process+0x74a>
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e35a:	4b37      	ldr	r3, [pc, #220]	; (800e438 <tcp_process+0x760>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	429a      	cmp	r2, r3
 800e360:	d15f      	bne.n	800e422 <tcp_process+0x74a>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e366:	2b00      	cmp	r3, #0
 800e368:	d15b      	bne.n	800e422 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f7fe fe1a 	bl	800cfa4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e370:	4b33      	ldr	r3, [pc, #204]	; (800e440 <tcp_process+0x768>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	429a      	cmp	r2, r3
 800e378:	d105      	bne.n	800e386 <tcp_process+0x6ae>
 800e37a:	4b31      	ldr	r3, [pc, #196]	; (800e440 <tcp_process+0x768>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	68db      	ldr	r3, [r3, #12]
 800e380:	4a2f      	ldr	r2, [pc, #188]	; (800e440 <tcp_process+0x768>)
 800e382:	6013      	str	r3, [r2, #0]
 800e384:	e013      	b.n	800e3ae <tcp_process+0x6d6>
 800e386:	4b2e      	ldr	r3, [pc, #184]	; (800e440 <tcp_process+0x768>)
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	60fb      	str	r3, [r7, #12]
 800e38c:	e00c      	b.n	800e3a8 <tcp_process+0x6d0>
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	68db      	ldr	r3, [r3, #12]
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	429a      	cmp	r2, r3
 800e396:	d104      	bne.n	800e3a2 <tcp_process+0x6ca>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	68da      	ldr	r2, [r3, #12]
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	60da      	str	r2, [r3, #12]
 800e3a0:	e005      	b.n	800e3ae <tcp_process+0x6d6>
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	68db      	ldr	r3, [r3, #12]
 800e3a6:	60fb      	str	r3, [r7, #12]
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d1ef      	bne.n	800e38e <tcp_process+0x6b6>
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	60da      	str	r2, [r3, #12]
 800e3b4:	4b23      	ldr	r3, [pc, #140]	; (800e444 <tcp_process+0x76c>)
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	220a      	movs	r2, #10
 800e3be:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800e3c0:	4b21      	ldr	r3, [pc, #132]	; (800e448 <tcp_process+0x770>)
 800e3c2:	681a      	ldr	r2, [r3, #0]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	60da      	str	r2, [r3, #12]
 800e3c8:	4a1f      	ldr	r2, [pc, #124]	; (800e448 <tcp_process+0x770>)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6013      	str	r3, [r2, #0]
 800e3ce:	f002 fd01 	bl	8010dd4 <tcp_timer_needed>
    }
    break;
 800e3d2:	e026      	b.n	800e422 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f000 f8af 	bl	800e538 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e3da:	4b16      	ldr	r3, [pc, #88]	; (800e434 <tcp_process+0x75c>)
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	f003 0310 	and.w	r3, r3, #16
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d01f      	beq.n	800e426 <tcp_process+0x74e>
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e3ea:	4b13      	ldr	r3, [pc, #76]	; (800e438 <tcp_process+0x760>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d119      	bne.n	800e426 <tcp_process+0x74e>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d115      	bne.n	800e426 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800e3fa:	4b10      	ldr	r3, [pc, #64]	; (800e43c <tcp_process+0x764>)
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	f043 0310 	orr.w	r3, r3, #16
 800e402:	b2da      	uxtb	r2, r3
 800e404:	4b0d      	ldr	r3, [pc, #52]	; (800e43c <tcp_process+0x764>)
 800e406:	701a      	strb	r2, [r3, #0]
    }
    break;
 800e408:	e00d      	b.n	800e426 <tcp_process+0x74e>
  default:
    break;
 800e40a:	bf00      	nop
 800e40c:	e00c      	b.n	800e428 <tcp_process+0x750>
    break;
 800e40e:	bf00      	nop
 800e410:	e00a      	b.n	800e428 <tcp_process+0x750>
    break;
 800e412:	bf00      	nop
 800e414:	e008      	b.n	800e428 <tcp_process+0x750>
    break;
 800e416:	bf00      	nop
 800e418:	e006      	b.n	800e428 <tcp_process+0x750>
    break;
 800e41a:	bf00      	nop
 800e41c:	e004      	b.n	800e428 <tcp_process+0x750>
    break;
 800e41e:	bf00      	nop
 800e420:	e002      	b.n	800e428 <tcp_process+0x750>
    break;
 800e422:	bf00      	nop
 800e424:	e000      	b.n	800e428 <tcp_process+0x750>
    break;
 800e426:	bf00      	nop
  }
  return ERR_OK;
 800e428:	2300      	movs	r3, #0
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3720      	adds	r7, #32
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	20002988 	.word	0x20002988
 800e438:	20002980 	.word	0x20002980
 800e43c:	20002989 	.word	0x20002989
 800e440:	2000ad0c 	.word	0x2000ad0c
 800e444:	2000ad08 	.word	0x2000ad08
 800e448:	2000ad1c 	.word	0x2000ad1c

0800e44c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e44c:	b590      	push	{r4, r7, lr}
 800e44e:	b085      	sub	sp, #20
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	899b      	ldrh	r3, [r3, #12]
 800e45c:	b29b      	uxth	r3, r3
 800e45e:	4618      	mov	r0, r3
 800e460:	f7fb fe90 	bl	800a184 <lwip_htons>
 800e464:	4603      	mov	r3, r0
 800e466:	f003 0301 	and.w	r3, r3, #1
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d027      	beq.n	800e4be <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e46e:	6838      	ldr	r0, [r7, #0]
 800e470:	f7fe fb33 	bl	800cada <tcp_segs_free>
    next = NULL;
 800e474:	2300      	movs	r3, #0
 800e476:	603b      	str	r3, [r7, #0]
 800e478:	e055      	b.n	800e526 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	68db      	ldr	r3, [r3, #12]
 800e47e:	899b      	ldrh	r3, [r3, #12]
 800e480:	b29b      	uxth	r3, r3
 800e482:	4618      	mov	r0, r3
 800e484:	f7fb fe7e 	bl	800a184 <lwip_htons>
 800e488:	4603      	mov	r3, r0
 800e48a:	f003 0301 	and.w	r3, r3, #1
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d00d      	beq.n	800e4ae <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	68db      	ldr	r3, [r3, #12]
 800e496:	899b      	ldrh	r3, [r3, #12]
 800e498:	b29c      	uxth	r4, r3
 800e49a:	2001      	movs	r0, #1
 800e49c:	f7fb fe72 	bl	800a184 <lwip_htons>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	68db      	ldr	r3, [r3, #12]
 800e4a8:	4322      	orrs	r2, r4
 800e4aa:	b292      	uxth	r2, r2
 800e4ac:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e4b8:	68f8      	ldr	r0, [r7, #12]
 800e4ba:	f7fe fb22 	bl	800cb02 <tcp_seg_free>
    while (next &&
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d00e      	beq.n	800e4e2 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	891b      	ldrh	r3, [r3, #8]
 800e4c8:	461a      	mov	r2, r3
 800e4ca:	4b1a      	ldr	r3, [pc, #104]	; (800e534 <tcp_oos_insert_segment+0xe8>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	441a      	add	r2, r3
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	68db      	ldr	r3, [r3, #12]
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	6839      	ldr	r1, [r7, #0]
 800e4d8:	8909      	ldrh	r1, [r1, #8]
 800e4da:	440b      	add	r3, r1
 800e4dc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	dacb      	bge.n	800e47a <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d01e      	beq.n	800e526 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	891b      	ldrh	r3, [r3, #8]
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	4b11      	ldr	r3, [pc, #68]	; (800e534 <tcp_oos_insert_segment+0xe8>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	441a      	add	r2, r3
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	68db      	ldr	r3, [r3, #12]
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	dd12      	ble.n	800e526 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	68db      	ldr	r3, [r3, #12]
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	b29a      	uxth	r2, r3
 800e508:	4b0a      	ldr	r3, [pc, #40]	; (800e534 <tcp_oos_insert_segment+0xe8>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	b29b      	uxth	r3, r3
 800e50e:	1ad3      	subs	r3, r2, r3
 800e510:	b29a      	uxth	r2, r3
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	685a      	ldr	r2, [r3, #4]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	891b      	ldrh	r3, [r3, #8]
 800e51e:	4619      	mov	r1, r3
 800e520:	4610      	mov	r0, r2
 800e522:	f7fc feab 	bl	800b27c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	683a      	ldr	r2, [r7, #0]
 800e52a:	601a      	str	r2, [r3, #0]
}
 800e52c:	bf00      	nop
 800e52e:	3714      	adds	r7, #20
 800e530:	46bd      	mov	sp, r7
 800e532:	bd90      	pop	{r4, r7, pc}
 800e534:	2000297c 	.word	0x2000297c

0800e538 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e53a:	b08d      	sub	sp, #52	; 0x34
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800e540:	2300      	movs	r3, #0
 800e542:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	7d1b      	ldrb	r3, [r3, #20]
 800e548:	2b03      	cmp	r3, #3
 800e54a:	d806      	bhi.n	800e55a <tcp_receive+0x22>
 800e54c:	4ba6      	ldr	r3, [pc, #664]	; (800e7e8 <tcp_receive+0x2b0>)
 800e54e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800e552:	49a6      	ldr	r1, [pc, #664]	; (800e7ec <tcp_receive+0x2b4>)
 800e554:	48a6      	ldr	r0, [pc, #664]	; (800e7f0 <tcp_receive+0x2b8>)
 800e556:	f005 fcab 	bl	8013eb0 <iprintf>

  if (flags & TCP_ACK) {
 800e55a:	4ba6      	ldr	r3, [pc, #664]	; (800e7f4 <tcp_receive+0x2bc>)
 800e55c:	781b      	ldrb	r3, [r3, #0]
 800e55e:	f003 0310 	and.w	r3, r3, #16
 800e562:	2b00      	cmp	r3, #0
 800e564:	f000 82bf 	beq.w	800eae6 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e56e:	461a      	mov	r2, r3
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e574:	4413      	add	r3, r2
 800e576:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e57c:	4b9e      	ldr	r3, [pc, #632]	; (800e7f8 <tcp_receive+0x2c0>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	1ad3      	subs	r3, r2, r3
 800e582:	2b00      	cmp	r3, #0
 800e584:	db1b      	blt.n	800e5be <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e58a:	4b9b      	ldr	r3, [pc, #620]	; (800e7f8 <tcp_receive+0x2c0>)
 800e58c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e58e:	429a      	cmp	r2, r3
 800e590:	d106      	bne.n	800e5a0 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e596:	4b99      	ldr	r3, [pc, #612]	; (800e7fc <tcp_receive+0x2c4>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	1ad3      	subs	r3, r2, r3
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	db0e      	blt.n	800e5be <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e5a4:	4b95      	ldr	r3, [pc, #596]	; (800e7fc <tcp_receive+0x2c4>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d141      	bne.n	800e630 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e5ac:	4b94      	ldr	r3, [pc, #592]	; (800e800 <tcp_receive+0x2c8>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	89db      	ldrh	r3, [r3, #14]
 800e5b2:	b29a      	uxth	r2, r3
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d938      	bls.n	800e630 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e5be:	4b90      	ldr	r3, [pc, #576]	; (800e800 <tcp_receive+0x2c8>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	89db      	ldrh	r3, [r3, #14]
 800e5c4:	b29a      	uxth	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d205      	bcs.n	800e5e8 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800e5e8:	4b83      	ldr	r3, [pc, #524]	; (800e7f8 <tcp_receive+0x2c0>)
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800e5f0:	4b82      	ldr	r3, [pc, #520]	; (800e7fc <tcp_receive+0x2c4>)
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d10d      	bne.n	800e61e <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d111      	bne.n	800e630 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2200      	movs	r2, #0
 800e610:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2201      	movs	r2, #1
 800e618:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800e61c:	e008      	b.n	800e630 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e624:	2b00      	cmp	r3, #0
 800e626:	d003      	beq.n	800e630 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2200      	movs	r2, #0
 800e62c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e630:	4b72      	ldr	r3, [pc, #456]	; (800e7fc <tcp_receive+0x2c4>)
 800e632:	681a      	ldr	r2, [r3, #0]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e638:	1ad3      	subs	r3, r2, r3
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	dc53      	bgt.n	800e6e6 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800e63e:	4b71      	ldr	r3, [pc, #452]	; (800e804 <tcp_receive+0x2cc>)
 800e640:	881b      	ldrh	r3, [r3, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d146      	bne.n	800e6d4 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800e650:	4413      	add	r3, r2
 800e652:	697a      	ldr	r2, [r7, #20]
 800e654:	429a      	cmp	r2, r3
 800e656:	d13d      	bne.n	800e6d4 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e65e:	2b00      	cmp	r3, #0
 800e660:	db38      	blt.n	800e6d4 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e666:	4b65      	ldr	r3, [pc, #404]	; (800e7fc <tcp_receive+0x2c4>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d132      	bne.n	800e6d4 <tcp_receive+0x19c>
              found_dupack = 1;
 800e66e:	2301      	movs	r3, #1
 800e670:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e678:	2bff      	cmp	r3, #255	; 0xff
 800e67a:	d007      	beq.n	800e68c <tcp_receive+0x154>
                ++pcb->dupacks;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e682:	3301      	adds	r3, #1
 800e684:	b2da      	uxtb	r2, r3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e692:	2b03      	cmp	r3, #3
 800e694:	d916      	bls.n	800e6c4 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6a0:	4413      	add	r3, r2
 800e6a2:	b29a      	uxth	r2, r3
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	d912      	bls.n	800e6d4 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6b8:	4413      	add	r3, r2
 800e6ba:	b29a      	uxth	r2, r3
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e6c2:	e007      	b.n	800e6d4 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e6ca:	2b03      	cmp	r3, #3
 800e6cc:	d102      	bne.n	800e6d4 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800e6ce:	6878      	ldr	r0, [r7, #4]
 800e6d0:	f002 fa2c 	bl	8010b2c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e6d4:	69fb      	ldr	r3, [r7, #28]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	f040 8169 	bne.w	800e9ae <tcp_receive+0x476>
        pcb->dupacks = 0;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e6e4:	e163      	b.n	800e9ae <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800e6e6:	4b45      	ldr	r3, [pc, #276]	; (800e7fc <tcp_receive+0x2c4>)
 800e6e8:	681a      	ldr	r2, [r3, #0]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6ee:	1ad3      	subs	r3, r2, r3
 800e6f0:	3b01      	subs	r3, #1
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	f2c0 8107 	blt.w	800e906 <tcp_receive+0x3ce>
 800e6f8:	4b40      	ldr	r3, [pc, #256]	; (800e7fc <tcp_receive+0x2c4>)
 800e6fa:	681a      	ldr	r2, [r3, #0]
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e700:	1ad3      	subs	r3, r2, r3
 800e702:	2b00      	cmp	r3, #0
 800e704:	f300 80ff 	bgt.w	800e906 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	7e9b      	ldrb	r3, [r3, #26]
 800e70c:	f003 0304 	and.w	r3, r3, #4
 800e710:	2b00      	cmp	r3, #0
 800e712:	d00c      	beq.n	800e72e <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	7e9b      	ldrb	r3, [r3, #26]
 800e718:	f023 0304 	bic.w	r3, r3, #4
 800e71c:	b2da      	uxtb	r2, r3
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2200      	movs	r2, #0
 800e732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e73c:	10db      	asrs	r3, r3, #3
 800e73e:	b21b      	sxth	r3, r3
 800e740:	b29a      	uxth	r2, r3
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e748:	b29b      	uxth	r3, r3
 800e74a:	4413      	add	r3, r2
 800e74c:	b29b      	uxth	r3, r3
 800e74e:	b21a      	sxth	r2, r3
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2200      	movs	r2, #0
 800e75a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e75e:	4b27      	ldr	r3, [pc, #156]	; (800e7fc <tcp_receive+0x2c4>)
 800e760:	681a      	ldr	r2, [r3, #0]
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	7d1b      	ldrb	r3, [r3, #20]
 800e76a:	2b03      	cmp	r3, #3
 800e76c:	f240 8094 	bls.w	800e898 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d216      	bcs.n	800e7ae <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e78a:	4413      	add	r3, r2
 800e78c:	b29a      	uxth	r2, r3
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e794:	429a      	cmp	r2, r3
 800e796:	d97f      	bls.n	800e898 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e7a2:	4413      	add	r3, r2
 800e7a4:	b29a      	uxth	r2, r3
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e7ac:	e074      	b.n	800e898 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e7be:	fb03 f301 	mul.w	r3, r3, r1
 800e7c2:	6879      	ldr	r1, [r7, #4]
 800e7c4:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800e7c8:	fb93 f3f1 	sdiv	r3, r3, r1
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	4413      	add	r3, r2
 800e7d0:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e7d8:	8a7a      	ldrh	r2, [r7, #18]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d95c      	bls.n	800e898 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	8a7a      	ldrh	r2, [r7, #18]
 800e7e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800e7e6:	e057      	b.n	800e898 <tcp_receive+0x360>
 800e7e8:	080162e4 	.word	0x080162e4
 800e7ec:	08016508 	.word	0x08016508
 800e7f0:	08016328 	.word	0x08016328
 800e7f4:	20002988 	.word	0x20002988
 800e7f8:	2000297c 	.word	0x2000297c
 800e7fc:	20002980 	.word	0x20002980
 800e800:	2000296c 	.word	0x2000296c
 800e804:	20002986 	.word	0x20002986
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e80c:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e812:	681a      	ldr	r2, [r3, #0]
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800e81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e820:	685b      	ldr	r3, [r3, #4]
 800e822:	4618      	mov	r0, r3
 800e824:	f7fc ff38 	bl	800b698 <pbuf_clen>
 800e828:	4603      	mov	r3, r0
 800e82a:	429c      	cmp	r4, r3
 800e82c:	d206      	bcs.n	800e83c <tcp_receive+0x304>
 800e82e:	4b70      	ldr	r3, [pc, #448]	; (800e9f0 <tcp_receive+0x4b8>)
 800e830:	f240 429e 	movw	r2, #1182	; 0x49e
 800e834:	496f      	ldr	r1, [pc, #444]	; (800e9f4 <tcp_receive+0x4bc>)
 800e836:	4870      	ldr	r0, [pc, #448]	; (800e9f8 <tcp_receive+0x4c0>)
 800e838:	f005 fb3a 	bl	8013eb0 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800e83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	4618      	mov	r0, r3
 800e842:	f7fc ff29 	bl	800b698 <pbuf_clen>
 800e846:	4603      	mov	r3, r0
 800e848:	461a      	mov	r2, r3
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e850:	1a9b      	subs	r3, r3, r2
 800e852:	b29a      	uxth	r2, r3
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800e85a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e85c:	891a      	ldrh	r2, [r3, #8]
 800e85e:	4b67      	ldr	r3, [pc, #412]	; (800e9fc <tcp_receive+0x4c4>)
 800e860:	881b      	ldrh	r3, [r3, #0]
 800e862:	4413      	add	r3, r2
 800e864:	b29a      	uxth	r2, r3
 800e866:	4b65      	ldr	r3, [pc, #404]	; (800e9fc <tcp_receive+0x4c4>)
 800e868:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800e86a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e86c:	f7fe f949 	bl	800cb02 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e876:	2b00      	cmp	r3, #0
 800e878:	d00e      	beq.n	800e898 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d10a      	bne.n	800e898 <tcp_receive+0x360>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e886:	2b00      	cmp	r3, #0
 800e888:	d106      	bne.n	800e898 <tcp_receive+0x360>
 800e88a:	4b59      	ldr	r3, [pc, #356]	; (800e9f0 <tcp_receive+0x4b8>)
 800e88c:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800e890:	495b      	ldr	r1, [pc, #364]	; (800ea00 <tcp_receive+0x4c8>)
 800e892:	4859      	ldr	r0, [pc, #356]	; (800e9f8 <tcp_receive+0x4c0>)
 800e894:	f005 fb0c 	bl	8013eb0 <iprintf>
      while (pcb->unacked != NULL &&
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d022      	beq.n	800e8e6 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8a4:	68db      	ldr	r3, [r3, #12]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f7fb fc78 	bl	800a19e <lwip_htonl>
 800e8ae:	4604      	mov	r4, r0
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8b4:	891b      	ldrh	r3, [r3, #8]
 800e8b6:	461d      	mov	r5, r3
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8bc:	68db      	ldr	r3, [r3, #12]
 800e8be:	899b      	ldrh	r3, [r3, #12]
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7fb fc5e 	bl	800a184 <lwip_htons>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	f003 0303 	and.w	r3, r3, #3
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d001      	beq.n	800e8d6 <tcp_receive+0x39e>
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	e000      	b.n	800e8d8 <tcp_receive+0x3a0>
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	442b      	add	r3, r5
 800e8da:	18e2      	adds	r2, r4, r3
 800e8dc:	4b49      	ldr	r3, [pc, #292]	; (800ea04 <tcp_receive+0x4cc>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	dd90      	ble.n	800e808 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d104      	bne.n	800e8f8 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8f4:	861a      	strh	r2, [r3, #48]	; 0x30
 800e8f6:	e002      	b.n	800e8fe <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2200      	movs	r2, #0
 800e902:	76da      	strb	r2, [r3, #27]
 800e904:	e002      	b.n	800e90c <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f001 fd2e 	bl	8010368 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800e90c:	e04f      	b.n	800e9ae <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e912:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e918:	681a      	ldr	r2, [r3, #0]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e922:	2b00      	cmp	r3, #0
 800e924:	d103      	bne.n	800e92e <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2200      	movs	r2, #0
 800e92a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800e934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e936:	685b      	ldr	r3, [r3, #4]
 800e938:	4618      	mov	r0, r3
 800e93a:	f7fc fead 	bl	800b698 <pbuf_clen>
 800e93e:	4603      	mov	r3, r0
 800e940:	429c      	cmp	r4, r3
 800e942:	d206      	bcs.n	800e952 <tcp_receive+0x41a>
 800e944:	4b2a      	ldr	r3, [pc, #168]	; (800e9f0 <tcp_receive+0x4b8>)
 800e946:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e94a:	492a      	ldr	r1, [pc, #168]	; (800e9f4 <tcp_receive+0x4bc>)
 800e94c:	482a      	ldr	r0, [pc, #168]	; (800e9f8 <tcp_receive+0x4c0>)
 800e94e:	f005 faaf 	bl	8013eb0 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800e952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	4618      	mov	r0, r3
 800e958:	f7fc fe9e 	bl	800b698 <pbuf_clen>
 800e95c:	4603      	mov	r3, r0
 800e95e:	461a      	mov	r2, r3
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e966:	1a9b      	subs	r3, r3, r2
 800e968:	b29a      	uxth	r2, r3
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800e970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e972:	891a      	ldrh	r2, [r3, #8]
 800e974:	4b21      	ldr	r3, [pc, #132]	; (800e9fc <tcp_receive+0x4c4>)
 800e976:	881b      	ldrh	r3, [r3, #0]
 800e978:	4413      	add	r3, r2
 800e97a:	b29a      	uxth	r2, r3
 800e97c:	4b1f      	ldr	r3, [pc, #124]	; (800e9fc <tcp_receive+0x4c4>)
 800e97e:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800e980:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e982:	f7fe f8be 	bl	800cb02 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d00e      	beq.n	800e9ae <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e994:	2b00      	cmp	r3, #0
 800e996:	d10a      	bne.n	800e9ae <tcp_receive+0x476>
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d106      	bne.n	800e9ae <tcp_receive+0x476>
 800e9a0:	4b13      	ldr	r3, [pc, #76]	; (800e9f0 <tcp_receive+0x4b8>)
 800e9a2:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800e9a6:	4916      	ldr	r1, [pc, #88]	; (800ea00 <tcp_receive+0x4c8>)
 800e9a8:	4813      	ldr	r0, [pc, #76]	; (800e9f8 <tcp_receive+0x4c0>)
 800e9aa:	f005 fa81 	bl	8013eb0 <iprintf>
    while (pcb->unsent != NULL &&
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d036      	beq.n	800ea24 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800e9b6:	4b13      	ldr	r3, [pc, #76]	; (800ea04 <tcp_receive+0x4cc>)
 800e9b8:	681c      	ldr	r4, [r3, #0]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9be:	68db      	ldr	r3, [r3, #12]
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f7fb fbeb 	bl	800a19e <lwip_htonl>
 800e9c8:	4605      	mov	r5, r0
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9ce:	891b      	ldrh	r3, [r3, #8]
 800e9d0:	461e      	mov	r6, r3
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9d6:	68db      	ldr	r3, [r3, #12]
 800e9d8:	899b      	ldrh	r3, [r3, #12]
 800e9da:	b29b      	uxth	r3, r3
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7fb fbd1 	bl	800a184 <lwip_htons>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	f003 0303 	and.w	r3, r3, #3
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d00d      	beq.n	800ea08 <tcp_receive+0x4d0>
 800e9ec:	2301      	movs	r3, #1
 800e9ee:	e00c      	b.n	800ea0a <tcp_receive+0x4d2>
 800e9f0:	080162e4 	.word	0x080162e4
 800e9f4:	08016524 	.word	0x08016524
 800e9f8:	08016328 	.word	0x08016328
 800e9fc:	20002984 	.word	0x20002984
 800ea00:	0801654c 	.word	0x0801654c
 800ea04:	20002980 	.word	0x20002980
 800ea08:	2300      	movs	r3, #0
 800ea0a:	4433      	add	r3, r6
 800ea0c:	442b      	add	r3, r5
 800ea0e:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	db07      	blt.n	800ea24 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800ea14:	4b8d      	ldr	r3, [pc, #564]	; (800ec4c <tcp_receive+0x714>)
 800ea16:	681a      	ldr	r2, [r3, #0]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea1c:	1ad3      	subs	r3, r2, r3
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	f77f af75 	ble.w	800e90e <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ea2a:	4b89      	ldr	r3, [pc, #548]	; (800ec50 <tcp_receive+0x718>)
 800ea2c:	881b      	ldrh	r3, [r3, #0]
 800ea2e:	4413      	add	r3, r2
 800ea30:	b29a      	uxth	r2, r3
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d052      	beq.n	800eae6 <tcp_receive+0x5ae>
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea44:	4b81      	ldr	r3, [pc, #516]	; (800ec4c <tcp_receive+0x714>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	1ad3      	subs	r3, r2, r3
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	da4b      	bge.n	800eae6 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800ea4e:	4b81      	ldr	r3, [pc, #516]	; (800ec54 <tcp_receive+0x71c>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	b29a      	uxth	r2, r3
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea58:	b29b      	uxth	r3, r3
 800ea5a:	1ad3      	subs	r3, r2, r3
 800ea5c:	b29b      	uxth	r3, r3
 800ea5e:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800ea60:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ea68:	10db      	asrs	r3, r3, #3
 800ea6a:	b21b      	sxth	r3, r3
 800ea6c:	b29b      	uxth	r3, r3
 800ea6e:	1ad3      	subs	r3, r2, r3
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ea7a:	b29a      	uxth	r2, r3
 800ea7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea7e:	4413      	add	r3, r2
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	b21a      	sxth	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ea88:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	da03      	bge.n	800ea98 <tcp_receive+0x560>
        m = -m;
 800ea90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ea92:	425b      	negs	r3, r3
 800ea94:	b29b      	uxth	r3, r3
 800ea96:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800ea98:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800eaa0:	109b      	asrs	r3, r3, #2
 800eaa2:	b21b      	sxth	r3, r3
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	1ad3      	subs	r3, r2, r3
 800eaa8:	b29b      	uxth	r3, r3
 800eaaa:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800eab2:	b29a      	uxth	r2, r3
 800eab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eab6:	4413      	add	r3, r2
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	b21a      	sxth	r2, r3
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800eac6:	10db      	asrs	r3, r3, #3
 800eac8:	b21b      	sxth	r3, r3
 800eaca:	b29a      	uxth	r2, r3
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ead2:	b29b      	uxth	r3, r3
 800ead4:	4413      	add	r3, r2
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	b21a      	sxth	r2, r3
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2200      	movs	r2, #0
 800eae4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800eae6:	4b5c      	ldr	r3, [pc, #368]	; (800ec58 <tcp_receive+0x720>)
 800eae8:	881b      	ldrh	r3, [r3, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	f000 84f1 	beq.w	800f4d2 <tcp_receive+0xf9a>
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	7d1b      	ldrb	r3, [r3, #20]
 800eaf4:	2b06      	cmp	r3, #6
 800eaf6:	f200 84ec 	bhi.w	800f4d2 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eafe:	4b57      	ldr	r3, [pc, #348]	; (800ec5c <tcp_receive+0x724>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	1ad3      	subs	r3, r2, r3
 800eb04:	3b01      	subs	r3, #1
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	f2c0 80b8 	blt.w	800ec7c <tcp_receive+0x744>
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb10:	4b51      	ldr	r3, [pc, #324]	; (800ec58 <tcp_receive+0x720>)
 800eb12:	881b      	ldrh	r3, [r3, #0]
 800eb14:	4619      	mov	r1, r3
 800eb16:	4b51      	ldr	r3, [pc, #324]	; (800ec5c <tcp_receive+0x724>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	440b      	add	r3, r1
 800eb1c:	1ad3      	subs	r3, r2, r3
 800eb1e:	3301      	adds	r3, #1
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	f300 80ab 	bgt.w	800ec7c <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800eb26:	4b4e      	ldr	r3, [pc, #312]	; (800ec60 <tcp_receive+0x728>)
 800eb28:	685b      	ldr	r3, [r3, #4]
 800eb2a:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb30:	4b4a      	ldr	r3, [pc, #296]	; (800ec5c <tcp_receive+0x724>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	1ad3      	subs	r3, r2, r3
 800eb36:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800eb38:	4b49      	ldr	r3, [pc, #292]	; (800ec60 <tcp_receive+0x728>)
 800eb3a:	685b      	ldr	r3, [r3, #4]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d106      	bne.n	800eb4e <tcp_receive+0x616>
 800eb40:	4b48      	ldr	r3, [pc, #288]	; (800ec64 <tcp_receive+0x72c>)
 800eb42:	f240 523c 	movw	r2, #1340	; 0x53c
 800eb46:	4948      	ldr	r1, [pc, #288]	; (800ec68 <tcp_receive+0x730>)
 800eb48:	4848      	ldr	r0, [pc, #288]	; (800ec6c <tcp_receive+0x734>)
 800eb4a:	f005 f9b1 	bl	8013eb0 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800eb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb50:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800eb54:	4293      	cmp	r3, r2
 800eb56:	dd06      	ble.n	800eb66 <tcp_receive+0x62e>
 800eb58:	4b42      	ldr	r3, [pc, #264]	; (800ec64 <tcp_receive+0x72c>)
 800eb5a:	f240 523d 	movw	r2, #1341	; 0x53d
 800eb5e:	4944      	ldr	r1, [pc, #272]	; (800ec70 <tcp_receive+0x738>)
 800eb60:	4842      	ldr	r0, [pc, #264]	; (800ec6c <tcp_receive+0x734>)
 800eb62:	f005 f9a5 	bl	8013eb0 <iprintf>
      if (inseg.p->len < off) {
 800eb66:	4b3e      	ldr	r3, [pc, #248]	; (800ec60 <tcp_receive+0x728>)
 800eb68:	685b      	ldr	r3, [r3, #4]
 800eb6a:	895b      	ldrh	r3, [r3, #10]
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb70:	4293      	cmp	r3, r2
 800eb72:	dd3e      	ble.n	800ebf2 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800eb74:	4b3a      	ldr	r3, [pc, #232]	; (800ec60 <tcp_receive+0x728>)
 800eb76:	685b      	ldr	r3, [r3, #4]
 800eb78:	891b      	ldrh	r3, [r3, #8]
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	dd06      	ble.n	800eb90 <tcp_receive+0x658>
 800eb82:	4b38      	ldr	r3, [pc, #224]	; (800ec64 <tcp_receive+0x72c>)
 800eb84:	f240 523f 	movw	r2, #1343	; 0x53f
 800eb88:	493a      	ldr	r1, [pc, #232]	; (800ec74 <tcp_receive+0x73c>)
 800eb8a:	4838      	ldr	r0, [pc, #224]	; (800ec6c <tcp_receive+0x734>)
 800eb8c:	f005 f990 	bl	8013eb0 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800eb90:	4b33      	ldr	r3, [pc, #204]	; (800ec60 <tcp_receive+0x728>)
 800eb92:	685b      	ldr	r3, [r3, #4]
 800eb94:	891a      	ldrh	r2, [r3, #8]
 800eb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb98:	b29b      	uxth	r3, r3
 800eb9a:	1ad3      	subs	r3, r2, r3
 800eb9c:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800eb9e:	e00e      	b.n	800ebbe <tcp_receive+0x686>
          off -= p->len;
 800eba0:	69bb      	ldr	r3, [r7, #24]
 800eba2:	895b      	ldrh	r3, [r3, #10]
 800eba4:	461a      	mov	r2, r3
 800eba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba8:	1a9b      	subs	r3, r3, r2
 800ebaa:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800ebac:	69bb      	ldr	r3, [r7, #24]
 800ebae:	8a3a      	ldrh	r2, [r7, #16]
 800ebb0:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800ebb2:	69bb      	ldr	r3, [r7, #24]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800ebb8:	69bb      	ldr	r3, [r7, #24]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800ebbe:	69bb      	ldr	r3, [r7, #24]
 800ebc0:	895b      	ldrh	r3, [r3, #10]
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	dcea      	bgt.n	800eba0 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800ebca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebcc:	b29b      	uxth	r3, r3
 800ebce:	425b      	negs	r3, r3
 800ebd0:	b29b      	uxth	r3, r3
 800ebd2:	b21b      	sxth	r3, r3
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	69b8      	ldr	r0, [r7, #24]
 800ebd8:	f7fc fca0 	bl	800b51c <pbuf_header>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d01c      	beq.n	800ec1c <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800ebe2:	4b20      	ldr	r3, [pc, #128]	; (800ec64 <tcp_receive+0x72c>)
 800ebe4:	f240 524c 	movw	r2, #1356	; 0x54c
 800ebe8:	4923      	ldr	r1, [pc, #140]	; (800ec78 <tcp_receive+0x740>)
 800ebea:	4820      	ldr	r0, [pc, #128]	; (800ec6c <tcp_receive+0x734>)
 800ebec:	f005 f960 	bl	8013eb0 <iprintf>
 800ebf0:	e014      	b.n	800ec1c <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800ebf2:	4b1b      	ldr	r3, [pc, #108]	; (800ec60 <tcp_receive+0x728>)
 800ebf4:	685b      	ldr	r3, [r3, #4]
 800ebf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebf8:	b292      	uxth	r2, r2
 800ebfa:	4252      	negs	r2, r2
 800ebfc:	b292      	uxth	r2, r2
 800ebfe:	b212      	sxth	r2, r2
 800ec00:	4611      	mov	r1, r2
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7fc fc8a 	bl	800b51c <pbuf_header>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d006      	beq.n	800ec1c <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800ec0e:	4b15      	ldr	r3, [pc, #84]	; (800ec64 <tcp_receive+0x72c>)
 800ec10:	f240 5251 	movw	r2, #1361	; 0x551
 800ec14:	4918      	ldr	r1, [pc, #96]	; (800ec78 <tcp_receive+0x740>)
 800ec16:	4815      	ldr	r0, [pc, #84]	; (800ec6c <tcp_receive+0x734>)
 800ec18:	f005 f94a 	bl	8013eb0 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800ec1c:	4b10      	ldr	r3, [pc, #64]	; (800ec60 <tcp_receive+0x728>)
 800ec1e:	891a      	ldrh	r2, [r3, #8]
 800ec20:	4b0e      	ldr	r3, [pc, #56]	; (800ec5c <tcp_receive+0x724>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	b299      	uxth	r1, r3
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec2a:	b29b      	uxth	r3, r3
 800ec2c:	1acb      	subs	r3, r1, r3
 800ec2e:	b29b      	uxth	r3, r3
 800ec30:	4413      	add	r3, r2
 800ec32:	b29a      	uxth	r2, r3
 800ec34:	4b0a      	ldr	r3, [pc, #40]	; (800ec60 <tcp_receive+0x728>)
 800ec36:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec3c:	4a07      	ldr	r2, [pc, #28]	; (800ec5c <tcp_receive+0x724>)
 800ec3e:	6013      	str	r3, [r2, #0]
 800ec40:	4b07      	ldr	r3, [pc, #28]	; (800ec60 <tcp_receive+0x728>)
 800ec42:	68db      	ldr	r3, [r3, #12]
 800ec44:	4a05      	ldr	r2, [pc, #20]	; (800ec5c <tcp_receive+0x724>)
 800ec46:	6812      	ldr	r2, [r2, #0]
 800ec48:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ec4a:	e025      	b.n	800ec98 <tcp_receive+0x760>
 800ec4c:	20002980 	.word	0x20002980
 800ec50:	20002984 	.word	0x20002984
 800ec54:	2000ad10 	.word	0x2000ad10
 800ec58:	20002986 	.word	0x20002986
 800ec5c:	2000297c 	.word	0x2000297c
 800ec60:	2000295c 	.word	0x2000295c
 800ec64:	080162e4 	.word	0x080162e4
 800ec68:	0801656c 	.word	0x0801656c
 800ec6c:	08016328 	.word	0x08016328
 800ec70:	0801657c 	.word	0x0801657c
 800ec74:	0801658c 	.word	0x0801658c
 800ec78:	0801659c 	.word	0x0801659c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ec7c:	4b87      	ldr	r3, [pc, #540]	; (800ee9c <tcp_receive+0x964>)
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec84:	1ad3      	subs	r3, r2, r3
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	da06      	bge.n	800ec98 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	7e9b      	ldrb	r3, [r3, #26]
 800ec8e:	f043 0302 	orr.w	r3, r3, #2
 800ec92:	b2da      	uxtb	r2, r3
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ec98:	4b80      	ldr	r3, [pc, #512]	; (800ee9c <tcp_receive+0x964>)
 800ec9a:	681a      	ldr	r2, [r3, #0]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca0:	1ad3      	subs	r3, r2, r3
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	f2c0 8410 	blt.w	800f4c8 <tcp_receive+0xf90>
 800eca8:	4b7c      	ldr	r3, [pc, #496]	; (800ee9c <tcp_receive+0x964>)
 800ecaa:	681a      	ldr	r2, [r3, #0]
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecb0:	6879      	ldr	r1, [r7, #4]
 800ecb2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ecb4:	440b      	add	r3, r1
 800ecb6:	1ad3      	subs	r3, r2, r3
 800ecb8:	3301      	adds	r3, #1
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	f300 8404 	bgt.w	800f4c8 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecc4:	4b75      	ldr	r3, [pc, #468]	; (800ee9c <tcp_receive+0x964>)
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	f040 8287 	bne.w	800f1dc <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ecce:	4b74      	ldr	r3, [pc, #464]	; (800eea0 <tcp_receive+0x968>)
 800ecd0:	891c      	ldrh	r4, [r3, #8]
 800ecd2:	4b73      	ldr	r3, [pc, #460]	; (800eea0 <tcp_receive+0x968>)
 800ecd4:	68db      	ldr	r3, [r3, #12]
 800ecd6:	899b      	ldrh	r3, [r3, #12]
 800ecd8:	b29b      	uxth	r3, r3
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f7fb fa52 	bl	800a184 <lwip_htons>
 800ece0:	4603      	mov	r3, r0
 800ece2:	f003 0303 	and.w	r3, r3, #3
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d001      	beq.n	800ecee <tcp_receive+0x7b6>
 800ecea:	2301      	movs	r3, #1
 800ecec:	e000      	b.n	800ecf0 <tcp_receive+0x7b8>
 800ecee:	2300      	movs	r3, #0
 800ecf0:	4423      	add	r3, r4
 800ecf2:	b29a      	uxth	r2, r3
 800ecf4:	4b6b      	ldr	r3, [pc, #428]	; (800eea4 <tcp_receive+0x96c>)
 800ecf6:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ecfc:	4b69      	ldr	r3, [pc, #420]	; (800eea4 <tcp_receive+0x96c>)
 800ecfe:	881b      	ldrh	r3, [r3, #0]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d26e      	bcs.n	800ede2 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ed04:	4b66      	ldr	r3, [pc, #408]	; (800eea0 <tcp_receive+0x968>)
 800ed06:	68db      	ldr	r3, [r3, #12]
 800ed08:	899b      	ldrh	r3, [r3, #12]
 800ed0a:	b29b      	uxth	r3, r3
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f7fb fa39 	bl	800a184 <lwip_htons>
 800ed12:	4603      	mov	r3, r0
 800ed14:	f003 0301 	and.w	r3, r3, #1
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d01b      	beq.n	800ed54 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ed1c:	4b60      	ldr	r3, [pc, #384]	; (800eea0 <tcp_receive+0x968>)
 800ed1e:	68db      	ldr	r3, [r3, #12]
 800ed20:	899b      	ldrh	r3, [r3, #12]
 800ed22:	b29b      	uxth	r3, r3
 800ed24:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ed28:	b29c      	uxth	r4, r3
 800ed2a:	4b5d      	ldr	r3, [pc, #372]	; (800eea0 <tcp_receive+0x968>)
 800ed2c:	68db      	ldr	r3, [r3, #12]
 800ed2e:	899b      	ldrh	r3, [r3, #12]
 800ed30:	b29b      	uxth	r3, r3
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7fb fa26 	bl	800a184 <lwip_htons>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	4618      	mov	r0, r3
 800ed42:	f7fb fa1f 	bl	800a184 <lwip_htons>
 800ed46:	4603      	mov	r3, r0
 800ed48:	461a      	mov	r2, r3
 800ed4a:	4b55      	ldr	r3, [pc, #340]	; (800eea0 <tcp_receive+0x968>)
 800ed4c:	68db      	ldr	r3, [r3, #12]
 800ed4e:	4322      	orrs	r2, r4
 800ed50:	b292      	uxth	r2, r2
 800ed52:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ed58:	4b51      	ldr	r3, [pc, #324]	; (800eea0 <tcp_receive+0x968>)
 800ed5a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ed5c:	4b50      	ldr	r3, [pc, #320]	; (800eea0 <tcp_receive+0x968>)
 800ed5e:	68db      	ldr	r3, [r3, #12]
 800ed60:	899b      	ldrh	r3, [r3, #12]
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7fb fa0d 	bl	800a184 <lwip_htons>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	f003 0302 	and.w	r3, r3, #2
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d005      	beq.n	800ed80 <tcp_receive+0x848>
            inseg.len -= 1;
 800ed74:	4b4a      	ldr	r3, [pc, #296]	; (800eea0 <tcp_receive+0x968>)
 800ed76:	891b      	ldrh	r3, [r3, #8]
 800ed78:	3b01      	subs	r3, #1
 800ed7a:	b29a      	uxth	r2, r3
 800ed7c:	4b48      	ldr	r3, [pc, #288]	; (800eea0 <tcp_receive+0x968>)
 800ed7e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ed80:	4b47      	ldr	r3, [pc, #284]	; (800eea0 <tcp_receive+0x968>)
 800ed82:	685a      	ldr	r2, [r3, #4]
 800ed84:	4b46      	ldr	r3, [pc, #280]	; (800eea0 <tcp_receive+0x968>)
 800ed86:	891b      	ldrh	r3, [r3, #8]
 800ed88:	4619      	mov	r1, r3
 800ed8a:	4610      	mov	r0, r2
 800ed8c:	f7fc fa76 	bl	800b27c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ed90:	4b43      	ldr	r3, [pc, #268]	; (800eea0 <tcp_receive+0x968>)
 800ed92:	891c      	ldrh	r4, [r3, #8]
 800ed94:	4b42      	ldr	r3, [pc, #264]	; (800eea0 <tcp_receive+0x968>)
 800ed96:	68db      	ldr	r3, [r3, #12]
 800ed98:	899b      	ldrh	r3, [r3, #12]
 800ed9a:	b29b      	uxth	r3, r3
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7fb f9f1 	bl	800a184 <lwip_htons>
 800eda2:	4603      	mov	r3, r0
 800eda4:	f003 0303 	and.w	r3, r3, #3
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d001      	beq.n	800edb0 <tcp_receive+0x878>
 800edac:	2301      	movs	r3, #1
 800edae:	e000      	b.n	800edb2 <tcp_receive+0x87a>
 800edb0:	2300      	movs	r3, #0
 800edb2:	4423      	add	r3, r4
 800edb4:	b29a      	uxth	r2, r3
 800edb6:	4b3b      	ldr	r3, [pc, #236]	; (800eea4 <tcp_receive+0x96c>)
 800edb8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800edba:	4b3a      	ldr	r3, [pc, #232]	; (800eea4 <tcp_receive+0x96c>)
 800edbc:	881b      	ldrh	r3, [r3, #0]
 800edbe:	461a      	mov	r2, r3
 800edc0:	4b36      	ldr	r3, [pc, #216]	; (800ee9c <tcp_receive+0x964>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	441a      	add	r2, r3
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edca:	6879      	ldr	r1, [r7, #4]
 800edcc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800edce:	440b      	add	r3, r1
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d006      	beq.n	800ede2 <tcp_receive+0x8aa>
 800edd4:	4b34      	ldr	r3, [pc, #208]	; (800eea8 <tcp_receive+0x970>)
 800edd6:	f240 527f 	movw	r2, #1407	; 0x57f
 800edda:	4934      	ldr	r1, [pc, #208]	; (800eeac <tcp_receive+0x974>)
 800eddc:	4834      	ldr	r0, [pc, #208]	; (800eeb0 <tcp_receive+0x978>)
 800edde:	f005 f867 	bl	8013eb0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	f000 80e1 	beq.w	800efae <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800edec:	4b2c      	ldr	r3, [pc, #176]	; (800eea0 <tcp_receive+0x968>)
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	899b      	ldrh	r3, [r3, #12]
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	4618      	mov	r0, r3
 800edf6:	f7fb f9c5 	bl	800a184 <lwip_htons>
 800edfa:	4603      	mov	r3, r0
 800edfc:	f003 0301 	and.w	r3, r3, #1
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d010      	beq.n	800ee26 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ee04:	e00a      	b.n	800ee1c <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee0a:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee10:	681a      	ldr	r2, [r3, #0]
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800ee16:	68b8      	ldr	r0, [r7, #8]
 800ee18:	f7fd fe73 	bl	800cb02 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d1f0      	bne.n	800ee06 <tcp_receive+0x8ce>
 800ee24:	e0c3      	b.n	800efae <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee2a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ee2c:	e04f      	b.n	800eece <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ee2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee30:	68db      	ldr	r3, [r3, #12]
 800ee32:	899b      	ldrh	r3, [r3, #12]
 800ee34:	b29b      	uxth	r3, r3
 800ee36:	4618      	mov	r0, r3
 800ee38:	f7fb f9a4 	bl	800a184 <lwip_htons>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	f003 0301 	and.w	r3, r3, #1
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d03b      	beq.n	800eebe <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ee46:	4b16      	ldr	r3, [pc, #88]	; (800eea0 <tcp_receive+0x968>)
 800ee48:	68db      	ldr	r3, [r3, #12]
 800ee4a:	899b      	ldrh	r3, [r3, #12]
 800ee4c:	b29b      	uxth	r3, r3
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7fb f998 	bl	800a184 <lwip_htons>
 800ee54:	4603      	mov	r3, r0
 800ee56:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d12f      	bne.n	800eebe <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ee5e:	4b10      	ldr	r3, [pc, #64]	; (800eea0 <tcp_receive+0x968>)
 800ee60:	68db      	ldr	r3, [r3, #12]
 800ee62:	899b      	ldrh	r3, [r3, #12]
 800ee64:	b29c      	uxth	r4, r3
 800ee66:	2001      	movs	r0, #1
 800ee68:	f7fb f98c 	bl	800a184 <lwip_htons>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	461a      	mov	r2, r3
 800ee70:	4b0b      	ldr	r3, [pc, #44]	; (800eea0 <tcp_receive+0x968>)
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	4322      	orrs	r2, r4
 800ee76:	b292      	uxth	r2, r2
 800ee78:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ee7a:	4b09      	ldr	r3, [pc, #36]	; (800eea0 <tcp_receive+0x968>)
 800ee7c:	891c      	ldrh	r4, [r3, #8]
 800ee7e:	4b08      	ldr	r3, [pc, #32]	; (800eea0 <tcp_receive+0x968>)
 800ee80:	68db      	ldr	r3, [r3, #12]
 800ee82:	899b      	ldrh	r3, [r3, #12]
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7fb f97c 	bl	800a184 <lwip_htons>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	f003 0303 	and.w	r3, r3, #3
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d00e      	beq.n	800eeb4 <tcp_receive+0x97c>
 800ee96:	2301      	movs	r3, #1
 800ee98:	e00d      	b.n	800eeb6 <tcp_receive+0x97e>
 800ee9a:	bf00      	nop
 800ee9c:	2000297c 	.word	0x2000297c
 800eea0:	2000295c 	.word	0x2000295c
 800eea4:	20002986 	.word	0x20002986
 800eea8:	080162e4 	.word	0x080162e4
 800eeac:	080165b0 	.word	0x080165b0
 800eeb0:	08016328 	.word	0x08016328
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	4423      	add	r3, r4
 800eeb8:	b29a      	uxth	r2, r3
 800eeba:	4b95      	ldr	r3, [pc, #596]	; (800f110 <tcp_receive+0xbd8>)
 800eebc:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800eebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec0:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800eec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800eec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eeca:	f7fd fe1a 	bl	800cb02 <tcp_seg_free>
            while (next &&
 800eece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d00e      	beq.n	800eef2 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800eed4:	4b8e      	ldr	r3, [pc, #568]	; (800f110 <tcp_receive+0xbd8>)
 800eed6:	881b      	ldrh	r3, [r3, #0]
 800eed8:	461a      	mov	r2, r3
 800eeda:	4b8e      	ldr	r3, [pc, #568]	; (800f114 <tcp_receive+0xbdc>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	441a      	add	r2, r3
 800eee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee2:	68db      	ldr	r3, [r3, #12]
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eee8:	8909      	ldrh	r1, [r1, #8]
 800eeea:	440b      	add	r3, r1
 800eeec:	1ad3      	subs	r3, r2, r3
            while (next &&
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	da9d      	bge.n	800ee2e <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800eef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d057      	beq.n	800efa8 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800eef8:	4b85      	ldr	r3, [pc, #532]	; (800f110 <tcp_receive+0xbd8>)
 800eefa:	881b      	ldrh	r3, [r3, #0]
 800eefc:	461a      	mov	r2, r3
 800eefe:	4b85      	ldr	r3, [pc, #532]	; (800f114 <tcp_receive+0xbdc>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	441a      	add	r2, r3
 800ef04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef06:	68db      	ldr	r3, [r3, #12]
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	dd4b      	ble.n	800efa8 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ef10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef12:	68db      	ldr	r3, [r3, #12]
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	b29a      	uxth	r2, r3
 800ef18:	4b7e      	ldr	r3, [pc, #504]	; (800f114 <tcp_receive+0xbdc>)
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	b29b      	uxth	r3, r3
 800ef1e:	1ad3      	subs	r3, r2, r3
 800ef20:	b29a      	uxth	r2, r3
 800ef22:	4b7d      	ldr	r3, [pc, #500]	; (800f118 <tcp_receive+0xbe0>)
 800ef24:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ef26:	4b7c      	ldr	r3, [pc, #496]	; (800f118 <tcp_receive+0xbe0>)
 800ef28:	68db      	ldr	r3, [r3, #12]
 800ef2a:	899b      	ldrh	r3, [r3, #12]
 800ef2c:	b29b      	uxth	r3, r3
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7fb f928 	bl	800a184 <lwip_htons>
 800ef34:	4603      	mov	r3, r0
 800ef36:	f003 0302 	and.w	r3, r3, #2
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d005      	beq.n	800ef4a <tcp_receive+0xa12>
                inseg.len -= 1;
 800ef3e:	4b76      	ldr	r3, [pc, #472]	; (800f118 <tcp_receive+0xbe0>)
 800ef40:	891b      	ldrh	r3, [r3, #8]
 800ef42:	3b01      	subs	r3, #1
 800ef44:	b29a      	uxth	r2, r3
 800ef46:	4b74      	ldr	r3, [pc, #464]	; (800f118 <tcp_receive+0xbe0>)
 800ef48:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ef4a:	4b73      	ldr	r3, [pc, #460]	; (800f118 <tcp_receive+0xbe0>)
 800ef4c:	685a      	ldr	r2, [r3, #4]
 800ef4e:	4b72      	ldr	r3, [pc, #456]	; (800f118 <tcp_receive+0xbe0>)
 800ef50:	891b      	ldrh	r3, [r3, #8]
 800ef52:	4619      	mov	r1, r3
 800ef54:	4610      	mov	r0, r2
 800ef56:	f7fc f991 	bl	800b27c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ef5a:	4b6f      	ldr	r3, [pc, #444]	; (800f118 <tcp_receive+0xbe0>)
 800ef5c:	891c      	ldrh	r4, [r3, #8]
 800ef5e:	4b6e      	ldr	r3, [pc, #440]	; (800f118 <tcp_receive+0xbe0>)
 800ef60:	68db      	ldr	r3, [r3, #12]
 800ef62:	899b      	ldrh	r3, [r3, #12]
 800ef64:	b29b      	uxth	r3, r3
 800ef66:	4618      	mov	r0, r3
 800ef68:	f7fb f90c 	bl	800a184 <lwip_htons>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	f003 0303 	and.w	r3, r3, #3
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d001      	beq.n	800ef7a <tcp_receive+0xa42>
 800ef76:	2301      	movs	r3, #1
 800ef78:	e000      	b.n	800ef7c <tcp_receive+0xa44>
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	4423      	add	r3, r4
 800ef7e:	b29a      	uxth	r2, r3
 800ef80:	4b63      	ldr	r3, [pc, #396]	; (800f110 <tcp_receive+0xbd8>)
 800ef82:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ef84:	4b62      	ldr	r3, [pc, #392]	; (800f110 <tcp_receive+0xbd8>)
 800ef86:	881b      	ldrh	r3, [r3, #0]
 800ef88:	461a      	mov	r2, r3
 800ef8a:	4b62      	ldr	r3, [pc, #392]	; (800f114 <tcp_receive+0xbdc>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	441a      	add	r2, r3
 800ef90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef92:	68db      	ldr	r3, [r3, #12]
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d006      	beq.n	800efa8 <tcp_receive+0xa70>
 800ef9a:	4b60      	ldr	r3, [pc, #384]	; (800f11c <tcp_receive+0xbe4>)
 800ef9c:	f240 52af 	movw	r2, #1455	; 0x5af
 800efa0:	495f      	ldr	r1, [pc, #380]	; (800f120 <tcp_receive+0xbe8>)
 800efa2:	4860      	ldr	r0, [pc, #384]	; (800f124 <tcp_receive+0xbec>)
 800efa4:	f004 ff84 	bl	8013eb0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efac:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800efae:	4b58      	ldr	r3, [pc, #352]	; (800f110 <tcp_receive+0xbd8>)
 800efb0:	881b      	ldrh	r3, [r3, #0]
 800efb2:	461a      	mov	r2, r3
 800efb4:	4b57      	ldr	r3, [pc, #348]	; (800f114 <tcp_receive+0xbdc>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	441a      	add	r2, r3
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800efc2:	4b53      	ldr	r3, [pc, #332]	; (800f110 <tcp_receive+0xbd8>)
 800efc4:	881b      	ldrh	r3, [r3, #0]
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d206      	bcs.n	800efd8 <tcp_receive+0xaa0>
 800efca:	4b54      	ldr	r3, [pc, #336]	; (800f11c <tcp_receive+0xbe4>)
 800efcc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800efd0:	4955      	ldr	r1, [pc, #340]	; (800f128 <tcp_receive+0xbf0>)
 800efd2:	4854      	ldr	r0, [pc, #336]	; (800f124 <tcp_receive+0xbec>)
 800efd4:	f004 ff6c 	bl	8013eb0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800efdc:	4b4c      	ldr	r3, [pc, #304]	; (800f110 <tcp_receive+0xbd8>)
 800efde:	881b      	ldrh	r3, [r3, #0]
 800efe0:	1ad3      	subs	r3, r2, r3
 800efe2:	b29a      	uxth	r2, r3
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800efe8:	6878      	ldr	r0, [r7, #4]
 800efea:	f7fd f809 	bl	800c000 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800efee:	4b4a      	ldr	r3, [pc, #296]	; (800f118 <tcp_receive+0xbe0>)
 800eff0:	685b      	ldr	r3, [r3, #4]
 800eff2:	891b      	ldrh	r3, [r3, #8]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d006      	beq.n	800f006 <tcp_receive+0xace>
          recv_data = inseg.p;
 800eff8:	4b47      	ldr	r3, [pc, #284]	; (800f118 <tcp_receive+0xbe0>)
 800effa:	685b      	ldr	r3, [r3, #4]
 800effc:	4a4b      	ldr	r2, [pc, #300]	; (800f12c <tcp_receive+0xbf4>)
 800effe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f000:	4b45      	ldr	r3, [pc, #276]	; (800f118 <tcp_receive+0xbe0>)
 800f002:	2200      	movs	r2, #0
 800f004:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f006:	4b44      	ldr	r3, [pc, #272]	; (800f118 <tcp_receive+0xbe0>)
 800f008:	68db      	ldr	r3, [r3, #12]
 800f00a:	899b      	ldrh	r3, [r3, #12]
 800f00c:	b29b      	uxth	r3, r3
 800f00e:	4618      	mov	r0, r3
 800f010:	f7fb f8b8 	bl	800a184 <lwip_htons>
 800f014:	4603      	mov	r3, r0
 800f016:	f003 0301 	and.w	r3, r3, #1
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	f000 80b4 	beq.w	800f188 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f020:	4b43      	ldr	r3, [pc, #268]	; (800f130 <tcp_receive+0xbf8>)
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	f043 0320 	orr.w	r3, r3, #32
 800f028:	b2da      	uxtb	r2, r3
 800f02a:	4b41      	ldr	r3, [pc, #260]	; (800f130 <tcp_receive+0xbf8>)
 800f02c:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f02e:	e0ab      	b.n	800f188 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f034:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f03a:	68db      	ldr	r3, [r3, #12]
 800f03c:	685b      	ldr	r3, [r3, #4]
 800f03e:	4a35      	ldr	r2, [pc, #212]	; (800f114 <tcp_receive+0xbdc>)
 800f040:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	891b      	ldrh	r3, [r3, #8]
 800f046:	461c      	mov	r4, r3
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	899b      	ldrh	r3, [r3, #12]
 800f04e:	b29b      	uxth	r3, r3
 800f050:	4618      	mov	r0, r3
 800f052:	f7fb f897 	bl	800a184 <lwip_htons>
 800f056:	4603      	mov	r3, r0
 800f058:	f003 0303 	and.w	r3, r3, #3
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d001      	beq.n	800f064 <tcp_receive+0xb2c>
 800f060:	2301      	movs	r3, #1
 800f062:	e000      	b.n	800f066 <tcp_receive+0xb2e>
 800f064:	2300      	movs	r3, #0
 800f066:	191a      	adds	r2, r3, r4
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f06c:	441a      	add	r2, r3
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f076:	461c      	mov	r4, r3
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	891b      	ldrh	r3, [r3, #8]
 800f07c:	461d      	mov	r5, r3
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	68db      	ldr	r3, [r3, #12]
 800f082:	899b      	ldrh	r3, [r3, #12]
 800f084:	b29b      	uxth	r3, r3
 800f086:	4618      	mov	r0, r3
 800f088:	f7fb f87c 	bl	800a184 <lwip_htons>
 800f08c:	4603      	mov	r3, r0
 800f08e:	f003 0303 	and.w	r3, r3, #3
 800f092:	2b00      	cmp	r3, #0
 800f094:	d001      	beq.n	800f09a <tcp_receive+0xb62>
 800f096:	2301      	movs	r3, #1
 800f098:	e000      	b.n	800f09c <tcp_receive+0xb64>
 800f09a:	2300      	movs	r3, #0
 800f09c:	442b      	add	r3, r5
 800f09e:	429c      	cmp	r4, r3
 800f0a0:	d206      	bcs.n	800f0b0 <tcp_receive+0xb78>
 800f0a2:	4b1e      	ldr	r3, [pc, #120]	; (800f11c <tcp_receive+0xbe4>)
 800f0a4:	f240 52de 	movw	r2, #1502	; 0x5de
 800f0a8:	4922      	ldr	r1, [pc, #136]	; (800f134 <tcp_receive+0xbfc>)
 800f0aa:	481e      	ldr	r0, [pc, #120]	; (800f124 <tcp_receive+0xbec>)
 800f0ac:	f004 ff00 	bl	8013eb0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	891b      	ldrh	r3, [r3, #8]
 800f0b4:	461c      	mov	r4, r3
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	68db      	ldr	r3, [r3, #12]
 800f0ba:	899b      	ldrh	r3, [r3, #12]
 800f0bc:	b29b      	uxth	r3, r3
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7fb f860 	bl	800a184 <lwip_htons>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	f003 0303 	and.w	r3, r3, #3
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d001      	beq.n	800f0d2 <tcp_receive+0xb9a>
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	e000      	b.n	800f0d4 <tcp_receive+0xb9c>
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	1919      	adds	r1, r3, r4
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f0da:	b28b      	uxth	r3, r1
 800f0dc:	1ad3      	subs	r3, r2, r3
 800f0de:	b29a      	uxth	r2, r3
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f7fc ff8b 	bl	800c000 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	891b      	ldrh	r3, [r3, #8]
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d028      	beq.n	800f146 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f0f4:	4b0d      	ldr	r3, [pc, #52]	; (800f12c <tcp_receive+0xbf4>)
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d01d      	beq.n	800f138 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800f0fc:	4b0b      	ldr	r3, [pc, #44]	; (800f12c <tcp_receive+0xbf4>)
 800f0fe:	681a      	ldr	r2, [r3, #0]
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	4619      	mov	r1, r3
 800f106:	4610      	mov	r0, r2
 800f108:	f7fc fb04 	bl	800b714 <pbuf_cat>
 800f10c:	e018      	b.n	800f140 <tcp_receive+0xc08>
 800f10e:	bf00      	nop
 800f110:	20002986 	.word	0x20002986
 800f114:	2000297c 	.word	0x2000297c
 800f118:	2000295c 	.word	0x2000295c
 800f11c:	080162e4 	.word	0x080162e4
 800f120:	080165e8 	.word	0x080165e8
 800f124:	08016328 	.word	0x08016328
 800f128:	08016624 	.word	0x08016624
 800f12c:	2000298c 	.word	0x2000298c
 800f130:	20002989 	.word	0x20002989
 800f134:	08016644 	.word	0x08016644
            } else {
              recv_data = cseg->p;
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	4a71      	ldr	r2, [pc, #452]	; (800f304 <tcp_receive+0xdcc>)
 800f13e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	2200      	movs	r2, #0
 800f144:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	68db      	ldr	r3, [r3, #12]
 800f14a:	899b      	ldrh	r3, [r3, #12]
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	4618      	mov	r0, r3
 800f150:	f7fb f818 	bl	800a184 <lwip_htons>
 800f154:	4603      	mov	r3, r0
 800f156:	f003 0301 	and.w	r3, r3, #1
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d00d      	beq.n	800f17a <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f15e:	4b6a      	ldr	r3, [pc, #424]	; (800f308 <tcp_receive+0xdd0>)
 800f160:	781b      	ldrb	r3, [r3, #0]
 800f162:	f043 0320 	orr.w	r3, r3, #32
 800f166:	b2da      	uxtb	r2, r3
 800f168:	4b67      	ldr	r3, [pc, #412]	; (800f308 <tcp_receive+0xdd0>)
 800f16a:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	7d1b      	ldrb	r3, [r3, #20]
 800f170:	2b04      	cmp	r3, #4
 800f172:	d102      	bne.n	800f17a <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2207      	movs	r2, #7
 800f178:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	681a      	ldr	r2, [r3, #0]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800f182:	68f8      	ldr	r0, [r7, #12]
 800f184:	f7fd fcbd 	bl	800cb02 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d008      	beq.n	800f1a2 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f194:	68db      	ldr	r3, [r3, #12]
 800f196:	685a      	ldr	r2, [r3, #4]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f19c:	429a      	cmp	r2, r3
 800f19e:	f43f af47 	beq.w	800f030 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	7e9b      	ldrb	r3, [r3, #26]
 800f1a6:	f003 0301 	and.w	r3, r3, #1
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d00e      	beq.n	800f1cc <tcp_receive+0xc94>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	7e9b      	ldrb	r3, [r3, #26]
 800f1b2:	f023 0301 	bic.w	r3, r3, #1
 800f1b6:	b2da      	uxtb	r2, r3
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	769a      	strb	r2, [r3, #26]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	7e9b      	ldrb	r3, [r3, #26]
 800f1c0:	f043 0302 	orr.w	r3, r3, #2
 800f1c4:	b2da      	uxtb	r2, r3
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f1ca:	e181      	b.n	800f4d0 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	7e9b      	ldrb	r3, [r3, #26]
 800f1d0:	f043 0301 	orr.w	r3, r3, #1
 800f1d4:	b2da      	uxtb	r2, r3
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f1da:	e179      	b.n	800f4d0 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f001 f8c3 	bl	8010368 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d106      	bne.n	800f1f8 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f1ea:	4848      	ldr	r0, [pc, #288]	; (800f30c <tcp_receive+0xdd4>)
 800f1ec:	f7fd fca1 	bl	800cb32 <tcp_seg_copy>
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800f1f6:	e16b      	b.n	800f4d0 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f200:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f202:	e150      	b.n	800f4a6 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800f204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f206:	68db      	ldr	r3, [r3, #12]
 800f208:	685a      	ldr	r2, [r3, #4]
 800f20a:	4b41      	ldr	r3, [pc, #260]	; (800f310 <tcp_receive+0xdd8>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	429a      	cmp	r2, r3
 800f210:	d11d      	bne.n	800f24e <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f212:	4b3e      	ldr	r3, [pc, #248]	; (800f30c <tcp_receive+0xdd4>)
 800f214:	891a      	ldrh	r2, [r3, #8]
 800f216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f218:	891b      	ldrh	r3, [r3, #8]
 800f21a:	429a      	cmp	r2, r3
 800f21c:	f240 8148 	bls.w	800f4b0 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800f220:	483a      	ldr	r0, [pc, #232]	; (800f30c <tcp_receive+0xdd4>)
 800f222:	f7fd fc86 	bl	800cb32 <tcp_seg_copy>
 800f226:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	f000 8142 	beq.w	800f4b4 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800f230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f232:	2b00      	cmp	r3, #0
 800f234:	d003      	beq.n	800f23e <tcp_receive+0xd06>
                    prev->next = cseg;
 800f236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f238:	68fa      	ldr	r2, [r7, #12]
 800f23a:	601a      	str	r2, [r3, #0]
 800f23c:	e002      	b.n	800f244 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	68fa      	ldr	r2, [r7, #12]
 800f242:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f244:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f246:	68f8      	ldr	r0, [r7, #12]
 800f248:	f7ff f900 	bl	800e44c <tcp_oos_insert_segment>
                }
                break;
 800f24c:	e132      	b.n	800f4b4 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f250:	2b00      	cmp	r3, #0
 800f252:	d117      	bne.n	800f284 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f254:	4b2e      	ldr	r3, [pc, #184]	; (800f310 <tcp_receive+0xdd8>)
 800f256:	681a      	ldr	r2, [r3, #0]
 800f258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25a:	68db      	ldr	r3, [r3, #12]
 800f25c:	685b      	ldr	r3, [r3, #4]
 800f25e:	1ad3      	subs	r3, r2, r3
 800f260:	2b00      	cmp	r3, #0
 800f262:	da57      	bge.n	800f314 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800f264:	4829      	ldr	r0, [pc, #164]	; (800f30c <tcp_receive+0xdd4>)
 800f266:	f7fd fc64 	bl	800cb32 <tcp_seg_copy>
 800f26a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	f000 8122 	beq.w	800f4b8 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	68fa      	ldr	r2, [r7, #12]
 800f278:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800f27a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f27c:	68f8      	ldr	r0, [r7, #12]
 800f27e:	f7ff f8e5 	bl	800e44c <tcp_oos_insert_segment>
                  }
                  break;
 800f282:	e119      	b.n	800f4b8 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800f284:	4b22      	ldr	r3, [pc, #136]	; (800f310 <tcp_receive+0xdd8>)
 800f286:	681a      	ldr	r2, [r3, #0]
 800f288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28a:	68db      	ldr	r3, [r3, #12]
 800f28c:	685b      	ldr	r3, [r3, #4]
 800f28e:	1ad3      	subs	r3, r2, r3
 800f290:	3b01      	subs	r3, #1
 800f292:	2b00      	cmp	r3, #0
 800f294:	db3e      	blt.n	800f314 <tcp_receive+0xddc>
 800f296:	4b1e      	ldr	r3, [pc, #120]	; (800f310 <tcp_receive+0xdd8>)
 800f298:	681a      	ldr	r2, [r3, #0]
 800f29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29c:	68db      	ldr	r3, [r3, #12]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	1ad3      	subs	r3, r2, r3
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	dc35      	bgt.n	800f314 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800f2a8:	4818      	ldr	r0, [pc, #96]	; (800f30c <tcp_receive+0xdd4>)
 800f2aa:	f7fd fc42 	bl	800cb32 <tcp_seg_copy>
 800f2ae:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	f000 8102 	beq.w	800f4bc <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ba:	68db      	ldr	r3, [r3, #12]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2c0:	8912      	ldrh	r2, [r2, #8]
 800f2c2:	441a      	add	r2, r3
 800f2c4:	4b12      	ldr	r3, [pc, #72]	; (800f310 <tcp_receive+0xdd8>)
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	1ad3      	subs	r3, r2, r3
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	dd12      	ble.n	800f2f4 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f2ce:	4b10      	ldr	r3, [pc, #64]	; (800f310 <tcp_receive+0xdd8>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	b29a      	uxth	r2, r3
 800f2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d6:	68db      	ldr	r3, [r3, #12]
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	1ad3      	subs	r3, r2, r3
 800f2de:	b29a      	uxth	r2, r3
 800f2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e6:	685a      	ldr	r2, [r3, #4]
 800f2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ea:	891b      	ldrh	r3, [r3, #8]
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	4610      	mov	r0, r2
 800f2f0:	f7fb ffc4 	bl	800b27c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f6:	68fa      	ldr	r2, [r7, #12]
 800f2f8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f2fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f2fc:	68f8      	ldr	r0, [r7, #12]
 800f2fe:	f7ff f8a5 	bl	800e44c <tcp_oos_insert_segment>
                  }
                  break;
 800f302:	e0db      	b.n	800f4bc <tcp_receive+0xf84>
 800f304:	2000298c 	.word	0x2000298c
 800f308:	20002989 	.word	0x20002989
 800f30c:	2000295c 	.word	0x2000295c
 800f310:	2000297c 	.word	0x2000297c
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	f040 80bf 	bne.w	800f49c <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f31e:	4b7c      	ldr	r3, [pc, #496]	; (800f510 <tcp_receive+0xfd8>)
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	f340 80b6 	ble.w	800f49c <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f332:	68db      	ldr	r3, [r3, #12]
 800f334:	899b      	ldrh	r3, [r3, #12]
 800f336:	b29b      	uxth	r3, r3
 800f338:	4618      	mov	r0, r3
 800f33a:	f7fa ff23 	bl	800a184 <lwip_htons>
 800f33e:	4603      	mov	r3, r0
 800f340:	f003 0301 	and.w	r3, r3, #1
 800f344:	2b00      	cmp	r3, #0
 800f346:	f040 80bb 	bne.w	800f4c0 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f34a:	4872      	ldr	r0, [pc, #456]	; (800f514 <tcp_receive+0xfdc>)
 800f34c:	f7fd fbf1 	bl	800cb32 <tcp_seg_copy>
 800f350:	4602      	mov	r2, r0
 800f352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f354:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	f000 80b2 	beq.w	800f4c4 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	685b      	ldr	r3, [r3, #4]
 800f366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f368:	8912      	ldrh	r2, [r2, #8]
 800f36a:	441a      	add	r2, r3
 800f36c:	4b68      	ldr	r3, [pc, #416]	; (800f510 <tcp_receive+0xfd8>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	1ad3      	subs	r3, r2, r3
 800f372:	2b00      	cmp	r3, #0
 800f374:	dd12      	ble.n	800f39c <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f376:	4b66      	ldr	r3, [pc, #408]	; (800f510 <tcp_receive+0xfd8>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	b29a      	uxth	r2, r3
 800f37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f37e:	68db      	ldr	r3, [r3, #12]
 800f380:	685b      	ldr	r3, [r3, #4]
 800f382:	b29b      	uxth	r3, r3
 800f384:	1ad3      	subs	r3, r2, r3
 800f386:	b29a      	uxth	r2, r3
 800f388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f38e:	685a      	ldr	r2, [r3, #4]
 800f390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f392:	891b      	ldrh	r3, [r3, #8]
 800f394:	4619      	mov	r1, r3
 800f396:	4610      	mov	r0, r2
 800f398:	f7fb ff70 	bl	800b27c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f39c:	4b5e      	ldr	r3, [pc, #376]	; (800f518 <tcp_receive+0xfe0>)
 800f39e:	881b      	ldrh	r3, [r3, #0]
 800f3a0:	461a      	mov	r2, r3
 800f3a2:	4b5b      	ldr	r3, [pc, #364]	; (800f510 <tcp_receive+0xfd8>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	441a      	add	r2, r3
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ac:	6879      	ldr	r1, [r7, #4]
 800f3ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f3b0:	440b      	add	r3, r1
 800f3b2:	1ad3      	subs	r3, r2, r3
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	f340 8085 	ble.w	800f4c4 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f3ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	68db      	ldr	r3, [r3, #12]
 800f3c0:	899b      	ldrh	r3, [r3, #12]
 800f3c2:	b29b      	uxth	r3, r3
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7fa fedd 	bl	800a184 <lwip_htons>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	f003 0301 	and.w	r3, r3, #1
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d01e      	beq.n	800f412 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	68db      	ldr	r3, [r3, #12]
 800f3da:	899b      	ldrh	r3, [r3, #12]
 800f3dc:	b29b      	uxth	r3, r3
 800f3de:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f3e2:	b29c      	uxth	r4, r3
 800f3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	68db      	ldr	r3, [r3, #12]
 800f3ea:	899b      	ldrh	r3, [r3, #12]
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7fa fec8 	bl	800a184 <lwip_htons>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7fa fec1 	bl	800a184 <lwip_htons>
 800f402:	4603      	mov	r3, r0
 800f404:	461a      	mov	r2, r3
 800f406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	68db      	ldr	r3, [r3, #12]
 800f40c:	4322      	orrs	r2, r4
 800f40e:	b292      	uxth	r2, r2
 800f410:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f416:	b29a      	uxth	r2, r3
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f41c:	4413      	add	r3, r2
 800f41e:	b299      	uxth	r1, r3
 800f420:	4b3b      	ldr	r3, [pc, #236]	; (800f510 <tcp_receive+0xfd8>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	b29a      	uxth	r2, r3
 800f426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	1a8a      	subs	r2, r1, r2
 800f42c:	b292      	uxth	r2, r2
 800f42e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	685a      	ldr	r2, [r3, #4]
 800f436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	891b      	ldrh	r3, [r3, #8]
 800f43c:	4619      	mov	r1, r3
 800f43e:	4610      	mov	r0, r2
 800f440:	f7fb ff1c 	bl	800b27c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	891c      	ldrh	r4, [r3, #8]
 800f44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	68db      	ldr	r3, [r3, #12]
 800f450:	899b      	ldrh	r3, [r3, #12]
 800f452:	b29b      	uxth	r3, r3
 800f454:	4618      	mov	r0, r3
 800f456:	f7fa fe95 	bl	800a184 <lwip_htons>
 800f45a:	4603      	mov	r3, r0
 800f45c:	f003 0303 	and.w	r3, r3, #3
 800f460:	2b00      	cmp	r3, #0
 800f462:	d001      	beq.n	800f468 <tcp_receive+0xf30>
 800f464:	2301      	movs	r3, #1
 800f466:	e000      	b.n	800f46a <tcp_receive+0xf32>
 800f468:	2300      	movs	r3, #0
 800f46a:	4423      	add	r3, r4
 800f46c:	b29a      	uxth	r2, r3
 800f46e:	4b2a      	ldr	r3, [pc, #168]	; (800f518 <tcp_receive+0xfe0>)
 800f470:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f472:	4b29      	ldr	r3, [pc, #164]	; (800f518 <tcp_receive+0xfe0>)
 800f474:	881b      	ldrh	r3, [r3, #0]
 800f476:	461a      	mov	r2, r3
 800f478:	4b25      	ldr	r3, [pc, #148]	; (800f510 <tcp_receive+0xfd8>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	441a      	add	r2, r3
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f482:	6879      	ldr	r1, [r7, #4]
 800f484:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f486:	440b      	add	r3, r1
 800f488:	429a      	cmp	r2, r3
 800f48a:	d01b      	beq.n	800f4c4 <tcp_receive+0xf8c>
 800f48c:	4b23      	ldr	r3, [pc, #140]	; (800f51c <tcp_receive+0xfe4>)
 800f48e:	f240 627b 	movw	r2, #1659	; 0x67b
 800f492:	4923      	ldr	r1, [pc, #140]	; (800f520 <tcp_receive+0xfe8>)
 800f494:	4823      	ldr	r0, [pc, #140]	; (800f524 <tcp_receive+0xfec>)
 800f496:	f004 fd0b 	bl	8013eb0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f49a:	e013      	b.n	800f4c4 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800f49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	f47f aeab 	bne.w	800f204 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800f4ae:	e00f      	b.n	800f4d0 <tcp_receive+0xf98>
                break;
 800f4b0:	bf00      	nop
 800f4b2:	e00d      	b.n	800f4d0 <tcp_receive+0xf98>
                break;
 800f4b4:	bf00      	nop
 800f4b6:	e00b      	b.n	800f4d0 <tcp_receive+0xf98>
                  break;
 800f4b8:	bf00      	nop
 800f4ba:	e009      	b.n	800f4d0 <tcp_receive+0xf98>
                  break;
 800f4bc:	bf00      	nop
 800f4be:	e007      	b.n	800f4d0 <tcp_receive+0xf98>
                  break;
 800f4c0:	bf00      	nop
 800f4c2:	e005      	b.n	800f4d0 <tcp_receive+0xf98>
                break;
 800f4c4:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800f4c6:	e003      	b.n	800f4d0 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f000 ff4d 	bl	8010368 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f4ce:	e01a      	b.n	800f506 <tcp_receive+0xfce>
 800f4d0:	e019      	b.n	800f506 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f4d2:	4b0f      	ldr	r3, [pc, #60]	; (800f510 <tcp_receive+0xfd8>)
 800f4d4:	681a      	ldr	r2, [r3, #0]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4da:	1ad3      	subs	r3, r2, r3
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	db0a      	blt.n	800f4f6 <tcp_receive+0xfbe>
 800f4e0:	4b0b      	ldr	r3, [pc, #44]	; (800f510 <tcp_receive+0xfd8>)
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e8:	6879      	ldr	r1, [r7, #4]
 800f4ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f4ec:	440b      	add	r3, r1
 800f4ee:	1ad3      	subs	r3, r2, r3
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	dd07      	ble.n	800f506 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	7e9b      	ldrb	r3, [r3, #26]
 800f4fa:	f043 0302 	orr.w	r3, r3, #2
 800f4fe:	b2da      	uxtb	r2, r3
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800f504:	e7ff      	b.n	800f506 <tcp_receive+0xfce>
 800f506:	bf00      	nop
 800f508:	3734      	adds	r7, #52	; 0x34
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f50e:	bf00      	nop
 800f510:	2000297c 	.word	0x2000297c
 800f514:	2000295c 	.word	0x2000295c
 800f518:	20002986 	.word	0x20002986
 800f51c:	080162e4 	.word	0x080162e4
 800f520:	080165b0 	.word	0x080165b0
 800f524:	08016328 	.word	0x08016328

0800f528 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800f528:	b480      	push	{r7}
 800f52a:	b083      	sub	sp, #12
 800f52c:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800f52e:	4b17      	ldr	r3, [pc, #92]	; (800f58c <tcp_getoptbyte+0x64>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d005      	beq.n	800f542 <tcp_getoptbyte+0x1a>
 800f536:	4b16      	ldr	r3, [pc, #88]	; (800f590 <tcp_getoptbyte+0x68>)
 800f538:	881a      	ldrh	r2, [r3, #0]
 800f53a:	4b16      	ldr	r3, [pc, #88]	; (800f594 <tcp_getoptbyte+0x6c>)
 800f53c:	881b      	ldrh	r3, [r3, #0]
 800f53e:	429a      	cmp	r2, r3
 800f540:	d20e      	bcs.n	800f560 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800f542:	4b15      	ldr	r3, [pc, #84]	; (800f598 <tcp_getoptbyte+0x70>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	3314      	adds	r3, #20
 800f548:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800f54a:	4b11      	ldr	r3, [pc, #68]	; (800f590 <tcp_getoptbyte+0x68>)
 800f54c:	881b      	ldrh	r3, [r3, #0]
 800f54e:	1c5a      	adds	r2, r3, #1
 800f550:	b291      	uxth	r1, r2
 800f552:	4a0f      	ldr	r2, [pc, #60]	; (800f590 <tcp_getoptbyte+0x68>)
 800f554:	8011      	strh	r1, [r2, #0]
 800f556:	461a      	mov	r2, r3
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	4413      	add	r3, r2
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	e010      	b.n	800f582 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800f560:	4b0b      	ldr	r3, [pc, #44]	; (800f590 <tcp_getoptbyte+0x68>)
 800f562:	881b      	ldrh	r3, [r3, #0]
 800f564:	1c5a      	adds	r2, r3, #1
 800f566:	b291      	uxth	r1, r2
 800f568:	4a09      	ldr	r2, [pc, #36]	; (800f590 <tcp_getoptbyte+0x68>)
 800f56a:	8011      	strh	r1, [r2, #0]
 800f56c:	b2da      	uxtb	r2, r3
 800f56e:	4b09      	ldr	r3, [pc, #36]	; (800f594 <tcp_getoptbyte+0x6c>)
 800f570:	881b      	ldrh	r3, [r3, #0]
 800f572:	b2db      	uxtb	r3, r3
 800f574:	1ad3      	subs	r3, r2, r3
 800f576:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800f578:	4b04      	ldr	r3, [pc, #16]	; (800f58c <tcp_getoptbyte+0x64>)
 800f57a:	681a      	ldr	r2, [r3, #0]
 800f57c:	79fb      	ldrb	r3, [r7, #7]
 800f57e:	4413      	add	r3, r2
 800f580:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f582:	4618      	mov	r0, r3
 800f584:	370c      	adds	r7, #12
 800f586:	46bd      	mov	sp, r7
 800f588:	bc80      	pop	{r7}
 800f58a:	4770      	bx	lr
 800f58c:	20002974 	.word	0x20002974
 800f590:	20002978 	.word	0x20002978
 800f594:	20002972 	.word	0x20002972
 800f598:	2000296c 	.word	0x2000296c

0800f59c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b084      	sub	sp, #16
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f5a4:	4b2d      	ldr	r3, [pc, #180]	; (800f65c <tcp_parseopt+0xc0>)
 800f5a6:	881b      	ldrh	r3, [r3, #0]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d053      	beq.n	800f654 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f5ac:	4b2c      	ldr	r3, [pc, #176]	; (800f660 <tcp_parseopt+0xc4>)
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	801a      	strh	r2, [r3, #0]
 800f5b2:	e043      	b.n	800f63c <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 800f5b4:	f7ff ffb8 	bl	800f528 <tcp_getoptbyte>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f5bc:	7bfb      	ldrb	r3, [r7, #15]
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	d03c      	beq.n	800f63c <tcp_parseopt+0xa0>
 800f5c2:	2b02      	cmp	r3, #2
 800f5c4:	d002      	beq.n	800f5cc <tcp_parseopt+0x30>
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d03f      	beq.n	800f64a <tcp_parseopt+0xae>
 800f5ca:	e026      	b.n	800f61a <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f5cc:	f7ff ffac 	bl	800f528 <tcp_getoptbyte>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	2b04      	cmp	r3, #4
 800f5d4:	d13b      	bne.n	800f64e <tcp_parseopt+0xb2>
 800f5d6:	4b22      	ldr	r3, [pc, #136]	; (800f660 <tcp_parseopt+0xc4>)
 800f5d8:	881b      	ldrh	r3, [r3, #0]
 800f5da:	3302      	adds	r3, #2
 800f5dc:	4a1f      	ldr	r2, [pc, #124]	; (800f65c <tcp_parseopt+0xc0>)
 800f5de:	8812      	ldrh	r2, [r2, #0]
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	dc34      	bgt.n	800f64e <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800f5e4:	f7ff ffa0 	bl	800f528 <tcp_getoptbyte>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	b29b      	uxth	r3, r3
 800f5ec:	021b      	lsls	r3, r3, #8
 800f5ee:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800f5f0:	f7ff ff9a 	bl	800f528 <tcp_getoptbyte>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	b29a      	uxth	r2, r3
 800f5f8:	89bb      	ldrh	r3, [r7, #12]
 800f5fa:	4313      	orrs	r3, r2
 800f5fc:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f5fe:	89bb      	ldrh	r3, [r7, #12]
 800f600:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f604:	d804      	bhi.n	800f610 <tcp_parseopt+0x74>
 800f606:	89bb      	ldrh	r3, [r7, #12]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d001      	beq.n	800f610 <tcp_parseopt+0x74>
 800f60c:	89ba      	ldrh	r2, [r7, #12]
 800f60e:	e001      	b.n	800f614 <tcp_parseopt+0x78>
 800f610:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800f618:	e010      	b.n	800f63c <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800f61a:	f7ff ff85 	bl	800f528 <tcp_getoptbyte>
 800f61e:	4603      	mov	r3, r0
 800f620:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800f622:	7afb      	ldrb	r3, [r7, #11]
 800f624:	2b01      	cmp	r3, #1
 800f626:	d914      	bls.n	800f652 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800f628:	7afb      	ldrb	r3, [r7, #11]
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	4b0c      	ldr	r3, [pc, #48]	; (800f660 <tcp_parseopt+0xc4>)
 800f62e:	881b      	ldrh	r3, [r3, #0]
 800f630:	4413      	add	r3, r2
 800f632:	b29b      	uxth	r3, r3
 800f634:	3b02      	subs	r3, #2
 800f636:	b29a      	uxth	r2, r3
 800f638:	4b09      	ldr	r3, [pc, #36]	; (800f660 <tcp_parseopt+0xc4>)
 800f63a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f63c:	4b08      	ldr	r3, [pc, #32]	; (800f660 <tcp_parseopt+0xc4>)
 800f63e:	881a      	ldrh	r2, [r3, #0]
 800f640:	4b06      	ldr	r3, [pc, #24]	; (800f65c <tcp_parseopt+0xc0>)
 800f642:	881b      	ldrh	r3, [r3, #0]
 800f644:	429a      	cmp	r2, r3
 800f646:	d3b5      	bcc.n	800f5b4 <tcp_parseopt+0x18>
 800f648:	e004      	b.n	800f654 <tcp_parseopt+0xb8>
        return;
 800f64a:	bf00      	nop
 800f64c:	e002      	b.n	800f654 <tcp_parseopt+0xb8>
          return;
 800f64e:	bf00      	nop
 800f650:	e000      	b.n	800f654 <tcp_parseopt+0xb8>
          return;
 800f652:	bf00      	nop
      }
    }
  }
}
 800f654:	3710      	adds	r7, #16
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}
 800f65a:	bf00      	nop
 800f65c:	20002970 	.word	0x20002970
 800f660:	20002978 	.word	0x20002978

0800f664 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f664:	b480      	push	{r7}
 800f666:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f668:	4b05      	ldr	r3, [pc, #20]	; (800f680 <tcp_trigger_input_pcb_close+0x1c>)
 800f66a:	781b      	ldrb	r3, [r3, #0]
 800f66c:	f043 0310 	orr.w	r3, r3, #16
 800f670:	b2da      	uxtb	r2, r3
 800f672:	4b03      	ldr	r3, [pc, #12]	; (800f680 <tcp_trigger_input_pcb_close+0x1c>)
 800f674:	701a      	strb	r2, [r3, #0]
}
 800f676:	bf00      	nop
 800f678:	46bd      	mov	sp, r7
 800f67a:	bc80      	pop	{r7}
 800f67c:	4770      	bx	lr
 800f67e:	bf00      	nop
 800f680:	20002989 	.word	0x20002989

0800f684 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b086      	sub	sp, #24
 800f688:	af00      	add	r7, sp, #0
 800f68a:	60f8      	str	r0, [r7, #12]
 800f68c:	607b      	str	r3, [r7, #4]
 800f68e:	460b      	mov	r3, r1
 800f690:	817b      	strh	r3, [r7, #10]
 800f692:	4613      	mov	r3, r2
 800f694:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f696:	897a      	ldrh	r2, [r7, #10]
 800f698:	893b      	ldrh	r3, [r7, #8]
 800f69a:	4413      	add	r3, r2
 800f69c:	b29b      	uxth	r3, r3
 800f69e:	3314      	adds	r3, #20
 800f6a0:	b29b      	uxth	r3, r3
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	2001      	movs	r0, #1
 800f6a8:	f7fb fbea 	bl	800ae80 <pbuf_alloc>
 800f6ac:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d057      	beq.n	800f764 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	895b      	ldrh	r3, [r3, #10]
 800f6b8:	461a      	mov	r2, r3
 800f6ba:	897b      	ldrh	r3, [r7, #10]
 800f6bc:	3314      	adds	r3, #20
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	da05      	bge.n	800f6ce <tcp_output_alloc_header+0x4a>
 800f6c2:	4b2b      	ldr	r3, [pc, #172]	; (800f770 <tcp_output_alloc_header+0xec>)
 800f6c4:	2273      	movs	r2, #115	; 0x73
 800f6c6:	492b      	ldr	r1, [pc, #172]	; (800f774 <tcp_output_alloc_header+0xf0>)
 800f6c8:	482b      	ldr	r0, [pc, #172]	; (800f778 <tcp_output_alloc_header+0xf4>)
 800f6ca:	f004 fbf1 	bl	8013eb0 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	685b      	ldr	r3, [r3, #4]
 800f6d2:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	8adb      	ldrh	r3, [r3, #22]
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7fa fd53 	bl	800a184 <lwip_htons>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	8b1b      	ldrh	r3, [r3, #24]
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7fa fd4a 	bl	800a184 <lwip_htons>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	693b      	ldr	r3, [r7, #16]
 800f6f6:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	687a      	ldr	r2, [r7, #4]
 800f6fc:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f702:	4618      	mov	r0, r3
 800f704:	f7fa fd4b 	bl	800a19e <lwip_htonl>
 800f708:	4602      	mov	r2, r0
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800f70e:	897b      	ldrh	r3, [r7, #10]
 800f710:	089b      	lsrs	r3, r3, #2
 800f712:	b29b      	uxth	r3, r3
 800f714:	3305      	adds	r3, #5
 800f716:	b29b      	uxth	r3, r3
 800f718:	031b      	lsls	r3, r3, #12
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	f043 0310 	orr.w	r3, r3, #16
 800f720:	b29b      	uxth	r3, r3
 800f722:	4618      	mov	r0, r3
 800f724:	f7fa fd2e 	bl	800a184 <lwip_htons>
 800f728:	4603      	mov	r3, r0
 800f72a:	461a      	mov	r2, r3
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f734:	4618      	mov	r0, r3
 800f736:	f7fa fd25 	bl	800a184 <lwip_htons>
 800f73a:	4603      	mov	r3, r0
 800f73c:	461a      	mov	r2, r3
 800f73e:	693b      	ldr	r3, [r7, #16]
 800f740:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f742:	693b      	ldr	r3, [r7, #16]
 800f744:	2200      	movs	r2, #0
 800f746:	741a      	strb	r2, [r3, #16]
 800f748:	2200      	movs	r2, #0
 800f74a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f74c:	693b      	ldr	r3, [r7, #16]
 800f74e:	2200      	movs	r2, #0
 800f750:	749a      	strb	r2, [r3, #18]
 800f752:	2200      	movs	r2, #0
 800f754:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f75a:	68fa      	ldr	r2, [r7, #12]
 800f75c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f75e:	441a      	add	r2, r3
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f764:	697b      	ldr	r3, [r7, #20]
}
 800f766:	4618      	mov	r0, r3
 800f768:	3718      	adds	r7, #24
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
 800f76e:	bf00      	nop
 800f770:	0801666c 	.word	0x0801666c
 800f774:	080166a0 	.word	0x080166a0
 800f778:	080166d0 	.word	0x080166d0

0800f77c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f77c:	b590      	push	{r4, r7, lr}
 800f77e:	b085      	sub	sp, #20
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d02d      	beq.n	800f7e8 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f790:	60fb      	str	r3, [r7, #12]
 800f792:	e002      	b.n	800f79a <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d1f8      	bne.n	800f794 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	899b      	ldrh	r3, [r3, #12]
 800f7a8:	b29b      	uxth	r3, r3
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7fa fcea 	bl	800a184 <lwip_htons>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	f003 0307 	and.w	r3, r3, #7
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d116      	bne.n	800f7e8 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	899b      	ldrh	r3, [r3, #12]
 800f7c0:	b29c      	uxth	r4, r3
 800f7c2:	2001      	movs	r0, #1
 800f7c4:	f7fa fcde 	bl	800a184 <lwip_htons>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	4322      	orrs	r2, r4
 800f7d2:	b292      	uxth	r2, r2
 800f7d4:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	7e9b      	ldrb	r3, [r3, #26]
 800f7da:	f043 0320 	orr.w	r3, r3, #32
 800f7de:	b2da      	uxtb	r2, r3
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	e004      	b.n	800f7f2 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800f7e8:	2101      	movs	r1, #1
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f000 fcc0 	bl	8010170 <tcp_enqueue_flags>
 800f7f0:	4603      	mov	r3, r0
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3714      	adds	r7, #20
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd90      	pop	{r4, r7, pc}
	...

0800f7fc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800f7fc:	b590      	push	{r4, r7, lr}
 800f7fe:	b087      	sub	sp, #28
 800f800:	af00      	add	r7, sp, #0
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	603b      	str	r3, [r7, #0]
 800f808:	4613      	mov	r3, r2
 800f80a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f80c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f810:	009b      	lsls	r3, r3, #2
 800f812:	b2db      	uxtb	r3, r3
 800f814:	f003 0304 	and.w	r3, r3, #4
 800f818:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f81a:	2003      	movs	r0, #3
 800f81c:	f7fb f89c 	bl	800a958 <memp_malloc>
 800f820:	6138      	str	r0, [r7, #16]
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d104      	bne.n	800f832 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f828:	68b8      	ldr	r0, [r7, #8]
 800f82a:	f7fb fe9b 	bl	800b564 <pbuf_free>
    return NULL;
 800f82e:	2300      	movs	r3, #0
 800f830:	e061      	b.n	800f8f6 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800f832:	693b      	ldr	r3, [r7, #16]
 800f834:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f838:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	2200      	movs	r2, #0
 800f83e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	68ba      	ldr	r2, [r7, #8]
 800f844:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	891a      	ldrh	r2, [r3, #8]
 800f84a:	7dfb      	ldrb	r3, [r7, #23]
 800f84c:	b29b      	uxth	r3, r3
 800f84e:	429a      	cmp	r2, r3
 800f850:	d205      	bcs.n	800f85e <tcp_create_segment+0x62>
 800f852:	4b2b      	ldr	r3, [pc, #172]	; (800f900 <tcp_create_segment+0x104>)
 800f854:	22ba      	movs	r2, #186	; 0xba
 800f856:	492b      	ldr	r1, [pc, #172]	; (800f904 <tcp_create_segment+0x108>)
 800f858:	482b      	ldr	r0, [pc, #172]	; (800f908 <tcp_create_segment+0x10c>)
 800f85a:	f004 fb29 	bl	8013eb0 <iprintf>
  seg->len = p->tot_len - optlen;
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	891a      	ldrh	r2, [r3, #8]
 800f862:	7dfb      	ldrb	r3, [r7, #23]
 800f864:	b29b      	uxth	r3, r3
 800f866:	1ad3      	subs	r3, r2, r3
 800f868:	b29a      	uxth	r2, r3
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800f86e:	2114      	movs	r1, #20
 800f870:	68b8      	ldr	r0, [r7, #8]
 800f872:	f7fb fe53 	bl	800b51c <pbuf_header>
 800f876:	4603      	mov	r3, r0
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d004      	beq.n	800f886 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f87c:	6938      	ldr	r0, [r7, #16]
 800f87e:	f7fd f940 	bl	800cb02 <tcp_seg_free>
    return NULL;
 800f882:	2300      	movs	r3, #0
 800f884:	e037      	b.n	800f8f6 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	685b      	ldr	r3, [r3, #4]
 800f88a:	685a      	ldr	r2, [r3, #4]
 800f88c:	693b      	ldr	r3, [r7, #16]
 800f88e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	8ada      	ldrh	r2, [r3, #22]
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	68dc      	ldr	r4, [r3, #12]
 800f898:	4610      	mov	r0, r2
 800f89a:	f7fa fc73 	bl	800a184 <lwip_htons>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	8b1a      	ldrh	r2, [r3, #24]
 800f8a6:	693b      	ldr	r3, [r7, #16]
 800f8a8:	68dc      	ldr	r4, [r3, #12]
 800f8aa:	4610      	mov	r0, r2
 800f8ac:	f7fa fc6a 	bl	800a184 <lwip_htons>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f8b4:	693b      	ldr	r3, [r7, #16]
 800f8b6:	68dc      	ldr	r4, [r3, #12]
 800f8b8:	6838      	ldr	r0, [r7, #0]
 800f8ba:	f7fa fc70 	bl	800a19e <lwip_htonl>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800f8c2:	7dfb      	ldrb	r3, [r7, #23]
 800f8c4:	089b      	lsrs	r3, r3, #2
 800f8c6:	b2db      	uxtb	r3, r3
 800f8c8:	b29b      	uxth	r3, r3
 800f8ca:	3305      	adds	r3, #5
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	031b      	lsls	r3, r3, #12
 800f8d0:	b29a      	uxth	r2, r3
 800f8d2:	79fb      	ldrb	r3, [r7, #7]
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	4313      	orrs	r3, r2
 800f8d8:	b29a      	uxth	r2, r3
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	68dc      	ldr	r4, [r3, #12]
 800f8de:	4610      	mov	r0, r2
 800f8e0:	f7fa fc50 	bl	800a184 <lwip_htons>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f8e8:	693b      	ldr	r3, [r7, #16]
 800f8ea:	68db      	ldr	r3, [r3, #12]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	749a      	strb	r2, [r3, #18]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	74da      	strb	r2, [r3, #19]
  return seg;
 800f8f4:	693b      	ldr	r3, [r7, #16]
}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	371c      	adds	r7, #28
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd90      	pop	{r4, r7, pc}
 800f8fe:	bf00      	nop
 800f900:	0801666c 	.word	0x0801666c
 800f904:	080166f8 	.word	0x080166f8
 800f908:	080166d0 	.word	0x080166d0

0800f90c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b086      	sub	sp, #24
 800f910:	af00      	add	r7, sp, #0
 800f912:	607b      	str	r3, [r7, #4]
 800f914:	4603      	mov	r3, r0
 800f916:	73fb      	strb	r3, [r7, #15]
 800f918:	460b      	mov	r3, r1
 800f91a:	81bb      	strh	r3, [r7, #12]
 800f91c:	4613      	mov	r3, r2
 800f91e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800f920:	89bb      	ldrh	r3, [r7, #12]
 800f922:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800f924:	89ba      	ldrh	r2, [r7, #12]
 800f926:	897b      	ldrh	r3, [r7, #10]
 800f928:	429a      	cmp	r2, r3
 800f92a:	d221      	bcs.n	800f970 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f92c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f930:	f003 0302 	and.w	r3, r3, #2
 800f934:	2b00      	cmp	r3, #0
 800f936:	d111      	bne.n	800f95c <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 800f938:	6a3b      	ldr	r3, [r7, #32]
 800f93a:	7e9b      	ldrb	r3, [r3, #26]
 800f93c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800f940:	2b00      	cmp	r3, #0
 800f942:	d115      	bne.n	800f970 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 800f944:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d007      	beq.n	800f95c <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 800f94c:	6a3b      	ldr	r3, [r7, #32]
 800f94e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 800f950:	2b00      	cmp	r3, #0
 800f952:	d103      	bne.n	800f95c <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 800f954:	6a3b      	ldr	r3, [r7, #32]
 800f956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d009      	beq.n	800f970 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800f95c:	89bb      	ldrh	r3, [r7, #12]
 800f95e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800f962:	f023 0203 	bic.w	r2, r3, #3
 800f966:	897b      	ldrh	r3, [r7, #10]
 800f968:	4293      	cmp	r3, r2
 800f96a:	bf28      	it	cs
 800f96c:	4613      	movcs	r3, r2
 800f96e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800f970:	8af9      	ldrh	r1, [r7, #22]
 800f972:	7bfb      	ldrb	r3, [r7, #15]
 800f974:	2200      	movs	r2, #0
 800f976:	4618      	mov	r0, r3
 800f978:	f7fb fa82 	bl	800ae80 <pbuf_alloc>
 800f97c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f97e:	693b      	ldr	r3, [r7, #16]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d101      	bne.n	800f988 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 800f984:	2300      	movs	r3, #0
 800f986:	e019      	b.n	800f9bc <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d006      	beq.n	800f99e <tcp_pbuf_prealloc+0x92>
 800f990:	4b0c      	ldr	r3, [pc, #48]	; (800f9c4 <tcp_pbuf_prealloc+0xb8>)
 800f992:	f44f 7288 	mov.w	r2, #272	; 0x110
 800f996:	490c      	ldr	r1, [pc, #48]	; (800f9c8 <tcp_pbuf_prealloc+0xbc>)
 800f998:	480c      	ldr	r0, [pc, #48]	; (800f9cc <tcp_pbuf_prealloc+0xc0>)
 800f99a:	f004 fa89 	bl	8013eb0 <iprintf>
  *oversize = p->len - length;
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	895a      	ldrh	r2, [r3, #10]
 800f9a2:	89bb      	ldrh	r3, [r7, #12]
 800f9a4:	1ad3      	subs	r3, r2, r3
 800f9a6:	b29a      	uxth	r2, r3
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800f9ac:	693b      	ldr	r3, [r7, #16]
 800f9ae:	89ba      	ldrh	r2, [r7, #12]
 800f9b0:	811a      	strh	r2, [r3, #8]
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	891a      	ldrh	r2, [r3, #8]
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	815a      	strh	r2, [r3, #10]
  return p;
 800f9ba:	693b      	ldr	r3, [r7, #16]
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3718      	adds	r7, #24
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	0801666c 	.word	0x0801666c
 800f9c8:	08016710 	.word	0x08016710
 800f9cc:	080166d0 	.word	0x080166d0

0800f9d0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b082      	sub	sp, #8
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
 800f9d8:	460b      	mov	r3, r1
 800f9da:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	7d1b      	ldrb	r3, [r3, #20]
 800f9e0:	2b04      	cmp	r3, #4
 800f9e2:	d00e      	beq.n	800fa02 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800f9e8:	2b07      	cmp	r3, #7
 800f9ea:	d00a      	beq.n	800fa02 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800f9f0:	2b02      	cmp	r3, #2
 800f9f2:	d006      	beq.n	800fa02 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800f9f8:	2b03      	cmp	r3, #3
 800f9fa:	d002      	beq.n	800fa02 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800f9fc:	f06f 030a 	mvn.w	r3, #10
 800fa00:	e04f      	b.n	800faa2 <tcp_write_checks+0xd2>
  } else if (len == 0) {
 800fa02:	887b      	ldrh	r3, [r7, #2]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d101      	bne.n	800fa0c <tcp_write_checks+0x3c>
    return ERR_OK;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	e04a      	b.n	800faa2 <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fa12:	887a      	ldrh	r2, [r7, #2]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d909      	bls.n	800fa2c <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	7e9b      	ldrb	r3, [r3, #26]
 800fa1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fa20:	b2da      	uxtb	r2, r3
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800fa26:	f04f 33ff 	mov.w	r3, #4294967295
 800fa2a:	e03a      	b.n	800faa2 <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fa32:	2b08      	cmp	r3, #8
 800fa34:	d806      	bhi.n	800fa44 <tcp_write_checks+0x74>
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fa3c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d909      	bls.n	800fa58 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	7e9b      	ldrb	r3, [r3, #26]
 800fa48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fa4c:	b2da      	uxtb	r2, r3
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800fa52:	f04f 33ff 	mov.w	r3, #4294967295
 800fa56:	e024      	b.n	800faa2 <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d00f      	beq.n	800fa82 <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d11a      	bne.n	800faa0 <tcp_write_checks+0xd0>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d116      	bne.n	800faa0 <tcp_write_checks+0xd0>
 800fa72:	4b0e      	ldr	r3, [pc, #56]	; (800faac <tcp_write_checks+0xdc>)
 800fa74:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800fa78:	490d      	ldr	r1, [pc, #52]	; (800fab0 <tcp_write_checks+0xe0>)
 800fa7a:	480e      	ldr	r0, [pc, #56]	; (800fab4 <tcp_write_checks+0xe4>)
 800fa7c:	f004 fa18 	bl	8013eb0 <iprintf>
 800fa80:	e00e      	b.n	800faa0 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d103      	bne.n	800fa92 <tcp_write_checks+0xc2>
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d006      	beq.n	800faa0 <tcp_write_checks+0xd0>
 800fa92:	4b06      	ldr	r3, [pc, #24]	; (800faac <tcp_write_checks+0xdc>)
 800fa94:	f240 1259 	movw	r2, #345	; 0x159
 800fa98:	4907      	ldr	r1, [pc, #28]	; (800fab8 <tcp_write_checks+0xe8>)
 800fa9a:	4806      	ldr	r0, [pc, #24]	; (800fab4 <tcp_write_checks+0xe4>)
 800fa9c:	f004 fa08 	bl	8013eb0 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800faa0:	2300      	movs	r3, #0
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3708      	adds	r7, #8
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}
 800faaa:	bf00      	nop
 800faac:	0801666c 	.word	0x0801666c
 800fab0:	08016724 	.word	0x08016724
 800fab4:	080166d0 	.word	0x080166d0
 800fab8:	08016760 	.word	0x08016760

0800fabc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800fabc:	b590      	push	{r4, r7, lr}
 800fabe:	b09b      	sub	sp, #108	; 0x6c
 800fac0:	af04      	add	r7, sp, #16
 800fac2:	60f8      	str	r0, [r7, #12]
 800fac4:	60b9      	str	r1, [r7, #8]
 800fac6:	4611      	mov	r1, r2
 800fac8:	461a      	mov	r2, r3
 800faca:	460b      	mov	r3, r1
 800facc:	80fb      	strh	r3, [r7, #6]
 800face:	4613      	mov	r3, r2
 800fad0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800fad2:	2300      	movs	r3, #0
 800fad4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800fad6:	2300      	movs	r3, #0
 800fad8:	653b      	str	r3, [r7, #80]	; 0x50
 800fada:	2300      	movs	r3, #0
 800fadc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fade:	2300      	movs	r3, #0
 800fae0:	64bb      	str	r3, [r7, #72]	; 0x48
 800fae2:	2300      	movs	r3, #0
 800fae4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800fae6:	2300      	movs	r3, #0
 800fae8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 800faec:	2300      	movs	r3, #0
 800faee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 800faf2:	2300      	movs	r3, #0
 800faf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800faf8:	2300      	movs	r3, #0
 800fafa:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800fafc:	2300      	movs	r3, #0
 800fafe:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800fb00:	2300      	movs	r3, #0
 800fb02:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fb0a:	085b      	lsrs	r3, r3, #1
 800fb0c:	b29a      	uxth	r2, r3
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb12:	4293      	cmp	r3, r2
 800fb14:	bf28      	it	cs
 800fb16:	4613      	movcs	r3, r2
 800fb18:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800fb1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d102      	bne.n	800fb26 <tcp_write+0x6a>
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fb24:	e000      	b.n	800fb28 <tcp_write+0x6c>
 800fb26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb28:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d109      	bne.n	800fb44 <tcp_write+0x88>
 800fb30:	4b92      	ldr	r3, [pc, #584]	; (800fd7c <tcp_write+0x2c0>)
 800fb32:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800fb36:	4992      	ldr	r1, [pc, #584]	; (800fd80 <tcp_write+0x2c4>)
 800fb38:	4892      	ldr	r0, [pc, #584]	; (800fd84 <tcp_write+0x2c8>)
 800fb3a:	f004 f9b9 	bl	8013eb0 <iprintf>
 800fb3e:	f06f 030f 	mvn.w	r3, #15
 800fb42:	e30a      	b.n	801015a <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800fb44:	88fb      	ldrh	r3, [r7, #6]
 800fb46:	4619      	mov	r1, r3
 800fb48:	68f8      	ldr	r0, [r7, #12]
 800fb4a:	f7ff ff41 	bl	800f9d0 <tcp_write_checks>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800fb54:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d002      	beq.n	800fb62 <tcp_write+0xa6>
    return err;
 800fb5c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800fb60:	e2fb      	b.n	801015a <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fb68:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	f000 80f5 	beq.w	800fd60 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fb7a:	653b      	str	r3, [r7, #80]	; 0x50
 800fb7c:	e002      	b.n	800fb84 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 800fb7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fb84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d1f8      	bne.n	800fb7e <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 800fb8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb8e:	7a9b      	ldrb	r3, [r3, #10]
 800fb90:	009b      	lsls	r3, r3, #2
 800fb92:	b29b      	uxth	r3, r3
 800fb94:	f003 0304 	and.w	r3, r3, #4
 800fb98:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800fb9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fb9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb9e:	891b      	ldrh	r3, [r3, #8]
 800fba0:	4619      	mov	r1, r3
 800fba2:	8c3b      	ldrh	r3, [r7, #32]
 800fba4:	440b      	add	r3, r1
 800fba6:	429a      	cmp	r2, r3
 800fba8:	da06      	bge.n	800fbb8 <tcp_write+0xfc>
 800fbaa:	4b74      	ldr	r3, [pc, #464]	; (800fd7c <tcp_write+0x2c0>)
 800fbac:	f240 12c7 	movw	r2, #455	; 0x1c7
 800fbb0:	4975      	ldr	r1, [pc, #468]	; (800fd88 <tcp_write+0x2cc>)
 800fbb2:	4874      	ldr	r0, [pc, #464]	; (800fd84 <tcp_write+0x2c8>)
 800fbb4:	f004 f97c 	bl	8013eb0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800fbb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbba:	891a      	ldrh	r2, [r3, #8]
 800fbbc:	8c3b      	ldrh	r3, [r7, #32]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	b29b      	uxth	r3, r3
 800fbc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fbc4:	1ad3      	subs	r3, r2, r3
 800fbc6:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fbce:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800fbd0:	8a7b      	ldrh	r3, [r7, #18]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d027      	beq.n	800fc26 <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800fbd6:	8a7b      	ldrh	r3, [r7, #18]
 800fbd8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	d206      	bcs.n	800fbec <tcp_write+0x130>
 800fbde:	4b67      	ldr	r3, [pc, #412]	; (800fd7c <tcp_write+0x2c0>)
 800fbe0:	f240 12d9 	movw	r2, #473	; 0x1d9
 800fbe4:	4969      	ldr	r1, [pc, #420]	; (800fd8c <tcp_write+0x2d0>)
 800fbe6:	4867      	ldr	r0, [pc, #412]	; (800fd84 <tcp_write+0x2c8>)
 800fbe8:	f004 f962 	bl	8013eb0 <iprintf>
      seg = last_unsent;
 800fbec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbee:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800fbf0:	8a7b      	ldrh	r3, [r7, #18]
 800fbf2:	88fa      	ldrh	r2, [r7, #6]
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d901      	bls.n	800fbfc <tcp_write+0x140>
 800fbf8:	8a7b      	ldrh	r3, [r7, #18]
 800fbfa:	e000      	b.n	800fbfe <tcp_write+0x142>
 800fbfc:	88fb      	ldrh	r3, [r7, #6]
 800fbfe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fc00:	4293      	cmp	r3, r2
 800fc02:	bfa8      	it	ge
 800fc04:	4613      	movge	r3, r2
 800fc06:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800fc08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fc0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fc0e:	4413      	add	r3, r2
 800fc10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800fc14:	8a7a      	ldrh	r2, [r7, #18]
 800fc16:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fc18:	1ad3      	subs	r3, r2, r3
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800fc1e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fc20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fc22:	1ad3      	subs	r3, r2, r3
 800fc24:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800fc26:	8a7b      	ldrh	r3, [r7, #18]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d00b      	beq.n	800fc44 <tcp_write+0x188>
 800fc2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fc30:	88fb      	ldrh	r3, [r7, #6]
 800fc32:	429a      	cmp	r2, r3
 800fc34:	d006      	beq.n	800fc44 <tcp_write+0x188>
 800fc36:	4b51      	ldr	r3, [pc, #324]	; (800fd7c <tcp_write+0x2c0>)
 800fc38:	f240 12e1 	movw	r2, #481	; 0x1e1
 800fc3c:	4954      	ldr	r1, [pc, #336]	; (800fd90 <tcp_write+0x2d4>)
 800fc3e:	4851      	ldr	r0, [pc, #324]	; (800fd84 <tcp_write+0x2c8>)
 800fc40:	f004 f936 	bl	8013eb0 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800fc44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fc48:	88fb      	ldrh	r3, [r7, #6]
 800fc4a:	429a      	cmp	r2, r3
 800fc4c:	f080 8168 	bcs.w	800ff20 <tcp_write+0x464>
 800fc50:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	f000 8164 	beq.w	800ff20 <tcp_write+0x464>
 800fc58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc5a:	891b      	ldrh	r3, [r3, #8]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	f000 815f 	beq.w	800ff20 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800fc62:	88fa      	ldrh	r2, [r7, #6]
 800fc64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fc68:	1ad2      	subs	r2, r2, r3
 800fc6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fc6c:	4293      	cmp	r3, r2
 800fc6e:	bfa8      	it	ge
 800fc70:	4613      	movge	r3, r2
 800fc72:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800fc74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc76:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800fc78:	797b      	ldrb	r3, [r7, #5]
 800fc7a:	f003 0301 	and.w	r3, r3, #1
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d027      	beq.n	800fcd2 <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800fc82:	f107 0012 	add.w	r0, r7, #18
 800fc86:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800fc88:	8bf9      	ldrh	r1, [r7, #30]
 800fc8a:	2301      	movs	r3, #1
 800fc8c:	9302      	str	r3, [sp, #8]
 800fc8e:	797b      	ldrb	r3, [r7, #5]
 800fc90:	9301      	str	r3, [sp, #4]
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	9300      	str	r3, [sp, #0]
 800fc96:	4603      	mov	r3, r0
 800fc98:	2004      	movs	r0, #4
 800fc9a:	f7ff fe37 	bl	800f90c <tcp_pbuf_prealloc>
 800fc9e:	6578      	str	r0, [r7, #84]	; 0x54
 800fca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	f000 8227 	beq.w	80100f6 <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800fca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcaa:	6858      	ldr	r0, [r3, #4]
 800fcac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fcb0:	68ba      	ldr	r2, [r7, #8]
 800fcb2:	4413      	add	r3, r2
 800fcb4:	8bfa      	ldrh	r2, [r7, #30]
 800fcb6:	4619      	mov	r1, r3
 800fcb8:	f004 f8e7 	bl	8013e8a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800fcbc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fcbe:	f7fb fceb 	bl	800b698 <pbuf_clen>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	461a      	mov	r2, r3
 800fcc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fcca:	4413      	add	r3, r2
 800fccc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800fcd0:	e03f      	b.n	800fd52 <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800fcd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcd4:	685b      	ldr	r3, [r3, #4]
 800fcd6:	637b      	str	r3, [r7, #52]	; 0x34
 800fcd8:	e002      	b.n	800fce0 <tcp_write+0x224>
 800fcda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	637b      	str	r3, [r7, #52]	; 0x34
 800fce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d1f8      	bne.n	800fcda <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800fce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcea:	7b1b      	ldrb	r3, [r3, #12]
 800fcec:	2b01      	cmp	r3, #1
 800fcee:	d115      	bne.n	800fd1c <tcp_write+0x260>
 800fcf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcf2:	685b      	ldr	r3, [r3, #4]
 800fcf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fcf6:	8952      	ldrh	r2, [r2, #10]
 800fcf8:	4413      	add	r3, r2
 800fcfa:	68ba      	ldr	r2, [r7, #8]
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d10d      	bne.n	800fd1c <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800fd00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d006      	beq.n	800fd16 <tcp_write+0x25a>
 800fd08:	4b1c      	ldr	r3, [pc, #112]	; (800fd7c <tcp_write+0x2c0>)
 800fd0a:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800fd0e:	4921      	ldr	r1, [pc, #132]	; (800fd94 <tcp_write+0x2d8>)
 800fd10:	481c      	ldr	r0, [pc, #112]	; (800fd84 <tcp_write+0x2c8>)
 800fd12:	f004 f8cd 	bl	8013eb0 <iprintf>
          extendlen = seglen;
 800fd16:	8bfb      	ldrh	r3, [r7, #30]
 800fd18:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800fd1a:	e01a      	b.n	800fd52 <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800fd1c:	8bfb      	ldrh	r3, [r7, #30]
 800fd1e:	2201      	movs	r2, #1
 800fd20:	4619      	mov	r1, r3
 800fd22:	2004      	movs	r0, #4
 800fd24:	f7fb f8ac 	bl	800ae80 <pbuf_alloc>
 800fd28:	6578      	str	r0, [r7, #84]	; 0x54
 800fd2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	f000 81e4 	beq.w	80100fa <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 800fd32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fd36:	68ba      	ldr	r2, [r7, #8]
 800fd38:	441a      	add	r2, r3
 800fd3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd3c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800fd3e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fd40:	f7fb fcaa 	bl	800b698 <pbuf_clen>
 800fd44:	4603      	mov	r3, r0
 800fd46:	461a      	mov	r2, r3
 800fd48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fd4c:	4413      	add	r3, r2
 800fd4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800fd52:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fd56:	8bfb      	ldrh	r3, [r7, #30]
 800fd58:	4413      	add	r3, r2
 800fd5a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800fd5e:	e0df      	b.n	800ff20 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	f000 80da 	beq.w	800ff20 <tcp_write+0x464>
 800fd6c:	4b03      	ldr	r3, [pc, #12]	; (800fd7c <tcp_write+0x2c0>)
 800fd6e:	f240 2225 	movw	r2, #549	; 0x225
 800fd72:	4909      	ldr	r1, [pc, #36]	; (800fd98 <tcp_write+0x2dc>)
 800fd74:	4803      	ldr	r0, [pc, #12]	; (800fd84 <tcp_write+0x2c8>)
 800fd76:	f004 f89b 	bl	8013eb0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800fd7a:	e0d1      	b.n	800ff20 <tcp_write+0x464>
 800fd7c:	0801666c 	.word	0x0801666c
 800fd80:	08016794 	.word	0x08016794
 800fd84:	080166d0 	.word	0x080166d0
 800fd88:	080167c8 	.word	0x080167c8
 800fd8c:	080167e0 	.word	0x080167e0
 800fd90:	08016800 	.word	0x08016800
 800fd94:	08016820 	.word	0x08016820
 800fd98:	0801684c 	.word	0x0801684c
    struct pbuf *p;
    u16_t left = len - pos;
 800fd9c:	88fa      	ldrh	r2, [r7, #6]
 800fd9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fda2:	1ad3      	subs	r3, r2, r3
 800fda4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800fda6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdaa:	b29b      	uxth	r3, r3
 800fdac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fdae:	1ad3      	subs	r3, r2, r3
 800fdb0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800fdb2:	8b7a      	ldrh	r2, [r7, #26]
 800fdb4:	8bbb      	ldrh	r3, [r7, #28]
 800fdb6:	4293      	cmp	r3, r2
 800fdb8:	bf28      	it	cs
 800fdba:	4613      	movcs	r3, r2
 800fdbc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800fdbe:	797b      	ldrb	r3, [r7, #5]
 800fdc0:	f003 0301 	and.w	r3, r3, #1
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d036      	beq.n	800fe36 <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800fdc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdcc:	b29a      	uxth	r2, r3
 800fdce:	8b3b      	ldrh	r3, [r7, #24]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	b299      	uxth	r1, r3
 800fdd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	bf0c      	ite	eq
 800fdda:	2301      	moveq	r3, #1
 800fddc:	2300      	movne	r3, #0
 800fdde:	b2db      	uxtb	r3, r3
 800fde0:	f107 0012 	add.w	r0, r7, #18
 800fde4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fde6:	9302      	str	r3, [sp, #8]
 800fde8:	797b      	ldrb	r3, [r7, #5]
 800fdea:	9301      	str	r3, [sp, #4]
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	9300      	str	r3, [sp, #0]
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	2000      	movs	r0, #0
 800fdf4:	f7ff fd8a 	bl	800f90c <tcp_pbuf_prealloc>
 800fdf8:	6338      	str	r0, [r7, #48]	; 0x30
 800fdfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	f000 817e 	beq.w	80100fe <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800fe02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe04:	895b      	ldrh	r3, [r3, #10]
 800fe06:	8b3a      	ldrh	r2, [r7, #24]
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d906      	bls.n	800fe1a <tcp_write+0x35e>
 800fe0c:	4b8f      	ldr	r3, [pc, #572]	; (801004c <tcp_write+0x590>)
 800fe0e:	f240 2241 	movw	r2, #577	; 0x241
 800fe12:	498f      	ldr	r1, [pc, #572]	; (8010050 <tcp_write+0x594>)
 800fe14:	488f      	ldr	r0, [pc, #572]	; (8010054 <tcp_write+0x598>)
 800fe16:	f004 f84b 	bl	8013eb0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 800fe1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe1c:	685a      	ldr	r2, [r3, #4]
 800fe1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe22:	18d0      	adds	r0, r2, r3
 800fe24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fe28:	68ba      	ldr	r2, [r7, #8]
 800fe2a:	4413      	add	r3, r2
 800fe2c:	8b3a      	ldrh	r2, [r7, #24]
 800fe2e:	4619      	mov	r1, r3
 800fe30:	f004 f82b 	bl	8013e8a <memcpy>
 800fe34:	e02e      	b.n	800fe94 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800fe36:	8a7b      	ldrh	r3, [r7, #18]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d006      	beq.n	800fe4a <tcp_write+0x38e>
 800fe3c:	4b83      	ldr	r3, [pc, #524]	; (801004c <tcp_write+0x590>)
 800fe3e:	f240 224b 	movw	r2, #587	; 0x24b
 800fe42:	4985      	ldr	r1, [pc, #532]	; (8010058 <tcp_write+0x59c>)
 800fe44:	4883      	ldr	r0, [pc, #524]	; (8010054 <tcp_write+0x598>)
 800fe46:	f004 f833 	bl	8013eb0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800fe4a:	8b3b      	ldrh	r3, [r7, #24]
 800fe4c:	2201      	movs	r2, #1
 800fe4e:	4619      	mov	r1, r3
 800fe50:	2000      	movs	r0, #0
 800fe52:	f7fb f815 	bl	800ae80 <pbuf_alloc>
 800fe56:	6178      	str	r0, [r7, #20]
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	f000 8151 	beq.w	8010102 <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 800fe60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fe64:	68ba      	ldr	r2, [r7, #8]
 800fe66:	441a      	add	r2, r3
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800fe6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe70:	b29b      	uxth	r3, r3
 800fe72:	2200      	movs	r2, #0
 800fe74:	4619      	mov	r1, r3
 800fe76:	2000      	movs	r0, #0
 800fe78:	f7fb f802 	bl	800ae80 <pbuf_alloc>
 800fe7c:	6338      	str	r0, [r7, #48]	; 0x30
 800fe7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d103      	bne.n	800fe8c <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800fe84:	6978      	ldr	r0, [r7, #20]
 800fe86:	f7fb fb6d 	bl	800b564 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800fe8a:	e13d      	b.n	8010108 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800fe8c:	6979      	ldr	r1, [r7, #20]
 800fe8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe90:	f7fb fc40 	bl	800b714 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800fe94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe96:	f7fb fbff 	bl	800b698 <pbuf_clen>
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fea2:	4413      	add	r3, r2
 800fea4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 800fea8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800feac:	2b09      	cmp	r3, #9
 800feae:	d805      	bhi.n	800febc <tcp_write+0x400>
 800feb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800feb4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800feb8:	4293      	cmp	r3, r2
 800feba:	d903      	bls.n	800fec4 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800febc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800febe:	f7fb fb51 	bl	800b564 <pbuf_free>
      goto memerr;
 800fec2:	e121      	b.n	8010108 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fec8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fecc:	441a      	add	r2, r3
 800fece:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fed2:	9300      	str	r3, [sp, #0]
 800fed4:	4613      	mov	r3, r2
 800fed6:	2200      	movs	r2, #0
 800fed8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800feda:	68f8      	ldr	r0, [r7, #12]
 800fedc:	f7ff fc8e 	bl	800f7fc <tcp_create_segment>
 800fee0:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	f000 810e 	beq.w	8010106 <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800feea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800feec:	2b00      	cmp	r3, #0
 800feee:	d102      	bne.n	800fef6 <tcp_write+0x43a>
      queue = seg;
 800fef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fef2:	647b      	str	r3, [r7, #68]	; 0x44
 800fef4:	e00c      	b.n	800ff10 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800fef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d106      	bne.n	800ff0a <tcp_write+0x44e>
 800fefc:	4b53      	ldr	r3, [pc, #332]	; (801004c <tcp_write+0x590>)
 800fefe:	f240 2285 	movw	r2, #645	; 0x285
 800ff02:	4956      	ldr	r1, [pc, #344]	; (801005c <tcp_write+0x5a0>)
 800ff04:	4853      	ldr	r0, [pc, #332]	; (8010054 <tcp_write+0x598>)
 800ff06:	f003 ffd3 	bl	8013eb0 <iprintf>
      prev_seg->next = seg;
 800ff0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ff0e:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800ff10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff12:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800ff14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ff18:	8b3b      	ldrh	r3, [r7, #24]
 800ff1a:	4413      	add	r3, r2
 800ff1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800ff20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ff24:	88fb      	ldrh	r3, [r7, #6]
 800ff26:	429a      	cmp	r2, r3
 800ff28:	f4ff af38 	bcc.w	800fd9c <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800ff2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d02c      	beq.n	800ff8c <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800ff32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff38:	e01e      	b.n	800ff78 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 800ff3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff3c:	891a      	ldrh	r2, [r3, #8]
 800ff3e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ff40:	4413      	add	r3, r2
 800ff42:	b29a      	uxth	r2, r3
 800ff44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff46:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800ff48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d110      	bne.n	800ff72 <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800ff50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff52:	685b      	ldr	r3, [r3, #4]
 800ff54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff56:	8952      	ldrh	r2, [r2, #10]
 800ff58:	4413      	add	r3, r2
 800ff5a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ff5c:	68b9      	ldr	r1, [r7, #8]
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f003 ff93 	bl	8013e8a <memcpy>
        p->len += oversize_used;
 800ff64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff66:	895a      	ldrh	r2, [r3, #10]
 800ff68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ff6a:	4413      	add	r3, r2
 800ff6c:	b29a      	uxth	r2, r3
 800ff6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff70:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800ff72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ff78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d1dd      	bne.n	800ff3a <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 800ff7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff80:	891a      	ldrh	r2, [r3, #8]
 800ff82:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ff84:	4413      	add	r3, r2
 800ff86:	b29a      	uxth	r2, r3
 800ff88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff8a:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800ff8c:	8a7a      	ldrh	r2, [r7, #18]
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800ff94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d018      	beq.n	800ffcc <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800ff9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d106      	bne.n	800ffae <tcp_write+0x4f2>
 800ffa0:	4b2a      	ldr	r3, [pc, #168]	; (801004c <tcp_write+0x590>)
 800ffa2:	f240 22bb 	movw	r2, #699	; 0x2bb
 800ffa6:	492e      	ldr	r1, [pc, #184]	; (8010060 <tcp_write+0x5a4>)
 800ffa8:	482a      	ldr	r0, [pc, #168]	; (8010054 <tcp_write+0x598>)
 800ffaa:	f003 ff81 	bl	8013eb0 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800ffae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffb0:	685b      	ldr	r3, [r3, #4]
 800ffb2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f7fb fbad 	bl	800b714 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800ffba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffbc:	891a      	ldrh	r2, [r3, #8]
 800ffbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffc0:	891b      	ldrh	r3, [r3, #8]
 800ffc2:	4413      	add	r3, r2
 800ffc4:	b29a      	uxth	r2, r3
 800ffc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffc8:	811a      	strh	r2, [r3, #8]
 800ffca:	e037      	b.n	801003c <tcp_write+0x580>
  } else if (extendlen > 0) {
 800ffcc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d034      	beq.n	801003c <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800ffd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d003      	beq.n	800ffe0 <tcp_write+0x524>
 800ffd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffda:	685b      	ldr	r3, [r3, #4]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d106      	bne.n	800ffee <tcp_write+0x532>
 800ffe0:	4b1a      	ldr	r3, [pc, #104]	; (801004c <tcp_write+0x590>)
 800ffe2:	f240 22c1 	movw	r2, #705	; 0x2c1
 800ffe6:	491f      	ldr	r1, [pc, #124]	; (8010064 <tcp_write+0x5a8>)
 800ffe8:	481a      	ldr	r0, [pc, #104]	; (8010054 <tcp_write+0x598>)
 800ffea:	f003 ff61 	bl	8013eb0 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ffee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fff0:	685b      	ldr	r3, [r3, #4]
 800fff2:	62bb      	str	r3, [r7, #40]	; 0x28
 800fff4:	e009      	b.n	801000a <tcp_write+0x54e>
      p->tot_len += extendlen;
 800fff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fff8:	891a      	ldrh	r2, [r3, #8]
 800fffa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fffc:	4413      	add	r3, r2
 800fffe:	b29a      	uxth	r2, r3
 8010000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010002:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	62bb      	str	r3, [r7, #40]	; 0x28
 801000a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d1f1      	bne.n	800fff6 <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 8010012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010014:	891a      	ldrh	r2, [r3, #8]
 8010016:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010018:	4413      	add	r3, r2
 801001a:	b29a      	uxth	r2, r3
 801001c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801001e:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010022:	895a      	ldrh	r2, [r3, #10]
 8010024:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010026:	4413      	add	r3, r2
 8010028:	b29a      	uxth	r2, r3
 801002a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801002c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801002e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010030:	891a      	ldrh	r2, [r3, #8]
 8010032:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010034:	4413      	add	r3, r2
 8010036:	b29a      	uxth	r2, r3
 8010038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801003a:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801003c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801003e:	2b00      	cmp	r3, #0
 8010040:	d112      	bne.n	8010068 <tcp_write+0x5ac>
    pcb->unsent = queue;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010046:	669a      	str	r2, [r3, #104]	; 0x68
 8010048:	e011      	b.n	801006e <tcp_write+0x5b2>
 801004a:	bf00      	nop
 801004c:	0801666c 	.word	0x0801666c
 8010050:	0801687c 	.word	0x0801687c
 8010054:	080166d0 	.word	0x080166d0
 8010058:	080168bc 	.word	0x080168bc
 801005c:	080168cc 	.word	0x080168cc
 8010060:	080168e0 	.word	0x080168e0
 8010064:	08016918 	.word	0x08016918
  } else {
    last_unsent->next = queue;
 8010068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801006a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801006c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010072:	88fb      	ldrh	r3, [r7, #6]
 8010074:	441a      	add	r2, r3
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010080:	88fb      	ldrh	r3, [r7, #6]
 8010082:	1ad3      	subs	r3, r2, r3
 8010084:	b29a      	uxth	r2, r3
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010092:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801009c:	2b00      	cmp	r3, #0
 801009e:	d00e      	beq.n	80100be <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d10a      	bne.n	80100be <tcp_write+0x602>
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d106      	bne.n	80100be <tcp_write+0x602>
 80100b0:	4b2c      	ldr	r3, [pc, #176]	; (8010164 <tcp_write+0x6a8>)
 80100b2:	f240 22ed 	movw	r2, #749	; 0x2ed
 80100b6:	492c      	ldr	r1, [pc, #176]	; (8010168 <tcp_write+0x6ac>)
 80100b8:	482c      	ldr	r0, [pc, #176]	; (801016c <tcp_write+0x6b0>)
 80100ba:	f003 fef9 	bl	8013eb0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 80100be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d016      	beq.n	80100f2 <tcp_write+0x636>
 80100c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100c6:	68db      	ldr	r3, [r3, #12]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d012      	beq.n	80100f2 <tcp_write+0x636>
 80100cc:	797b      	ldrb	r3, [r7, #5]
 80100ce:	f003 0302 	and.w	r3, r3, #2
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d10d      	bne.n	80100f2 <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80100d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100d8:	68db      	ldr	r3, [r3, #12]
 80100da:	899b      	ldrh	r3, [r3, #12]
 80100dc:	b29c      	uxth	r4, r3
 80100de:	2008      	movs	r0, #8
 80100e0:	f7fa f850 	bl	800a184 <lwip_htons>
 80100e4:	4603      	mov	r3, r0
 80100e6:	461a      	mov	r2, r3
 80100e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100ea:	68db      	ldr	r3, [r3, #12]
 80100ec:	4322      	orrs	r2, r4
 80100ee:	b292      	uxth	r2, r2
 80100f0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80100f2:	2300      	movs	r3, #0
 80100f4:	e031      	b.n	801015a <tcp_write+0x69e>
          goto memerr;
 80100f6:	bf00      	nop
 80100f8:	e006      	b.n	8010108 <tcp_write+0x64c>
            goto memerr;
 80100fa:	bf00      	nop
 80100fc:	e004      	b.n	8010108 <tcp_write+0x64c>
        goto memerr;
 80100fe:	bf00      	nop
 8010100:	e002      	b.n	8010108 <tcp_write+0x64c>
        goto memerr;
 8010102:	bf00      	nop
 8010104:	e000      	b.n	8010108 <tcp_write+0x64c>
      goto memerr;
 8010106:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	7e9b      	ldrb	r3, [r3, #26]
 801010c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010110:	b2da      	uxtb	r2, r3
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010118:	2b00      	cmp	r3, #0
 801011a:	d002      	beq.n	8010122 <tcp_write+0x666>
    pbuf_free(concat_p);
 801011c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801011e:	f7fb fa21 	bl	800b564 <pbuf_free>
  }
  if (queue != NULL) {
 8010122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010124:	2b00      	cmp	r3, #0
 8010126:	d002      	beq.n	801012e <tcp_write+0x672>
    tcp_segs_free(queue);
 8010128:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801012a:	f7fc fcd6 	bl	800cada <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010134:	2b00      	cmp	r3, #0
 8010136:	d00e      	beq.n	8010156 <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801013c:	2b00      	cmp	r3, #0
 801013e:	d10a      	bne.n	8010156 <tcp_write+0x69a>
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010144:	2b00      	cmp	r3, #0
 8010146:	d106      	bne.n	8010156 <tcp_write+0x69a>
 8010148:	4b06      	ldr	r3, [pc, #24]	; (8010164 <tcp_write+0x6a8>)
 801014a:	f240 3202 	movw	r2, #770	; 0x302
 801014e:	4906      	ldr	r1, [pc, #24]	; (8010168 <tcp_write+0x6ac>)
 8010150:	4806      	ldr	r0, [pc, #24]	; (801016c <tcp_write+0x6b0>)
 8010152:	f003 fead 	bl	8013eb0 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010156:	f04f 33ff 	mov.w	r3, #4294967295
}
 801015a:	4618      	mov	r0, r3
 801015c:	375c      	adds	r7, #92	; 0x5c
 801015e:	46bd      	mov	sp, r7
 8010160:	bd90      	pop	{r4, r7, pc}
 8010162:	bf00      	nop
 8010164:	0801666c 	.word	0x0801666c
 8010168:	08016950 	.word	0x08016950
 801016c:	080166d0 	.word	0x080166d0

08010170 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b08a      	sub	sp, #40	; 0x28
 8010174:	af02      	add	r7, sp, #8
 8010176:	6078      	str	r0, [r7, #4]
 8010178:	460b      	mov	r3, r1
 801017a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801017c:	2300      	movs	r3, #0
 801017e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010180:	2300      	movs	r3, #0
 8010182:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010184:	78fb      	ldrb	r3, [r7, #3]
 8010186:	f003 0303 	and.w	r3, r3, #3
 801018a:	2b00      	cmp	r3, #0
 801018c:	d106      	bne.n	801019c <tcp_enqueue_flags+0x2c>
 801018e:	4b6f      	ldr	r3, [pc, #444]	; (801034c <tcp_enqueue_flags+0x1dc>)
 8010190:	f240 321b 	movw	r2, #795	; 0x31b
 8010194:	496e      	ldr	r1, [pc, #440]	; (8010350 <tcp_enqueue_flags+0x1e0>)
 8010196:	486f      	ldr	r0, [pc, #444]	; (8010354 <tcp_enqueue_flags+0x1e4>)
 8010198:	f003 fe8a 	bl	8013eb0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80101a2:	2b08      	cmp	r3, #8
 80101a4:	d806      	bhi.n	80101b4 <tcp_enqueue_flags+0x44>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80101ac:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80101b0:	4293      	cmp	r3, r2
 80101b2:	d90e      	bls.n	80101d2 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 80101b4:	78fb      	ldrb	r3, [r7, #3]
 80101b6:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d109      	bne.n	80101d2 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	7e9b      	ldrb	r3, [r3, #26]
 80101c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80101c6:	b2da      	uxtb	r2, r3
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80101cc:	f04f 33ff 	mov.w	r3, #4294967295
 80101d0:	e0b7      	b.n	8010342 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 80101d2:	78fb      	ldrb	r3, [r7, #3]
 80101d4:	f003 0302 	and.w	r3, r3, #2
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d001      	beq.n	80101e0 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 80101dc:	2301      	movs	r3, #1
 80101de:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80101e0:	7ffb      	ldrb	r3, [r7, #31]
 80101e2:	009b      	lsls	r3, r3, #2
 80101e4:	b2db      	uxtb	r3, r3
 80101e6:	f003 0304 	and.w	r3, r3, #4
 80101ea:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80101ec:	7dfb      	ldrb	r3, [r7, #23]
 80101ee:	b29b      	uxth	r3, r3
 80101f0:	2200      	movs	r2, #0
 80101f2:	4619      	mov	r1, r3
 80101f4:	2000      	movs	r0, #0
 80101f6:	f7fa fe43 	bl	800ae80 <pbuf_alloc>
 80101fa:	6138      	str	r0, [r7, #16]
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d109      	bne.n	8010216 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	7e9b      	ldrb	r3, [r3, #26]
 8010206:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801020a:	b2da      	uxtb	r2, r3
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010210:	f04f 33ff 	mov.w	r3, #4294967295
 8010214:	e095      	b.n	8010342 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010216:	693b      	ldr	r3, [r7, #16]
 8010218:	895a      	ldrh	r2, [r3, #10]
 801021a:	7dfb      	ldrb	r3, [r7, #23]
 801021c:	b29b      	uxth	r3, r3
 801021e:	429a      	cmp	r2, r3
 8010220:	d206      	bcs.n	8010230 <tcp_enqueue_flags+0xc0>
 8010222:	4b4a      	ldr	r3, [pc, #296]	; (801034c <tcp_enqueue_flags+0x1dc>)
 8010224:	f240 3241 	movw	r2, #833	; 0x341
 8010228:	494b      	ldr	r1, [pc, #300]	; (8010358 <tcp_enqueue_flags+0x1e8>)
 801022a:	484a      	ldr	r0, [pc, #296]	; (8010354 <tcp_enqueue_flags+0x1e4>)
 801022c:	f003 fe40 	bl	8013eb0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8010234:	78fa      	ldrb	r2, [r7, #3]
 8010236:	7ffb      	ldrb	r3, [r7, #31]
 8010238:	9300      	str	r3, [sp, #0]
 801023a:	460b      	mov	r3, r1
 801023c:	6939      	ldr	r1, [r7, #16]
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f7ff fadc 	bl	800f7fc <tcp_create_segment>
 8010244:	60f8      	str	r0, [r7, #12]
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d109      	bne.n	8010260 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	7e9b      	ldrb	r3, [r3, #26]
 8010250:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010254:	b2da      	uxtb	r2, r3
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801025a:	f04f 33ff 	mov.w	r3, #4294967295
 801025e:	e070      	b.n	8010342 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	68db      	ldr	r3, [r3, #12]
 8010264:	f003 0303 	and.w	r3, r3, #3
 8010268:	2b00      	cmp	r3, #0
 801026a:	d006      	beq.n	801027a <tcp_enqueue_flags+0x10a>
 801026c:	4b37      	ldr	r3, [pc, #220]	; (801034c <tcp_enqueue_flags+0x1dc>)
 801026e:	f240 3249 	movw	r2, #841	; 0x349
 8010272:	493a      	ldr	r1, [pc, #232]	; (801035c <tcp_enqueue_flags+0x1ec>)
 8010274:	4837      	ldr	r0, [pc, #220]	; (8010354 <tcp_enqueue_flags+0x1e4>)
 8010276:	f003 fe1b 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	891b      	ldrh	r3, [r3, #8]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d006      	beq.n	8010290 <tcp_enqueue_flags+0x120>
 8010282:	4b32      	ldr	r3, [pc, #200]	; (801034c <tcp_enqueue_flags+0x1dc>)
 8010284:	f240 324a 	movw	r2, #842	; 0x34a
 8010288:	4935      	ldr	r1, [pc, #212]	; (8010360 <tcp_enqueue_flags+0x1f0>)
 801028a:	4832      	ldr	r0, [pc, #200]	; (8010354 <tcp_enqueue_flags+0x1e4>)
 801028c:	f003 fe10 	bl	8013eb0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010294:	2b00      	cmp	r3, #0
 8010296:	d103      	bne.n	80102a0 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	68fa      	ldr	r2, [r7, #12]
 801029c:	669a      	str	r2, [r3, #104]	; 0x68
 801029e:	e00d      	b.n	80102bc <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80102a4:	61bb      	str	r3, [r7, #24]
 80102a6:	e002      	b.n	80102ae <tcp_enqueue_flags+0x13e>
 80102a8:	69bb      	ldr	r3, [r7, #24]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	61bb      	str	r3, [r7, #24]
 80102ae:	69bb      	ldr	r3, [r7, #24]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d1f8      	bne.n	80102a8 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 80102b6:	69bb      	ldr	r3, [r7, #24]
 80102b8:	68fa      	ldr	r2, [r7, #12]
 80102ba:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	2200      	movs	r2, #0
 80102c0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80102c4:	78fb      	ldrb	r3, [r7, #3]
 80102c6:	f003 0302 	and.w	r3, r3, #2
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d104      	bne.n	80102d8 <tcp_enqueue_flags+0x168>
 80102ce:	78fb      	ldrb	r3, [r7, #3]
 80102d0:	f003 0301 	and.w	r3, r3, #1
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d004      	beq.n	80102e2 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80102dc:	1c5a      	adds	r2, r3, #1
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80102e2:	78fb      	ldrb	r3, [r7, #3]
 80102e4:	f003 0301 	and.w	r3, r3, #1
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d006      	beq.n	80102fa <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	7e9b      	ldrb	r3, [r3, #26]
 80102f0:	f043 0320 	orr.w	r3, r3, #32
 80102f4:	b2da      	uxtb	r2, r3
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	685b      	ldr	r3, [r3, #4]
 80102fe:	4618      	mov	r0, r3
 8010300:	f7fb f9ca 	bl	800b698 <pbuf_clen>
 8010304:	4603      	mov	r3, r0
 8010306:	461a      	mov	r2, r3
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801030e:	4413      	add	r3, r2
 8010310:	b29a      	uxth	r2, r3
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801031e:	2b00      	cmp	r3, #0
 8010320:	d00e      	beq.n	8010340 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010326:	2b00      	cmp	r3, #0
 8010328:	d10a      	bne.n	8010340 <tcp_enqueue_flags+0x1d0>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801032e:	2b00      	cmp	r3, #0
 8010330:	d106      	bne.n	8010340 <tcp_enqueue_flags+0x1d0>
 8010332:	4b06      	ldr	r3, [pc, #24]	; (801034c <tcp_enqueue_flags+0x1dc>)
 8010334:	f240 326d 	movw	r2, #877	; 0x36d
 8010338:	490a      	ldr	r1, [pc, #40]	; (8010364 <tcp_enqueue_flags+0x1f4>)
 801033a:	4806      	ldr	r0, [pc, #24]	; (8010354 <tcp_enqueue_flags+0x1e4>)
 801033c:	f003 fdb8 	bl	8013eb0 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010340:	2300      	movs	r3, #0
}
 8010342:	4618      	mov	r0, r3
 8010344:	3720      	adds	r7, #32
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}
 801034a:	bf00      	nop
 801034c:	0801666c 	.word	0x0801666c
 8010350:	08016970 	.word	0x08016970
 8010354:	080166d0 	.word	0x080166d0
 8010358:	080169c8 	.word	0x080169c8
 801035c:	08016a04 	.word	0x08016a04
 8010360:	08016a1c 	.word	0x08016a1c
 8010364:	08016a48 	.word	0x08016a48

08010368 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010368:	b590      	push	{r4, r7, lr}
 801036a:	b08b      	sub	sp, #44	; 0x2c
 801036c:	af04      	add	r7, sp, #16
 801036e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8010370:	2300      	movs	r3, #0
 8010372:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010374:	7dbb      	ldrb	r3, [r7, #22]
 8010376:	b29c      	uxth	r4, r3
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801037c:	4618      	mov	r0, r3
 801037e:	f7f9 ff0e 	bl	800a19e <lwip_htonl>
 8010382:	4603      	mov	r3, r0
 8010384:	2200      	movs	r2, #0
 8010386:	4621      	mov	r1, r4
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f7ff f97b 	bl	800f684 <tcp_output_alloc_header>
 801038e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d109      	bne.n	80103aa <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	7e9b      	ldrb	r3, [r3, #26]
 801039a:	f043 0303 	orr.w	r3, r3, #3
 801039e:	b2da      	uxtb	r2, r3
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80103a4:	f06f 0301 	mvn.w	r3, #1
 80103a8:	e036      	b.n	8010418 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	3304      	adds	r3, #4
 80103ae:	4618      	mov	r0, r3
 80103b0:	f002 fa0e 	bl	80127d0 <ip4_route>
 80103b4:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d102      	bne.n	80103c2 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 80103bc:	23fc      	movs	r3, #252	; 0xfc
 80103be:	75fb      	strb	r3, [r7, #23]
 80103c0:	e012      	b.n	80103e8 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 80103c2:	6879      	ldr	r1, [r7, #4]
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	1d18      	adds	r0, r3, #4
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	7a9c      	ldrb	r4, [r3, #10]
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	7a5b      	ldrb	r3, [r3, #9]
 80103d0:	68fa      	ldr	r2, [r7, #12]
 80103d2:	9202      	str	r2, [sp, #8]
 80103d4:	2206      	movs	r2, #6
 80103d6:	9201      	str	r2, [sp, #4]
 80103d8:	9300      	str	r3, [sp, #0]
 80103da:	4623      	mov	r3, r4
 80103dc:	4602      	mov	r2, r0
 80103de:	6938      	ldr	r0, [r7, #16]
 80103e0:	f002 fb9e 	bl	8012b20 <ip4_output_if>
 80103e4:	4603      	mov	r3, r0
 80103e6:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80103e8:	6938      	ldr	r0, [r7, #16]
 80103ea:	f7fb f8bb 	bl	800b564 <pbuf_free>

  if (err != ERR_OK) {
 80103ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d007      	beq.n	8010406 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	7e9b      	ldrb	r3, [r3, #26]
 80103fa:	f043 0303 	orr.w	r3, r3, #3
 80103fe:	b2da      	uxtb	r2, r3
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	769a      	strb	r2, [r3, #26]
 8010404:	e006      	b.n	8010414 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	7e9b      	ldrb	r3, [r3, #26]
 801040a:	f023 0303 	bic.w	r3, r3, #3
 801040e:	b2da      	uxtb	r2, r3
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8010414:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010418:	4618      	mov	r0, r3
 801041a:	371c      	adds	r7, #28
 801041c:	46bd      	mov	sp, r7
 801041e:	bd90      	pop	{r4, r7, pc}

08010420 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010420:	b5b0      	push	{r4, r5, r7, lr}
 8010422:	b08a      	sub	sp, #40	; 0x28
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	7d1b      	ldrb	r3, [r3, #20]
 801042c:	2b01      	cmp	r3, #1
 801042e:	d106      	bne.n	801043e <tcp_output+0x1e>
 8010430:	4b9b      	ldr	r3, [pc, #620]	; (80106a0 <tcp_output+0x280>)
 8010432:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8010436:	499b      	ldr	r1, [pc, #620]	; (80106a4 <tcp_output+0x284>)
 8010438:	489b      	ldr	r0, [pc, #620]	; (80106a8 <tcp_output+0x288>)
 801043a:	f003 fd39 	bl	8013eb0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801043e:	4b9b      	ldr	r3, [pc, #620]	; (80106ac <tcp_output+0x28c>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	687a      	ldr	r2, [r7, #4]
 8010444:	429a      	cmp	r2, r3
 8010446:	d101      	bne.n	801044c <tcp_output+0x2c>
    return ERR_OK;
 8010448:	2300      	movs	r3, #0
 801044a:	e1cf      	b.n	80107ec <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010458:	429a      	cmp	r2, r3
 801045a:	d203      	bcs.n	8010464 <tcp_output+0x44>
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010462:	e002      	b.n	801046a <tcp_output+0x4a>
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801046a:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010470:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	7e9b      	ldrb	r3, [r3, #26]
 8010476:	f003 0302 	and.w	r3, r3, #2
 801047a:	2b00      	cmp	r3, #0
 801047c:	d017      	beq.n	80104ae <tcp_output+0x8e>
 801047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010480:	2b00      	cmp	r3, #0
 8010482:	d00f      	beq.n	80104a4 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8010484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010486:	68db      	ldr	r3, [r3, #12]
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	4618      	mov	r0, r3
 801048c:	f7f9 fe87 	bl	800a19e <lwip_htonl>
 8010490:	4602      	mov	r2, r0
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010496:	1ad3      	subs	r3, r2, r3
 8010498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801049a:	8912      	ldrh	r2, [r2, #8]
 801049c:	4413      	add	r3, r2
     (seg == NULL ||
 801049e:	69ba      	ldr	r2, [r7, #24]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d204      	bcs.n	80104ae <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f7ff ff5f 	bl	8010368 <tcp_send_empty_ack>
 80104aa:	4603      	mov	r3, r0
 80104ac:	e19e      	b.n	80107ec <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104b2:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80104b4:	6a3b      	ldr	r3, [r7, #32]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d007      	beq.n	80104ca <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 80104ba:	e002      	b.n	80104c2 <tcp_output+0xa2>
 80104bc:	6a3b      	ldr	r3, [r7, #32]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	623b      	str	r3, [r7, #32]
 80104c2:	6a3b      	ldr	r3, [r7, #32]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d1f8      	bne.n	80104bc <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	3304      	adds	r3, #4
 80104ce:	4618      	mov	r0, r3
 80104d0:	f002 f97e 	bl	80127d0 <ip4_route>
 80104d4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d102      	bne.n	80104e2 <tcp_output+0xc2>
    return ERR_RTE;
 80104dc:	f06f 0303 	mvn.w	r3, #3
 80104e0:	e184      	b.n	80107ec <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d003      	beq.n	80104f0 <tcp_output+0xd0>
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d111      	bne.n	8010514 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d002      	beq.n	80104fc <tcp_output+0xdc>
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	3304      	adds	r3, #4
 80104fa:	e000      	b.n	80104fe <tcp_output+0xde>
 80104fc:	2300      	movs	r3, #0
 80104fe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d102      	bne.n	801050c <tcp_output+0xec>
      return ERR_RTE;
 8010506:	f06f 0303 	mvn.w	r3, #3
 801050a:	e16f      	b.n	80107ec <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801050c:	693b      	ldr	r3, [r7, #16]
 801050e:	681a      	ldr	r2, [r3, #0]
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8010514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010516:	2b00      	cmp	r3, #0
 8010518:	f000 813e 	beq.w	8010798 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801051c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801051e:	68db      	ldr	r3, [r3, #12]
 8010520:	685b      	ldr	r3, [r3, #4]
 8010522:	4618      	mov	r0, r3
 8010524:	f7f9 fe3b 	bl	800a19e <lwip_htonl>
 8010528:	4602      	mov	r2, r0
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801052e:	1ad3      	subs	r3, r2, r3
 8010530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010532:	8912      	ldrh	r2, [r2, #8]
 8010534:	4413      	add	r3, r2
  if (seg != NULL &&
 8010536:	69ba      	ldr	r2, [r7, #24]
 8010538:	429a      	cmp	r2, r3
 801053a:	f080 812d 	bcs.w	8010798 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801053e:	69bb      	ldr	r3, [r7, #24]
 8010540:	2b00      	cmp	r3, #0
 8010542:	f000 8129 	beq.w	8010798 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801054c:	461a      	mov	r2, r3
 801054e:	69bb      	ldr	r3, [r7, #24]
 8010550:	4293      	cmp	r3, r2
 8010552:	f040 8121 	bne.w	8010798 <tcp_output+0x378>
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801055a:	2b00      	cmp	r3, #0
 801055c:	f040 811c 	bne.w	8010798 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010566:	2b00      	cmp	r3, #0
 8010568:	f040 812b 	bne.w	80107c2 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2200      	movs	r2, #0
 8010570:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2201      	movs	r2, #1
 8010578:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 801057c:	e121      	b.n	80107c2 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801057e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010580:	68db      	ldr	r3, [r3, #12]
 8010582:	899b      	ldrh	r3, [r3, #12]
 8010584:	b29b      	uxth	r3, r3
 8010586:	4618      	mov	r0, r3
 8010588:	f7f9 fdfc 	bl	800a184 <lwip_htons>
 801058c:	4603      	mov	r3, r0
 801058e:	f003 0304 	and.w	r3, r3, #4
 8010592:	2b00      	cmp	r3, #0
 8010594:	d006      	beq.n	80105a4 <tcp_output+0x184>
 8010596:	4b42      	ldr	r3, [pc, #264]	; (80106a0 <tcp_output+0x280>)
 8010598:	f240 4246 	movw	r2, #1094	; 0x446
 801059c:	4944      	ldr	r1, [pc, #272]	; (80106b0 <tcp_output+0x290>)
 801059e:	4842      	ldr	r0, [pc, #264]	; (80106a8 <tcp_output+0x288>)
 80105a0:	f003 fc86 	bl	8013eb0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d01f      	beq.n	80105ec <tcp_output+0x1cc>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	7e9b      	ldrb	r3, [r3, #26]
 80105b0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d119      	bne.n	80105ec <tcp_output+0x1cc>
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d00b      	beq.n	80105d8 <tcp_output+0x1b8>
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d110      	bne.n	80105ec <tcp_output+0x1cc>
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80105ce:	891a      	ldrh	r2, [r3, #8]
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105d4:	429a      	cmp	r2, r3
 80105d6:	d209      	bcs.n	80105ec <tcp_output+0x1cc>
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d004      	beq.n	80105ec <tcp_output+0x1cc>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80105e8:	2b08      	cmp	r3, #8
 80105ea:	d901      	bls.n	80105f0 <tcp_output+0x1d0>
 80105ec:	2301      	movs	r3, #1
 80105ee:	e000      	b.n	80105f2 <tcp_output+0x1d2>
 80105f0:	2300      	movs	r3, #0
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d106      	bne.n	8010604 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	7e9b      	ldrb	r3, [r3, #26]
 80105fa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80105fe:	2b00      	cmp	r3, #0
 8010600:	f000 80e1 	beq.w	80107c6 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	7d1b      	ldrb	r3, [r3, #20]
 8010608:	2b02      	cmp	r3, #2
 801060a:	d00d      	beq.n	8010628 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801060c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801060e:	68db      	ldr	r3, [r3, #12]
 8010610:	899b      	ldrh	r3, [r3, #12]
 8010612:	b29c      	uxth	r4, r3
 8010614:	2010      	movs	r0, #16
 8010616:	f7f9 fdb5 	bl	800a184 <lwip_htons>
 801061a:	4603      	mov	r3, r0
 801061c:	461a      	mov	r2, r3
 801061e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010620:	68db      	ldr	r3, [r3, #12]
 8010622:	4322      	orrs	r2, r4
 8010624:	b292      	uxth	r2, r2
 8010626:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8010628:	697a      	ldr	r2, [r7, #20]
 801062a:	6879      	ldr	r1, [r7, #4]
 801062c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801062e:	f000 f8e1 	bl	80107f4 <tcp_output_segment>
 8010632:	4603      	mov	r3, r0
 8010634:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d009      	beq.n	8010652 <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	7e9b      	ldrb	r3, [r3, #26]
 8010642:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010646:	b2da      	uxtb	r2, r3
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	769a      	strb	r2, [r3, #26]
      return err;
 801064c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010650:	e0cc      	b.n	80107ec <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 8010652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010654:	681a      	ldr	r2, [r3, #0]
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	7d1b      	ldrb	r3, [r3, #20]
 801065e:	2b02      	cmp	r3, #2
 8010660:	d006      	beq.n	8010670 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	7e9b      	ldrb	r3, [r3, #26]
 8010666:	f023 0303 	bic.w	r3, r3, #3
 801066a:	b2da      	uxtb	r2, r3
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010672:	68db      	ldr	r3, [r3, #12]
 8010674:	685b      	ldr	r3, [r3, #4]
 8010676:	4618      	mov	r0, r3
 8010678:	f7f9 fd91 	bl	800a19e <lwip_htonl>
 801067c:	4604      	mov	r4, r0
 801067e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010680:	891b      	ldrh	r3, [r3, #8]
 8010682:	461d      	mov	r5, r3
 8010684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010686:	68db      	ldr	r3, [r3, #12]
 8010688:	899b      	ldrh	r3, [r3, #12]
 801068a:	b29b      	uxth	r3, r3
 801068c:	4618      	mov	r0, r3
 801068e:	f7f9 fd79 	bl	800a184 <lwip_htons>
 8010692:	4603      	mov	r3, r0
 8010694:	f003 0303 	and.w	r3, r3, #3
 8010698:	2b00      	cmp	r3, #0
 801069a:	d00b      	beq.n	80106b4 <tcp_output+0x294>
 801069c:	2301      	movs	r3, #1
 801069e:	e00a      	b.n	80106b6 <tcp_output+0x296>
 80106a0:	0801666c 	.word	0x0801666c
 80106a4:	08016a70 	.word	0x08016a70
 80106a8:	080166d0 	.word	0x080166d0
 80106ac:	2000ad20 	.word	0x2000ad20
 80106b0:	08016a98 	.word	0x08016a98
 80106b4:	2300      	movs	r3, #0
 80106b6:	442b      	add	r3, r5
 80106b8:	4423      	add	r3, r4
 80106ba:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	1ad3      	subs	r3, r2, r3
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	da02      	bge.n	80106ce <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	68ba      	ldr	r2, [r7, #8]
 80106cc:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80106ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d0:	891b      	ldrh	r3, [r3, #8]
 80106d2:	461c      	mov	r4, r3
 80106d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106d6:	68db      	ldr	r3, [r3, #12]
 80106d8:	899b      	ldrh	r3, [r3, #12]
 80106da:	b29b      	uxth	r3, r3
 80106dc:	4618      	mov	r0, r3
 80106de:	f7f9 fd51 	bl	800a184 <lwip_htons>
 80106e2:	4603      	mov	r3, r0
 80106e4:	f003 0303 	and.w	r3, r3, #3
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d001      	beq.n	80106f0 <tcp_output+0x2d0>
 80106ec:	2301      	movs	r3, #1
 80106ee:	e000      	b.n	80106f2 <tcp_output+0x2d2>
 80106f0:	2300      	movs	r3, #0
 80106f2:	4423      	add	r3, r4
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d049      	beq.n	801078c <tcp_output+0x36c>
      seg->next = NULL;
 80106f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106fa:	2200      	movs	r2, #0
 80106fc:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010702:	2b00      	cmp	r3, #0
 8010704:	d105      	bne.n	8010712 <tcp_output+0x2f2>
        pcb->unacked = seg;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801070a:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 801070c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801070e:	623b      	str	r3, [r7, #32]
 8010710:	e03f      	b.n	8010792 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010714:	68db      	ldr	r3, [r3, #12]
 8010716:	685b      	ldr	r3, [r3, #4]
 8010718:	4618      	mov	r0, r3
 801071a:	f7f9 fd40 	bl	800a19e <lwip_htonl>
 801071e:	4604      	mov	r4, r0
 8010720:	6a3b      	ldr	r3, [r7, #32]
 8010722:	68db      	ldr	r3, [r3, #12]
 8010724:	685b      	ldr	r3, [r3, #4]
 8010726:	4618      	mov	r0, r3
 8010728:	f7f9 fd39 	bl	800a19e <lwip_htonl>
 801072c:	4603      	mov	r3, r0
 801072e:	1ae3      	subs	r3, r4, r3
 8010730:	2b00      	cmp	r3, #0
 8010732:	da24      	bge.n	801077e <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	336c      	adds	r3, #108	; 0x6c
 8010738:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801073a:	e002      	b.n	8010742 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 801073c:	69fb      	ldr	r3, [r7, #28]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010742:	69fb      	ldr	r3, [r7, #28]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d011      	beq.n	801076e <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801074a:	69fb      	ldr	r3, [r7, #28]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	68db      	ldr	r3, [r3, #12]
 8010750:	685b      	ldr	r3, [r3, #4]
 8010752:	4618      	mov	r0, r3
 8010754:	f7f9 fd23 	bl	800a19e <lwip_htonl>
 8010758:	4604      	mov	r4, r0
 801075a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801075c:	68db      	ldr	r3, [r3, #12]
 801075e:	685b      	ldr	r3, [r3, #4]
 8010760:	4618      	mov	r0, r3
 8010762:	f7f9 fd1c 	bl	800a19e <lwip_htonl>
 8010766:	4603      	mov	r3, r0
 8010768:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801076a:	2b00      	cmp	r3, #0
 801076c:	dbe6      	blt.n	801073c <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 801076e:	69fb      	ldr	r3, [r7, #28]
 8010770:	681a      	ldr	r2, [r3, #0]
 8010772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010774:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010776:	69fb      	ldr	r3, [r7, #28]
 8010778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801077a:	601a      	str	r2, [r3, #0]
 801077c:	e009      	b.n	8010792 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801077e:	6a3b      	ldr	r3, [r7, #32]
 8010780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010782:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010784:	6a3b      	ldr	r3, [r7, #32]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	623b      	str	r3, [r7, #32]
 801078a:	e002      	b.n	8010792 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801078c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801078e:	f7fc f9b8 	bl	800cb02 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010796:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079a:	2b00      	cmp	r3, #0
 801079c:	d015      	beq.n	80107ca <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801079e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a0:	68db      	ldr	r3, [r3, #12]
 80107a2:	685b      	ldr	r3, [r3, #4]
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7f9 fcfa 	bl	800a19e <lwip_htonl>
 80107aa:	4602      	mov	r2, r0
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107b0:	1ad3      	subs	r3, r2, r3
 80107b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107b4:	8912      	ldrh	r2, [r2, #8]
 80107b6:	4413      	add	r3, r2
  while (seg != NULL &&
 80107b8:	69ba      	ldr	r2, [r7, #24]
 80107ba:	429a      	cmp	r2, r3
 80107bc:	f4bf aedf 	bcs.w	801057e <tcp_output+0x15e>
  }
output_done:
 80107c0:	e003      	b.n	80107ca <tcp_output+0x3aa>
    goto output_done;
 80107c2:	bf00      	nop
 80107c4:	e002      	b.n	80107cc <tcp_output+0x3ac>
      break;
 80107c6:	bf00      	nop
 80107c8:	e000      	b.n	80107cc <tcp_output+0x3ac>
output_done:
 80107ca:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d103      	bne.n	80107dc <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2200      	movs	r2, #0
 80107d8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	7e9b      	ldrb	r3, [r3, #26]
 80107e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107e4:	b2da      	uxtb	r2, r3
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 80107ea:	2300      	movs	r3, #0
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3728      	adds	r7, #40	; 0x28
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bdb0      	pop	{r4, r5, r7, pc}

080107f4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80107f4:	b5b0      	push	{r4, r5, r7, lr}
 80107f6:	b08c      	sub	sp, #48	; 0x30
 80107f8:	af04      	add	r7, sp, #16
 80107fa:	60f8      	str	r0, [r7, #12]
 80107fc:	60b9      	str	r1, [r7, #8]
 80107fe:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	685b      	ldr	r3, [r3, #4]
 8010804:	89db      	ldrh	r3, [r3, #14]
 8010806:	2b01      	cmp	r3, #1
 8010808:	d001      	beq.n	801080e <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 801080a:	2300      	movs	r3, #0
 801080c:	e08b      	b.n	8010926 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	68dc      	ldr	r4, [r3, #12]
 8010816:	4610      	mov	r0, r2
 8010818:	f7f9 fcc1 	bl	800a19e <lwip_htonl>
 801081c:	4603      	mov	r3, r0
 801081e:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	68dc      	ldr	r4, [r3, #12]
 8010828:	4610      	mov	r0, r2
 801082a:	f7f9 fcab 	bl	800a184 <lwip_htons>
 801082e:	4603      	mov	r3, r0
 8010830:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010836:	68ba      	ldr	r2, [r7, #8]
 8010838:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801083a:	441a      	add	r2, r3
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	68db      	ldr	r3, [r3, #12]
 8010844:	3314      	adds	r3, #20
 8010846:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	7a9b      	ldrb	r3, [r3, #10]
 801084c:	f003 0301 	and.w	r3, r3, #1
 8010850:	2b00      	cmp	r3, #0
 8010852:	d014      	beq.n	801087e <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	3304      	adds	r3, #4
 8010858:	4619      	mov	r1, r3
 801085a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801085e:	f7fc fc75 	bl	800d14c <tcp_eff_send_mss_impl>
 8010862:	4603      	mov	r3, r0
 8010864:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010866:	8b7b      	ldrh	r3, [r7, #26]
 8010868:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801086c:	4618      	mov	r0, r3
 801086e:	f7f9 fc96 	bl	800a19e <lwip_htonl>
 8010872:	4602      	mov	r2, r0
 8010874:	69fb      	ldr	r3, [r7, #28]
 8010876:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010878:	69fb      	ldr	r3, [r7, #28]
 801087a:	3304      	adds	r3, #4
 801087c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801087e:	68bb      	ldr	r3, [r7, #8]
 8010880:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010884:	2b00      	cmp	r3, #0
 8010886:	da02      	bge.n	801088e <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	2200      	movs	r2, #0
 801088c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010892:	2b00      	cmp	r3, #0
 8010894:	d10c      	bne.n	80108b0 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8010896:	4b26      	ldr	r3, [pc, #152]	; (8010930 <tcp_output_segment+0x13c>)
 8010898:	681a      	ldr	r2, [r3, #0]
 801089a:	68bb      	ldr	r3, [r7, #8]
 801089c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	68db      	ldr	r3, [r3, #12]
 80108a2:	685b      	ldr	r3, [r3, #4]
 80108a4:	4618      	mov	r0, r3
 80108a6:	f7f9 fc7a 	bl	800a19e <lwip_htonl>
 80108aa:	4602      	mov	r2, r0
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	68db      	ldr	r3, [r3, #12]
 80108b4:	461a      	mov	r2, r3
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	685b      	ldr	r3, [r3, #4]
 80108ba:	685b      	ldr	r3, [r3, #4]
 80108bc:	1ad3      	subs	r3, r2, r3
 80108be:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	685b      	ldr	r3, [r3, #4]
 80108c4:	8959      	ldrh	r1, [r3, #10]
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	685b      	ldr	r3, [r3, #4]
 80108ca:	8b3a      	ldrh	r2, [r7, #24]
 80108cc:	1a8a      	subs	r2, r1, r2
 80108ce:	b292      	uxth	r2, r2
 80108d0:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	685b      	ldr	r3, [r3, #4]
 80108d6:	8919      	ldrh	r1, [r3, #8]
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	685b      	ldr	r3, [r3, #4]
 80108dc:	8b3a      	ldrh	r2, [r7, #24]
 80108de:	1a8a      	subs	r2, r1, r2
 80108e0:	b292      	uxth	r2, r2
 80108e2:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	685b      	ldr	r3, [r3, #4]
 80108e8:	68fa      	ldr	r2, [r7, #12]
 80108ea:	68d2      	ldr	r2, [r2, #12]
 80108ec:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	68db      	ldr	r3, [r3, #12]
 80108f2:	2200      	movs	r2, #0
 80108f4:	741a      	strb	r2, [r3, #16]
 80108f6:	2200      	movs	r2, #0
 80108f8:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	6858      	ldr	r0, [r3, #4]
 80108fe:	68b9      	ldr	r1, [r7, #8]
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	1d1c      	adds	r4, r3, #4
 8010904:	68bb      	ldr	r3, [r7, #8]
 8010906:	7a9d      	ldrb	r5, [r3, #10]
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	7a5b      	ldrb	r3, [r3, #9]
 801090c:	687a      	ldr	r2, [r7, #4]
 801090e:	9202      	str	r2, [sp, #8]
 8010910:	2206      	movs	r2, #6
 8010912:	9201      	str	r2, [sp, #4]
 8010914:	9300      	str	r3, [sp, #0]
 8010916:	462b      	mov	r3, r5
 8010918:	4622      	mov	r2, r4
 801091a:	f002 f901 	bl	8012b20 <ip4_output_if>
 801091e:	4603      	mov	r3, r0
 8010920:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8010922:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010926:	4618      	mov	r0, r3
 8010928:	3720      	adds	r7, #32
 801092a:	46bd      	mov	sp, r7
 801092c:	bdb0      	pop	{r4, r5, r7, pc}
 801092e:	bf00      	nop
 8010930:	2000ad10 	.word	0x2000ad10

08010934 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b08c      	sub	sp, #48	; 0x30
 8010938:	af04      	add	r7, sp, #16
 801093a:	60f8      	str	r0, [r7, #12]
 801093c:	60b9      	str	r1, [r7, #8]
 801093e:	607a      	str	r2, [r7, #4]
 8010940:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8010942:	2200      	movs	r2, #0
 8010944:	2114      	movs	r1, #20
 8010946:	2001      	movs	r0, #1
 8010948:	f7fa fa9a 	bl	800ae80 <pbuf_alloc>
 801094c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801094e:	69fb      	ldr	r3, [r7, #28]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d05b      	beq.n	8010a0c <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010954:	69fb      	ldr	r3, [r7, #28]
 8010956:	895b      	ldrh	r3, [r3, #10]
 8010958:	2b13      	cmp	r3, #19
 801095a:	d806      	bhi.n	801096a <tcp_rst+0x36>
 801095c:	4b2d      	ldr	r3, [pc, #180]	; (8010a14 <tcp_rst+0xe0>)
 801095e:	f240 524d 	movw	r2, #1357	; 0x54d
 8010962:	492d      	ldr	r1, [pc, #180]	; (8010a18 <tcp_rst+0xe4>)
 8010964:	482d      	ldr	r0, [pc, #180]	; (8010a1c <tcp_rst+0xe8>)
 8010966:	f003 faa3 	bl	8013eb0 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 801096a:	69fb      	ldr	r3, [r7, #28]
 801096c:	685b      	ldr	r3, [r3, #4]
 801096e:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8010970:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010972:	4618      	mov	r0, r3
 8010974:	f7f9 fc06 	bl	800a184 <lwip_htons>
 8010978:	4603      	mov	r3, r0
 801097a:	461a      	mov	r2, r3
 801097c:	69bb      	ldr	r3, [r7, #24]
 801097e:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8010980:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010982:	4618      	mov	r0, r3
 8010984:	f7f9 fbfe 	bl	800a184 <lwip_htons>
 8010988:	4603      	mov	r3, r0
 801098a:	461a      	mov	r2, r3
 801098c:	69bb      	ldr	r3, [r7, #24]
 801098e:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8010990:	68f8      	ldr	r0, [r7, #12]
 8010992:	f7f9 fc04 	bl	800a19e <lwip_htonl>
 8010996:	4602      	mov	r2, r0
 8010998:	69bb      	ldr	r3, [r7, #24]
 801099a:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 801099c:	68b8      	ldr	r0, [r7, #8]
 801099e:	f7f9 fbfe 	bl	800a19e <lwip_htonl>
 80109a2:	4602      	mov	r2, r0
 80109a4:	69bb      	ldr	r3, [r7, #24]
 80109a6:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 80109a8:	f245 0014 	movw	r0, #20500	; 0x5014
 80109ac:	f7f9 fbea 	bl	800a184 <lwip_htons>
 80109b0:	4603      	mov	r3, r0
 80109b2:	461a      	mov	r2, r3
 80109b4:	69bb      	ldr	r3, [r7, #24]
 80109b6:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 80109b8:	69bb      	ldr	r3, [r7, #24]
 80109ba:	2200      	movs	r2, #0
 80109bc:	f042 0208 	orr.w	r2, r2, #8
 80109c0:	739a      	strb	r2, [r3, #14]
 80109c2:	2200      	movs	r2, #0
 80109c4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80109c8:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 80109ca:	69bb      	ldr	r3, [r7, #24]
 80109cc:	2200      	movs	r2, #0
 80109ce:	741a      	strb	r2, [r3, #16]
 80109d0:	2200      	movs	r2, #0
 80109d2:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 80109d4:	69bb      	ldr	r3, [r7, #24]
 80109d6:	2200      	movs	r2, #0
 80109d8:	749a      	strb	r2, [r3, #18]
 80109da:	2200      	movs	r2, #0
 80109dc:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 80109de:	6838      	ldr	r0, [r7, #0]
 80109e0:	f001 fef6 	bl	80127d0 <ip4_route>
 80109e4:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d00b      	beq.n	8010a04 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	9302      	str	r3, [sp, #8]
 80109f0:	2306      	movs	r3, #6
 80109f2:	9301      	str	r3, [sp, #4]
 80109f4:	2300      	movs	r3, #0
 80109f6:	9300      	str	r3, [sp, #0]
 80109f8:	23ff      	movs	r3, #255	; 0xff
 80109fa:	683a      	ldr	r2, [r7, #0]
 80109fc:	6879      	ldr	r1, [r7, #4]
 80109fe:	69f8      	ldr	r0, [r7, #28]
 8010a00:	f002 f88e 	bl	8012b20 <ip4_output_if>
  }
  pbuf_free(p);
 8010a04:	69f8      	ldr	r0, [r7, #28]
 8010a06:	f7fa fdad 	bl	800b564 <pbuf_free>
 8010a0a:	e000      	b.n	8010a0e <tcp_rst+0xda>
    return;
 8010a0c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010a0e:	3720      	adds	r7, #32
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}
 8010a14:	0801666c 	.word	0x0801666c
 8010a18:	080166a0 	.word	0x080166a0
 8010a1c:	080166d0 	.word	0x080166d0

08010a20 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b084      	sub	sp, #16
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d029      	beq.n	8010a84 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a34:	60fb      	str	r3, [r7, #12]
 8010a36:	e002      	b.n	8010a3e <tcp_rexmit_rto+0x1e>
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	60fb      	str	r3, [r7, #12]
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d1f8      	bne.n	8010a38 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	2200      	movs	r2, #0
 8010a5a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010a62:	2bff      	cmp	r3, #255	; 0xff
 8010a64:	d007      	beq.n	8010a76 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010a6c:	3301      	adds	r3, #1
 8010a6e:	b2da      	uxtb	r2, r3
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f7ff fccf 	bl	8010420 <tcp_output>
 8010a82:	e000      	b.n	8010a86 <tcp_rexmit_rto+0x66>
    return;
 8010a84:	bf00      	nop
}
 8010a86:	3710      	adds	r7, #16
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}

08010a8c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010a8c:	b590      	push	{r4, r7, lr}
 8010a8e:	b085      	sub	sp, #20
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d043      	beq.n	8010b24 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010aa0:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8010aa2:	68bb      	ldr	r3, [r7, #8]
 8010aa4:	681a      	ldr	r2, [r3, #0]
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	3368      	adds	r3, #104	; 0x68
 8010aae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010ab0:	e002      	b.n	8010ab8 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d011      	beq.n	8010ae4 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	68db      	ldr	r3, [r3, #12]
 8010ac6:	685b      	ldr	r3, [r3, #4]
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7f9 fb68 	bl	800a19e <lwip_htonl>
 8010ace:	4604      	mov	r4, r0
 8010ad0:	68bb      	ldr	r3, [r7, #8]
 8010ad2:	68db      	ldr	r3, [r3, #12]
 8010ad4:	685b      	ldr	r3, [r3, #4]
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f7f9 fb61 	bl	800a19e <lwip_htonl>
 8010adc:	4603      	mov	r3, r0
 8010ade:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	dbe6      	blt.n	8010ab2 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	681a      	ldr	r2, [r3, #0]
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	68ba      	ldr	r2, [r7, #8]
 8010af0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d103      	bne.n	8010b02 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2200      	movs	r2, #0
 8010afe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b08:	2bff      	cmp	r3, #255	; 0xff
 8010b0a:	d007      	beq.n	8010b1c <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b12:	3301      	adds	r3, #1
 8010b14:	b2da      	uxtb	r2, r3
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	635a      	str	r2, [r3, #52]	; 0x34
 8010b22:	e000      	b.n	8010b26 <tcp_rexmit+0x9a>
    return;
 8010b24:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8010b26:	3714      	adds	r7, #20
 8010b28:	46bd      	mov	sp, r7
 8010b2a:	bd90      	pop	{r4, r7, pc}

08010b2c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b082      	sub	sp, #8
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d04a      	beq.n	8010bd2 <tcp_rexmit_fast+0xa6>
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	7e9b      	ldrb	r3, [r3, #26]
 8010b40:	f003 0304 	and.w	r3, r3, #4
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d144      	bne.n	8010bd2 <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f7ff ff9f 	bl	8010a8c <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b5a:	429a      	cmp	r2, r3
 8010b5c:	d207      	bcs.n	8010b6e <tcp_rexmit_fast+0x42>
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010b64:	0fda      	lsrs	r2, r3, #31
 8010b66:	4413      	add	r3, r2
 8010b68:	105b      	asrs	r3, r3, #1
 8010b6a:	b29b      	uxth	r3, r3
 8010b6c:	e006      	b.n	8010b7c <tcp_rexmit_fast+0x50>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b74:	0fda      	lsrs	r2, r3, #31
 8010b76:	4413      	add	r3, r2
 8010b78:	105b      	asrs	r3, r3, #1
 8010b7a:	b29b      	uxth	r3, r3
 8010b7c:	687a      	ldr	r2, [r7, #4]
 8010b7e:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010b88:	461a      	mov	r2, r3
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b8e:	005b      	lsls	r3, r3, #1
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d206      	bcs.n	8010ba2 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b98:	005b      	lsls	r3, r3, #1
 8010b9a:	b29a      	uxth	r2, r3
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bac:	4619      	mov	r1, r3
 8010bae:	0049      	lsls	r1, r1, #1
 8010bb0:	440b      	add	r3, r1
 8010bb2:	b29b      	uxth	r3, r3
 8010bb4:	4413      	add	r3, r2
 8010bb6:	b29a      	uxth	r2, r3
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	7e9b      	ldrb	r3, [r3, #26]
 8010bc2:	f043 0304 	orr.w	r3, r3, #4
 8010bc6:	b2da      	uxtb	r2, r3
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8010bd2:	bf00      	nop
 8010bd4:	3708      	adds	r7, #8
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}

08010bda <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010bda:	b580      	push	{r7, lr}
 8010bdc:	b08a      	sub	sp, #40	; 0x28
 8010bde:	af04      	add	r7, sp, #16
 8010be0:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010be6:	3b01      	subs	r3, #1
 8010be8:	4618      	mov	r0, r3
 8010bea:	f7f9 fad8 	bl	800a19e <lwip_htonl>
 8010bee:	4603      	mov	r3, r0
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	2100      	movs	r1, #0
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f7fe fd45 	bl	800f684 <tcp_output_alloc_header>
 8010bfa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d102      	bne.n	8010c08 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010c02:	f04f 33ff 	mov.w	r3, #4294967295
 8010c06:	e021      	b.n	8010c4c <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	3304      	adds	r3, #4
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f001 fddf 	bl	80127d0 <ip4_route>
 8010c12:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d102      	bne.n	8010c20 <tcp_keepalive+0x46>
    err = ERR_RTE;
 8010c1a:	23fc      	movs	r3, #252	; 0xfc
 8010c1c:	75fb      	strb	r3, [r7, #23]
 8010c1e:	e010      	b.n	8010c42 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8010c20:	6879      	ldr	r1, [r7, #4]
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	1d1a      	adds	r2, r3, #4
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	7a98      	ldrb	r0, [r3, #10]
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	9302      	str	r3, [sp, #8]
 8010c2e:	2306      	movs	r3, #6
 8010c30:	9301      	str	r3, [sp, #4]
 8010c32:	2300      	movs	r3, #0
 8010c34:	9300      	str	r3, [sp, #0]
 8010c36:	4603      	mov	r3, r0
 8010c38:	6938      	ldr	r0, [r7, #16]
 8010c3a:	f001 ff71 	bl	8012b20 <ip4_output_if>
 8010c3e:	4603      	mov	r3, r0
 8010c40:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8010c42:	6938      	ldr	r0, [r7, #16]
 8010c44:	f7fa fc8e 	bl	800b564 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010c48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3718      	adds	r7, #24
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}

08010c54 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010c54:	b590      	push	{r4, r7, lr}
 8010c56:	b08f      	sub	sp, #60	; 0x3c
 8010c58:	af04      	add	r7, sp, #16
 8010c5a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c60:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8010c62:	6a3b      	ldr	r3, [r7, #32]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d102      	bne.n	8010c6e <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c6c:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8010c6e:	6a3b      	ldr	r3, [r7, #32]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d101      	bne.n	8010c78 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8010c74:	2300      	movs	r3, #0
 8010c76:	e085      	b.n	8010d84 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010c78:	6a3b      	ldr	r3, [r7, #32]
 8010c7a:	68db      	ldr	r3, [r3, #12]
 8010c7c:	899b      	ldrh	r3, [r3, #12]
 8010c7e:	b29b      	uxth	r3, r3
 8010c80:	4618      	mov	r0, r3
 8010c82:	f7f9 fa7f 	bl	800a184 <lwip_htons>
 8010c86:	4603      	mov	r3, r0
 8010c88:	f003 0301 	and.w	r3, r3, #1
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d005      	beq.n	8010c9c <tcp_zero_window_probe+0x48>
 8010c90:	6a3b      	ldr	r3, [r7, #32]
 8010c92:	891b      	ldrh	r3, [r3, #8]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d101      	bne.n	8010c9c <tcp_zero_window_probe+0x48>
 8010c98:	2301      	movs	r3, #1
 8010c9a:	e000      	b.n	8010c9e <tcp_zero_window_probe+0x4a>
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010ca0:	7ffb      	ldrb	r3, [r7, #31]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	bf0c      	ite	eq
 8010ca6:	2301      	moveq	r3, #1
 8010ca8:	2300      	movne	r3, #0
 8010caa:	b2db      	uxtb	r3, r3
 8010cac:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8010cae:	6a3b      	ldr	r3, [r7, #32]
 8010cb0:	68db      	ldr	r3, [r3, #12]
 8010cb2:	685b      	ldr	r3, [r3, #4]
 8010cb4:	8bba      	ldrh	r2, [r7, #28]
 8010cb6:	2100      	movs	r1, #0
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f7fe fce3 	bl	800f684 <tcp_output_alloc_header>
 8010cbe:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010cc0:	69bb      	ldr	r3, [r7, #24]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d102      	bne.n	8010ccc <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8010cca:	e05b      	b.n	8010d84 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010ccc:	69bb      	ldr	r3, [r7, #24]
 8010cce:	685b      	ldr	r3, [r3, #4]
 8010cd0:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010cd2:	7ffb      	ldrb	r3, [r7, #31]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d00e      	beq.n	8010cf6 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	899b      	ldrh	r3, [r3, #12]
 8010cdc:	b29b      	uxth	r3, r3
 8010cde:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010ce2:	b29c      	uxth	r4, r3
 8010ce4:	2011      	movs	r0, #17
 8010ce6:	f7f9 fa4d 	bl	800a184 <lwip_htons>
 8010cea:	4603      	mov	r3, r0
 8010cec:	4323      	orrs	r3, r4
 8010cee:	b29a      	uxth	r2, r3
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	819a      	strh	r2, [r3, #12]
 8010cf4:	e010      	b.n	8010d18 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010cf6:	69bb      	ldr	r3, [r7, #24]
 8010cf8:	685b      	ldr	r3, [r3, #4]
 8010cfa:	3314      	adds	r3, #20
 8010cfc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010cfe:	6a3b      	ldr	r3, [r7, #32]
 8010d00:	6858      	ldr	r0, [r3, #4]
 8010d02:	6a3b      	ldr	r3, [r7, #32]
 8010d04:	685b      	ldr	r3, [r3, #4]
 8010d06:	891a      	ldrh	r2, [r3, #8]
 8010d08:	6a3b      	ldr	r3, [r7, #32]
 8010d0a:	891b      	ldrh	r3, [r3, #8]
 8010d0c:	1ad3      	subs	r3, r2, r3
 8010d0e:	b29b      	uxth	r3, r3
 8010d10:	2201      	movs	r2, #1
 8010d12:	6939      	ldr	r1, [r7, #16]
 8010d14:	f7fa fe20 	bl	800b958 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010d18:	6a3b      	ldr	r3, [r7, #32]
 8010d1a:	68db      	ldr	r3, [r3, #12]
 8010d1c:	685b      	ldr	r3, [r3, #4]
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f7f9 fa3d 	bl	800a19e <lwip_htonl>
 8010d24:	4603      	mov	r3, r0
 8010d26:	3301      	adds	r3, #1
 8010d28:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	1ad3      	subs	r3, r2, r3
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	da02      	bge.n	8010d3c <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	68fa      	ldr	r2, [r7, #12]
 8010d3a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	3304      	adds	r3, #4
 8010d40:	4618      	mov	r0, r3
 8010d42:	f001 fd45 	bl	80127d0 <ip4_route>
 8010d46:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d103      	bne.n	8010d56 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8010d4e:	23fc      	movs	r3, #252	; 0xfc
 8010d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010d54:	e011      	b.n	8010d7a <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010d56:	6879      	ldr	r1, [r7, #4]
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	1d1a      	adds	r2, r3, #4
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	7a98      	ldrb	r0, [r3, #10]
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	9302      	str	r3, [sp, #8]
 8010d64:	2306      	movs	r3, #6
 8010d66:	9301      	str	r3, [sp, #4]
 8010d68:	2300      	movs	r3, #0
 8010d6a:	9300      	str	r3, [sp, #0]
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	69b8      	ldr	r0, [r7, #24]
 8010d70:	f001 fed6 	bl	8012b20 <ip4_output_if>
 8010d74:	4603      	mov	r3, r0
 8010d76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8010d7a:	69b8      	ldr	r0, [r7, #24]
 8010d7c:	f7fa fbf2 	bl	800b564 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010d80:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	372c      	adds	r7, #44	; 0x2c
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd90      	pop	{r4, r7, pc}

08010d8c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010d94:	f7fa fe60 	bl	800ba58 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010d98:	4b0a      	ldr	r3, [pc, #40]	; (8010dc4 <tcpip_tcp_timer+0x38>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d103      	bne.n	8010da8 <tcpip_tcp_timer+0x1c>
 8010da0:	4b09      	ldr	r3, [pc, #36]	; (8010dc8 <tcpip_tcp_timer+0x3c>)
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d005      	beq.n	8010db4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010da8:	2200      	movs	r2, #0
 8010daa:	4908      	ldr	r1, [pc, #32]	; (8010dcc <tcpip_tcp_timer+0x40>)
 8010dac:	20fa      	movs	r0, #250	; 0xfa
 8010dae:	f000 f86f 	bl	8010e90 <sys_timeout>
 8010db2:	e002      	b.n	8010dba <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010db4:	4b06      	ldr	r3, [pc, #24]	; (8010dd0 <tcpip_tcp_timer+0x44>)
 8010db6:	2200      	movs	r2, #0
 8010db8:	601a      	str	r2, [r3, #0]
  }
}
 8010dba:	bf00      	nop
 8010dbc:	3708      	adds	r7, #8
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}
 8010dc2:	bf00      	nop
 8010dc4:	2000ad0c 	.word	0x2000ad0c
 8010dc8:	2000ad1c 	.word	0x2000ad1c
 8010dcc:	08010d8d 	.word	0x08010d8d
 8010dd0:	20002998 	.word	0x20002998

08010dd4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010dd8:	4b0a      	ldr	r3, [pc, #40]	; (8010e04 <tcp_timer_needed+0x30>)
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d10f      	bne.n	8010e00 <tcp_timer_needed+0x2c>
 8010de0:	4b09      	ldr	r3, [pc, #36]	; (8010e08 <tcp_timer_needed+0x34>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d103      	bne.n	8010df0 <tcp_timer_needed+0x1c>
 8010de8:	4b08      	ldr	r3, [pc, #32]	; (8010e0c <tcp_timer_needed+0x38>)
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d007      	beq.n	8010e00 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010df0:	4b04      	ldr	r3, [pc, #16]	; (8010e04 <tcp_timer_needed+0x30>)
 8010df2:	2201      	movs	r2, #1
 8010df4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010df6:	2200      	movs	r2, #0
 8010df8:	4905      	ldr	r1, [pc, #20]	; (8010e10 <tcp_timer_needed+0x3c>)
 8010dfa:	20fa      	movs	r0, #250	; 0xfa
 8010dfc:	f000 f848 	bl	8010e90 <sys_timeout>
  }
}
 8010e00:	bf00      	nop
 8010e02:	bd80      	pop	{r7, pc}
 8010e04:	20002998 	.word	0x20002998
 8010e08:	2000ad0c 	.word	0x2000ad0c
 8010e0c:	2000ad1c 	.word	0x2000ad1c
 8010e10:	08010d8d 	.word	0x08010d8d

08010e14 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b084      	sub	sp, #16
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	685b      	ldr	r3, [r3, #4]
 8010e24:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	687a      	ldr	r2, [r7, #4]
 8010e2c:	4903      	ldr	r1, [pc, #12]	; (8010e3c <cyclic_timer+0x28>)
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f000 f82e 	bl	8010e90 <sys_timeout>
}
 8010e34:	bf00      	nop
 8010e36:	3710      	adds	r7, #16
 8010e38:	46bd      	mov	sp, r7
 8010e3a:	bd80      	pop	{r7, pc}
 8010e3c:	08010e15 	.word	0x08010e15

08010e40 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b082      	sub	sp, #8
 8010e44:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010e46:	2301      	movs	r3, #1
 8010e48:	607b      	str	r3, [r7, #4]
 8010e4a:	e00e      	b.n	8010e6a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8010e4c:	4a0d      	ldr	r2, [pc, #52]	; (8010e84 <sys_timeouts_init+0x44>)
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	00db      	lsls	r3, r3, #3
 8010e58:	4a0a      	ldr	r2, [pc, #40]	; (8010e84 <sys_timeouts_init+0x44>)
 8010e5a:	4413      	add	r3, r2
 8010e5c:	461a      	mov	r2, r3
 8010e5e:	490a      	ldr	r1, [pc, #40]	; (8010e88 <sys_timeouts_init+0x48>)
 8010e60:	f000 f816 	bl	8010e90 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	3301      	adds	r3, #1
 8010e68:	607b      	str	r3, [r7, #4]
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2b02      	cmp	r3, #2
 8010e6e:	d9ed      	bls.n	8010e4c <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8010e70:	f7f3 fb52 	bl	8004518 <sys_now>
 8010e74:	4602      	mov	r2, r0
 8010e76:	4b05      	ldr	r3, [pc, #20]	; (8010e8c <sys_timeouts_init+0x4c>)
 8010e78:	601a      	str	r2, [r3, #0]
}
 8010e7a:	bf00      	nop
 8010e7c:	3708      	adds	r7, #8
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}
 8010e82:	bf00      	nop
 8010e84:	080173bc 	.word	0x080173bc
 8010e88:	08010e15 	.word	0x08010e15
 8010e8c:	20002994 	.word	0x20002994

08010e90 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b088      	sub	sp, #32
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	60f8      	str	r0, [r7, #12]
 8010e98:	60b9      	str	r1, [r7, #8]
 8010e9a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010e9c:	200a      	movs	r0, #10
 8010e9e:	f7f9 fd5b 	bl	800a958 <memp_malloc>
 8010ea2:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d10a      	bne.n	8010ec0 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010eaa:	697b      	ldr	r3, [r7, #20]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	f040 8084 	bne.w	8010fba <sys_timeout+0x12a>
 8010eb2:	4b44      	ldr	r3, [pc, #272]	; (8010fc4 <sys_timeout+0x134>)
 8010eb4:	22d4      	movs	r2, #212	; 0xd4
 8010eb6:	4944      	ldr	r1, [pc, #272]	; (8010fc8 <sys_timeout+0x138>)
 8010eb8:	4844      	ldr	r0, [pc, #272]	; (8010fcc <sys_timeout+0x13c>)
 8010eba:	f002 fff9 	bl	8013eb0 <iprintf>
    return;
 8010ebe:	e07c      	b.n	8010fba <sys_timeout+0x12a>
  }

  now = sys_now();
 8010ec0:	f7f3 fb2a 	bl	8004518 <sys_now>
 8010ec4:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8010ec6:	4b42      	ldr	r3, [pc, #264]	; (8010fd0 <sys_timeout+0x140>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d105      	bne.n	8010eda <sys_timeout+0x4a>
    diff = 0;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8010ed2:	4a40      	ldr	r2, [pc, #256]	; (8010fd4 <sys_timeout+0x144>)
 8010ed4:	693b      	ldr	r3, [r7, #16]
 8010ed6:	6013      	str	r3, [r2, #0]
 8010ed8:	e004      	b.n	8010ee4 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8010eda:	4b3e      	ldr	r3, [pc, #248]	; (8010fd4 <sys_timeout+0x144>)
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	693a      	ldr	r2, [r7, #16]
 8010ee0:	1ad3      	subs	r3, r2, r3
 8010ee2:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	68ba      	ldr	r2, [r7, #8]
 8010eee:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	687a      	ldr	r2, [r7, #4]
 8010ef4:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8010ef6:	68fa      	ldr	r2, [r7, #12]
 8010ef8:	69bb      	ldr	r3, [r7, #24]
 8010efa:	441a      	add	r2, r3
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010f00:	4b33      	ldr	r3, [pc, #204]	; (8010fd0 <sys_timeout+0x140>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d103      	bne.n	8010f10 <sys_timeout+0x80>
    next_timeout = timeout;
 8010f08:	4a31      	ldr	r2, [pc, #196]	; (8010fd0 <sys_timeout+0x140>)
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	6013      	str	r3, [r2, #0]
    return;
 8010f0e:	e055      	b.n	8010fbc <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8010f10:	4b2f      	ldr	r3, [pc, #188]	; (8010fd0 <sys_timeout+0x140>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	685b      	ldr	r3, [r3, #4]
 8010f16:	68fa      	ldr	r2, [r7, #12]
 8010f18:	429a      	cmp	r2, r3
 8010f1a:	d20f      	bcs.n	8010f3c <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8010f1c:	4b2c      	ldr	r3, [pc, #176]	; (8010fd0 <sys_timeout+0x140>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	6859      	ldr	r1, [r3, #4]
 8010f22:	4b2b      	ldr	r3, [pc, #172]	; (8010fd0 <sys_timeout+0x140>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	68fa      	ldr	r2, [r7, #12]
 8010f28:	1a8a      	subs	r2, r1, r2
 8010f2a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8010f2c:	4b28      	ldr	r3, [pc, #160]	; (8010fd0 <sys_timeout+0x140>)
 8010f2e:	681a      	ldr	r2, [r3, #0]
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010f34:	4a26      	ldr	r2, [pc, #152]	; (8010fd0 <sys_timeout+0x140>)
 8010f36:	697b      	ldr	r3, [r7, #20]
 8010f38:	6013      	str	r3, [r2, #0]
 8010f3a:	e03f      	b.n	8010fbc <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010f3c:	4b24      	ldr	r3, [pc, #144]	; (8010fd0 <sys_timeout+0x140>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	61fb      	str	r3, [r7, #28]
 8010f42:	e036      	b.n	8010fb2 <sys_timeout+0x122>
      timeout->time -= t->time;
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	685a      	ldr	r2, [r3, #4]
 8010f48:	69fb      	ldr	r3, [r7, #28]
 8010f4a:	685b      	ldr	r3, [r3, #4]
 8010f4c:	1ad2      	subs	r2, r2, r3
 8010f4e:	697b      	ldr	r3, [r7, #20]
 8010f50:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d006      	beq.n	8010f68 <sys_timeout+0xd8>
 8010f5a:	69fb      	ldr	r3, [r7, #28]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	685a      	ldr	r2, [r3, #4]
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	685b      	ldr	r3, [r3, #4]
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d921      	bls.n	8010fac <sys_timeout+0x11c>
        if (t->next != NULL) {
 8010f68:	69fb      	ldr	r3, [r7, #28]
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d009      	beq.n	8010f84 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8010f70:	69fb      	ldr	r3, [r7, #28]
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	6859      	ldr	r1, [r3, #4]
 8010f76:	697b      	ldr	r3, [r7, #20]
 8010f78:	685a      	ldr	r2, [r3, #4]
 8010f7a:	69fb      	ldr	r3, [r7, #28]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	1a8a      	subs	r2, r1, r2
 8010f80:	605a      	str	r2, [r3, #4]
 8010f82:	e00b      	b.n	8010f9c <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	685b      	ldr	r3, [r3, #4]
 8010f88:	68fa      	ldr	r2, [r7, #12]
 8010f8a:	429a      	cmp	r2, r3
 8010f8c:	d206      	bcs.n	8010f9c <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8010f8e:	4b10      	ldr	r3, [pc, #64]	; (8010fd0 <sys_timeout+0x140>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	685a      	ldr	r2, [r3, #4]
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	441a      	add	r2, r3
 8010f98:	697b      	ldr	r3, [r7, #20]
 8010f9a:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8010f9c:	69fb      	ldr	r3, [r7, #28]
 8010f9e:	681a      	ldr	r2, [r3, #0]
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010fa4:	69fb      	ldr	r3, [r7, #28]
 8010fa6:	697a      	ldr	r2, [r7, #20]
 8010fa8:	601a      	str	r2, [r3, #0]
        break;
 8010faa:	e007      	b.n	8010fbc <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010fac:	69fb      	ldr	r3, [r7, #28]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	61fb      	str	r3, [r7, #28]
 8010fb2:	69fb      	ldr	r3, [r7, #28]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d1c5      	bne.n	8010f44 <sys_timeout+0xb4>
 8010fb8:	e000      	b.n	8010fbc <sys_timeout+0x12c>
    return;
 8010fba:	bf00      	nop
      }
    }
  }
}
 8010fbc:	3720      	adds	r7, #32
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}
 8010fc2:	bf00      	nop
 8010fc4:	08016ab0 	.word	0x08016ab0
 8010fc8:	08016ae4 	.word	0x08016ae4
 8010fcc:	08016b24 	.word	0x08016b24
 8010fd0:	20002990 	.word	0x20002990
 8010fd4:	20002994 	.word	0x20002994

08010fd8 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b086      	sub	sp, #24
 8010fdc:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8010fde:	4b24      	ldr	r3, [pc, #144]	; (8011070 <sys_check_timeouts+0x98>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d03f      	beq.n	8011066 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8010fe6:	f7f3 fa97 	bl	8004518 <sys_now>
 8010fea:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8010fec:	4b21      	ldr	r3, [pc, #132]	; (8011074 <sys_check_timeouts+0x9c>)
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	68fa      	ldr	r2, [r7, #12]
 8010ff2:	1ad3      	subs	r3, r2, r3
 8010ff4:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8010ffa:	4b1d      	ldr	r3, [pc, #116]	; (8011070 <sys_check_timeouts+0x98>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8011000:	68bb      	ldr	r3, [r7, #8]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d02c      	beq.n	8011060 <sys_check_timeouts+0x88>
 8011006:	68bb      	ldr	r3, [r7, #8]
 8011008:	685b      	ldr	r3, [r3, #4]
 801100a:	697a      	ldr	r2, [r7, #20]
 801100c:	429a      	cmp	r2, r3
 801100e:	d327      	bcc.n	8011060 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8011010:	2301      	movs	r3, #1
 8011012:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8011014:	68bb      	ldr	r3, [r7, #8]
 8011016:	685a      	ldr	r2, [r3, #4]
 8011018:	4b16      	ldr	r3, [pc, #88]	; (8011074 <sys_check_timeouts+0x9c>)
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	4413      	add	r3, r2
 801101e:	4a15      	ldr	r2, [pc, #84]	; (8011074 <sys_check_timeouts+0x9c>)
 8011020:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	685b      	ldr	r3, [r3, #4]
 8011026:	697a      	ldr	r2, [r7, #20]
 8011028:	1ad3      	subs	r3, r2, r3
 801102a:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	4a0f      	ldr	r2, [pc, #60]	; (8011070 <sys_check_timeouts+0x98>)
 8011032:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	689b      	ldr	r3, [r3, #8]
 8011038:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	68db      	ldr	r3, [r3, #12]
 801103e:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011040:	68b9      	ldr	r1, [r7, #8]
 8011042:	200a      	movs	r0, #10
 8011044:	f7f9 fcda 	bl	800a9fc <memp_free>
        if (handler != NULL) {
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d008      	beq.n	8011060 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 801104e:	480a      	ldr	r0, [pc, #40]	; (8011078 <sys_check_timeouts+0xa0>)
 8011050:	f002 fe8e 	bl	8013d70 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	6838      	ldr	r0, [r7, #0]
 8011058:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 801105a:	4807      	ldr	r0, [pc, #28]	; (8011078 <sys_check_timeouts+0xa0>)
 801105c:	f002 fe97 	bl	8013d8e <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8011060:	7cfb      	ldrb	r3, [r7, #19]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1c7      	bne.n	8010ff6 <sys_check_timeouts+0x1e>
  }
}
 8011066:	bf00      	nop
 8011068:	3718      	adds	r7, #24
 801106a:	46bd      	mov	sp, r7
 801106c:	bd80      	pop	{r7, pc}
 801106e:	bf00      	nop
 8011070:	20002990 	.word	0x20002990
 8011074:	20002994 	.word	0x20002994
 8011078:	20007468 	.word	0x20007468

0801107c <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b082      	sub	sp, #8
 8011080:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8011082:	4b0f      	ldr	r3, [pc, #60]	; (80110c0 <sys_timeouts_sleeptime+0x44>)
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d102      	bne.n	8011090 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 801108a:	f04f 33ff 	mov.w	r3, #4294967295
 801108e:	e013      	b.n	80110b8 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8011090:	f7f3 fa42 	bl	8004518 <sys_now>
 8011094:	4602      	mov	r2, r0
 8011096:	4b0b      	ldr	r3, [pc, #44]	; (80110c4 <sys_timeouts_sleeptime+0x48>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	1ad3      	subs	r3, r2, r3
 801109c:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 801109e:	4b08      	ldr	r3, [pc, #32]	; (80110c0 <sys_timeouts_sleeptime+0x44>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	685b      	ldr	r3, [r3, #4]
 80110a4:	687a      	ldr	r2, [r7, #4]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d901      	bls.n	80110ae <sys_timeouts_sleeptime+0x32>
    return 0;
 80110aa:	2300      	movs	r3, #0
 80110ac:	e004      	b.n	80110b8 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 80110ae:	4b04      	ldr	r3, [pc, #16]	; (80110c0 <sys_timeouts_sleeptime+0x44>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	685a      	ldr	r2, [r3, #4]
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	1ad3      	subs	r3, r2, r3
  }
}
 80110b8:	4618      	mov	r0, r3
 80110ba:	3708      	adds	r7, #8
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}
 80110c0:	20002990 	.word	0x20002990
 80110c4:	20002994 	.word	0x20002994

080110c8 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b084      	sub	sp, #16
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
 80110d0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 80110d2:	4b0f      	ldr	r3, [pc, #60]	; (8011110 <sys_timeouts_mbox_fetch+0x48>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d105      	bne.n	80110e6 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80110da:	2200      	movs	r2, #0
 80110dc:	6839      	ldr	r1, [r7, #0]
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f002 fd33 	bl	8013b4a <sys_arch_mbox_fetch>
    return;
 80110e4:	e011      	b.n	801110a <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 80110e6:	f7ff ffc9 	bl	801107c <sys_timeouts_sleeptime>
 80110ea:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d008      	beq.n	8011104 <sys_timeouts_mbox_fetch+0x3c>
 80110f2:	68fa      	ldr	r2, [r7, #12]
 80110f4:	6839      	ldr	r1, [r7, #0]
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f002 fd27 	bl	8013b4a <sys_arch_mbox_fetch>
 80110fc:	4603      	mov	r3, r0
 80110fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011102:	d102      	bne.n	801110a <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011104:	f7ff ff68 	bl	8010fd8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011108:	e7e3      	b.n	80110d2 <sys_timeouts_mbox_fetch+0xa>
  }
}
 801110a:	3710      	adds	r7, #16
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}
 8011110:	20002990 	.word	0x20002990

08011114 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011114:	b480      	push	{r7}
 8011116:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8011118:	bf00      	nop
 801111a:	46bd      	mov	sp, r7
 801111c:	bc80      	pop	{r7}
 801111e:	4770      	bx	lr

08011120 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011120:	b480      	push	{r7}
 8011122:	b083      	sub	sp, #12
 8011124:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011126:	2300      	movs	r3, #0
 8011128:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801112a:	4b17      	ldr	r3, [pc, #92]	; (8011188 <udp_new_port+0x68>)
 801112c:	881b      	ldrh	r3, [r3, #0]
 801112e:	1c5a      	adds	r2, r3, #1
 8011130:	b291      	uxth	r1, r2
 8011132:	4a15      	ldr	r2, [pc, #84]	; (8011188 <udp_new_port+0x68>)
 8011134:	8011      	strh	r1, [r2, #0]
 8011136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801113a:	4293      	cmp	r3, r2
 801113c:	d103      	bne.n	8011146 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801113e:	4b12      	ldr	r3, [pc, #72]	; (8011188 <udp_new_port+0x68>)
 8011140:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011144:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011146:	4b11      	ldr	r3, [pc, #68]	; (801118c <udp_new_port+0x6c>)
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	603b      	str	r3, [r7, #0]
 801114c:	e011      	b.n	8011172 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	8a5a      	ldrh	r2, [r3, #18]
 8011152:	4b0d      	ldr	r3, [pc, #52]	; (8011188 <udp_new_port+0x68>)
 8011154:	881b      	ldrh	r3, [r3, #0]
 8011156:	429a      	cmp	r2, r3
 8011158:	d108      	bne.n	801116c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801115a:	88fb      	ldrh	r3, [r7, #6]
 801115c:	3301      	adds	r3, #1
 801115e:	80fb      	strh	r3, [r7, #6]
 8011160:	88fb      	ldrh	r3, [r7, #6]
 8011162:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011166:	d3e0      	bcc.n	801112a <udp_new_port+0xa>
        return 0;
 8011168:	2300      	movs	r3, #0
 801116a:	e007      	b.n	801117c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	68db      	ldr	r3, [r3, #12]
 8011170:	603b      	str	r3, [r7, #0]
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d1ea      	bne.n	801114e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011178:	4b03      	ldr	r3, [pc, #12]	; (8011188 <udp_new_port+0x68>)
 801117a:	881b      	ldrh	r3, [r3, #0]
}
 801117c:	4618      	mov	r0, r3
 801117e:	370c      	adds	r7, #12
 8011180:	46bd      	mov	sp, r7
 8011182:	bc80      	pop	{r7}
 8011184:	4770      	bx	lr
 8011186:	bf00      	nop
 8011188:	20000018 	.word	0x20000018
 801118c:	2000ad24 	.word	0x2000ad24

08011190 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011190:	b480      	push	{r7}
 8011192:	b085      	sub	sp, #20
 8011194:	af00      	add	r7, sp, #0
 8011196:	60f8      	str	r0, [r7, #12]
 8011198:	60b9      	str	r1, [r7, #8]
 801119a:	4613      	mov	r3, r2
 801119c:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801119e:	79fb      	ldrb	r3, [r7, #7]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d018      	beq.n	80111d6 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d013      	beq.n	80111d2 <udp_input_local_match+0x42>
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d00f      	beq.n	80111d2 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80111b2:	4b13      	ldr	r3, [pc, #76]	; (8011200 <udp_input_local_match+0x70>)
 80111b4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80111b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111ba:	d00a      	beq.n	80111d2 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	681a      	ldr	r2, [r3, #0]
 80111c0:	4b0f      	ldr	r3, [pc, #60]	; (8011200 <udp_input_local_match+0x70>)
 80111c2:	695b      	ldr	r3, [r3, #20]
 80111c4:	405a      	eors	r2, r3
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	3308      	adds	r3, #8
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d110      	bne.n	80111f4 <udp_input_local_match+0x64>
          return 1;
 80111d2:	2301      	movs	r3, #1
 80111d4:	e00f      	b.n	80111f6 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d009      	beq.n	80111f0 <udp_input_local_match+0x60>
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d005      	beq.n	80111f0 <udp_input_local_match+0x60>
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	681a      	ldr	r2, [r3, #0]
 80111e8:	4b05      	ldr	r3, [pc, #20]	; (8011200 <udp_input_local_match+0x70>)
 80111ea:	695b      	ldr	r3, [r3, #20]
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d101      	bne.n	80111f4 <udp_input_local_match+0x64>
      return 1;
 80111f0:	2301      	movs	r3, #1
 80111f2:	e000      	b.n	80111f6 <udp_input_local_match+0x66>
    }
  }

  return 0;
 80111f4:	2300      	movs	r3, #0
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3714      	adds	r7, #20
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bc80      	pop	{r7}
 80111fe:	4770      	bx	lr
 8011200:	2000746c 	.word	0x2000746c

08011204 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011204:	b590      	push	{r4, r7, lr}
 8011206:	b08d      	sub	sp, #52	; 0x34
 8011208:	af02      	add	r7, sp, #8
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801120e:	2300      	movs	r3, #0
 8011210:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	895b      	ldrh	r3, [r3, #10]
 8011216:	2b07      	cmp	r3, #7
 8011218:	d803      	bhi.n	8011222 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801121a:	6878      	ldr	r0, [r7, #4]
 801121c:	f7fa f9a2 	bl	800b564 <pbuf_free>
    goto end;
 8011220:	e0c6      	b.n	80113b0 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	685b      	ldr	r3, [r3, #4]
 8011226:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011228:	4b63      	ldr	r3, [pc, #396]	; (80113b8 <udp_input+0x1b4>)
 801122a:	695a      	ldr	r2, [r3, #20]
 801122c:	4b62      	ldr	r3, [pc, #392]	; (80113b8 <udp_input+0x1b4>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	4619      	mov	r1, r3
 8011232:	4610      	mov	r0, r2
 8011234:	f001 fd46 	bl	8012cc4 <ip4_addr_isbroadcast_u32>
 8011238:	4603      	mov	r3, r0
 801123a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	881b      	ldrh	r3, [r3, #0]
 8011240:	b29b      	uxth	r3, r3
 8011242:	4618      	mov	r0, r3
 8011244:	f7f8 ff9e 	bl	800a184 <lwip_htons>
 8011248:	4603      	mov	r3, r0
 801124a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801124c:	697b      	ldr	r3, [r7, #20]
 801124e:	885b      	ldrh	r3, [r3, #2]
 8011250:	b29b      	uxth	r3, r3
 8011252:	4618      	mov	r0, r3
 8011254:	f7f8 ff96 	bl	800a184 <lwip_htons>
 8011258:	4603      	mov	r3, r0
 801125a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801125c:	2300      	movs	r3, #0
 801125e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011260:	2300      	movs	r3, #0
 8011262:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011264:	2300      	movs	r3, #0
 8011266:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011268:	4b54      	ldr	r3, [pc, #336]	; (80113bc <udp_input+0x1b8>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	627b      	str	r3, [r7, #36]	; 0x24
 801126e:	e03b      	b.n	80112e8 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011272:	8a5b      	ldrh	r3, [r3, #18]
 8011274:	89fa      	ldrh	r2, [r7, #14]
 8011276:	429a      	cmp	r2, r3
 8011278:	d131      	bne.n	80112de <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801127a:	7cfb      	ldrb	r3, [r7, #19]
 801127c:	461a      	mov	r2, r3
 801127e:	6839      	ldr	r1, [r7, #0]
 8011280:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011282:	f7ff ff85 	bl	8011190 <udp_input_local_match>
 8011286:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011288:	2b00      	cmp	r3, #0
 801128a:	d028      	beq.n	80112de <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 801128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801128e:	7c1b      	ldrb	r3, [r3, #16]
 8011290:	f003 0304 	and.w	r3, r3, #4
 8011294:	2b00      	cmp	r3, #0
 8011296:	d104      	bne.n	80112a2 <udp_input+0x9e>
 8011298:	69fb      	ldr	r3, [r7, #28]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d101      	bne.n	80112a2 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 801129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a0:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80112a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a4:	8a9b      	ldrh	r3, [r3, #20]
 80112a6:	8a3a      	ldrh	r2, [r7, #16]
 80112a8:	429a      	cmp	r2, r3
 80112aa:	d118      	bne.n	80112de <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80112ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ae:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d005      	beq.n	80112c0 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80112b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112b6:	685a      	ldr	r2, [r3, #4]
 80112b8:	4b3f      	ldr	r3, [pc, #252]	; (80113b8 <udp_input+0x1b4>)
 80112ba:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80112bc:	429a      	cmp	r2, r3
 80112be:	d10e      	bne.n	80112de <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80112c0:	6a3b      	ldr	r3, [r7, #32]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d014      	beq.n	80112f0 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80112c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c8:	68da      	ldr	r2, [r3, #12]
 80112ca:	6a3b      	ldr	r3, [r7, #32]
 80112cc:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80112ce:	4b3b      	ldr	r3, [pc, #236]	; (80113bc <udp_input+0x1b8>)
 80112d0:	681a      	ldr	r2, [r3, #0]
 80112d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d4:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80112d6:	4a39      	ldr	r2, [pc, #228]	; (80113bc <udp_input+0x1b8>)
 80112d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112da:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80112dc:	e008      	b.n	80112f0 <udp_input+0xec>
      }
    }

    prev = pcb;
 80112de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e0:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80112e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e4:	68db      	ldr	r3, [r3, #12]
 80112e6:	627b      	str	r3, [r7, #36]	; 0x24
 80112e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d1c0      	bne.n	8011270 <udp_input+0x6c>
 80112ee:	e000      	b.n	80112f2 <udp_input+0xee>
        break;
 80112f0:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80112f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d101      	bne.n	80112fc <udp_input+0xf8>
    pcb = uncon_pcb;
 80112f8:	69fb      	ldr	r3, [r7, #28]
 80112fa:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80112fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d002      	beq.n	8011308 <udp_input+0x104>
    for_us = 1;
 8011302:	2301      	movs	r3, #1
 8011304:	76fb      	strb	r3, [r7, #27]
 8011306:	e00a      	b.n	801131e <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	3304      	adds	r3, #4
 801130c:	681a      	ldr	r2, [r3, #0]
 801130e:	4b2a      	ldr	r3, [pc, #168]	; (80113b8 <udp_input+0x1b4>)
 8011310:	695b      	ldr	r3, [r3, #20]
 8011312:	429a      	cmp	r2, r3
 8011314:	bf0c      	ite	eq
 8011316:	2301      	moveq	r3, #1
 8011318:	2300      	movne	r3, #0
 801131a:	b2db      	uxtb	r3, r3
 801131c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801131e:	7efb      	ldrb	r3, [r7, #27]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d042      	beq.n	80113aa <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8011324:	f06f 0107 	mvn.w	r1, #7
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f7fa f8f7 	bl	800b51c <pbuf_header>
 801132e:	4603      	mov	r3, r0
 8011330:	2b00      	cmp	r3, #0
 8011332:	d00a      	beq.n	801134a <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8011334:	4b22      	ldr	r3, [pc, #136]	; (80113c0 <udp_input+0x1bc>)
 8011336:	f240 1255 	movw	r2, #341	; 0x155
 801133a:	4922      	ldr	r1, [pc, #136]	; (80113c4 <udp_input+0x1c0>)
 801133c:	4822      	ldr	r0, [pc, #136]	; (80113c8 <udp_input+0x1c4>)
 801133e:	f002 fdb7 	bl	8013eb0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011342:	6878      	ldr	r0, [r7, #4]
 8011344:	f7fa f90e 	bl	800b564 <pbuf_free>
      goto end;
 8011348:	e032      	b.n	80113b0 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 801134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801134c:	2b00      	cmp	r3, #0
 801134e:	d012      	beq.n	8011376 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011352:	699b      	ldr	r3, [r3, #24]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d00a      	beq.n	801136e <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801135a:	699c      	ldr	r4, [r3, #24]
 801135c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801135e:	69d8      	ldr	r0, [r3, #28]
 8011360:	8a3b      	ldrh	r3, [r7, #16]
 8011362:	9300      	str	r3, [sp, #0]
 8011364:	4b19      	ldr	r3, [pc, #100]	; (80113cc <udp_input+0x1c8>)
 8011366:	687a      	ldr	r2, [r7, #4]
 8011368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801136a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801136c:	e021      	b.n	80113b2 <udp_input+0x1ae>
        pbuf_free(p);
 801136e:	6878      	ldr	r0, [r7, #4]
 8011370:	f7fa f8f8 	bl	800b564 <pbuf_free>
        goto end;
 8011374:	e01c      	b.n	80113b0 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011376:	7cfb      	ldrb	r3, [r7, #19]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d112      	bne.n	80113a2 <udp_input+0x19e>
 801137c:	4b0e      	ldr	r3, [pc, #56]	; (80113b8 <udp_input+0x1b4>)
 801137e:	695b      	ldr	r3, [r3, #20]
 8011380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011384:	2be0      	cmp	r3, #224	; 0xe0
 8011386:	d00c      	beq.n	80113a2 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011388:	4b0b      	ldr	r3, [pc, #44]	; (80113b8 <udp_input+0x1b4>)
 801138a:	899b      	ldrh	r3, [r3, #12]
 801138c:	3308      	adds	r3, #8
 801138e:	b29b      	uxth	r3, r3
 8011390:	b21b      	sxth	r3, r3
 8011392:	4619      	mov	r1, r3
 8011394:	6878      	ldr	r0, [r7, #4]
 8011396:	f7fa f8d3 	bl	800b540 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801139a:	2103      	movs	r1, #3
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	f001 f98f 	bl	80126c0 <icmp_dest_unreach>
      pbuf_free(p);
 80113a2:	6878      	ldr	r0, [r7, #4]
 80113a4:	f7fa f8de 	bl	800b564 <pbuf_free>
  return;
 80113a8:	e003      	b.n	80113b2 <udp_input+0x1ae>
    pbuf_free(p);
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f7fa f8da 	bl	800b564 <pbuf_free>
  return;
 80113b0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80113b2:	372c      	adds	r7, #44	; 0x2c
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd90      	pop	{r4, r7, pc}
 80113b8:	2000746c 	.word	0x2000746c
 80113bc:	2000ad24 	.word	0x2000ad24
 80113c0:	08016b4c 	.word	0x08016b4c
 80113c4:	08016b7c 	.word	0x08016b7c
 80113c8:	08016b90 	.word	0x08016b90
 80113cc:	2000747c 	.word	0x2000747c

080113d0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b086      	sub	sp, #24
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	60f8      	str	r0, [r7, #12]
 80113d8:	60b9      	str	r1, [r7, #8]
 80113da:	4613      	mov	r3, r2
 80113dc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d101      	bne.n	80113e8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80113e4:	4b30      	ldr	r3, [pc, #192]	; (80114a8 <udp_bind+0xd8>)
 80113e6:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d002      	beq.n	80113f4 <udp_bind+0x24>
 80113ee:	68bb      	ldr	r3, [r7, #8]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d102      	bne.n	80113fa <udp_bind+0x2a>
    return ERR_VAL;
 80113f4:	f06f 0305 	mvn.w	r3, #5
 80113f8:	e052      	b.n	80114a0 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80113fa:	2300      	movs	r3, #0
 80113fc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80113fe:	4b2b      	ldr	r3, [pc, #172]	; (80114ac <udp_bind+0xdc>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	617b      	str	r3, [r7, #20]
 8011404:	e009      	b.n	801141a <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011406:	68fa      	ldr	r2, [r7, #12]
 8011408:	697b      	ldr	r3, [r7, #20]
 801140a:	429a      	cmp	r2, r3
 801140c:	d102      	bne.n	8011414 <udp_bind+0x44>
      rebind = 1;
 801140e:	2301      	movs	r3, #1
 8011410:	74fb      	strb	r3, [r7, #19]
      break;
 8011412:	e005      	b.n	8011420 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011414:	697b      	ldr	r3, [r7, #20]
 8011416:	68db      	ldr	r3, [r3, #12]
 8011418:	617b      	str	r3, [r7, #20]
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d1f2      	bne.n	8011406 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8011420:	88fb      	ldrh	r3, [r7, #6]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d109      	bne.n	801143a <udp_bind+0x6a>
    port = udp_new_port();
 8011426:	f7ff fe7b 	bl	8011120 <udp_new_port>
 801142a:	4603      	mov	r3, r0
 801142c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801142e:	88fb      	ldrh	r3, [r7, #6]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d11e      	bne.n	8011472 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011434:	f06f 0307 	mvn.w	r3, #7
 8011438:	e032      	b.n	80114a0 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801143a:	4b1c      	ldr	r3, [pc, #112]	; (80114ac <udp_bind+0xdc>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	617b      	str	r3, [r7, #20]
 8011440:	e014      	b.n	801146c <udp_bind+0x9c>
      if (pcb != ipcb) {
 8011442:	68fa      	ldr	r2, [r7, #12]
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	429a      	cmp	r2, r3
 8011448:	d00d      	beq.n	8011466 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801144a:	697b      	ldr	r3, [r7, #20]
 801144c:	8a5b      	ldrh	r3, [r3, #18]
 801144e:	88fa      	ldrh	r2, [r7, #6]
 8011450:	429a      	cmp	r2, r3
 8011452:	d108      	bne.n	8011466 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	681a      	ldr	r2, [r3, #0]
 8011458:	68bb      	ldr	r3, [r7, #8]
 801145a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801145c:	429a      	cmp	r2, r3
 801145e:	d102      	bne.n	8011466 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011460:	f06f 0307 	mvn.w	r3, #7
 8011464:	e01c      	b.n	80114a0 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011466:	697b      	ldr	r3, [r7, #20]
 8011468:	68db      	ldr	r3, [r3, #12]
 801146a:	617b      	str	r3, [r7, #20]
 801146c:	697b      	ldr	r3, [r7, #20]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d1e7      	bne.n	8011442 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011472:	68bb      	ldr	r3, [r7, #8]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d002      	beq.n	801147e <udp_bind+0xae>
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	e000      	b.n	8011480 <udp_bind+0xb0>
 801147e:	2300      	movs	r3, #0
 8011480:	68fa      	ldr	r2, [r7, #12]
 8011482:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	88fa      	ldrh	r2, [r7, #6]
 8011488:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801148a:	7cfb      	ldrb	r3, [r7, #19]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d106      	bne.n	801149e <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011490:	4b06      	ldr	r3, [pc, #24]	; (80114ac <udp_bind+0xdc>)
 8011492:	681a      	ldr	r2, [r3, #0]
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011498:	4a04      	ldr	r2, [pc, #16]	; (80114ac <udp_bind+0xdc>)
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801149e:	2300      	movs	r3, #0
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	3718      	adds	r7, #24
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}
 80114a8:	080173d4 	.word	0x080173d4
 80114ac:	2000ad24 	.word	0x2000ad24

080114b0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b086      	sub	sp, #24
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	60f8      	str	r0, [r7, #12]
 80114b8:	60b9      	str	r1, [r7, #8]
 80114ba:	4613      	mov	r3, r2
 80114bc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d002      	beq.n	80114ca <udp_connect+0x1a>
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d102      	bne.n	80114d0 <udp_connect+0x20>
    return ERR_VAL;
 80114ca:	f06f 0305 	mvn.w	r3, #5
 80114ce:	e03e      	b.n	801154e <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	8a5b      	ldrh	r3, [r3, #18]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d10f      	bne.n	80114f8 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80114d8:	68f9      	ldr	r1, [r7, #12]
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	8a5b      	ldrh	r3, [r3, #18]
 80114de:	461a      	mov	r2, r3
 80114e0:	68f8      	ldr	r0, [r7, #12]
 80114e2:	f7ff ff75 	bl	80113d0 <udp_bind>
 80114e6:	4603      	mov	r3, r0
 80114e8:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80114ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d002      	beq.n	80114f8 <udp_connect+0x48>
      return err;
 80114f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80114f6:	e02a      	b.n	801154e <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d002      	beq.n	8011504 <udp_connect+0x54>
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	e000      	b.n	8011506 <udp_connect+0x56>
 8011504:	2300      	movs	r3, #0
 8011506:	68fa      	ldr	r2, [r7, #12]
 8011508:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	88fa      	ldrh	r2, [r7, #6]
 801150e:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	7c1b      	ldrb	r3, [r3, #16]
 8011514:	f043 0304 	orr.w	r3, r3, #4
 8011518:	b2da      	uxtb	r2, r3
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801151e:	4b0e      	ldr	r3, [pc, #56]	; (8011558 <udp_connect+0xa8>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	617b      	str	r3, [r7, #20]
 8011524:	e008      	b.n	8011538 <udp_connect+0x88>
    if (pcb == ipcb) {
 8011526:	68fa      	ldr	r2, [r7, #12]
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	429a      	cmp	r2, r3
 801152c:	d101      	bne.n	8011532 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 801152e:	2300      	movs	r3, #0
 8011530:	e00d      	b.n	801154e <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	68db      	ldr	r3, [r3, #12]
 8011536:	617b      	str	r3, [r7, #20]
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d1f3      	bne.n	8011526 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801153e:	4b06      	ldr	r3, [pc, #24]	; (8011558 <udp_connect+0xa8>)
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8011546:	4a04      	ldr	r2, [pc, #16]	; (8011558 <udp_connect+0xa8>)
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801154c:	2300      	movs	r3, #0
}
 801154e:	4618      	mov	r0, r3
 8011550:	3718      	adds	r7, #24
 8011552:	46bd      	mov	sp, r7
 8011554:	bd80      	pop	{r7, pc}
 8011556:	bf00      	nop
 8011558:	2000ad24 	.word	0x2000ad24

0801155c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801155c:	b480      	push	{r7}
 801155e:	b085      	sub	sp, #20
 8011560:	af00      	add	r7, sp, #0
 8011562:	60f8      	str	r0, [r7, #12]
 8011564:	60b9      	str	r1, [r7, #8]
 8011566:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	68ba      	ldr	r2, [r7, #8]
 801156c:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	687a      	ldr	r2, [r7, #4]
 8011572:	61da      	str	r2, [r3, #28]
}
 8011574:	bf00      	nop
 8011576:	3714      	adds	r7, #20
 8011578:	46bd      	mov	sp, r7
 801157a:	bc80      	pop	{r7}
 801157c:	4770      	bx	lr
	...

08011580 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b084      	sub	sp, #16
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011588:	4b15      	ldr	r3, [pc, #84]	; (80115e0 <udp_remove+0x60>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	687a      	ldr	r2, [r7, #4]
 801158e:	429a      	cmp	r2, r3
 8011590:	d105      	bne.n	801159e <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011592:	4b13      	ldr	r3, [pc, #76]	; (80115e0 <udp_remove+0x60>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	68db      	ldr	r3, [r3, #12]
 8011598:	4a11      	ldr	r2, [pc, #68]	; (80115e0 <udp_remove+0x60>)
 801159a:	6013      	str	r3, [r2, #0]
 801159c:	e017      	b.n	80115ce <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801159e:	4b10      	ldr	r3, [pc, #64]	; (80115e0 <udp_remove+0x60>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	60fb      	str	r3, [r7, #12]
 80115a4:	e010      	b.n	80115c8 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	68db      	ldr	r3, [r3, #12]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d009      	beq.n	80115c2 <udp_remove+0x42>
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	68db      	ldr	r3, [r3, #12]
 80115b2:	687a      	ldr	r2, [r7, #4]
 80115b4:	429a      	cmp	r2, r3
 80115b6:	d104      	bne.n	80115c2 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	68da      	ldr	r2, [r3, #12]
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	60da      	str	r2, [r3, #12]
        break;
 80115c0:	e005      	b.n	80115ce <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	68db      	ldr	r3, [r3, #12]
 80115c6:	60fb      	str	r3, [r7, #12]
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d1eb      	bne.n	80115a6 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80115ce:	6879      	ldr	r1, [r7, #4]
 80115d0:	2000      	movs	r0, #0
 80115d2:	f7f9 fa13 	bl	800a9fc <memp_free>
}
 80115d6:	bf00      	nop
 80115d8:	3710      	adds	r7, #16
 80115da:	46bd      	mov	sp, r7
 80115dc:	bd80      	pop	{r7, pc}
 80115de:	bf00      	nop
 80115e0:	2000ad24 	.word	0x2000ad24

080115e4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b082      	sub	sp, #8
 80115e8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80115ea:	2000      	movs	r0, #0
 80115ec:	f7f9 f9b4 	bl	800a958 <memp_malloc>
 80115f0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d007      	beq.n	8011608 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80115f8:	2220      	movs	r2, #32
 80115fa:	2100      	movs	r1, #0
 80115fc:	6878      	ldr	r0, [r7, #4]
 80115fe:	f002 fc4f 	bl	8013ea0 <memset>
    pcb->ttl = UDP_TTL;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	22ff      	movs	r2, #255	; 0xff
 8011606:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011608:	687b      	ldr	r3, [r7, #4]
}
 801160a:	4618      	mov	r0, r3
 801160c:	3708      	adds	r7, #8
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}

08011612 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8011612:	b580      	push	{r7, lr}
 8011614:	b084      	sub	sp, #16
 8011616:	af00      	add	r7, sp, #0
 8011618:	4603      	mov	r3, r0
 801161a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 801161c:	f7ff ffe2 	bl	80115e4 <udp_new>
 8011620:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8011622:	68fb      	ldr	r3, [r7, #12]
}
 8011624:	4618      	mov	r0, r3
 8011626:	3710      	adds	r7, #16
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}

0801162c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 801162c:	b480      	push	{r7}
 801162e:	b085      	sub	sp, #20
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d01e      	beq.n	801167a <udp_netif_ip_addr_changed+0x4e>
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d01a      	beq.n	801167a <udp_netif_ip_addr_changed+0x4e>
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d017      	beq.n	801167a <udp_netif_ip_addr_changed+0x4e>
 801164a:	683b      	ldr	r3, [r7, #0]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d013      	beq.n	801167a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011652:	4b0c      	ldr	r3, [pc, #48]	; (8011684 <udp_netif_ip_addr_changed+0x58>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	60fb      	str	r3, [r7, #12]
 8011658:	e00c      	b.n	8011674 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	681a      	ldr	r2, [r3, #0]
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	429a      	cmp	r2, r3
 8011664:	d103      	bne.n	801166e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011666:	683b      	ldr	r3, [r7, #0]
 8011668:	681a      	ldr	r2, [r3, #0]
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	68db      	ldr	r3, [r3, #12]
 8011672:	60fb      	str	r3, [r7, #12]
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d1ef      	bne.n	801165a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801167a:	bf00      	nop
 801167c:	3714      	adds	r7, #20
 801167e:	46bd      	mov	sp, r7
 8011680:	bc80      	pop	{r7}
 8011682:	4770      	bx	lr
 8011684:	2000ad24 	.word	0x2000ad24

08011688 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011688:	b580      	push	{r7, lr}
 801168a:	b082      	sub	sp, #8
 801168c:	af00      	add	r7, sp, #0
 801168e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011690:	4915      	ldr	r1, [pc, #84]	; (80116e8 <etharp_free_entry+0x60>)
 8011692:	687a      	ldr	r2, [r7, #4]
 8011694:	4613      	mov	r3, r2
 8011696:	005b      	lsls	r3, r3, #1
 8011698:	4413      	add	r3, r2
 801169a:	00db      	lsls	r3, r3, #3
 801169c:	440b      	add	r3, r1
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d013      	beq.n	80116cc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80116a4:	4910      	ldr	r1, [pc, #64]	; (80116e8 <etharp_free_entry+0x60>)
 80116a6:	687a      	ldr	r2, [r7, #4]
 80116a8:	4613      	mov	r3, r2
 80116aa:	005b      	lsls	r3, r3, #1
 80116ac:	4413      	add	r3, r2
 80116ae:	00db      	lsls	r3, r3, #3
 80116b0:	440b      	add	r3, r1
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	4618      	mov	r0, r3
 80116b6:	f7f9 ff55 	bl	800b564 <pbuf_free>
    arp_table[i].q = NULL;
 80116ba:	490b      	ldr	r1, [pc, #44]	; (80116e8 <etharp_free_entry+0x60>)
 80116bc:	687a      	ldr	r2, [r7, #4]
 80116be:	4613      	mov	r3, r2
 80116c0:	005b      	lsls	r3, r3, #1
 80116c2:	4413      	add	r3, r2
 80116c4:	00db      	lsls	r3, r3, #3
 80116c6:	440b      	add	r3, r1
 80116c8:	2200      	movs	r2, #0
 80116ca:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80116cc:	4906      	ldr	r1, [pc, #24]	; (80116e8 <etharp_free_entry+0x60>)
 80116ce:	687a      	ldr	r2, [r7, #4]
 80116d0:	4613      	mov	r3, r2
 80116d2:	005b      	lsls	r3, r3, #1
 80116d4:	4413      	add	r3, r2
 80116d6:	00db      	lsls	r3, r3, #3
 80116d8:	440b      	add	r3, r1
 80116da:	3314      	adds	r3, #20
 80116dc:	2200      	movs	r2, #0
 80116de:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80116e0:	bf00      	nop
 80116e2:	3708      	adds	r7, #8
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}
 80116e8:	2000299c 	.word	0x2000299c

080116ec <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b082      	sub	sp, #8
 80116f0:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80116f2:	2300      	movs	r3, #0
 80116f4:	71fb      	strb	r3, [r7, #7]
 80116f6:	e096      	b.n	8011826 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80116f8:	79fa      	ldrb	r2, [r7, #7]
 80116fa:	494f      	ldr	r1, [pc, #316]	; (8011838 <etharp_tmr+0x14c>)
 80116fc:	4613      	mov	r3, r2
 80116fe:	005b      	lsls	r3, r3, #1
 8011700:	4413      	add	r3, r2
 8011702:	00db      	lsls	r3, r3, #3
 8011704:	440b      	add	r3, r1
 8011706:	3314      	adds	r3, #20
 8011708:	781b      	ldrb	r3, [r3, #0]
 801170a:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 801170c:	79bb      	ldrb	r3, [r7, #6]
 801170e:	2b00      	cmp	r3, #0
 8011710:	f000 8086 	beq.w	8011820 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8011714:	79fa      	ldrb	r2, [r7, #7]
 8011716:	4948      	ldr	r1, [pc, #288]	; (8011838 <etharp_tmr+0x14c>)
 8011718:	4613      	mov	r3, r2
 801171a:	005b      	lsls	r3, r3, #1
 801171c:	4413      	add	r3, r2
 801171e:	00db      	lsls	r3, r3, #3
 8011720:	440b      	add	r3, r1
 8011722:	3312      	adds	r3, #18
 8011724:	881b      	ldrh	r3, [r3, #0]
 8011726:	3301      	adds	r3, #1
 8011728:	b298      	uxth	r0, r3
 801172a:	4943      	ldr	r1, [pc, #268]	; (8011838 <etharp_tmr+0x14c>)
 801172c:	4613      	mov	r3, r2
 801172e:	005b      	lsls	r3, r3, #1
 8011730:	4413      	add	r3, r2
 8011732:	00db      	lsls	r3, r3, #3
 8011734:	440b      	add	r3, r1
 8011736:	3312      	adds	r3, #18
 8011738:	4602      	mov	r2, r0
 801173a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801173c:	79fa      	ldrb	r2, [r7, #7]
 801173e:	493e      	ldr	r1, [pc, #248]	; (8011838 <etharp_tmr+0x14c>)
 8011740:	4613      	mov	r3, r2
 8011742:	005b      	lsls	r3, r3, #1
 8011744:	4413      	add	r3, r2
 8011746:	00db      	lsls	r3, r3, #3
 8011748:	440b      	add	r3, r1
 801174a:	3312      	adds	r3, #18
 801174c:	881b      	ldrh	r3, [r3, #0]
 801174e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011752:	d215      	bcs.n	8011780 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011754:	79fa      	ldrb	r2, [r7, #7]
 8011756:	4938      	ldr	r1, [pc, #224]	; (8011838 <etharp_tmr+0x14c>)
 8011758:	4613      	mov	r3, r2
 801175a:	005b      	lsls	r3, r3, #1
 801175c:	4413      	add	r3, r2
 801175e:	00db      	lsls	r3, r3, #3
 8011760:	440b      	add	r3, r1
 8011762:	3314      	adds	r3, #20
 8011764:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011766:	2b01      	cmp	r3, #1
 8011768:	d10f      	bne.n	801178a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801176a:	79fa      	ldrb	r2, [r7, #7]
 801176c:	4932      	ldr	r1, [pc, #200]	; (8011838 <etharp_tmr+0x14c>)
 801176e:	4613      	mov	r3, r2
 8011770:	005b      	lsls	r3, r3, #1
 8011772:	4413      	add	r3, r2
 8011774:	00db      	lsls	r3, r3, #3
 8011776:	440b      	add	r3, r1
 8011778:	3312      	adds	r3, #18
 801177a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801177c:	2b04      	cmp	r3, #4
 801177e:	d904      	bls.n	801178a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011780:	79fb      	ldrb	r3, [r7, #7]
 8011782:	4618      	mov	r0, r3
 8011784:	f7ff ff80 	bl	8011688 <etharp_free_entry>
 8011788:	e04a      	b.n	8011820 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801178a:	79fa      	ldrb	r2, [r7, #7]
 801178c:	492a      	ldr	r1, [pc, #168]	; (8011838 <etharp_tmr+0x14c>)
 801178e:	4613      	mov	r3, r2
 8011790:	005b      	lsls	r3, r3, #1
 8011792:	4413      	add	r3, r2
 8011794:	00db      	lsls	r3, r3, #3
 8011796:	440b      	add	r3, r1
 8011798:	3314      	adds	r3, #20
 801179a:	781b      	ldrb	r3, [r3, #0]
 801179c:	2b03      	cmp	r3, #3
 801179e:	d10a      	bne.n	80117b6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80117a0:	79fa      	ldrb	r2, [r7, #7]
 80117a2:	4925      	ldr	r1, [pc, #148]	; (8011838 <etharp_tmr+0x14c>)
 80117a4:	4613      	mov	r3, r2
 80117a6:	005b      	lsls	r3, r3, #1
 80117a8:	4413      	add	r3, r2
 80117aa:	00db      	lsls	r3, r3, #3
 80117ac:	440b      	add	r3, r1
 80117ae:	3314      	adds	r3, #20
 80117b0:	2204      	movs	r2, #4
 80117b2:	701a      	strb	r2, [r3, #0]
 80117b4:	e034      	b.n	8011820 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80117b6:	79fa      	ldrb	r2, [r7, #7]
 80117b8:	491f      	ldr	r1, [pc, #124]	; (8011838 <etharp_tmr+0x14c>)
 80117ba:	4613      	mov	r3, r2
 80117bc:	005b      	lsls	r3, r3, #1
 80117be:	4413      	add	r3, r2
 80117c0:	00db      	lsls	r3, r3, #3
 80117c2:	440b      	add	r3, r1
 80117c4:	3314      	adds	r3, #20
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	2b04      	cmp	r3, #4
 80117ca:	d10a      	bne.n	80117e2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80117cc:	79fa      	ldrb	r2, [r7, #7]
 80117ce:	491a      	ldr	r1, [pc, #104]	; (8011838 <etharp_tmr+0x14c>)
 80117d0:	4613      	mov	r3, r2
 80117d2:	005b      	lsls	r3, r3, #1
 80117d4:	4413      	add	r3, r2
 80117d6:	00db      	lsls	r3, r3, #3
 80117d8:	440b      	add	r3, r1
 80117da:	3314      	adds	r3, #20
 80117dc:	2202      	movs	r2, #2
 80117de:	701a      	strb	r2, [r3, #0]
 80117e0:	e01e      	b.n	8011820 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80117e2:	79fa      	ldrb	r2, [r7, #7]
 80117e4:	4914      	ldr	r1, [pc, #80]	; (8011838 <etharp_tmr+0x14c>)
 80117e6:	4613      	mov	r3, r2
 80117e8:	005b      	lsls	r3, r3, #1
 80117ea:	4413      	add	r3, r2
 80117ec:	00db      	lsls	r3, r3, #3
 80117ee:	440b      	add	r3, r1
 80117f0:	3314      	adds	r3, #20
 80117f2:	781b      	ldrb	r3, [r3, #0]
 80117f4:	2b01      	cmp	r3, #1
 80117f6:	d113      	bne.n	8011820 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80117f8:	79fa      	ldrb	r2, [r7, #7]
 80117fa:	490f      	ldr	r1, [pc, #60]	; (8011838 <etharp_tmr+0x14c>)
 80117fc:	4613      	mov	r3, r2
 80117fe:	005b      	lsls	r3, r3, #1
 8011800:	4413      	add	r3, r2
 8011802:	00db      	lsls	r3, r3, #3
 8011804:	440b      	add	r3, r1
 8011806:	3308      	adds	r3, #8
 8011808:	6818      	ldr	r0, [r3, #0]
 801180a:	79fa      	ldrb	r2, [r7, #7]
 801180c:	4613      	mov	r3, r2
 801180e:	005b      	lsls	r3, r3, #1
 8011810:	4413      	add	r3, r2
 8011812:	00db      	lsls	r3, r3, #3
 8011814:	4a08      	ldr	r2, [pc, #32]	; (8011838 <etharp_tmr+0x14c>)
 8011816:	4413      	add	r3, r2
 8011818:	3304      	adds	r3, #4
 801181a:	4619      	mov	r1, r3
 801181c:	f000 fe38 	bl	8012490 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011820:	79fb      	ldrb	r3, [r7, #7]
 8011822:	3301      	adds	r3, #1
 8011824:	71fb      	strb	r3, [r7, #7]
 8011826:	79fb      	ldrb	r3, [r7, #7]
 8011828:	2b09      	cmp	r3, #9
 801182a:	f67f af65 	bls.w	80116f8 <etharp_tmr+0xc>
      }
    }
  }
}
 801182e:	bf00      	nop
 8011830:	3708      	adds	r7, #8
 8011832:	46bd      	mov	sp, r7
 8011834:	bd80      	pop	{r7, pc}
 8011836:	bf00      	nop
 8011838:	2000299c 	.word	0x2000299c

0801183c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 801183c:	b580      	push	{r7, lr}
 801183e:	b088      	sub	sp, #32
 8011840:	af00      	add	r7, sp, #0
 8011842:	60f8      	str	r0, [r7, #12]
 8011844:	460b      	mov	r3, r1
 8011846:	607a      	str	r2, [r7, #4]
 8011848:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801184a:	230a      	movs	r3, #10
 801184c:	77fb      	strb	r3, [r7, #31]
 801184e:	230a      	movs	r3, #10
 8011850:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8011852:	230a      	movs	r3, #10
 8011854:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8011856:	2300      	movs	r3, #0
 8011858:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 801185a:	230a      	movs	r3, #10
 801185c:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801185e:	2300      	movs	r3, #0
 8011860:	833b      	strh	r3, [r7, #24]
 8011862:	2300      	movs	r3, #0
 8011864:	82fb      	strh	r3, [r7, #22]
 8011866:	2300      	movs	r3, #0
 8011868:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801186a:	2300      	movs	r3, #0
 801186c:	773b      	strb	r3, [r7, #28]
 801186e:	e093      	b.n	8011998 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8011870:	7f3a      	ldrb	r2, [r7, #28]
 8011872:	4990      	ldr	r1, [pc, #576]	; (8011ab4 <etharp_find_entry+0x278>)
 8011874:	4613      	mov	r3, r2
 8011876:	005b      	lsls	r3, r3, #1
 8011878:	4413      	add	r3, r2
 801187a:	00db      	lsls	r3, r3, #3
 801187c:	440b      	add	r3, r1
 801187e:	3314      	adds	r3, #20
 8011880:	781b      	ldrb	r3, [r3, #0]
 8011882:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011884:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011888:	2b0a      	cmp	r3, #10
 801188a:	d105      	bne.n	8011898 <etharp_find_entry+0x5c>
 801188c:	7cfb      	ldrb	r3, [r7, #19]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d102      	bne.n	8011898 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8011892:	7f3b      	ldrb	r3, [r7, #28]
 8011894:	777b      	strb	r3, [r7, #29]
 8011896:	e07c      	b.n	8011992 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011898:	7cfb      	ldrb	r3, [r7, #19]
 801189a:	2b00      	cmp	r3, #0
 801189c:	d079      	beq.n	8011992 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801189e:	7cfb      	ldrb	r3, [r7, #19]
 80118a0:	2b01      	cmp	r3, #1
 80118a2:	d009      	beq.n	80118b8 <etharp_find_entry+0x7c>
 80118a4:	7cfb      	ldrb	r3, [r7, #19]
 80118a6:	2b01      	cmp	r3, #1
 80118a8:	d806      	bhi.n	80118b8 <etharp_find_entry+0x7c>
 80118aa:	4b83      	ldr	r3, [pc, #524]	; (8011ab8 <etharp_find_entry+0x27c>)
 80118ac:	f44f 7293 	mov.w	r2, #294	; 0x126
 80118b0:	4982      	ldr	r1, [pc, #520]	; (8011abc <etharp_find_entry+0x280>)
 80118b2:	4883      	ldr	r0, [pc, #524]	; (8011ac0 <etharp_find_entry+0x284>)
 80118b4:	f002 fafc 	bl	8013eb0 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d00f      	beq.n	80118de <etharp_find_entry+0xa2>
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	6819      	ldr	r1, [r3, #0]
 80118c2:	7f3a      	ldrb	r2, [r7, #28]
 80118c4:	487b      	ldr	r0, [pc, #492]	; (8011ab4 <etharp_find_entry+0x278>)
 80118c6:	4613      	mov	r3, r2
 80118c8:	005b      	lsls	r3, r3, #1
 80118ca:	4413      	add	r3, r2
 80118cc:	00db      	lsls	r3, r3, #3
 80118ce:	4403      	add	r3, r0
 80118d0:	3304      	adds	r3, #4
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	4299      	cmp	r1, r3
 80118d6:	d102      	bne.n	80118de <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 80118d8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80118dc:	e0e5      	b.n	8011aaa <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80118de:	7cfb      	ldrb	r3, [r7, #19]
 80118e0:	2b01      	cmp	r3, #1
 80118e2:	d13b      	bne.n	801195c <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80118e4:	7f3a      	ldrb	r2, [r7, #28]
 80118e6:	4973      	ldr	r1, [pc, #460]	; (8011ab4 <etharp_find_entry+0x278>)
 80118e8:	4613      	mov	r3, r2
 80118ea:	005b      	lsls	r3, r3, #1
 80118ec:	4413      	add	r3, r2
 80118ee:	00db      	lsls	r3, r3, #3
 80118f0:	440b      	add	r3, r1
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d018      	beq.n	801192a <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 80118f8:	7f3a      	ldrb	r2, [r7, #28]
 80118fa:	496e      	ldr	r1, [pc, #440]	; (8011ab4 <etharp_find_entry+0x278>)
 80118fc:	4613      	mov	r3, r2
 80118fe:	005b      	lsls	r3, r3, #1
 8011900:	4413      	add	r3, r2
 8011902:	00db      	lsls	r3, r3, #3
 8011904:	440b      	add	r3, r1
 8011906:	3312      	adds	r3, #18
 8011908:	881b      	ldrh	r3, [r3, #0]
 801190a:	8b3a      	ldrh	r2, [r7, #24]
 801190c:	429a      	cmp	r2, r3
 801190e:	d840      	bhi.n	8011992 <etharp_find_entry+0x156>
            old_queue = i;
 8011910:	7f3b      	ldrb	r3, [r7, #28]
 8011912:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8011914:	7f3a      	ldrb	r2, [r7, #28]
 8011916:	4967      	ldr	r1, [pc, #412]	; (8011ab4 <etharp_find_entry+0x278>)
 8011918:	4613      	mov	r3, r2
 801191a:	005b      	lsls	r3, r3, #1
 801191c:	4413      	add	r3, r2
 801191e:	00db      	lsls	r3, r3, #3
 8011920:	440b      	add	r3, r1
 8011922:	3312      	adds	r3, #18
 8011924:	881b      	ldrh	r3, [r3, #0]
 8011926:	833b      	strh	r3, [r7, #24]
 8011928:	e033      	b.n	8011992 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801192a:	7f3a      	ldrb	r2, [r7, #28]
 801192c:	4961      	ldr	r1, [pc, #388]	; (8011ab4 <etharp_find_entry+0x278>)
 801192e:	4613      	mov	r3, r2
 8011930:	005b      	lsls	r3, r3, #1
 8011932:	4413      	add	r3, r2
 8011934:	00db      	lsls	r3, r3, #3
 8011936:	440b      	add	r3, r1
 8011938:	3312      	adds	r3, #18
 801193a:	881b      	ldrh	r3, [r3, #0]
 801193c:	8afa      	ldrh	r2, [r7, #22]
 801193e:	429a      	cmp	r2, r3
 8011940:	d827      	bhi.n	8011992 <etharp_find_entry+0x156>
            old_pending = i;
 8011942:	7f3b      	ldrb	r3, [r7, #28]
 8011944:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8011946:	7f3a      	ldrb	r2, [r7, #28]
 8011948:	495a      	ldr	r1, [pc, #360]	; (8011ab4 <etharp_find_entry+0x278>)
 801194a:	4613      	mov	r3, r2
 801194c:	005b      	lsls	r3, r3, #1
 801194e:	4413      	add	r3, r2
 8011950:	00db      	lsls	r3, r3, #3
 8011952:	440b      	add	r3, r1
 8011954:	3312      	adds	r3, #18
 8011956:	881b      	ldrh	r3, [r3, #0]
 8011958:	82fb      	strh	r3, [r7, #22]
 801195a:	e01a      	b.n	8011992 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801195c:	7cfb      	ldrb	r3, [r7, #19]
 801195e:	2b01      	cmp	r3, #1
 8011960:	d917      	bls.n	8011992 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011962:	7f3a      	ldrb	r2, [r7, #28]
 8011964:	4953      	ldr	r1, [pc, #332]	; (8011ab4 <etharp_find_entry+0x278>)
 8011966:	4613      	mov	r3, r2
 8011968:	005b      	lsls	r3, r3, #1
 801196a:	4413      	add	r3, r2
 801196c:	00db      	lsls	r3, r3, #3
 801196e:	440b      	add	r3, r1
 8011970:	3312      	adds	r3, #18
 8011972:	881b      	ldrh	r3, [r3, #0]
 8011974:	8aba      	ldrh	r2, [r7, #20]
 8011976:	429a      	cmp	r2, r3
 8011978:	d80b      	bhi.n	8011992 <etharp_find_entry+0x156>
            old_stable = i;
 801197a:	7f3b      	ldrb	r3, [r7, #28]
 801197c:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 801197e:	7f3a      	ldrb	r2, [r7, #28]
 8011980:	494c      	ldr	r1, [pc, #304]	; (8011ab4 <etharp_find_entry+0x278>)
 8011982:	4613      	mov	r3, r2
 8011984:	005b      	lsls	r3, r3, #1
 8011986:	4413      	add	r3, r2
 8011988:	00db      	lsls	r3, r3, #3
 801198a:	440b      	add	r3, r1
 801198c:	3312      	adds	r3, #18
 801198e:	881b      	ldrh	r3, [r3, #0]
 8011990:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011992:	7f3b      	ldrb	r3, [r7, #28]
 8011994:	3301      	adds	r3, #1
 8011996:	773b      	strb	r3, [r7, #28]
 8011998:	7f3b      	ldrb	r3, [r7, #28]
 801199a:	2b09      	cmp	r3, #9
 801199c:	f67f af68 	bls.w	8011870 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80119a0:	7afb      	ldrb	r3, [r7, #11]
 80119a2:	f003 0302 	and.w	r3, r3, #2
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d108      	bne.n	80119bc <etharp_find_entry+0x180>
 80119aa:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80119ae:	2b0a      	cmp	r3, #10
 80119b0:	d107      	bne.n	80119c2 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80119b2:	7afb      	ldrb	r3, [r7, #11]
 80119b4:	f003 0301 	and.w	r3, r3, #1
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d102      	bne.n	80119c2 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 80119bc:	f04f 33ff 	mov.w	r3, #4294967295
 80119c0:	e073      	b.n	8011aaa <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80119c2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80119c6:	2b09      	cmp	r3, #9
 80119c8:	dc02      	bgt.n	80119d0 <etharp_find_entry+0x194>
    i = empty;
 80119ca:	7f7b      	ldrb	r3, [r7, #29]
 80119cc:	773b      	strb	r3, [r7, #28]
 80119ce:	e036      	b.n	8011a3e <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80119d0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80119d4:	2b09      	cmp	r3, #9
 80119d6:	dc13      	bgt.n	8011a00 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 80119d8:	7fbb      	ldrb	r3, [r7, #30]
 80119da:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80119dc:	7f3a      	ldrb	r2, [r7, #28]
 80119de:	4935      	ldr	r1, [pc, #212]	; (8011ab4 <etharp_find_entry+0x278>)
 80119e0:	4613      	mov	r3, r2
 80119e2:	005b      	lsls	r3, r3, #1
 80119e4:	4413      	add	r3, r2
 80119e6:	00db      	lsls	r3, r3, #3
 80119e8:	440b      	add	r3, r1
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d018      	beq.n	8011a22 <etharp_find_entry+0x1e6>
 80119f0:	4b31      	ldr	r3, [pc, #196]	; (8011ab8 <etharp_find_entry+0x27c>)
 80119f2:	f240 126f 	movw	r2, #367	; 0x16f
 80119f6:	4933      	ldr	r1, [pc, #204]	; (8011ac4 <etharp_find_entry+0x288>)
 80119f8:	4831      	ldr	r0, [pc, #196]	; (8011ac0 <etharp_find_entry+0x284>)
 80119fa:	f002 fa59 	bl	8013eb0 <iprintf>
 80119fe:	e010      	b.n	8011a22 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011a00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011a04:	2b09      	cmp	r3, #9
 8011a06:	dc02      	bgt.n	8011a0e <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8011a08:	7ffb      	ldrb	r3, [r7, #31]
 8011a0a:	773b      	strb	r3, [r7, #28]
 8011a0c:	e009      	b.n	8011a22 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011a0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011a12:	2b09      	cmp	r3, #9
 8011a14:	dc02      	bgt.n	8011a1c <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011a16:	7efb      	ldrb	r3, [r7, #27]
 8011a18:	773b      	strb	r3, [r7, #28]
 8011a1a:	e002      	b.n	8011a22 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8011a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8011a20:	e043      	b.n	8011aaa <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011a22:	7f3b      	ldrb	r3, [r7, #28]
 8011a24:	2b09      	cmp	r3, #9
 8011a26:	d906      	bls.n	8011a36 <etharp_find_entry+0x1fa>
 8011a28:	4b23      	ldr	r3, [pc, #140]	; (8011ab8 <etharp_find_entry+0x27c>)
 8011a2a:	f240 1281 	movw	r2, #385	; 0x181
 8011a2e:	4926      	ldr	r1, [pc, #152]	; (8011ac8 <etharp_find_entry+0x28c>)
 8011a30:	4823      	ldr	r0, [pc, #140]	; (8011ac0 <etharp_find_entry+0x284>)
 8011a32:	f002 fa3d 	bl	8013eb0 <iprintf>
    etharp_free_entry(i);
 8011a36:	7f3b      	ldrb	r3, [r7, #28]
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f7ff fe25 	bl	8011688 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011a3e:	7f3b      	ldrb	r3, [r7, #28]
 8011a40:	2b09      	cmp	r3, #9
 8011a42:	d906      	bls.n	8011a52 <etharp_find_entry+0x216>
 8011a44:	4b1c      	ldr	r3, [pc, #112]	; (8011ab8 <etharp_find_entry+0x27c>)
 8011a46:	f240 1285 	movw	r2, #389	; 0x185
 8011a4a:	491f      	ldr	r1, [pc, #124]	; (8011ac8 <etharp_find_entry+0x28c>)
 8011a4c:	481c      	ldr	r0, [pc, #112]	; (8011ac0 <etharp_find_entry+0x284>)
 8011a4e:	f002 fa2f 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011a52:	7f3a      	ldrb	r2, [r7, #28]
 8011a54:	4917      	ldr	r1, [pc, #92]	; (8011ab4 <etharp_find_entry+0x278>)
 8011a56:	4613      	mov	r3, r2
 8011a58:	005b      	lsls	r3, r3, #1
 8011a5a:	4413      	add	r3, r2
 8011a5c:	00db      	lsls	r3, r3, #3
 8011a5e:	440b      	add	r3, r1
 8011a60:	3314      	adds	r3, #20
 8011a62:	781b      	ldrb	r3, [r3, #0]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d006      	beq.n	8011a76 <etharp_find_entry+0x23a>
 8011a68:	4b13      	ldr	r3, [pc, #76]	; (8011ab8 <etharp_find_entry+0x27c>)
 8011a6a:	f240 1287 	movw	r2, #391	; 0x187
 8011a6e:	4917      	ldr	r1, [pc, #92]	; (8011acc <etharp_find_entry+0x290>)
 8011a70:	4813      	ldr	r0, [pc, #76]	; (8011ac0 <etharp_find_entry+0x284>)
 8011a72:	f002 fa1d 	bl	8013eb0 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d00a      	beq.n	8011a92 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011a7c:	7f3a      	ldrb	r2, [r7, #28]
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	6819      	ldr	r1, [r3, #0]
 8011a82:	480c      	ldr	r0, [pc, #48]	; (8011ab4 <etharp_find_entry+0x278>)
 8011a84:	4613      	mov	r3, r2
 8011a86:	005b      	lsls	r3, r3, #1
 8011a88:	4413      	add	r3, r2
 8011a8a:	00db      	lsls	r3, r3, #3
 8011a8c:	4403      	add	r3, r0
 8011a8e:	3304      	adds	r3, #4
 8011a90:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011a92:	7f3a      	ldrb	r2, [r7, #28]
 8011a94:	4907      	ldr	r1, [pc, #28]	; (8011ab4 <etharp_find_entry+0x278>)
 8011a96:	4613      	mov	r3, r2
 8011a98:	005b      	lsls	r3, r3, #1
 8011a9a:	4413      	add	r3, r2
 8011a9c:	00db      	lsls	r3, r3, #3
 8011a9e:	440b      	add	r3, r1
 8011aa0:	3312      	adds	r3, #18
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8011aa6:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3720      	adds	r7, #32
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}
 8011ab2:	bf00      	nop
 8011ab4:	2000299c 	.word	0x2000299c
 8011ab8:	08016be8 	.word	0x08016be8
 8011abc:	08016c20 	.word	0x08016c20
 8011ac0:	08016c60 	.word	0x08016c60
 8011ac4:	08016c88 	.word	0x08016c88
 8011ac8:	08016ca0 	.word	0x08016ca0
 8011acc:	08016cb4 	.word	0x08016cb4

08011ad0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b088      	sub	sp, #32
 8011ad4:	af02      	add	r7, sp, #8
 8011ad6:	60f8      	str	r0, [r7, #12]
 8011ad8:	60b9      	str	r1, [r7, #8]
 8011ada:	607a      	str	r2, [r7, #4]
 8011adc:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ae4:	2b06      	cmp	r3, #6
 8011ae6:	d006      	beq.n	8011af6 <etharp_update_arp_entry+0x26>
 8011ae8:	4b48      	ldr	r3, [pc, #288]	; (8011c0c <etharp_update_arp_entry+0x13c>)
 8011aea:	f240 12ab 	movw	r2, #427	; 0x1ab
 8011aee:	4948      	ldr	r1, [pc, #288]	; (8011c10 <etharp_update_arp_entry+0x140>)
 8011af0:	4848      	ldr	r0, [pc, #288]	; (8011c14 <etharp_update_arp_entry+0x144>)
 8011af2:	f002 f9dd 	bl	8013eb0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d012      	beq.n	8011b22 <etharp_update_arp_entry+0x52>
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d00e      	beq.n	8011b22 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011b04:	68bb      	ldr	r3, [r7, #8]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	68f9      	ldr	r1, [r7, #12]
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f001 f8da 	bl	8012cc4 <ip4_addr_isbroadcast_u32>
 8011b10:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d105      	bne.n	8011b22 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011b1e:	2be0      	cmp	r3, #224	; 0xe0
 8011b20:	d102      	bne.n	8011b28 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011b22:	f06f 030f 	mvn.w	r3, #15
 8011b26:	e06c      	b.n	8011c02 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011b28:	78fb      	ldrb	r3, [r7, #3]
 8011b2a:	68fa      	ldr	r2, [r7, #12]
 8011b2c:	4619      	mov	r1, r3
 8011b2e:	68b8      	ldr	r0, [r7, #8]
 8011b30:	f7ff fe84 	bl	801183c <etharp_find_entry>
 8011b34:	4603      	mov	r3, r0
 8011b36:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011b38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	da02      	bge.n	8011b46 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011b40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011b44:	e05d      	b.n	8011c02 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011b46:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011b4a:	4933      	ldr	r1, [pc, #204]	; (8011c18 <etharp_update_arp_entry+0x148>)
 8011b4c:	4613      	mov	r3, r2
 8011b4e:	005b      	lsls	r3, r3, #1
 8011b50:	4413      	add	r3, r2
 8011b52:	00db      	lsls	r3, r3, #3
 8011b54:	440b      	add	r3, r1
 8011b56:	3314      	adds	r3, #20
 8011b58:	2202      	movs	r2, #2
 8011b5a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011b5c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011b60:	492d      	ldr	r1, [pc, #180]	; (8011c18 <etharp_update_arp_entry+0x148>)
 8011b62:	4613      	mov	r3, r2
 8011b64:	005b      	lsls	r3, r3, #1
 8011b66:	4413      	add	r3, r2
 8011b68:	00db      	lsls	r3, r3, #3
 8011b6a:	440b      	add	r3, r1
 8011b6c:	3308      	adds	r3, #8
 8011b6e:	68fa      	ldr	r2, [r7, #12]
 8011b70:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8011b72:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011b76:	4613      	mov	r3, r2
 8011b78:	005b      	lsls	r3, r3, #1
 8011b7a:	4413      	add	r3, r2
 8011b7c:	00db      	lsls	r3, r3, #3
 8011b7e:	3308      	adds	r3, #8
 8011b80:	4a25      	ldr	r2, [pc, #148]	; (8011c18 <etharp_update_arp_entry+0x148>)
 8011b82:	4413      	add	r3, r2
 8011b84:	3304      	adds	r3, #4
 8011b86:	2206      	movs	r2, #6
 8011b88:	6879      	ldr	r1, [r7, #4]
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	f002 f97d 	bl	8013e8a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011b90:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011b94:	4920      	ldr	r1, [pc, #128]	; (8011c18 <etharp_update_arp_entry+0x148>)
 8011b96:	4613      	mov	r3, r2
 8011b98:	005b      	lsls	r3, r3, #1
 8011b9a:	4413      	add	r3, r2
 8011b9c:	00db      	lsls	r3, r3, #3
 8011b9e:	440b      	add	r3, r1
 8011ba0:	3312      	adds	r3, #18
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011ba6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011baa:	491b      	ldr	r1, [pc, #108]	; (8011c18 <etharp_update_arp_entry+0x148>)
 8011bac:	4613      	mov	r3, r2
 8011bae:	005b      	lsls	r3, r3, #1
 8011bb0:	4413      	add	r3, r2
 8011bb2:	00db      	lsls	r3, r3, #3
 8011bb4:	440b      	add	r3, r1
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d021      	beq.n	8011c00 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011bbc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011bc0:	4915      	ldr	r1, [pc, #84]	; (8011c18 <etharp_update_arp_entry+0x148>)
 8011bc2:	4613      	mov	r3, r2
 8011bc4:	005b      	lsls	r3, r3, #1
 8011bc6:	4413      	add	r3, r2
 8011bc8:	00db      	lsls	r3, r3, #3
 8011bca:	440b      	add	r3, r1
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011bd0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011bd4:	4910      	ldr	r1, [pc, #64]	; (8011c18 <etharp_update_arp_entry+0x148>)
 8011bd6:	4613      	mov	r3, r2
 8011bd8:	005b      	lsls	r3, r3, #1
 8011bda:	4413      	add	r3, r2
 8011bdc:	00db      	lsls	r3, r3, #3
 8011bde:	440b      	add	r3, r1
 8011be0:	2200      	movs	r2, #0
 8011be2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8011bea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011bee:	9300      	str	r3, [sp, #0]
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	6939      	ldr	r1, [r7, #16]
 8011bf4:	68f8      	ldr	r0, [r7, #12]
 8011bf6:	f001 ff05 	bl	8013a04 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011bfa:	6938      	ldr	r0, [r7, #16]
 8011bfc:	f7f9 fcb2 	bl	800b564 <pbuf_free>
  }
  return ERR_OK;
 8011c00:	2300      	movs	r3, #0
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3718      	adds	r7, #24
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}
 8011c0a:	bf00      	nop
 8011c0c:	08016be8 	.word	0x08016be8
 8011c10:	08016ce0 	.word	0x08016ce0
 8011c14:	08016c60 	.word	0x08016c60
 8011c18:	2000299c 	.word	0x2000299c

08011c1c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b084      	sub	sp, #16
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011c24:	2300      	movs	r3, #0
 8011c26:	73fb      	strb	r3, [r7, #15]
 8011c28:	e01f      	b.n	8011c6a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8011c2a:	7bfa      	ldrb	r2, [r7, #15]
 8011c2c:	4912      	ldr	r1, [pc, #72]	; (8011c78 <etharp_cleanup_netif+0x5c>)
 8011c2e:	4613      	mov	r3, r2
 8011c30:	005b      	lsls	r3, r3, #1
 8011c32:	4413      	add	r3, r2
 8011c34:	00db      	lsls	r3, r3, #3
 8011c36:	440b      	add	r3, r1
 8011c38:	3314      	adds	r3, #20
 8011c3a:	781b      	ldrb	r3, [r3, #0]
 8011c3c:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011c3e:	7bbb      	ldrb	r3, [r7, #14]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d00f      	beq.n	8011c64 <etharp_cleanup_netif+0x48>
 8011c44:	7bfa      	ldrb	r2, [r7, #15]
 8011c46:	490c      	ldr	r1, [pc, #48]	; (8011c78 <etharp_cleanup_netif+0x5c>)
 8011c48:	4613      	mov	r3, r2
 8011c4a:	005b      	lsls	r3, r3, #1
 8011c4c:	4413      	add	r3, r2
 8011c4e:	00db      	lsls	r3, r3, #3
 8011c50:	440b      	add	r3, r1
 8011c52:	3308      	adds	r3, #8
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	687a      	ldr	r2, [r7, #4]
 8011c58:	429a      	cmp	r2, r3
 8011c5a:	d103      	bne.n	8011c64 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8011c5c:	7bfb      	ldrb	r3, [r7, #15]
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f7ff fd12 	bl	8011688 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011c64:	7bfb      	ldrb	r3, [r7, #15]
 8011c66:	3301      	adds	r3, #1
 8011c68:	73fb      	strb	r3, [r7, #15]
 8011c6a:	7bfb      	ldrb	r3, [r7, #15]
 8011c6c:	2b09      	cmp	r3, #9
 8011c6e:	d9dc      	bls.n	8011c2a <etharp_cleanup_netif+0xe>
    }
  }
}
 8011c70:	bf00      	nop
 8011c72:	3710      	adds	r7, #16
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}
 8011c78:	2000299c 	.word	0x2000299c

08011c7c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011c7c:	b5b0      	push	{r4, r5, r7, lr}
 8011c7e:	b08a      	sub	sp, #40	; 0x28
 8011c80:	af04      	add	r7, sp, #16
 8011c82:	6078      	str	r0, [r7, #4]
 8011c84:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011c86:	683b      	ldr	r3, [r7, #0]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d107      	bne.n	8011c9c <etharp_input+0x20>
 8011c8c:	4b3d      	ldr	r3, [pc, #244]	; (8011d84 <etharp_input+0x108>)
 8011c8e:	f44f 7222 	mov.w	r2, #648	; 0x288
 8011c92:	493d      	ldr	r1, [pc, #244]	; (8011d88 <etharp_input+0x10c>)
 8011c94:	483d      	ldr	r0, [pc, #244]	; (8011d8c <etharp_input+0x110>)
 8011c96:	f002 f90b 	bl	8013eb0 <iprintf>
 8011c9a:	e06f      	b.n	8011d7c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	685b      	ldr	r3, [r3, #4]
 8011ca0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8011ca2:	693b      	ldr	r3, [r7, #16]
 8011ca4:	881b      	ldrh	r3, [r3, #0]
 8011ca6:	b29b      	uxth	r3, r3
 8011ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011cac:	d10c      	bne.n	8011cc8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011cae:	693b      	ldr	r3, [r7, #16]
 8011cb0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8011cb2:	2b06      	cmp	r3, #6
 8011cb4:	d108      	bne.n	8011cc8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011cb6:	693b      	ldr	r3, [r7, #16]
 8011cb8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011cba:	2b04      	cmp	r3, #4
 8011cbc:	d104      	bne.n	8011cc8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011cbe:	693b      	ldr	r3, [r7, #16]
 8011cc0:	885b      	ldrh	r3, [r3, #2]
 8011cc2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011cc4:	2b08      	cmp	r3, #8
 8011cc6:	d003      	beq.n	8011cd0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f7f9 fc4b 	bl	800b564 <pbuf_free>
    return;
 8011cce:	e055      	b.n	8011d7c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	330e      	adds	r3, #14
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8011cd8:	693b      	ldr	r3, [r7, #16]
 8011cda:	3318      	adds	r3, #24
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	3304      	adds	r3, #4
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d102      	bne.n	8011cf0 <etharp_input+0x74>
    for_us = 0;
 8011cea:	2300      	movs	r3, #0
 8011cec:	75fb      	strb	r3, [r7, #23]
 8011cee:	e009      	b.n	8011d04 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011cf0:	68ba      	ldr	r2, [r7, #8]
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	3304      	adds	r3, #4
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	429a      	cmp	r2, r3
 8011cfa:	bf0c      	ite	eq
 8011cfc:	2301      	moveq	r3, #1
 8011cfe:	2300      	movne	r3, #0
 8011d00:	b2db      	uxtb	r3, r3
 8011d02:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011d04:	693b      	ldr	r3, [r7, #16]
 8011d06:	f103 0208 	add.w	r2, r3, #8
 8011d0a:	7dfb      	ldrb	r3, [r7, #23]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d001      	beq.n	8011d14 <etharp_input+0x98>
 8011d10:	2301      	movs	r3, #1
 8011d12:	e000      	b.n	8011d16 <etharp_input+0x9a>
 8011d14:	2302      	movs	r3, #2
 8011d16:	f107 010c 	add.w	r1, r7, #12
 8011d1a:	6838      	ldr	r0, [r7, #0]
 8011d1c:	f7ff fed8 	bl	8011ad0 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	88db      	ldrh	r3, [r3, #6]
 8011d24:	b29b      	uxth	r3, r3
 8011d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d2a:	d003      	beq.n	8011d34 <etharp_input+0xb8>
 8011d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d30:	d01e      	beq.n	8011d70 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8011d32:	e020      	b.n	8011d76 <etharp_input+0xfa>
    if (for_us) {
 8011d34:	7dfb      	ldrb	r3, [r7, #23]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d01c      	beq.n	8011d74 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8011d40:	693b      	ldr	r3, [r7, #16]
 8011d42:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011d46:	683b      	ldr	r3, [r7, #0]
 8011d48:	f103 0529 	add.w	r5, r3, #41	; 0x29
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8011d50:	693a      	ldr	r2, [r7, #16]
 8011d52:	3208      	adds	r2, #8
      etharp_raw(netif,
 8011d54:	2102      	movs	r1, #2
 8011d56:	9103      	str	r1, [sp, #12]
 8011d58:	f107 010c 	add.w	r1, r7, #12
 8011d5c:	9102      	str	r1, [sp, #8]
 8011d5e:	9201      	str	r2, [sp, #4]
 8011d60:	9300      	str	r3, [sp, #0]
 8011d62:	462b      	mov	r3, r5
 8011d64:	4622      	mov	r2, r4
 8011d66:	4601      	mov	r1, r0
 8011d68:	6838      	ldr	r0, [r7, #0]
 8011d6a:	f000 fae3 	bl	8012334 <etharp_raw>
    break;
 8011d6e:	e001      	b.n	8011d74 <etharp_input+0xf8>
    break;
 8011d70:	bf00      	nop
 8011d72:	e000      	b.n	8011d76 <etharp_input+0xfa>
    break;
 8011d74:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011d76:	6878      	ldr	r0, [r7, #4]
 8011d78:	f7f9 fbf4 	bl	800b564 <pbuf_free>
}
 8011d7c:	3718      	adds	r7, #24
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bdb0      	pop	{r4, r5, r7, pc}
 8011d82:	bf00      	nop
 8011d84:	08016be8 	.word	0x08016be8
 8011d88:	08016d38 	.word	0x08016d38
 8011d8c:	08016c60 	.word	0x08016c60

08011d90 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b086      	sub	sp, #24
 8011d94:	af02      	add	r7, sp, #8
 8011d96:	60f8      	str	r0, [r7, #12]
 8011d98:	60b9      	str	r1, [r7, #8]
 8011d9a:	4613      	mov	r3, r2
 8011d9c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011d9e:	79fa      	ldrb	r2, [r7, #7]
 8011da0:	4944      	ldr	r1, [pc, #272]	; (8011eb4 <etharp_output_to_arp_index+0x124>)
 8011da2:	4613      	mov	r3, r2
 8011da4:	005b      	lsls	r3, r3, #1
 8011da6:	4413      	add	r3, r2
 8011da8:	00db      	lsls	r3, r3, #3
 8011daa:	440b      	add	r3, r1
 8011dac:	3314      	adds	r3, #20
 8011dae:	781b      	ldrb	r3, [r3, #0]
 8011db0:	2b01      	cmp	r3, #1
 8011db2:	d806      	bhi.n	8011dc2 <etharp_output_to_arp_index+0x32>
 8011db4:	4b40      	ldr	r3, [pc, #256]	; (8011eb8 <etharp_output_to_arp_index+0x128>)
 8011db6:	f240 22ed 	movw	r2, #749	; 0x2ed
 8011dba:	4940      	ldr	r1, [pc, #256]	; (8011ebc <etharp_output_to_arp_index+0x12c>)
 8011dbc:	4840      	ldr	r0, [pc, #256]	; (8011ec0 <etharp_output_to_arp_index+0x130>)
 8011dbe:	f002 f877 	bl	8013eb0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011dc2:	79fa      	ldrb	r2, [r7, #7]
 8011dc4:	493b      	ldr	r1, [pc, #236]	; (8011eb4 <etharp_output_to_arp_index+0x124>)
 8011dc6:	4613      	mov	r3, r2
 8011dc8:	005b      	lsls	r3, r3, #1
 8011dca:	4413      	add	r3, r2
 8011dcc:	00db      	lsls	r3, r3, #3
 8011dce:	440b      	add	r3, r1
 8011dd0:	3314      	adds	r3, #20
 8011dd2:	781b      	ldrb	r3, [r3, #0]
 8011dd4:	2b02      	cmp	r3, #2
 8011dd6:	d153      	bne.n	8011e80 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011dd8:	79fa      	ldrb	r2, [r7, #7]
 8011dda:	4936      	ldr	r1, [pc, #216]	; (8011eb4 <etharp_output_to_arp_index+0x124>)
 8011ddc:	4613      	mov	r3, r2
 8011dde:	005b      	lsls	r3, r3, #1
 8011de0:	4413      	add	r3, r2
 8011de2:	00db      	lsls	r3, r3, #3
 8011de4:	440b      	add	r3, r1
 8011de6:	3312      	adds	r3, #18
 8011de8:	881b      	ldrh	r3, [r3, #0]
 8011dea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011dee:	d919      	bls.n	8011e24 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011df0:	79fa      	ldrb	r2, [r7, #7]
 8011df2:	4613      	mov	r3, r2
 8011df4:	005b      	lsls	r3, r3, #1
 8011df6:	4413      	add	r3, r2
 8011df8:	00db      	lsls	r3, r3, #3
 8011dfa:	4a2e      	ldr	r2, [pc, #184]	; (8011eb4 <etharp_output_to_arp_index+0x124>)
 8011dfc:	4413      	add	r3, r2
 8011dfe:	3304      	adds	r3, #4
 8011e00:	4619      	mov	r1, r3
 8011e02:	68f8      	ldr	r0, [r7, #12]
 8011e04:	f000 fb44 	bl	8012490 <etharp_request>
 8011e08:	4603      	mov	r3, r0
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d138      	bne.n	8011e80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011e0e:	79fa      	ldrb	r2, [r7, #7]
 8011e10:	4928      	ldr	r1, [pc, #160]	; (8011eb4 <etharp_output_to_arp_index+0x124>)
 8011e12:	4613      	mov	r3, r2
 8011e14:	005b      	lsls	r3, r3, #1
 8011e16:	4413      	add	r3, r2
 8011e18:	00db      	lsls	r3, r3, #3
 8011e1a:	440b      	add	r3, r1
 8011e1c:	3314      	adds	r3, #20
 8011e1e:	2203      	movs	r2, #3
 8011e20:	701a      	strb	r2, [r3, #0]
 8011e22:	e02d      	b.n	8011e80 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011e24:	79fa      	ldrb	r2, [r7, #7]
 8011e26:	4923      	ldr	r1, [pc, #140]	; (8011eb4 <etharp_output_to_arp_index+0x124>)
 8011e28:	4613      	mov	r3, r2
 8011e2a:	005b      	lsls	r3, r3, #1
 8011e2c:	4413      	add	r3, r2
 8011e2e:	00db      	lsls	r3, r3, #3
 8011e30:	440b      	add	r3, r1
 8011e32:	3312      	adds	r3, #18
 8011e34:	881b      	ldrh	r3, [r3, #0]
 8011e36:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8011e3a:	d321      	bcc.n	8011e80 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011e3c:	79fa      	ldrb	r2, [r7, #7]
 8011e3e:	4613      	mov	r3, r2
 8011e40:	005b      	lsls	r3, r3, #1
 8011e42:	4413      	add	r3, r2
 8011e44:	00db      	lsls	r3, r3, #3
 8011e46:	4a1b      	ldr	r2, [pc, #108]	; (8011eb4 <etharp_output_to_arp_index+0x124>)
 8011e48:	4413      	add	r3, r2
 8011e4a:	1d19      	adds	r1, r3, #4
 8011e4c:	79fa      	ldrb	r2, [r7, #7]
 8011e4e:	4613      	mov	r3, r2
 8011e50:	005b      	lsls	r3, r3, #1
 8011e52:	4413      	add	r3, r2
 8011e54:	00db      	lsls	r3, r3, #3
 8011e56:	3308      	adds	r3, #8
 8011e58:	4a16      	ldr	r2, [pc, #88]	; (8011eb4 <etharp_output_to_arp_index+0x124>)
 8011e5a:	4413      	add	r3, r2
 8011e5c:	3304      	adds	r3, #4
 8011e5e:	461a      	mov	r2, r3
 8011e60:	68f8      	ldr	r0, [r7, #12]
 8011e62:	f000 faf3 	bl	801244c <etharp_request_dst>
 8011e66:	4603      	mov	r3, r0
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d109      	bne.n	8011e80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011e6c:	79fa      	ldrb	r2, [r7, #7]
 8011e6e:	4911      	ldr	r1, [pc, #68]	; (8011eb4 <etharp_output_to_arp_index+0x124>)
 8011e70:	4613      	mov	r3, r2
 8011e72:	005b      	lsls	r3, r3, #1
 8011e74:	4413      	add	r3, r2
 8011e76:	00db      	lsls	r3, r3, #3
 8011e78:	440b      	add	r3, r1
 8011e7a:	3314      	adds	r3, #20
 8011e7c:	2203      	movs	r2, #3
 8011e7e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8011e86:	79fa      	ldrb	r2, [r7, #7]
 8011e88:	4613      	mov	r3, r2
 8011e8a:	005b      	lsls	r3, r3, #1
 8011e8c:	4413      	add	r3, r2
 8011e8e:	00db      	lsls	r3, r3, #3
 8011e90:	3308      	adds	r3, #8
 8011e92:	4a08      	ldr	r2, [pc, #32]	; (8011eb4 <etharp_output_to_arp_index+0x124>)
 8011e94:	4413      	add	r3, r2
 8011e96:	1d1a      	adds	r2, r3, #4
 8011e98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011e9c:	9300      	str	r3, [sp, #0]
 8011e9e:	4613      	mov	r3, r2
 8011ea0:	460a      	mov	r2, r1
 8011ea2:	68b9      	ldr	r1, [r7, #8]
 8011ea4:	68f8      	ldr	r0, [r7, #12]
 8011ea6:	f001 fdad 	bl	8013a04 <ethernet_output>
 8011eaa:	4603      	mov	r3, r0
}
 8011eac:	4618      	mov	r0, r3
 8011eae:	3710      	adds	r7, #16
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}
 8011eb4:	2000299c 	.word	0x2000299c
 8011eb8:	08016be8 	.word	0x08016be8
 8011ebc:	08016d58 	.word	0x08016d58
 8011ec0:	08016c60 	.word	0x08016c60

08011ec4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b08a      	sub	sp, #40	; 0x28
 8011ec8:	af02      	add	r7, sp, #8
 8011eca:	60f8      	str	r0, [r7, #12]
 8011ecc:	60b9      	str	r1, [r7, #8]
 8011ece:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d106      	bne.n	8011ee8 <etharp_output+0x24>
 8011eda:	4b69      	ldr	r3, [pc, #420]	; (8012080 <etharp_output+0x1bc>)
 8011edc:	f240 321b 	movw	r2, #795	; 0x31b
 8011ee0:	4968      	ldr	r1, [pc, #416]	; (8012084 <etharp_output+0x1c0>)
 8011ee2:	4869      	ldr	r0, [pc, #420]	; (8012088 <etharp_output+0x1c4>)
 8011ee4:	f001 ffe4 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011ee8:	68bb      	ldr	r3, [r7, #8]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d106      	bne.n	8011efc <etharp_output+0x38>
 8011eee:	4b64      	ldr	r3, [pc, #400]	; (8012080 <etharp_output+0x1bc>)
 8011ef0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011ef4:	4965      	ldr	r1, [pc, #404]	; (801208c <etharp_output+0x1c8>)
 8011ef6:	4864      	ldr	r0, [pc, #400]	; (8012088 <etharp_output+0x1c4>)
 8011ef8:	f001 ffda 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d106      	bne.n	8011f10 <etharp_output+0x4c>
 8011f02:	4b5f      	ldr	r3, [pc, #380]	; (8012080 <etharp_output+0x1bc>)
 8011f04:	f240 321d 	movw	r2, #797	; 0x31d
 8011f08:	4961      	ldr	r1, [pc, #388]	; (8012090 <etharp_output+0x1cc>)
 8011f0a:	485f      	ldr	r0, [pc, #380]	; (8012088 <etharp_output+0x1c4>)
 8011f0c:	f001 ffd0 	bl	8013eb0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	68f9      	ldr	r1, [r7, #12]
 8011f16:	4618      	mov	r0, r3
 8011f18:	f000 fed4 	bl	8012cc4 <ip4_addr_isbroadcast_u32>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d002      	beq.n	8011f28 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011f22:	4b5c      	ldr	r3, [pc, #368]	; (8012094 <etharp_output+0x1d0>)
 8011f24:	61fb      	str	r3, [r7, #28]
 8011f26:	e09b      	b.n	8012060 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f30:	2be0      	cmp	r3, #224	; 0xe0
 8011f32:	d118      	bne.n	8011f66 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011f34:	2301      	movs	r3, #1
 8011f36:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011f3c:	235e      	movs	r3, #94	; 0x5e
 8011f3e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	3301      	adds	r3, #1
 8011f44:	781b      	ldrb	r3, [r3, #0]
 8011f46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f4a:	b2db      	uxtb	r3, r3
 8011f4c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	3302      	adds	r3, #2
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	3303      	adds	r3, #3
 8011f5a:	781b      	ldrb	r3, [r3, #0]
 8011f5c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011f5e:	f107 0310 	add.w	r3, r7, #16
 8011f62:	61fb      	str	r3, [r7, #28]
 8011f64:	e07c      	b.n	8012060 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	681a      	ldr	r2, [r3, #0]
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	3304      	adds	r3, #4
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	405a      	eors	r2, r3
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	3308      	adds	r3, #8
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	4013      	ands	r3, r2
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d012      	beq.n	8011fa4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011f84:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011f88:	4293      	cmp	r3, r2
 8011f8a:	d00b      	beq.n	8011fa4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	330c      	adds	r3, #12
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d003      	beq.n	8011f9e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	330c      	adds	r3, #12
 8011f9a:	61bb      	str	r3, [r7, #24]
 8011f9c:	e002      	b.n	8011fa4 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011f9e:	f06f 0303 	mvn.w	r3, #3
 8011fa2:	e069      	b.n	8012078 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011fa4:	4b3c      	ldr	r3, [pc, #240]	; (8012098 <etharp_output+0x1d4>)
 8011fa6:	781b      	ldrb	r3, [r3, #0]
 8011fa8:	4619      	mov	r1, r3
 8011faa:	4a3c      	ldr	r2, [pc, #240]	; (801209c <etharp_output+0x1d8>)
 8011fac:	460b      	mov	r3, r1
 8011fae:	005b      	lsls	r3, r3, #1
 8011fb0:	440b      	add	r3, r1
 8011fb2:	00db      	lsls	r3, r3, #3
 8011fb4:	4413      	add	r3, r2
 8011fb6:	3314      	adds	r3, #20
 8011fb8:	781b      	ldrb	r3, [r3, #0]
 8011fba:	2b01      	cmp	r3, #1
 8011fbc:	d917      	bls.n	8011fee <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011fbe:	69bb      	ldr	r3, [r7, #24]
 8011fc0:	681a      	ldr	r2, [r3, #0]
 8011fc2:	4b35      	ldr	r3, [pc, #212]	; (8012098 <etharp_output+0x1d4>)
 8011fc4:	781b      	ldrb	r3, [r3, #0]
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	4934      	ldr	r1, [pc, #208]	; (801209c <etharp_output+0x1d8>)
 8011fca:	4603      	mov	r3, r0
 8011fcc:	005b      	lsls	r3, r3, #1
 8011fce:	4403      	add	r3, r0
 8011fd0:	00db      	lsls	r3, r3, #3
 8011fd2:	440b      	add	r3, r1
 8011fd4:	3304      	adds	r3, #4
 8011fd6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011fd8:	429a      	cmp	r2, r3
 8011fda:	d108      	bne.n	8011fee <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011fdc:	4b2e      	ldr	r3, [pc, #184]	; (8012098 <etharp_output+0x1d4>)
 8011fde:	781b      	ldrb	r3, [r3, #0]
 8011fe0:	461a      	mov	r2, r3
 8011fe2:	68b9      	ldr	r1, [r7, #8]
 8011fe4:	68f8      	ldr	r0, [r7, #12]
 8011fe6:	f7ff fed3 	bl	8011d90 <etharp_output_to_arp_index>
 8011fea:	4603      	mov	r3, r0
 8011fec:	e044      	b.n	8012078 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011fee:	2300      	movs	r3, #0
 8011ff0:	75fb      	strb	r3, [r7, #23]
 8011ff2:	e02a      	b.n	801204a <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011ff4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011ff8:	4928      	ldr	r1, [pc, #160]	; (801209c <etharp_output+0x1d8>)
 8011ffa:	4613      	mov	r3, r2
 8011ffc:	005b      	lsls	r3, r3, #1
 8011ffe:	4413      	add	r3, r2
 8012000:	00db      	lsls	r3, r3, #3
 8012002:	440b      	add	r3, r1
 8012004:	3314      	adds	r3, #20
 8012006:	781b      	ldrb	r3, [r3, #0]
 8012008:	2b01      	cmp	r3, #1
 801200a:	d918      	bls.n	801203e <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801200c:	69bb      	ldr	r3, [r7, #24]
 801200e:	6819      	ldr	r1, [r3, #0]
 8012010:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012014:	4821      	ldr	r0, [pc, #132]	; (801209c <etharp_output+0x1d8>)
 8012016:	4613      	mov	r3, r2
 8012018:	005b      	lsls	r3, r3, #1
 801201a:	4413      	add	r3, r2
 801201c:	00db      	lsls	r3, r3, #3
 801201e:	4403      	add	r3, r0
 8012020:	3304      	adds	r3, #4
 8012022:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012024:	4299      	cmp	r1, r3
 8012026:	d10a      	bne.n	801203e <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8012028:	7dfa      	ldrb	r2, [r7, #23]
 801202a:	4b1b      	ldr	r3, [pc, #108]	; (8012098 <etharp_output+0x1d4>)
 801202c:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801202e:	7dfb      	ldrb	r3, [r7, #23]
 8012030:	461a      	mov	r2, r3
 8012032:	68b9      	ldr	r1, [r7, #8]
 8012034:	68f8      	ldr	r0, [r7, #12]
 8012036:	f7ff feab 	bl	8011d90 <etharp_output_to_arp_index>
 801203a:	4603      	mov	r3, r0
 801203c:	e01c      	b.n	8012078 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801203e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012042:	b2db      	uxtb	r3, r3
 8012044:	3301      	adds	r3, #1
 8012046:	b2db      	uxtb	r3, r3
 8012048:	75fb      	strb	r3, [r7, #23]
 801204a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801204e:	2b09      	cmp	r3, #9
 8012050:	ddd0      	ble.n	8011ff4 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012052:	68ba      	ldr	r2, [r7, #8]
 8012054:	69b9      	ldr	r1, [r7, #24]
 8012056:	68f8      	ldr	r0, [r7, #12]
 8012058:	f000 f822 	bl	80120a0 <etharp_query>
 801205c:	4603      	mov	r3, r0
 801205e:	e00b      	b.n	8012078 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8012066:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801206a:	9300      	str	r3, [sp, #0]
 801206c:	69fb      	ldr	r3, [r7, #28]
 801206e:	68b9      	ldr	r1, [r7, #8]
 8012070:	68f8      	ldr	r0, [r7, #12]
 8012072:	f001 fcc7 	bl	8013a04 <ethernet_output>
 8012076:	4603      	mov	r3, r0
}
 8012078:	4618      	mov	r0, r3
 801207a:	3720      	adds	r7, #32
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}
 8012080:	08016be8 	.word	0x08016be8
 8012084:	08016d38 	.word	0x08016d38
 8012088:	08016c60 	.word	0x08016c60
 801208c:	08016d88 	.word	0x08016d88
 8012090:	08016d28 	.word	0x08016d28
 8012094:	080173d8 	.word	0x080173d8
 8012098:	20002a8c 	.word	0x20002a8c
 801209c:	2000299c 	.word	0x2000299c

080120a0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b08c      	sub	sp, #48	; 0x30
 80120a4:	af02      	add	r7, sp, #8
 80120a6:	60f8      	str	r0, [r7, #12]
 80120a8:	60b9      	str	r1, [r7, #8]
 80120aa:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	3329      	adds	r3, #41	; 0x29
 80120b0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80120b2:	23ff      	movs	r3, #255	; 0xff
 80120b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80120b8:	2300      	movs	r3, #0
 80120ba:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	68f9      	ldr	r1, [r7, #12]
 80120c2:	4618      	mov	r0, r3
 80120c4:	f000 fdfe 	bl	8012cc4 <ip4_addr_isbroadcast_u32>
 80120c8:	4603      	mov	r3, r0
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d10c      	bne.n	80120e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80120ce:	68bb      	ldr	r3, [r7, #8]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80120d6:	2be0      	cmp	r3, #224	; 0xe0
 80120d8:	d006      	beq.n	80120e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80120da:	68bb      	ldr	r3, [r7, #8]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d003      	beq.n	80120e8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80120e0:	68bb      	ldr	r3, [r7, #8]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d102      	bne.n	80120ee <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80120e8:	f06f 030f 	mvn.w	r3, #15
 80120ec:	e10f      	b.n	801230e <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80120ee:	68fa      	ldr	r2, [r7, #12]
 80120f0:	2101      	movs	r1, #1
 80120f2:	68b8      	ldr	r0, [r7, #8]
 80120f4:	f7ff fba2 	bl	801183c <etharp_find_entry>
 80120f8:	4603      	mov	r3, r0
 80120fa:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 80120fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012100:	2b00      	cmp	r3, #0
 8012102:	da02      	bge.n	801210a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8012104:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012108:	e101      	b.n	801230e <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801210a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801210e:	4982      	ldr	r1, [pc, #520]	; (8012318 <etharp_query+0x278>)
 8012110:	4613      	mov	r3, r2
 8012112:	005b      	lsls	r3, r3, #1
 8012114:	4413      	add	r3, r2
 8012116:	00db      	lsls	r3, r3, #3
 8012118:	440b      	add	r3, r1
 801211a:	3314      	adds	r3, #20
 801211c:	781b      	ldrb	r3, [r3, #0]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d117      	bne.n	8012152 <etharp_query+0xb2>
    is_new_entry = 1;
 8012122:	2301      	movs	r3, #1
 8012124:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012126:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801212a:	497b      	ldr	r1, [pc, #492]	; (8012318 <etharp_query+0x278>)
 801212c:	4613      	mov	r3, r2
 801212e:	005b      	lsls	r3, r3, #1
 8012130:	4413      	add	r3, r2
 8012132:	00db      	lsls	r3, r3, #3
 8012134:	440b      	add	r3, r1
 8012136:	3314      	adds	r3, #20
 8012138:	2201      	movs	r2, #1
 801213a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801213c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012140:	4975      	ldr	r1, [pc, #468]	; (8012318 <etharp_query+0x278>)
 8012142:	4613      	mov	r3, r2
 8012144:	005b      	lsls	r3, r3, #1
 8012146:	4413      	add	r3, r2
 8012148:	00db      	lsls	r3, r3, #3
 801214a:	440b      	add	r3, r1
 801214c:	3308      	adds	r3, #8
 801214e:	68fa      	ldr	r2, [r7, #12]
 8012150:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012152:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012156:	4970      	ldr	r1, [pc, #448]	; (8012318 <etharp_query+0x278>)
 8012158:	4613      	mov	r3, r2
 801215a:	005b      	lsls	r3, r3, #1
 801215c:	4413      	add	r3, r2
 801215e:	00db      	lsls	r3, r3, #3
 8012160:	440b      	add	r3, r1
 8012162:	3314      	adds	r3, #20
 8012164:	781b      	ldrb	r3, [r3, #0]
 8012166:	2b01      	cmp	r3, #1
 8012168:	d012      	beq.n	8012190 <etharp_query+0xf0>
 801216a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801216e:	496a      	ldr	r1, [pc, #424]	; (8012318 <etharp_query+0x278>)
 8012170:	4613      	mov	r3, r2
 8012172:	005b      	lsls	r3, r3, #1
 8012174:	4413      	add	r3, r2
 8012176:	00db      	lsls	r3, r3, #3
 8012178:	440b      	add	r3, r1
 801217a:	3314      	adds	r3, #20
 801217c:	781b      	ldrb	r3, [r3, #0]
 801217e:	2b01      	cmp	r3, #1
 8012180:	d806      	bhi.n	8012190 <etharp_query+0xf0>
 8012182:	4b66      	ldr	r3, [pc, #408]	; (801231c <etharp_query+0x27c>)
 8012184:	f240 32c9 	movw	r2, #969	; 0x3c9
 8012188:	4965      	ldr	r1, [pc, #404]	; (8012320 <etharp_query+0x280>)
 801218a:	4866      	ldr	r0, [pc, #408]	; (8012324 <etharp_query+0x284>)
 801218c:	f001 fe90 	bl	8013eb0 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012190:	6a3b      	ldr	r3, [r7, #32]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d102      	bne.n	801219c <etharp_query+0xfc>
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d10c      	bne.n	80121b6 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801219c:	68b9      	ldr	r1, [r7, #8]
 801219e:	68f8      	ldr	r0, [r7, #12]
 80121a0:	f000 f976 	bl	8012490 <etharp_request>
 80121a4:	4603      	mov	r3, r0
 80121a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d102      	bne.n	80121b6 <etharp_query+0x116>
      return result;
 80121b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80121b4:	e0ab      	b.n	801230e <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d106      	bne.n	80121ca <etharp_query+0x12a>
 80121bc:	4b57      	ldr	r3, [pc, #348]	; (801231c <etharp_query+0x27c>)
 80121be:	f240 32db 	movw	r2, #987	; 0x3db
 80121c2:	4959      	ldr	r1, [pc, #356]	; (8012328 <etharp_query+0x288>)
 80121c4:	4857      	ldr	r0, [pc, #348]	; (8012324 <etharp_query+0x284>)
 80121c6:	f001 fe73 	bl	8013eb0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80121ca:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80121ce:	4952      	ldr	r1, [pc, #328]	; (8012318 <etharp_query+0x278>)
 80121d0:	4613      	mov	r3, r2
 80121d2:	005b      	lsls	r3, r3, #1
 80121d4:	4413      	add	r3, r2
 80121d6:	00db      	lsls	r3, r3, #3
 80121d8:	440b      	add	r3, r1
 80121da:	3314      	adds	r3, #20
 80121dc:	781b      	ldrb	r3, [r3, #0]
 80121de:	2b01      	cmp	r3, #1
 80121e0:	d919      	bls.n	8012216 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 80121e2:	7cfa      	ldrb	r2, [r7, #19]
 80121e4:	4b51      	ldr	r3, [pc, #324]	; (801232c <etharp_query+0x28c>)
 80121e6:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80121e8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80121ec:	4613      	mov	r3, r2
 80121ee:	005b      	lsls	r3, r3, #1
 80121f0:	4413      	add	r3, r2
 80121f2:	00db      	lsls	r3, r3, #3
 80121f4:	3308      	adds	r3, #8
 80121f6:	4a48      	ldr	r2, [pc, #288]	; (8012318 <etharp_query+0x278>)
 80121f8:	4413      	add	r3, r2
 80121fa:	1d1a      	adds	r2, r3, #4
 80121fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012200:	9300      	str	r3, [sp, #0]
 8012202:	4613      	mov	r3, r2
 8012204:	697a      	ldr	r2, [r7, #20]
 8012206:	6879      	ldr	r1, [r7, #4]
 8012208:	68f8      	ldr	r0, [r7, #12]
 801220a:	f001 fbfb 	bl	8013a04 <ethernet_output>
 801220e:	4603      	mov	r3, r0
 8012210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012214:	e079      	b.n	801230a <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012216:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801221a:	493f      	ldr	r1, [pc, #252]	; (8012318 <etharp_query+0x278>)
 801221c:	4613      	mov	r3, r2
 801221e:	005b      	lsls	r3, r3, #1
 8012220:	4413      	add	r3, r2
 8012222:	00db      	lsls	r3, r3, #3
 8012224:	440b      	add	r3, r1
 8012226:	3314      	adds	r3, #20
 8012228:	781b      	ldrb	r3, [r3, #0]
 801222a:	2b01      	cmp	r3, #1
 801222c:	d16d      	bne.n	801230a <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801222e:	2300      	movs	r3, #0
 8012230:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012236:	e01a      	b.n	801226e <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012238:	69fb      	ldr	r3, [r7, #28]
 801223a:	895a      	ldrh	r2, [r3, #10]
 801223c:	69fb      	ldr	r3, [r7, #28]
 801223e:	891b      	ldrh	r3, [r3, #8]
 8012240:	429a      	cmp	r2, r3
 8012242:	d10a      	bne.n	801225a <etharp_query+0x1ba>
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d006      	beq.n	801225a <etharp_query+0x1ba>
 801224c:	4b33      	ldr	r3, [pc, #204]	; (801231c <etharp_query+0x27c>)
 801224e:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8012252:	4937      	ldr	r1, [pc, #220]	; (8012330 <etharp_query+0x290>)
 8012254:	4833      	ldr	r0, [pc, #204]	; (8012324 <etharp_query+0x284>)
 8012256:	f001 fe2b 	bl	8013eb0 <iprintf>
      if (p->type != PBUF_ROM) {
 801225a:	69fb      	ldr	r3, [r7, #28]
 801225c:	7b1b      	ldrb	r3, [r3, #12]
 801225e:	2b01      	cmp	r3, #1
 8012260:	d002      	beq.n	8012268 <etharp_query+0x1c8>
        copy_needed = 1;
 8012262:	2301      	movs	r3, #1
 8012264:	61bb      	str	r3, [r7, #24]
        break;
 8012266:	e005      	b.n	8012274 <etharp_query+0x1d4>
      }
      p = p->next;
 8012268:	69fb      	ldr	r3, [r7, #28]
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801226e:	69fb      	ldr	r3, [r7, #28]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d1e1      	bne.n	8012238 <etharp_query+0x198>
    }
    if (copy_needed) {
 8012274:	69bb      	ldr	r3, [r7, #24]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d017      	beq.n	80122aa <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801227a:	69fb      	ldr	r3, [r7, #28]
 801227c:	891b      	ldrh	r3, [r3, #8]
 801227e:	2200      	movs	r2, #0
 8012280:	4619      	mov	r1, r3
 8012282:	2002      	movs	r0, #2
 8012284:	f7f8 fdfc 	bl	800ae80 <pbuf_alloc>
 8012288:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 801228a:	69fb      	ldr	r3, [r7, #28]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d011      	beq.n	80122b4 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8012290:	6879      	ldr	r1, [r7, #4]
 8012292:	69f8      	ldr	r0, [r7, #28]
 8012294:	f7f9 fa94 	bl	800b7c0 <pbuf_copy>
 8012298:	4603      	mov	r3, r0
 801229a:	2b00      	cmp	r3, #0
 801229c:	d00a      	beq.n	80122b4 <etharp_query+0x214>
          pbuf_free(p);
 801229e:	69f8      	ldr	r0, [r7, #28]
 80122a0:	f7f9 f960 	bl	800b564 <pbuf_free>
          p = NULL;
 80122a4:	2300      	movs	r3, #0
 80122a6:	61fb      	str	r3, [r7, #28]
 80122a8:	e004      	b.n	80122b4 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80122ae:	69f8      	ldr	r0, [r7, #28]
 80122b0:	f7f9 fa08 	bl	800b6c4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80122b4:	69fb      	ldr	r3, [r7, #28]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d024      	beq.n	8012304 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80122ba:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80122be:	4916      	ldr	r1, [pc, #88]	; (8012318 <etharp_query+0x278>)
 80122c0:	4613      	mov	r3, r2
 80122c2:	005b      	lsls	r3, r3, #1
 80122c4:	4413      	add	r3, r2
 80122c6:	00db      	lsls	r3, r3, #3
 80122c8:	440b      	add	r3, r1
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d00b      	beq.n	80122e8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 80122d0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80122d4:	4910      	ldr	r1, [pc, #64]	; (8012318 <etharp_query+0x278>)
 80122d6:	4613      	mov	r3, r2
 80122d8:	005b      	lsls	r3, r3, #1
 80122da:	4413      	add	r3, r2
 80122dc:	00db      	lsls	r3, r3, #3
 80122de:	440b      	add	r3, r1
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7f9 f93e 	bl	800b564 <pbuf_free>
      }
      arp_table[i].q = p;
 80122e8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80122ec:	490a      	ldr	r1, [pc, #40]	; (8012318 <etharp_query+0x278>)
 80122ee:	4613      	mov	r3, r2
 80122f0:	005b      	lsls	r3, r3, #1
 80122f2:	4413      	add	r3, r2
 80122f4:	00db      	lsls	r3, r3, #3
 80122f6:	440b      	add	r3, r1
 80122f8:	69fa      	ldr	r2, [r7, #28]
 80122fa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80122fc:	2300      	movs	r3, #0
 80122fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012302:	e002      	b.n	801230a <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012304:	23ff      	movs	r3, #255	; 0xff
 8012306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801230a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801230e:	4618      	mov	r0, r3
 8012310:	3728      	adds	r7, #40	; 0x28
 8012312:	46bd      	mov	sp, r7
 8012314:	bd80      	pop	{r7, pc}
 8012316:	bf00      	nop
 8012318:	2000299c 	.word	0x2000299c
 801231c:	08016be8 	.word	0x08016be8
 8012320:	08016d94 	.word	0x08016d94
 8012324:	08016c60 	.word	0x08016c60
 8012328:	08016d88 	.word	0x08016d88
 801232c:	20002a8c 	.word	0x20002a8c
 8012330:	08016dbc 	.word	0x08016dbc

08012334 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b08a      	sub	sp, #40	; 0x28
 8012338:	af02      	add	r7, sp, #8
 801233a:	60f8      	str	r0, [r7, #12]
 801233c:	60b9      	str	r1, [r7, #8]
 801233e:	607a      	str	r2, [r7, #4]
 8012340:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8012342:	2300      	movs	r3, #0
 8012344:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d106      	bne.n	801235a <etharp_raw+0x26>
 801234c:	4b3a      	ldr	r3, [pc, #232]	; (8012438 <etharp_raw+0x104>)
 801234e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8012352:	493a      	ldr	r1, [pc, #232]	; (801243c <etharp_raw+0x108>)
 8012354:	483a      	ldr	r0, [pc, #232]	; (8012440 <etharp_raw+0x10c>)
 8012356:	f001 fdab 	bl	8013eb0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801235a:	2200      	movs	r2, #0
 801235c:	211c      	movs	r1, #28
 801235e:	2002      	movs	r0, #2
 8012360:	f7f8 fd8e 	bl	800ae80 <pbuf_alloc>
 8012364:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012366:	69bb      	ldr	r3, [r7, #24]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d102      	bne.n	8012372 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801236c:	f04f 33ff 	mov.w	r3, #4294967295
 8012370:	e05d      	b.n	801242e <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012372:	69bb      	ldr	r3, [r7, #24]
 8012374:	895b      	ldrh	r3, [r3, #10]
 8012376:	2b1b      	cmp	r3, #27
 8012378:	d806      	bhi.n	8012388 <etharp_raw+0x54>
 801237a:	4b2f      	ldr	r3, [pc, #188]	; (8012438 <etharp_raw+0x104>)
 801237c:	f240 4264 	movw	r2, #1124	; 0x464
 8012380:	4930      	ldr	r1, [pc, #192]	; (8012444 <etharp_raw+0x110>)
 8012382:	482f      	ldr	r0, [pc, #188]	; (8012440 <etharp_raw+0x10c>)
 8012384:	f001 fd94 	bl	8013eb0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012388:	69bb      	ldr	r3, [r7, #24]
 801238a:	685b      	ldr	r3, [r3, #4]
 801238c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801238e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012390:	4618      	mov	r0, r3
 8012392:	f7f7 fef7 	bl	800a184 <lwip_htons>
 8012396:	4603      	mov	r3, r0
 8012398:	461a      	mov	r2, r3
 801239a:	697b      	ldr	r3, [r7, #20]
 801239c:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80123a4:	2b06      	cmp	r3, #6
 80123a6:	d006      	beq.n	80123b6 <etharp_raw+0x82>
 80123a8:	4b23      	ldr	r3, [pc, #140]	; (8012438 <etharp_raw+0x104>)
 80123aa:	f240 426b 	movw	r2, #1131	; 0x46b
 80123ae:	4926      	ldr	r1, [pc, #152]	; (8012448 <etharp_raw+0x114>)
 80123b0:	4823      	ldr	r0, [pc, #140]	; (8012440 <etharp_raw+0x10c>)
 80123b2:	f001 fd7d 	bl	8013eb0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80123b6:	697b      	ldr	r3, [r7, #20]
 80123b8:	3308      	adds	r3, #8
 80123ba:	2206      	movs	r2, #6
 80123bc:	6839      	ldr	r1, [r7, #0]
 80123be:	4618      	mov	r0, r3
 80123c0:	f001 fd63 	bl	8013e8a <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	3312      	adds	r3, #18
 80123c8:	2206      	movs	r2, #6
 80123ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80123cc:	4618      	mov	r0, r3
 80123ce:	f001 fd5c 	bl	8013e8a <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80123d2:	697b      	ldr	r3, [r7, #20]
 80123d4:	330e      	adds	r3, #14
 80123d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123d8:	6812      	ldr	r2, [r2, #0]
 80123da:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80123dc:	697b      	ldr	r3, [r7, #20]
 80123de:	3318      	adds	r3, #24
 80123e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123e2:	6812      	ldr	r2, [r2, #0]
 80123e4:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80123e6:	697b      	ldr	r3, [r7, #20]
 80123e8:	2200      	movs	r2, #0
 80123ea:	701a      	strb	r2, [r3, #0]
 80123ec:	2200      	movs	r2, #0
 80123ee:	f042 0201 	orr.w	r2, r2, #1
 80123f2:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	2200      	movs	r2, #0
 80123f8:	f042 0208 	orr.w	r2, r2, #8
 80123fc:	709a      	strb	r2, [r3, #2]
 80123fe:	2200      	movs	r2, #0
 8012400:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012402:	697b      	ldr	r3, [r7, #20]
 8012404:	2206      	movs	r2, #6
 8012406:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012408:	697b      	ldr	r3, [r7, #20]
 801240a:	2204      	movs	r2, #4
 801240c:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801240e:	f640 0306 	movw	r3, #2054	; 0x806
 8012412:	9300      	str	r3, [sp, #0]
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	68ba      	ldr	r2, [r7, #8]
 8012418:	69b9      	ldr	r1, [r7, #24]
 801241a:	68f8      	ldr	r0, [r7, #12]
 801241c:	f001 faf2 	bl	8013a04 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012420:	69b8      	ldr	r0, [r7, #24]
 8012422:	f7f9 f89f 	bl	800b564 <pbuf_free>
  p = NULL;
 8012426:	2300      	movs	r3, #0
 8012428:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801242a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801242e:	4618      	mov	r0, r3
 8012430:	3720      	adds	r7, #32
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
 8012436:	bf00      	nop
 8012438:	08016be8 	.word	0x08016be8
 801243c:	08016d38 	.word	0x08016d38
 8012440:	08016c60 	.word	0x08016c60
 8012444:	08016dd8 	.word	0x08016dd8
 8012448:	08016e0c 	.word	0x08016e0c

0801244c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b088      	sub	sp, #32
 8012450:	af04      	add	r7, sp, #16
 8012452:	60f8      	str	r0, [r7, #12]
 8012454:	60b9      	str	r1, [r7, #8]
 8012456:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012468:	2201      	movs	r2, #1
 801246a:	9203      	str	r2, [sp, #12]
 801246c:	68ba      	ldr	r2, [r7, #8]
 801246e:	9202      	str	r2, [sp, #8]
 8012470:	4a06      	ldr	r2, [pc, #24]	; (801248c <etharp_request_dst+0x40>)
 8012472:	9201      	str	r2, [sp, #4]
 8012474:	9300      	str	r3, [sp, #0]
 8012476:	4603      	mov	r3, r0
 8012478:	687a      	ldr	r2, [r7, #4]
 801247a:	68f8      	ldr	r0, [r7, #12]
 801247c:	f7ff ff5a 	bl	8012334 <etharp_raw>
 8012480:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8012482:	4618      	mov	r0, r3
 8012484:	3710      	adds	r7, #16
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}
 801248a:	bf00      	nop
 801248c:	080173e0 	.word	0x080173e0

08012490 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b082      	sub	sp, #8
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
 8012498:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801249a:	4a05      	ldr	r2, [pc, #20]	; (80124b0 <etharp_request+0x20>)
 801249c:	6839      	ldr	r1, [r7, #0]
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f7ff ffd4 	bl	801244c <etharp_request_dst>
 80124a4:	4603      	mov	r3, r0
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3708      	adds	r7, #8
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bd80      	pop	{r7, pc}
 80124ae:	bf00      	nop
 80124b0:	080173d8 	.word	0x080173d8

080124b4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b08e      	sub	sp, #56	; 0x38
 80124b8:	af04      	add	r7, sp, #16
 80124ba:	6078      	str	r0, [r7, #4]
 80124bc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80124be:	4b7a      	ldr	r3, [pc, #488]	; (80126a8 <icmp_input+0x1f4>)
 80124c0:	689b      	ldr	r3, [r3, #8]
 80124c2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 80124c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c6:	781b      	ldrb	r3, [r3, #0]
 80124c8:	b29b      	uxth	r3, r3
 80124ca:	f003 030f 	and.w	r3, r3, #15
 80124ce:	b29b      	uxth	r3, r3
 80124d0:	009b      	lsls	r3, r3, #2
 80124d2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80124d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80124d6:	2b13      	cmp	r3, #19
 80124d8:	f240 80d1 	bls.w	801267e <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	895b      	ldrh	r3, [r3, #10]
 80124e0:	2b03      	cmp	r3, #3
 80124e2:	f240 80ce 	bls.w	8012682 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	685b      	ldr	r3, [r3, #4]
 80124ea:	781b      	ldrb	r3, [r3, #0]
 80124ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 80124f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	f000 80bb 	beq.w	8012670 <icmp_input+0x1bc>
 80124fa:	2b08      	cmp	r3, #8
 80124fc:	f040 80bb 	bne.w	8012676 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8012500:	4b6a      	ldr	r3, [pc, #424]	; (80126ac <icmp_input+0x1f8>)
 8012502:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012504:	4b68      	ldr	r3, [pc, #416]	; (80126a8 <icmp_input+0x1f4>)
 8012506:	695b      	ldr	r3, [r3, #20]
 8012508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801250c:	2be0      	cmp	r3, #224	; 0xe0
 801250e:	f000 80bf 	beq.w	8012690 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012512:	4b65      	ldr	r3, [pc, #404]	; (80126a8 <icmp_input+0x1f4>)
 8012514:	695a      	ldr	r2, [r3, #20]
 8012516:	4b64      	ldr	r3, [pc, #400]	; (80126a8 <icmp_input+0x1f4>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	4619      	mov	r1, r3
 801251c:	4610      	mov	r0, r2
 801251e:	f000 fbd1 	bl	8012cc4 <ip4_addr_isbroadcast_u32>
 8012522:	4603      	mov	r3, r0
 8012524:	2b00      	cmp	r3, #0
 8012526:	f040 80b5 	bne.w	8012694 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	891b      	ldrh	r3, [r3, #8]
 801252e:	2b07      	cmp	r3, #7
 8012530:	f240 80a9 	bls.w	8012686 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8012534:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012536:	330e      	adds	r3, #14
 8012538:	b29b      	uxth	r3, r3
 801253a:	b21b      	sxth	r3, r3
 801253c:	4619      	mov	r1, r3
 801253e:	6878      	ldr	r0, [r7, #4]
 8012540:	f7f8 ffec 	bl	800b51c <pbuf_header>
 8012544:	4603      	mov	r3, r0
 8012546:	2b00      	cmp	r3, #0
 8012548:	d046      	beq.n	80125d8 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	891a      	ldrh	r2, [r3, #8]
 801254e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012550:	4413      	add	r3, r2
 8012552:	b29b      	uxth	r3, r3
 8012554:	2200      	movs	r2, #0
 8012556:	4619      	mov	r1, r3
 8012558:	2002      	movs	r0, #2
 801255a:	f7f8 fc91 	bl	800ae80 <pbuf_alloc>
 801255e:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8012560:	69bb      	ldr	r3, [r7, #24]
 8012562:	2b00      	cmp	r3, #0
 8012564:	f000 8098 	beq.w	8012698 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012568:	69bb      	ldr	r3, [r7, #24]
 801256a:	895b      	ldrh	r3, [r3, #10]
 801256c:	461a      	mov	r2, r3
 801256e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012570:	3308      	adds	r3, #8
 8012572:	429a      	cmp	r2, r3
 8012574:	d203      	bcs.n	801257e <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8012576:	69b8      	ldr	r0, [r7, #24]
 8012578:	f7f8 fff4 	bl	800b564 <pbuf_free>
        goto icmperr;
 801257c:	e08d      	b.n	801269a <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801257e:	69bb      	ldr	r3, [r7, #24]
 8012580:	685b      	ldr	r3, [r3, #4]
 8012582:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012586:	4618      	mov	r0, r3
 8012588:	f001 fc7f 	bl	8013e8a <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 801258c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801258e:	425b      	negs	r3, r3
 8012590:	b29b      	uxth	r3, r3
 8012592:	b21b      	sxth	r3, r3
 8012594:	4619      	mov	r1, r3
 8012596:	69b8      	ldr	r0, [r7, #24]
 8012598:	f7f8 ffc0 	bl	800b51c <pbuf_header>
 801259c:	4603      	mov	r3, r0
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d009      	beq.n	80125b6 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80125a2:	4b43      	ldr	r3, [pc, #268]	; (80126b0 <icmp_input+0x1fc>)
 80125a4:	22af      	movs	r2, #175	; 0xaf
 80125a6:	4943      	ldr	r1, [pc, #268]	; (80126b4 <icmp_input+0x200>)
 80125a8:	4843      	ldr	r0, [pc, #268]	; (80126b8 <icmp_input+0x204>)
 80125aa:	f001 fc81 	bl	8013eb0 <iprintf>
        pbuf_free(r);
 80125ae:	69b8      	ldr	r0, [r7, #24]
 80125b0:	f7f8 ffd8 	bl	800b564 <pbuf_free>
        goto icmperr;
 80125b4:	e071      	b.n	801269a <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 80125b6:	6879      	ldr	r1, [r7, #4]
 80125b8:	69b8      	ldr	r0, [r7, #24]
 80125ba:	f7f9 f901 	bl	800b7c0 <pbuf_copy>
 80125be:	4603      	mov	r3, r0
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d003      	beq.n	80125cc <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 80125c4:	69b8      	ldr	r0, [r7, #24]
 80125c6:	f7f8 ffcd 	bl	800b564 <pbuf_free>
        goto icmperr;
 80125ca:	e066      	b.n	801269a <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 80125cc:	6878      	ldr	r0, [r7, #4]
 80125ce:	f7f8 ffc9 	bl	800b564 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 80125d2:	69bb      	ldr	r3, [r7, #24]
 80125d4:	607b      	str	r3, [r7, #4]
 80125d6:	e015      	b.n	8012604 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80125d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80125da:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80125de:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80125e2:	33f2      	adds	r3, #242	; 0xf2
 80125e4:	b29b      	uxth	r3, r3
 80125e6:	b21b      	sxth	r3, r3
 80125e8:	4619      	mov	r1, r3
 80125ea:	6878      	ldr	r0, [r7, #4]
 80125ec:	f7f8 ff96 	bl	800b51c <pbuf_header>
 80125f0:	4603      	mov	r3, r0
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d006      	beq.n	8012604 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80125f6:	4b2e      	ldr	r3, [pc, #184]	; (80126b0 <icmp_input+0x1fc>)
 80125f8:	22c0      	movs	r2, #192	; 0xc0
 80125fa:	4930      	ldr	r1, [pc, #192]	; (80126bc <icmp_input+0x208>)
 80125fc:	482e      	ldr	r0, [pc, #184]	; (80126b8 <icmp_input+0x204>)
 80125fe:	f001 fc57 	bl	8013eb0 <iprintf>
        goto icmperr;
 8012602:	e04a      	b.n	801269a <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	685b      	ldr	r3, [r3, #4]
 8012608:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 801260a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801260e:	4619      	mov	r1, r3
 8012610:	6878      	ldr	r0, [r7, #4]
 8012612:	f7f8 ff83 	bl	800b51c <pbuf_header>
 8012616:	4603      	mov	r3, r0
 8012618:	2b00      	cmp	r3, #0
 801261a:	d12b      	bne.n	8012674 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 801261c:	687b      	ldr	r3, [r7, #4]
 801261e:	685b      	ldr	r3, [r3, #4]
 8012620:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8012622:	69fb      	ldr	r3, [r7, #28]
 8012624:	681a      	ldr	r2, [r3, #0]
 8012626:	693b      	ldr	r3, [r7, #16]
 8012628:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801262a:	4b1f      	ldr	r3, [pc, #124]	; (80126a8 <icmp_input+0x1f4>)
 801262c:	691a      	ldr	r2, [r3, #16]
 801262e:	693b      	ldr	r3, [r7, #16]
 8012630:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	2200      	movs	r2, #0
 8012636:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	2200      	movs	r2, #0
 801263c:	709a      	strb	r2, [r3, #2]
 801263e:	2200      	movs	r2, #0
 8012640:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8012642:	693b      	ldr	r3, [r7, #16]
 8012644:	22ff      	movs	r2, #255	; 0xff
 8012646:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8012648:	693b      	ldr	r3, [r7, #16]
 801264a:	2200      	movs	r2, #0
 801264c:	729a      	strb	r2, [r3, #10]
 801264e:	2200      	movs	r2, #0
 8012650:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012652:	683b      	ldr	r3, [r7, #0]
 8012654:	9302      	str	r3, [sp, #8]
 8012656:	2301      	movs	r3, #1
 8012658:	9301      	str	r3, [sp, #4]
 801265a:	2300      	movs	r3, #0
 801265c:	9300      	str	r3, [sp, #0]
 801265e:	23ff      	movs	r3, #255	; 0xff
 8012660:	2200      	movs	r2, #0
 8012662:	69f9      	ldr	r1, [r7, #28]
 8012664:	6878      	ldr	r0, [r7, #4]
 8012666:	f000 fa5b 	bl	8012b20 <ip4_output_if>
 801266a:	4603      	mov	r3, r0
 801266c:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801266e:	e001      	b.n	8012674 <icmp_input+0x1c0>
    break;
 8012670:	bf00      	nop
 8012672:	e000      	b.n	8012676 <icmp_input+0x1c2>
    break;
 8012674:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f7f8 ff74 	bl	800b564 <pbuf_free>
  return;
 801267c:	e011      	b.n	80126a2 <icmp_input+0x1ee>
    goto lenerr;
 801267e:	bf00      	nop
 8012680:	e002      	b.n	8012688 <icmp_input+0x1d4>
    goto lenerr;
 8012682:	bf00      	nop
 8012684:	e000      	b.n	8012688 <icmp_input+0x1d4>
      goto lenerr;
 8012686:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f7f8 ff6b 	bl	800b564 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801268e:	e008      	b.n	80126a2 <icmp_input+0x1ee>
      goto icmperr;
 8012690:	bf00      	nop
 8012692:	e002      	b.n	801269a <icmp_input+0x1e6>
      goto icmperr;
 8012694:	bf00      	nop
 8012696:	e000      	b.n	801269a <icmp_input+0x1e6>
        goto icmperr;
 8012698:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801269a:	6878      	ldr	r0, [r7, #4]
 801269c:	f7f8 ff62 	bl	800b564 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80126a0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80126a2:	3728      	adds	r7, #40	; 0x28
 80126a4:	46bd      	mov	sp, r7
 80126a6:	bd80      	pop	{r7, pc}
 80126a8:	2000746c 	.word	0x2000746c
 80126ac:	20007480 	.word	0x20007480
 80126b0:	08016e50 	.word	0x08016e50
 80126b4:	08016e88 	.word	0x08016e88
 80126b8:	08016ec0 	.word	0x08016ec0
 80126bc:	08016ee8 	.word	0x08016ee8

080126c0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b082      	sub	sp, #8
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
 80126c8:	460b      	mov	r3, r1
 80126ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80126cc:	78fb      	ldrb	r3, [r7, #3]
 80126ce:	461a      	mov	r2, r3
 80126d0:	2103      	movs	r1, #3
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	f000 f814 	bl	8012700 <icmp_send_response>
}
 80126d8:	bf00      	nop
 80126da:	3708      	adds	r7, #8
 80126dc:	46bd      	mov	sp, r7
 80126de:	bd80      	pop	{r7, pc}

080126e0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b082      	sub	sp, #8
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	460b      	mov	r3, r1
 80126ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80126ec:	78fb      	ldrb	r3, [r7, #3]
 80126ee:	461a      	mov	r2, r3
 80126f0:	210b      	movs	r1, #11
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f000 f804 	bl	8012700 <icmp_send_response>
}
 80126f8:	bf00      	nop
 80126fa:	3708      	adds	r7, #8
 80126fc:	46bd      	mov	sp, r7
 80126fe:	bd80      	pop	{r7, pc}

08012700 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b08c      	sub	sp, #48	; 0x30
 8012704:	af04      	add	r7, sp, #16
 8012706:	6078      	str	r0, [r7, #4]
 8012708:	460b      	mov	r3, r1
 801270a:	70fb      	strb	r3, [r7, #3]
 801270c:	4613      	mov	r3, r2
 801270e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012710:	2200      	movs	r2, #0
 8012712:	2124      	movs	r1, #36	; 0x24
 8012714:	2001      	movs	r0, #1
 8012716:	f7f8 fbb3 	bl	800ae80 <pbuf_alloc>
 801271a:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801271c:	69fb      	ldr	r3, [r7, #28]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d04c      	beq.n	80127bc <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012722:	69fb      	ldr	r3, [r7, #28]
 8012724:	895b      	ldrh	r3, [r3, #10]
 8012726:	2b23      	cmp	r3, #35	; 0x23
 8012728:	d806      	bhi.n	8012738 <icmp_send_response+0x38>
 801272a:	4b26      	ldr	r3, [pc, #152]	; (80127c4 <icmp_send_response+0xc4>)
 801272c:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8012730:	4925      	ldr	r1, [pc, #148]	; (80127c8 <icmp_send_response+0xc8>)
 8012732:	4826      	ldr	r0, [pc, #152]	; (80127cc <icmp_send_response+0xcc>)
 8012734:	f001 fbbc 	bl	8013eb0 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	685b      	ldr	r3, [r3, #4]
 801273c:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801273e:	69fb      	ldr	r3, [r7, #28]
 8012740:	685b      	ldr	r3, [r3, #4]
 8012742:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012744:	697b      	ldr	r3, [r7, #20]
 8012746:	78fa      	ldrb	r2, [r7, #3]
 8012748:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801274a:	697b      	ldr	r3, [r7, #20]
 801274c:	78ba      	ldrb	r2, [r7, #2]
 801274e:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012750:	697b      	ldr	r3, [r7, #20]
 8012752:	2200      	movs	r2, #0
 8012754:	711a      	strb	r2, [r3, #4]
 8012756:	2200      	movs	r2, #0
 8012758:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801275a:	697b      	ldr	r3, [r7, #20]
 801275c:	2200      	movs	r2, #0
 801275e:	719a      	strb	r2, [r3, #6]
 8012760:	2200      	movs	r2, #0
 8012762:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012764:	69fb      	ldr	r3, [r7, #28]
 8012766:	685b      	ldr	r3, [r3, #4]
 8012768:	f103 0008 	add.w	r0, r3, #8
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	685b      	ldr	r3, [r3, #4]
 8012770:	221c      	movs	r2, #28
 8012772:	4619      	mov	r1, r3
 8012774:	f001 fb89 	bl	8013e8a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012778:	69bb      	ldr	r3, [r7, #24]
 801277a:	68db      	ldr	r3, [r3, #12]
 801277c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801277e:	f107 030c 	add.w	r3, r7, #12
 8012782:	4618      	mov	r0, r3
 8012784:	f000 f824 	bl	80127d0 <ip4_route>
 8012788:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801278a:	693b      	ldr	r3, [r7, #16]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d011      	beq.n	80127b4 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	2200      	movs	r2, #0
 8012794:	709a      	strb	r2, [r3, #2]
 8012796:	2200      	movs	r2, #0
 8012798:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801279a:	f107 020c 	add.w	r2, r7, #12
 801279e:	693b      	ldr	r3, [r7, #16]
 80127a0:	9302      	str	r3, [sp, #8]
 80127a2:	2301      	movs	r3, #1
 80127a4:	9301      	str	r3, [sp, #4]
 80127a6:	2300      	movs	r3, #0
 80127a8:	9300      	str	r3, [sp, #0]
 80127aa:	23ff      	movs	r3, #255	; 0xff
 80127ac:	2100      	movs	r1, #0
 80127ae:	69f8      	ldr	r0, [r7, #28]
 80127b0:	f000 f9b6 	bl	8012b20 <ip4_output_if>
  }
  pbuf_free(q);
 80127b4:	69f8      	ldr	r0, [r7, #28]
 80127b6:	f7f8 fed5 	bl	800b564 <pbuf_free>
 80127ba:	e000      	b.n	80127be <icmp_send_response+0xbe>
    return;
 80127bc:	bf00      	nop
}
 80127be:	3720      	adds	r7, #32
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd80      	pop	{r7, pc}
 80127c4:	08016e50 	.word	0x08016e50
 80127c8:	08016f1c 	.word	0x08016f1c
 80127cc:	08016ec0 	.word	0x08016ec0

080127d0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80127d0:	b480      	push	{r7}
 80127d2:	b085      	sub	sp, #20
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80127d8:	4b30      	ldr	r3, [pc, #192]	; (801289c <ip4_route+0xcc>)
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	60fb      	str	r3, [r7, #12]
 80127de:	e036      	b.n	801284e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80127e6:	f003 0301 	and.w	r3, r3, #1
 80127ea:	b2db      	uxtb	r3, r3
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d02b      	beq.n	8012848 <ip4_route+0x78>
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80127f6:	089b      	lsrs	r3, r3, #2
 80127f8:	f003 0301 	and.w	r3, r3, #1
 80127fc:	b2db      	uxtb	r3, r3
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d022      	beq.n	8012848 <ip4_route+0x78>
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	3304      	adds	r3, #4
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d01d      	beq.n	8012848 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681a      	ldr	r2, [r3, #0]
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	3304      	adds	r3, #4
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	405a      	eors	r2, r3
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	3308      	adds	r3, #8
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	4013      	ands	r3, r2
 8012820:	2b00      	cmp	r3, #0
 8012822:	d101      	bne.n	8012828 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	e033      	b.n	8012890 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801282e:	f003 0302 	and.w	r3, r3, #2
 8012832:	2b00      	cmp	r3, #0
 8012834:	d108      	bne.n	8012848 <ip4_route+0x78>
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681a      	ldr	r2, [r3, #0]
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	330c      	adds	r3, #12
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	429a      	cmp	r2, r3
 8012842:	d101      	bne.n	8012848 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	e023      	b.n	8012890 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	60fb      	str	r3, [r7, #12]
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d1c5      	bne.n	80127e0 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012854:	4b12      	ldr	r3, [pc, #72]	; (80128a0 <ip4_route+0xd0>)
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d015      	beq.n	8012888 <ip4_route+0xb8>
 801285c:	4b10      	ldr	r3, [pc, #64]	; (80128a0 <ip4_route+0xd0>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012864:	f003 0301 	and.w	r3, r3, #1
 8012868:	2b00      	cmp	r3, #0
 801286a:	d00d      	beq.n	8012888 <ip4_route+0xb8>
 801286c:	4b0c      	ldr	r3, [pc, #48]	; (80128a0 <ip4_route+0xd0>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012874:	f003 0304 	and.w	r3, r3, #4
 8012878:	2b00      	cmp	r3, #0
 801287a:	d005      	beq.n	8012888 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 801287c:	4b08      	ldr	r3, [pc, #32]	; (80128a0 <ip4_route+0xd0>)
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	3304      	adds	r3, #4
 8012882:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012884:	2b00      	cmp	r3, #0
 8012886:	d101      	bne.n	801288c <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012888:	2300      	movs	r3, #0
 801288a:	e001      	b.n	8012890 <ip4_route+0xc0>
  }

  return netif_default;
 801288c:	4b04      	ldr	r3, [pc, #16]	; (80128a0 <ip4_route+0xd0>)
 801288e:	681b      	ldr	r3, [r3, #0]
}
 8012890:	4618      	mov	r0, r3
 8012892:	3714      	adds	r7, #20
 8012894:	46bd      	mov	sp, r7
 8012896:	bc80      	pop	{r7}
 8012898:	4770      	bx	lr
 801289a:	bf00      	nop
 801289c:	2000acfc 	.word	0x2000acfc
 80128a0:	2000ad00 	.word	0x2000ad00

080128a4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80128a4:	b580      	push	{r7, lr}
 80128a6:	b086      	sub	sp, #24
 80128a8:	af00      	add	r7, sp, #0
 80128aa:	6078      	str	r0, [r7, #4]
 80128ac:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	685b      	ldr	r3, [r3, #4]
 80128b2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	781b      	ldrb	r3, [r3, #0]
 80128b8:	091b      	lsrs	r3, r3, #4
 80128ba:	b2db      	uxtb	r3, r3
 80128bc:	2b04      	cmp	r3, #4
 80128be:	d004      	beq.n	80128ca <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f7f8 fe4f 	bl	800b564 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80128c6:	2300      	movs	r3, #0
 80128c8:	e122      	b.n	8012b10 <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	b29b      	uxth	r3, r3
 80128d0:	f003 030f 	and.w	r3, r3, #15
 80128d4:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 80128d6:	897b      	ldrh	r3, [r7, #10]
 80128d8:	009b      	lsls	r3, r3, #2
 80128da:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80128dc:	697b      	ldr	r3, [r7, #20]
 80128de:	885b      	ldrh	r3, [r3, #2]
 80128e0:	b29b      	uxth	r3, r3
 80128e2:	4618      	mov	r0, r3
 80128e4:	f7f7 fc4e 	bl	800a184 <lwip_htons>
 80128e8:	4603      	mov	r3, r0
 80128ea:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	891b      	ldrh	r3, [r3, #8]
 80128f0:	893a      	ldrh	r2, [r7, #8]
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d204      	bcs.n	8012900 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 80128f6:	893b      	ldrh	r3, [r7, #8]
 80128f8:	4619      	mov	r1, r3
 80128fa:	6878      	ldr	r0, [r7, #4]
 80128fc:	f7f8 fcbe 	bl	800b27c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	895b      	ldrh	r3, [r3, #10]
 8012904:	897a      	ldrh	r2, [r7, #10]
 8012906:	429a      	cmp	r2, r3
 8012908:	d807      	bhi.n	801291a <ip4_input+0x76>
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	891b      	ldrh	r3, [r3, #8]
 801290e:	893a      	ldrh	r2, [r7, #8]
 8012910:	429a      	cmp	r2, r3
 8012912:	d802      	bhi.n	801291a <ip4_input+0x76>
 8012914:	897b      	ldrh	r3, [r7, #10]
 8012916:	2b13      	cmp	r3, #19
 8012918:	d804      	bhi.n	8012924 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801291a:	6878      	ldr	r0, [r7, #4]
 801291c:	f7f8 fe22 	bl	800b564 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012920:	2300      	movs	r3, #0
 8012922:	e0f5      	b.n	8012b10 <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012924:	697b      	ldr	r3, [r7, #20]
 8012926:	691b      	ldr	r3, [r3, #16]
 8012928:	4a7b      	ldr	r2, [pc, #492]	; (8012b18 <ip4_input+0x274>)
 801292a:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801292c:	697b      	ldr	r3, [r7, #20]
 801292e:	68db      	ldr	r3, [r3, #12]
 8012930:	4a79      	ldr	r2, [pc, #484]	; (8012b18 <ip4_input+0x274>)
 8012932:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012934:	4b78      	ldr	r3, [pc, #480]	; (8012b18 <ip4_input+0x274>)
 8012936:	695b      	ldr	r3, [r3, #20]
 8012938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801293c:	2be0      	cmp	r3, #224	; 0xe0
 801293e:	d112      	bne.n	8012966 <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012940:	683b      	ldr	r3, [r7, #0]
 8012942:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012946:	f003 0301 	and.w	r3, r3, #1
 801294a:	b2db      	uxtb	r3, r3
 801294c:	2b00      	cmp	r3, #0
 801294e:	d007      	beq.n	8012960 <ip4_input+0xbc>
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	3304      	adds	r3, #4
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d002      	beq.n	8012960 <ip4_input+0xbc>
      netif = inp;
 801295a:	683b      	ldr	r3, [r7, #0]
 801295c:	613b      	str	r3, [r7, #16]
 801295e:	e041      	b.n	80129e4 <ip4_input+0x140>
    } else {
      netif = NULL;
 8012960:	2300      	movs	r3, #0
 8012962:	613b      	str	r3, [r7, #16]
 8012964:	e03e      	b.n	80129e4 <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8012966:	2301      	movs	r3, #1
 8012968:	60fb      	str	r3, [r7, #12]
    netif = inp;
 801296a:	683b      	ldr	r3, [r7, #0]
 801296c:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801296e:	693b      	ldr	r3, [r7, #16]
 8012970:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012974:	f003 0301 	and.w	r3, r3, #1
 8012978:	b2db      	uxtb	r3, r3
 801297a:	2b00      	cmp	r3, #0
 801297c:	d014      	beq.n	80129a8 <ip4_input+0x104>
 801297e:	693b      	ldr	r3, [r7, #16]
 8012980:	3304      	adds	r3, #4
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d00f      	beq.n	80129a8 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012988:	4b63      	ldr	r3, [pc, #396]	; (8012b18 <ip4_input+0x274>)
 801298a:	695a      	ldr	r2, [r3, #20]
 801298c:	693b      	ldr	r3, [r7, #16]
 801298e:	3304      	adds	r3, #4
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	429a      	cmp	r2, r3
 8012994:	d026      	beq.n	80129e4 <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012996:	4b60      	ldr	r3, [pc, #384]	; (8012b18 <ip4_input+0x274>)
 8012998:	695b      	ldr	r3, [r3, #20]
 801299a:	6939      	ldr	r1, [r7, #16]
 801299c:	4618      	mov	r0, r3
 801299e:	f000 f991 	bl	8012cc4 <ip4_addr_isbroadcast_u32>
 80129a2:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d11d      	bne.n	80129e4 <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d00d      	beq.n	80129ca <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 80129ae:	4b5a      	ldr	r3, [pc, #360]	; (8012b18 <ip4_input+0x274>)
 80129b0:	695b      	ldr	r3, [r3, #20]
 80129b2:	b2db      	uxtb	r3, r3
 80129b4:	2b7f      	cmp	r3, #127	; 0x7f
 80129b6:	d102      	bne.n	80129be <ip4_input+0x11a>
          netif = NULL;
 80129b8:	2300      	movs	r3, #0
 80129ba:	613b      	str	r3, [r7, #16]
          break;
 80129bc:	e012      	b.n	80129e4 <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 80129be:	2300      	movs	r3, #0
 80129c0:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 80129c2:	4b56      	ldr	r3, [pc, #344]	; (8012b1c <ip4_input+0x278>)
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	613b      	str	r3, [r7, #16]
 80129c8:	e002      	b.n	80129d0 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 80129d0:	693a      	ldr	r2, [r7, #16]
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	429a      	cmp	r2, r3
 80129d6:	d102      	bne.n	80129de <ip4_input+0x13a>
        netif = netif->next;
 80129d8:	693b      	ldr	r3, [r7, #16]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 80129de:	693b      	ldr	r3, [r7, #16]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d1c4      	bne.n	801296e <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80129e4:	4b4c      	ldr	r3, [pc, #304]	; (8012b18 <ip4_input+0x274>)
 80129e6:	691b      	ldr	r3, [r3, #16]
 80129e8:	6839      	ldr	r1, [r7, #0]
 80129ea:	4618      	mov	r0, r3
 80129ec:	f000 f96a 	bl	8012cc4 <ip4_addr_isbroadcast_u32>
 80129f0:	4603      	mov	r3, r0
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d105      	bne.n	8012a02 <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80129f6:	4b48      	ldr	r3, [pc, #288]	; (8012b18 <ip4_input+0x274>)
 80129f8:	691b      	ldr	r3, [r3, #16]
 80129fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80129fe:	2be0      	cmp	r3, #224	; 0xe0
 8012a00:	d104      	bne.n	8012a0c <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f7f8 fdae 	bl	800b564 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012a08:	2300      	movs	r3, #0
 8012a0a:	e081      	b.n	8012b10 <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012a0c:	693b      	ldr	r3, [r7, #16]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d104      	bne.n	8012a1c <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012a12:	6878      	ldr	r0, [r7, #4]
 8012a14:	f7f8 fda6 	bl	800b564 <pbuf_free>
    return ERR_OK;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	e079      	b.n	8012b10 <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	88db      	ldrh	r3, [r3, #6]
 8012a20:	b29b      	uxth	r3, r3
 8012a22:	461a      	mov	r2, r3
 8012a24:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012a28:	4013      	ands	r3, r2
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d00b      	beq.n	8012a46 <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f000 fc8c 	bl	801334c <ip4_reass>
 8012a34:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d101      	bne.n	8012a40 <ip4_input+0x19c>
      return ERR_OK;
 8012a3c:	2300      	movs	r3, #0
 8012a3e:	e067      	b.n	8012b10 <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	685b      	ldr	r3, [r3, #4]
 8012a44:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012a46:	4a34      	ldr	r2, [pc, #208]	; (8012b18 <ip4_input+0x274>)
 8012a48:	693b      	ldr	r3, [r7, #16]
 8012a4a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012a4c:	4a32      	ldr	r2, [pc, #200]	; (8012b18 <ip4_input+0x274>)
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012a52:	4a31      	ldr	r2, [pc, #196]	; (8012b18 <ip4_input+0x274>)
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	781b      	ldrb	r3, [r3, #0]
 8012a5c:	b29b      	uxth	r3, r3
 8012a5e:	f003 030f 	and.w	r3, r3, #15
 8012a62:	b29b      	uxth	r3, r3
 8012a64:	009b      	lsls	r3, r3, #2
 8012a66:	b29a      	uxth	r2, r3
 8012a68:	4b2b      	ldr	r3, [pc, #172]	; (8012b18 <ip4_input+0x274>)
 8012a6a:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8012a6c:	897b      	ldrh	r3, [r7, #10]
 8012a6e:	425b      	negs	r3, r3
 8012a70:	b29b      	uxth	r3, r3
 8012a72:	b21b      	sxth	r3, r3
 8012a74:	4619      	mov	r1, r3
 8012a76:	6878      	ldr	r0, [r7, #4]
 8012a78:	f7f8 fd50 	bl	800b51c <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	7a5b      	ldrb	r3, [r3, #9]
 8012a80:	2b06      	cmp	r3, #6
 8012a82:	d009      	beq.n	8012a98 <ip4_input+0x1f4>
 8012a84:	2b11      	cmp	r3, #17
 8012a86:	d002      	beq.n	8012a8e <ip4_input+0x1ea>
 8012a88:	2b01      	cmp	r3, #1
 8012a8a:	d00a      	beq.n	8012aa2 <ip4_input+0x1fe>
 8012a8c:	e00e      	b.n	8012aac <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8012a8e:	6839      	ldr	r1, [r7, #0]
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f7fe fbb7 	bl	8011204 <udp_input>
      break;
 8012a96:	e028      	b.n	8012aea <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8012a98:	6839      	ldr	r1, [r7, #0]
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	f7fa fbdc 	bl	800d258 <tcp_input>
      break;
 8012aa0:	e023      	b.n	8012aea <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8012aa2:	6839      	ldr	r1, [r7, #0]
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	f7ff fd05 	bl	80124b4 <icmp_input>
      break;
 8012aaa:	e01e      	b.n	8012aea <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012aac:	4b1a      	ldr	r3, [pc, #104]	; (8012b18 <ip4_input+0x274>)
 8012aae:	695b      	ldr	r3, [r3, #20]
 8012ab0:	6939      	ldr	r1, [r7, #16]
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f000 f906 	bl	8012cc4 <ip4_addr_isbroadcast_u32>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d112      	bne.n	8012ae4 <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012abe:	4b16      	ldr	r3, [pc, #88]	; (8012b18 <ip4_input+0x274>)
 8012ac0:	695b      	ldr	r3, [r3, #20]
 8012ac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012ac6:	2be0      	cmp	r3, #224	; 0xe0
 8012ac8:	d00c      	beq.n	8012ae4 <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8012aca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012ace:	4619      	mov	r1, r3
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f7f8 fd35 	bl	800b540 <pbuf_header_force>
        p->payload = iphdr;
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	697a      	ldr	r2, [r7, #20]
 8012ada:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012adc:	2102      	movs	r1, #2
 8012ade:	6878      	ldr	r0, [r7, #4]
 8012ae0:	f7ff fdee 	bl	80126c0 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8012ae4:	6878      	ldr	r0, [r7, #4]
 8012ae6:	f7f8 fd3d 	bl	800b564 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012aea:	4b0b      	ldr	r3, [pc, #44]	; (8012b18 <ip4_input+0x274>)
 8012aec:	2200      	movs	r2, #0
 8012aee:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012af0:	4b09      	ldr	r3, [pc, #36]	; (8012b18 <ip4_input+0x274>)
 8012af2:	2200      	movs	r2, #0
 8012af4:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012af6:	4b08      	ldr	r3, [pc, #32]	; (8012b18 <ip4_input+0x274>)
 8012af8:	2200      	movs	r2, #0
 8012afa:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012afc:	4b06      	ldr	r3, [pc, #24]	; (8012b18 <ip4_input+0x274>)
 8012afe:	2200      	movs	r2, #0
 8012b00:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012b02:	4b05      	ldr	r3, [pc, #20]	; (8012b18 <ip4_input+0x274>)
 8012b04:	2200      	movs	r2, #0
 8012b06:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012b08:	4b03      	ldr	r3, [pc, #12]	; (8012b18 <ip4_input+0x274>)
 8012b0a:	2200      	movs	r2, #0
 8012b0c:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012b0e:	2300      	movs	r3, #0
}
 8012b10:	4618      	mov	r0, r3
 8012b12:	3718      	adds	r7, #24
 8012b14:	46bd      	mov	sp, r7
 8012b16:	bd80      	pop	{r7, pc}
 8012b18:	2000746c 	.word	0x2000746c
 8012b1c:	2000acfc 	.word	0x2000acfc

08012b20 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b08a      	sub	sp, #40	; 0x28
 8012b24:	af04      	add	r7, sp, #16
 8012b26:	60f8      	str	r0, [r7, #12]
 8012b28:	60b9      	str	r1, [r7, #8]
 8012b2a:	607a      	str	r2, [r7, #4]
 8012b2c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012b2e:	68bb      	ldr	r3, [r7, #8]
 8012b30:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d009      	beq.n	8012b4c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012b38:	68bb      	ldr	r3, [r7, #8]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d003      	beq.n	8012b46 <ip4_output_if+0x26>
 8012b3e:	68bb      	ldr	r3, [r7, #8]
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d102      	bne.n	8012b4c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b48:	3304      	adds	r3, #4
 8012b4a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012b4c:	78fa      	ldrb	r2, [r7, #3]
 8012b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b50:	9302      	str	r3, [sp, #8]
 8012b52:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012b56:	9301      	str	r3, [sp, #4]
 8012b58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012b5c:	9300      	str	r3, [sp, #0]
 8012b5e:	4613      	mov	r3, r2
 8012b60:	687a      	ldr	r2, [r7, #4]
 8012b62:	6979      	ldr	r1, [r7, #20]
 8012b64:	68f8      	ldr	r0, [r7, #12]
 8012b66:	f000 f805 	bl	8012b74 <ip4_output_if_src>
 8012b6a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	3718      	adds	r7, #24
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd80      	pop	{r7, pc}

08012b74 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b088      	sub	sp, #32
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	60f8      	str	r0, [r7, #12]
 8012b7c:	60b9      	str	r1, [r7, #8]
 8012b7e:	607a      	str	r2, [r7, #4]
 8012b80:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	89db      	ldrh	r3, [r3, #14]
 8012b86:	2b01      	cmp	r3, #1
 8012b88:	d006      	beq.n	8012b98 <ip4_output_if_src+0x24>
 8012b8a:	4b48      	ldr	r3, [pc, #288]	; (8012cac <ip4_output_if_src+0x138>)
 8012b8c:	f240 3233 	movw	r2, #819	; 0x333
 8012b90:	4947      	ldr	r1, [pc, #284]	; (8012cb0 <ip4_output_if_src+0x13c>)
 8012b92:	4848      	ldr	r0, [pc, #288]	; (8012cb4 <ip4_output_if_src+0x140>)
 8012b94:	f001 f98c 	bl	8013eb0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d060      	beq.n	8012c60 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012b9e:	2314      	movs	r3, #20
 8012ba0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8012ba2:	2114      	movs	r1, #20
 8012ba4:	68f8      	ldr	r0, [r7, #12]
 8012ba6:	f7f8 fcb9 	bl	800b51c <pbuf_header>
 8012baa:	4603      	mov	r3, r0
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d002      	beq.n	8012bb6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012bb0:	f06f 0301 	mvn.w	r3, #1
 8012bb4:	e075      	b.n	8012ca2 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	895b      	ldrh	r3, [r3, #10]
 8012bc0:	2b13      	cmp	r3, #19
 8012bc2:	d806      	bhi.n	8012bd2 <ip4_output_if_src+0x5e>
 8012bc4:	4b39      	ldr	r3, [pc, #228]	; (8012cac <ip4_output_if_src+0x138>)
 8012bc6:	f240 3261 	movw	r2, #865	; 0x361
 8012bca:	493b      	ldr	r1, [pc, #236]	; (8012cb8 <ip4_output_if_src+0x144>)
 8012bcc:	4839      	ldr	r0, [pc, #228]	; (8012cb4 <ip4_output_if_src+0x140>)
 8012bce:	f001 f96f 	bl	8013eb0 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012bd2:	69fb      	ldr	r3, [r7, #28]
 8012bd4:	78fa      	ldrb	r2, [r7, #3]
 8012bd6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012bd8:	69fb      	ldr	r3, [r7, #28]
 8012bda:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012bde:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	681a      	ldr	r2, [r3, #0]
 8012be4:	69fb      	ldr	r3, [r7, #28]
 8012be6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012be8:	8b7b      	ldrh	r3, [r7, #26]
 8012bea:	089b      	lsrs	r3, r3, #2
 8012bec:	b29b      	uxth	r3, r3
 8012bee:	b2db      	uxtb	r3, r3
 8012bf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012bf4:	b2da      	uxtb	r2, r3
 8012bf6:	69fb      	ldr	r3, [r7, #28]
 8012bf8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012bfa:	69fb      	ldr	r3, [r7, #28]
 8012bfc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012c00:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	891b      	ldrh	r3, [r3, #8]
 8012c06:	4618      	mov	r0, r3
 8012c08:	f7f7 fabc 	bl	800a184 <lwip_htons>
 8012c0c:	4603      	mov	r3, r0
 8012c0e:	461a      	mov	r2, r3
 8012c10:	69fb      	ldr	r3, [r7, #28]
 8012c12:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012c14:	69fb      	ldr	r3, [r7, #28]
 8012c16:	2200      	movs	r2, #0
 8012c18:	719a      	strb	r2, [r3, #6]
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012c1e:	4b27      	ldr	r3, [pc, #156]	; (8012cbc <ip4_output_if_src+0x148>)
 8012c20:	881b      	ldrh	r3, [r3, #0]
 8012c22:	4618      	mov	r0, r3
 8012c24:	f7f7 faae 	bl	800a184 <lwip_htons>
 8012c28:	4603      	mov	r3, r0
 8012c2a:	461a      	mov	r2, r3
 8012c2c:	69fb      	ldr	r3, [r7, #28]
 8012c2e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012c30:	4b22      	ldr	r3, [pc, #136]	; (8012cbc <ip4_output_if_src+0x148>)
 8012c32:	881b      	ldrh	r3, [r3, #0]
 8012c34:	3301      	adds	r3, #1
 8012c36:	b29a      	uxth	r2, r3
 8012c38:	4b20      	ldr	r3, [pc, #128]	; (8012cbc <ip4_output_if_src+0x148>)
 8012c3a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d104      	bne.n	8012c4c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012c42:	4b1f      	ldr	r3, [pc, #124]	; (8012cc0 <ip4_output_if_src+0x14c>)
 8012c44:	681a      	ldr	r2, [r3, #0]
 8012c46:	69fb      	ldr	r3, [r7, #28]
 8012c48:	60da      	str	r2, [r3, #12]
 8012c4a:	e003      	b.n	8012c54 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012c4c:	68bb      	ldr	r3, [r7, #8]
 8012c4e:	681a      	ldr	r2, [r3, #0]
 8012c50:	69fb      	ldr	r3, [r7, #28]
 8012c52:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012c54:	69fb      	ldr	r3, [r7, #28]
 8012c56:	2200      	movs	r2, #0
 8012c58:	729a      	strb	r2, [r3, #10]
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	72da      	strb	r2, [r3, #11]
 8012c5e:	e008      	b.n	8012c72 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	685b      	ldr	r3, [r3, #4]
 8012c64:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012c66:	69fb      	ldr	r3, [r7, #28]
 8012c68:	691b      	ldr	r3, [r3, #16]
 8012c6a:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012c6c:	f107 0314 	add.w	r3, r7, #20
 8012c70:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d00c      	beq.n	8012c94 <ip4_output_if_src+0x120>
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	891a      	ldrh	r2, [r3, #8]
 8012c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012c82:	429a      	cmp	r2, r3
 8012c84:	d906      	bls.n	8012c94 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8012c86:	687a      	ldr	r2, [r7, #4]
 8012c88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012c8a:	68f8      	ldr	r0, [r7, #12]
 8012c8c:	f000 fd08 	bl	80136a0 <ip4_frag>
 8012c90:	4603      	mov	r3, r0
 8012c92:	e006      	b.n	8012ca2 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c96:	695b      	ldr	r3, [r3, #20]
 8012c98:	687a      	ldr	r2, [r7, #4]
 8012c9a:	68f9      	ldr	r1, [r7, #12]
 8012c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c9e:	4798      	blx	r3
 8012ca0:	4603      	mov	r3, r0
}
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	3720      	adds	r7, #32
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}
 8012caa:	bf00      	nop
 8012cac:	08016f48 	.word	0x08016f48
 8012cb0:	08016f7c 	.word	0x08016f7c
 8012cb4:	08016f88 	.word	0x08016f88
 8012cb8:	08016fb0 	.word	0x08016fb0
 8012cbc:	20002a8e 	.word	0x20002a8e
 8012cc0:	080173d4 	.word	0x080173d4

08012cc4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012cc4:	b480      	push	{r7}
 8012cc6:	b085      	sub	sp, #20
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
 8012ccc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cd8:	d002      	beq.n	8012ce0 <ip4_addr_isbroadcast_u32+0x1c>
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d101      	bne.n	8012ce4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	e02a      	b.n	8012d3a <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012cea:	f003 0302 	and.w	r3, r3, #2
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d101      	bne.n	8012cf6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	e021      	b.n	8012d3a <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012cf6:	683b      	ldr	r3, [r7, #0]
 8012cf8:	3304      	adds	r3, #4
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	687a      	ldr	r2, [r7, #4]
 8012cfe:	429a      	cmp	r2, r3
 8012d00:	d101      	bne.n	8012d06 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012d02:	2300      	movs	r3, #0
 8012d04:	e019      	b.n	8012d3a <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012d06:	68fa      	ldr	r2, [r7, #12]
 8012d08:	683b      	ldr	r3, [r7, #0]
 8012d0a:	3304      	adds	r3, #4
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	405a      	eors	r2, r3
 8012d10:	683b      	ldr	r3, [r7, #0]
 8012d12:	3308      	adds	r3, #8
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	4013      	ands	r3, r2
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d10d      	bne.n	8012d38 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	3308      	adds	r3, #8
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	43da      	mvns	r2, r3
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012d28:	683b      	ldr	r3, [r7, #0]
 8012d2a:	3308      	adds	r3, #8
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012d30:	429a      	cmp	r2, r3
 8012d32:	d101      	bne.n	8012d38 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012d34:	2301      	movs	r3, #1
 8012d36:	e000      	b.n	8012d3a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012d38:	2300      	movs	r3, #0
  }
}
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	3714      	adds	r7, #20
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	bc80      	pop	{r7}
 8012d42:	4770      	bx	lr

08012d44 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b084      	sub	sp, #16
 8012d48:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012d4e:	4b12      	ldr	r3, [pc, #72]	; (8012d98 <ip_reass_tmr+0x54>)
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012d54:	e018      	b.n	8012d88 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	7fdb      	ldrb	r3, [r3, #31]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d00b      	beq.n	8012d76 <ip_reass_tmr+0x32>
      r->timer--;
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	7fdb      	ldrb	r3, [r3, #31]
 8012d62:	3b01      	subs	r3, #1
 8012d64:	b2da      	uxtb	r2, r3
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	60fb      	str	r3, [r7, #12]
 8012d74:	e008      	b.n	8012d88 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012d80:	68b9      	ldr	r1, [r7, #8]
 8012d82:	6878      	ldr	r0, [r7, #4]
 8012d84:	f000 f80a 	bl	8012d9c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d1e3      	bne.n	8012d56 <ip_reass_tmr+0x12>
     }
   }
}
 8012d8e:	bf00      	nop
 8012d90:	3710      	adds	r7, #16
 8012d92:	46bd      	mov	sp, r7
 8012d94:	bd80      	pop	{r7, pc}
 8012d96:	bf00      	nop
 8012d98:	20002a90 	.word	0x20002a90

08012d9c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b088      	sub	sp, #32
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
 8012da4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012da6:	2300      	movs	r3, #0
 8012da8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012daa:	683a      	ldr	r2, [r7, #0]
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	429a      	cmp	r2, r3
 8012db0:	d105      	bne.n	8012dbe <ip_reass_free_complete_datagram+0x22>
 8012db2:	4b45      	ldr	r3, [pc, #276]	; (8012ec8 <ip_reass_free_complete_datagram+0x12c>)
 8012db4:	22ab      	movs	r2, #171	; 0xab
 8012db6:	4945      	ldr	r1, [pc, #276]	; (8012ecc <ip_reass_free_complete_datagram+0x130>)
 8012db8:	4845      	ldr	r0, [pc, #276]	; (8012ed0 <ip_reass_free_complete_datagram+0x134>)
 8012dba:	f001 f879 	bl	8013eb0 <iprintf>
  if (prev != NULL) {
 8012dbe:	683b      	ldr	r3, [r7, #0]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d00a      	beq.n	8012dda <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012dc4:	683b      	ldr	r3, [r7, #0]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	687a      	ldr	r2, [r7, #4]
 8012dca:	429a      	cmp	r2, r3
 8012dcc:	d005      	beq.n	8012dda <ip_reass_free_complete_datagram+0x3e>
 8012dce:	4b3e      	ldr	r3, [pc, #248]	; (8012ec8 <ip_reass_free_complete_datagram+0x12c>)
 8012dd0:	22ad      	movs	r2, #173	; 0xad
 8012dd2:	4940      	ldr	r1, [pc, #256]	; (8012ed4 <ip_reass_free_complete_datagram+0x138>)
 8012dd4:	483e      	ldr	r0, [pc, #248]	; (8012ed0 <ip_reass_free_complete_datagram+0x134>)
 8012dd6:	f001 f86b 	bl	8013eb0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	685b      	ldr	r3, [r3, #4]
 8012dde:	685b      	ldr	r3, [r3, #4]
 8012de0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012de2:	697b      	ldr	r3, [r7, #20]
 8012de4:	889b      	ldrh	r3, [r3, #4]
 8012de6:	b29b      	uxth	r3, r3
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d12a      	bne.n	8012e42 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	685b      	ldr	r3, [r3, #4]
 8012df0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012df2:	697b      	ldr	r3, [r7, #20]
 8012df4:	681a      	ldr	r2, [r3, #0]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012dfa:	69bb      	ldr	r3, [r7, #24]
 8012dfc:	6858      	ldr	r0, [r3, #4]
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	3308      	adds	r3, #8
 8012e02:	2214      	movs	r2, #20
 8012e04:	4619      	mov	r1, r3
 8012e06:	f001 f840 	bl	8013e8a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012e0a:	2101      	movs	r1, #1
 8012e0c:	69b8      	ldr	r0, [r7, #24]
 8012e0e:	f7ff fc67 	bl	80126e0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012e12:	69b8      	ldr	r0, [r7, #24]
 8012e14:	f7f8 fc40 	bl	800b698 <pbuf_clen>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012e1c:	8bfa      	ldrh	r2, [r7, #30]
 8012e1e:	8a7b      	ldrh	r3, [r7, #18]
 8012e20:	4413      	add	r3, r2
 8012e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e26:	db05      	blt.n	8012e34 <ip_reass_free_complete_datagram+0x98>
 8012e28:	4b27      	ldr	r3, [pc, #156]	; (8012ec8 <ip_reass_free_complete_datagram+0x12c>)
 8012e2a:	22bc      	movs	r2, #188	; 0xbc
 8012e2c:	492a      	ldr	r1, [pc, #168]	; (8012ed8 <ip_reass_free_complete_datagram+0x13c>)
 8012e2e:	4828      	ldr	r0, [pc, #160]	; (8012ed0 <ip_reass_free_complete_datagram+0x134>)
 8012e30:	f001 f83e 	bl	8013eb0 <iprintf>
    pbufs_freed += clen;
 8012e34:	8bfa      	ldrh	r2, [r7, #30]
 8012e36:	8a7b      	ldrh	r3, [r7, #18]
 8012e38:	4413      	add	r3, r2
 8012e3a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012e3c:	69b8      	ldr	r0, [r7, #24]
 8012e3e:	f7f8 fb91 	bl	800b564 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	685b      	ldr	r3, [r3, #4]
 8012e46:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012e48:	e01f      	b.n	8012e8a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012e4a:	69bb      	ldr	r3, [r7, #24]
 8012e4c:	685b      	ldr	r3, [r3, #4]
 8012e4e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012e50:	69bb      	ldr	r3, [r7, #24]
 8012e52:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012e54:	697b      	ldr	r3, [r7, #20]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012e5a:	68f8      	ldr	r0, [r7, #12]
 8012e5c:	f7f8 fc1c 	bl	800b698 <pbuf_clen>
 8012e60:	4603      	mov	r3, r0
 8012e62:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012e64:	8bfa      	ldrh	r2, [r7, #30]
 8012e66:	8a7b      	ldrh	r3, [r7, #18]
 8012e68:	4413      	add	r3, r2
 8012e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e6e:	db05      	blt.n	8012e7c <ip_reass_free_complete_datagram+0xe0>
 8012e70:	4b15      	ldr	r3, [pc, #84]	; (8012ec8 <ip_reass_free_complete_datagram+0x12c>)
 8012e72:	22cc      	movs	r2, #204	; 0xcc
 8012e74:	4918      	ldr	r1, [pc, #96]	; (8012ed8 <ip_reass_free_complete_datagram+0x13c>)
 8012e76:	4816      	ldr	r0, [pc, #88]	; (8012ed0 <ip_reass_free_complete_datagram+0x134>)
 8012e78:	f001 f81a 	bl	8013eb0 <iprintf>
    pbufs_freed += clen;
 8012e7c:	8bfa      	ldrh	r2, [r7, #30]
 8012e7e:	8a7b      	ldrh	r3, [r7, #18]
 8012e80:	4413      	add	r3, r2
 8012e82:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012e84:	68f8      	ldr	r0, [r7, #12]
 8012e86:	f7f8 fb6d 	bl	800b564 <pbuf_free>
  while (p != NULL) {
 8012e8a:	69bb      	ldr	r3, [r7, #24]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d1dc      	bne.n	8012e4a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012e90:	6839      	ldr	r1, [r7, #0]
 8012e92:	6878      	ldr	r0, [r7, #4]
 8012e94:	f000 f8c2 	bl	801301c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8012e98:	4b10      	ldr	r3, [pc, #64]	; (8012edc <ip_reass_free_complete_datagram+0x140>)
 8012e9a:	881b      	ldrh	r3, [r3, #0]
 8012e9c:	8bfa      	ldrh	r2, [r7, #30]
 8012e9e:	429a      	cmp	r2, r3
 8012ea0:	d905      	bls.n	8012eae <ip_reass_free_complete_datagram+0x112>
 8012ea2:	4b09      	ldr	r3, [pc, #36]	; (8012ec8 <ip_reass_free_complete_datagram+0x12c>)
 8012ea4:	22d2      	movs	r2, #210	; 0xd2
 8012ea6:	490e      	ldr	r1, [pc, #56]	; (8012ee0 <ip_reass_free_complete_datagram+0x144>)
 8012ea8:	4809      	ldr	r0, [pc, #36]	; (8012ed0 <ip_reass_free_complete_datagram+0x134>)
 8012eaa:	f001 f801 	bl	8013eb0 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8012eae:	4b0b      	ldr	r3, [pc, #44]	; (8012edc <ip_reass_free_complete_datagram+0x140>)
 8012eb0:	881a      	ldrh	r2, [r3, #0]
 8012eb2:	8bfb      	ldrh	r3, [r7, #30]
 8012eb4:	1ad3      	subs	r3, r2, r3
 8012eb6:	b29a      	uxth	r2, r3
 8012eb8:	4b08      	ldr	r3, [pc, #32]	; (8012edc <ip_reass_free_complete_datagram+0x140>)
 8012eba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012ebc:	8bfb      	ldrh	r3, [r7, #30]
}
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	3720      	adds	r7, #32
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}
 8012ec6:	bf00      	nop
 8012ec8:	08016fe0 	.word	0x08016fe0
 8012ecc:	0801701c 	.word	0x0801701c
 8012ed0:	08017028 	.word	0x08017028
 8012ed4:	08017050 	.word	0x08017050
 8012ed8:	08017064 	.word	0x08017064
 8012edc:	20002a94 	.word	0x20002a94
 8012ee0:	08017084 	.word	0x08017084

08012ee4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b08a      	sub	sp, #40	; 0x28
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	6078      	str	r0, [r7, #4]
 8012eec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012eee:	2300      	movs	r3, #0
 8012ef0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012efa:	2300      	movs	r3, #0
 8012efc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012efe:	2300      	movs	r3, #0
 8012f00:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012f02:	4b28      	ldr	r3, [pc, #160]	; (8012fa4 <ip_reass_remove_oldest_datagram+0xc0>)
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012f08:	e030      	b.n	8012f6c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f0c:	695a      	ldr	r2, [r3, #20]
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	68db      	ldr	r3, [r3, #12]
 8012f12:	429a      	cmp	r2, r3
 8012f14:	d10c      	bne.n	8012f30 <ip_reass_remove_oldest_datagram+0x4c>
 8012f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f18:	699a      	ldr	r2, [r3, #24]
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	691b      	ldr	r3, [r3, #16]
 8012f1e:	429a      	cmp	r2, r3
 8012f20:	d106      	bne.n	8012f30 <ip_reass_remove_oldest_datagram+0x4c>
 8012f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f24:	899a      	ldrh	r2, [r3, #12]
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	889b      	ldrh	r3, [r3, #4]
 8012f2a:	b29b      	uxth	r3, r3
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	d014      	beq.n	8012f5a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012f30:	693b      	ldr	r3, [r7, #16]
 8012f32:	3301      	adds	r3, #1
 8012f34:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8012f36:	6a3b      	ldr	r3, [r7, #32]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d104      	bne.n	8012f46 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f3e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012f40:	69fb      	ldr	r3, [r7, #28]
 8012f42:	61bb      	str	r3, [r7, #24]
 8012f44:	e009      	b.n	8012f5a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8012f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f48:	7fda      	ldrb	r2, [r3, #31]
 8012f4a:	6a3b      	ldr	r3, [r7, #32]
 8012f4c:	7fdb      	ldrb	r3, [r3, #31]
 8012f4e:	429a      	cmp	r2, r3
 8012f50:	d803      	bhi.n	8012f5a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f54:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012f56:	69fb      	ldr	r3, [r7, #28]
 8012f58:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d001      	beq.n	8012f66 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f64:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8012f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d1cb      	bne.n	8012f0a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012f72:	6a3b      	ldr	r3, [r7, #32]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d008      	beq.n	8012f8a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012f78:	69b9      	ldr	r1, [r7, #24]
 8012f7a:	6a38      	ldr	r0, [r7, #32]
 8012f7c:	f7ff ff0e 	bl	8012d9c <ip_reass_free_complete_datagram>
 8012f80:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012f82:	697a      	ldr	r2, [r7, #20]
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	4413      	add	r3, r2
 8012f88:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012f8a:	697a      	ldr	r2, [r7, #20]
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	429a      	cmp	r2, r3
 8012f90:	da02      	bge.n	8012f98 <ip_reass_remove_oldest_datagram+0xb4>
 8012f92:	693b      	ldr	r3, [r7, #16]
 8012f94:	2b01      	cmp	r3, #1
 8012f96:	dcac      	bgt.n	8012ef2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012f98:	697b      	ldr	r3, [r7, #20]
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	3728      	adds	r7, #40	; 0x28
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}
 8012fa2:	bf00      	nop
 8012fa4:	20002a90 	.word	0x20002a90

08012fa8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b084      	sub	sp, #16
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012fb2:	2004      	movs	r0, #4
 8012fb4:	f7f7 fcd0 	bl	800a958 <memp_malloc>
 8012fb8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012fba:	68fb      	ldr	r3, [r7, #12]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d110      	bne.n	8012fe2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012fc0:	6839      	ldr	r1, [r7, #0]
 8012fc2:	6878      	ldr	r0, [r7, #4]
 8012fc4:	f7ff ff8e 	bl	8012ee4 <ip_reass_remove_oldest_datagram>
 8012fc8:	4602      	mov	r2, r0
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	4293      	cmp	r3, r2
 8012fce:	dc03      	bgt.n	8012fd8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012fd0:	2004      	movs	r0, #4
 8012fd2:	f7f7 fcc1 	bl	800a958 <memp_malloc>
 8012fd6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d101      	bne.n	8012fe2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	e016      	b.n	8013010 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012fe2:	2220      	movs	r2, #32
 8012fe4:	2100      	movs	r1, #0
 8012fe6:	68f8      	ldr	r0, [r7, #12]
 8012fe8:	f000 ff5a 	bl	8013ea0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	2203      	movs	r2, #3
 8012ff0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012ff2:	4b09      	ldr	r3, [pc, #36]	; (8013018 <ip_reass_enqueue_new_datagram+0x70>)
 8012ff4:	681a      	ldr	r2, [r3, #0]
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012ffa:	4a07      	ldr	r2, [pc, #28]	; (8013018 <ip_reass_enqueue_new_datagram+0x70>)
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	3308      	adds	r3, #8
 8013004:	2214      	movs	r2, #20
 8013006:	6879      	ldr	r1, [r7, #4]
 8013008:	4618      	mov	r0, r3
 801300a:	f000 ff3e 	bl	8013e8a <memcpy>
  return ipr;
 801300e:	68fb      	ldr	r3, [r7, #12]
}
 8013010:	4618      	mov	r0, r3
 8013012:	3710      	adds	r7, #16
 8013014:	46bd      	mov	sp, r7
 8013016:	bd80      	pop	{r7, pc}
 8013018:	20002a90 	.word	0x20002a90

0801301c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801301c:	b580      	push	{r7, lr}
 801301e:	b082      	sub	sp, #8
 8013020:	af00      	add	r7, sp, #0
 8013022:	6078      	str	r0, [r7, #4]
 8013024:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8013026:	4b10      	ldr	r3, [pc, #64]	; (8013068 <ip_reass_dequeue_datagram+0x4c>)
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	687a      	ldr	r2, [r7, #4]
 801302c:	429a      	cmp	r2, r3
 801302e:	d104      	bne.n	801303a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	4a0c      	ldr	r2, [pc, #48]	; (8013068 <ip_reass_dequeue_datagram+0x4c>)
 8013036:	6013      	str	r3, [r2, #0]
 8013038:	e00d      	b.n	8013056 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801303a:	683b      	ldr	r3, [r7, #0]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d106      	bne.n	801304e <ip_reass_dequeue_datagram+0x32>
 8013040:	4b0a      	ldr	r3, [pc, #40]	; (801306c <ip_reass_dequeue_datagram+0x50>)
 8013042:	f240 1245 	movw	r2, #325	; 0x145
 8013046:	490a      	ldr	r1, [pc, #40]	; (8013070 <ip_reass_dequeue_datagram+0x54>)
 8013048:	480a      	ldr	r0, [pc, #40]	; (8013074 <ip_reass_dequeue_datagram+0x58>)
 801304a:	f000 ff31 	bl	8013eb0 <iprintf>
    prev->next = ipr->next;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	681a      	ldr	r2, [r3, #0]
 8013052:	683b      	ldr	r3, [r7, #0]
 8013054:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013056:	6879      	ldr	r1, [r7, #4]
 8013058:	2004      	movs	r0, #4
 801305a:	f7f7 fccf 	bl	800a9fc <memp_free>
}
 801305e:	bf00      	nop
 8013060:	3708      	adds	r7, #8
 8013062:	46bd      	mov	sp, r7
 8013064:	bd80      	pop	{r7, pc}
 8013066:	bf00      	nop
 8013068:	20002a90 	.word	0x20002a90
 801306c:	08016fe0 	.word	0x08016fe0
 8013070:	080170a0 	.word	0x080170a0
 8013074:	08017028 	.word	0x08017028

08013078 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b08c      	sub	sp, #48	; 0x30
 801307c:	af00      	add	r7, sp, #0
 801307e:	60f8      	str	r0, [r7, #12]
 8013080:	60b9      	str	r1, [r7, #8]
 8013082:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8013084:	2300      	movs	r3, #0
 8013086:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013088:	2301      	movs	r3, #1
 801308a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 801308c:	68bb      	ldr	r3, [r7, #8]
 801308e:	685b      	ldr	r3, [r3, #4]
 8013090:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8013092:	69fb      	ldr	r3, [r7, #28]
 8013094:	885b      	ldrh	r3, [r3, #2]
 8013096:	b29b      	uxth	r3, r3
 8013098:	4618      	mov	r0, r3
 801309a:	f7f7 f873 	bl	800a184 <lwip_htons>
 801309e:	4603      	mov	r3, r0
 80130a0:	461a      	mov	r2, r3
 80130a2:	69fb      	ldr	r3, [r7, #28]
 80130a4:	781b      	ldrb	r3, [r3, #0]
 80130a6:	b29b      	uxth	r3, r3
 80130a8:	f003 030f 	and.w	r3, r3, #15
 80130ac:	b29b      	uxth	r3, r3
 80130ae:	009b      	lsls	r3, r3, #2
 80130b0:	b29b      	uxth	r3, r3
 80130b2:	1ad3      	subs	r3, r2, r3
 80130b4:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80130b6:	69fb      	ldr	r3, [r7, #28]
 80130b8:	88db      	ldrh	r3, [r3, #6]
 80130ba:	b29b      	uxth	r3, r3
 80130bc:	4618      	mov	r0, r3
 80130be:	f7f7 f861 	bl	800a184 <lwip_htons>
 80130c2:	4603      	mov	r3, r0
 80130c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80130c8:	b29b      	uxth	r3, r3
 80130ca:	00db      	lsls	r3, r3, #3
 80130cc:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 80130ce:	68bb      	ldr	r3, [r7, #8]
 80130d0:	685b      	ldr	r3, [r3, #4]
 80130d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80130d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130d6:	2200      	movs	r2, #0
 80130d8:	701a      	strb	r2, [r3, #0]
 80130da:	2200      	movs	r2, #0
 80130dc:	705a      	strb	r2, [r3, #1]
 80130de:	2200      	movs	r2, #0
 80130e0:	709a      	strb	r2, [r3, #2]
 80130e2:	2200      	movs	r2, #0
 80130e4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80130e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130e8:	8b3a      	ldrh	r2, [r7, #24]
 80130ea:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 80130ec:	8b3a      	ldrh	r2, [r7, #24]
 80130ee:	8b7b      	ldrh	r3, [r7, #26]
 80130f0:	4413      	add	r3, r2
 80130f2:	b29a      	uxth	r2, r3
 80130f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f6:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	685b      	ldr	r3, [r3, #4]
 80130fc:	627b      	str	r3, [r7, #36]	; 0x24
 80130fe:	e061      	b.n	80131c4 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8013100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013102:	685b      	ldr	r3, [r3, #4]
 8013104:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8013106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013108:	889b      	ldrh	r3, [r3, #4]
 801310a:	b29a      	uxth	r2, r3
 801310c:	697b      	ldr	r3, [r7, #20]
 801310e:	889b      	ldrh	r3, [r3, #4]
 8013110:	b29b      	uxth	r3, r3
 8013112:	429a      	cmp	r2, r3
 8013114:	d232      	bcs.n	801317c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801311a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801311c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801311e:	2b00      	cmp	r3, #0
 8013120:	d01f      	beq.n	8013162 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013124:	889b      	ldrh	r3, [r3, #4]
 8013126:	b29a      	uxth	r2, r3
 8013128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801312a:	88db      	ldrh	r3, [r3, #6]
 801312c:	b29b      	uxth	r3, r3
 801312e:	429a      	cmp	r2, r3
 8013130:	f0c0 80e3 	bcc.w	80132fa <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8013134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013136:	88db      	ldrh	r3, [r3, #6]
 8013138:	b29a      	uxth	r2, r3
 801313a:	697b      	ldr	r3, [r7, #20]
 801313c:	889b      	ldrh	r3, [r3, #4]
 801313e:	b29b      	uxth	r3, r3
 8013140:	429a      	cmp	r2, r3
 8013142:	f200 80da 	bhi.w	80132fa <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013148:	68ba      	ldr	r2, [r7, #8]
 801314a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801314c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801314e:	88db      	ldrh	r3, [r3, #6]
 8013150:	b29a      	uxth	r2, r3
 8013152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013154:	889b      	ldrh	r3, [r3, #4]
 8013156:	b29b      	uxth	r3, r3
 8013158:	429a      	cmp	r2, r3
 801315a:	d037      	beq.n	80131cc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801315c:	2300      	movs	r3, #0
 801315e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013160:	e034      	b.n	80131cc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8013162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013164:	88db      	ldrh	r3, [r3, #6]
 8013166:	b29a      	uxth	r2, r3
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	889b      	ldrh	r3, [r3, #4]
 801316c:	b29b      	uxth	r3, r3
 801316e:	429a      	cmp	r2, r3
 8013170:	f200 80c5 	bhi.w	80132fe <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	68ba      	ldr	r2, [r7, #8]
 8013178:	605a      	str	r2, [r3, #4]
      break;
 801317a:	e027      	b.n	80131cc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 801317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801317e:	889b      	ldrh	r3, [r3, #4]
 8013180:	b29a      	uxth	r2, r3
 8013182:	697b      	ldr	r3, [r7, #20]
 8013184:	889b      	ldrh	r3, [r3, #4]
 8013186:	b29b      	uxth	r3, r3
 8013188:	429a      	cmp	r2, r3
 801318a:	f000 80ba 	beq.w	8013302 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801318e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013190:	889b      	ldrh	r3, [r3, #4]
 8013192:	b29a      	uxth	r2, r3
 8013194:	697b      	ldr	r3, [r7, #20]
 8013196:	88db      	ldrh	r3, [r3, #6]
 8013198:	b29b      	uxth	r3, r3
 801319a:	429a      	cmp	r2, r3
 801319c:	f0c0 80b3 	bcc.w	8013306 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80131a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d009      	beq.n	80131ba <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 80131a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131a8:	88db      	ldrh	r3, [r3, #6]
 80131aa:	b29a      	uxth	r2, r3
 80131ac:	697b      	ldr	r3, [r7, #20]
 80131ae:	889b      	ldrh	r3, [r3, #4]
 80131b0:	b29b      	uxth	r3, r3
 80131b2:	429a      	cmp	r2, r3
 80131b4:	d001      	beq.n	80131ba <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80131b6:	2300      	movs	r3, #0
 80131b8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80131ba:	697b      	ldr	r3, [r7, #20]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80131c0:	697b      	ldr	r3, [r7, #20]
 80131c2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80131c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d19a      	bne.n	8013100 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 80131ca:	e000      	b.n	80131ce <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 80131cc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80131ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d12d      	bne.n	8013230 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 80131d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d01c      	beq.n	8013214 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80131da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131dc:	88db      	ldrh	r3, [r3, #6]
 80131de:	b29a      	uxth	r2, r3
 80131e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131e2:	889b      	ldrh	r3, [r3, #4]
 80131e4:	b29b      	uxth	r3, r3
 80131e6:	429a      	cmp	r2, r3
 80131e8:	d906      	bls.n	80131f8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 80131ea:	4b51      	ldr	r3, [pc, #324]	; (8013330 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80131ec:	f240 12ab 	movw	r2, #427	; 0x1ab
 80131f0:	4950      	ldr	r1, [pc, #320]	; (8013334 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80131f2:	4851      	ldr	r0, [pc, #324]	; (8013338 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80131f4:	f000 fe5c 	bl	8013eb0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80131f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131fa:	68ba      	ldr	r2, [r7, #8]
 80131fc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80131fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013200:	88db      	ldrh	r3, [r3, #6]
 8013202:	b29a      	uxth	r2, r3
 8013204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013206:	889b      	ldrh	r3, [r3, #4]
 8013208:	b29b      	uxth	r3, r3
 801320a:	429a      	cmp	r2, r3
 801320c:	d010      	beq.n	8013230 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 801320e:	2300      	movs	r3, #0
 8013210:	623b      	str	r3, [r7, #32]
 8013212:	e00d      	b.n	8013230 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	685b      	ldr	r3, [r3, #4]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d006      	beq.n	801322a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 801321c:	4b44      	ldr	r3, [pc, #272]	; (8013330 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801321e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8013222:	4946      	ldr	r1, [pc, #280]	; (801333c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013224:	4844      	ldr	r0, [pc, #272]	; (8013338 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013226:	f000 fe43 	bl	8013eb0 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	68ba      	ldr	r2, [r7, #8]
 801322e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d105      	bne.n	8013242 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	7f9b      	ldrb	r3, [r3, #30]
 801323a:	f003 0301 	and.w	r3, r3, #1
 801323e:	2b00      	cmp	r3, #0
 8013240:	d059      	beq.n	80132f6 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8013242:	6a3b      	ldr	r3, [r7, #32]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d04f      	beq.n	80132e8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	685b      	ldr	r3, [r3, #4]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d006      	beq.n	801325e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	685b      	ldr	r3, [r3, #4]
 8013254:	685b      	ldr	r3, [r3, #4]
 8013256:	889b      	ldrh	r3, [r3, #4]
 8013258:	b29b      	uxth	r3, r3
 801325a:	2b00      	cmp	r3, #0
 801325c:	d002      	beq.n	8013264 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801325e:	2300      	movs	r3, #0
 8013260:	623b      	str	r3, [r7, #32]
 8013262:	e041      	b.n	80132e8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013266:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801326e:	e012      	b.n	8013296 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8013270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013272:	685b      	ldr	r3, [r3, #4]
 8013274:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013278:	88db      	ldrh	r3, [r3, #6]
 801327a:	b29a      	uxth	r2, r3
 801327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801327e:	889b      	ldrh	r3, [r3, #4]
 8013280:	b29b      	uxth	r3, r3
 8013282:	429a      	cmp	r2, r3
 8013284:	d002      	beq.n	801328c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8013286:	2300      	movs	r3, #0
 8013288:	623b      	str	r3, [r7, #32]
            break;
 801328a:	e007      	b.n	801329c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 801328c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801328e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013292:	681b      	ldr	r3, [r3, #0]
 8013294:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013298:	2b00      	cmp	r3, #0
 801329a:	d1e9      	bne.n	8013270 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801329c:	6a3b      	ldr	r3, [r7, #32]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d022      	beq.n	80132e8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	685b      	ldr	r3, [r3, #4]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d106      	bne.n	80132b8 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 80132aa:	4b21      	ldr	r3, [pc, #132]	; (8013330 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80132ac:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 80132b0:	4923      	ldr	r1, [pc, #140]	; (8013340 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80132b2:	4821      	ldr	r0, [pc, #132]	; (8013338 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80132b4:	f000 fdfc 	bl	8013eb0 <iprintf>
          LWIP_ASSERT("sanity check",
 80132b8:	68fb      	ldr	r3, [r7, #12]
 80132ba:	685b      	ldr	r3, [r3, #4]
 80132bc:	685b      	ldr	r3, [r3, #4]
 80132be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80132c0:	429a      	cmp	r2, r3
 80132c2:	d106      	bne.n	80132d2 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 80132c4:	4b1a      	ldr	r3, [pc, #104]	; (8013330 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80132c6:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80132ca:	491d      	ldr	r1, [pc, #116]	; (8013340 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80132cc:	481a      	ldr	r0, [pc, #104]	; (8013338 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80132ce:	f000 fdef 	bl	8013eb0 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80132d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d006      	beq.n	80132e8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 80132da:	4b15      	ldr	r3, [pc, #84]	; (8013330 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80132dc:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80132e0:	4918      	ldr	r1, [pc, #96]	; (8013344 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80132e2:	4815      	ldr	r0, [pc, #84]	; (8013338 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80132e4:	f000 fde4 	bl	8013eb0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80132e8:	6a3b      	ldr	r3, [r7, #32]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	bf14      	ite	ne
 80132ee:	2301      	movne	r3, #1
 80132f0:	2300      	moveq	r3, #0
 80132f2:	b2db      	uxtb	r3, r3
 80132f4:	e018      	b.n	8013328 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80132f6:	2300      	movs	r3, #0
 80132f8:	e016      	b.n	8013328 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 80132fa:	bf00      	nop
 80132fc:	e004      	b.n	8013308 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 80132fe:	bf00      	nop
 8013300:	e002      	b.n	8013308 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8013302:	bf00      	nop
 8013304:	e000      	b.n	8013308 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8013306:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8013308:	68b8      	ldr	r0, [r7, #8]
 801330a:	f7f8 f9c5 	bl	800b698 <pbuf_clen>
 801330e:	4603      	mov	r3, r0
 8013310:	461a      	mov	r2, r3
 8013312:	4b0d      	ldr	r3, [pc, #52]	; (8013348 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013314:	881b      	ldrh	r3, [r3, #0]
 8013316:	1a9b      	subs	r3, r3, r2
 8013318:	b29a      	uxth	r2, r3
 801331a:	4b0b      	ldr	r3, [pc, #44]	; (8013348 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801331c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 801331e:	68b8      	ldr	r0, [r7, #8]
 8013320:	f7f8 f920 	bl	800b564 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013324:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8013328:	4618      	mov	r0, r3
 801332a:	3730      	adds	r7, #48	; 0x30
 801332c:	46bd      	mov	sp, r7
 801332e:	bd80      	pop	{r7, pc}
 8013330:	08016fe0 	.word	0x08016fe0
 8013334:	080170bc 	.word	0x080170bc
 8013338:	08017028 	.word	0x08017028
 801333c:	080170dc 	.word	0x080170dc
 8013340:	08017114 	.word	0x08017114
 8013344:	08017124 	.word	0x08017124
 8013348:	20002a94 	.word	0x20002a94

0801334c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b08e      	sub	sp, #56	; 0x38
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	685b      	ldr	r3, [r3, #4]
 8013358:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 801335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801335c:	781b      	ldrb	r3, [r3, #0]
 801335e:	f003 030f 	and.w	r3, r3, #15
 8013362:	009b      	lsls	r3, r3, #2
 8013364:	2b14      	cmp	r3, #20
 8013366:	f040 8131 	bne.w	80135cc <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801336c:	88db      	ldrh	r3, [r3, #6]
 801336e:	b29b      	uxth	r3, r3
 8013370:	4618      	mov	r0, r3
 8013372:	f7f6 ff07 	bl	800a184 <lwip_htons>
 8013376:	4603      	mov	r3, r0
 8013378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801337c:	b29b      	uxth	r3, r3
 801337e:	00db      	lsls	r3, r3, #3
 8013380:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8013382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013384:	885b      	ldrh	r3, [r3, #2]
 8013386:	b29b      	uxth	r3, r3
 8013388:	4618      	mov	r0, r3
 801338a:	f7f6 fefb 	bl	800a184 <lwip_htons>
 801338e:	4603      	mov	r3, r0
 8013390:	461a      	mov	r2, r3
 8013392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013394:	781b      	ldrb	r3, [r3, #0]
 8013396:	b29b      	uxth	r3, r3
 8013398:	f003 030f 	and.w	r3, r3, #15
 801339c:	b29b      	uxth	r3, r3
 801339e:	009b      	lsls	r3, r3, #2
 80133a0:	b29b      	uxth	r3, r3
 80133a2:	1ad3      	subs	r3, r2, r3
 80133a4:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80133a6:	6878      	ldr	r0, [r7, #4]
 80133a8:	f7f8 f976 	bl	800b698 <pbuf_clen>
 80133ac:	4603      	mov	r3, r0
 80133ae:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80133b0:	4b8d      	ldr	r3, [pc, #564]	; (80135e8 <ip4_reass+0x29c>)
 80133b2:	881b      	ldrh	r3, [r3, #0]
 80133b4:	461a      	mov	r2, r3
 80133b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133b8:	4413      	add	r3, r2
 80133ba:	2b0a      	cmp	r3, #10
 80133bc:	dd10      	ble.n	80133e0 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80133be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133c0:	4619      	mov	r1, r3
 80133c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80133c4:	f7ff fd8e 	bl	8012ee4 <ip_reass_remove_oldest_datagram>
 80133c8:	4603      	mov	r3, r0
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	f000 8100 	beq.w	80135d0 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80133d0:	4b85      	ldr	r3, [pc, #532]	; (80135e8 <ip4_reass+0x29c>)
 80133d2:	881b      	ldrh	r3, [r3, #0]
 80133d4:	461a      	mov	r2, r3
 80133d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80133d8:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80133da:	2b0a      	cmp	r3, #10
 80133dc:	f300 80f8 	bgt.w	80135d0 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80133e0:	4b82      	ldr	r3, [pc, #520]	; (80135ec <ip4_reass+0x2a0>)
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	633b      	str	r3, [r7, #48]	; 0x30
 80133e6:	e015      	b.n	8013414 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80133e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ea:	695a      	ldr	r2, [r3, #20]
 80133ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ee:	68db      	ldr	r3, [r3, #12]
 80133f0:	429a      	cmp	r2, r3
 80133f2:	d10c      	bne.n	801340e <ip4_reass+0xc2>
 80133f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f6:	699a      	ldr	r2, [r3, #24]
 80133f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133fa:	691b      	ldr	r3, [r3, #16]
 80133fc:	429a      	cmp	r2, r3
 80133fe:	d106      	bne.n	801340e <ip4_reass+0xc2>
 8013400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013402:	899a      	ldrh	r2, [r3, #12]
 8013404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013406:	889b      	ldrh	r3, [r3, #4]
 8013408:	b29b      	uxth	r3, r3
 801340a:	429a      	cmp	r2, r3
 801340c:	d006      	beq.n	801341c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801340e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	633b      	str	r3, [r7, #48]	; 0x30
 8013414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013416:	2b00      	cmp	r3, #0
 8013418:	d1e6      	bne.n	80133e8 <ip4_reass+0x9c>
 801341a:	e000      	b.n	801341e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801341c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013420:	2b00      	cmp	r3, #0
 8013422:	d109      	bne.n	8013438 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013424:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013426:	4619      	mov	r1, r3
 8013428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801342a:	f7ff fdbd 	bl	8012fa8 <ip_reass_enqueue_new_datagram>
 801342e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013432:	2b00      	cmp	r3, #0
 8013434:	d11c      	bne.n	8013470 <ip4_reass+0x124>
      goto nullreturn;
 8013436:	e0ce      	b.n	80135d6 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801343a:	88db      	ldrh	r3, [r3, #6]
 801343c:	b29b      	uxth	r3, r3
 801343e:	4618      	mov	r0, r3
 8013440:	f7f6 fea0 	bl	800a184 <lwip_htons>
 8013444:	4603      	mov	r3, r0
 8013446:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801344a:	2b00      	cmp	r3, #0
 801344c:	d110      	bne.n	8013470 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013450:	89db      	ldrh	r3, [r3, #14]
 8013452:	4618      	mov	r0, r3
 8013454:	f7f6 fe96 	bl	800a184 <lwip_htons>
 8013458:	4603      	mov	r3, r0
 801345a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801345e:	2b00      	cmp	r3, #0
 8013460:	d006      	beq.n	8013470 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013464:	3308      	adds	r3, #8
 8013466:	2214      	movs	r2, #20
 8013468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801346a:	4618      	mov	r0, r3
 801346c:	f000 fd0d 	bl	8013e8a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013472:	88db      	ldrh	r3, [r3, #6]
 8013474:	b29b      	uxth	r3, r3
 8013476:	f003 0320 	and.w	r3, r3, #32
 801347a:	2b00      	cmp	r3, #0
 801347c:	bf0c      	ite	eq
 801347e:	2301      	moveq	r3, #1
 8013480:	2300      	movne	r3, #0
 8013482:	b2db      	uxtb	r3, r3
 8013484:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013486:	69fb      	ldr	r3, [r7, #28]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d00e      	beq.n	80134aa <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 801348c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801348e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013490:	4413      	add	r3, r2
 8013492:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013494:	8b7a      	ldrh	r2, [r7, #26]
 8013496:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013498:	429a      	cmp	r2, r3
 801349a:	f0c0 8099 	bcc.w	80135d0 <ip4_reass+0x284>
 801349e:	8b7b      	ldrh	r3, [r7, #26]
 80134a0:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80134a4:	4293      	cmp	r3, r2
 80134a6:	f200 8093 	bhi.w	80135d0 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80134aa:	69fa      	ldr	r2, [r7, #28]
 80134ac:	6879      	ldr	r1, [r7, #4]
 80134ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134b0:	f7ff fde2 	bl	8013078 <ip_reass_chain_frag_into_datagram_and_validate>
 80134b4:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80134b6:	697b      	ldr	r3, [r7, #20]
 80134b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134bc:	f000 808a 	beq.w	80135d4 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80134c0:	4b49      	ldr	r3, [pc, #292]	; (80135e8 <ip4_reass+0x29c>)
 80134c2:	881a      	ldrh	r2, [r3, #0]
 80134c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80134c6:	4413      	add	r3, r2
 80134c8:	b29a      	uxth	r2, r3
 80134ca:	4b47      	ldr	r3, [pc, #284]	; (80135e8 <ip4_reass+0x29c>)
 80134cc:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80134ce:	69fb      	ldr	r3, [r7, #28]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d00d      	beq.n	80134f0 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 80134d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80134d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134d8:	4413      	add	r3, r2
 80134da:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80134dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134de:	8a7a      	ldrh	r2, [r7, #18]
 80134e0:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80134e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134e4:	7f9b      	ldrb	r3, [r3, #30]
 80134e6:	f043 0301 	orr.w	r3, r3, #1
 80134ea:	b2da      	uxtb	r2, r3
 80134ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ee:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80134f0:	697b      	ldr	r3, [r7, #20]
 80134f2:	2b01      	cmp	r3, #1
 80134f4:	d168      	bne.n	80135c8 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 80134f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134f8:	8b9b      	ldrh	r3, [r3, #28]
 80134fa:	3314      	adds	r3, #20
 80134fc:	b29a      	uxth	r2, r3
 80134fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013500:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8013502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013504:	685b      	ldr	r3, [r3, #4]
 8013506:	685b      	ldr	r3, [r3, #4]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 801350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801350e:	685b      	ldr	r3, [r3, #4]
 8013510:	685b      	ldr	r3, [r3, #4]
 8013512:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013516:	3308      	adds	r3, #8
 8013518:	2214      	movs	r2, #20
 801351a:	4619      	mov	r1, r3
 801351c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801351e:	f000 fcb4 	bl	8013e8a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8013522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013524:	8b9b      	ldrh	r3, [r3, #28]
 8013526:	4618      	mov	r0, r3
 8013528:	f7f6 fe2c 	bl	800a184 <lwip_htons>
 801352c:	4603      	mov	r3, r0
 801352e:	461a      	mov	r2, r3
 8013530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013532:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013536:	2200      	movs	r2, #0
 8013538:	719a      	strb	r2, [r3, #6]
 801353a:	2200      	movs	r2, #0
 801353c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013540:	2200      	movs	r2, #0
 8013542:	729a      	strb	r2, [r3, #10]
 8013544:	2200      	movs	r2, #0
 8013546:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801354a:	685b      	ldr	r3, [r3, #4]
 801354c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801354e:	e00e      	b.n	801356e <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8013550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013552:	685b      	ldr	r3, [r3, #4]
 8013554:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8013556:	f06f 0113 	mvn.w	r1, #19
 801355a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801355c:	f7f7 ffde 	bl	800b51c <pbuf_header>
      pbuf_cat(p, r);
 8013560:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013562:	6878      	ldr	r0, [r7, #4]
 8013564:	f7f8 f8d6 	bl	800b714 <pbuf_cat>
      r = iprh->next_pbuf;
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	681b      	ldr	r3, [r3, #0]
 801356c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801356e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013570:	2b00      	cmp	r3, #0
 8013572:	d1ed      	bne.n	8013550 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013574:	4b1d      	ldr	r3, [pc, #116]	; (80135ec <ip4_reass+0x2a0>)
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801357a:	429a      	cmp	r2, r3
 801357c:	d102      	bne.n	8013584 <ip4_reass+0x238>
      ipr_prev = NULL;
 801357e:	2300      	movs	r3, #0
 8013580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013582:	e010      	b.n	80135a6 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013584:	4b19      	ldr	r3, [pc, #100]	; (80135ec <ip4_reass+0x2a0>)
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	62fb      	str	r3, [r7, #44]	; 0x2c
 801358a:	e007      	b.n	801359c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 801358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013592:	429a      	cmp	r2, r3
 8013594:	d006      	beq.n	80135a4 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d1f4      	bne.n	801358c <ip4_reass+0x240>
 80135a2:	e000      	b.n	80135a6 <ip4_reass+0x25a>
          break;
 80135a4:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80135a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80135a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135aa:	f7ff fd37 	bl	801301c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 80135ae:	6878      	ldr	r0, [r7, #4]
 80135b0:	f7f8 f872 	bl	800b698 <pbuf_clen>
 80135b4:	4603      	mov	r3, r0
 80135b6:	461a      	mov	r2, r3
 80135b8:	4b0b      	ldr	r3, [pc, #44]	; (80135e8 <ip4_reass+0x29c>)
 80135ba:	881b      	ldrh	r3, [r3, #0]
 80135bc:	1a9b      	subs	r3, r3, r2
 80135be:	b29a      	uxth	r2, r3
 80135c0:	4b09      	ldr	r3, [pc, #36]	; (80135e8 <ip4_reass+0x29c>)
 80135c2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	e00a      	b.n	80135de <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80135c8:	2300      	movs	r3, #0
 80135ca:	e008      	b.n	80135de <ip4_reass+0x292>
    goto nullreturn;
 80135cc:	bf00      	nop
 80135ce:	e002      	b.n	80135d6 <ip4_reass+0x28a>

nullreturn:
 80135d0:	bf00      	nop
 80135d2:	e000      	b.n	80135d6 <ip4_reass+0x28a>
    goto nullreturn;
 80135d4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	f7f7 ffc4 	bl	800b564 <pbuf_free>
  return NULL;
 80135dc:	2300      	movs	r3, #0
}
 80135de:	4618      	mov	r0, r3
 80135e0:	3738      	adds	r7, #56	; 0x38
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}
 80135e6:	bf00      	nop
 80135e8:	20002a94 	.word	0x20002a94
 80135ec:	20002a90 	.word	0x20002a90

080135f0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80135f4:	2005      	movs	r0, #5
 80135f6:	f7f7 f9af 	bl	800a958 <memp_malloc>
 80135fa:	4603      	mov	r3, r0
}
 80135fc:	4618      	mov	r0, r3
 80135fe:	bd80      	pop	{r7, pc}

08013600 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b082      	sub	sp, #8
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d106      	bne.n	801361c <ip_frag_free_pbuf_custom_ref+0x1c>
 801360e:	4b07      	ldr	r3, [pc, #28]	; (801362c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013610:	f240 22ae 	movw	r2, #686	; 0x2ae
 8013614:	4906      	ldr	r1, [pc, #24]	; (8013630 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013616:	4807      	ldr	r0, [pc, #28]	; (8013634 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013618:	f000 fc4a 	bl	8013eb0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801361c:	6879      	ldr	r1, [r7, #4]
 801361e:	2005      	movs	r0, #5
 8013620:	f7f7 f9ec 	bl	800a9fc <memp_free>
}
 8013624:	bf00      	nop
 8013626:	3708      	adds	r7, #8
 8013628:	46bd      	mov	sp, r7
 801362a:	bd80      	pop	{r7, pc}
 801362c:	08016fe0 	.word	0x08016fe0
 8013630:	08017148 	.word	0x08017148
 8013634:	08017028 	.word	0x08017028

08013638 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013638:	b580      	push	{r7, lr}
 801363a:	b084      	sub	sp, #16
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d106      	bne.n	8013658 <ipfrag_free_pbuf_custom+0x20>
 801364a:	4b11      	ldr	r3, [pc, #68]	; (8013690 <ipfrag_free_pbuf_custom+0x58>)
 801364c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8013650:	4910      	ldr	r1, [pc, #64]	; (8013694 <ipfrag_free_pbuf_custom+0x5c>)
 8013652:	4811      	ldr	r0, [pc, #68]	; (8013698 <ipfrag_free_pbuf_custom+0x60>)
 8013654:	f000 fc2c 	bl	8013eb0 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8013658:	68fa      	ldr	r2, [r7, #12]
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	429a      	cmp	r2, r3
 801365e:	d006      	beq.n	801366e <ipfrag_free_pbuf_custom+0x36>
 8013660:	4b0b      	ldr	r3, [pc, #44]	; (8013690 <ipfrag_free_pbuf_custom+0x58>)
 8013662:	f240 22b9 	movw	r2, #697	; 0x2b9
 8013666:	490d      	ldr	r1, [pc, #52]	; (801369c <ipfrag_free_pbuf_custom+0x64>)
 8013668:	480b      	ldr	r0, [pc, #44]	; (8013698 <ipfrag_free_pbuf_custom+0x60>)
 801366a:	f000 fc21 	bl	8013eb0 <iprintf>
  if (pcr->original != NULL) {
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	695b      	ldr	r3, [r3, #20]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d004      	beq.n	8013680 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	695b      	ldr	r3, [r3, #20]
 801367a:	4618      	mov	r0, r3
 801367c:	f7f7 ff72 	bl	800b564 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013680:	68f8      	ldr	r0, [r7, #12]
 8013682:	f7ff ffbd 	bl	8013600 <ip_frag_free_pbuf_custom_ref>
}
 8013686:	bf00      	nop
 8013688:	3710      	adds	r7, #16
 801368a:	46bd      	mov	sp, r7
 801368c:	bd80      	pop	{r7, pc}
 801368e:	bf00      	nop
 8013690:	08016fe0 	.word	0x08016fe0
 8013694:	08017154 	.word	0x08017154
 8013698:	08017028 	.word	0x08017028
 801369c:	08017160 	.word	0x08017160

080136a0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b092      	sub	sp, #72	; 0x48
 80136a4:	af02      	add	r7, sp, #8
 80136a6:	60f8      	str	r0, [r7, #12]
 80136a8:	60b9      	str	r1, [r7, #8]
 80136aa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80136ac:	2300      	movs	r3, #0
 80136ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80136b0:	68bb      	ldr	r3, [r7, #8]
 80136b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80136b4:	3b14      	subs	r3, #20
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	da00      	bge.n	80136bc <ip4_frag+0x1c>
 80136ba:	3307      	adds	r3, #7
 80136bc:	10db      	asrs	r3, r3, #3
 80136be:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80136c0:	2314      	movs	r3, #20
 80136c2:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80136c4:	68fb      	ldr	r3, [r7, #12]
 80136c6:	685b      	ldr	r3, [r3, #4]
 80136c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 80136ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136cc:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80136ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136d0:	781b      	ldrb	r3, [r3, #0]
 80136d2:	f003 030f 	and.w	r3, r3, #15
 80136d6:	009b      	lsls	r3, r3, #2
 80136d8:	2b14      	cmp	r3, #20
 80136da:	d009      	beq.n	80136f0 <ip4_frag+0x50>
 80136dc:	4b79      	ldr	r3, [pc, #484]	; (80138c4 <ip4_frag+0x224>)
 80136de:	f240 22e1 	movw	r2, #737	; 0x2e1
 80136e2:	4979      	ldr	r1, [pc, #484]	; (80138c8 <ip4_frag+0x228>)
 80136e4:	4879      	ldr	r0, [pc, #484]	; (80138cc <ip4_frag+0x22c>)
 80136e6:	f000 fbe3 	bl	8013eb0 <iprintf>
 80136ea:	f06f 0305 	mvn.w	r3, #5
 80136ee:	e0e5      	b.n	80138bc <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80136f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136f2:	88db      	ldrh	r3, [r3, #6]
 80136f4:	b29b      	uxth	r3, r3
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7f6 fd44 	bl	800a184 <lwip_htons>
 80136fc:	4603      	mov	r3, r0
 80136fe:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8013700:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013702:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013706:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8013708:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801370a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801370e:	2b00      	cmp	r3, #0
 8013710:	d009      	beq.n	8013726 <ip4_frag+0x86>
 8013712:	4b6c      	ldr	r3, [pc, #432]	; (80138c4 <ip4_frag+0x224>)
 8013714:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013718:	496d      	ldr	r1, [pc, #436]	; (80138d0 <ip4_frag+0x230>)
 801371a:	486c      	ldr	r0, [pc, #432]	; (80138cc <ip4_frag+0x22c>)
 801371c:	f000 fbc8 	bl	8013eb0 <iprintf>
 8013720:	f06f 0305 	mvn.w	r3, #5
 8013724:	e0ca      	b.n	80138bc <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	891b      	ldrh	r3, [r3, #8]
 801372a:	3b14      	subs	r3, #20
 801372c:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 801372e:	e0bc      	b.n	80138aa <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8013730:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013732:	00da      	lsls	r2, r3, #3
 8013734:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013736:	4293      	cmp	r3, r2
 8013738:	bfa8      	it	ge
 801373a:	4613      	movge	r3, r2
 801373c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801373e:	2200      	movs	r2, #0
 8013740:	2114      	movs	r1, #20
 8013742:	2002      	movs	r0, #2
 8013744:	f7f7 fb9c 	bl	800ae80 <pbuf_alloc>
 8013748:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 801374a:	6a3b      	ldr	r3, [r7, #32]
 801374c:	2b00      	cmp	r3, #0
 801374e:	f000 80b2 	beq.w	80138b6 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	895b      	ldrh	r3, [r3, #10]
 8013756:	2b13      	cmp	r3, #19
 8013758:	d806      	bhi.n	8013768 <ip4_frag+0xc8>
 801375a:	4b5a      	ldr	r3, [pc, #360]	; (80138c4 <ip4_frag+0x224>)
 801375c:	f240 3209 	movw	r2, #777	; 0x309
 8013760:	495c      	ldr	r1, [pc, #368]	; (80138d4 <ip4_frag+0x234>)
 8013762:	485a      	ldr	r0, [pc, #360]	; (80138cc <ip4_frag+0x22c>)
 8013764:	f000 fba4 	bl	8013eb0 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013768:	6a3b      	ldr	r3, [r7, #32]
 801376a:	685b      	ldr	r3, [r3, #4]
 801376c:	2214      	movs	r2, #20
 801376e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013770:	4618      	mov	r0, r3
 8013772:	f000 fb8a 	bl	8013e8a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013776:	6a3b      	ldr	r3, [r7, #32]
 8013778:	685b      	ldr	r3, [r3, #4]
 801377a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 801377c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801377e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8013780:	e04f      	b.n	8013822 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	895a      	ldrh	r2, [r3, #10]
 8013786:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013788:	1ad3      	subs	r3, r2, r3
 801378a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801378c:	8b7a      	ldrh	r2, [r7, #26]
 801378e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013790:	4293      	cmp	r3, r2
 8013792:	bf28      	it	cs
 8013794:	4613      	movcs	r3, r2
 8013796:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013798:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801379a:	2b00      	cmp	r3, #0
 801379c:	d105      	bne.n	80137aa <ip4_frag+0x10a>
        poff = 0;
 801379e:	2300      	movs	r3, #0
 80137a0:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	60fb      	str	r3, [r7, #12]
        continue;
 80137a8:	e03b      	b.n	8013822 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80137aa:	f7ff ff21 	bl	80135f0 <ip_frag_alloc_pbuf_custom_ref>
 80137ae:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 80137b0:	697b      	ldr	r3, [r7, #20]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d103      	bne.n	80137be <ip4_frag+0x11e>
        pbuf_free(rambuf);
 80137b6:	6a38      	ldr	r0, [r7, #32]
 80137b8:	f7f7 fed4 	bl	800b564 <pbuf_free>
        goto memerr;
 80137bc:	e07c      	b.n	80138b8 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80137be:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80137c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80137c6:	4413      	add	r3, r2
 80137c8:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 80137ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80137cc:	9201      	str	r2, [sp, #4]
 80137ce:	9300      	str	r3, [sp, #0]
 80137d0:	4603      	mov	r3, r0
 80137d2:	2202      	movs	r2, #2
 80137d4:	2004      	movs	r0, #4
 80137d6:	f7f7 fce7 	bl	800b1a8 <pbuf_alloced_custom>
 80137da:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 80137dc:	693b      	ldr	r3, [r7, #16]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d106      	bne.n	80137f0 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 80137e2:	6978      	ldr	r0, [r7, #20]
 80137e4:	f7ff ff0c 	bl	8013600 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80137e8:	6a38      	ldr	r0, [r7, #32]
 80137ea:	f7f7 febb 	bl	800b564 <pbuf_free>
        goto memerr;
 80137ee:	e063      	b.n	80138b8 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 80137f0:	68f8      	ldr	r0, [r7, #12]
 80137f2:	f7f7 ff67 	bl	800b6c4 <pbuf_ref>
      pcr->original = p;
 80137f6:	697b      	ldr	r3, [r7, #20]
 80137f8:	68fa      	ldr	r2, [r7, #12]
 80137fa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	4a36      	ldr	r2, [pc, #216]	; (80138d8 <ip4_frag+0x238>)
 8013800:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013802:	6939      	ldr	r1, [r7, #16]
 8013804:	6a38      	ldr	r0, [r7, #32]
 8013806:	f7f7 ff85 	bl	800b714 <pbuf_cat>
      left_to_copy -= newpbuflen;
 801380a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801380c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801380e:	1ad3      	subs	r3, r2, r3
 8013810:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8013812:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013814:	2b00      	cmp	r3, #0
 8013816:	d004      	beq.n	8013822 <ip4_frag+0x182>
        poff = 0;
 8013818:	2300      	movs	r3, #0
 801381a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013822:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013824:	2b00      	cmp	r3, #0
 8013826:	d1ac      	bne.n	8013782 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8013828:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801382a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801382c:	4413      	add	r3, r2
 801382e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013830:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013832:	68bb      	ldr	r3, [r7, #8]
 8013834:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013836:	3b14      	subs	r3, #20
 8013838:	429a      	cmp	r2, r3
 801383a:	bfd4      	ite	le
 801383c:	2301      	movle	r3, #1
 801383e:	2300      	movgt	r3, #0
 8013840:	b2db      	uxtb	r3, r3
 8013842:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013844:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013846:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801384a:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 801384c:	69fb      	ldr	r3, [r7, #28]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d103      	bne.n	801385a <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8013852:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013854:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013858:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801385a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801385c:	4618      	mov	r0, r3
 801385e:	f7f6 fc91 	bl	800a184 <lwip_htons>
 8013862:	4603      	mov	r3, r0
 8013864:	461a      	mov	r2, r3
 8013866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013868:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 801386a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801386c:	3314      	adds	r3, #20
 801386e:	b29b      	uxth	r3, r3
 8013870:	4618      	mov	r0, r3
 8013872:	f7f6 fc87 	bl	800a184 <lwip_htons>
 8013876:	4603      	mov	r3, r0
 8013878:	461a      	mov	r2, r3
 801387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801387c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013880:	2200      	movs	r2, #0
 8013882:	729a      	strb	r2, [r3, #10]
 8013884:	2200      	movs	r2, #0
 8013886:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013888:	68bb      	ldr	r3, [r7, #8]
 801388a:	695b      	ldr	r3, [r3, #20]
 801388c:	687a      	ldr	r2, [r7, #4]
 801388e:	6a39      	ldr	r1, [r7, #32]
 8013890:	68b8      	ldr	r0, [r7, #8]
 8013892:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013894:	6a38      	ldr	r0, [r7, #32]
 8013896:	f7f7 fe65 	bl	800b564 <pbuf_free>
    left -= fragsize;
 801389a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801389c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801389e:	1ad3      	subs	r3, r2, r3
 80138a0:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 80138a2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80138a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80138a6:	4413      	add	r3, r2
 80138a8:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 80138aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	f47f af3f 	bne.w	8013730 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80138b2:	2300      	movs	r3, #0
 80138b4:	e002      	b.n	80138bc <ip4_frag+0x21c>
      goto memerr;
 80138b6:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80138b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80138bc:	4618      	mov	r0, r3
 80138be:	3740      	adds	r7, #64	; 0x40
 80138c0:	46bd      	mov	sp, r7
 80138c2:	bd80      	pop	{r7, pc}
 80138c4:	08016fe0 	.word	0x08016fe0
 80138c8:	0801716c 	.word	0x0801716c
 80138cc:	08017028 	.word	0x08017028
 80138d0:	08017194 	.word	0x08017194
 80138d4:	080171b0 	.word	0x080171b0
 80138d8:	08013639 	.word	0x08013639

080138dc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b086      	sub	sp, #24
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
 80138e4:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 80138e6:	230e      	movs	r3, #14
 80138e8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	895b      	ldrh	r3, [r3, #10]
 80138ee:	2b0e      	cmp	r3, #14
 80138f0:	d977      	bls.n	80139e2 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	685b      	ldr	r3, [r3, #4]
 80138f6:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80138f8:	693b      	ldr	r3, [r7, #16]
 80138fa:	7b1a      	ldrb	r2, [r3, #12]
 80138fc:	7b5b      	ldrb	r3, [r3, #13]
 80138fe:	021b      	lsls	r3, r3, #8
 8013900:	4313      	orrs	r3, r2
 8013902:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013904:	693b      	ldr	r3, [r7, #16]
 8013906:	781b      	ldrb	r3, [r3, #0]
 8013908:	f003 0301 	and.w	r3, r3, #1
 801390c:	2b00      	cmp	r3, #0
 801390e:	d023      	beq.n	8013958 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013910:	693b      	ldr	r3, [r7, #16]
 8013912:	781b      	ldrb	r3, [r3, #0]
 8013914:	2b01      	cmp	r3, #1
 8013916:	d10f      	bne.n	8013938 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013918:	693b      	ldr	r3, [r7, #16]
 801391a:	785b      	ldrb	r3, [r3, #1]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d11b      	bne.n	8013958 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013920:	693b      	ldr	r3, [r7, #16]
 8013922:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013924:	2b5e      	cmp	r3, #94	; 0x5e
 8013926:	d117      	bne.n	8013958 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	7b5b      	ldrb	r3, [r3, #13]
 801392c:	f043 0310 	orr.w	r3, r3, #16
 8013930:	b2da      	uxtb	r2, r3
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	735a      	strb	r2, [r3, #13]
 8013936:	e00f      	b.n	8013958 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013938:	693b      	ldr	r3, [r7, #16]
 801393a:	2206      	movs	r2, #6
 801393c:	4930      	ldr	r1, [pc, #192]	; (8013a00 <ethernet_input+0x124>)
 801393e:	4618      	mov	r0, r3
 8013940:	f000 fa94 	bl	8013e6c <memcmp>
 8013944:	4603      	mov	r3, r0
 8013946:	2b00      	cmp	r3, #0
 8013948:	d106      	bne.n	8013958 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	7b5b      	ldrb	r3, [r3, #13]
 801394e:	f043 0308 	orr.w	r3, r3, #8
 8013952:	b2da      	uxtb	r2, r3
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013958:	89fb      	ldrh	r3, [r7, #14]
 801395a:	2b08      	cmp	r3, #8
 801395c:	d003      	beq.n	8013966 <ethernet_input+0x8a>
 801395e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013962:	d01e      	beq.n	80139a2 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013964:	e044      	b.n	80139f0 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013966:	683b      	ldr	r3, [r7, #0]
 8013968:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801396c:	f003 0308 	and.w	r3, r3, #8
 8013970:	2b00      	cmp	r3, #0
 8013972:	d038      	beq.n	80139e6 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	895b      	ldrh	r3, [r3, #10]
 8013978:	461a      	mov	r2, r3
 801397a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801397e:	429a      	cmp	r2, r3
 8013980:	db33      	blt.n	80139ea <ethernet_input+0x10e>
 8013982:	8afb      	ldrh	r3, [r7, #22]
 8013984:	425b      	negs	r3, r3
 8013986:	b29b      	uxth	r3, r3
 8013988:	b21b      	sxth	r3, r3
 801398a:	4619      	mov	r1, r3
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	f7f7 fdc5 	bl	800b51c <pbuf_header>
 8013992:	4603      	mov	r3, r0
 8013994:	2b00      	cmp	r3, #0
 8013996:	d128      	bne.n	80139ea <ethernet_input+0x10e>
        ip4_input(p, netif);
 8013998:	6839      	ldr	r1, [r7, #0]
 801399a:	6878      	ldr	r0, [r7, #4]
 801399c:	f7fe ff82 	bl	80128a4 <ip4_input>
      break;
 80139a0:	e01d      	b.n	80139de <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80139a2:	683b      	ldr	r3, [r7, #0]
 80139a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80139a8:	f003 0308 	and.w	r3, r3, #8
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d01e      	beq.n	80139ee <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	895b      	ldrh	r3, [r3, #10]
 80139b4:	461a      	mov	r2, r3
 80139b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80139ba:	429a      	cmp	r2, r3
 80139bc:	db15      	blt.n	80139ea <ethernet_input+0x10e>
 80139be:	8afb      	ldrh	r3, [r7, #22]
 80139c0:	425b      	negs	r3, r3
 80139c2:	b29b      	uxth	r3, r3
 80139c4:	b21b      	sxth	r3, r3
 80139c6:	4619      	mov	r1, r3
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f7f7 fda7 	bl	800b51c <pbuf_header>
 80139ce:	4603      	mov	r3, r0
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d10a      	bne.n	80139ea <ethernet_input+0x10e>
        etharp_input(p, netif);
 80139d4:	6839      	ldr	r1, [r7, #0]
 80139d6:	6878      	ldr	r0, [r7, #4]
 80139d8:	f7fe f950 	bl	8011c7c <etharp_input>
      break;
 80139dc:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80139de:	2300      	movs	r3, #0
 80139e0:	e00a      	b.n	80139f8 <ethernet_input+0x11c>
    goto free_and_return;
 80139e2:	bf00      	nop
 80139e4:	e004      	b.n	80139f0 <ethernet_input+0x114>
        goto free_and_return;
 80139e6:	bf00      	nop
 80139e8:	e002      	b.n	80139f0 <ethernet_input+0x114>

free_and_return:
 80139ea:	bf00      	nop
 80139ec:	e000      	b.n	80139f0 <ethernet_input+0x114>
        goto free_and_return;
 80139ee:	bf00      	nop
  pbuf_free(p);
 80139f0:	6878      	ldr	r0, [r7, #4]
 80139f2:	f7f7 fdb7 	bl	800b564 <pbuf_free>
  return ERR_OK;
 80139f6:	2300      	movs	r3, #0
}
 80139f8:	4618      	mov	r0, r3
 80139fa:	3718      	adds	r7, #24
 80139fc:	46bd      	mov	sp, r7
 80139fe:	bd80      	pop	{r7, pc}
 8013a00:	080173d8 	.word	0x080173d8

08013a04 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b086      	sub	sp, #24
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	60f8      	str	r0, [r7, #12]
 8013a0c:	60b9      	str	r1, [r7, #8]
 8013a0e:	607a      	str	r2, [r7, #4]
 8013a10:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013a12:	8c3b      	ldrh	r3, [r7, #32]
 8013a14:	4618      	mov	r0, r3
 8013a16:	f7f6 fbb5 	bl	800a184 <lwip_htons>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8013a1e:	210e      	movs	r1, #14
 8013a20:	68b8      	ldr	r0, [r7, #8]
 8013a22:	f7f7 fd7b 	bl	800b51c <pbuf_header>
 8013a26:	4603      	mov	r3, r0
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d125      	bne.n	8013a78 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	685b      	ldr	r3, [r3, #4]
 8013a30:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013a32:	693b      	ldr	r3, [r7, #16]
 8013a34:	8afa      	ldrh	r2, [r7, #22]
 8013a36:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8013a38:	693b      	ldr	r3, [r7, #16]
 8013a3a:	2206      	movs	r2, #6
 8013a3c:	6839      	ldr	r1, [r7, #0]
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f000 fa23 	bl	8013e8a <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8013a44:	693b      	ldr	r3, [r7, #16]
 8013a46:	3306      	adds	r3, #6
 8013a48:	2206      	movs	r2, #6
 8013a4a:	6879      	ldr	r1, [r7, #4]
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f000 fa1c 	bl	8013e8a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a58:	2b06      	cmp	r3, #6
 8013a5a:	d006      	beq.n	8013a6a <ethernet_output+0x66>
 8013a5c:	4b0a      	ldr	r3, [pc, #40]	; (8013a88 <ethernet_output+0x84>)
 8013a5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8013a62:	490a      	ldr	r1, [pc, #40]	; (8013a8c <ethernet_output+0x88>)
 8013a64:	480a      	ldr	r0, [pc, #40]	; (8013a90 <ethernet_output+0x8c>)
 8013a66:	f000 fa23 	bl	8013eb0 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013a6a:	68fb      	ldr	r3, [r7, #12]
 8013a6c:	699b      	ldr	r3, [r3, #24]
 8013a6e:	68b9      	ldr	r1, [r7, #8]
 8013a70:	68f8      	ldr	r0, [r7, #12]
 8013a72:	4798      	blx	r3
 8013a74:	4603      	mov	r3, r0
 8013a76:	e002      	b.n	8013a7e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013a78:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013a7a:	f06f 0301 	mvn.w	r3, #1
}
 8013a7e:	4618      	mov	r0, r3
 8013a80:	3718      	adds	r7, #24
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}
 8013a86:	bf00      	nop
 8013a88:	080171d0 	.word	0x080171d0
 8013a8c:	08017208 	.word	0x08017208
 8013a90:	0801723c 	.word	0x0801723c

08013a94 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b082      	sub	sp, #8
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
 8013a9c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8013a9e:	683b      	ldr	r3, [r7, #0]
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	2104      	movs	r1, #4
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	f7f1 fa41 	bl	8004f2c <osMessageQueueNew>
 8013aaa:	4602      	mov	r2, r0
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d102      	bne.n	8013abe <sys_mbox_new+0x2a>
    return ERR_MEM;
 8013ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8013abc:	e000      	b.n	8013ac0 <sys_mbox_new+0x2c>

  return ERR_OK;
 8013abe:	2300      	movs	r3, #0
}
 8013ac0:	4618      	mov	r0, r3
 8013ac2:	3708      	adds	r7, #8
 8013ac4:	46bd      	mov	sp, r7
 8013ac6:	bd80      	pop	{r7, pc}

08013ac8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b082      	sub	sp, #8
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f7f1 fb95 	bl	8005204 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f7f1 fbc2 	bl	8005268 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8013ae4:	bf00      	nop
 8013ae6:	3708      	adds	r7, #8
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bd80      	pop	{r7, pc}

08013aec <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8013aec:	b580      	push	{r7, lr}
 8013aee:	b082      	sub	sp, #8
 8013af0:	af00      	add	r7, sp, #0
 8013af2:	6078      	str	r0, [r7, #4]
 8013af4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
 8013af6:	bf00      	nop
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	6818      	ldr	r0, [r3, #0]
 8013afc:	4639      	mov	r1, r7
 8013afe:	f04f 33ff 	mov.w	r3, #4294967295
 8013b02:	2200      	movs	r2, #0
 8013b04:	f7f1 fa98 	bl	8005038 <osMessageQueuePut>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d1f4      	bne.n	8013af8 <sys_mbox_post+0xc>
#endif
}
 8013b0e:	bf00      	nop
 8013b10:	3708      	adds	r7, #8
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}

08013b16 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013b16:	b580      	push	{r7, lr}
 8013b18:	b084      	sub	sp, #16
 8013b1a:	af00      	add	r7, sp, #0
 8013b1c:	6078      	str	r0, [r7, #4]
 8013b1e:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	6818      	ldr	r0, [r3, #0]
 8013b24:	4639      	mov	r1, r7
 8013b26:	2300      	movs	r3, #0
 8013b28:	2200      	movs	r2, #0
 8013b2a:	f7f1 fa85 	bl	8005038 <osMessageQueuePut>
 8013b2e:	4603      	mov	r3, r0
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d102      	bne.n	8013b3a <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8013b34:	2300      	movs	r3, #0
 8013b36:	73fb      	strb	r3, [r7, #15]
 8013b38:	e001      	b.n	8013b3e <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8013b3a:	23ff      	movs	r3, #255	; 0xff
 8013b3c:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8013b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013b42:	4618      	mov	r0, r3
 8013b44:	3710      	adds	r7, #16
 8013b46:	46bd      	mov	sp, r7
 8013b48:	bd80      	pop	{r7, pc}

08013b4a <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8013b4a:	b580      	push	{r7, lr}
 8013b4c:	b086      	sub	sp, #24
 8013b4e:	af00      	add	r7, sp, #0
 8013b50:	60f8      	str	r0, [r7, #12]
 8013b52:	60b9      	str	r1, [r7, #8]
 8013b54:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8013b56:	f7f0 fe0f 	bl	8004778 <osKernelGetTickCount>
 8013b5a:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d013      	beq.n	8013b8a <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	6818      	ldr	r0, [r3, #0]
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2200      	movs	r2, #0
 8013b6a:	68b9      	ldr	r1, [r7, #8]
 8013b6c:	f7f1 fad8 	bl	8005120 <osMessageQueueGet>
 8013b70:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8013b72:	693b      	ldr	r3, [r7, #16]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d105      	bne.n	8013b84 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8013b78:	f7f0 fdfe 	bl	8004778 <osKernelGetTickCount>
 8013b7c:	4602      	mov	r2, r0
 8013b7e:	697b      	ldr	r3, [r7, #20]
 8013b80:	1ad3      	subs	r3, r2, r3
 8013b82:	e00f      	b.n	8013ba4 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013b84:	f04f 33ff 	mov.w	r3, #4294967295
 8013b88:	e00c      	b.n	8013ba4 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	6818      	ldr	r0, [r3, #0]
 8013b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8013b92:	2200      	movs	r2, #0
 8013b94:	68b9      	ldr	r1, [r7, #8]
 8013b96:	f7f1 fac3 	bl	8005120 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8013b9a:	f7f0 fded 	bl	8004778 <osKernelGetTickCount>
 8013b9e:	4602      	mov	r2, r0
 8013ba0:	697b      	ldr	r3, [r7, #20]
 8013ba2:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	3718      	adds	r7, #24
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bd80      	pop	{r7, pc}

08013bac <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b082      	sub	sp, #8
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
 8013bb4:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	6818      	ldr	r0, [r3, #0]
 8013bba:	2300      	movs	r3, #0
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	6839      	ldr	r1, [r7, #0]
 8013bc0:	f7f1 faae 	bl	8005120 <osMessageQueueGet>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d101      	bne.n	8013bce <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8013bca:	2300      	movs	r3, #0
 8013bcc:	e001      	b.n	8013bd2 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8013bce:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	3708      	adds	r7, #8
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	bd80      	pop	{r7, pc}

08013bda <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8013bda:	b480      	push	{r7}
 8013bdc:	b083      	sub	sp, #12
 8013bde:	af00      	add	r7, sp, #0
 8013be0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d101      	bne.n	8013bee <sys_mbox_valid+0x14>
    return 0;
 8013bea:	2300      	movs	r3, #0
 8013bec:	e000      	b.n	8013bf0 <sys_mbox_valid+0x16>
  else
    return 1;
 8013bee:	2301      	movs	r3, #1
}
 8013bf0:	4618      	mov	r0, r3
 8013bf2:	370c      	adds	r7, #12
 8013bf4:	46bd      	mov	sp, r7
 8013bf6:	bc80      	pop	{r7}
 8013bf8:	4770      	bx	lr

08013bfa <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8013bfa:	b480      	push	{r7}
 8013bfc:	b083      	sub	sp, #12
 8013bfe:	af00      	add	r7, sp, #0
 8013c00:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	2200      	movs	r2, #0
 8013c06:	601a      	str	r2, [r3, #0]
}
 8013c08:	bf00      	nop
 8013c0a:	370c      	adds	r7, #12
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bc80      	pop	{r7}
 8013c10:	4770      	bx	lr

08013c12 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8013c12:	b580      	push	{r7, lr}
 8013c14:	b082      	sub	sp, #8
 8013c16:	af00      	add	r7, sp, #0
 8013c18:	6078      	str	r0, [r7, #4]
 8013c1a:	460b      	mov	r3, r1
 8013c1c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8013c1e:	78fb      	ldrb	r3, [r7, #3]
 8013c20:	2200      	movs	r2, #0
 8013c22:	4619      	mov	r1, r3
 8013c24:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013c28:	f7f0 ffee 	bl	8004c08 <osSemaphoreNew>
 8013c2c:	4602      	mov	r2, r0
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d102      	bne.n	8013c40 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8013c3e:	e009      	b.n	8013c54 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8013c40:	78fb      	ldrb	r3, [r7, #3]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d105      	bne.n	8013c52 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	2100      	movs	r1, #0
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f7f1 f879 	bl	8004d44 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8013c52:	2300      	movs	r3, #0
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	3708      	adds	r7, #8
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}

08013c5c <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b084      	sub	sp, #16
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
 8013c64:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8013c66:	f7f0 fd87 	bl	8004778 <osKernelGetTickCount>
 8013c6a:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8013c6c:	683b      	ldr	r3, [r7, #0]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d011      	beq.n	8013c96 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	6839      	ldr	r1, [r7, #0]
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f7f1 f863 	bl	8004d44 <osSemaphoreAcquire>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d105      	bne.n	8013c90 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8013c84:	f7f0 fd78 	bl	8004778 <osKernelGetTickCount>
 8013c88:	4602      	mov	r2, r0
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	1ad3      	subs	r3, r2, r3
 8013c8e:	e012      	b.n	8013cb6 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013c90:	f04f 33ff 	mov.w	r3, #4294967295
 8013c94:	e00f      	b.n	8013cb6 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8013c96:	bf00      	nop
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f7f1 f84f 	bl	8004d44 <osSemaphoreAcquire>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d1f5      	bne.n	8013c98 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8013cac:	f7f0 fd64 	bl	8004778 <osKernelGetTickCount>
 8013cb0:	4602      	mov	r2, r0
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	3710      	adds	r7, #16
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	bd80      	pop	{r7, pc}

08013cbe <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8013cbe:	b580      	push	{r7, lr}
 8013cc0:	b082      	sub	sp, #8
 8013cc2:	af00      	add	r7, sp, #0
 8013cc4:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f7f1 f8a0 	bl	8004e10 <osSemaphoreRelease>
}
 8013cd0:	bf00      	nop
 8013cd2:	3708      	adds	r7, #8
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	bd80      	pop	{r7, pc}

08013cd8 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b082      	sub	sp, #8
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f7f1 f8eb 	bl	8004ec0 <osSemaphoreDelete>
}
 8013cea:	bf00      	nop
 8013cec:	3708      	adds	r7, #8
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd80      	pop	{r7, pc}

08013cf2 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8013cf2:	b480      	push	{r7}
 8013cf4:	b083      	sub	sp, #12
 8013cf6:	af00      	add	r7, sp, #0
 8013cf8:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d101      	bne.n	8013d06 <sys_sem_valid+0x14>
    return 0;
 8013d02:	2300      	movs	r3, #0
 8013d04:	e000      	b.n	8013d08 <sys_sem_valid+0x16>
  else
    return 1;
 8013d06:	2301      	movs	r3, #1
}
 8013d08:	4618      	mov	r0, r3
 8013d0a:	370c      	adds	r7, #12
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bc80      	pop	{r7}
 8013d10:	4770      	bx	lr

08013d12 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8013d12:	b480      	push	{r7}
 8013d14:	b083      	sub	sp, #12
 8013d16:	af00      	add	r7, sp, #0
 8013d18:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	601a      	str	r2, [r3, #0]
}
 8013d20:	bf00      	nop
 8013d22:	370c      	adds	r7, #12
 8013d24:	46bd      	mov	sp, r7
 8013d26:	bc80      	pop	{r7}
 8013d28:	4770      	bx	lr
	...

08013d2c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8013d30:	2000      	movs	r0, #0
 8013d32:	f7f0 fe21 	bl	8004978 <osMutexNew>
 8013d36:	4602      	mov	r2, r0
 8013d38:	4b01      	ldr	r3, [pc, #4]	; (8013d40 <sys_init+0x14>)
 8013d3a:	601a      	str	r2, [r3, #0]
#endif
}
 8013d3c:	bf00      	nop
 8013d3e:	bd80      	pop	{r7, pc}
 8013d40:	2000ad2c 	.word	0x2000ad2c

08013d44 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013d44:	b580      	push	{r7, lr}
 8013d46:	b082      	sub	sp, #8
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8013d4c:	2000      	movs	r0, #0
 8013d4e:	f7f0 fe13 	bl	8004978 <osMutexNew>
 8013d52:	4602      	mov	r2, r0
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d102      	bne.n	8013d66 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013d60:	f04f 33ff 	mov.w	r3, #4294967295
 8013d64:	e000      	b.n	8013d68 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8013d66:	2300      	movs	r3, #0
}
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3708      	adds	r7, #8
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}

08013d70 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013d70:	b580      	push	{r7, lr}
 8013d72:	b082      	sub	sp, #8
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8013d80:	4618      	mov	r0, r3
 8013d82:	f7f0 fe93 	bl	8004aac <osMutexAcquire>
#endif
}
 8013d86:	bf00      	nop
 8013d88:	3708      	adds	r7, #8
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	bd80      	pop	{r7, pc}

08013d8e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8013d8e:	b580      	push	{r7, lr}
 8013d90:	b082      	sub	sp, #8
 8013d92:	af00      	add	r7, sp, #0
 8013d94:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	4618      	mov	r0, r3
 8013d9c:	f7f0 fee4 	bl	8004b68 <osMutexRelease>
}
 8013da0:	bf00      	nop
 8013da2:	3708      	adds	r7, #8
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}

08013da8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b08e      	sub	sp, #56	; 0x38
 8013dac:	af00      	add	r7, sp, #0
 8013dae:	60f8      	str	r0, [r7, #12]
 8013db0:	60b9      	str	r1, [r7, #8]
 8013db2:	607a      	str	r2, [r7, #4]
 8013db4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8013db6:	f107 0314 	add.w	r3, r7, #20
 8013dba:	2224      	movs	r2, #36	; 0x24
 8013dbc:	2100      	movs	r1, #0
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f000 f86e 	bl	8013ea0 <memset>
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	617b      	str	r3, [r7, #20]
 8013dc8:	683b      	ldr	r3, [r7, #0]
 8013dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8013dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013dce:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8013dd0:	f107 0314 	add.w	r3, r7, #20
 8013dd4:	461a      	mov	r2, r3
 8013dd6:	6879      	ldr	r1, [r7, #4]
 8013dd8:	68b8      	ldr	r0, [r7, #8]
 8013dda:	f7f0 fcf5 	bl	80047c8 <osThreadNew>
 8013dde:	4603      	mov	r3, r0
#endif
}
 8013de0:	4618      	mov	r0, r3
 8013de2:	3738      	adds	r7, #56	; 0x38
 8013de4:	46bd      	mov	sp, r7
 8013de6:	bd80      	pop	{r7, pc}

08013de8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8013dec:	4b04      	ldr	r3, [pc, #16]	; (8013e00 <sys_arch_protect+0x18>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	f04f 31ff 	mov.w	r1, #4294967295
 8013df4:	4618      	mov	r0, r3
 8013df6:	f7f0 fe59 	bl	8004aac <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8013dfa:	2301      	movs	r3, #1
}
 8013dfc:	4618      	mov	r0, r3
 8013dfe:	bd80      	pop	{r7, pc}
 8013e00:	2000ad2c 	.word	0x2000ad2c

08013e04 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013e04:	b580      	push	{r7, lr}
 8013e06:	b082      	sub	sp, #8
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8013e0c:	4b04      	ldr	r3, [pc, #16]	; (8013e20 <sys_arch_unprotect+0x1c>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	4618      	mov	r0, r3
 8013e12:	f7f0 fea9 	bl	8004b68 <osMutexRelease>
}
 8013e16:	bf00      	nop
 8013e18:	3708      	adds	r7, #8
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}
 8013e1e:	bf00      	nop
 8013e20:	2000ad2c 	.word	0x2000ad2c

08013e24 <__libc_init_array>:
 8013e24:	b570      	push	{r4, r5, r6, lr}
 8013e26:	2500      	movs	r5, #0
 8013e28:	4e0c      	ldr	r6, [pc, #48]	; (8013e5c <__libc_init_array+0x38>)
 8013e2a:	4c0d      	ldr	r4, [pc, #52]	; (8013e60 <__libc_init_array+0x3c>)
 8013e2c:	1ba4      	subs	r4, r4, r6
 8013e2e:	10a4      	asrs	r4, r4, #2
 8013e30:	42a5      	cmp	r5, r4
 8013e32:	d109      	bne.n	8013e48 <__libc_init_array+0x24>
 8013e34:	f000 ff2a 	bl	8014c8c <_init>
 8013e38:	2500      	movs	r5, #0
 8013e3a:	4e0a      	ldr	r6, [pc, #40]	; (8013e64 <__libc_init_array+0x40>)
 8013e3c:	4c0a      	ldr	r4, [pc, #40]	; (8013e68 <__libc_init_array+0x44>)
 8013e3e:	1ba4      	subs	r4, r4, r6
 8013e40:	10a4      	asrs	r4, r4, #2
 8013e42:	42a5      	cmp	r5, r4
 8013e44:	d105      	bne.n	8013e52 <__libc_init_array+0x2e>
 8013e46:	bd70      	pop	{r4, r5, r6, pc}
 8013e48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013e4c:	4798      	blx	r3
 8013e4e:	3501      	adds	r5, #1
 8013e50:	e7ee      	b.n	8013e30 <__libc_init_array+0xc>
 8013e52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013e56:	4798      	blx	r3
 8013e58:	3501      	adds	r5, #1
 8013e5a:	e7f2      	b.n	8013e42 <__libc_init_array+0x1e>
 8013e5c:	08017488 	.word	0x08017488
 8013e60:	08017488 	.word	0x08017488
 8013e64:	08017488 	.word	0x08017488
 8013e68:	0801748c 	.word	0x0801748c

08013e6c <memcmp>:
 8013e6c:	b530      	push	{r4, r5, lr}
 8013e6e:	2400      	movs	r4, #0
 8013e70:	42a2      	cmp	r2, r4
 8013e72:	d101      	bne.n	8013e78 <memcmp+0xc>
 8013e74:	2000      	movs	r0, #0
 8013e76:	e007      	b.n	8013e88 <memcmp+0x1c>
 8013e78:	5d03      	ldrb	r3, [r0, r4]
 8013e7a:	3401      	adds	r4, #1
 8013e7c:	190d      	adds	r5, r1, r4
 8013e7e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8013e82:	42ab      	cmp	r3, r5
 8013e84:	d0f4      	beq.n	8013e70 <memcmp+0x4>
 8013e86:	1b58      	subs	r0, r3, r5
 8013e88:	bd30      	pop	{r4, r5, pc}

08013e8a <memcpy>:
 8013e8a:	b510      	push	{r4, lr}
 8013e8c:	1e43      	subs	r3, r0, #1
 8013e8e:	440a      	add	r2, r1
 8013e90:	4291      	cmp	r1, r2
 8013e92:	d100      	bne.n	8013e96 <memcpy+0xc>
 8013e94:	bd10      	pop	{r4, pc}
 8013e96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e9e:	e7f7      	b.n	8013e90 <memcpy+0x6>

08013ea0 <memset>:
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	4402      	add	r2, r0
 8013ea4:	4293      	cmp	r3, r2
 8013ea6:	d100      	bne.n	8013eaa <memset+0xa>
 8013ea8:	4770      	bx	lr
 8013eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8013eae:	e7f9      	b.n	8013ea4 <memset+0x4>

08013eb0 <iprintf>:
 8013eb0:	b40f      	push	{r0, r1, r2, r3}
 8013eb2:	4b0a      	ldr	r3, [pc, #40]	; (8013edc <iprintf+0x2c>)
 8013eb4:	b513      	push	{r0, r1, r4, lr}
 8013eb6:	681c      	ldr	r4, [r3, #0]
 8013eb8:	b124      	cbz	r4, 8013ec4 <iprintf+0x14>
 8013eba:	69a3      	ldr	r3, [r4, #24]
 8013ebc:	b913      	cbnz	r3, 8013ec4 <iprintf+0x14>
 8013ebe:	4620      	mov	r0, r4
 8013ec0:	f000 f84e 	bl	8013f60 <__sinit>
 8013ec4:	ab05      	add	r3, sp, #20
 8013ec6:	9a04      	ldr	r2, [sp, #16]
 8013ec8:	68a1      	ldr	r1, [r4, #8]
 8013eca:	4620      	mov	r0, r4
 8013ecc:	9301      	str	r3, [sp, #4]
 8013ece:	f000 f953 	bl	8014178 <_vfiprintf_r>
 8013ed2:	b002      	add	sp, #8
 8013ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ed8:	b004      	add	sp, #16
 8013eda:	4770      	bx	lr
 8013edc:	2000001c 	.word	0x2000001c

08013ee0 <std>:
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	b510      	push	{r4, lr}
 8013ee4:	4604      	mov	r4, r0
 8013ee6:	e9c0 3300 	strd	r3, r3, [r0]
 8013eea:	6083      	str	r3, [r0, #8]
 8013eec:	8181      	strh	r1, [r0, #12]
 8013eee:	6643      	str	r3, [r0, #100]	; 0x64
 8013ef0:	81c2      	strh	r2, [r0, #14]
 8013ef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013ef6:	6183      	str	r3, [r0, #24]
 8013ef8:	4619      	mov	r1, r3
 8013efa:	2208      	movs	r2, #8
 8013efc:	305c      	adds	r0, #92	; 0x5c
 8013efe:	f7ff ffcf 	bl	8013ea0 <memset>
 8013f02:	4b05      	ldr	r3, [pc, #20]	; (8013f18 <std+0x38>)
 8013f04:	6224      	str	r4, [r4, #32]
 8013f06:	6263      	str	r3, [r4, #36]	; 0x24
 8013f08:	4b04      	ldr	r3, [pc, #16]	; (8013f1c <std+0x3c>)
 8013f0a:	62a3      	str	r3, [r4, #40]	; 0x28
 8013f0c:	4b04      	ldr	r3, [pc, #16]	; (8013f20 <std+0x40>)
 8013f0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013f10:	4b04      	ldr	r3, [pc, #16]	; (8013f24 <std+0x44>)
 8013f12:	6323      	str	r3, [r4, #48]	; 0x30
 8013f14:	bd10      	pop	{r4, pc}
 8013f16:	bf00      	nop
 8013f18:	080146d5 	.word	0x080146d5
 8013f1c:	080146f7 	.word	0x080146f7
 8013f20:	0801472f 	.word	0x0801472f
 8013f24:	08014753 	.word	0x08014753

08013f28 <_cleanup_r>:
 8013f28:	4901      	ldr	r1, [pc, #4]	; (8013f30 <_cleanup_r+0x8>)
 8013f2a:	f000 b885 	b.w	8014038 <_fwalk_reent>
 8013f2e:	bf00      	nop
 8013f30:	08014a2d 	.word	0x08014a2d

08013f34 <__sfmoreglue>:
 8013f34:	b570      	push	{r4, r5, r6, lr}
 8013f36:	2568      	movs	r5, #104	; 0x68
 8013f38:	1e4a      	subs	r2, r1, #1
 8013f3a:	4355      	muls	r5, r2
 8013f3c:	460e      	mov	r6, r1
 8013f3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013f42:	f000 f897 	bl	8014074 <_malloc_r>
 8013f46:	4604      	mov	r4, r0
 8013f48:	b140      	cbz	r0, 8013f5c <__sfmoreglue+0x28>
 8013f4a:	2100      	movs	r1, #0
 8013f4c:	e9c0 1600 	strd	r1, r6, [r0]
 8013f50:	300c      	adds	r0, #12
 8013f52:	60a0      	str	r0, [r4, #8]
 8013f54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013f58:	f7ff ffa2 	bl	8013ea0 <memset>
 8013f5c:	4620      	mov	r0, r4
 8013f5e:	bd70      	pop	{r4, r5, r6, pc}

08013f60 <__sinit>:
 8013f60:	6983      	ldr	r3, [r0, #24]
 8013f62:	b510      	push	{r4, lr}
 8013f64:	4604      	mov	r4, r0
 8013f66:	bb33      	cbnz	r3, 8013fb6 <__sinit+0x56>
 8013f68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013f6c:	6503      	str	r3, [r0, #80]	; 0x50
 8013f6e:	4b12      	ldr	r3, [pc, #72]	; (8013fb8 <__sinit+0x58>)
 8013f70:	4a12      	ldr	r2, [pc, #72]	; (8013fbc <__sinit+0x5c>)
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	6282      	str	r2, [r0, #40]	; 0x28
 8013f76:	4298      	cmp	r0, r3
 8013f78:	bf04      	itt	eq
 8013f7a:	2301      	moveq	r3, #1
 8013f7c:	6183      	streq	r3, [r0, #24]
 8013f7e:	f000 f81f 	bl	8013fc0 <__sfp>
 8013f82:	6060      	str	r0, [r4, #4]
 8013f84:	4620      	mov	r0, r4
 8013f86:	f000 f81b 	bl	8013fc0 <__sfp>
 8013f8a:	60a0      	str	r0, [r4, #8]
 8013f8c:	4620      	mov	r0, r4
 8013f8e:	f000 f817 	bl	8013fc0 <__sfp>
 8013f92:	2200      	movs	r2, #0
 8013f94:	60e0      	str	r0, [r4, #12]
 8013f96:	2104      	movs	r1, #4
 8013f98:	6860      	ldr	r0, [r4, #4]
 8013f9a:	f7ff ffa1 	bl	8013ee0 <std>
 8013f9e:	2201      	movs	r2, #1
 8013fa0:	2109      	movs	r1, #9
 8013fa2:	68a0      	ldr	r0, [r4, #8]
 8013fa4:	f7ff ff9c 	bl	8013ee0 <std>
 8013fa8:	2202      	movs	r2, #2
 8013faa:	2112      	movs	r1, #18
 8013fac:	68e0      	ldr	r0, [r4, #12]
 8013fae:	f7ff ff97 	bl	8013ee0 <std>
 8013fb2:	2301      	movs	r3, #1
 8013fb4:	61a3      	str	r3, [r4, #24]
 8013fb6:	bd10      	pop	{r4, pc}
 8013fb8:	080173e8 	.word	0x080173e8
 8013fbc:	08013f29 	.word	0x08013f29

08013fc0 <__sfp>:
 8013fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fc2:	4b1b      	ldr	r3, [pc, #108]	; (8014030 <__sfp+0x70>)
 8013fc4:	4607      	mov	r7, r0
 8013fc6:	681e      	ldr	r6, [r3, #0]
 8013fc8:	69b3      	ldr	r3, [r6, #24]
 8013fca:	b913      	cbnz	r3, 8013fd2 <__sfp+0x12>
 8013fcc:	4630      	mov	r0, r6
 8013fce:	f7ff ffc7 	bl	8013f60 <__sinit>
 8013fd2:	3648      	adds	r6, #72	; 0x48
 8013fd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013fd8:	3b01      	subs	r3, #1
 8013fda:	d503      	bpl.n	8013fe4 <__sfp+0x24>
 8013fdc:	6833      	ldr	r3, [r6, #0]
 8013fde:	b133      	cbz	r3, 8013fee <__sfp+0x2e>
 8013fe0:	6836      	ldr	r6, [r6, #0]
 8013fe2:	e7f7      	b.n	8013fd4 <__sfp+0x14>
 8013fe4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013fe8:	b16d      	cbz	r5, 8014006 <__sfp+0x46>
 8013fea:	3468      	adds	r4, #104	; 0x68
 8013fec:	e7f4      	b.n	8013fd8 <__sfp+0x18>
 8013fee:	2104      	movs	r1, #4
 8013ff0:	4638      	mov	r0, r7
 8013ff2:	f7ff ff9f 	bl	8013f34 <__sfmoreglue>
 8013ff6:	6030      	str	r0, [r6, #0]
 8013ff8:	2800      	cmp	r0, #0
 8013ffa:	d1f1      	bne.n	8013fe0 <__sfp+0x20>
 8013ffc:	230c      	movs	r3, #12
 8013ffe:	4604      	mov	r4, r0
 8014000:	603b      	str	r3, [r7, #0]
 8014002:	4620      	mov	r0, r4
 8014004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014006:	4b0b      	ldr	r3, [pc, #44]	; (8014034 <__sfp+0x74>)
 8014008:	6665      	str	r5, [r4, #100]	; 0x64
 801400a:	e9c4 5500 	strd	r5, r5, [r4]
 801400e:	60a5      	str	r5, [r4, #8]
 8014010:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014014:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014018:	2208      	movs	r2, #8
 801401a:	4629      	mov	r1, r5
 801401c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014020:	f7ff ff3e 	bl	8013ea0 <memset>
 8014024:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014028:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801402c:	e7e9      	b.n	8014002 <__sfp+0x42>
 801402e:	bf00      	nop
 8014030:	080173e8 	.word	0x080173e8
 8014034:	ffff0001 	.word	0xffff0001

08014038 <_fwalk_reent>:
 8014038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801403c:	4680      	mov	r8, r0
 801403e:	4689      	mov	r9, r1
 8014040:	2600      	movs	r6, #0
 8014042:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014046:	b914      	cbnz	r4, 801404e <_fwalk_reent+0x16>
 8014048:	4630      	mov	r0, r6
 801404a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801404e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014052:	3f01      	subs	r7, #1
 8014054:	d501      	bpl.n	801405a <_fwalk_reent+0x22>
 8014056:	6824      	ldr	r4, [r4, #0]
 8014058:	e7f5      	b.n	8014046 <_fwalk_reent+0xe>
 801405a:	89ab      	ldrh	r3, [r5, #12]
 801405c:	2b01      	cmp	r3, #1
 801405e:	d907      	bls.n	8014070 <_fwalk_reent+0x38>
 8014060:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014064:	3301      	adds	r3, #1
 8014066:	d003      	beq.n	8014070 <_fwalk_reent+0x38>
 8014068:	4629      	mov	r1, r5
 801406a:	4640      	mov	r0, r8
 801406c:	47c8      	blx	r9
 801406e:	4306      	orrs	r6, r0
 8014070:	3568      	adds	r5, #104	; 0x68
 8014072:	e7ee      	b.n	8014052 <_fwalk_reent+0x1a>

08014074 <_malloc_r>:
 8014074:	b570      	push	{r4, r5, r6, lr}
 8014076:	1ccd      	adds	r5, r1, #3
 8014078:	f025 0503 	bic.w	r5, r5, #3
 801407c:	3508      	adds	r5, #8
 801407e:	2d0c      	cmp	r5, #12
 8014080:	bf38      	it	cc
 8014082:	250c      	movcc	r5, #12
 8014084:	2d00      	cmp	r5, #0
 8014086:	4606      	mov	r6, r0
 8014088:	db01      	blt.n	801408e <_malloc_r+0x1a>
 801408a:	42a9      	cmp	r1, r5
 801408c:	d903      	bls.n	8014096 <_malloc_r+0x22>
 801408e:	230c      	movs	r3, #12
 8014090:	6033      	str	r3, [r6, #0]
 8014092:	2000      	movs	r0, #0
 8014094:	bd70      	pop	{r4, r5, r6, pc}
 8014096:	f000 fd77 	bl	8014b88 <__malloc_lock>
 801409a:	4a21      	ldr	r2, [pc, #132]	; (8014120 <_malloc_r+0xac>)
 801409c:	6814      	ldr	r4, [r2, #0]
 801409e:	4621      	mov	r1, r4
 80140a0:	b991      	cbnz	r1, 80140c8 <_malloc_r+0x54>
 80140a2:	4c20      	ldr	r4, [pc, #128]	; (8014124 <_malloc_r+0xb0>)
 80140a4:	6823      	ldr	r3, [r4, #0]
 80140a6:	b91b      	cbnz	r3, 80140b0 <_malloc_r+0x3c>
 80140a8:	4630      	mov	r0, r6
 80140aa:	f000 fb03 	bl	80146b4 <_sbrk_r>
 80140ae:	6020      	str	r0, [r4, #0]
 80140b0:	4629      	mov	r1, r5
 80140b2:	4630      	mov	r0, r6
 80140b4:	f000 fafe 	bl	80146b4 <_sbrk_r>
 80140b8:	1c43      	adds	r3, r0, #1
 80140ba:	d124      	bne.n	8014106 <_malloc_r+0x92>
 80140bc:	230c      	movs	r3, #12
 80140be:	4630      	mov	r0, r6
 80140c0:	6033      	str	r3, [r6, #0]
 80140c2:	f000 fd62 	bl	8014b8a <__malloc_unlock>
 80140c6:	e7e4      	b.n	8014092 <_malloc_r+0x1e>
 80140c8:	680b      	ldr	r3, [r1, #0]
 80140ca:	1b5b      	subs	r3, r3, r5
 80140cc:	d418      	bmi.n	8014100 <_malloc_r+0x8c>
 80140ce:	2b0b      	cmp	r3, #11
 80140d0:	d90f      	bls.n	80140f2 <_malloc_r+0x7e>
 80140d2:	600b      	str	r3, [r1, #0]
 80140d4:	18cc      	adds	r4, r1, r3
 80140d6:	50cd      	str	r5, [r1, r3]
 80140d8:	4630      	mov	r0, r6
 80140da:	f000 fd56 	bl	8014b8a <__malloc_unlock>
 80140de:	f104 000b 	add.w	r0, r4, #11
 80140e2:	1d23      	adds	r3, r4, #4
 80140e4:	f020 0007 	bic.w	r0, r0, #7
 80140e8:	1ac3      	subs	r3, r0, r3
 80140ea:	d0d3      	beq.n	8014094 <_malloc_r+0x20>
 80140ec:	425a      	negs	r2, r3
 80140ee:	50e2      	str	r2, [r4, r3]
 80140f0:	e7d0      	b.n	8014094 <_malloc_r+0x20>
 80140f2:	684b      	ldr	r3, [r1, #4]
 80140f4:	428c      	cmp	r4, r1
 80140f6:	bf16      	itet	ne
 80140f8:	6063      	strne	r3, [r4, #4]
 80140fa:	6013      	streq	r3, [r2, #0]
 80140fc:	460c      	movne	r4, r1
 80140fe:	e7eb      	b.n	80140d8 <_malloc_r+0x64>
 8014100:	460c      	mov	r4, r1
 8014102:	6849      	ldr	r1, [r1, #4]
 8014104:	e7cc      	b.n	80140a0 <_malloc_r+0x2c>
 8014106:	1cc4      	adds	r4, r0, #3
 8014108:	f024 0403 	bic.w	r4, r4, #3
 801410c:	42a0      	cmp	r0, r4
 801410e:	d005      	beq.n	801411c <_malloc_r+0xa8>
 8014110:	1a21      	subs	r1, r4, r0
 8014112:	4630      	mov	r0, r6
 8014114:	f000 face 	bl	80146b4 <_sbrk_r>
 8014118:	3001      	adds	r0, #1
 801411a:	d0cf      	beq.n	80140bc <_malloc_r+0x48>
 801411c:	6025      	str	r5, [r4, #0]
 801411e:	e7db      	b.n	80140d8 <_malloc_r+0x64>
 8014120:	20002a98 	.word	0x20002a98
 8014124:	20002a9c 	.word	0x20002a9c

08014128 <__sfputc_r>:
 8014128:	6893      	ldr	r3, [r2, #8]
 801412a:	b410      	push	{r4}
 801412c:	3b01      	subs	r3, #1
 801412e:	2b00      	cmp	r3, #0
 8014130:	6093      	str	r3, [r2, #8]
 8014132:	da07      	bge.n	8014144 <__sfputc_r+0x1c>
 8014134:	6994      	ldr	r4, [r2, #24]
 8014136:	42a3      	cmp	r3, r4
 8014138:	db01      	blt.n	801413e <__sfputc_r+0x16>
 801413a:	290a      	cmp	r1, #10
 801413c:	d102      	bne.n	8014144 <__sfputc_r+0x1c>
 801413e:	bc10      	pop	{r4}
 8014140:	f000 bb0c 	b.w	801475c <__swbuf_r>
 8014144:	6813      	ldr	r3, [r2, #0]
 8014146:	1c58      	adds	r0, r3, #1
 8014148:	6010      	str	r0, [r2, #0]
 801414a:	7019      	strb	r1, [r3, #0]
 801414c:	4608      	mov	r0, r1
 801414e:	bc10      	pop	{r4}
 8014150:	4770      	bx	lr

08014152 <__sfputs_r>:
 8014152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014154:	4606      	mov	r6, r0
 8014156:	460f      	mov	r7, r1
 8014158:	4614      	mov	r4, r2
 801415a:	18d5      	adds	r5, r2, r3
 801415c:	42ac      	cmp	r4, r5
 801415e:	d101      	bne.n	8014164 <__sfputs_r+0x12>
 8014160:	2000      	movs	r0, #0
 8014162:	e007      	b.n	8014174 <__sfputs_r+0x22>
 8014164:	463a      	mov	r2, r7
 8014166:	f814 1b01 	ldrb.w	r1, [r4], #1
 801416a:	4630      	mov	r0, r6
 801416c:	f7ff ffdc 	bl	8014128 <__sfputc_r>
 8014170:	1c43      	adds	r3, r0, #1
 8014172:	d1f3      	bne.n	801415c <__sfputs_r+0xa>
 8014174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014178 <_vfiprintf_r>:
 8014178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801417c:	460c      	mov	r4, r1
 801417e:	b09d      	sub	sp, #116	; 0x74
 8014180:	4617      	mov	r7, r2
 8014182:	461d      	mov	r5, r3
 8014184:	4606      	mov	r6, r0
 8014186:	b118      	cbz	r0, 8014190 <_vfiprintf_r+0x18>
 8014188:	6983      	ldr	r3, [r0, #24]
 801418a:	b90b      	cbnz	r3, 8014190 <_vfiprintf_r+0x18>
 801418c:	f7ff fee8 	bl	8013f60 <__sinit>
 8014190:	4b7c      	ldr	r3, [pc, #496]	; (8014384 <_vfiprintf_r+0x20c>)
 8014192:	429c      	cmp	r4, r3
 8014194:	d158      	bne.n	8014248 <_vfiprintf_r+0xd0>
 8014196:	6874      	ldr	r4, [r6, #4]
 8014198:	89a3      	ldrh	r3, [r4, #12]
 801419a:	0718      	lsls	r0, r3, #28
 801419c:	d55e      	bpl.n	801425c <_vfiprintf_r+0xe4>
 801419e:	6923      	ldr	r3, [r4, #16]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d05b      	beq.n	801425c <_vfiprintf_r+0xe4>
 80141a4:	2300      	movs	r3, #0
 80141a6:	9309      	str	r3, [sp, #36]	; 0x24
 80141a8:	2320      	movs	r3, #32
 80141aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80141ae:	2330      	movs	r3, #48	; 0x30
 80141b0:	f04f 0b01 	mov.w	fp, #1
 80141b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80141b8:	9503      	str	r5, [sp, #12]
 80141ba:	46b8      	mov	r8, r7
 80141bc:	4645      	mov	r5, r8
 80141be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80141c2:	b10b      	cbz	r3, 80141c8 <_vfiprintf_r+0x50>
 80141c4:	2b25      	cmp	r3, #37	; 0x25
 80141c6:	d154      	bne.n	8014272 <_vfiprintf_r+0xfa>
 80141c8:	ebb8 0a07 	subs.w	sl, r8, r7
 80141cc:	d00b      	beq.n	80141e6 <_vfiprintf_r+0x6e>
 80141ce:	4653      	mov	r3, sl
 80141d0:	463a      	mov	r2, r7
 80141d2:	4621      	mov	r1, r4
 80141d4:	4630      	mov	r0, r6
 80141d6:	f7ff ffbc 	bl	8014152 <__sfputs_r>
 80141da:	3001      	adds	r0, #1
 80141dc:	f000 80c2 	beq.w	8014364 <_vfiprintf_r+0x1ec>
 80141e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141e2:	4453      	add	r3, sl
 80141e4:	9309      	str	r3, [sp, #36]	; 0x24
 80141e6:	f898 3000 	ldrb.w	r3, [r8]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	f000 80ba 	beq.w	8014364 <_vfiprintf_r+0x1ec>
 80141f0:	2300      	movs	r3, #0
 80141f2:	f04f 32ff 	mov.w	r2, #4294967295
 80141f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80141fa:	9304      	str	r3, [sp, #16]
 80141fc:	9307      	str	r3, [sp, #28]
 80141fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014202:	931a      	str	r3, [sp, #104]	; 0x68
 8014204:	46a8      	mov	r8, r5
 8014206:	2205      	movs	r2, #5
 8014208:	f818 1b01 	ldrb.w	r1, [r8], #1
 801420c:	485e      	ldr	r0, [pc, #376]	; (8014388 <_vfiprintf_r+0x210>)
 801420e:	f000 fcad 	bl	8014b6c <memchr>
 8014212:	9b04      	ldr	r3, [sp, #16]
 8014214:	bb78      	cbnz	r0, 8014276 <_vfiprintf_r+0xfe>
 8014216:	06d9      	lsls	r1, r3, #27
 8014218:	bf44      	itt	mi
 801421a:	2220      	movmi	r2, #32
 801421c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014220:	071a      	lsls	r2, r3, #28
 8014222:	bf44      	itt	mi
 8014224:	222b      	movmi	r2, #43	; 0x2b
 8014226:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801422a:	782a      	ldrb	r2, [r5, #0]
 801422c:	2a2a      	cmp	r2, #42	; 0x2a
 801422e:	d02a      	beq.n	8014286 <_vfiprintf_r+0x10e>
 8014230:	46a8      	mov	r8, r5
 8014232:	2000      	movs	r0, #0
 8014234:	250a      	movs	r5, #10
 8014236:	9a07      	ldr	r2, [sp, #28]
 8014238:	4641      	mov	r1, r8
 801423a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801423e:	3b30      	subs	r3, #48	; 0x30
 8014240:	2b09      	cmp	r3, #9
 8014242:	d969      	bls.n	8014318 <_vfiprintf_r+0x1a0>
 8014244:	b360      	cbz	r0, 80142a0 <_vfiprintf_r+0x128>
 8014246:	e024      	b.n	8014292 <_vfiprintf_r+0x11a>
 8014248:	4b50      	ldr	r3, [pc, #320]	; (801438c <_vfiprintf_r+0x214>)
 801424a:	429c      	cmp	r4, r3
 801424c:	d101      	bne.n	8014252 <_vfiprintf_r+0xda>
 801424e:	68b4      	ldr	r4, [r6, #8]
 8014250:	e7a2      	b.n	8014198 <_vfiprintf_r+0x20>
 8014252:	4b4f      	ldr	r3, [pc, #316]	; (8014390 <_vfiprintf_r+0x218>)
 8014254:	429c      	cmp	r4, r3
 8014256:	bf08      	it	eq
 8014258:	68f4      	ldreq	r4, [r6, #12]
 801425a:	e79d      	b.n	8014198 <_vfiprintf_r+0x20>
 801425c:	4621      	mov	r1, r4
 801425e:	4630      	mov	r0, r6
 8014260:	f000 fae0 	bl	8014824 <__swsetup_r>
 8014264:	2800      	cmp	r0, #0
 8014266:	d09d      	beq.n	80141a4 <_vfiprintf_r+0x2c>
 8014268:	f04f 30ff 	mov.w	r0, #4294967295
 801426c:	b01d      	add	sp, #116	; 0x74
 801426e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014272:	46a8      	mov	r8, r5
 8014274:	e7a2      	b.n	80141bc <_vfiprintf_r+0x44>
 8014276:	4a44      	ldr	r2, [pc, #272]	; (8014388 <_vfiprintf_r+0x210>)
 8014278:	4645      	mov	r5, r8
 801427a:	1a80      	subs	r0, r0, r2
 801427c:	fa0b f000 	lsl.w	r0, fp, r0
 8014280:	4318      	orrs	r0, r3
 8014282:	9004      	str	r0, [sp, #16]
 8014284:	e7be      	b.n	8014204 <_vfiprintf_r+0x8c>
 8014286:	9a03      	ldr	r2, [sp, #12]
 8014288:	1d11      	adds	r1, r2, #4
 801428a:	6812      	ldr	r2, [r2, #0]
 801428c:	9103      	str	r1, [sp, #12]
 801428e:	2a00      	cmp	r2, #0
 8014290:	db01      	blt.n	8014296 <_vfiprintf_r+0x11e>
 8014292:	9207      	str	r2, [sp, #28]
 8014294:	e004      	b.n	80142a0 <_vfiprintf_r+0x128>
 8014296:	4252      	negs	r2, r2
 8014298:	f043 0302 	orr.w	r3, r3, #2
 801429c:	9207      	str	r2, [sp, #28]
 801429e:	9304      	str	r3, [sp, #16]
 80142a0:	f898 3000 	ldrb.w	r3, [r8]
 80142a4:	2b2e      	cmp	r3, #46	; 0x2e
 80142a6:	d10e      	bne.n	80142c6 <_vfiprintf_r+0x14e>
 80142a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80142ac:	2b2a      	cmp	r3, #42	; 0x2a
 80142ae:	d138      	bne.n	8014322 <_vfiprintf_r+0x1aa>
 80142b0:	9b03      	ldr	r3, [sp, #12]
 80142b2:	f108 0802 	add.w	r8, r8, #2
 80142b6:	1d1a      	adds	r2, r3, #4
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	9203      	str	r2, [sp, #12]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	bfb8      	it	lt
 80142c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80142c4:	9305      	str	r3, [sp, #20]
 80142c6:	4d33      	ldr	r5, [pc, #204]	; (8014394 <_vfiprintf_r+0x21c>)
 80142c8:	2203      	movs	r2, #3
 80142ca:	f898 1000 	ldrb.w	r1, [r8]
 80142ce:	4628      	mov	r0, r5
 80142d0:	f000 fc4c 	bl	8014b6c <memchr>
 80142d4:	b140      	cbz	r0, 80142e8 <_vfiprintf_r+0x170>
 80142d6:	2340      	movs	r3, #64	; 0x40
 80142d8:	1b40      	subs	r0, r0, r5
 80142da:	fa03 f000 	lsl.w	r0, r3, r0
 80142de:	9b04      	ldr	r3, [sp, #16]
 80142e0:	f108 0801 	add.w	r8, r8, #1
 80142e4:	4303      	orrs	r3, r0
 80142e6:	9304      	str	r3, [sp, #16]
 80142e8:	f898 1000 	ldrb.w	r1, [r8]
 80142ec:	2206      	movs	r2, #6
 80142ee:	482a      	ldr	r0, [pc, #168]	; (8014398 <_vfiprintf_r+0x220>)
 80142f0:	f108 0701 	add.w	r7, r8, #1
 80142f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80142f8:	f000 fc38 	bl	8014b6c <memchr>
 80142fc:	2800      	cmp	r0, #0
 80142fe:	d037      	beq.n	8014370 <_vfiprintf_r+0x1f8>
 8014300:	4b26      	ldr	r3, [pc, #152]	; (801439c <_vfiprintf_r+0x224>)
 8014302:	bb1b      	cbnz	r3, 801434c <_vfiprintf_r+0x1d4>
 8014304:	9b03      	ldr	r3, [sp, #12]
 8014306:	3307      	adds	r3, #7
 8014308:	f023 0307 	bic.w	r3, r3, #7
 801430c:	3308      	adds	r3, #8
 801430e:	9303      	str	r3, [sp, #12]
 8014310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014312:	444b      	add	r3, r9
 8014314:	9309      	str	r3, [sp, #36]	; 0x24
 8014316:	e750      	b.n	80141ba <_vfiprintf_r+0x42>
 8014318:	fb05 3202 	mla	r2, r5, r2, r3
 801431c:	2001      	movs	r0, #1
 801431e:	4688      	mov	r8, r1
 8014320:	e78a      	b.n	8014238 <_vfiprintf_r+0xc0>
 8014322:	2300      	movs	r3, #0
 8014324:	250a      	movs	r5, #10
 8014326:	4619      	mov	r1, r3
 8014328:	f108 0801 	add.w	r8, r8, #1
 801432c:	9305      	str	r3, [sp, #20]
 801432e:	4640      	mov	r0, r8
 8014330:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014334:	3a30      	subs	r2, #48	; 0x30
 8014336:	2a09      	cmp	r2, #9
 8014338:	d903      	bls.n	8014342 <_vfiprintf_r+0x1ca>
 801433a:	2b00      	cmp	r3, #0
 801433c:	d0c3      	beq.n	80142c6 <_vfiprintf_r+0x14e>
 801433e:	9105      	str	r1, [sp, #20]
 8014340:	e7c1      	b.n	80142c6 <_vfiprintf_r+0x14e>
 8014342:	fb05 2101 	mla	r1, r5, r1, r2
 8014346:	2301      	movs	r3, #1
 8014348:	4680      	mov	r8, r0
 801434a:	e7f0      	b.n	801432e <_vfiprintf_r+0x1b6>
 801434c:	ab03      	add	r3, sp, #12
 801434e:	9300      	str	r3, [sp, #0]
 8014350:	4622      	mov	r2, r4
 8014352:	4b13      	ldr	r3, [pc, #76]	; (80143a0 <_vfiprintf_r+0x228>)
 8014354:	a904      	add	r1, sp, #16
 8014356:	4630      	mov	r0, r6
 8014358:	f3af 8000 	nop.w
 801435c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014360:	4681      	mov	r9, r0
 8014362:	d1d5      	bne.n	8014310 <_vfiprintf_r+0x198>
 8014364:	89a3      	ldrh	r3, [r4, #12]
 8014366:	065b      	lsls	r3, r3, #25
 8014368:	f53f af7e 	bmi.w	8014268 <_vfiprintf_r+0xf0>
 801436c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801436e:	e77d      	b.n	801426c <_vfiprintf_r+0xf4>
 8014370:	ab03      	add	r3, sp, #12
 8014372:	9300      	str	r3, [sp, #0]
 8014374:	4622      	mov	r2, r4
 8014376:	4b0a      	ldr	r3, [pc, #40]	; (80143a0 <_vfiprintf_r+0x228>)
 8014378:	a904      	add	r1, sp, #16
 801437a:	4630      	mov	r0, r6
 801437c:	f000 f888 	bl	8014490 <_printf_i>
 8014380:	e7ec      	b.n	801435c <_vfiprintf_r+0x1e4>
 8014382:	bf00      	nop
 8014384:	0801740c 	.word	0x0801740c
 8014388:	0801744c 	.word	0x0801744c
 801438c:	0801742c 	.word	0x0801742c
 8014390:	080173ec 	.word	0x080173ec
 8014394:	08017452 	.word	0x08017452
 8014398:	08017456 	.word	0x08017456
 801439c:	00000000 	.word	0x00000000
 80143a0:	08014153 	.word	0x08014153

080143a4 <_printf_common>:
 80143a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143a8:	4691      	mov	r9, r2
 80143aa:	461f      	mov	r7, r3
 80143ac:	688a      	ldr	r2, [r1, #8]
 80143ae:	690b      	ldr	r3, [r1, #16]
 80143b0:	4606      	mov	r6, r0
 80143b2:	4293      	cmp	r3, r2
 80143b4:	bfb8      	it	lt
 80143b6:	4613      	movlt	r3, r2
 80143b8:	f8c9 3000 	str.w	r3, [r9]
 80143bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80143c0:	460c      	mov	r4, r1
 80143c2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80143c6:	b112      	cbz	r2, 80143ce <_printf_common+0x2a>
 80143c8:	3301      	adds	r3, #1
 80143ca:	f8c9 3000 	str.w	r3, [r9]
 80143ce:	6823      	ldr	r3, [r4, #0]
 80143d0:	0699      	lsls	r1, r3, #26
 80143d2:	bf42      	ittt	mi
 80143d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80143d8:	3302      	addmi	r3, #2
 80143da:	f8c9 3000 	strmi.w	r3, [r9]
 80143de:	6825      	ldr	r5, [r4, #0]
 80143e0:	f015 0506 	ands.w	r5, r5, #6
 80143e4:	d107      	bne.n	80143f6 <_printf_common+0x52>
 80143e6:	f104 0a19 	add.w	sl, r4, #25
 80143ea:	68e3      	ldr	r3, [r4, #12]
 80143ec:	f8d9 2000 	ldr.w	r2, [r9]
 80143f0:	1a9b      	subs	r3, r3, r2
 80143f2:	42ab      	cmp	r3, r5
 80143f4:	dc29      	bgt.n	801444a <_printf_common+0xa6>
 80143f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80143fa:	6822      	ldr	r2, [r4, #0]
 80143fc:	3300      	adds	r3, #0
 80143fe:	bf18      	it	ne
 8014400:	2301      	movne	r3, #1
 8014402:	0692      	lsls	r2, r2, #26
 8014404:	d42e      	bmi.n	8014464 <_printf_common+0xc0>
 8014406:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801440a:	4639      	mov	r1, r7
 801440c:	4630      	mov	r0, r6
 801440e:	47c0      	blx	r8
 8014410:	3001      	adds	r0, #1
 8014412:	d021      	beq.n	8014458 <_printf_common+0xb4>
 8014414:	6823      	ldr	r3, [r4, #0]
 8014416:	68e5      	ldr	r5, [r4, #12]
 8014418:	f003 0306 	and.w	r3, r3, #6
 801441c:	2b04      	cmp	r3, #4
 801441e:	bf18      	it	ne
 8014420:	2500      	movne	r5, #0
 8014422:	f8d9 2000 	ldr.w	r2, [r9]
 8014426:	f04f 0900 	mov.w	r9, #0
 801442a:	bf08      	it	eq
 801442c:	1aad      	subeq	r5, r5, r2
 801442e:	68a3      	ldr	r3, [r4, #8]
 8014430:	6922      	ldr	r2, [r4, #16]
 8014432:	bf08      	it	eq
 8014434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014438:	4293      	cmp	r3, r2
 801443a:	bfc4      	itt	gt
 801443c:	1a9b      	subgt	r3, r3, r2
 801443e:	18ed      	addgt	r5, r5, r3
 8014440:	341a      	adds	r4, #26
 8014442:	454d      	cmp	r5, r9
 8014444:	d11a      	bne.n	801447c <_printf_common+0xd8>
 8014446:	2000      	movs	r0, #0
 8014448:	e008      	b.n	801445c <_printf_common+0xb8>
 801444a:	2301      	movs	r3, #1
 801444c:	4652      	mov	r2, sl
 801444e:	4639      	mov	r1, r7
 8014450:	4630      	mov	r0, r6
 8014452:	47c0      	blx	r8
 8014454:	3001      	adds	r0, #1
 8014456:	d103      	bne.n	8014460 <_printf_common+0xbc>
 8014458:	f04f 30ff 	mov.w	r0, #4294967295
 801445c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014460:	3501      	adds	r5, #1
 8014462:	e7c2      	b.n	80143ea <_printf_common+0x46>
 8014464:	2030      	movs	r0, #48	; 0x30
 8014466:	18e1      	adds	r1, r4, r3
 8014468:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801446c:	1c5a      	adds	r2, r3, #1
 801446e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014472:	4422      	add	r2, r4
 8014474:	3302      	adds	r3, #2
 8014476:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801447a:	e7c4      	b.n	8014406 <_printf_common+0x62>
 801447c:	2301      	movs	r3, #1
 801447e:	4622      	mov	r2, r4
 8014480:	4639      	mov	r1, r7
 8014482:	4630      	mov	r0, r6
 8014484:	47c0      	blx	r8
 8014486:	3001      	adds	r0, #1
 8014488:	d0e6      	beq.n	8014458 <_printf_common+0xb4>
 801448a:	f109 0901 	add.w	r9, r9, #1
 801448e:	e7d8      	b.n	8014442 <_printf_common+0x9e>

08014490 <_printf_i>:
 8014490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014494:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014498:	460c      	mov	r4, r1
 801449a:	7e09      	ldrb	r1, [r1, #24]
 801449c:	b085      	sub	sp, #20
 801449e:	296e      	cmp	r1, #110	; 0x6e
 80144a0:	4617      	mov	r7, r2
 80144a2:	4606      	mov	r6, r0
 80144a4:	4698      	mov	r8, r3
 80144a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80144a8:	f000 80b3 	beq.w	8014612 <_printf_i+0x182>
 80144ac:	d822      	bhi.n	80144f4 <_printf_i+0x64>
 80144ae:	2963      	cmp	r1, #99	; 0x63
 80144b0:	d036      	beq.n	8014520 <_printf_i+0x90>
 80144b2:	d80a      	bhi.n	80144ca <_printf_i+0x3a>
 80144b4:	2900      	cmp	r1, #0
 80144b6:	f000 80b9 	beq.w	801462c <_printf_i+0x19c>
 80144ba:	2958      	cmp	r1, #88	; 0x58
 80144bc:	f000 8083 	beq.w	80145c6 <_printf_i+0x136>
 80144c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80144c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80144c8:	e032      	b.n	8014530 <_printf_i+0xa0>
 80144ca:	2964      	cmp	r1, #100	; 0x64
 80144cc:	d001      	beq.n	80144d2 <_printf_i+0x42>
 80144ce:	2969      	cmp	r1, #105	; 0x69
 80144d0:	d1f6      	bne.n	80144c0 <_printf_i+0x30>
 80144d2:	6820      	ldr	r0, [r4, #0]
 80144d4:	6813      	ldr	r3, [r2, #0]
 80144d6:	0605      	lsls	r5, r0, #24
 80144d8:	f103 0104 	add.w	r1, r3, #4
 80144dc:	d52a      	bpl.n	8014534 <_printf_i+0xa4>
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	6011      	str	r1, [r2, #0]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	da03      	bge.n	80144ee <_printf_i+0x5e>
 80144e6:	222d      	movs	r2, #45	; 0x2d
 80144e8:	425b      	negs	r3, r3
 80144ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80144ee:	486f      	ldr	r0, [pc, #444]	; (80146ac <_printf_i+0x21c>)
 80144f0:	220a      	movs	r2, #10
 80144f2:	e039      	b.n	8014568 <_printf_i+0xd8>
 80144f4:	2973      	cmp	r1, #115	; 0x73
 80144f6:	f000 809d 	beq.w	8014634 <_printf_i+0x1a4>
 80144fa:	d808      	bhi.n	801450e <_printf_i+0x7e>
 80144fc:	296f      	cmp	r1, #111	; 0x6f
 80144fe:	d020      	beq.n	8014542 <_printf_i+0xb2>
 8014500:	2970      	cmp	r1, #112	; 0x70
 8014502:	d1dd      	bne.n	80144c0 <_printf_i+0x30>
 8014504:	6823      	ldr	r3, [r4, #0]
 8014506:	f043 0320 	orr.w	r3, r3, #32
 801450a:	6023      	str	r3, [r4, #0]
 801450c:	e003      	b.n	8014516 <_printf_i+0x86>
 801450e:	2975      	cmp	r1, #117	; 0x75
 8014510:	d017      	beq.n	8014542 <_printf_i+0xb2>
 8014512:	2978      	cmp	r1, #120	; 0x78
 8014514:	d1d4      	bne.n	80144c0 <_printf_i+0x30>
 8014516:	2378      	movs	r3, #120	; 0x78
 8014518:	4865      	ldr	r0, [pc, #404]	; (80146b0 <_printf_i+0x220>)
 801451a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801451e:	e055      	b.n	80145cc <_printf_i+0x13c>
 8014520:	6813      	ldr	r3, [r2, #0]
 8014522:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014526:	1d19      	adds	r1, r3, #4
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	6011      	str	r1, [r2, #0]
 801452c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014530:	2301      	movs	r3, #1
 8014532:	e08c      	b.n	801464e <_printf_i+0x1be>
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	f010 0f40 	tst.w	r0, #64	; 0x40
 801453a:	6011      	str	r1, [r2, #0]
 801453c:	bf18      	it	ne
 801453e:	b21b      	sxthne	r3, r3
 8014540:	e7cf      	b.n	80144e2 <_printf_i+0x52>
 8014542:	6813      	ldr	r3, [r2, #0]
 8014544:	6825      	ldr	r5, [r4, #0]
 8014546:	1d18      	adds	r0, r3, #4
 8014548:	6010      	str	r0, [r2, #0]
 801454a:	0628      	lsls	r0, r5, #24
 801454c:	d501      	bpl.n	8014552 <_printf_i+0xc2>
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	e002      	b.n	8014558 <_printf_i+0xc8>
 8014552:	0668      	lsls	r0, r5, #25
 8014554:	d5fb      	bpl.n	801454e <_printf_i+0xbe>
 8014556:	881b      	ldrh	r3, [r3, #0]
 8014558:	296f      	cmp	r1, #111	; 0x6f
 801455a:	bf14      	ite	ne
 801455c:	220a      	movne	r2, #10
 801455e:	2208      	moveq	r2, #8
 8014560:	4852      	ldr	r0, [pc, #328]	; (80146ac <_printf_i+0x21c>)
 8014562:	2100      	movs	r1, #0
 8014564:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014568:	6865      	ldr	r5, [r4, #4]
 801456a:	2d00      	cmp	r5, #0
 801456c:	60a5      	str	r5, [r4, #8]
 801456e:	f2c0 8095 	blt.w	801469c <_printf_i+0x20c>
 8014572:	6821      	ldr	r1, [r4, #0]
 8014574:	f021 0104 	bic.w	r1, r1, #4
 8014578:	6021      	str	r1, [r4, #0]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d13d      	bne.n	80145fa <_printf_i+0x16a>
 801457e:	2d00      	cmp	r5, #0
 8014580:	f040 808e 	bne.w	80146a0 <_printf_i+0x210>
 8014584:	4665      	mov	r5, ip
 8014586:	2a08      	cmp	r2, #8
 8014588:	d10b      	bne.n	80145a2 <_printf_i+0x112>
 801458a:	6823      	ldr	r3, [r4, #0]
 801458c:	07db      	lsls	r3, r3, #31
 801458e:	d508      	bpl.n	80145a2 <_printf_i+0x112>
 8014590:	6923      	ldr	r3, [r4, #16]
 8014592:	6862      	ldr	r2, [r4, #4]
 8014594:	429a      	cmp	r2, r3
 8014596:	bfde      	ittt	le
 8014598:	2330      	movle	r3, #48	; 0x30
 801459a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801459e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80145a2:	ebac 0305 	sub.w	r3, ip, r5
 80145a6:	6123      	str	r3, [r4, #16]
 80145a8:	f8cd 8000 	str.w	r8, [sp]
 80145ac:	463b      	mov	r3, r7
 80145ae:	aa03      	add	r2, sp, #12
 80145b0:	4621      	mov	r1, r4
 80145b2:	4630      	mov	r0, r6
 80145b4:	f7ff fef6 	bl	80143a4 <_printf_common>
 80145b8:	3001      	adds	r0, #1
 80145ba:	d14d      	bne.n	8014658 <_printf_i+0x1c8>
 80145bc:	f04f 30ff 	mov.w	r0, #4294967295
 80145c0:	b005      	add	sp, #20
 80145c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145c6:	4839      	ldr	r0, [pc, #228]	; (80146ac <_printf_i+0x21c>)
 80145c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80145cc:	6813      	ldr	r3, [r2, #0]
 80145ce:	6821      	ldr	r1, [r4, #0]
 80145d0:	1d1d      	adds	r5, r3, #4
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	6015      	str	r5, [r2, #0]
 80145d6:	060a      	lsls	r2, r1, #24
 80145d8:	d50b      	bpl.n	80145f2 <_printf_i+0x162>
 80145da:	07ca      	lsls	r2, r1, #31
 80145dc:	bf44      	itt	mi
 80145de:	f041 0120 	orrmi.w	r1, r1, #32
 80145e2:	6021      	strmi	r1, [r4, #0]
 80145e4:	b91b      	cbnz	r3, 80145ee <_printf_i+0x15e>
 80145e6:	6822      	ldr	r2, [r4, #0]
 80145e8:	f022 0220 	bic.w	r2, r2, #32
 80145ec:	6022      	str	r2, [r4, #0]
 80145ee:	2210      	movs	r2, #16
 80145f0:	e7b7      	b.n	8014562 <_printf_i+0xd2>
 80145f2:	064d      	lsls	r5, r1, #25
 80145f4:	bf48      	it	mi
 80145f6:	b29b      	uxthmi	r3, r3
 80145f8:	e7ef      	b.n	80145da <_printf_i+0x14a>
 80145fa:	4665      	mov	r5, ip
 80145fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8014600:	fb02 3311 	mls	r3, r2, r1, r3
 8014604:	5cc3      	ldrb	r3, [r0, r3]
 8014606:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801460a:	460b      	mov	r3, r1
 801460c:	2900      	cmp	r1, #0
 801460e:	d1f5      	bne.n	80145fc <_printf_i+0x16c>
 8014610:	e7b9      	b.n	8014586 <_printf_i+0xf6>
 8014612:	6813      	ldr	r3, [r2, #0]
 8014614:	6825      	ldr	r5, [r4, #0]
 8014616:	1d18      	adds	r0, r3, #4
 8014618:	6961      	ldr	r1, [r4, #20]
 801461a:	6010      	str	r0, [r2, #0]
 801461c:	0628      	lsls	r0, r5, #24
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	d501      	bpl.n	8014626 <_printf_i+0x196>
 8014622:	6019      	str	r1, [r3, #0]
 8014624:	e002      	b.n	801462c <_printf_i+0x19c>
 8014626:	066a      	lsls	r2, r5, #25
 8014628:	d5fb      	bpl.n	8014622 <_printf_i+0x192>
 801462a:	8019      	strh	r1, [r3, #0]
 801462c:	2300      	movs	r3, #0
 801462e:	4665      	mov	r5, ip
 8014630:	6123      	str	r3, [r4, #16]
 8014632:	e7b9      	b.n	80145a8 <_printf_i+0x118>
 8014634:	6813      	ldr	r3, [r2, #0]
 8014636:	1d19      	adds	r1, r3, #4
 8014638:	6011      	str	r1, [r2, #0]
 801463a:	681d      	ldr	r5, [r3, #0]
 801463c:	6862      	ldr	r2, [r4, #4]
 801463e:	2100      	movs	r1, #0
 8014640:	4628      	mov	r0, r5
 8014642:	f000 fa93 	bl	8014b6c <memchr>
 8014646:	b108      	cbz	r0, 801464c <_printf_i+0x1bc>
 8014648:	1b40      	subs	r0, r0, r5
 801464a:	6060      	str	r0, [r4, #4]
 801464c:	6863      	ldr	r3, [r4, #4]
 801464e:	6123      	str	r3, [r4, #16]
 8014650:	2300      	movs	r3, #0
 8014652:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014656:	e7a7      	b.n	80145a8 <_printf_i+0x118>
 8014658:	6923      	ldr	r3, [r4, #16]
 801465a:	462a      	mov	r2, r5
 801465c:	4639      	mov	r1, r7
 801465e:	4630      	mov	r0, r6
 8014660:	47c0      	blx	r8
 8014662:	3001      	adds	r0, #1
 8014664:	d0aa      	beq.n	80145bc <_printf_i+0x12c>
 8014666:	6823      	ldr	r3, [r4, #0]
 8014668:	079b      	lsls	r3, r3, #30
 801466a:	d413      	bmi.n	8014694 <_printf_i+0x204>
 801466c:	68e0      	ldr	r0, [r4, #12]
 801466e:	9b03      	ldr	r3, [sp, #12]
 8014670:	4298      	cmp	r0, r3
 8014672:	bfb8      	it	lt
 8014674:	4618      	movlt	r0, r3
 8014676:	e7a3      	b.n	80145c0 <_printf_i+0x130>
 8014678:	2301      	movs	r3, #1
 801467a:	464a      	mov	r2, r9
 801467c:	4639      	mov	r1, r7
 801467e:	4630      	mov	r0, r6
 8014680:	47c0      	blx	r8
 8014682:	3001      	adds	r0, #1
 8014684:	d09a      	beq.n	80145bc <_printf_i+0x12c>
 8014686:	3501      	adds	r5, #1
 8014688:	68e3      	ldr	r3, [r4, #12]
 801468a:	9a03      	ldr	r2, [sp, #12]
 801468c:	1a9b      	subs	r3, r3, r2
 801468e:	42ab      	cmp	r3, r5
 8014690:	dcf2      	bgt.n	8014678 <_printf_i+0x1e8>
 8014692:	e7eb      	b.n	801466c <_printf_i+0x1dc>
 8014694:	2500      	movs	r5, #0
 8014696:	f104 0919 	add.w	r9, r4, #25
 801469a:	e7f5      	b.n	8014688 <_printf_i+0x1f8>
 801469c:	2b00      	cmp	r3, #0
 801469e:	d1ac      	bne.n	80145fa <_printf_i+0x16a>
 80146a0:	7803      	ldrb	r3, [r0, #0]
 80146a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80146a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80146aa:	e76c      	b.n	8014586 <_printf_i+0xf6>
 80146ac:	0801745d 	.word	0x0801745d
 80146b0:	0801746e 	.word	0x0801746e

080146b4 <_sbrk_r>:
 80146b4:	b538      	push	{r3, r4, r5, lr}
 80146b6:	2300      	movs	r3, #0
 80146b8:	4c05      	ldr	r4, [pc, #20]	; (80146d0 <_sbrk_r+0x1c>)
 80146ba:	4605      	mov	r5, r0
 80146bc:	4608      	mov	r0, r1
 80146be:	6023      	str	r3, [r4, #0]
 80146c0:	f7ec fa2c 	bl	8000b1c <_sbrk>
 80146c4:	1c43      	adds	r3, r0, #1
 80146c6:	d102      	bne.n	80146ce <_sbrk_r+0x1a>
 80146c8:	6823      	ldr	r3, [r4, #0]
 80146ca:	b103      	cbz	r3, 80146ce <_sbrk_r+0x1a>
 80146cc:	602b      	str	r3, [r5, #0]
 80146ce:	bd38      	pop	{r3, r4, r5, pc}
 80146d0:	2000ad28 	.word	0x2000ad28

080146d4 <__sread>:
 80146d4:	b510      	push	{r4, lr}
 80146d6:	460c      	mov	r4, r1
 80146d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146dc:	f000 faa2 	bl	8014c24 <_read_r>
 80146e0:	2800      	cmp	r0, #0
 80146e2:	bfab      	itete	ge
 80146e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80146e6:	89a3      	ldrhlt	r3, [r4, #12]
 80146e8:	181b      	addge	r3, r3, r0
 80146ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80146ee:	bfac      	ite	ge
 80146f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80146f2:	81a3      	strhlt	r3, [r4, #12]
 80146f4:	bd10      	pop	{r4, pc}

080146f6 <__swrite>:
 80146f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146fa:	461f      	mov	r7, r3
 80146fc:	898b      	ldrh	r3, [r1, #12]
 80146fe:	4605      	mov	r5, r0
 8014700:	05db      	lsls	r3, r3, #23
 8014702:	460c      	mov	r4, r1
 8014704:	4616      	mov	r6, r2
 8014706:	d505      	bpl.n	8014714 <__swrite+0x1e>
 8014708:	2302      	movs	r3, #2
 801470a:	2200      	movs	r2, #0
 801470c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014710:	f000 f9b6 	bl	8014a80 <_lseek_r>
 8014714:	89a3      	ldrh	r3, [r4, #12]
 8014716:	4632      	mov	r2, r6
 8014718:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801471c:	81a3      	strh	r3, [r4, #12]
 801471e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014722:	463b      	mov	r3, r7
 8014724:	4628      	mov	r0, r5
 8014726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801472a:	f000 b869 	b.w	8014800 <_write_r>

0801472e <__sseek>:
 801472e:	b510      	push	{r4, lr}
 8014730:	460c      	mov	r4, r1
 8014732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014736:	f000 f9a3 	bl	8014a80 <_lseek_r>
 801473a:	1c43      	adds	r3, r0, #1
 801473c:	89a3      	ldrh	r3, [r4, #12]
 801473e:	bf15      	itete	ne
 8014740:	6560      	strne	r0, [r4, #84]	; 0x54
 8014742:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014746:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801474a:	81a3      	strheq	r3, [r4, #12]
 801474c:	bf18      	it	ne
 801474e:	81a3      	strhne	r3, [r4, #12]
 8014750:	bd10      	pop	{r4, pc}

08014752 <__sclose>:
 8014752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014756:	f000 b8d3 	b.w	8014900 <_close_r>
	...

0801475c <__swbuf_r>:
 801475c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801475e:	460e      	mov	r6, r1
 8014760:	4614      	mov	r4, r2
 8014762:	4605      	mov	r5, r0
 8014764:	b118      	cbz	r0, 801476e <__swbuf_r+0x12>
 8014766:	6983      	ldr	r3, [r0, #24]
 8014768:	b90b      	cbnz	r3, 801476e <__swbuf_r+0x12>
 801476a:	f7ff fbf9 	bl	8013f60 <__sinit>
 801476e:	4b21      	ldr	r3, [pc, #132]	; (80147f4 <__swbuf_r+0x98>)
 8014770:	429c      	cmp	r4, r3
 8014772:	d12a      	bne.n	80147ca <__swbuf_r+0x6e>
 8014774:	686c      	ldr	r4, [r5, #4]
 8014776:	69a3      	ldr	r3, [r4, #24]
 8014778:	60a3      	str	r3, [r4, #8]
 801477a:	89a3      	ldrh	r3, [r4, #12]
 801477c:	071a      	lsls	r2, r3, #28
 801477e:	d52e      	bpl.n	80147de <__swbuf_r+0x82>
 8014780:	6923      	ldr	r3, [r4, #16]
 8014782:	b363      	cbz	r3, 80147de <__swbuf_r+0x82>
 8014784:	6923      	ldr	r3, [r4, #16]
 8014786:	6820      	ldr	r0, [r4, #0]
 8014788:	b2f6      	uxtb	r6, r6
 801478a:	1ac0      	subs	r0, r0, r3
 801478c:	6963      	ldr	r3, [r4, #20]
 801478e:	4637      	mov	r7, r6
 8014790:	4283      	cmp	r3, r0
 8014792:	dc04      	bgt.n	801479e <__swbuf_r+0x42>
 8014794:	4621      	mov	r1, r4
 8014796:	4628      	mov	r0, r5
 8014798:	f000 f948 	bl	8014a2c <_fflush_r>
 801479c:	bb28      	cbnz	r0, 80147ea <__swbuf_r+0x8e>
 801479e:	68a3      	ldr	r3, [r4, #8]
 80147a0:	3001      	adds	r0, #1
 80147a2:	3b01      	subs	r3, #1
 80147a4:	60a3      	str	r3, [r4, #8]
 80147a6:	6823      	ldr	r3, [r4, #0]
 80147a8:	1c5a      	adds	r2, r3, #1
 80147aa:	6022      	str	r2, [r4, #0]
 80147ac:	701e      	strb	r6, [r3, #0]
 80147ae:	6963      	ldr	r3, [r4, #20]
 80147b0:	4283      	cmp	r3, r0
 80147b2:	d004      	beq.n	80147be <__swbuf_r+0x62>
 80147b4:	89a3      	ldrh	r3, [r4, #12]
 80147b6:	07db      	lsls	r3, r3, #31
 80147b8:	d519      	bpl.n	80147ee <__swbuf_r+0x92>
 80147ba:	2e0a      	cmp	r6, #10
 80147bc:	d117      	bne.n	80147ee <__swbuf_r+0x92>
 80147be:	4621      	mov	r1, r4
 80147c0:	4628      	mov	r0, r5
 80147c2:	f000 f933 	bl	8014a2c <_fflush_r>
 80147c6:	b190      	cbz	r0, 80147ee <__swbuf_r+0x92>
 80147c8:	e00f      	b.n	80147ea <__swbuf_r+0x8e>
 80147ca:	4b0b      	ldr	r3, [pc, #44]	; (80147f8 <__swbuf_r+0x9c>)
 80147cc:	429c      	cmp	r4, r3
 80147ce:	d101      	bne.n	80147d4 <__swbuf_r+0x78>
 80147d0:	68ac      	ldr	r4, [r5, #8]
 80147d2:	e7d0      	b.n	8014776 <__swbuf_r+0x1a>
 80147d4:	4b09      	ldr	r3, [pc, #36]	; (80147fc <__swbuf_r+0xa0>)
 80147d6:	429c      	cmp	r4, r3
 80147d8:	bf08      	it	eq
 80147da:	68ec      	ldreq	r4, [r5, #12]
 80147dc:	e7cb      	b.n	8014776 <__swbuf_r+0x1a>
 80147de:	4621      	mov	r1, r4
 80147e0:	4628      	mov	r0, r5
 80147e2:	f000 f81f 	bl	8014824 <__swsetup_r>
 80147e6:	2800      	cmp	r0, #0
 80147e8:	d0cc      	beq.n	8014784 <__swbuf_r+0x28>
 80147ea:	f04f 37ff 	mov.w	r7, #4294967295
 80147ee:	4638      	mov	r0, r7
 80147f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80147f2:	bf00      	nop
 80147f4:	0801740c 	.word	0x0801740c
 80147f8:	0801742c 	.word	0x0801742c
 80147fc:	080173ec 	.word	0x080173ec

08014800 <_write_r>:
 8014800:	b538      	push	{r3, r4, r5, lr}
 8014802:	4605      	mov	r5, r0
 8014804:	4608      	mov	r0, r1
 8014806:	4611      	mov	r1, r2
 8014808:	2200      	movs	r2, #0
 801480a:	4c05      	ldr	r4, [pc, #20]	; (8014820 <_write_r+0x20>)
 801480c:	6022      	str	r2, [r4, #0]
 801480e:	461a      	mov	r2, r3
 8014810:	f7ec f937 	bl	8000a82 <_write>
 8014814:	1c43      	adds	r3, r0, #1
 8014816:	d102      	bne.n	801481e <_write_r+0x1e>
 8014818:	6823      	ldr	r3, [r4, #0]
 801481a:	b103      	cbz	r3, 801481e <_write_r+0x1e>
 801481c:	602b      	str	r3, [r5, #0]
 801481e:	bd38      	pop	{r3, r4, r5, pc}
 8014820:	2000ad28 	.word	0x2000ad28

08014824 <__swsetup_r>:
 8014824:	4b32      	ldr	r3, [pc, #200]	; (80148f0 <__swsetup_r+0xcc>)
 8014826:	b570      	push	{r4, r5, r6, lr}
 8014828:	681d      	ldr	r5, [r3, #0]
 801482a:	4606      	mov	r6, r0
 801482c:	460c      	mov	r4, r1
 801482e:	b125      	cbz	r5, 801483a <__swsetup_r+0x16>
 8014830:	69ab      	ldr	r3, [r5, #24]
 8014832:	b913      	cbnz	r3, 801483a <__swsetup_r+0x16>
 8014834:	4628      	mov	r0, r5
 8014836:	f7ff fb93 	bl	8013f60 <__sinit>
 801483a:	4b2e      	ldr	r3, [pc, #184]	; (80148f4 <__swsetup_r+0xd0>)
 801483c:	429c      	cmp	r4, r3
 801483e:	d10f      	bne.n	8014860 <__swsetup_r+0x3c>
 8014840:	686c      	ldr	r4, [r5, #4]
 8014842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014846:	b29a      	uxth	r2, r3
 8014848:	0715      	lsls	r5, r2, #28
 801484a:	d42c      	bmi.n	80148a6 <__swsetup_r+0x82>
 801484c:	06d0      	lsls	r0, r2, #27
 801484e:	d411      	bmi.n	8014874 <__swsetup_r+0x50>
 8014850:	2209      	movs	r2, #9
 8014852:	6032      	str	r2, [r6, #0]
 8014854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014858:	81a3      	strh	r3, [r4, #12]
 801485a:	f04f 30ff 	mov.w	r0, #4294967295
 801485e:	e03e      	b.n	80148de <__swsetup_r+0xba>
 8014860:	4b25      	ldr	r3, [pc, #148]	; (80148f8 <__swsetup_r+0xd4>)
 8014862:	429c      	cmp	r4, r3
 8014864:	d101      	bne.n	801486a <__swsetup_r+0x46>
 8014866:	68ac      	ldr	r4, [r5, #8]
 8014868:	e7eb      	b.n	8014842 <__swsetup_r+0x1e>
 801486a:	4b24      	ldr	r3, [pc, #144]	; (80148fc <__swsetup_r+0xd8>)
 801486c:	429c      	cmp	r4, r3
 801486e:	bf08      	it	eq
 8014870:	68ec      	ldreq	r4, [r5, #12]
 8014872:	e7e6      	b.n	8014842 <__swsetup_r+0x1e>
 8014874:	0751      	lsls	r1, r2, #29
 8014876:	d512      	bpl.n	801489e <__swsetup_r+0x7a>
 8014878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801487a:	b141      	cbz	r1, 801488e <__swsetup_r+0x6a>
 801487c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014880:	4299      	cmp	r1, r3
 8014882:	d002      	beq.n	801488a <__swsetup_r+0x66>
 8014884:	4630      	mov	r0, r6
 8014886:	f000 f981 	bl	8014b8c <_free_r>
 801488a:	2300      	movs	r3, #0
 801488c:	6363      	str	r3, [r4, #52]	; 0x34
 801488e:	89a3      	ldrh	r3, [r4, #12]
 8014890:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014894:	81a3      	strh	r3, [r4, #12]
 8014896:	2300      	movs	r3, #0
 8014898:	6063      	str	r3, [r4, #4]
 801489a:	6923      	ldr	r3, [r4, #16]
 801489c:	6023      	str	r3, [r4, #0]
 801489e:	89a3      	ldrh	r3, [r4, #12]
 80148a0:	f043 0308 	orr.w	r3, r3, #8
 80148a4:	81a3      	strh	r3, [r4, #12]
 80148a6:	6923      	ldr	r3, [r4, #16]
 80148a8:	b94b      	cbnz	r3, 80148be <__swsetup_r+0x9a>
 80148aa:	89a3      	ldrh	r3, [r4, #12]
 80148ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80148b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80148b4:	d003      	beq.n	80148be <__swsetup_r+0x9a>
 80148b6:	4621      	mov	r1, r4
 80148b8:	4630      	mov	r0, r6
 80148ba:	f000 f917 	bl	8014aec <__smakebuf_r>
 80148be:	89a2      	ldrh	r2, [r4, #12]
 80148c0:	f012 0301 	ands.w	r3, r2, #1
 80148c4:	d00c      	beq.n	80148e0 <__swsetup_r+0xbc>
 80148c6:	2300      	movs	r3, #0
 80148c8:	60a3      	str	r3, [r4, #8]
 80148ca:	6963      	ldr	r3, [r4, #20]
 80148cc:	425b      	negs	r3, r3
 80148ce:	61a3      	str	r3, [r4, #24]
 80148d0:	6923      	ldr	r3, [r4, #16]
 80148d2:	b953      	cbnz	r3, 80148ea <__swsetup_r+0xc6>
 80148d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80148dc:	d1ba      	bne.n	8014854 <__swsetup_r+0x30>
 80148de:	bd70      	pop	{r4, r5, r6, pc}
 80148e0:	0792      	lsls	r2, r2, #30
 80148e2:	bf58      	it	pl
 80148e4:	6963      	ldrpl	r3, [r4, #20]
 80148e6:	60a3      	str	r3, [r4, #8]
 80148e8:	e7f2      	b.n	80148d0 <__swsetup_r+0xac>
 80148ea:	2000      	movs	r0, #0
 80148ec:	e7f7      	b.n	80148de <__swsetup_r+0xba>
 80148ee:	bf00      	nop
 80148f0:	2000001c 	.word	0x2000001c
 80148f4:	0801740c 	.word	0x0801740c
 80148f8:	0801742c 	.word	0x0801742c
 80148fc:	080173ec 	.word	0x080173ec

08014900 <_close_r>:
 8014900:	b538      	push	{r3, r4, r5, lr}
 8014902:	2300      	movs	r3, #0
 8014904:	4c05      	ldr	r4, [pc, #20]	; (801491c <_close_r+0x1c>)
 8014906:	4605      	mov	r5, r0
 8014908:	4608      	mov	r0, r1
 801490a:	6023      	str	r3, [r4, #0]
 801490c:	f7ec f8d5 	bl	8000aba <_close>
 8014910:	1c43      	adds	r3, r0, #1
 8014912:	d102      	bne.n	801491a <_close_r+0x1a>
 8014914:	6823      	ldr	r3, [r4, #0]
 8014916:	b103      	cbz	r3, 801491a <_close_r+0x1a>
 8014918:	602b      	str	r3, [r5, #0]
 801491a:	bd38      	pop	{r3, r4, r5, pc}
 801491c:	2000ad28 	.word	0x2000ad28

08014920 <__sflush_r>:
 8014920:	898a      	ldrh	r2, [r1, #12]
 8014922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014926:	4605      	mov	r5, r0
 8014928:	0710      	lsls	r0, r2, #28
 801492a:	460c      	mov	r4, r1
 801492c:	d458      	bmi.n	80149e0 <__sflush_r+0xc0>
 801492e:	684b      	ldr	r3, [r1, #4]
 8014930:	2b00      	cmp	r3, #0
 8014932:	dc05      	bgt.n	8014940 <__sflush_r+0x20>
 8014934:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014936:	2b00      	cmp	r3, #0
 8014938:	dc02      	bgt.n	8014940 <__sflush_r+0x20>
 801493a:	2000      	movs	r0, #0
 801493c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014942:	2e00      	cmp	r6, #0
 8014944:	d0f9      	beq.n	801493a <__sflush_r+0x1a>
 8014946:	2300      	movs	r3, #0
 8014948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801494c:	682f      	ldr	r7, [r5, #0]
 801494e:	6a21      	ldr	r1, [r4, #32]
 8014950:	602b      	str	r3, [r5, #0]
 8014952:	d032      	beq.n	80149ba <__sflush_r+0x9a>
 8014954:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014956:	89a3      	ldrh	r3, [r4, #12]
 8014958:	075a      	lsls	r2, r3, #29
 801495a:	d505      	bpl.n	8014968 <__sflush_r+0x48>
 801495c:	6863      	ldr	r3, [r4, #4]
 801495e:	1ac0      	subs	r0, r0, r3
 8014960:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014962:	b10b      	cbz	r3, 8014968 <__sflush_r+0x48>
 8014964:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014966:	1ac0      	subs	r0, r0, r3
 8014968:	2300      	movs	r3, #0
 801496a:	4602      	mov	r2, r0
 801496c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801496e:	6a21      	ldr	r1, [r4, #32]
 8014970:	4628      	mov	r0, r5
 8014972:	47b0      	blx	r6
 8014974:	1c43      	adds	r3, r0, #1
 8014976:	89a3      	ldrh	r3, [r4, #12]
 8014978:	d106      	bne.n	8014988 <__sflush_r+0x68>
 801497a:	6829      	ldr	r1, [r5, #0]
 801497c:	291d      	cmp	r1, #29
 801497e:	d848      	bhi.n	8014a12 <__sflush_r+0xf2>
 8014980:	4a29      	ldr	r2, [pc, #164]	; (8014a28 <__sflush_r+0x108>)
 8014982:	40ca      	lsrs	r2, r1
 8014984:	07d6      	lsls	r6, r2, #31
 8014986:	d544      	bpl.n	8014a12 <__sflush_r+0xf2>
 8014988:	2200      	movs	r2, #0
 801498a:	6062      	str	r2, [r4, #4]
 801498c:	6922      	ldr	r2, [r4, #16]
 801498e:	04d9      	lsls	r1, r3, #19
 8014990:	6022      	str	r2, [r4, #0]
 8014992:	d504      	bpl.n	801499e <__sflush_r+0x7e>
 8014994:	1c42      	adds	r2, r0, #1
 8014996:	d101      	bne.n	801499c <__sflush_r+0x7c>
 8014998:	682b      	ldr	r3, [r5, #0]
 801499a:	b903      	cbnz	r3, 801499e <__sflush_r+0x7e>
 801499c:	6560      	str	r0, [r4, #84]	; 0x54
 801499e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80149a0:	602f      	str	r7, [r5, #0]
 80149a2:	2900      	cmp	r1, #0
 80149a4:	d0c9      	beq.n	801493a <__sflush_r+0x1a>
 80149a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80149aa:	4299      	cmp	r1, r3
 80149ac:	d002      	beq.n	80149b4 <__sflush_r+0x94>
 80149ae:	4628      	mov	r0, r5
 80149b0:	f000 f8ec 	bl	8014b8c <_free_r>
 80149b4:	2000      	movs	r0, #0
 80149b6:	6360      	str	r0, [r4, #52]	; 0x34
 80149b8:	e7c0      	b.n	801493c <__sflush_r+0x1c>
 80149ba:	2301      	movs	r3, #1
 80149bc:	4628      	mov	r0, r5
 80149be:	47b0      	blx	r6
 80149c0:	1c41      	adds	r1, r0, #1
 80149c2:	d1c8      	bne.n	8014956 <__sflush_r+0x36>
 80149c4:	682b      	ldr	r3, [r5, #0]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d0c5      	beq.n	8014956 <__sflush_r+0x36>
 80149ca:	2b1d      	cmp	r3, #29
 80149cc:	d001      	beq.n	80149d2 <__sflush_r+0xb2>
 80149ce:	2b16      	cmp	r3, #22
 80149d0:	d101      	bne.n	80149d6 <__sflush_r+0xb6>
 80149d2:	602f      	str	r7, [r5, #0]
 80149d4:	e7b1      	b.n	801493a <__sflush_r+0x1a>
 80149d6:	89a3      	ldrh	r3, [r4, #12]
 80149d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149dc:	81a3      	strh	r3, [r4, #12]
 80149de:	e7ad      	b.n	801493c <__sflush_r+0x1c>
 80149e0:	690f      	ldr	r7, [r1, #16]
 80149e2:	2f00      	cmp	r7, #0
 80149e4:	d0a9      	beq.n	801493a <__sflush_r+0x1a>
 80149e6:	0793      	lsls	r3, r2, #30
 80149e8:	bf18      	it	ne
 80149ea:	2300      	movne	r3, #0
 80149ec:	680e      	ldr	r6, [r1, #0]
 80149ee:	bf08      	it	eq
 80149f0:	694b      	ldreq	r3, [r1, #20]
 80149f2:	eba6 0807 	sub.w	r8, r6, r7
 80149f6:	600f      	str	r7, [r1, #0]
 80149f8:	608b      	str	r3, [r1, #8]
 80149fa:	f1b8 0f00 	cmp.w	r8, #0
 80149fe:	dd9c      	ble.n	801493a <__sflush_r+0x1a>
 8014a00:	4643      	mov	r3, r8
 8014a02:	463a      	mov	r2, r7
 8014a04:	6a21      	ldr	r1, [r4, #32]
 8014a06:	4628      	mov	r0, r5
 8014a08:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014a0a:	47b0      	blx	r6
 8014a0c:	2800      	cmp	r0, #0
 8014a0e:	dc06      	bgt.n	8014a1e <__sflush_r+0xfe>
 8014a10:	89a3      	ldrh	r3, [r4, #12]
 8014a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a16:	81a3      	strh	r3, [r4, #12]
 8014a18:	f04f 30ff 	mov.w	r0, #4294967295
 8014a1c:	e78e      	b.n	801493c <__sflush_r+0x1c>
 8014a1e:	4407      	add	r7, r0
 8014a20:	eba8 0800 	sub.w	r8, r8, r0
 8014a24:	e7e9      	b.n	80149fa <__sflush_r+0xda>
 8014a26:	bf00      	nop
 8014a28:	20400001 	.word	0x20400001

08014a2c <_fflush_r>:
 8014a2c:	b538      	push	{r3, r4, r5, lr}
 8014a2e:	690b      	ldr	r3, [r1, #16]
 8014a30:	4605      	mov	r5, r0
 8014a32:	460c      	mov	r4, r1
 8014a34:	b1db      	cbz	r3, 8014a6e <_fflush_r+0x42>
 8014a36:	b118      	cbz	r0, 8014a40 <_fflush_r+0x14>
 8014a38:	6983      	ldr	r3, [r0, #24]
 8014a3a:	b90b      	cbnz	r3, 8014a40 <_fflush_r+0x14>
 8014a3c:	f7ff fa90 	bl	8013f60 <__sinit>
 8014a40:	4b0c      	ldr	r3, [pc, #48]	; (8014a74 <_fflush_r+0x48>)
 8014a42:	429c      	cmp	r4, r3
 8014a44:	d109      	bne.n	8014a5a <_fflush_r+0x2e>
 8014a46:	686c      	ldr	r4, [r5, #4]
 8014a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a4c:	b17b      	cbz	r3, 8014a6e <_fflush_r+0x42>
 8014a4e:	4621      	mov	r1, r4
 8014a50:	4628      	mov	r0, r5
 8014a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a56:	f7ff bf63 	b.w	8014920 <__sflush_r>
 8014a5a:	4b07      	ldr	r3, [pc, #28]	; (8014a78 <_fflush_r+0x4c>)
 8014a5c:	429c      	cmp	r4, r3
 8014a5e:	d101      	bne.n	8014a64 <_fflush_r+0x38>
 8014a60:	68ac      	ldr	r4, [r5, #8]
 8014a62:	e7f1      	b.n	8014a48 <_fflush_r+0x1c>
 8014a64:	4b05      	ldr	r3, [pc, #20]	; (8014a7c <_fflush_r+0x50>)
 8014a66:	429c      	cmp	r4, r3
 8014a68:	bf08      	it	eq
 8014a6a:	68ec      	ldreq	r4, [r5, #12]
 8014a6c:	e7ec      	b.n	8014a48 <_fflush_r+0x1c>
 8014a6e:	2000      	movs	r0, #0
 8014a70:	bd38      	pop	{r3, r4, r5, pc}
 8014a72:	bf00      	nop
 8014a74:	0801740c 	.word	0x0801740c
 8014a78:	0801742c 	.word	0x0801742c
 8014a7c:	080173ec 	.word	0x080173ec

08014a80 <_lseek_r>:
 8014a80:	b538      	push	{r3, r4, r5, lr}
 8014a82:	4605      	mov	r5, r0
 8014a84:	4608      	mov	r0, r1
 8014a86:	4611      	mov	r1, r2
 8014a88:	2200      	movs	r2, #0
 8014a8a:	4c05      	ldr	r4, [pc, #20]	; (8014aa0 <_lseek_r+0x20>)
 8014a8c:	6022      	str	r2, [r4, #0]
 8014a8e:	461a      	mov	r2, r3
 8014a90:	f7ec f837 	bl	8000b02 <_lseek>
 8014a94:	1c43      	adds	r3, r0, #1
 8014a96:	d102      	bne.n	8014a9e <_lseek_r+0x1e>
 8014a98:	6823      	ldr	r3, [r4, #0]
 8014a9a:	b103      	cbz	r3, 8014a9e <_lseek_r+0x1e>
 8014a9c:	602b      	str	r3, [r5, #0]
 8014a9e:	bd38      	pop	{r3, r4, r5, pc}
 8014aa0:	2000ad28 	.word	0x2000ad28

08014aa4 <__swhatbuf_r>:
 8014aa4:	b570      	push	{r4, r5, r6, lr}
 8014aa6:	460e      	mov	r6, r1
 8014aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014aac:	b096      	sub	sp, #88	; 0x58
 8014aae:	2900      	cmp	r1, #0
 8014ab0:	4614      	mov	r4, r2
 8014ab2:	461d      	mov	r5, r3
 8014ab4:	da07      	bge.n	8014ac6 <__swhatbuf_r+0x22>
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	602b      	str	r3, [r5, #0]
 8014aba:	89b3      	ldrh	r3, [r6, #12]
 8014abc:	061a      	lsls	r2, r3, #24
 8014abe:	d410      	bmi.n	8014ae2 <__swhatbuf_r+0x3e>
 8014ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014ac4:	e00e      	b.n	8014ae4 <__swhatbuf_r+0x40>
 8014ac6:	466a      	mov	r2, sp
 8014ac8:	f000 f8be 	bl	8014c48 <_fstat_r>
 8014acc:	2800      	cmp	r0, #0
 8014ace:	dbf2      	blt.n	8014ab6 <__swhatbuf_r+0x12>
 8014ad0:	9a01      	ldr	r2, [sp, #4]
 8014ad2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014ad6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014ada:	425a      	negs	r2, r3
 8014adc:	415a      	adcs	r2, r3
 8014ade:	602a      	str	r2, [r5, #0]
 8014ae0:	e7ee      	b.n	8014ac0 <__swhatbuf_r+0x1c>
 8014ae2:	2340      	movs	r3, #64	; 0x40
 8014ae4:	2000      	movs	r0, #0
 8014ae6:	6023      	str	r3, [r4, #0]
 8014ae8:	b016      	add	sp, #88	; 0x58
 8014aea:	bd70      	pop	{r4, r5, r6, pc}

08014aec <__smakebuf_r>:
 8014aec:	898b      	ldrh	r3, [r1, #12]
 8014aee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014af0:	079d      	lsls	r5, r3, #30
 8014af2:	4606      	mov	r6, r0
 8014af4:	460c      	mov	r4, r1
 8014af6:	d507      	bpl.n	8014b08 <__smakebuf_r+0x1c>
 8014af8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014afc:	6023      	str	r3, [r4, #0]
 8014afe:	6123      	str	r3, [r4, #16]
 8014b00:	2301      	movs	r3, #1
 8014b02:	6163      	str	r3, [r4, #20]
 8014b04:	b002      	add	sp, #8
 8014b06:	bd70      	pop	{r4, r5, r6, pc}
 8014b08:	ab01      	add	r3, sp, #4
 8014b0a:	466a      	mov	r2, sp
 8014b0c:	f7ff ffca 	bl	8014aa4 <__swhatbuf_r>
 8014b10:	9900      	ldr	r1, [sp, #0]
 8014b12:	4605      	mov	r5, r0
 8014b14:	4630      	mov	r0, r6
 8014b16:	f7ff faad 	bl	8014074 <_malloc_r>
 8014b1a:	b948      	cbnz	r0, 8014b30 <__smakebuf_r+0x44>
 8014b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b20:	059a      	lsls	r2, r3, #22
 8014b22:	d4ef      	bmi.n	8014b04 <__smakebuf_r+0x18>
 8014b24:	f023 0303 	bic.w	r3, r3, #3
 8014b28:	f043 0302 	orr.w	r3, r3, #2
 8014b2c:	81a3      	strh	r3, [r4, #12]
 8014b2e:	e7e3      	b.n	8014af8 <__smakebuf_r+0xc>
 8014b30:	4b0d      	ldr	r3, [pc, #52]	; (8014b68 <__smakebuf_r+0x7c>)
 8014b32:	62b3      	str	r3, [r6, #40]	; 0x28
 8014b34:	89a3      	ldrh	r3, [r4, #12]
 8014b36:	6020      	str	r0, [r4, #0]
 8014b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b3c:	81a3      	strh	r3, [r4, #12]
 8014b3e:	9b00      	ldr	r3, [sp, #0]
 8014b40:	6120      	str	r0, [r4, #16]
 8014b42:	6163      	str	r3, [r4, #20]
 8014b44:	9b01      	ldr	r3, [sp, #4]
 8014b46:	b15b      	cbz	r3, 8014b60 <__smakebuf_r+0x74>
 8014b48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b4c:	4630      	mov	r0, r6
 8014b4e:	f000 f88d 	bl	8014c6c <_isatty_r>
 8014b52:	b128      	cbz	r0, 8014b60 <__smakebuf_r+0x74>
 8014b54:	89a3      	ldrh	r3, [r4, #12]
 8014b56:	f023 0303 	bic.w	r3, r3, #3
 8014b5a:	f043 0301 	orr.w	r3, r3, #1
 8014b5e:	81a3      	strh	r3, [r4, #12]
 8014b60:	89a3      	ldrh	r3, [r4, #12]
 8014b62:	431d      	orrs	r5, r3
 8014b64:	81a5      	strh	r5, [r4, #12]
 8014b66:	e7cd      	b.n	8014b04 <__smakebuf_r+0x18>
 8014b68:	08013f29 	.word	0x08013f29

08014b6c <memchr>:
 8014b6c:	b510      	push	{r4, lr}
 8014b6e:	b2c9      	uxtb	r1, r1
 8014b70:	4402      	add	r2, r0
 8014b72:	4290      	cmp	r0, r2
 8014b74:	4603      	mov	r3, r0
 8014b76:	d101      	bne.n	8014b7c <memchr+0x10>
 8014b78:	2300      	movs	r3, #0
 8014b7a:	e003      	b.n	8014b84 <memchr+0x18>
 8014b7c:	781c      	ldrb	r4, [r3, #0]
 8014b7e:	3001      	adds	r0, #1
 8014b80:	428c      	cmp	r4, r1
 8014b82:	d1f6      	bne.n	8014b72 <memchr+0x6>
 8014b84:	4618      	mov	r0, r3
 8014b86:	bd10      	pop	{r4, pc}

08014b88 <__malloc_lock>:
 8014b88:	4770      	bx	lr

08014b8a <__malloc_unlock>:
 8014b8a:	4770      	bx	lr

08014b8c <_free_r>:
 8014b8c:	b538      	push	{r3, r4, r5, lr}
 8014b8e:	4605      	mov	r5, r0
 8014b90:	2900      	cmp	r1, #0
 8014b92:	d043      	beq.n	8014c1c <_free_r+0x90>
 8014b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b98:	1f0c      	subs	r4, r1, #4
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	bfb8      	it	lt
 8014b9e:	18e4      	addlt	r4, r4, r3
 8014ba0:	f7ff fff2 	bl	8014b88 <__malloc_lock>
 8014ba4:	4a1e      	ldr	r2, [pc, #120]	; (8014c20 <_free_r+0x94>)
 8014ba6:	6813      	ldr	r3, [r2, #0]
 8014ba8:	4610      	mov	r0, r2
 8014baa:	b933      	cbnz	r3, 8014bba <_free_r+0x2e>
 8014bac:	6063      	str	r3, [r4, #4]
 8014bae:	6014      	str	r4, [r2, #0]
 8014bb0:	4628      	mov	r0, r5
 8014bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014bb6:	f7ff bfe8 	b.w	8014b8a <__malloc_unlock>
 8014bba:	42a3      	cmp	r3, r4
 8014bbc:	d90b      	bls.n	8014bd6 <_free_r+0x4a>
 8014bbe:	6821      	ldr	r1, [r4, #0]
 8014bc0:	1862      	adds	r2, r4, r1
 8014bc2:	4293      	cmp	r3, r2
 8014bc4:	bf01      	itttt	eq
 8014bc6:	681a      	ldreq	r2, [r3, #0]
 8014bc8:	685b      	ldreq	r3, [r3, #4]
 8014bca:	1852      	addeq	r2, r2, r1
 8014bcc:	6022      	streq	r2, [r4, #0]
 8014bce:	6063      	str	r3, [r4, #4]
 8014bd0:	6004      	str	r4, [r0, #0]
 8014bd2:	e7ed      	b.n	8014bb0 <_free_r+0x24>
 8014bd4:	4613      	mov	r3, r2
 8014bd6:	685a      	ldr	r2, [r3, #4]
 8014bd8:	b10a      	cbz	r2, 8014bde <_free_r+0x52>
 8014bda:	42a2      	cmp	r2, r4
 8014bdc:	d9fa      	bls.n	8014bd4 <_free_r+0x48>
 8014bde:	6819      	ldr	r1, [r3, #0]
 8014be0:	1858      	adds	r0, r3, r1
 8014be2:	42a0      	cmp	r0, r4
 8014be4:	d10b      	bne.n	8014bfe <_free_r+0x72>
 8014be6:	6820      	ldr	r0, [r4, #0]
 8014be8:	4401      	add	r1, r0
 8014bea:	1858      	adds	r0, r3, r1
 8014bec:	4282      	cmp	r2, r0
 8014bee:	6019      	str	r1, [r3, #0]
 8014bf0:	d1de      	bne.n	8014bb0 <_free_r+0x24>
 8014bf2:	6810      	ldr	r0, [r2, #0]
 8014bf4:	6852      	ldr	r2, [r2, #4]
 8014bf6:	4401      	add	r1, r0
 8014bf8:	6019      	str	r1, [r3, #0]
 8014bfa:	605a      	str	r2, [r3, #4]
 8014bfc:	e7d8      	b.n	8014bb0 <_free_r+0x24>
 8014bfe:	d902      	bls.n	8014c06 <_free_r+0x7a>
 8014c00:	230c      	movs	r3, #12
 8014c02:	602b      	str	r3, [r5, #0]
 8014c04:	e7d4      	b.n	8014bb0 <_free_r+0x24>
 8014c06:	6820      	ldr	r0, [r4, #0]
 8014c08:	1821      	adds	r1, r4, r0
 8014c0a:	428a      	cmp	r2, r1
 8014c0c:	bf01      	itttt	eq
 8014c0e:	6811      	ldreq	r1, [r2, #0]
 8014c10:	6852      	ldreq	r2, [r2, #4]
 8014c12:	1809      	addeq	r1, r1, r0
 8014c14:	6021      	streq	r1, [r4, #0]
 8014c16:	6062      	str	r2, [r4, #4]
 8014c18:	605c      	str	r4, [r3, #4]
 8014c1a:	e7c9      	b.n	8014bb0 <_free_r+0x24>
 8014c1c:	bd38      	pop	{r3, r4, r5, pc}
 8014c1e:	bf00      	nop
 8014c20:	20002a98 	.word	0x20002a98

08014c24 <_read_r>:
 8014c24:	b538      	push	{r3, r4, r5, lr}
 8014c26:	4605      	mov	r5, r0
 8014c28:	4608      	mov	r0, r1
 8014c2a:	4611      	mov	r1, r2
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	4c05      	ldr	r4, [pc, #20]	; (8014c44 <_read_r+0x20>)
 8014c30:	6022      	str	r2, [r4, #0]
 8014c32:	461a      	mov	r2, r3
 8014c34:	f7eb ff08 	bl	8000a48 <_read>
 8014c38:	1c43      	adds	r3, r0, #1
 8014c3a:	d102      	bne.n	8014c42 <_read_r+0x1e>
 8014c3c:	6823      	ldr	r3, [r4, #0]
 8014c3e:	b103      	cbz	r3, 8014c42 <_read_r+0x1e>
 8014c40:	602b      	str	r3, [r5, #0]
 8014c42:	bd38      	pop	{r3, r4, r5, pc}
 8014c44:	2000ad28 	.word	0x2000ad28

08014c48 <_fstat_r>:
 8014c48:	b538      	push	{r3, r4, r5, lr}
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	4c06      	ldr	r4, [pc, #24]	; (8014c68 <_fstat_r+0x20>)
 8014c4e:	4605      	mov	r5, r0
 8014c50:	4608      	mov	r0, r1
 8014c52:	4611      	mov	r1, r2
 8014c54:	6023      	str	r3, [r4, #0]
 8014c56:	f7eb ff3b 	bl	8000ad0 <_fstat>
 8014c5a:	1c43      	adds	r3, r0, #1
 8014c5c:	d102      	bne.n	8014c64 <_fstat_r+0x1c>
 8014c5e:	6823      	ldr	r3, [r4, #0]
 8014c60:	b103      	cbz	r3, 8014c64 <_fstat_r+0x1c>
 8014c62:	602b      	str	r3, [r5, #0]
 8014c64:	bd38      	pop	{r3, r4, r5, pc}
 8014c66:	bf00      	nop
 8014c68:	2000ad28 	.word	0x2000ad28

08014c6c <_isatty_r>:
 8014c6c:	b538      	push	{r3, r4, r5, lr}
 8014c6e:	2300      	movs	r3, #0
 8014c70:	4c05      	ldr	r4, [pc, #20]	; (8014c88 <_isatty_r+0x1c>)
 8014c72:	4605      	mov	r5, r0
 8014c74:	4608      	mov	r0, r1
 8014c76:	6023      	str	r3, [r4, #0]
 8014c78:	f7eb ff39 	bl	8000aee <_isatty>
 8014c7c:	1c43      	adds	r3, r0, #1
 8014c7e:	d102      	bne.n	8014c86 <_isatty_r+0x1a>
 8014c80:	6823      	ldr	r3, [r4, #0]
 8014c82:	b103      	cbz	r3, 8014c86 <_isatty_r+0x1a>
 8014c84:	602b      	str	r3, [r5, #0]
 8014c86:	bd38      	pop	{r3, r4, r5, pc}
 8014c88:	2000ad28 	.word	0x2000ad28

08014c8c <_init>:
 8014c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c8e:	bf00      	nop
 8014c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c92:	bc08      	pop	{r3}
 8014c94:	469e      	mov	lr, r3
 8014c96:	4770      	bx	lr

08014c98 <_fini>:
 8014c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c9a:	bf00      	nop
 8014c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c9e:	bc08      	pop	{r3}
 8014ca0:	469e      	mov	lr, r3
 8014ca2:	4770      	bx	lr
