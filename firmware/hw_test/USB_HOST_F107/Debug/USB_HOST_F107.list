
USB_HOST_F107.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e14  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08006ff8  08006ff8  00016ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800703c  0800703c  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800703c  0800703c  0001703c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007044  08007044  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007044  08007044  00017044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007048  08007048  00017048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800704c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000738  20000098  080070e4  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d0  080070e4  000207d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d93  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000305c  00000000  00000000  00033e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d30  00000000  00000000  00036eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  00037be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000212ae  00000000  00000000  000387a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000db87  00000000  00000000  00059a56  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b6e7f  00000000  00000000  000675dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e45c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003644  00000000  00000000  0011e4d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000098 	.word	0x20000098
 8000200:	00000000 	.word	0x00000000
 8000204:	08006fe0 	.word	0x08006fe0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000009c 	.word	0x2000009c
 8000220:	08006fe0 	.word	0x08006fe0

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b974 	b.w	8000524 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	4604      	mov	r4, r0
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d14b      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000262:	428a      	cmp	r2, r1
 8000264:	4615      	mov	r5, r2
 8000266:	d967      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0720 	rsb	r7, r2, #32
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	fa20 f707 	lsr.w	r7, r0, r7
 800027a:	4095      	lsls	r5, r2
 800027c:	ea47 0c03 	orr.w	ip, r7, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000286:	fbbc f7fe 	udiv	r7, ip, lr
 800028a:	fa1f f885 	uxth.w	r8, r5
 800028e:	fb0e c317 	mls	r3, lr, r7, ip
 8000292:	fb07 f908 	mul.w	r9, r7, r8
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029c:	4599      	cmp	r9, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f107 31ff 	add.w	r1, r7, #4294967295
 80002a6:	f080 811c 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002aa:	4599      	cmp	r9, r3
 80002ac:	f240 8119 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	3f02      	subs	r7, #2
 80002b2:	442b      	add	r3, r5
 80002b4:	eba3 0309 	sub.w	r3, r3, r9
 80002b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c0:	fb00 f108 	mul.w	r1, r0, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	42a1      	cmp	r1, r4
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 8107 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002d8:	42a1      	cmp	r1, r4
 80002da:	f240 8104 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002de:	3802      	subs	r0, #2
 80002e0:	442c      	add	r4, r5
 80002e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e6:	2700      	movs	r7, #0
 80002e8:	1a64      	subs	r4, r4, r1
 80002ea:	b11e      	cbz	r6, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	2300      	movs	r3, #0
 80002ee:	40d4      	lsrs	r4, r2
 80002f0:	e9c6 4300 	strd	r4, r3, [r6]
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xbe>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ec 	beq.w	80004dc <__udivmoddi4+0x288>
 8000304:	2700      	movs	r7, #0
 8000306:	e9c6 0100 	strd	r0, r1, [r6]
 800030a:	4638      	mov	r0, r7
 800030c:	4639      	mov	r1, r7
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f783 	clz	r7, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d148      	bne.n	80003ac <__udivmoddi4+0x158>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd0>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fb 	bhi.w	800051a <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469c      	mov	ip, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa0>
 8000332:	e9c6 4c00 	strd	r4, ip, [r6]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xe8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 808f 	bne.w	8000464 <__udivmoddi4+0x210>
 8000346:	2701      	movs	r7, #1
 8000348:	1b49      	subs	r1, r1, r5
 800034a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800034e:	fa1f f985 	uxth.w	r9, r5
 8000352:	fbb1 fef8 	udiv	lr, r1, r8
 8000356:	fb08 111e 	mls	r1, r8, lr, r1
 800035a:	fb09 f00e 	mul.w	r0, r9, lr
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x126>
 800036a:	18eb      	adds	r3, r5, r3
 800036c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4298      	cmp	r0, r3
 8000374:	f200 80cd 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000378:	468e      	mov	lr, r1
 800037a:	1a1b      	subs	r3, r3, r0
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	fb09 f900 	mul.w	r9, r9, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038e:	45a1      	cmp	r9, r4
 8000390:	d907      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000392:	192c      	adds	r4, r5, r4
 8000394:	f100 33ff 	add.w	r3, r0, #4294967295
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f200 80b6 	bhi.w	800050c <__udivmoddi4+0x2b8>
 80003a0:	4618      	mov	r0, r3
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003aa:	e79e      	b.n	80002ea <__udivmoddi4+0x96>
 80003ac:	f1c7 0520 	rsb	r5, r7, #32
 80003b0:	40bb      	lsls	r3, r7
 80003b2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa21 f405 	lsr.w	r4, r1, r5
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003c6:	fa1f f88c 	uxth.w	r8, ip
 80003ca:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ce:	fa20 f305 	lsr.w	r3, r0, r5
 80003d2:	40b9      	lsls	r1, r7
 80003d4:	fb09 fa08 	mul.w	sl, r9, r8
 80003d8:	4319      	orrs	r1, r3
 80003da:	0c0b      	lsrs	r3, r1, #16
 80003dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	fa02 f207 	lsl.w	r2, r2, r7
 80003e6:	fa00 f307 	lsl.w	r3, r0, r7
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	4464      	add	r4, ip
 8000404:	eba4 040a 	sub.w	r4, r4, sl
 8000408:	fbb4 f0fe 	udiv	r0, r4, lr
 800040c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000410:	fb00 fa08 	mul.w	sl, r0, r8
 8000414:	b289      	uxth	r1, r1
 8000416:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295
 8000426:	d26b      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000428:	45a2      	cmp	sl, r4
 800042a:	d969      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042c:	3802      	subs	r0, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000434:	fba0 8902 	umull	r8, r9, r0, r2
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	454c      	cmp	r4, r9
 800043e:	4641      	mov	r1, r8
 8000440:	46ce      	mov	lr, r9
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d069      	beq.n	800051e <__udivmoddi4+0x2ca>
 800044a:	1a5a      	subs	r2, r3, r1
 800044c:	eb64 040e 	sbc.w	r4, r4, lr
 8000450:	fa04 f505 	lsl.w	r5, r4, r5
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	40fc      	lsrs	r4, r7
 800045a:	431d      	orrs	r5, r3
 800045c:	e9c6 5400 	strd	r5, r4, [r6]
 8000460:	2700      	movs	r7, #0
 8000462:	e747      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000464:	4095      	lsls	r5, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa21 f003 	lsr.w	r0, r1, r3
 800046e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000472:	fbb0 f7f8 	udiv	r7, r0, r8
 8000476:	fa1f f985 	uxth.w	r9, r5
 800047a:	fb08 0017 	mls	r0, r8, r7, r0
 800047e:	fa24 f303 	lsr.w	r3, r4, r3
 8000482:	4091      	lsls	r1, r2
 8000484:	fb07 fc09 	mul.w	ip, r7, r9
 8000488:	430b      	orrs	r3, r1
 800048a:	0c19      	lsrs	r1, r3, #16
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	458c      	cmp	ip, r1
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x254>
 8000498:	1869      	adds	r1, r5, r1
 800049a:	f107 30ff 	add.w	r0, r7, #4294967295
 800049e:	d231      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a0:	458c      	cmp	ip, r1
 80004a2:	d92f      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	3f02      	subs	r7, #2
 80004a6:	4429      	add	r1, r5
 80004a8:	eba1 010c 	sub.w	r1, r1, ip
 80004ac:	fbb1 f0f8 	udiv	r0, r1, r8
 80004b0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004b4:	fb00 fe09 	mul.w	lr, r0, r9
 80004b8:	b299      	uxth	r1, r3
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	458e      	cmp	lr, r1
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x27e>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	d218      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d916      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	eba1 010e 	sub.w	r1, r1, lr
 80004d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4637      	mov	r7, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004e2:	460f      	mov	r7, r1
 80004e4:	e6e6      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6fb      	b.n	80002e2 <__udivmoddi4+0x8e>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb8 0102 	subs.w	r1, r8, r2
 80004f2:	eb69 020c 	sbc.w	r2, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	4696      	mov	lr, r2
 80004fa:	e7a4      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e7e8      	b.n	80004d2 <__udivmoddi4+0x27e>
 8000500:	4608      	mov	r0, r1
 8000502:	e795      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000504:	4607      	mov	r7, r0
 8000506:	e7cf      	b.n	80004a8 <__udivmoddi4+0x254>
 8000508:	4681      	mov	r9, r0
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3802      	subs	r0, #2
 800050e:	442c      	add	r4, r5
 8000510:	e747      	b.n	80003a2 <__udivmoddi4+0x14e>
 8000512:	f1ae 0e02 	sub.w	lr, lr, #2
 8000516:	442b      	add	r3, r5
 8000518:	e72f      	b.n	800037a <__udivmoddi4+0x126>
 800051a:	4638      	mov	r0, r7
 800051c:	e707      	b.n	800032e <__udivmoddi4+0xda>
 800051e:	4637      	mov	r7, r6
 8000520:	e6e8      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f000 fa16 	bl	800095c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f80a 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000534:	f000 f89c 	bl	8000670 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8000538:	f006 f97c 	bl	8006834 <MX_USB_HOST_Init>
  MX_USART1_UART_Init();
 800053c:	f000 f86e 	bl	800061c <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000540:	f006 f99e 	bl	8006880 <MX_USB_HOST_Process>
 8000544:	e7fc      	b.n	8000540 <main+0x18>
	...

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b09c      	sub	sp, #112	; 0x70
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000552:	2238      	movs	r2, #56	; 0x38
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f006 fc82 	bl	8006e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2220      	movs	r2, #32
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f006 fc74 	bl	8006e60 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000582:	2304      	movs	r3, #4
 8000584:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000586:	2301      	movs	r3, #1
 8000588:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 800058a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000590:	2302      	movs	r3, #2
 8000592:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000598:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800059a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800059e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80005a0:	2302      	movs	r3, #2
 80005a2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80005a4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005a8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV2;
 80005aa:	2310      	movs	r3, #16
 80005ac:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fa86 	bl	8002ac4 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80005be:	f000 f8a1 	bl	8000704 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2302      	movs	r3, #2
 80005c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005dc:	2101      	movs	r1, #1
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fd86 	bl	80030f0 <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005ea:	f000 f88b 	bl	8000704 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005ee:	2310      	movs	r3, #16
 80005f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV2;
 80005f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f6:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	4618      	mov	r0, r3
 80005fc:	f002 ff6e 	bl	80034dc <HAL_RCCEx_PeriphCLKConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000606:	f000 f87d 	bl	8000704 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800060a:	4b03      	ldr	r3, [pc, #12]	; (8000618 <SystemClock_Config+0xd0>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
}
 8000610:	bf00      	nop
 8000612:	3770      	adds	r7, #112	; 0x70
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	42420070 	.word	0x42420070

0800061c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000622:	4a12      	ldr	r2, [pc, #72]	; (800066c <MX_USART1_UART_Init+0x50>)
 8000624:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800062c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000642:	220c      	movs	r2, #12
 8000644:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000654:	f003 f874 	bl	8003740 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800065e:	f000 f851 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	200000c8 	.word	0x200000c8
 800066c:	40013800 	.word	0x40013800

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b088      	sub	sp, #32
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000684:	4b1d      	ldr	r3, [pc, #116]	; (80006fc <MX_GPIO_Init+0x8c>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a1c      	ldr	r2, [pc, #112]	; (80006fc <MX_GPIO_Init+0x8c>)
 800068a:	f043 0320 	orr.w	r3, r3, #32
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <MX_GPIO_Init+0x8c>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0320 	and.w	r3, r3, #32
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <MX_GPIO_Init+0x8c>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4a16      	ldr	r2, [pc, #88]	; (80006fc <MX_GPIO_Init+0x8c>)
 80006a2:	f043 0308 	orr.w	r3, r3, #8
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_GPIO_Init+0x8c>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f003 0308 	and.w	r3, r3, #8
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_GPIO_Init+0x8c>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a10      	ldr	r2, [pc, #64]	; (80006fc <MX_GPIO_Init+0x8c>)
 80006ba:	f043 0304 	orr.w	r3, r3, #4
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_GPIO_Init+0x8c>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f003 0304 	and.w	r3, r3, #4
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	2101      	movs	r1, #1
 80006d0:	480b      	ldr	r0, [pc, #44]	; (8000700 <MX_GPIO_Init+0x90>)
 80006d2:	f000 fd37 	bl	8001144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d6:	2301      	movs	r3, #1
 80006d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2302      	movs	r3, #2
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4619      	mov	r1, r3
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_GPIO_Init+0x90>)
 80006ee:	f000 fbcf 	bl	8000e90 <HAL_GPIO_Init>

}
 80006f2:	bf00      	nop
 80006f4:	3720      	adds	r7, #32
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010c00 	.word	0x40010c00

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000716:	4b15      	ldr	r3, [pc, #84]	; (800076c <HAL_MspInit+0x5c>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	4a14      	ldr	r2, [pc, #80]	; (800076c <HAL_MspInit+0x5c>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6193      	str	r3, [r2, #24]
 8000722:	4b12      	ldr	r3, [pc, #72]	; (800076c <HAL_MspInit+0x5c>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	; (800076c <HAL_MspInit+0x5c>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	4a0e      	ldr	r2, [pc, #56]	; (800076c <HAL_MspInit+0x5c>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000738:	61d3      	str	r3, [r2, #28]
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_MspInit+0x5c>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000746:	4b0a      	ldr	r3, [pc, #40]	; (8000770 <HAL_MspInit+0x60>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	4a04      	ldr	r2, [pc, #16]	; (8000770 <HAL_MspInit+0x60>)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	40021000 	.word	0x40021000
 8000770:	40010000 	.word	0x40010000

08000774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a20      	ldr	r2, [pc, #128]	; (8000810 <HAL_UART_MspInit+0x9c>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d139      	bne.n	8000808 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <HAL_UART_MspInit+0xa0>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a1e      	ldr	r2, [pc, #120]	; (8000814 <HAL_UART_MspInit+0xa0>)
 800079a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <HAL_UART_MspInit+0xa0>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b19      	ldr	r3, [pc, #100]	; (8000814 <HAL_UART_MspInit+0xa0>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a18      	ldr	r2, [pc, #96]	; (8000814 <HAL_UART_MspInit+0xa0>)
 80007b2:	f043 0304 	orr.w	r3, r3, #4
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b16      	ldr	r3, [pc, #88]	; (8000814 <HAL_UART_MspInit+0xa0>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0304 	and.w	r3, r3, #4
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	4619      	mov	r1, r3
 80007d8:	480f      	ldr	r0, [pc, #60]	; (8000818 <HAL_UART_MspInit+0xa4>)
 80007da:	f000 fb59 	bl	8000e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	4619      	mov	r1, r3
 80007f2:	4809      	ldr	r0, [pc, #36]	; (8000818 <HAL_UART_MspInit+0xa4>)
 80007f4:	f000 fb4c 	bl	8000e90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2100      	movs	r1, #0
 80007fc:	2025      	movs	r0, #37	; 0x25
 80007fe:	f000 fa08 	bl	8000c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000802:	2025      	movs	r0, #37	; 0x25
 8000804:	f000 fa21 	bl	8000c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000808:	bf00      	nop
 800080a:	3720      	adds	r7, #32
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40013800 	.word	0x40013800
 8000814:	40021000 	.word	0x40021000
 8000818:	40010800 	.word	0x40010800

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <HardFault_Handler+0x4>

0800082e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <MemManage_Handler+0x4>

08000834 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <BusFault_Handler+0x4>

0800083a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <UsageFault_Handler+0x4>

08000840 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	bc80      	pop	{r7}
 8000856:	4770      	bx	lr

08000858 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr

08000864 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000868:	f000 f8be 	bl	80009e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000874:	4802      	ldr	r0, [pc, #8]	; (8000880 <USART1_IRQHandler+0x10>)
 8000876:	f003 f843 	bl	8003900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200000c8 	.word	0x200000c8

08000884 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <OTG_FS_IRQHandler+0x10>)
 800088a:	f000 feff 	bl	800168c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000508 	.word	0x20000508

08000898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a0:	4a14      	ldr	r2, [pc, #80]	; (80008f4 <_sbrk+0x5c>)
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <_sbrk+0x60>)
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <_sbrk+0x64>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <_sbrk+0x64>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <_sbrk+0x68>)
 80008b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <_sbrk+0x64>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d207      	bcs.n	80008d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008c8:	f006 fa90 	bl	8006dec <__errno>
 80008cc:	4602      	mov	r2, r0
 80008ce:	230c      	movs	r3, #12
 80008d0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	e009      	b.n	80008ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <_sbrk+0x64>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <_sbrk+0x64>)
 80008e0:	681a      	ldr	r2, [r3, #0]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4413      	add	r3, r2
 80008e6:	4a05      	ldr	r2, [pc, #20]	; (80008fc <_sbrk+0x64>)
 80008e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20010000 	.word	0x20010000
 80008f8:	00000400 	.word	0x00000400
 80008fc:	200000b4 	.word	0x200000b4
 8000900:	200007d0 	.word	0x200007d0

08000904 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr

08000910 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000910:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000912:	e003      	b.n	800091c <LoopCopyDataInit>

08000914 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000916:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000918:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800091a:	3104      	adds	r1, #4

0800091c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800091c:	480a      	ldr	r0, [pc, #40]	; (8000948 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000920:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000922:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000924:	d3f6      	bcc.n	8000914 <CopyDataInit>
  ldr r2, =_sbss
 8000926:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000928:	e002      	b.n	8000930 <LoopFillZerobss>

0800092a <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800092c:	f842 3b04 	str.w	r3, [r2], #4

08000930 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000930:	4b08      	ldr	r3, [pc, #32]	; (8000954 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000932:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000934:	d3f9      	bcc.n	800092a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000936:	f7ff ffe5 	bl	8000904 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093a:	f006 fa5d 	bl	8006df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800093e:	f7ff fdf3 	bl	8000528 <main>
  bx lr
 8000942:	4770      	bx	lr
  ldr r3, =_sidata
 8000944:	0800704c 	.word	0x0800704c
  ldr r0, =_sdata
 8000948:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800094c:	20000098 	.word	0x20000098
  ldr r2, =_sbss
 8000950:	20000098 	.word	0x20000098
  ldr r3, = _ebss
 8000954:	200007d0 	.word	0x200007d0

08000958 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC1_2_IRQHandler>
	...

0800095c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_Init+0x28>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a07      	ldr	r2, [pc, #28]	; (8000984 <HAL_Init+0x28>)
 8000966:	f043 0310 	orr.w	r3, r3, #16
 800096a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800096c:	2003      	movs	r0, #3
 800096e:	f000 f945 	bl	8000bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000972:	2000      	movs	r0, #0
 8000974:	f000 f808 	bl	8000988 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000978:	f7ff feca 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40022000 	.word	0x40022000

08000988 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_InitTick+0x54>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_InitTick+0x58>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	4619      	mov	r1, r3
 800099a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099e:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f95d 	bl	8000c66 <HAL_SYSTICK_Config>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	e00e      	b.n	80009d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	2b0f      	cmp	r3, #15
 80009ba:	d80a      	bhi.n	80009d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009bc:	2200      	movs	r2, #0
 80009be:	6879      	ldr	r1, [r7, #4]
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	f000 f925 	bl	8000c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009c8:	4a06      	ldr	r2, [pc, #24]	; (80009e4 <HAL_InitTick+0x5c>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ce:	2300      	movs	r3, #0
 80009d0:	e000      	b.n	80009d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	20000000 	.word	0x20000000
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20000004 	.word	0x20000004

080009e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <HAL_IncTick+0x1c>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_IncTick+0x20>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	4a03      	ldr	r2, [pc, #12]	; (8000a08 <HAL_IncTick+0x20>)
 80009fa:	6013      	str	r3, [r2, #0]
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	20000008 	.word	0x20000008
 8000a08:	20000108 	.word	0x20000108

08000a0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a10:	4b02      	ldr	r3, [pc, #8]	; (8000a1c <HAL_GetTick+0x10>)
 8000a12:	681b      	ldr	r3, [r3, #0]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	20000108 	.word	0x20000108

08000a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a28:	f7ff fff0 	bl	8000a0c <HAL_GetTick>
 8000a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a38:	d005      	beq.n	8000a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a3a:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <HAL_Delay+0x40>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4413      	add	r3, r2
 8000a44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a46:	bf00      	nop
 8000a48:	f7ff ffe0 	bl	8000a0c <HAL_GetTick>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d8f7      	bhi.n	8000a48 <HAL_Delay+0x28>
  {
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000008 	.word	0x20000008

08000a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f003 0307 	and.w	r3, r3, #7
 8000a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a80:	4013      	ands	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a96:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	60d3      	str	r3, [r2, #12]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	0a1b      	lsrs	r3, r3, #8
 8000ab6:	f003 0307 	and.w	r3, r3, #7
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	db0b      	blt.n	8000af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	f003 021f 	and.w	r2, r3, #31
 8000ae0:	4906      	ldr	r1, [pc, #24]	; (8000afc <__NVIC_EnableIRQ+0x34>)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	095b      	lsrs	r3, r3, #5
 8000ae8:	2001      	movs	r0, #1
 8000aea:	fa00 f202 	lsl.w	r2, r0, r2
 8000aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	e000e100 	.word	0xe000e100

08000b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db0a      	blt.n	8000b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	490c      	ldr	r1, [pc, #48]	; (8000b4c <__NVIC_SetPriority+0x4c>)
 8000b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b28:	e00a      	b.n	8000b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4908      	ldr	r1, [pc, #32]	; (8000b50 <__NVIC_SetPriority+0x50>)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	3b04      	subs	r3, #4
 8000b38:	0112      	lsls	r2, r2, #4
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	761a      	strb	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000e100 	.word	0xe000e100
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	; 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f1c3 0307 	rsb	r3, r3, #7
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	bf28      	it	cs
 8000b72:	2304      	movcs	r3, #4
 8000b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d902      	bls.n	8000b84 <NVIC_EncodePriority+0x30>
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3b03      	subs	r3, #3
 8000b82:	e000      	b.n	8000b86 <NVIC_EncodePriority+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43da      	mvns	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43d9      	mvns	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	4313      	orrs	r3, r2
         );
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	; 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bc80      	pop	{r7}
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc8:	d301      	bcc.n	8000bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00f      	b.n	8000bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <SysTick_Config+0x40>)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f7ff ff90 	bl	8000b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <SysTick_Config+0x40>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be6:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <SysTick_Config+0x40>)
 8000be8:	2207      	movs	r2, #7
 8000bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000e010 	.word	0xe000e010

08000bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c04:	6878      	ldr	r0, [r7, #4]
 8000c06:	f7ff ff2d 	bl	8000a64 <__NVIC_SetPriorityGrouping>
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b086      	sub	sp, #24
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c24:	f7ff ff42 	bl	8000aac <__NVIC_GetPriorityGrouping>
 8000c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	6978      	ldr	r0, [r7, #20]
 8000c30:	f7ff ff90 	bl	8000b54 <NVIC_EncodePriority>
 8000c34:	4602      	mov	r2, r0
 8000c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff5f 	bl	8000b00 <__NVIC_SetPriority>
}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff35 	bl	8000ac8 <__NVIC_EnableIRQ>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f7ff ffa2 	bl	8000bb8 <SysTick_Config>
 8000c74:	4603      	mov	r3, r0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d005      	beq.n	8000ca2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2204      	movs	r2, #4
 8000c9a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e0d6      	b.n	8000e50 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f022 020e 	bic.w	r2, r2, #14
 8000cb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f022 0201 	bic.w	r2, r2, #1
 8000cc0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	4b64      	ldr	r3, [pc, #400]	; (8000e5c <HAL_DMA_Abort_IT+0x1dc>)
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d958      	bls.n	8000d80 <HAL_DMA_Abort_IT+0x100>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a63      	ldr	r2, [pc, #396]	; (8000e60 <HAL_DMA_Abort_IT+0x1e0>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d04f      	beq.n	8000d78 <HAL_DMA_Abort_IT+0xf8>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a61      	ldr	r2, [pc, #388]	; (8000e64 <HAL_DMA_Abort_IT+0x1e4>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d048      	beq.n	8000d74 <HAL_DMA_Abort_IT+0xf4>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a60      	ldr	r2, [pc, #384]	; (8000e68 <HAL_DMA_Abort_IT+0x1e8>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d040      	beq.n	8000d6e <HAL_DMA_Abort_IT+0xee>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a5e      	ldr	r2, [pc, #376]	; (8000e6c <HAL_DMA_Abort_IT+0x1ec>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d038      	beq.n	8000d68 <HAL_DMA_Abort_IT+0xe8>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a5d      	ldr	r2, [pc, #372]	; (8000e70 <HAL_DMA_Abort_IT+0x1f0>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d030      	beq.n	8000d62 <HAL_DMA_Abort_IT+0xe2>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a5b      	ldr	r2, [pc, #364]	; (8000e74 <HAL_DMA_Abort_IT+0x1f4>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d028      	beq.n	8000d5c <HAL_DMA_Abort_IT+0xdc>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a53      	ldr	r2, [pc, #332]	; (8000e5c <HAL_DMA_Abort_IT+0x1dc>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d020      	beq.n	8000d56 <HAL_DMA_Abort_IT+0xd6>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a57      	ldr	r2, [pc, #348]	; (8000e78 <HAL_DMA_Abort_IT+0x1f8>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d019      	beq.n	8000d52 <HAL_DMA_Abort_IT+0xd2>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a56      	ldr	r2, [pc, #344]	; (8000e7c <HAL_DMA_Abort_IT+0x1fc>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d012      	beq.n	8000d4e <HAL_DMA_Abort_IT+0xce>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a54      	ldr	r2, [pc, #336]	; (8000e80 <HAL_DMA_Abort_IT+0x200>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d00a      	beq.n	8000d48 <HAL_DMA_Abort_IT+0xc8>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a53      	ldr	r2, [pc, #332]	; (8000e84 <HAL_DMA_Abort_IT+0x204>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d102      	bne.n	8000d42 <HAL_DMA_Abort_IT+0xc2>
 8000d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d40:	e01b      	b.n	8000d7a <HAL_DMA_Abort_IT+0xfa>
 8000d42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d46:	e018      	b.n	8000d7a <HAL_DMA_Abort_IT+0xfa>
 8000d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4c:	e015      	b.n	8000d7a <HAL_DMA_Abort_IT+0xfa>
 8000d4e:	2310      	movs	r3, #16
 8000d50:	e013      	b.n	8000d7a <HAL_DMA_Abort_IT+0xfa>
 8000d52:	2301      	movs	r3, #1
 8000d54:	e011      	b.n	8000d7a <HAL_DMA_Abort_IT+0xfa>
 8000d56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d5a:	e00e      	b.n	8000d7a <HAL_DMA_Abort_IT+0xfa>
 8000d5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d60:	e00b      	b.n	8000d7a <HAL_DMA_Abort_IT+0xfa>
 8000d62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d66:	e008      	b.n	8000d7a <HAL_DMA_Abort_IT+0xfa>
 8000d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6c:	e005      	b.n	8000d7a <HAL_DMA_Abort_IT+0xfa>
 8000d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d72:	e002      	b.n	8000d7a <HAL_DMA_Abort_IT+0xfa>
 8000d74:	2310      	movs	r3, #16
 8000d76:	e000      	b.n	8000d7a <HAL_DMA_Abort_IT+0xfa>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	4a43      	ldr	r2, [pc, #268]	; (8000e88 <HAL_DMA_Abort_IT+0x208>)
 8000d7c:	6053      	str	r3, [r2, #4]
 8000d7e:	e057      	b.n	8000e30 <HAL_DMA_Abort_IT+0x1b0>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a36      	ldr	r2, [pc, #216]	; (8000e60 <HAL_DMA_Abort_IT+0x1e0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d04f      	beq.n	8000e2a <HAL_DMA_Abort_IT+0x1aa>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a35      	ldr	r2, [pc, #212]	; (8000e64 <HAL_DMA_Abort_IT+0x1e4>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d048      	beq.n	8000e26 <HAL_DMA_Abort_IT+0x1a6>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a33      	ldr	r2, [pc, #204]	; (8000e68 <HAL_DMA_Abort_IT+0x1e8>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d040      	beq.n	8000e20 <HAL_DMA_Abort_IT+0x1a0>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a32      	ldr	r2, [pc, #200]	; (8000e6c <HAL_DMA_Abort_IT+0x1ec>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d038      	beq.n	8000e1a <HAL_DMA_Abort_IT+0x19a>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a30      	ldr	r2, [pc, #192]	; (8000e70 <HAL_DMA_Abort_IT+0x1f0>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d030      	beq.n	8000e14 <HAL_DMA_Abort_IT+0x194>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a2f      	ldr	r2, [pc, #188]	; (8000e74 <HAL_DMA_Abort_IT+0x1f4>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d028      	beq.n	8000e0e <HAL_DMA_Abort_IT+0x18e>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a26      	ldr	r2, [pc, #152]	; (8000e5c <HAL_DMA_Abort_IT+0x1dc>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d020      	beq.n	8000e08 <HAL_DMA_Abort_IT+0x188>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a2b      	ldr	r2, [pc, #172]	; (8000e78 <HAL_DMA_Abort_IT+0x1f8>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d019      	beq.n	8000e04 <HAL_DMA_Abort_IT+0x184>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a29      	ldr	r2, [pc, #164]	; (8000e7c <HAL_DMA_Abort_IT+0x1fc>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d012      	beq.n	8000e00 <HAL_DMA_Abort_IT+0x180>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a28      	ldr	r2, [pc, #160]	; (8000e80 <HAL_DMA_Abort_IT+0x200>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d00a      	beq.n	8000dfa <HAL_DMA_Abort_IT+0x17a>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a26      	ldr	r2, [pc, #152]	; (8000e84 <HAL_DMA_Abort_IT+0x204>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d102      	bne.n	8000df4 <HAL_DMA_Abort_IT+0x174>
 8000dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df2:	e01b      	b.n	8000e2c <HAL_DMA_Abort_IT+0x1ac>
 8000df4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df8:	e018      	b.n	8000e2c <HAL_DMA_Abort_IT+0x1ac>
 8000dfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dfe:	e015      	b.n	8000e2c <HAL_DMA_Abort_IT+0x1ac>
 8000e00:	2310      	movs	r3, #16
 8000e02:	e013      	b.n	8000e2c <HAL_DMA_Abort_IT+0x1ac>
 8000e04:	2301      	movs	r3, #1
 8000e06:	e011      	b.n	8000e2c <HAL_DMA_Abort_IT+0x1ac>
 8000e08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e0c:	e00e      	b.n	8000e2c <HAL_DMA_Abort_IT+0x1ac>
 8000e0e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e12:	e00b      	b.n	8000e2c <HAL_DMA_Abort_IT+0x1ac>
 8000e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e18:	e008      	b.n	8000e2c <HAL_DMA_Abort_IT+0x1ac>
 8000e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1e:	e005      	b.n	8000e2c <HAL_DMA_Abort_IT+0x1ac>
 8000e20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e24:	e002      	b.n	8000e2c <HAL_DMA_Abort_IT+0x1ac>
 8000e26:	2310      	movs	r3, #16
 8000e28:	e000      	b.n	8000e2c <HAL_DMA_Abort_IT+0x1ac>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <HAL_DMA_Abort_IT+0x20c>)
 8000e2e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2201      	movs	r2, #1
 8000e34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d003      	beq.n	8000e50 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	4798      	blx	r3
    } 
  }
  return status;
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40020080 	.word	0x40020080
 8000e60:	40020008 	.word	0x40020008
 8000e64:	4002001c 	.word	0x4002001c
 8000e68:	40020030 	.word	0x40020030
 8000e6c:	40020044 	.word	0x40020044
 8000e70:	40020058 	.word	0x40020058
 8000e74:	4002006c 	.word	0x4002006c
 8000e78:	40020408 	.word	0x40020408
 8000e7c:	4002041c 	.word	0x4002041c
 8000e80:	40020430 	.word	0x40020430
 8000e84:	40020444 	.word	0x40020444
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	40020000 	.word	0x40020000

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b08b      	sub	sp, #44	; 0x2c
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea2:	e127      	b.n	80010f4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	69fa      	ldr	r2, [r7, #28]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f040 8116 	bne.w	80010ee <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b12      	cmp	r3, #18
 8000ec8:	d034      	beq.n	8000f34 <HAL_GPIO_Init+0xa4>
 8000eca:	2b12      	cmp	r3, #18
 8000ecc:	d80d      	bhi.n	8000eea <HAL_GPIO_Init+0x5a>
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d02b      	beq.n	8000f2a <HAL_GPIO_Init+0x9a>
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d804      	bhi.n	8000ee0 <HAL_GPIO_Init+0x50>
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d031      	beq.n	8000f3e <HAL_GPIO_Init+0xae>
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d01c      	beq.n	8000f18 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ede:	e048      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d043      	beq.n	8000f6c <HAL_GPIO_Init+0xdc>
 8000ee4:	2b11      	cmp	r3, #17
 8000ee6:	d01b      	beq.n	8000f20 <HAL_GPIO_Init+0x90>
          break;
 8000ee8:	e043      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000eea:	4a89      	ldr	r2, [pc, #548]	; (8001110 <HAL_GPIO_Init+0x280>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d026      	beq.n	8000f3e <HAL_GPIO_Init+0xae>
 8000ef0:	4a87      	ldr	r2, [pc, #540]	; (8001110 <HAL_GPIO_Init+0x280>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d806      	bhi.n	8000f04 <HAL_GPIO_Init+0x74>
 8000ef6:	4a87      	ldr	r2, [pc, #540]	; (8001114 <HAL_GPIO_Init+0x284>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d020      	beq.n	8000f3e <HAL_GPIO_Init+0xae>
 8000efc:	4a86      	ldr	r2, [pc, #536]	; (8001118 <HAL_GPIO_Init+0x288>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d01d      	beq.n	8000f3e <HAL_GPIO_Init+0xae>
          break;
 8000f02:	e036      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f04:	4a85      	ldr	r2, [pc, #532]	; (800111c <HAL_GPIO_Init+0x28c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d019      	beq.n	8000f3e <HAL_GPIO_Init+0xae>
 8000f0a:	4a85      	ldr	r2, [pc, #532]	; (8001120 <HAL_GPIO_Init+0x290>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d016      	beq.n	8000f3e <HAL_GPIO_Init+0xae>
 8000f10:	4a84      	ldr	r2, [pc, #528]	; (8001124 <HAL_GPIO_Init+0x294>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d013      	beq.n	8000f3e <HAL_GPIO_Init+0xae>
          break;
 8000f16:	e02c      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	623b      	str	r3, [r7, #32]
          break;
 8000f1e:	e028      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	3304      	adds	r3, #4
 8000f26:	623b      	str	r3, [r7, #32]
          break;
 8000f28:	e023      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	3308      	adds	r3, #8
 8000f30:	623b      	str	r3, [r7, #32]
          break;
 8000f32:	e01e      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	330c      	adds	r3, #12
 8000f3a:	623b      	str	r3, [r7, #32]
          break;
 8000f3c:	e019      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d102      	bne.n	8000f4c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f46:	2304      	movs	r3, #4
 8000f48:	623b      	str	r3, [r7, #32]
          break;
 8000f4a:	e012      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d105      	bne.n	8000f60 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f54:	2308      	movs	r3, #8
 8000f56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	611a      	str	r2, [r3, #16]
          break;
 8000f5e:	e008      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f60:	2308      	movs	r3, #8
 8000f62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69fa      	ldr	r2, [r7, #28]
 8000f68:	615a      	str	r2, [r3, #20]
          break;
 8000f6a:	e002      	b.n	8000f72 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
          break;
 8000f70:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	2bff      	cmp	r3, #255	; 0xff
 8000f76:	d801      	bhi.n	8000f7c <HAL_GPIO_Init+0xec>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	e001      	b.n	8000f80 <HAL_GPIO_Init+0xf0>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3304      	adds	r3, #4
 8000f80:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	2bff      	cmp	r3, #255	; 0xff
 8000f86:	d802      	bhi.n	8000f8e <HAL_GPIO_Init+0xfe>
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	e002      	b.n	8000f94 <HAL_GPIO_Init+0x104>
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	3b08      	subs	r3, #8
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	6a39      	ldr	r1, [r7, #32]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f000 8096 	beq.w	80010ee <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fc2:	4b59      	ldr	r3, [pc, #356]	; (8001128 <HAL_GPIO_Init+0x298>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	4a58      	ldr	r2, [pc, #352]	; (8001128 <HAL_GPIO_Init+0x298>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6193      	str	r3, [r2, #24]
 8000fce:	4b56      	ldr	r3, [pc, #344]	; (8001128 <HAL_GPIO_Init+0x298>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fda:	4a54      	ldr	r2, [pc, #336]	; (800112c <HAL_GPIO_Init+0x29c>)
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fde:	089b      	lsrs	r3, r3, #2
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4b      	ldr	r2, [pc, #300]	; (8001130 <HAL_GPIO_Init+0x2a0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d013      	beq.n	800102e <HAL_GPIO_Init+0x19e>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4a      	ldr	r2, [pc, #296]	; (8001134 <HAL_GPIO_Init+0x2a4>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d00d      	beq.n	800102a <HAL_GPIO_Init+0x19a>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a49      	ldr	r2, [pc, #292]	; (8001138 <HAL_GPIO_Init+0x2a8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d007      	beq.n	8001026 <HAL_GPIO_Init+0x196>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a48      	ldr	r2, [pc, #288]	; (800113c <HAL_GPIO_Init+0x2ac>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d101      	bne.n	8001022 <HAL_GPIO_Init+0x192>
 800101e:	2303      	movs	r3, #3
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x1a0>
 8001022:	2304      	movs	r3, #4
 8001024:	e004      	b.n	8001030 <HAL_GPIO_Init+0x1a0>
 8001026:	2302      	movs	r3, #2
 8001028:	e002      	b.n	8001030 <HAL_GPIO_Init+0x1a0>
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <HAL_GPIO_Init+0x1a0>
 800102e:	2300      	movs	r3, #0
 8001030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001032:	f002 0203 	and.w	r2, r2, #3
 8001036:	0092      	lsls	r2, r2, #2
 8001038:	4093      	lsls	r3, r2
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	4313      	orrs	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001040:	493a      	ldr	r1, [pc, #232]	; (800112c <HAL_GPIO_Init+0x29c>)
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	3302      	adds	r3, #2
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d006      	beq.n	8001068 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800105a:	4b39      	ldr	r3, [pc, #228]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	4938      	ldr	r1, [pc, #224]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	600b      	str	r3, [r1, #0]
 8001066:	e006      	b.n	8001076 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001068:	4b35      	ldr	r3, [pc, #212]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	43db      	mvns	r3, r3
 8001070:	4933      	ldr	r1, [pc, #204]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 8001072:	4013      	ands	r3, r2
 8001074:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d006      	beq.n	8001090 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001082:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 8001084:	685a      	ldr	r2, [r3, #4]
 8001086:	492e      	ldr	r1, [pc, #184]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	604b      	str	r3, [r1, #4]
 800108e:	e006      	b.n	800109e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001090:	4b2b      	ldr	r3, [pc, #172]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	43db      	mvns	r3, r3
 8001098:	4929      	ldr	r1, [pc, #164]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 800109a:	4013      	ands	r3, r2
 800109c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d006      	beq.n	80010b8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010aa:	4b25      	ldr	r3, [pc, #148]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	4924      	ldr	r1, [pc, #144]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	608b      	str	r3, [r1, #8]
 80010b6:	e006      	b.n	80010c6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010b8:	4b21      	ldr	r3, [pc, #132]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	43db      	mvns	r3, r3
 80010c0:	491f      	ldr	r1, [pc, #124]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 80010c2:	4013      	ands	r3, r2
 80010c4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d006      	beq.n	80010e0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010d2:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	491a      	ldr	r1, [pc, #104]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	60cb      	str	r3, [r1, #12]
 80010de:	e006      	b.n	80010ee <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010e0:	4b17      	ldr	r3, [pc, #92]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	4915      	ldr	r1, [pc, #84]	; (8001140 <HAL_GPIO_Init+0x2b0>)
 80010ea:	4013      	ands	r3, r2
 80010ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	3301      	adds	r3, #1
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fa:	fa22 f303 	lsr.w	r3, r2, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	f47f aed0 	bne.w	8000ea4 <HAL_GPIO_Init+0x14>
  }
}
 8001104:	bf00      	nop
 8001106:	372c      	adds	r7, #44	; 0x2c
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	10210000 	.word	0x10210000
 8001114:	10110000 	.word	0x10110000
 8001118:	10120000 	.word	0x10120000
 800111c:	10310000 	.word	0x10310000
 8001120:	10320000 	.word	0x10320000
 8001124:	10220000 	.word	0x10220000
 8001128:	40021000 	.word	0x40021000
 800112c:	40010000 	.word	0x40010000
 8001130:	40010800 	.word	0x40010800
 8001134:	40010c00 	.word	0x40010c00
 8001138:	40011000 	.word	0x40011000
 800113c:	40011400 	.word	0x40011400
 8001140:	40010400 	.word	0x40010400

08001144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]
 8001150:	4613      	mov	r3, r2
 8001152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001154:	787b      	ldrb	r3, [r7, #1]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001160:	e003      	b.n	800116a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	611a      	str	r2, [r3, #16]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001176:	b08f      	sub	sp, #60	; 0x3c
 8001178:	af0a      	add	r7, sp, #40	; 0x28
 800117a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e054      	b.n	8001230 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	d106      	bne.n	80011a6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f005 fbbd 	bl	8006920 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2203      	movs	r2, #3
 80011aa:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d102      	bne.n	80011c0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 feff 	bl	8003fc8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	687e      	ldr	r6, [r7, #4]
 80011d2:	466d      	mov	r5, sp
 80011d4:	f106 0410 	add.w	r4, r6, #16
 80011d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80011e8:	1d33      	adds	r3, r6, #4
 80011ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ec:	6838      	ldr	r0, [r7, #0]
 80011ee:	f002 fe93 	bl	8003f18 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2101      	movs	r1, #1
 80011f8:	4618      	mov	r0, r3
 80011fa:	f002 fef5 	bl	8003fe8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	687e      	ldr	r6, [r7, #4]
 8001206:	466d      	mov	r5, sp
 8001208:	f106 0410 	add.w	r4, r6, #16
 800120c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800120e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001212:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001214:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001218:	e885 0003 	stmia.w	r5, {r0, r1}
 800121c:	1d33      	adds	r3, r6, #4
 800121e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001220:	6838      	ldr	r0, [r7, #0]
 8001222:	f002 fff9 	bl	8004218 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800122e:	2300      	movs	r3, #0
}
 8001230:	4618      	mov	r0, r3
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001238 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af04      	add	r7, sp, #16
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	4608      	mov	r0, r1
 8001242:	4611      	mov	r1, r2
 8001244:	461a      	mov	r2, r3
 8001246:	4603      	mov	r3, r0
 8001248:	70fb      	strb	r3, [r7, #3]
 800124a:	460b      	mov	r3, r1
 800124c:	70bb      	strb	r3, [r7, #2]
 800124e:	4613      	mov	r3, r2
 8001250:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <HAL_HCD_HC_Init+0x28>
 800125c:	2302      	movs	r3, #2
 800125e:	e07f      	b.n	8001360 <HAL_HCD_HC_Init+0x128>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001268:	78fa      	ldrb	r2, [r7, #3]
 800126a:	6879      	ldr	r1, [r7, #4]
 800126c:	4613      	mov	r3, r2
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	4413      	add	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	440b      	add	r3, r1
 8001276:	333d      	adds	r3, #61	; 0x3d
 8001278:	2200      	movs	r2, #0
 800127a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800127c:	78fa      	ldrb	r2, [r7, #3]
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	4613      	mov	r3, r2
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	440b      	add	r3, r1
 800128a:	3338      	adds	r3, #56	; 0x38
 800128c:	787a      	ldrb	r2, [r7, #1]
 800128e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001290:	78fa      	ldrb	r2, [r7, #3]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	440b      	add	r3, r1
 800129e:	3340      	adds	r3, #64	; 0x40
 80012a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012a2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80012a4:	78fa      	ldrb	r2, [r7, #3]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	440b      	add	r3, r1
 80012b2:	3339      	adds	r3, #57	; 0x39
 80012b4:	78fa      	ldrb	r2, [r7, #3]
 80012b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80012b8:	78fa      	ldrb	r2, [r7, #3]
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	00db      	lsls	r3, r3, #3
 80012c4:	440b      	add	r3, r1
 80012c6:	333f      	adds	r3, #63	; 0x3f
 80012c8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80012cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80012ce:	78fa      	ldrb	r2, [r7, #3]
 80012d0:	78bb      	ldrb	r3, [r7, #2]
 80012d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80012d6:	b2d8      	uxtb	r0, r3
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	440b      	add	r3, r1
 80012e4:	333a      	adds	r3, #58	; 0x3a
 80012e6:	4602      	mov	r2, r0
 80012e8:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80012ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	da0a      	bge.n	8001308 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80012f2:	78fa      	ldrb	r2, [r7, #3]
 80012f4:	6879      	ldr	r1, [r7, #4]
 80012f6:	4613      	mov	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	333b      	adds	r3, #59	; 0x3b
 8001302:	2201      	movs	r2, #1
 8001304:	701a      	strb	r2, [r3, #0]
 8001306:	e009      	b.n	800131c <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001308:	78fa      	ldrb	r2, [r7, #3]
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	440b      	add	r3, r1
 8001316:	333b      	adds	r3, #59	; 0x3b
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800131c:	78fa      	ldrb	r2, [r7, #3]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	440b      	add	r3, r1
 800132a:	333c      	adds	r3, #60	; 0x3c
 800132c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001330:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6818      	ldr	r0, [r3, #0]
 8001336:	787c      	ldrb	r4, [r7, #1]
 8001338:	78ba      	ldrb	r2, [r7, #2]
 800133a:	78f9      	ldrb	r1, [r7, #3]
 800133c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800133e:	9302      	str	r3, [sp, #8]
 8001340:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	f897 3020 	ldrb.w	r3, [r7, #32]
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	4623      	mov	r3, r4
 800134e:	f003 f8a3 	bl	8004498 <USB_HC_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	bd90      	pop	{r4, r7, pc}

08001368 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001374:	2300      	movs	r3, #0
 8001376:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800137e:	2b01      	cmp	r3, #1
 8001380:	d101      	bne.n	8001386 <HAL_HCD_HC_Halt+0x1e>
 8001382:	2302      	movs	r3, #2
 8001384:	e00f      	b.n	80013a6 <HAL_HCD_HC_Halt+0x3e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	78fa      	ldrb	r2, [r7, #3]
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f003 fa80 	bl	800489c <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
	...

080013b0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	4608      	mov	r0, r1
 80013ba:	4611      	mov	r1, r2
 80013bc:	461a      	mov	r2, r3
 80013be:	4603      	mov	r3, r0
 80013c0:	70fb      	strb	r3, [r7, #3]
 80013c2:	460b      	mov	r3, r1
 80013c4:	70bb      	strb	r3, [r7, #2]
 80013c6:	4613      	mov	r3, r2
 80013c8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80013ca:	78fa      	ldrb	r2, [r7, #3]
 80013cc:	6879      	ldr	r1, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	440b      	add	r3, r1
 80013d8:	333b      	adds	r3, #59	; 0x3b
 80013da:	78ba      	ldrb	r2, [r7, #2]
 80013dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80013de:	78fa      	ldrb	r2, [r7, #3]
 80013e0:	6879      	ldr	r1, [r7, #4]
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	440b      	add	r3, r1
 80013ec:	333f      	adds	r3, #63	; 0x3f
 80013ee:	787a      	ldrb	r2, [r7, #1]
 80013f0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80013f2:	7c3b      	ldrb	r3, [r7, #16]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d114      	bne.n	8001422 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80013f8:	78fa      	ldrb	r2, [r7, #3]
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	440b      	add	r3, r1
 8001406:	3342      	adds	r3, #66	; 0x42
 8001408:	2203      	movs	r2, #3
 800140a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800140c:	78fa      	ldrb	r2, [r7, #3]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	4413      	add	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	440b      	add	r3, r1
 800141a:	333d      	adds	r3, #61	; 0x3d
 800141c:	7f3a      	ldrb	r2, [r7, #28]
 800141e:	701a      	strb	r2, [r3, #0]
 8001420:	e009      	b.n	8001436 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001422:	78fa      	ldrb	r2, [r7, #3]
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	440b      	add	r3, r1
 8001430:	3342      	adds	r3, #66	; 0x42
 8001432:	2202      	movs	r2, #2
 8001434:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001436:	787b      	ldrb	r3, [r7, #1]
 8001438:	2b03      	cmp	r3, #3
 800143a:	f200 80d6 	bhi.w	80015ea <HAL_HCD_HC_SubmitRequest+0x23a>
 800143e:	a201      	add	r2, pc, #4	; (adr r2, 8001444 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001444:	08001455 	.word	0x08001455
 8001448:	080015d5 	.word	0x080015d5
 800144c:	080014c1 	.word	0x080014c1
 8001450:	0800154b 	.word	0x0800154b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001454:	7c3b      	ldrb	r3, [r7, #16]
 8001456:	2b01      	cmp	r3, #1
 8001458:	f040 80c9 	bne.w	80015ee <HAL_HCD_HC_SubmitRequest+0x23e>
 800145c:	78bb      	ldrb	r3, [r7, #2]
 800145e:	2b00      	cmp	r3, #0
 8001460:	f040 80c5 	bne.w	80015ee <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8001464:	8b3b      	ldrh	r3, [r7, #24]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d109      	bne.n	800147e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800146a:	78fa      	ldrb	r2, [r7, #3]
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	440b      	add	r3, r1
 8001478:	3351      	adds	r3, #81	; 0x51
 800147a:	2201      	movs	r2, #1
 800147c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800147e:	78fa      	ldrb	r2, [r7, #3]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	440b      	add	r3, r1
 800148c:	3351      	adds	r3, #81	; 0x51
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10a      	bne.n	80014aa <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001494:	78fa      	ldrb	r2, [r7, #3]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	440b      	add	r3, r1
 80014a2:	3342      	adds	r3, #66	; 0x42
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80014a8:	e0a1      	b.n	80015ee <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014aa:	78fa      	ldrb	r2, [r7, #3]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	00db      	lsls	r3, r3, #3
 80014b6:	440b      	add	r3, r1
 80014b8:	3342      	adds	r3, #66	; 0x42
 80014ba:	2202      	movs	r2, #2
 80014bc:	701a      	strb	r2, [r3, #0]
      break;
 80014be:	e096      	b.n	80015ee <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80014c0:	78bb      	ldrb	r3, [r7, #2]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d120      	bne.n	8001508 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80014c6:	78fa      	ldrb	r2, [r7, #3]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	440b      	add	r3, r1
 80014d4:	3351      	adds	r3, #81	; 0x51
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d10a      	bne.n	80014f2 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80014dc:	78fa      	ldrb	r2, [r7, #3]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	440b      	add	r3, r1
 80014ea:	3342      	adds	r3, #66	; 0x42
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80014f0:	e07e      	b.n	80015f0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80014f2:	78fa      	ldrb	r2, [r7, #3]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	440b      	add	r3, r1
 8001500:	3342      	adds	r3, #66	; 0x42
 8001502:	2202      	movs	r2, #2
 8001504:	701a      	strb	r2, [r3, #0]
      break;
 8001506:	e073      	b.n	80015f0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001508:	78fa      	ldrb	r2, [r7, #3]
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	4413      	add	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	440b      	add	r3, r1
 8001516:	3350      	adds	r3, #80	; 0x50
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10a      	bne.n	8001534 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800151e:	78fa      	ldrb	r2, [r7, #3]
 8001520:	6879      	ldr	r1, [r7, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	440b      	add	r3, r1
 800152c:	3342      	adds	r3, #66	; 0x42
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
      break;
 8001532:	e05d      	b.n	80015f0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001534:	78fa      	ldrb	r2, [r7, #3]
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	4613      	mov	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4413      	add	r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	440b      	add	r3, r1
 8001542:	3342      	adds	r3, #66	; 0x42
 8001544:	2202      	movs	r2, #2
 8001546:	701a      	strb	r2, [r3, #0]
      break;
 8001548:	e052      	b.n	80015f0 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800154a:	78bb      	ldrb	r3, [r7, #2]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d120      	bne.n	8001592 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001550:	78fa      	ldrb	r2, [r7, #3]
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	440b      	add	r3, r1
 800155e:	3351      	adds	r3, #81	; 0x51
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10a      	bne.n	800157c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001566:	78fa      	ldrb	r2, [r7, #3]
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4413      	add	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	440b      	add	r3, r1
 8001574:	3342      	adds	r3, #66	; 0x42
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800157a:	e039      	b.n	80015f0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800157c:	78fa      	ldrb	r2, [r7, #3]
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	4413      	add	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	440b      	add	r3, r1
 800158a:	3342      	adds	r3, #66	; 0x42
 800158c:	2202      	movs	r2, #2
 800158e:	701a      	strb	r2, [r3, #0]
      break;
 8001590:	e02e      	b.n	80015f0 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001592:	78fa      	ldrb	r2, [r7, #3]
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	440b      	add	r3, r1
 80015a0:	3350      	adds	r3, #80	; 0x50
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10a      	bne.n	80015be <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015a8:	78fa      	ldrb	r2, [r7, #3]
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	440b      	add	r3, r1
 80015b6:	3342      	adds	r3, #66	; 0x42
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
      break;
 80015bc:	e018      	b.n	80015f0 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015be:	78fa      	ldrb	r2, [r7, #3]
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	440b      	add	r3, r1
 80015cc:	3342      	adds	r3, #66	; 0x42
 80015ce:	2202      	movs	r2, #2
 80015d0:	701a      	strb	r2, [r3, #0]
      break;
 80015d2:	e00d      	b.n	80015f0 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015d4:	78fa      	ldrb	r2, [r7, #3]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	4413      	add	r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	440b      	add	r3, r1
 80015e2:	3342      	adds	r3, #66	; 0x42
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
      break;
 80015e8:	e002      	b.n	80015f0 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80015ea:	bf00      	nop
 80015ec:	e000      	b.n	80015f0 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80015ee:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80015f0:	78fa      	ldrb	r2, [r7, #3]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	440b      	add	r3, r1
 80015fe:	3344      	adds	r3, #68	; 0x44
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	8b39      	ldrh	r1, [r7, #24]
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4403      	add	r3, r0
 8001614:	3348      	adds	r3, #72	; 0x48
 8001616:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001618:	78fa      	ldrb	r2, [r7, #3]
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	440b      	add	r3, r1
 8001626:	335c      	adds	r3, #92	; 0x5c
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800162c:	78fa      	ldrb	r2, [r7, #3]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	440b      	add	r3, r1
 800163a:	334c      	adds	r3, #76	; 0x4c
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001640:	78fa      	ldrb	r2, [r7, #3]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	440b      	add	r3, r1
 800164e:	3339      	adds	r3, #57	; 0x39
 8001650:	78fa      	ldrb	r2, [r7, #3]
 8001652:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001654:	78fa      	ldrb	r2, [r7, #3]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	440b      	add	r3, r1
 8001662:	335d      	adds	r3, #93	; 0x5d
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	78fa      	ldrb	r2, [r7, #3]
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	3338      	adds	r3, #56	; 0x38
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f002 fffd 	bl	800467c <USB_HC_StartXfer>
 8001682:	4603      	mov	r3, r0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f002 fd78 	bl	8004198 <USB_GetMode>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	f040 80ef 	bne.w	800188e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f002 fd5d 	bl	8004174 <USB_ReadInterrupts>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f000 80e5 	beq.w	800188c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f002 fd54 	bl	8004174 <USB_ReadInterrupts>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80016d6:	d104      	bne.n	80016e2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80016e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 fd44 	bl	8004174 <USB_ReadInterrupts>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016f6:	d104      	bne.n	8001702 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001700:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f002 fd34 	bl	8004174 <USB_ReadInterrupts>
 800170c:	4603      	mov	r3, r0
 800170e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001712:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001716:	d104      	bne.n	8001722 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001720:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f002 fd24 	bl	8004174 <USB_ReadInterrupts>
 800172c:	4603      	mov	r3, r0
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b02      	cmp	r3, #2
 8001734:	d103      	bne.n	800173e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2202      	movs	r2, #2
 800173c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f002 fd16 	bl	8004174 <USB_ReadInterrupts>
 8001748:	4603      	mov	r3, r0
 800174a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800174e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001752:	d115      	bne.n	8001780 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800175c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	d108      	bne.n	8001780 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f005 f916 	bl	80069a0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2101      	movs	r1, #1
 800177a:	4618      	mov	r0, r3
 800177c:	f002 fdca 	bl	8004314 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f002 fcf5 	bl	8004174 <USB_ReadInterrupts>
 800178a:	4603      	mov	r3, r0
 800178c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001794:	d102      	bne.n	800179c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f001 f920 	bl	80029dc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f002 fce7 	bl	8004174 <USB_ReadInterrupts>
 80017a6:	4603      	mov	r3, r0
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d106      	bne.n	80017be <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f005 f8d9 	bl	8006968 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2208      	movs	r2, #8
 80017bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f002 fcd6 	bl	8004174 <USB_ReadInterrupts>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017d2:	d138      	bne.n	8001846 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f003 f84f 	bl	800487c <USB_HC_ReadInterrupt>
 80017de:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	e025      	b.n	8001832 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	68ba      	ldr	r2, [r7, #8]
 80017ee:	fa22 f303 	lsr.w	r3, r2, r3
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d018      	beq.n	800182c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	015a      	lsls	r2, r3, #5
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4413      	add	r3, r2
 8001802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800180c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001810:	d106      	bne.n	8001820 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	4619      	mov	r1, r3
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f8cd 	bl	80019b8 <HCD_HC_IN_IRQHandler>
 800181e:	e005      	b.n	800182c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	4619      	mov	r1, r3
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fcd7 	bl	80021da <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	3301      	adds	r3, #1
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	429a      	cmp	r2, r3
 800183a:	d3d4      	bcc.n	80017e6 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001844:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f002 fc92 	bl	8004174 <USB_ReadInterrupts>
 8001850:	4603      	mov	r3, r0
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	2b10      	cmp	r3, #16
 8001858:	d101      	bne.n	800185e <HAL_HCD_IRQHandler+0x1d2>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <HAL_HCD_IRQHandler+0x1d4>
 800185e:	2300      	movs	r3, #0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d014      	beq.n	800188e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699a      	ldr	r2, [r3, #24]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0210 	bic.w	r2, r2, #16
 8001872:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f001 f805 	bl	8002884 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699a      	ldr	r2, [r3, #24]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0210 	orr.w	r2, r2, #16
 8001888:	619a      	str	r2, [r3, #24]
 800188a:	e000      	b.n	800188e <HAL_HCD_IRQHandler+0x202>
      return;
 800188c:	bf00      	nop
    }
  }
}
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d101      	bne.n	80018aa <HAL_HCD_Start+0x16>
 80018a6:	2302      	movs	r3, #2
 80018a8:	e013      	b.n	80018d2 <HAL_HCD_Start+0x3e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f002 fb76 	bl	8003fa8 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2101      	movs	r1, #1
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 fd89 	bl	80043da <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d101      	bne.n	80018f0 <HAL_HCD_Stop+0x16>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e00d      	b.n	800190c <HAL_HCD_Stop+0x32>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f003 f8cb 	bl	8004a98 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f002 fd30 	bl	8004386 <USB_ResetPort>
 8001926:	4603      	mov	r3, r0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	335c      	adds	r3, #92	; 0x5c
 800194c:	781b      	ldrb	r3, [r3, #0]
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001964:	78fa      	ldrb	r2, [r7, #3]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	440b      	add	r3, r1
 8001972:	334c      	adds	r3, #76	; 0x4c
 8001974:	681b      	ldr	r3, [r3, #0]
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4618      	mov	r0, r3
 800198e:	f002 fd72 	bl	8004476 <USB_GetCurrentFrame>
 8001992:	4603      	mov	r3, r0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 fd4e 	bl	800444a <USB_GetHostSpeed>
 80019ae:	4603      	mov	r3, r0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	460b      	mov	r3, r1
 80019c2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	015a      	lsls	r2, r3, #5
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4413      	add	r3, r2
 80019da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d119      	bne.n	8001a1c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	015a      	lsls	r2, r3, #5
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4413      	add	r3, r2
 80019f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019f4:	461a      	mov	r2, r3
 80019f6:	2304      	movs	r3, #4
 80019f8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	015a      	lsls	r2, r3, #5
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4413      	add	r3, r2
 8001a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	68fa      	ldr	r2, [r7, #12]
 8001a0a:	0151      	lsls	r1, r2, #5
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	440a      	add	r2, r1
 8001a10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	60d3      	str	r3, [r2, #12]
 8001a1a:	e0ce      	b.n	8001bba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	015a      	lsls	r2, r3, #5
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4413      	add	r3, r2
 8001a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a32:	d12c      	bne.n	8001a8e <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	015a      	lsls	r2, r3, #5
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a40:	461a      	mov	r2, r3
 8001a42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a46:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001a48:	6879      	ldr	r1, [r7, #4]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	440b      	add	r3, r1
 8001a56:	335d      	adds	r3, #93	; 0x5d
 8001a58:	2207      	movs	r2, #7
 8001a5a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	015a      	lsls	r2, r3, #5
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	4413      	add	r3, r2
 8001a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	0151      	lsls	r1, r2, #5
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	440a      	add	r2, r1
 8001a72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a76:	f043 0302 	orr.w	r3, r3, #2
 8001a7a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f002 ff08 	bl	800489c <USB_HC_Halt>
 8001a8c:	e095      	b.n	8001bba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	015a      	lsls	r2, r3, #5
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0320 	and.w	r3, r3, #32
 8001aa0:	2b20      	cmp	r3, #32
 8001aa2:	d109      	bne.n	8001ab8 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	015a      	lsls	r2, r3, #5
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	4413      	add	r3, r2
 8001aac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2320      	movs	r3, #32
 8001ab4:	6093      	str	r3, [r2, #8]
 8001ab6:	e080      	b.n	8001bba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	015a      	lsls	r2, r3, #5
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4413      	add	r3, r2
 8001ac0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d134      	bne.n	8001b38 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	015a      	lsls	r2, r3, #5
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	68fa      	ldr	r2, [r7, #12]
 8001ade:	0151      	lsls	r1, r2, #5
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	440a      	add	r2, r1
 8001ae4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ae8:	f043 0302 	orr.w	r3, r3, #2
 8001aec:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	440b      	add	r3, r1
 8001afc:	335d      	adds	r3, #93	; 0x5d
 8001afe:	2205      	movs	r2, #5
 8001b00:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	015a      	lsls	r2, r3, #5
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4413      	add	r3, r2
 8001b0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b0e:	461a      	mov	r2, r3
 8001b10:	2310      	movs	r3, #16
 8001b12:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	015a      	lsls	r2, r3, #5
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b20:	461a      	mov	r2, r3
 8001b22:	2308      	movs	r3, #8
 8001b24:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 feb3 	bl	800489c <USB_HC_Halt>
 8001b36:	e040      	b.n	8001bba <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	015a      	lsls	r2, r3, #5
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4413      	add	r3, r2
 8001b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b4e:	d134      	bne.n	8001bba <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	015a      	lsls	r2, r3, #5
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	0151      	lsls	r1, r2, #5
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	440a      	add	r2, r1
 8001b66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b6a:	f043 0302 	orr.w	r3, r3, #2
 8001b6e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 fe8e 	bl	800489c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	015a      	lsls	r2, r3, #5
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4413      	add	r3, r2
 8001b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	2310      	movs	r3, #16
 8001b90:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	440b      	add	r3, r1
 8001ba0:	335d      	adds	r3, #93	; 0x5d
 8001ba2:	2208      	movs	r2, #8
 8001ba4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	015a      	lsls	r2, r3, #5
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4413      	add	r3, r2
 8001bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bb8:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	015a      	lsls	r2, r3, #5
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bd0:	d122      	bne.n	8001c18 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	015a      	lsls	r2, r3, #5
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4413      	add	r3, r2
 8001bda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	0151      	lsls	r1, r2, #5
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	440a      	add	r2, r1
 8001be8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 fe4d 	bl	800489c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	015a      	lsls	r2, r3, #5
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c14:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001c16:	e2dc      	b.n	80021d2 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	015a      	lsls	r2, r3, #5
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4413      	add	r3, r2
 8001c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	f040 80dd 	bne.w	8001dea <HCD_HC_IN_IRQHandler+0x432>
    hhcd->hc[ch_num].state = HC_XFRC;
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	440b      	add	r3, r1
 8001c3e:	335d      	adds	r3, #93	; 0x5d
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	440b      	add	r3, r1
 8001c52:	3358      	adds	r3, #88	; 0x58
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	015a      	lsls	r2, r3, #5
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4413      	add	r3, r2
 8001c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c64:	461a      	mov	r2, r3
 8001c66:	2301      	movs	r3, #1
 8001c68:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4413      	add	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	440b      	add	r3, r1
 8001c78:	333f      	adds	r3, #63	; 0x3f
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00a      	beq.n	8001c96 <HCD_HC_IN_IRQHandler+0x2de>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	440b      	add	r3, r1
 8001c8e:	333f      	adds	r3, #63	; 0x3f
 8001c90:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d121      	bne.n	8001cda <HCD_HC_IN_IRQHandler+0x322>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	015a      	lsls	r2, r3, #5
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	0151      	lsls	r1, r2, #5
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	440a      	add	r2, r1
 8001cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f002 fdeb 	bl	800489c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2310      	movs	r3, #16
 8001cd6:	6093      	str	r3, [r2, #8]
 8001cd8:	e070      	b.n	8001dbc <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	440b      	add	r3, r1
 8001ce8:	333f      	adds	r3, #63	; 0x3f
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d12a      	bne.n	8001d46 <HCD_HC_IN_IRQHandler+0x38e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	015a      	lsls	r2, r3, #5
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	0151      	lsls	r1, r2, #5
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	440a      	add	r2, r1
 8001d06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d0e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001d10:	6879      	ldr	r1, [r7, #4]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	335c      	adds	r3, #92	; 0x5c
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	b2d8      	uxtb	r0, r3
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	00db      	lsls	r3, r3, #3
 8001d34:	440b      	add	r3, r1
 8001d36:	335c      	adds	r3, #92	; 0x5c
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4601      	mov	r1, r0
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f004 fe3c 	bl	80069bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8001d44:	e03a      	b.n	8001dbc <HCD_HC_IN_IRQHandler+0x404>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	440b      	add	r3, r1
 8001d54:	333f      	adds	r3, #63	; 0x3f
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d12f      	bne.n	8001dbc <HCD_HC_IN_IRQHandler+0x404>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	440b      	add	r3, r1
 8001d6a:	335c      	adds	r3, #92	; 0x5c
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	440b      	add	r3, r1
 8001d7e:	3350      	adds	r3, #80	; 0x50
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	f083 0301 	eor.w	r3, r3, #1
 8001d86:	b2d8      	uxtb	r0, r3
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	3350      	adds	r3, #80	; 0x50
 8001d98:	4602      	mov	r2, r0
 8001d9a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	b2d8      	uxtb	r0, r3
 8001da0:	6879      	ldr	r1, [r7, #4]
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4613      	mov	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	440b      	add	r3, r1
 8001dae:	335c      	adds	r3, #92	; 0x5c
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	4601      	mov	r1, r0
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f004 fe00 	bl	80069bc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	68fa      	ldr	r2, [r7, #12]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	440b      	add	r3, r1
 8001dca:	3350      	adds	r3, #80	; 0x50
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	f083 0301 	eor.w	r3, r3, #1
 8001dd2:	b2d8      	uxtb	r0, r3
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	440b      	add	r3, r1
 8001de2:	3350      	adds	r3, #80	; 0x50
 8001de4:	4602      	mov	r2, r0
 8001de6:	701a      	strb	r2, [r3, #0]
}
 8001de8:	e1f3      	b.n	80021d2 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	f040 811a 	bne.w	8002036 <HCD_HC_IN_IRQHandler+0x67e>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	0151      	lsls	r1, r2, #5
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	440a      	add	r2, r1
 8001e18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e1c:	f023 0302 	bic.w	r3, r3, #2
 8001e20:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	440b      	add	r3, r1
 8001e30:	335d      	adds	r3, #93	; 0x5d
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d10a      	bne.n	8001e4e <HCD_HC_IN_IRQHandler+0x496>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	335c      	adds	r3, #92	; 0x5c
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	e0d9      	b.n	8002002 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	335d      	adds	r3, #93	; 0x5d
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b05      	cmp	r3, #5
 8001e62:	d10a      	bne.n	8001e7a <HCD_HC_IN_IRQHandler+0x4c2>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	4413      	add	r3, r2
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	440b      	add	r3, r1
 8001e72:	335c      	adds	r3, #92	; 0x5c
 8001e74:	2205      	movs	r2, #5
 8001e76:	701a      	strb	r2, [r3, #0]
 8001e78:	e0c3      	b.n	8002002 <HCD_HC_IN_IRQHandler+0x64a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	440b      	add	r3, r1
 8001e88:	335d      	adds	r3, #93	; 0x5d
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b06      	cmp	r3, #6
 8001e8e:	d00a      	beq.n	8001ea6 <HCD_HC_IN_IRQHandler+0x4ee>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	335d      	adds	r3, #93	; 0x5d
 8001ea0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d156      	bne.n	8001f54 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].ErrCnt++;
 8001ea6:	6879      	ldr	r1, [r7, #4]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	440b      	add	r3, r1
 8001eb4:	3358      	adds	r3, #88	; 0x58
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	1c59      	adds	r1, r3, #1
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4403      	add	r3, r0
 8001ec8:	3358      	adds	r3, #88	; 0x58
 8001eca:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	440b      	add	r3, r1
 8001eda:	3358      	adds	r3, #88	; 0x58
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d914      	bls.n	8001f0c <HCD_HC_IN_IRQHandler+0x554>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	440b      	add	r3, r1
 8001ef0:	3358      	adds	r3, #88	; 0x58
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	440b      	add	r3, r1
 8001f04:	335c      	adds	r3, #92	; 0x5c
 8001f06:	2204      	movs	r2, #4
 8001f08:	701a      	strb	r2, [r3, #0]
 8001f0a:	e009      	b.n	8001f20 <HCD_HC_IN_IRQHandler+0x568>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001f0c:	6879      	ldr	r1, [r7, #4]
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	4613      	mov	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	335c      	adds	r3, #92	; 0x5c
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	015a      	lsls	r2, r3, #5
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f36:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f3e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	015a      	lsls	r2, r3, #5
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e056      	b.n	8002002 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	440b      	add	r3, r1
 8001f62:	335d      	adds	r3, #93	; 0x5d
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d123      	bne.n	8001fb2 <HCD_HC_IN_IRQHandler+0x5fa>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	440b      	add	r3, r1
 8001f78:	335c      	adds	r3, #92	; 0x5c
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001f94:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f9c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001faa:	461a      	mov	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	e027      	b.n	8002002 <HCD_HC_IN_IRQHandler+0x64a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	440b      	add	r3, r1
 8001fc0:	335d      	adds	r3, #93	; 0x5d
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b07      	cmp	r3, #7
 8001fc6:	d11c      	bne.n	8002002 <HCD_HC_IN_IRQHandler+0x64a>
      hhcd->hc[ch_num].ErrCnt++;
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3358      	adds	r3, #88	; 0x58
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	1c59      	adds	r1, r3, #1
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4403      	add	r3, r0
 8001fea:	3358      	adds	r3, #88	; 0x58
 8001fec:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	00db      	lsls	r3, r3, #3
 8001ffa:	440b      	add	r3, r1
 8001ffc:	335c      	adds	r3, #92	; 0x5c
 8001ffe:	2204      	movs	r2, #4
 8002000:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4413      	add	r3, r2
 800200a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800200e:	461a      	mov	r2, r3
 8002010:	2302      	movs	r3, #2
 8002012:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	b2d8      	uxtb	r0, r3
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4613      	mov	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4413      	add	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	440b      	add	r3, r1
 8002026:	335c      	adds	r3, #92	; 0x5c
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	4601      	mov	r1, r0
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f004 fcc4 	bl	80069bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002034:	e0cd      	b.n	80021d2 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	015a      	lsls	r2, r3, #5
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4413      	add	r3, r2
 800203e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002048:	2b80      	cmp	r3, #128	; 0x80
 800204a:	d13e      	bne.n	80020ca <HCD_HC_IN_IRQHandler+0x712>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	015a      	lsls	r2, r3, #5
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4413      	add	r3, r2
 8002054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	0151      	lsls	r1, r2, #5
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	440a      	add	r2, r1
 8002062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002066:	f043 0302 	orr.w	r3, r3, #2
 800206a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	440b      	add	r3, r1
 800207a:	3358      	adds	r3, #88	; 0x58
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	1c59      	adds	r1, r3, #1
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4403      	add	r3, r0
 800208e:	3358      	adds	r3, #88	; 0x58
 8002090:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	440b      	add	r3, r1
 80020a0:	335d      	adds	r3, #93	; 0x5d
 80020a2:	2206      	movs	r2, #6
 80020a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f002 fbf3 	bl	800489c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c2:	461a      	mov	r2, r3
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	6093      	str	r3, [r2, #8]
}
 80020c8:	e083      	b.n	80021d2 <HCD_HC_IN_IRQHandler+0x81a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	015a      	lsls	r2, r3, #5
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4413      	add	r3, r2
 80020d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b10      	cmp	r3, #16
 80020de:	d178      	bne.n	80021d2 <HCD_HC_IN_IRQHandler+0x81a>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	440b      	add	r3, r1
 80020ee:	333f      	adds	r3, #63	; 0x3f
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d122      	bne.n	800213c <HCD_HC_IN_IRQHandler+0x784>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	440b      	add	r3, r1
 8002104:	3358      	adds	r3, #88	; 0x58
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4413      	add	r3, r2
 8002112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	0151      	lsls	r1, r2, #5
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	440a      	add	r2, r1
 8002120:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002124:	f043 0302 	orr.w	r3, r3, #2
 8002128:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f002 fbb1 	bl	800489c <USB_HC_Halt>
 800213a:	e041      	b.n	80021c0 <HCD_HC_IN_IRQHandler+0x808>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	440b      	add	r3, r1
 800214a:	333f      	adds	r3, #63	; 0x3f
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HCD_HC_IN_IRQHandler+0x7b0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	440b      	add	r3, r1
 8002160:	333f      	adds	r3, #63	; 0x3f
 8002162:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002164:	2b02      	cmp	r3, #2
 8002166:	d12b      	bne.n	80021c0 <HCD_HC_IN_IRQHandler+0x808>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	440b      	add	r3, r1
 8002176:	3358      	adds	r3, #88	; 0x58
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4613      	mov	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	4413      	add	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	440b      	add	r3, r1
 800218a:	335d      	adds	r3, #93	; 0x5d
 800218c:	2203      	movs	r2, #3
 800218e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	015a      	lsls	r2, r3, #5
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	4413      	add	r3, r2
 8002198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	0151      	lsls	r1, r2, #5
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	440a      	add	r2, r1
 80021a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021aa:	f043 0302 	orr.w	r3, r3, #2
 80021ae:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f002 fb6e 	bl	800489c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021cc:	461a      	mov	r2, r3
 80021ce:	2310      	movs	r3, #16
 80021d0:	6093      	str	r3, [r2, #8]
}
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b086      	sub	sp, #24
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 80021e2:	460b      	mov	r3, r1
 80021e4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80021f0:	78fb      	ldrb	r3, [r7, #3]
 80021f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	015a      	lsls	r2, r3, #5
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4413      	add	r3, r2
 80021fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 0304 	and.w	r3, r3, #4
 8002206:	2b04      	cmp	r3, #4
 8002208:	d119      	bne.n	800223e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4413      	add	r3, r2
 8002212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002216:	461a      	mov	r2, r3
 8002218:	2304      	movs	r3, #4
 800221a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	015a      	lsls	r2, r3, #5
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4413      	add	r3, r2
 8002224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	0151      	lsls	r1, r2, #5
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	440a      	add	r2, r1
 8002232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002236:	f043 0302 	orr.w	r3, r3, #2
 800223a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800223c:	e31e      	b.n	800287c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4413      	add	r3, r2
 8002246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0320 	and.w	r3, r3, #32
 8002250:	2b20      	cmp	r3, #32
 8002252:	d141      	bne.n	80022d8 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4413      	add	r3, r2
 800225c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002260:	461a      	mov	r2, r3
 8002262:	2320      	movs	r3, #32
 8002264:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	440b      	add	r3, r1
 8002274:	333d      	adds	r3, #61	; 0x3d
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	f040 82ff 	bne.w	800287c <HCD_HC_OUT_IRQHandler+0x6a2>
      hhcd->hc[ch_num].do_ping = 0U;
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4613      	mov	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	4413      	add	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	440b      	add	r3, r1
 800228c:	333d      	adds	r3, #61	; 0x3d
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	440b      	add	r3, r1
 80022a0:	335c      	adds	r3, #92	; 0x5c
 80022a2:	2202      	movs	r2, #2
 80022a4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	0151      	lsls	r1, r2, #5
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	440a      	add	r2, r1
 80022bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f002 fae3 	bl	800489c <USB_HC_Halt>
}
 80022d6:	e2d1      	b.n	800287c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	015a      	lsls	r2, r3, #5
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	4413      	add	r3, r2
 80022e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ea:	2b40      	cmp	r3, #64	; 0x40
 80022ec:	d13f      	bne.n	800236e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	440b      	add	r3, r1
 80022fc:	335d      	adds	r3, #93	; 0x5d
 80022fe:	2204      	movs	r2, #4
 8002300:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	440b      	add	r3, r1
 8002310:	333d      	adds	r3, #61	; 0x3d
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	440b      	add	r3, r1
 8002324:	3358      	adds	r3, #88	; 0x58
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4413      	add	r3, r2
 8002332:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	0151      	lsls	r1, r2, #5
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	440a      	add	r2, r1
 8002340:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f002 faa1 	bl	800489c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	015a      	lsls	r2, r3, #5
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4413      	add	r3, r2
 8002362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002366:	461a      	mov	r2, r3
 8002368:	2340      	movs	r3, #64	; 0x40
 800236a:	6093      	str	r3, [r2, #8]
}
 800236c:	e286      	b.n	800287c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4413      	add	r3, r2
 8002376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002384:	d122      	bne.n	80023cc <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4413      	add	r3, r2
 800238e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	0151      	lsls	r1, r2, #5
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	440a      	add	r2, r1
 800239c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	4611      	mov	r1, r2
 80023b0:	4618      	mov	r0, r3
 80023b2:	f002 fa73 	bl	800489c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	015a      	lsls	r2, r3, #5
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4413      	add	r3, r2
 80023be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c2:	461a      	mov	r2, r3
 80023c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023c8:	6093      	str	r3, [r2, #8]
}
 80023ca:	e257      	b.n	800287c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d135      	bne.n	800244e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	440b      	add	r3, r1
 80023f0:	3358      	adds	r3, #88	; 0x58
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	0151      	lsls	r1, r2, #5
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	440a      	add	r2, r1
 800240c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	4611      	mov	r1, r2
 8002420:	4618      	mov	r0, r3
 8002422:	f002 fa3b 	bl	800489c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4413      	add	r3, r2
 800242e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002432:	461a      	mov	r2, r3
 8002434:	2301      	movs	r3, #1
 8002436:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	440b      	add	r3, r1
 8002446:	335d      	adds	r3, #93	; 0x5d
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
}
 800244c:	e216      	b.n	800287c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	015a      	lsls	r2, r3, #5
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	4413      	add	r3, r2
 8002456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b08      	cmp	r3, #8
 8002462:	d12b      	bne.n	80024bc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4413      	add	r3, r2
 800246c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002470:	461a      	mov	r2, r3
 8002472:	2308      	movs	r3, #8
 8002474:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	4413      	add	r3, r2
 800247e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	0151      	lsls	r1, r2, #5
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	440a      	add	r2, r1
 800248c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	4611      	mov	r1, r2
 80024a0:	4618      	mov	r0, r3
 80024a2:	f002 f9fb 	bl	800489c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	440b      	add	r3, r1
 80024b4:	335d      	adds	r3, #93	; 0x5d
 80024b6:	2205      	movs	r2, #5
 80024b8:	701a      	strb	r2, [r3, #0]
}
 80024ba:	e1df      	b.n	800287c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b10      	cmp	r3, #16
 80024d0:	d135      	bne.n	800253e <HCD_HC_OUT_IRQHandler+0x364>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	440b      	add	r3, r1
 80024e0:	3358      	adds	r3, #88	; 0x58
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	4613      	mov	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	440b      	add	r3, r1
 80024f4:	335d      	adds	r3, #93	; 0x5d
 80024f6:	2203      	movs	r2, #3
 80024f8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4413      	add	r3, r2
 8002502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	0151      	lsls	r1, r2, #5
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	440a      	add	r2, r1
 8002510:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f002 f9b9 	bl	800489c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	015a      	lsls	r2, r3, #5
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4413      	add	r3, r2
 8002532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002536:	461a      	mov	r2, r3
 8002538:	2310      	movs	r3, #16
 800253a:	6093      	str	r3, [r2, #8]
}
 800253c:	e19e      	b.n	800287c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	015a      	lsls	r2, r3, #5
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	4413      	add	r3, r2
 8002546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002550:	2b80      	cmp	r3, #128	; 0x80
 8002552:	d12b      	bne.n	80025ac <HCD_HC_OUT_IRQHandler+0x3d2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4413      	add	r3, r2
 800255c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	0151      	lsls	r1, r2, #5
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	440a      	add	r2, r1
 800256a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800256e:	f043 0302 	orr.w	r3, r3, #2
 8002572:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	4611      	mov	r1, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f002 f98c 	bl	800489c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	4613      	mov	r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	00db      	lsls	r3, r3, #3
 8002590:	440b      	add	r3, r1
 8002592:	335d      	adds	r3, #93	; 0x5d
 8002594:	2206      	movs	r2, #6
 8002596:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a4:	461a      	mov	r2, r3
 80025a6:	2380      	movs	r3, #128	; 0x80
 80025a8:	6093      	str	r3, [r2, #8]
}
 80025aa:	e167      	b.n	800287c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	015a      	lsls	r2, r3, #5
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4413      	add	r3, r2
 80025b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c2:	d135      	bne.n	8002630 <HCD_HC_OUT_IRQHandler+0x456>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	0151      	lsls	r1, r2, #5
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	440a      	add	r2, r1
 80025da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025de:	f043 0302 	orr.w	r3, r3, #2
 80025e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f002 f954 	bl	800489c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002600:	461a      	mov	r2, r3
 8002602:	2310      	movs	r3, #16
 8002604:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	461a      	mov	r2, r3
 8002614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002618:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	335d      	adds	r3, #93	; 0x5d
 800262a:	2208      	movs	r2, #8
 800262c:	701a      	strb	r2, [r3, #0]
}
 800262e:	e125      	b.n	800287c <HCD_HC_OUT_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4413      	add	r3, r2
 8002638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b02      	cmp	r3, #2
 8002644:	f040 811a 	bne.w	800287c <HCD_HC_OUT_IRQHandler+0x6a2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	015a      	lsls	r2, r3, #5
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	4413      	add	r3, r2
 8002650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	0151      	lsls	r1, r2, #5
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	440a      	add	r2, r1
 800265e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002662:	f023 0302 	bic.w	r3, r3, #2
 8002666:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	440b      	add	r3, r1
 8002676:	335d      	adds	r3, #93	; 0x5d
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d137      	bne.n	80026ee <HCD_HC_OUT_IRQHandler+0x514>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	440b      	add	r3, r1
 800268c:	335c      	adds	r3, #92	; 0x5c
 800268e:	2201      	movs	r2, #1
 8002690:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	440b      	add	r3, r1
 80026a0:	333f      	adds	r3, #63	; 0x3f
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d00b      	beq.n	80026c0 <HCD_HC_OUT_IRQHandler+0x4e6>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	440b      	add	r3, r1
 80026b6:	333f      	adds	r3, #63	; 0x3f
 80026b8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	f040 80c5 	bne.w	800284a <HCD_HC_OUT_IRQHandler+0x670>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	4613      	mov	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	440b      	add	r3, r1
 80026ce:	3351      	adds	r3, #81	; 0x51
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	f083 0301 	eor.w	r3, r3, #1
 80026d6:	b2d8      	uxtb	r0, r3
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	440b      	add	r3, r1
 80026e6:	3351      	adds	r3, #81	; 0x51
 80026e8:	4602      	mov	r2, r0
 80026ea:	701a      	strb	r2, [r3, #0]
 80026ec:	e0ad      	b.n	800284a <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	440b      	add	r3, r1
 80026fc:	335d      	adds	r3, #93	; 0x5d
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d10a      	bne.n	800271a <HCD_HC_OUT_IRQHandler+0x540>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	440b      	add	r3, r1
 8002712:	335c      	adds	r3, #92	; 0x5c
 8002714:	2202      	movs	r2, #2
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	e097      	b.n	800284a <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800271a:	6879      	ldr	r1, [r7, #4]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4613      	mov	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	440b      	add	r3, r1
 8002728:	335d      	adds	r3, #93	; 0x5d
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b04      	cmp	r3, #4
 800272e:	d10a      	bne.n	8002746 <HCD_HC_OUT_IRQHandler+0x56c>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	440b      	add	r3, r1
 800273e:	335c      	adds	r3, #92	; 0x5c
 8002740:	2202      	movs	r2, #2
 8002742:	701a      	strb	r2, [r3, #0]
 8002744:	e081      	b.n	800284a <HCD_HC_OUT_IRQHandler+0x670>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	440b      	add	r3, r1
 8002754:	335d      	adds	r3, #93	; 0x5d
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b05      	cmp	r3, #5
 800275a:	d10a      	bne.n	8002772 <HCD_HC_OUT_IRQHandler+0x598>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	440b      	add	r3, r1
 800276a:	335c      	adds	r3, #92	; 0x5c
 800276c:	2205      	movs	r2, #5
 800276e:	701a      	strb	r2, [r3, #0]
 8002770:	e06b      	b.n	800284a <HCD_HC_OUT_IRQHandler+0x670>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	440b      	add	r3, r1
 8002780:	335d      	adds	r3, #93	; 0x5d
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b06      	cmp	r3, #6
 8002786:	d00a      	beq.n	800279e <HCD_HC_OUT_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4613      	mov	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	440b      	add	r3, r1
 8002796:	335d      	adds	r3, #93	; 0x5d
 8002798:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800279a:	2b08      	cmp	r3, #8
 800279c:	d155      	bne.n	800284a <HCD_HC_OUT_IRQHandler+0x670>
      hhcd->hc[ch_num].ErrCnt++;
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4613      	mov	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	4413      	add	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	440b      	add	r3, r1
 80027ac:	3358      	adds	r3, #88	; 0x58
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	1c59      	adds	r1, r3, #1
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4403      	add	r3, r0
 80027c0:	3358      	adds	r3, #88	; 0x58
 80027c2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	440b      	add	r3, r1
 80027d2:	3358      	adds	r3, #88	; 0x58
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b03      	cmp	r3, #3
 80027d8:	d914      	bls.n	8002804 <HCD_HC_OUT_IRQHandler+0x62a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	4613      	mov	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	440b      	add	r3, r1
 80027e8:	3358      	adds	r3, #88	; 0x58
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	4613      	mov	r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	440b      	add	r3, r1
 80027fc:	335c      	adds	r3, #92	; 0x5c
 80027fe:	2204      	movs	r2, #4
 8002800:	701a      	strb	r2, [r3, #0]
 8002802:	e009      	b.n	8002818 <HCD_HC_OUT_IRQHandler+0x63e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4613      	mov	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4413      	add	r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	440b      	add	r3, r1
 8002812:	335c      	adds	r3, #92	; 0x5c
 8002814:	2202      	movs	r2, #2
 8002816:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800282e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002836:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002844:	461a      	mov	r2, r3
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	015a      	lsls	r2, r3, #5
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	4413      	add	r3, r2
 8002852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002856:	461a      	mov	r2, r3
 8002858:	2302      	movs	r3, #2
 800285a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	b2d8      	uxtb	r0, r3
 8002860:	6879      	ldr	r1, [r7, #4]
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	440b      	add	r3, r1
 800286e:	335c      	adds	r3, #92	; 0x5c
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	4601      	mov	r1, r0
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f004 f8a0 	bl	80069bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800287c:	bf00      	nop
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08a      	sub	sp, #40	; 0x28
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	0c5b      	lsrs	r3, r3, #17
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028b8:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d003      	beq.n	80028c8 <HCD_RXQLVL_IRQHandler+0x44>
 80028c0:	2b05      	cmp	r3, #5
 80028c2:	f000 8082 	beq.w	80029ca <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80028c6:	e083      	b.n	80029d0 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d07f      	beq.n	80029ce <HCD_RXQLVL_IRQHandler+0x14a>
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	440b      	add	r3, r1
 80028dc:	3344      	adds	r3, #68	; 0x44
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d074      	beq.n	80029ce <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	440b      	add	r3, r1
 80028f6:	3344      	adds	r3, #68	; 0x44
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	b292      	uxth	r2, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	f001 fc10 	bl	8004124 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	440b      	add	r3, r1
 8002912:	3344      	adds	r3, #68	; 0x44
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	18d1      	adds	r1, r2, r3
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4613      	mov	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4403      	add	r3, r0
 8002928:	3344      	adds	r3, #68	; 0x44
 800292a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800292c:	6879      	ldr	r1, [r7, #4]
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	440b      	add	r3, r1
 800293a:	334c      	adds	r3, #76	; 0x4c
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	18d1      	adds	r1, r2, r3
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4403      	add	r3, r0
 8002950:	334c      	adds	r3, #76	; 0x4c
 8002952:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <HCD_RXQLVL_IRQHandler+0x154>)
 8002964:	4013      	ands	r3, r2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d031      	beq.n	80029ce <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	4413      	add	r3, r2
 8002972:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002980:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002988:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002996:	461a      	mov	r2, r3
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	440b      	add	r3, r1
 80029aa:	3350      	adds	r3, #80	; 0x50
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	f083 0301 	eor.w	r3, r3, #1
 80029b2:	b2d8      	uxtb	r0, r3
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4613      	mov	r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	440b      	add	r3, r1
 80029c2:	3350      	adds	r3, #80	; 0x50
 80029c4:	4602      	mov	r2, r0
 80029c6:	701a      	strb	r2, [r3, #0]
      break;
 80029c8:	e001      	b.n	80029ce <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80029ca:	bf00      	nop
 80029cc:	e000      	b.n	80029d0 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80029ce:	bf00      	nop
  }
}
 80029d0:	bf00      	nop
 80029d2:	3728      	adds	r7, #40	; 0x28
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	1ff80000 	.word	0x1ff80000

080029dc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002a08:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d10b      	bne.n	8002a2c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d102      	bne.n	8002a24 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f003 ffb0 	bl	8006984 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f043 0302 	orr.w	r3, r3, #2
 8002a2a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d132      	bne.n	8002a9c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	f043 0308 	orr.w	r3, r3, #8
 8002a3c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d126      	bne.n	8002a96 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d113      	bne.n	8002a78 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002a56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a5a:	d106      	bne.n	8002a6a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2102      	movs	r1, #2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f001 fc56 	bl	8004314 <USB_InitFSLSPClkSel>
 8002a68:	e011      	b.n	8002a8e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2101      	movs	r1, #1
 8002a70:	4618      	mov	r0, r3
 8002a72:	f001 fc4f 	bl	8004314 <USB_InitFSLSPClkSel>
 8002a76:	e00a      	b.n	8002a8e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d106      	bne.n	8002a8e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a86:	461a      	mov	r2, r3
 8002a88:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002a8c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f003 ffa1 	bl	80069d6 <HAL_HCD_PortEnabled_Callback>
 8002a94:	e002      	b.n	8002a9c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f003 ffab 	bl	80069f2 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d103      	bne.n	8002aae <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	f043 0320 	orr.w	r3, r3, #32
 8002aac:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	6013      	str	r3, [r2, #0]
}
 8002aba:	bf00      	nop
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e304      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f000 8087 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ae4:	4b92      	ldr	r3, [pc, #584]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b04      	cmp	r3, #4
 8002aee:	d00c      	beq.n	8002b0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002af0:	4b8f      	ldr	r3, [pc, #572]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 030c 	and.w	r3, r3, #12
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	d112      	bne.n	8002b22 <HAL_RCC_OscConfig+0x5e>
 8002afc:	4b8c      	ldr	r3, [pc, #560]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b08:	d10b      	bne.n	8002b22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b0a:	4b89      	ldr	r3, [pc, #548]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d06c      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x12c>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d168      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e2de      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b2a:	d106      	bne.n	8002b3a <HAL_RCC_OscConfig+0x76>
 8002b2c:	4b80      	ldr	r3, [pc, #512]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a7f      	ldr	r2, [pc, #508]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	e02e      	b.n	8002b98 <HAL_RCC_OscConfig+0xd4>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x98>
 8002b42:	4b7b      	ldr	r3, [pc, #492]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a7a      	ldr	r2, [pc, #488]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	4b78      	ldr	r3, [pc, #480]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a77      	ldr	r2, [pc, #476]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	e01d      	b.n	8002b98 <HAL_RCC_OscConfig+0xd4>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0xbc>
 8002b66:	4b72      	ldr	r3, [pc, #456]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a71      	ldr	r2, [pc, #452]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	4b6f      	ldr	r3, [pc, #444]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a6e      	ldr	r2, [pc, #440]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	e00b      	b.n	8002b98 <HAL_RCC_OscConfig+0xd4>
 8002b80:	4b6b      	ldr	r3, [pc, #428]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a6a      	ldr	r2, [pc, #424]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	4b68      	ldr	r3, [pc, #416]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a67      	ldr	r2, [pc, #412]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fd ff34 	bl	8000a0c <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7fd ff30 	bl	8000a0c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	; 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e292      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bba:	4b5d      	ldr	r3, [pc, #372]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0xe4>
 8002bc6:	e014      	b.n	8002bf2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7fd ff20 	bl	8000a0c <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7fd ff1c 	bl	8000a0c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	; 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e27e      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be2:	4b53      	ldr	r3, [pc, #332]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x10c>
 8002bee:	e000      	b.n	8002bf2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d063      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bfe:	4b4c      	ldr	r3, [pc, #304]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00b      	beq.n	8002c22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c0a:	4b49      	ldr	r3, [pc, #292]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d11c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x18c>
 8002c16:	4b46      	ldr	r3, [pc, #280]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d116      	bne.n	8002c50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c22:	4b43      	ldr	r3, [pc, #268]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d005      	beq.n	8002c3a <HAL_RCC_OscConfig+0x176>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d001      	beq.n	8002c3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e252      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4939      	ldr	r1, [pc, #228]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4e:	e03a      	b.n	8002cc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d020      	beq.n	8002c9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c58:	4b36      	ldr	r3, [pc, #216]	; (8002d34 <HAL_RCC_OscConfig+0x270>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5e:	f7fd fed5 	bl	8000a0c <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c66:	f7fd fed1 	bl	8000a0c <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e233      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c78:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c84:	4b2a      	ldr	r3, [pc, #168]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4927      	ldr	r1, [pc, #156]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	600b      	str	r3, [r1, #0]
 8002c98:	e015      	b.n	8002cc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9a:	4b26      	ldr	r3, [pc, #152]	; (8002d34 <HAL_RCC_OscConfig+0x270>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca0:	f7fd feb4 	bl	8000a0c <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca8:	f7fd feb0 	bl	8000a0c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e212      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cba:	4b1d      	ldr	r3, [pc, #116]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d03a      	beq.n	8002d48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d019      	beq.n	8002d0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cda:	4b17      	ldr	r3, [pc, #92]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce0:	f7fd fe94 	bl	8000a0c <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce8:	f7fd fe90 	bl	8000a0c <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e1f2      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d06:	2001      	movs	r0, #1
 8002d08:	f000 fbca 	bl	80034a0 <RCC_Delay>
 8002d0c:	e01c      	b.n	8002d48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <HAL_RCC_OscConfig+0x274>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d14:	f7fd fe7a 	bl	8000a0c <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1a:	e00f      	b.n	8002d3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d1c:	f7fd fe76 	bl	8000a0c <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d908      	bls.n	8002d3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e1d8      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	42420000 	.word	0x42420000
 8002d38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d3c:	4b9b      	ldr	r3, [pc, #620]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1e9      	bne.n	8002d1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80a6 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d56:	2300      	movs	r3, #0
 8002d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5a:	4b94      	ldr	r3, [pc, #592]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10d      	bne.n	8002d82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d66:	4b91      	ldr	r3, [pc, #580]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	4a90      	ldr	r2, [pc, #576]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d70:	61d3      	str	r3, [r2, #28]
 8002d72:	4b8e      	ldr	r3, [pc, #568]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d82:	4b8b      	ldr	r3, [pc, #556]	; (8002fb0 <HAL_RCC_OscConfig+0x4ec>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d118      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d8e:	4b88      	ldr	r3, [pc, #544]	; (8002fb0 <HAL_RCC_OscConfig+0x4ec>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a87      	ldr	r2, [pc, #540]	; (8002fb0 <HAL_RCC_OscConfig+0x4ec>)
 8002d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d9a:	f7fd fe37 	bl	8000a0c <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da2:	f7fd fe33 	bl	8000a0c <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b64      	cmp	r3, #100	; 0x64
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e195      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db4:	4b7e      	ldr	r3, [pc, #504]	; (8002fb0 <HAL_RCC_OscConfig+0x4ec>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d106      	bne.n	8002dd6 <HAL_RCC_OscConfig+0x312>
 8002dc8:	4b78      	ldr	r3, [pc, #480]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002dca:	6a1b      	ldr	r3, [r3, #32]
 8002dcc:	4a77      	ldr	r2, [pc, #476]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6213      	str	r3, [r2, #32]
 8002dd4:	e02d      	b.n	8002e32 <HAL_RCC_OscConfig+0x36e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x334>
 8002dde:	4b73      	ldr	r3, [pc, #460]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4a72      	ldr	r2, [pc, #456]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	6213      	str	r3, [r2, #32]
 8002dea:	4b70      	ldr	r3, [pc, #448]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	4a6f      	ldr	r2, [pc, #444]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002df0:	f023 0304 	bic.w	r3, r3, #4
 8002df4:	6213      	str	r3, [r2, #32]
 8002df6:	e01c      	b.n	8002e32 <HAL_RCC_OscConfig+0x36e>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	2b05      	cmp	r3, #5
 8002dfe:	d10c      	bne.n	8002e1a <HAL_RCC_OscConfig+0x356>
 8002e00:	4b6a      	ldr	r3, [pc, #424]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	4a69      	ldr	r2, [pc, #420]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002e06:	f043 0304 	orr.w	r3, r3, #4
 8002e0a:	6213      	str	r3, [r2, #32]
 8002e0c:	4b67      	ldr	r3, [pc, #412]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4a66      	ldr	r2, [pc, #408]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6213      	str	r3, [r2, #32]
 8002e18:	e00b      	b.n	8002e32 <HAL_RCC_OscConfig+0x36e>
 8002e1a:	4b64      	ldr	r3, [pc, #400]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	4a63      	ldr	r2, [pc, #396]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	6213      	str	r3, [r2, #32]
 8002e26:	4b61      	ldr	r3, [pc, #388]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	4a60      	ldr	r2, [pc, #384]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002e2c:	f023 0304 	bic.w	r3, r3, #4
 8002e30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d015      	beq.n	8002e66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3a:	f7fd fde7 	bl	8000a0c <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e40:	e00a      	b.n	8002e58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e42:	f7fd fde3 	bl	8000a0c <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e143      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e58:	4b54      	ldr	r3, [pc, #336]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002e5a:	6a1b      	ldr	r3, [r3, #32]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0ee      	beq.n	8002e42 <HAL_RCC_OscConfig+0x37e>
 8002e64:	e014      	b.n	8002e90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e66:	f7fd fdd1 	bl	8000a0c <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6c:	e00a      	b.n	8002e84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6e:	f7fd fdcd 	bl	8000a0c <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e12d      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e84:	4b49      	ldr	r3, [pc, #292]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002e86:	6a1b      	ldr	r3, [r3, #32]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1ee      	bne.n	8002e6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e90:	7dfb      	ldrb	r3, [r7, #23]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d105      	bne.n	8002ea2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e96:	4b45      	ldr	r3, [pc, #276]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	4a44      	ldr	r2, [pc, #272]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 808c 	beq.w	8002fc4 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002eac:	4b3f      	ldr	r3, [pc, #252]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb8:	d10e      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002eba:	4b3c      	ldr	r3, [pc, #240]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002ec2:	2b08      	cmp	r3, #8
 8002ec4:	d108      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002ec6:	4b39      	ldr	r3, [pc, #228]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002ece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e103      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d14e      	bne.n	8002f7e <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002ee0:	4b32      	ldr	r3, [pc, #200]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d009      	beq.n	8002f00 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002eec:	4b2f      	ldr	r3, [pc, #188]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0ef      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002f00:	4b2c      	ldr	r3, [pc, #176]	; (8002fb4 <HAL_RCC_OscConfig+0x4f0>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f06:	f7fd fd81 	bl	8000a0c <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002f0e:	f7fd fd7d 	bl	8000a0c <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b64      	cmp	r3, #100	; 0x64
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e0df      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002f20:	4b22      	ldr	r3, [pc, #136]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1f0      	bne.n	8002f0e <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f38:	491c      	ldr	r1, [pc, #112]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002f3e:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4918      	ldr	r1, [pc, #96]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002f50:	4b18      	ldr	r3, [pc, #96]	; (8002fb4 <HAL_RCC_OscConfig+0x4f0>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f56:	f7fd fd59 	bl	8000a0c <HAL_GetTick>
 8002f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002f5c:	e008      	b.n	8002f70 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002f5e:	f7fd fd55 	bl	8000a0c <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b64      	cmp	r3, #100	; 0x64
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e0b7      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002f70:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_RCC_OscConfig+0x49a>
 8002f7c:	e022      	b.n	8002fc4 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f82:	4a0a      	ldr	r2, [pc, #40]	; (8002fac <HAL_RCC_OscConfig+0x4e8>)
 8002f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <HAL_RCC_OscConfig+0x4f0>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f90:	f7fd fd3c 	bl	8000a0c <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002f96:	e00f      	b.n	8002fb8 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002f98:	f7fd fd38 	bl	8000a0c <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b64      	cmp	r3, #100	; 0x64
 8002fa4:	d908      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e09a      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40007000 	.word	0x40007000
 8002fb4:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002fb8:	4b4b      	ldr	r3, [pc, #300]	; (80030e8 <HAL_RCC_OscConfig+0x624>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1e9      	bne.n	8002f98 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8088 	beq.w	80030de <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fce:	4b46      	ldr	r3, [pc, #280]	; (80030e8 <HAL_RCC_OscConfig+0x624>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d068      	beq.n	80030ac <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d14d      	bne.n	800307e <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe2:	4b42      	ldr	r3, [pc, #264]	; (80030ec <HAL_RCC_OscConfig+0x628>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fd fd10 	bl	8000a0c <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fd fd0c 	bl	8000a0c <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e06e      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003002:	4b39      	ldr	r3, [pc, #228]	; (80030e8 <HAL_RCC_OscConfig+0x624>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003016:	d10f      	bne.n	8003038 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8003018:	4b33      	ldr	r3, [pc, #204]	; (80030e8 <HAL_RCC_OscConfig+0x624>)
 800301a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	4931      	ldr	r1, [pc, #196]	; (80030e8 <HAL_RCC_OscConfig+0x624>)
 8003022:	4313      	orrs	r3, r2
 8003024:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003026:	4b30      	ldr	r3, [pc, #192]	; (80030e8 <HAL_RCC_OscConfig+0x624>)
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	f023 020f 	bic.w	r2, r3, #15
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	492d      	ldr	r1, [pc, #180]	; (80030e8 <HAL_RCC_OscConfig+0x624>)
 8003034:	4313      	orrs	r3, r2
 8003036:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003038:	4b2b      	ldr	r3, [pc, #172]	; (80030e8 <HAL_RCC_OscConfig+0x624>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003048:	430b      	orrs	r3, r1
 800304a:	4927      	ldr	r1, [pc, #156]	; (80030e8 <HAL_RCC_OscConfig+0x624>)
 800304c:	4313      	orrs	r3, r2
 800304e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003050:	4b26      	ldr	r3, [pc, #152]	; (80030ec <HAL_RCC_OscConfig+0x628>)
 8003052:	2201      	movs	r2, #1
 8003054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003056:	f7fd fcd9 	bl	8000a0c <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800305e:	f7fd fcd5 	bl	8000a0c <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e037      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003070:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <HAL_RCC_OscConfig+0x624>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x59a>
 800307c:	e02f      	b.n	80030de <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307e:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <HAL_RCC_OscConfig+0x628>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fd fcc2 	bl	8000a0c <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800308c:	f7fd fcbe 	bl	8000a0c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e020      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800309e:	4b12      	ldr	r3, [pc, #72]	; (80030e8 <HAL_RCC_OscConfig+0x624>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x5c8>
 80030aa:	e018      	b.n	80030de <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e013      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030b8:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <HAL_RCC_OscConfig+0x624>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d106      	bne.n	80030da <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d001      	beq.n	80030de <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000
 80030ec:	42420060 	.word	0x42420060

080030f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e0d0      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003104:	4b6a      	ldr	r3, [pc, #424]	; (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d910      	bls.n	8003134 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003112:	4b67      	ldr	r3, [pc, #412]	; (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f023 0207 	bic.w	r2, r3, #7
 800311a:	4965      	ldr	r1, [pc, #404]	; (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	4313      	orrs	r3, r2
 8003120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003122:	4b63      	ldr	r3, [pc, #396]	; (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d001      	beq.n	8003134 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e0b8      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d020      	beq.n	8003182 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800314c:	4b59      	ldr	r3, [pc, #356]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4a58      	ldr	r2, [pc, #352]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003152:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003156:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003164:	4b53      	ldr	r3, [pc, #332]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	4a52      	ldr	r2, [pc, #328]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800316a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800316e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003170:	4b50      	ldr	r3, [pc, #320]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	494d      	ldr	r1, [pc, #308]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	4313      	orrs	r3, r2
 8003180:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d040      	beq.n	8003210 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d107      	bne.n	80031a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003196:	4b47      	ldr	r3, [pc, #284]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d115      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e07f      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ae:	4b41      	ldr	r3, [pc, #260]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e073      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031be:	4b3d      	ldr	r3, [pc, #244]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e06b      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ce:	4b39      	ldr	r3, [pc, #228]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f023 0203 	bic.w	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4936      	ldr	r1, [pc, #216]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031e0:	f7fd fc14 	bl	8000a0c <HAL_GetTick>
 80031e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e6:	e00a      	b.n	80031fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e8:	f7fd fc10 	bl	8000a0c <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e053      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fe:	4b2d      	ldr	r3, [pc, #180]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 020c 	and.w	r2, r3, #12
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	429a      	cmp	r2, r3
 800320e:	d1eb      	bne.n	80031e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003210:	4b27      	ldr	r3, [pc, #156]	; (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d210      	bcs.n	8003240 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321e:	4b24      	ldr	r3, [pc, #144]	; (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 0207 	bic.w	r2, r3, #7
 8003226:	4922      	ldr	r1, [pc, #136]	; (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	4313      	orrs	r3, r2
 800322c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800322e:	4b20      	ldr	r3, [pc, #128]	; (80032b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0307 	and.w	r3, r3, #7
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e032      	b.n	80032a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0304 	and.w	r3, r3, #4
 8003248:	2b00      	cmp	r3, #0
 800324a:	d008      	beq.n	800325e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800324c:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	4916      	ldr	r1, [pc, #88]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d009      	beq.n	800327e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800326a:	4b12      	ldr	r3, [pc, #72]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	490e      	ldr	r1, [pc, #56]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 800327a:	4313      	orrs	r3, r2
 800327c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800327e:	f000 f821 	bl	80032c4 <HAL_RCC_GetSysClockFreq>
 8003282:	4601      	mov	r1, r0
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003290:	5cd3      	ldrb	r3, [r2, r3]
 8003292:	fa21 f303 	lsr.w	r3, r1, r3
 8003296:	4a09      	ldr	r2, [pc, #36]	; (80032bc <HAL_RCC_ClockConfig+0x1cc>)
 8003298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800329a:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <HAL_RCC_ClockConfig+0x1d0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fd fb72 	bl	8000988 <HAL_InitTick>

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40022000 	.word	0x40022000
 80032b4:	40021000 	.word	0x40021000
 80032b8:	08007024 	.word	0x08007024
 80032bc:	20000000 	.word	0x20000000
 80032c0:	20000004 	.word	0x20000004

080032c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032c6:	b091      	sub	sp, #68	; 0x44
 80032c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80032ca:	4b56      	ldr	r3, [pc, #344]	; (8003424 <HAL_RCC_GetSysClockFreq+0x160>)
 80032cc:	f107 0414 	add.w	r4, r7, #20
 80032d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032d2:	c407      	stmia	r4!, {r0, r1, r2}
 80032d4:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80032d6:	4b54      	ldr	r3, [pc, #336]	; (8003428 <HAL_RCC_GetSysClockFreq+0x164>)
 80032d8:	1d3c      	adds	r4, r7, #4
 80032da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	637b      	str	r3, [r7, #52]	; 0x34
 80032e4:	2300      	movs	r3, #0
 80032e6:	633b      	str	r3, [r7, #48]	; 0x30
 80032e8:	2300      	movs	r3, #0
 80032ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ec:	2300      	movs	r3, #0
 80032ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032f8:	2300      	movs	r3, #0
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032fc:	4b4b      	ldr	r3, [pc, #300]	; (800342c <HAL_RCC_GetSysClockFreq+0x168>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	2b04      	cmp	r3, #4
 800330a:	d002      	beq.n	8003312 <HAL_RCC_GetSysClockFreq+0x4e>
 800330c:	2b08      	cmp	r3, #8
 800330e:	d003      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x54>
 8003310:	e07f      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003312:	4b47      	ldr	r3, [pc, #284]	; (8003430 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003314:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003316:	e07f      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331a:	0c9b      	lsrs	r3, r3, #18
 800331c:	f003 030f 	and.w	r3, r3, #15
 8003320:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003324:	4413      	add	r3, r2
 8003326:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800332c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d065      	beq.n	8003402 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003336:	4b3d      	ldr	r3, [pc, #244]	; (800342c <HAL_RCC_GetSysClockFreq+0x168>)
 8003338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333a:	f003 030f 	and.w	r3, r3, #15
 800333e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003342:	4413      	add	r3, r2
 8003344:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8003348:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 800334a:	4b38      	ldr	r3, [pc, #224]	; (800342c <HAL_RCC_GetSysClockFreq+0x168>)
 800334c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d043      	beq.n	80033de <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003356:	4b35      	ldr	r3, [pc, #212]	; (800342c <HAL_RCC_GetSysClockFreq+0x168>)
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	3301      	adds	r3, #1
 8003362:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003364:	4b31      	ldr	r3, [pc, #196]	; (800342c <HAL_RCC_GetSysClockFreq+0x168>)
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	0a1b      	lsrs	r3, r3, #8
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	3302      	adds	r3, #2
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	4619      	mov	r1, r3
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337c:	f04f 0400 	mov.w	r4, #0
 8003380:	fb03 f502 	mul.w	r5, r3, r2
 8003384:	fb01 f004 	mul.w	r0, r1, r4
 8003388:	4428      	add	r0, r5
 800338a:	fba1 3403 	umull	r3, r4, r1, r3
 800338e:	1902      	adds	r2, r0, r4
 8003390:	4614      	mov	r4, r2
 8003392:	4a27      	ldr	r2, [pc, #156]	; (8003430 <HAL_RCC_GetSysClockFreq+0x16c>)
 8003394:	fb02 f104 	mul.w	r1, r2, r4
 8003398:	2200      	movs	r2, #0
 800339a:	fb02 f203 	mul.w	r2, r2, r3
 800339e:	440a      	add	r2, r1
 80033a0:	4923      	ldr	r1, [pc, #140]	; (8003430 <HAL_RCC_GetSysClockFreq+0x16c>)
 80033a2:	fba3 5601 	umull	r5, r6, r3, r1
 80033a6:	1993      	adds	r3, r2, r6
 80033a8:	461e      	mov	r6, r3
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	4619      	mov	r1, r3
 80033ae:	f04f 0200 	mov.w	r2, #0
 80033b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b4:	f04f 0400 	mov.w	r4, #0
 80033b8:	fb03 fc02 	mul.w	ip, r3, r2
 80033bc:	fb01 f004 	mul.w	r0, r1, r4
 80033c0:	4460      	add	r0, ip
 80033c2:	fba1 3403 	umull	r3, r4, r1, r3
 80033c6:	1902      	adds	r2, r0, r4
 80033c8:	4614      	mov	r4, r2
 80033ca:	461a      	mov	r2, r3
 80033cc:	4623      	mov	r3, r4
 80033ce:	4628      	mov	r0, r5
 80033d0:	4631      	mov	r1, r6
 80033d2:	f7fc ff27 	bl	8000224 <__aeabi_uldivmod>
 80033d6:	4603      	mov	r3, r0
 80033d8:	460c      	mov	r4, r1
 80033da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033dc:	e007      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80033de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e0:	4a13      	ldr	r2, [pc, #76]	; (8003430 <HAL_RCC_GetSysClockFreq+0x16c>)
 80033e2:	fb02 f203 	mul.w	r2, r2, r3
 80033e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80033ee:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80033f2:	461a      	mov	r2, r3
 80033f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d108      	bne.n	800340c <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 80033fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033fc:	085b      	lsrs	r3, r3, #1
 80033fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003400:	e004      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003404:	4a0b      	ldr	r2, [pc, #44]	; (8003434 <HAL_RCC_GetSysClockFreq+0x170>)
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 800340c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800340e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003410:	e002      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003412:	4b09      	ldr	r3, [pc, #36]	; (8003438 <HAL_RCC_GetSysClockFreq+0x174>)
 8003414:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003416:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800341a:	4618      	mov	r0, r3
 800341c:	3744      	adds	r7, #68	; 0x44
 800341e:	46bd      	mov	sp, r7
 8003420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003422:	bf00      	nop
 8003424:	08006ff8 	.word	0x08006ff8
 8003428:	08007008 	.word	0x08007008
 800342c:	40021000 	.word	0x40021000
 8003430:	00989680 	.word	0x00989680
 8003434:	003d0900 	.word	0x003d0900
 8003438:	007a1200 	.word	0x007a1200

0800343c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003440:	4b02      	ldr	r3, [pc, #8]	; (800344c <HAL_RCC_GetHCLKFreq+0x10>)
 8003442:	681b      	ldr	r3, [r3, #0]
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr
 800344c:	20000000 	.word	0x20000000

08003450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003454:	f7ff fff2 	bl	800343c <HAL_RCC_GetHCLKFreq>
 8003458:	4601      	mov	r1, r0
 800345a:	4b05      	ldr	r3, [pc, #20]	; (8003470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	4a03      	ldr	r2, [pc, #12]	; (8003474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003466:	5cd3      	ldrb	r3, [r2, r3]
 8003468:	fa21 f303 	lsr.w	r3, r1, r3
}
 800346c:	4618      	mov	r0, r3
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	08007034 	.word	0x08007034

08003478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800347c:	f7ff ffde 	bl	800343c <HAL_RCC_GetHCLKFreq>
 8003480:	4601      	mov	r1, r0
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	0adb      	lsrs	r3, r3, #11
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	4a03      	ldr	r2, [pc, #12]	; (800349c <HAL_RCC_GetPCLK2Freq+0x24>)
 800348e:	5cd3      	ldrb	r3, [r2, r3]
 8003490:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003494:	4618      	mov	r0, r3
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40021000 	.word	0x40021000
 800349c:	08007034 	.word	0x08007034

080034a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034a8:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <RCC_Delay+0x34>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <RCC_Delay+0x38>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	0a5b      	lsrs	r3, r3, #9
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80034bc:	bf00      	nop
  }
  while (Delay --);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1e5a      	subs	r2, r3, #1
 80034c2:	60fa      	str	r2, [r7, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1f9      	bne.n	80034bc <RCC_Delay+0x1c>
}
 80034c8:	bf00      	nop
 80034ca:	3714      	adds	r7, #20
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000000 	.word	0x20000000
 80034d8:	10624dd3 	.word	0x10624dd3

080034dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d07d      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80034fc:	2300      	movs	r3, #0
 80034fe:	76fb      	strb	r3, [r7, #27]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003500:	4b8b      	ldr	r3, [pc, #556]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10d      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800350c:	4b88      	ldr	r3, [pc, #544]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	4a87      	ldr	r2, [pc, #540]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003516:	61d3      	str	r3, [r2, #28]
 8003518:	4b85      	ldr	r3, [pc, #532]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003524:	2301      	movs	r3, #1
 8003526:	76fb      	strb	r3, [r7, #27]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003528:	4b82      	ldr	r3, [pc, #520]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003530:	2b00      	cmp	r3, #0
 8003532:	d118      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003534:	4b7f      	ldr	r3, [pc, #508]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a7e      	ldr	r2, [pc, #504]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800353a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003540:	f7fd fa64 	bl	8000a0c <HAL_GetTick>
 8003544:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003546:	e008      	b.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003548:	f7fd fa60 	bl	8000a0c <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b64      	cmp	r3, #100	; 0x64
 8003554:	d901      	bls.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x7e>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e0e5      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355a:	4b76      	ldr	r3, [pc, #472]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f0      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x6c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003566:	4b72      	ldr	r3, [pc, #456]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800356e:	613b      	str	r3, [r7, #16]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d02e      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	429a      	cmp	r2, r3
 8003582:	d027      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003584:	4b6a      	ldr	r3, [pc, #424]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800358c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800358e:	4b6a      	ldr	r3, [pc, #424]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003590:	2201      	movs	r2, #1
 8003592:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003594:	4b68      	ldr	r3, [pc, #416]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800359a:	4a65      	ldr	r2, [pc, #404]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d014      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035aa:	f7fd fa2f 	bl	8000a0c <HAL_GetTick>
 80035ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b0:	e00a      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b2:	f7fd fa2b 	bl	8000a0c <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e0ae      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x24a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c8:	4b59      	ldr	r3, [pc, #356]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d0ee      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035d4:	4b56      	ldr	r3, [pc, #344]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	4953      	ldr	r1, [pc, #332]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035e6:	7efb      	ldrb	r3, [r7, #27]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d105      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ec:	4b50      	ldr	r3, [pc, #320]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	4a4f      	ldr	r2, [pc, #316]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80035f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003604:	4b4a      	ldr	r3, [pc, #296]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4947      	ldr	r1, [pc, #284]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003612:	4313      	orrs	r3, r2
 8003614:	604b      	str	r3, [r1, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d008      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003622:	4b43      	ldr	r3, [pc, #268]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	4940      	ldr	r1, [pc, #256]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003630:	4313      	orrs	r3, r2
 8003632:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d008      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));

    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8003640:	4b3b      	ldr	r3, [pc, #236]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	4938      	ldr	r1, [pc, #224]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800364e:	4313      	orrs	r3, r2
 8003650:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8003652:	4b37      	ldr	r3, [pc, #220]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d105      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x18e>
 800365e:	4b34      	ldr	r3, [pc, #208]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Update flag to indicate that PLL I2S should be active */
    pllactive = 1;
 800366a:	2301      	movs	r3, #1
 800366c:	61fb      	str	r3, [r7, #28]
  }

  /* Check if PLL I2S need to be enabled */
  if (pllactive == 1)
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d148      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x22a>
  {
    /* Enable PLL I2S only if not active */
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8003674:	4b2e      	ldr	r3, [pc, #184]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d138      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
      assert_param(IS_RCC_PLLI2S_MUL(PeriphClkInit->PLLI2S.PLLI2SMUL));
      assert_param(IS_RCC_HSE_PREDIV2(PeriphClkInit->PLLI2S.HSEPrediv2Value));

      /* Prediv2 can be written only when the PLL2 is disabled. */
      /* Return an error only if new value is different from the programmed value */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003680:	4b2b      	ldr	r3, [pc, #172]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d009      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
          (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 800368c:	4b28      	ldr	r3, [pc, #160]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2ON) && \
 8003698:	429a      	cmp	r2, r3
 800369a:	d001      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e042      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      }

      /* Configure the HSE prediv2 factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80036a0:	4b23      	ldr	r3, [pc, #140]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	4920      	ldr	r1, [pc, #128]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Configure the main PLLI2S multiplication factors. */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 80036b2:	4b1f      	ldr	r3, [pc, #124]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	f423 4270 	bic.w	r2, r3, #61440	; 0xf000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	491c      	ldr	r1, [pc, #112]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	62cb      	str	r3, [r1, #44]	; 0x2c

      /* Enable the main PLLI2S. */
      __HAL_RCC_PLLI2S_ENABLE();
 80036c4:	4b1d      	ldr	r3, [pc, #116]	; (800373c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ca:	f7fd f99f 	bl	8000a0c <HAL_GetTick>
 80036ce:	6178      	str	r0, [r7, #20]

      /* Wait till PLLI2S is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036d0:	e008      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
      {
        if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036d2:	f7fd f99b 	bl	8000a0c <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	2b64      	cmp	r3, #100	; 0x64
 80036de:	d901      	bls.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
        {
          return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e020      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d0f0      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 80036f0:	e009      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      }
    }
    else
    {
      /* Return an error only if user wants to change the PLLI2SMUL whereas PLLI2S is active */
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 80036f2:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80036f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f6:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d001      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x22a>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e00f      	b.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x24a>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0310 	and.w	r3, r3, #16
 800370e:	2b00      	cmp	r3, #0
 8003710:	d008      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003712:	4b07      	ldr	r3, [pc, #28]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	4904      	ldr	r1, [pc, #16]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8003720:	4313      	orrs	r3, r2
 8003722:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3720      	adds	r7, #32
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000
 8003734:	40007000 	.word	0x40007000
 8003738:	42420440 	.word	0x42420440
 800373c:	42420070 	.word	0x42420070

08003740 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e03f      	b.n	80037d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fd f804 	bl	8000774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2224      	movs	r2, #36	; 0x24
 8003770:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003782:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fb39 	bl	8003dfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003798:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	695a      	ldr	r2, [r3, #20]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b08a      	sub	sp, #40	; 0x28
 80037de:	af02      	add	r7, sp, #8
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	603b      	str	r3, [r7, #0]
 80037e6:	4613      	mov	r3, r2
 80037e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b20      	cmp	r3, #32
 80037f8:	d17c      	bne.n	80038f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_UART_Transmit+0x2c>
 8003800:	88fb      	ldrh	r3, [r7, #6]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e075      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_UART_Transmit+0x3e>
 8003814:	2302      	movs	r3, #2
 8003816:	e06e      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2221      	movs	r2, #33	; 0x21
 800382a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800382e:	f7fd f8ed 	bl	8000a0c <HAL_GetTick>
 8003832:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	88fa      	ldrh	r2, [r7, #6]
 8003838:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	88fa      	ldrh	r2, [r7, #6]
 800383e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003848:	d108      	bne.n	800385c <HAL_UART_Transmit+0x82>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d104      	bne.n	800385c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	61bb      	str	r3, [r7, #24]
 800385a:	e003      	b.n	8003864 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003860:	2300      	movs	r3, #0
 8003862:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800386c:	e02a      	b.n	80038c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2200      	movs	r2, #0
 8003876:	2180      	movs	r1, #128	; 0x80
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f95c 	bl	8003b36 <UART_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e036      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10b      	bne.n	80038a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800389c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	3302      	adds	r3, #2
 80038a2:	61bb      	str	r3, [r7, #24]
 80038a4:	e007      	b.n	80038b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	3301      	adds	r3, #1
 80038b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1cf      	bne.n	800386e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2200      	movs	r2, #0
 80038d6:	2140      	movs	r1, #64	; 0x40
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f92c 	bl	8003b36 <UART_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e006      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	e000      	b.n	80038f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038f4:	2302      	movs	r3, #2
  }
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3720      	adds	r7, #32
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003920:	2300      	movs	r3, #0
 8003922:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10d      	bne.n	8003952 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_UART_IRQHandler+0x52>
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f9d5 	bl	8003cfa <UART_Receive_IT>
      return;
 8003950:	e0d1      	b.n	8003af6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80b0 	beq.w	8003aba <HAL_UART_IRQHandler+0x1ba>
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d105      	bne.n	8003970 <HAL_UART_IRQHandler+0x70>
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 80a5 	beq.w	8003aba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00a      	beq.n	8003990 <HAL_UART_IRQHandler+0x90>
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003988:	f043 0201 	orr.w	r2, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00a      	beq.n	80039b0 <HAL_UART_IRQHandler+0xb0>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f003 0301 	and.w	r3, r3, #1
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d005      	beq.n	80039b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a8:	f043 0202 	orr.w	r2, r3, #2
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <HAL_UART_IRQHandler+0xd0>
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c8:	f043 0204 	orr.w	r2, r3, #4
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00f      	beq.n	80039fa <HAL_UART_IRQHandler+0xfa>
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	f003 0320 	and.w	r3, r3, #32
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d104      	bne.n	80039ee <HAL_UART_IRQHandler+0xee>
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f2:	f043 0208 	orr.w	r2, r3, #8
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d078      	beq.n	8003af4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	f003 0320 	and.w	r3, r3, #32
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d007      	beq.n	8003a1c <HAL_UART_IRQHandler+0x11c>
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f96f 	bl	8003cfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	bf14      	ite	ne
 8003a2a:	2301      	movne	r3, #1
 8003a2c:	2300      	moveq	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d102      	bne.n	8003a44 <HAL_UART_IRQHandler+0x144>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d031      	beq.n	8003aa8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f8c0 	bl	8003bca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d023      	beq.n	8003aa0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695a      	ldr	r2, [r3, #20]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a66:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d013      	beq.n	8003a98 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a74:	4a21      	ldr	r2, [pc, #132]	; (8003afc <HAL_UART_IRQHandler+0x1fc>)
 8003a76:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fd f8ff 	bl	8000c80 <HAL_DMA_Abort_IT>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d016      	beq.n	8003ab6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a92:	4610      	mov	r0, r2
 8003a94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a96:	e00e      	b.n	8003ab6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f843 	bl	8003b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a9e:	e00a      	b.n	8003ab6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 f83f 	bl	8003b24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aa6:	e006      	b.n	8003ab6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f83b 	bl	8003b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003ab4:	e01e      	b.n	8003af4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ab6:	bf00      	nop
    return;
 8003ab8:	e01c      	b.n	8003af4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x1d6>
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f8ac 	bl	8003c2c <UART_Transmit_IT>
    return;
 8003ad4:	e00f      	b.n	8003af6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <HAL_UART_IRQHandler+0x1f6>
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d005      	beq.n	8003af6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f8ed 	bl	8003cca <UART_EndTransmit_IT>
    return;
 8003af0:	bf00      	nop
 8003af2:	e000      	b.n	8003af6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003af4:	bf00      	nop
  }
}
 8003af6:	3720      	adds	r7, #32
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	08003c05 	.word	0x08003c05

08003b00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr

08003b12 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b12:	b480      	push	{r7}
 8003b14:	b083      	sub	sp, #12
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bc80      	pop	{r7}
 8003b22:	4770      	bx	lr

08003b24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr

08003b36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	603b      	str	r3, [r7, #0]
 8003b42:	4613      	mov	r3, r2
 8003b44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b46:	e02c      	b.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4e:	d028      	beq.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d007      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b56:	f7fc ff59 	bl	8000a0c <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	69ba      	ldr	r2, [r7, #24]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d21d      	bcs.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b74:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695a      	ldr	r2, [r3, #20]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e00f      	b.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4013      	ands	r3, r2
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	bf0c      	ite	eq
 8003bb2:	2301      	moveq	r3, #1
 8003bb4:	2300      	movne	r3, #0
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	461a      	mov	r2, r3
 8003bba:	79fb      	ldrb	r3, [r7, #7]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d0c3      	beq.n	8003b48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b083      	sub	sp, #12
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003be0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695a      	ldr	r2, [r3, #20]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0201 	bic.w	r2, r2, #1
 8003bf0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr

08003c04 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f7ff ff80 	bl	8003b24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b21      	cmp	r3, #33	; 0x21
 8003c3e:	d13e      	bne.n	8003cbe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c48:	d114      	bne.n	8003c74 <UART_Transmit_IT+0x48>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d110      	bne.n	8003c74 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	881b      	ldrh	r3, [r3, #0]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c66:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	1c9a      	adds	r2, r3, #2
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	621a      	str	r2, [r3, #32]
 8003c72:	e008      	b.n	8003c86 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	1c59      	adds	r1, r3, #1
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6211      	str	r1, [r2, #32]
 8003c7e:	781a      	ldrb	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	4619      	mov	r1, r3
 8003c94:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10f      	bne.n	8003cba <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ca8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68da      	ldr	r2, [r3, #12]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	e000      	b.n	8003cc0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
  }
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bc80      	pop	{r7}
 8003cc8:	4770      	bx	lr

08003cca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff ff08 	bl	8003b00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b22      	cmp	r3, #34	; 0x22
 8003d0c:	d170      	bne.n	8003df0 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d16:	d117      	bne.n	8003d48 <UART_Receive_IT+0x4e>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d113      	bne.n	8003d48 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d28:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	1c9a      	adds	r2, r3, #2
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	629a      	str	r2, [r3, #40]	; 0x28
 8003d46:	e026      	b.n	8003d96 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5a:	d007      	beq.n	8003d6c <UART_Receive_IT+0x72>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10a      	bne.n	8003d7a <UART_Receive_IT+0x80>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d106      	bne.n	8003d7a <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	701a      	strb	r2, [r3, #0]
 8003d78:	e008      	b.n	8003d8c <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	4619      	mov	r1, r3
 8003da4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d120      	bne.n	8003dec <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68da      	ldr	r2, [r3, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0220 	bic.w	r2, r2, #32
 8003db8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68da      	ldr	r2, [r3, #12]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7ff fe95 	bl	8003b12 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003de8:	2300      	movs	r3, #0
 8003dea:	e002      	b.n	8003df2 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003dec:	2300      	movs	r3, #0
 8003dee:	e000      	b.n	8003df2 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003df0:	2302      	movs	r3, #2
  }
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e36:	f023 030c 	bic.w	r3, r3, #12
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6812      	ldr	r2, [r2, #0]
 8003e3e:	68b9      	ldr	r1, [r7, #8]
 8003e40:	430b      	orrs	r3, r1
 8003e42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a2c      	ldr	r2, [pc, #176]	; (8003f10 <UART_SetConfig+0x114>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d103      	bne.n	8003e6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e64:	f7ff fb08 	bl	8003478 <HAL_RCC_GetPCLK2Freq>
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	e002      	b.n	8003e72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e6c:	f7ff faf0 	bl	8003450 <HAL_RCC_GetPCLK1Freq>
 8003e70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	4613      	mov	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	009a      	lsls	r2, r3, #2
 8003e7c:	441a      	add	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e88:	4a22      	ldr	r2, [pc, #136]	; (8003f14 <UART_SetConfig+0x118>)
 8003e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	0119      	lsls	r1, r3, #4
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	4613      	mov	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	009a      	lsls	r2, r3, #2
 8003e9c:	441a      	add	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ea8:	4b1a      	ldr	r3, [pc, #104]	; (8003f14 <UART_SetConfig+0x118>)
 8003eaa:	fba3 0302 	umull	r0, r3, r3, r2
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	2064      	movs	r0, #100	; 0x64
 8003eb2:	fb00 f303 	mul.w	r3, r0, r3
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	3332      	adds	r3, #50	; 0x32
 8003ebc:	4a15      	ldr	r2, [pc, #84]	; (8003f14 <UART_SetConfig+0x118>)
 8003ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ec8:	4419      	add	r1, r3
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	009a      	lsls	r2, r3, #2
 8003ed4:	441a      	add	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <UART_SetConfig+0x118>)
 8003ee2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	2064      	movs	r0, #100	; 0x64
 8003eea:	fb00 f303 	mul.w	r3, r0, r3
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	3332      	adds	r3, #50	; 0x32
 8003ef4:	4a07      	ldr	r2, [pc, #28]	; (8003f14 <UART_SetConfig+0x118>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	f003 020f 	and.w	r2, r3, #15
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	440a      	add	r2, r1
 8003f06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f08:	bf00      	nop
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40013800 	.word	0x40013800
 8003f14:	51eb851f 	.word	0x51eb851f

08003f18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f18:	b084      	sub	sp, #16
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	f107 001c 	add.w	r0, r7, #28
 8003f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d122      	bne.n	8003f76 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d105      	bne.n	8003f6a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f922 	bl	80041b4 <USB_CoreReset>
 8003f70:	4603      	mov	r3, r0
 8003f72:	73fb      	strb	r3, [r7, #15]
 8003f74:	e010      	b.n	8003f98 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f916 	bl	80041b4 <USB_CoreReset>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fa4:	b004      	add	sp, #16
 8003fa6:	4770      	bx	lr

08003fa8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f043 0201 	orr.w	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr

08003fc8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f023 0201 	bic.w	r2, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d106      	bne.n	8004014 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	e00b      	b.n	800402c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	60da      	str	r2, [r3, #12]
 8004026:	e001      	b.n	800402c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e003      	b.n	8004034 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800402c:	2032      	movs	r0, #50	; 0x32
 800402e:	f7fc fcf7 	bl	8000a20 <HAL_Delay>

  return HAL_OK;
 8004032:	2300      	movs	r3, #0
}
 8004034:	4618      	mov	r0, r3
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	019b      	lsls	r3, r3, #6
 800404e:	f043 0220 	orr.w	r2, r3, #32
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3301      	adds	r3, #1
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4a08      	ldr	r2, [pc, #32]	; (8004080 <USB_FlushTxFifo+0x44>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d901      	bls.n	8004068 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e006      	b.n	8004076 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b20      	cmp	r3, #32
 8004072:	d0f0      	beq.n	8004056 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr
 8004080:	00030d40 	.word	0x00030d40

08004084 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2210      	movs	r2, #16
 8004094:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	3301      	adds	r3, #1
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4a08      	ldr	r2, [pc, #32]	; (80040c0 <USB_FlushRxFifo+0x3c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d901      	bls.n	80040a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e006      	b.n	80040b6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f003 0310 	and.w	r3, r3, #16
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d0f0      	beq.n	8004096 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr
 80040c0:	00030d40 	.word	0x00030d40

080040c4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b089      	sub	sp, #36	; 0x24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	4611      	mov	r1, r2
 80040d0:	461a      	mov	r2, r3
 80040d2:	460b      	mov	r3, r1
 80040d4:	71fb      	strb	r3, [r7, #7]
 80040d6:	4613      	mov	r3, r2
 80040d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80040e2:	88bb      	ldrh	r3, [r7, #4]
 80040e4:	3303      	adds	r3, #3
 80040e6:	089b      	lsrs	r3, r3, #2
 80040e8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80040ea:	2300      	movs	r3, #0
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	e00f      	b.n	8004110 <USB_WritePacket+0x4c>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80040f0:	79fb      	ldrb	r3, [r7, #7]
 80040f2:	031a      	lsls	r2, r3, #12
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	4413      	add	r3, r2
 80040f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040fc:	461a      	mov	r2, r3
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	3304      	adds	r3, #4
 8004108:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	3301      	adds	r3, #1
 800410e:	61bb      	str	r3, [r7, #24]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	429a      	cmp	r2, r3
 8004116:	d3eb      	bcc.n	80040f0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3724      	adds	r7, #36	; 0x24
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr

08004124 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004124:	b480      	push	{r7}
 8004126:	b089      	sub	sp, #36	; 0x24
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	4613      	mov	r3, r2
 8004130:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800413a:	88fb      	ldrh	r3, [r7, #6]
 800413c:	3303      	adds	r3, #3
 800413e:	089b      	lsrs	r3, r3, #2
 8004140:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004142:	2300      	movs	r3, #0
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	e00b      	b.n	8004160 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	601a      	str	r2, [r3, #0]
    pDest++;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	3304      	adds	r3, #4
 8004158:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	3301      	adds	r3, #1
 800415e:	61bb      	str	r3, [r7, #24]
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	429a      	cmp	r2, r3
 8004166:	d3ef      	bcc.n	8004148 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004168:	69fb      	ldr	r3, [r7, #28]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3724      	adds	r7, #36	; 0x24
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4013      	ands	r3, r2
 800418a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800418c:	68fb      	ldr	r3, [r7, #12]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr

08004198 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	f003 0301 	and.w	r3, r3, #1
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr
	...

080041b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3301      	adds	r3, #1
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	4a12      	ldr	r2, [pc, #72]	; (8004214 <USB_CoreReset+0x60>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e01b      	b.n	800420a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	daf2      	bge.n	80041c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f043 0201 	orr.w	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3301      	adds	r3, #1
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4a08      	ldr	r2, [pc, #32]	; (8004214 <USB_CoreReset+0x60>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d901      	bls.n	80041fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e006      	b.n	800420a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	2b01      	cmp	r3, #1
 8004206:	d0f0      	beq.n	80041ea <USB_CoreReset+0x36>

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr
 8004214:	00030d40 	.word	0x00030d40

08004218 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004218:	b084      	sub	sp, #16
 800421a:	b580      	push	{r7, lr}
 800421c:	b084      	sub	sp, #16
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
 8004222:	f107 001c 	add.w	r0, r7, #28
 8004226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004234:	461a      	mov	r2, r3
 8004236:	2300      	movs	r3, #0
 8004238:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSASEN);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBUSBSEN);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	639a      	str	r2, [r3, #56]	; 0x38
  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004260:	f023 0304 	bic.w	r3, r3, #4
 8004264:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004266:	2110      	movs	r1, #16
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f7ff fee7 	bl	800403c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff ff08 	bl	8004084 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	e015      	b.n	80042a6 <USB_HostInit+0x8e>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	4413      	add	r3, r2
 8004282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004286:	461a      	mov	r2, r3
 8004288:	f04f 33ff 	mov.w	r3, #4294967295
 800428c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	4413      	add	r3, r2
 8004296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429a:	461a      	mov	r2, r3
 800429c:	2300      	movs	r3, #0
 800429e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3301      	adds	r3, #1
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d3e5      	bcc.n	800427a <USB_HostInit+0x62>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80042ae:	2101      	movs	r1, #1
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f892 	bl	80043da <USB_DriveVbus>

  HAL_Delay(200U);
 80042b6:	20c8      	movs	r0, #200	; 0xc8
 80042b8:	f7fc fbb2 	bl	8000a20 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f04f 32ff 	mov.w	r2, #4294967295
 80042c8:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2280      	movs	r2, #128	; 0x80
 80042ce:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a0d      	ldr	r2, [pc, #52]	; (8004308 <USB_HostInit+0xf0>)
 80042d4:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a0c      	ldr	r2, [pc, #48]	; (800430c <USB_HostInit+0xf4>)
 80042da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	f043 0210 	orr.w	r2, r3, #16
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	4b08      	ldr	r3, [pc, #32]	; (8004310 <USB_HostInit+0xf8>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80042f6:	2300      	movs	r3, #0
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004302:	b004      	add	sp, #16
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	00600080 	.word	0x00600080
 800430c:	004000e0 	.word	0x004000e0
 8004310:	a3200008 	.word	0xa3200008

08004314 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	460b      	mov	r3, r1
 800431e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004332:	f023 0303 	bic.w	r3, r3, #3
 8004336:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	68f9      	ldr	r1, [r7, #12]
 8004348:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800434c:	4313      	orrs	r3, r2
 800434e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004350:	78fb      	ldrb	r3, [r7, #3]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d107      	bne.n	8004366 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800435c:	461a      	mov	r2, r3
 800435e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004362:	6053      	str	r3, [r2, #4]
 8004364:	e009      	b.n	800437a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004366:	78fb      	ldrb	r3, [r7, #3]
 8004368:	2b02      	cmp	r3, #2
 800436a:	d106      	bne.n	800437a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004372:	461a      	mov	r2, r3
 8004374:	f241 7370 	movw	r3, #6000	; 0x1770
 8004378:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3714      	adds	r7, #20
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr

08004386 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80043a6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80043b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80043b6:	2064      	movs	r0, #100	; 0x64
 80043b8:	f7fc fb32 	bl	8000a20 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80043c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043c8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80043ca:	200a      	movs	r0, #10
 80043cc:	f7fc fb28 	bl	8000a20 <HAL_Delay>

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80043da:	b480      	push	{r7}
 80043dc:	b085      	sub	sp, #20
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80043fe:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <USB_DriveVbus+0x44>
 800440a:	78fb      	ldrb	r3, [r7, #3]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d106      	bne.n	800441e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004418:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800441c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004428:	d109      	bne.n	800443e <USB_DriveVbus+0x64>
 800442a:	78fb      	ldrb	r3, [r7, #3]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d106      	bne.n	800443e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004438:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800443c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr

0800444a <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800444a:	b480      	push	{r7}
 800444c:	b085      	sub	sp, #20
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	0c5b      	lsrs	r3, r3, #17
 8004468:	f003 0303 	and.w	r3, r3, #3
}
 800446c:	4618      	mov	r0, r3
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	bc80      	pop	{r7}
 8004474:	4770      	bx	lr

08004476 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	b29b      	uxth	r3, r3
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr
	...

08004498 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004498:	b480      	push	{r7}
 800449a:	b087      	sub	sp, #28
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	4608      	mov	r0, r1
 80044a2:	4611      	mov	r1, r2
 80044a4:	461a      	mov	r2, r3
 80044a6:	4603      	mov	r3, r0
 80044a8:	70fb      	strb	r3, [r7, #3]
 80044aa:	460b      	mov	r3, r1
 80044ac:	70bb      	strb	r3, [r7, #2]
 80044ae:	4613      	mov	r3, r2
 80044b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80044ba:	78fb      	ldrb	r3, [r7, #3]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c6:	461a      	mov	r2, r3
 80044c8:	f04f 33ff 	mov.w	r3, #4294967295
 80044cc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80044ce:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80044d2:	2b03      	cmp	r3, #3
 80044d4:	d867      	bhi.n	80045a6 <USB_HC_Init+0x10e>
 80044d6:	a201      	add	r2, pc, #4	; (adr r2, 80044dc <USB_HC_Init+0x44>)
 80044d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044dc:	080044ed 	.word	0x080044ed
 80044e0:	08004569 	.word	0x08004569
 80044e4:	080044ed 	.word	0x080044ed
 80044e8:	0800452b 	.word	0x0800452b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80044ec:	78fb      	ldrb	r3, [r7, #3]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f8:	461a      	mov	r2, r3
 80044fa:	f240 439d 	movw	r3, #1181	; 0x49d
 80044fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004500:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004504:	2b00      	cmp	r3, #0
 8004506:	da51      	bge.n	80045ac <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4413      	add	r3, r2
 8004510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	78fa      	ldrb	r2, [r7, #3]
 8004518:	0151      	lsls	r1, r2, #5
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	440a      	add	r2, r1
 800451e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004526:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004528:	e040      	b.n	80045ac <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800452a:	78fb      	ldrb	r3, [r7, #3]
 800452c:	015a      	lsls	r2, r3, #5
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4413      	add	r3, r2
 8004532:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004536:	461a      	mov	r2, r3
 8004538:	f240 639d 	movw	r3, #1693	; 0x69d
 800453c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800453e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004542:	2b00      	cmp	r3, #0
 8004544:	da34      	bge.n	80045b0 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004546:	78fb      	ldrb	r3, [r7, #3]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	4413      	add	r3, r2
 800454e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	78fa      	ldrb	r2, [r7, #3]
 8004556:	0151      	lsls	r1, r2, #5
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	440a      	add	r2, r1
 800455c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004564:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004566:	e023      	b.n	80045b0 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	4413      	add	r3, r2
 8004570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004574:	461a      	mov	r2, r3
 8004576:	f240 2325 	movw	r3, #549	; 0x225
 800457a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800457c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004580:	2b00      	cmp	r3, #0
 8004582:	da17      	bge.n	80045b4 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4413      	add	r3, r2
 800458c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	78fa      	ldrb	r2, [r7, #3]
 8004594:	0151      	lsls	r1, r2, #5
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	440a      	add	r2, r1
 800459a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800459e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80045a2:	60d3      	str	r3, [r2, #12]
      }
      break;
 80045a4:	e006      	b.n	80045b4 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	75fb      	strb	r3, [r7, #23]
      break;
 80045aa:	e004      	b.n	80045b6 <USB_HC_Init+0x11e>
      break;
 80045ac:	bf00      	nop
 80045ae:	e002      	b.n	80045b6 <USB_HC_Init+0x11e>
      break;
 80045b0:	bf00      	nop
 80045b2:	e000      	b.n	80045b6 <USB_HC_Init+0x11e>
      break;
 80045b4:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	78fb      	ldrb	r3, [r7, #3]
 80045c0:	f003 030f 	and.w	r3, r3, #15
 80045c4:	2101      	movs	r1, #1
 80045c6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80045d0:	4313      	orrs	r3, r2
 80045d2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80045e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	da03      	bge.n	80045f0 <USB_HC_Init+0x158>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80045e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	e001      	b.n	80045f4 <USB_HC_Init+0x15c>
  }
  else
  {
    HCcharEpDir = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80045f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d103      	bne.n	8004604 <USB_HC_Init+0x16c>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80045fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	e001      	b.n	8004608 <USB_HC_Init+0x170>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004608:	787b      	ldrb	r3, [r7, #1]
 800460a:	059b      	lsls	r3, r3, #22
 800460c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004610:	78bb      	ldrb	r3, [r7, #2]
 8004612:	02db      	lsls	r3, r3, #11
 8004614:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004618:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800461a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800461e:	049b      	lsls	r3, r3, #18
 8004620:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004624:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004626:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004628:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800462c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004632:	78fb      	ldrb	r3, [r7, #3]
 8004634:	0159      	lsls	r1, r3, #5
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	440b      	add	r3, r1
 800463a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800463e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004644:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004646:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800464a:	2b03      	cmp	r3, #3
 800464c:	d10f      	bne.n	800466e <USB_HC_Init+0x1d6>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	4413      	add	r3, r2
 8004656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	78fa      	ldrb	r2, [r7, #3]
 800465e:	0151      	lsls	r1, r2, #5
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	440a      	add	r2, r1
 8004664:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004668:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800466c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800466e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004670:	4618      	mov	r0, r3
 8004672:	371c      	adds	r7, #28
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop

0800467c <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	785b      	ldrb	r3, [r3, #1]
 800468e:	617b      	str	r3, [r7, #20]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004694:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d018      	beq.n	80046d0 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	8912      	ldrh	r2, [r2, #8]
 80046a6:	4413      	add	r3, r2
 80046a8:	3b01      	subs	r3, #1
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	8912      	ldrh	r2, [r2, #8]
 80046ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80046b2:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 80046b4:	8bfa      	ldrh	r2, [r7, #30]
 80046b6:	8a7b      	ldrh	r3, [r7, #18]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d90b      	bls.n	80046d4 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 80046bc:	8a7b      	ldrh	r3, [r7, #18]
 80046be:	83fb      	strh	r3, [r7, #30]
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80046c0:	8bfb      	ldrh	r3, [r7, #30]
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	8912      	ldrh	r2, [r2, #8]
 80046c6:	fb02 f203 	mul.w	r2, r2, r3
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	611a      	str	r2, [r3, #16]
 80046ce:	e001      	b.n	80046d4 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 80046d0:	2301      	movs	r3, #1
 80046d2:	83fb      	strh	r3, [r7, #30]
  }
  if (hc->ep_is_in != 0U)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	78db      	ldrb	r3, [r3, #3]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d006      	beq.n	80046ea <USB_HC_StartXfer+0x6e>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80046dc:	8bfb      	ldrh	r3, [r7, #30]
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	8912      	ldrh	r2, [r2, #8]
 80046e2:	fb02 f203 	mul.w	r2, r2, r3
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80046f2:	8bfb      	ldrh	r3, [r7, #30]
 80046f4:	04d9      	lsls	r1, r3, #19
 80046f6:	4b5f      	ldr	r3, [pc, #380]	; (8004874 <USB_HC_StartXfer+0x1f8>)
 80046f8:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80046fa:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	7a9b      	ldrb	r3, [r3, #10]
 8004700:	075b      	lsls	r3, r3, #29
 8004702:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004706:	6979      	ldr	r1, [r7, #20]
 8004708:	0148      	lsls	r0, r1, #5
 800470a:	69b9      	ldr	r1, [r7, #24]
 800470c:	4401      	add	r1, r0
 800470e:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004712:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004714:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	bf0c      	ite	eq
 8004726:	2301      	moveq	r3, #1
 8004728:	2300      	movne	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	4413      	add	r3, r2
 8004736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	0151      	lsls	r1, r2, #5
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	440a      	add	r2, r1
 8004744:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004748:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800474c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	4413      	add	r3, r2
 8004756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	7c7b      	ldrb	r3, [r7, #17]
 800475e:	075b      	lsls	r3, r3, #29
 8004760:	6979      	ldr	r1, [r7, #20]
 8004762:	0148      	lsls	r0, r1, #5
 8004764:	69b9      	ldr	r1, [r7, #24]
 8004766:	4401      	add	r1, r0
 8004768:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800476c:	4313      	orrs	r3, r2
 800476e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	4413      	add	r3, r2
 8004778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a3e      	ldr	r2, [pc, #248]	; (8004878 <USB_HC_StartXfer+0x1fc>)
 8004780:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004782:	4b3d      	ldr	r3, [pc, #244]	; (8004878 <USB_HC_StartXfer+0x1fc>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800478a:	4a3b      	ldr	r2, [pc, #236]	; (8004878 <USB_HC_StartXfer+0x1fc>)
 800478c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	78db      	ldrb	r3, [r3, #3]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d006      	beq.n	80047a4 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004796:	4b38      	ldr	r3, [pc, #224]	; (8004878 <USB_HC_StartXfer+0x1fc>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800479e:	4a36      	ldr	r2, [pc, #216]	; (8004878 <USB_HC_StartXfer+0x1fc>)
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	e005      	b.n	80047b0 <USB_HC_StartXfer+0x134>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80047a4:	4b34      	ldr	r3, [pc, #208]	; (8004878 <USB_HC_StartXfer+0x1fc>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80047ac:	4a32      	ldr	r2, [pc, #200]	; (8004878 <USB_HC_StartXfer+0x1fc>)
 80047ae:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80047b0:	4b31      	ldr	r3, [pc, #196]	; (8004878 <USB_HC_StartXfer+0x1fc>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047b8:	4a2f      	ldr	r2, [pc, #188]	; (8004878 <USB_HC_StartXfer+0x1fc>)
 80047ba:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c8:	461a      	mov	r2, r3
 80047ca:	4b2b      	ldr	r3, [pc, #172]	; (8004878 <USB_HC_StartXfer+0x1fc>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	78db      	ldrb	r3, [r3, #3]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d148      	bne.n	800486a <USB_HC_StartXfer+0x1ee>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d044      	beq.n	800486a <USB_HC_StartXfer+0x1ee>
  {
    switch (hc->ep_type)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	79db      	ldrb	r3, [r3, #7]
 80047e4:	2b03      	cmp	r3, #3
 80047e6:	d831      	bhi.n	800484c <USB_HC_StartXfer+0x1d0>
 80047e8:	a201      	add	r2, pc, #4	; (adr r2, 80047f0 <USB_HC_StartXfer+0x174>)
 80047ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ee:	bf00      	nop
 80047f0:	08004801 	.word	0x08004801
 80047f4:	08004825 	.word	0x08004825
 80047f8:	08004801 	.word	0x08004801
 80047fc:	08004825 	.word	0x08004825
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	3303      	adds	r3, #3
 8004806:	089b      	lsrs	r3, r3, #2
 8004808:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800480a:	89fa      	ldrh	r2, [r7, #14]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004810:	b29b      	uxth	r3, r3
 8004812:	429a      	cmp	r2, r3
 8004814:	d91c      	bls.n	8004850 <USB_HC_StartXfer+0x1d4>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f043 0220 	orr.w	r2, r3, #32
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	619a      	str	r2, [r3, #24]
        }
        break;
 8004822:	e015      	b.n	8004850 <USB_HC_StartXfer+0x1d4>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	3303      	adds	r3, #3
 800482a:	089b      	lsrs	r3, r3, #2
 800482c:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800482e:	89fa      	ldrh	r2, [r7, #14]
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	b29b      	uxth	r3, r3
 800483a:	429a      	cmp	r2, r3
 800483c:	d90a      	bls.n	8004854 <USB_HC_StartXfer+0x1d8>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	619a      	str	r2, [r3, #24]
        }
        break;
 800484a:	e003      	b.n	8004854 <USB_HC_StartXfer+0x1d8>

      default:
        break;
 800484c:	bf00      	nop
 800484e:	e002      	b.n	8004856 <USB_HC_StartXfer+0x1da>
        break;
 8004850:	bf00      	nop
 8004852:	e000      	b.n	8004856 <USB_HC_StartXfer+0x1da>
        break;
 8004854:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68d9      	ldr	r1, [r3, #12]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	785a      	ldrb	r2, [r3, #1]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	b29b      	uxth	r3, r3
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f7ff fc2d 	bl	80040c4 <USB_WritePacket>
  }

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3720      	adds	r7, #32
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	1ff80000 	.word	0x1ff80000
 8004878:	200000b8 	.word	0x200000b8

0800487c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	b29b      	uxth	r3, r3
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr

0800489c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80048ac:	78fb      	ldrb	r3, [r7, #3]
 80048ae:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	0c9b      	lsrs	r3, r3, #18
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <USB_HC_Halt+0x3a>
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d16c      	bne.n	80049b0 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	0151      	lsls	r1, r2, #5
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	440a      	add	r2, r1
 80048ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048f4:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d143      	bne.n	800498a <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	4413      	add	r3, r2
 800490a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	0151      	lsls	r1, r2, #5
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	440a      	add	r2, r1
 8004918:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800491c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004920:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4413      	add	r3, r2
 800492a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	0151      	lsls	r1, r2, #5
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	440a      	add	r2, r1
 8004938:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800493c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004940:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	4413      	add	r3, r2
 800494a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	0151      	lsls	r1, r2, #5
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	440a      	add	r2, r1
 8004958:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800495c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004960:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	3301      	adds	r3, #1
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800496e:	d81d      	bhi.n	80049ac <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	015a      	lsls	r2, r3, #5
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	4413      	add	r3, r2
 8004978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004982:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004986:	d0ec      	beq.n	8004962 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004988:	e080      	b.n	8004a8c <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	4413      	add	r3, r2
 8004992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	0151      	lsls	r1, r2, #5
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	440a      	add	r2, r1
 80049a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049a8:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80049aa:	e06f      	b.n	8004a8c <USB_HC_Halt+0x1f0>
          break;
 80049ac:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80049ae:	e06d      	b.n	8004a8c <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	0151      	lsls	r1, r2, #5
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	440a      	add	r2, r1
 80049c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049ce:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d143      	bne.n	8004a68 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	015a      	lsls	r2, r3, #5
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4413      	add	r3, r2
 80049e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	0151      	lsls	r1, r2, #5
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	440a      	add	r2, r1
 80049f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	015a      	lsls	r2, r3, #5
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	0151      	lsls	r1, r2, #5
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	440a      	add	r2, r1
 8004a16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a1e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	0151      	lsls	r1, r2, #5
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	440a      	add	r2, r1
 8004a36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a3e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	3301      	adds	r3, #1
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a4c:	d81d      	bhi.n	8004a8a <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a64:	d0ec      	beq.n	8004a40 <USB_HC_Halt+0x1a4>
 8004a66:	e011      	b.n	8004a8c <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	0151      	lsls	r1, r2, #5
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	440a      	add	r2, r1
 8004a7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	e000      	b.n	8004a8c <USB_HC_Halt+0x1f0>
          break;
 8004a8a:	bf00      	nop
    }
  }

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff fa8d 	bl	8003fc8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8004aae:	2110      	movs	r1, #16
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff fac3 	bl	800403c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff fae4 	bl	8004084 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004abc:	2300      	movs	r3, #0
 8004abe:	613b      	str	r3, [r7, #16]
 8004ac0:	e01f      	b.n	8004b02 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ad8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ae0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ae8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af6:	461a      	mov	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	3301      	adds	r3, #1
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b0f      	cmp	r3, #15
 8004b06:	d9dc      	bls.n	8004ac2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004b08:	2300      	movs	r3, #0
 8004b0a:	613b      	str	r3, [r7, #16]
 8004b0c:	e034      	b.n	8004b78 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b24:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b2c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b34:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b42:	461a      	mov	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b54:	d80c      	bhi.n	8004b70 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b6c:	d0ec      	beq.n	8004b48 <USB_StopHost+0xb0>
 8004b6e:	e000      	b.n	8004b72 <USB_StopHost+0xda>
        break;
 8004b70:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	3301      	adds	r3, #1
 8004b76:	613b      	str	r3, [r7, #16]
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	2b0f      	cmp	r3, #15
 8004b7c:	d9c7      	bls.n	8004b0e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b84:	461a      	mov	r2, r3
 8004b86:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b92:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff fa07 	bl	8003fa8 <USB_EnableGlobalInt>

  return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8004ba4:	b590      	push	{r4, r7, lr}
 8004ba6:	b089      	sub	sp, #36	; 0x24
 8004ba8:	af04      	add	r7, sp, #16
 8004baa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8004bac:	2301      	movs	r3, #1
 8004bae:	2202      	movs	r2, #2
 8004bb0:	2102      	movs	r1, #2
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fca4 	bl	8005500 <USBH_FindInterface>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	2bff      	cmp	r3, #255	; 0xff
 8004bc0:	d002      	beq.n	8004bc8 <USBH_CDC_InterfaceInit+0x24>
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d901      	bls.n	8004bcc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e13d      	b.n	8004e48 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
 8004bce:	4619      	mov	r1, r3
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fc7a 	bl	80054ca <USBH_SelectInterface>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8004bda:	7bbb      	ldrb	r3, [r7, #14]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8004be0:	2302      	movs	r3, #2
 8004be2:	e131      	b.n	8004e48 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8004bea:	2050      	movs	r0, #80	; 0x50
 8004bec:	f002 f928 	bl	8006e40 <malloc>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8004c04:	2302      	movs	r3, #2
 8004c06:	e11f      	b.n	8004e48 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8004c08:	2250      	movs	r2, #80	; 0x50
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	68b8      	ldr	r0, [r7, #8]
 8004c0e:	f002 f927 	bl	8006e60 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	211a      	movs	r1, #26
 8004c18:	fb01 f303 	mul.w	r3, r1, r3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	b25b      	sxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	da15      	bge.n	8004c56 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	211a      	movs	r1, #26
 8004c30:	fb01 f303 	mul.w	r3, r1, r3
 8004c34:	4413      	add	r3, r2
 8004c36:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004c3a:	781a      	ldrb	r2, [r3, #0]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	211a      	movs	r1, #26
 8004c46:	fb01 f303 	mul.w	r3, r1, r3
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004c50:	881a      	ldrh	r2, [r3, #0]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	785b      	ldrb	r3, [r3, #1]
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f001 fd66 	bl	800672e <USBH_AllocPipe>
 8004c62:	4603      	mov	r3, r0
 8004c64:	461a      	mov	r2, r3
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	7819      	ldrb	r1, [r3, #0]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	7858      	ldrb	r0, [r3, #1]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	8952      	ldrh	r2, [r2, #10]
 8004c82:	9202      	str	r2, [sp, #8]
 8004c84:	2203      	movs	r2, #3
 8004c86:	9201      	str	r2, [sp, #4]
 8004c88:	9300      	str	r3, [sp, #0]
 8004c8a:	4623      	mov	r3, r4
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f001 fd1e 	bl	80066d0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f002 f81f 	bl	8006ce0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	210a      	movs	r1, #10
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 fc29 	bl	8005500 <USBH_FindInterface>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	2bff      	cmp	r3, #255	; 0xff
 8004cb6:	d002      	beq.n	8004cbe <USBH_CDC_InterfaceInit+0x11a>
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d901      	bls.n	8004cc2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	e0c2      	b.n	8004e48 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	211a      	movs	r1, #26
 8004cc8:	fb01 f303 	mul.w	r3, r1, r3
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	b25b      	sxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	da16      	bge.n	8004d08 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	211a      	movs	r1, #26
 8004ce0:	fb01 f303 	mul.w	r3, r1, r3
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004cea:	781a      	ldrb	r2, [r3, #0]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	211a      	movs	r1, #26
 8004cf6:	fb01 f303 	mul.w	r3, r1, r3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004d00:	881a      	ldrh	r2, [r3, #0]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	835a      	strh	r2, [r3, #26]
 8004d06:	e015      	b.n	8004d34 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	211a      	movs	r1, #26
 8004d0e:	fb01 f303 	mul.w	r3, r1, r3
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8004d18:	781a      	ldrb	r2, [r3, #0]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	211a      	movs	r1, #26
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	4413      	add	r3, r2
 8004d2a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004d2e:	881a      	ldrh	r2, [r3, #0]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	211a      	movs	r1, #26
 8004d3a:	fb01 f303 	mul.w	r3, r1, r3
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	b25b      	sxtb	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	da16      	bge.n	8004d7a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004d4c:	7bfb      	ldrb	r3, [r7, #15]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	211a      	movs	r1, #26
 8004d52:	fb01 f303 	mul.w	r3, r1, r3
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8004d5c:	781a      	ldrb	r2, [r3, #0]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	211a      	movs	r1, #26
 8004d68:	fb01 f303 	mul.w	r3, r1, r3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004d72:	881a      	ldrh	r2, [r3, #0]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	835a      	strh	r2, [r3, #26]
 8004d78:	e015      	b.n	8004da6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	211a      	movs	r1, #26
 8004d80:	fb01 f303 	mul.w	r3, r1, r3
 8004d84:	4413      	add	r3, r2
 8004d86:	f503 7355 	add.w	r3, r3, #852	; 0x354
 8004d8a:	781a      	ldrb	r2, [r3, #0]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	211a      	movs	r1, #26
 8004d96:	fb01 f303 	mul.w	r3, r1, r3
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004da0:	881a      	ldrh	r2, [r3, #0]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	7b9b      	ldrb	r3, [r3, #14]
 8004daa:	4619      	mov	r1, r3
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f001 fcbe 	bl	800672e <USBH_AllocPipe>
 8004db2:	4603      	mov	r3, r0
 8004db4:	461a      	mov	r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	7bdb      	ldrb	r3, [r3, #15]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f001 fcb4 	bl	800672e <USBH_AllocPipe>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	461a      	mov	r2, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	7b59      	ldrb	r1, [r3, #13]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	7b98      	ldrb	r0, [r3, #14]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	8b12      	ldrh	r2, [r2, #24]
 8004de6:	9202      	str	r2, [sp, #8]
 8004de8:	2202      	movs	r2, #2
 8004dea:	9201      	str	r2, [sp, #4]
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	4623      	mov	r3, r4
 8004df0:	4602      	mov	r2, r0
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f001 fc6c 	bl	80066d0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	7b19      	ldrb	r1, [r3, #12]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	7bd8      	ldrb	r0, [r3, #15]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	8b52      	ldrh	r2, [r2, #26]
 8004e10:	9202      	str	r2, [sp, #8]
 8004e12:	2202      	movs	r2, #2
 8004e14:	9201      	str	r2, [sp, #4]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	4623      	mov	r3, r4
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f001 fc57 	bl	80066d0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	7b5b      	ldrb	r3, [r3, #13]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	4619      	mov	r1, r3
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f001 ff54 	bl	8006ce0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	7b1b      	ldrb	r3, [r3, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	4619      	mov	r1, r3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f001 ff4d 	bl	8006ce0 <USBH_LL_SetToggle>

  return USBH_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd90      	pop	{r4, r7, pc}

08004e50 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00e      	beq.n	8004e88 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f001 fc4c 	bl	800670e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f001 fc77 	bl	8006770 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	7b1b      	ldrb	r3, [r3, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00e      	beq.n	8004eae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	7b1b      	ldrb	r3, [r3, #12]
 8004e94:	4619      	mov	r1, r3
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f001 fc39 	bl	800670e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	7b1b      	ldrb	r3, [r3, #12]
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f001 fc64 	bl	8006770 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	7b5b      	ldrb	r3, [r3, #13]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00e      	beq.n	8004ed4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	7b5b      	ldrb	r3, [r3, #13]
 8004eba:	4619      	mov	r1, r3
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f001 fc26 	bl	800670e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	7b5b      	ldrb	r3, [r3, #13]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f001 fc51 	bl	8006770 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00b      	beq.n	8004ef8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f001 ffb1 	bl	8006e50 <free>
    phost->pActiveClass->pData = 0U;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f14:	69db      	ldr	r3, [r3, #28]
 8004f16:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	3340      	adds	r3, #64	; 0x40
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f8b0 	bl	8005084 <GetLineCoding>
 8004f24:	4603      	mov	r3, r0
 8004f26:	73fb      	strb	r3, [r7, #15]
  if (status == USBH_OK)
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d105      	bne.n	8004f3a <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8004f34:	2102      	movs	r1, #2
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	4798      	blx	r3
  }
  return status;
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d877      	bhi.n	8005058 <USBH_CDC_Process+0x114>
 8004f68:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <USBH_CDC_Process+0x2c>)
 8004f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6e:	bf00      	nop
 8004f70:	08004f85 	.word	0x08004f85
 8004f74:	08004f8b 	.word	0x08004f8b
 8004f78:	08004fbb 	.word	0x08004fbb
 8004f7c:	0800502f 	.word	0x0800502f
 8004f80:	0800503d 	.word	0x0800503d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	73fb      	strb	r3, [r7, #15]
      break;
 8004f88:	e06d      	b.n	8005066 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f896 	bl	80050c2 <SetLineCoding>
 8004f96:	4603      	mov	r3, r0
 8004f98:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004f9a:	7bbb      	ldrb	r3, [r7, #14]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d104      	bne.n	8004faa <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004fa8:	e058      	b.n	800505c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8004faa:	7bbb      	ldrb	r3, [r7, #14]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d055      	beq.n	800505c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2204      	movs	r2, #4
 8004fb4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004fb8:	e050      	b.n	800505c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	3340      	adds	r3, #64	; 0x40
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f85f 	bl	8005084 <GetLineCoding>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004fca:	7bbb      	ldrb	r3, [r7, #14]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d126      	bne.n	800501e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe2:	791b      	ldrb	r3, [r3, #4]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d13b      	bne.n	8005060 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff2:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d133      	bne.n	8005060 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005002:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005004:	429a      	cmp	r2, r3
 8005006:	d12b      	bne.n	8005060 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005010:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005012:	429a      	cmp	r2, r3
 8005014:	d124      	bne.n	8005060 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f99f 	bl	800535a <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800501c:	e020      	b.n	8005060 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800501e:	7bbb      	ldrb	r3, [r7, #14]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d01d      	beq.n	8005060 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2204      	movs	r2, #4
 8005028:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800502c:	e018      	b.n	8005060 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f8c0 	bl	80051b4 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f935 	bl	80052a4 <CDC_ProcessReception>
      break;
 800503a:	e014      	b.n	8005066 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800503c:	2100      	movs	r1, #0
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 ff17 	bl	8005e72 <USBH_ClrFeature>
 8005044:	4603      	mov	r3, r0
 8005046:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005048:	7bbb      	ldrb	r3, [r7, #14]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10a      	bne.n	8005064 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE ;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005056:	e005      	b.n	8005064 <USBH_CDC_Process+0x120>

    default:
      break;
 8005058:	bf00      	nop
 800505a:	e004      	b.n	8005066 <USBH_CDC_Process+0x122>
      break;
 800505c:	bf00      	nop
 800505e:	e002      	b.n	8005066 <USBH_CDC_Process+0x122>
      break;
 8005060:	bf00      	nop
 8005062:	e000      	b.n	8005066 <USBH_CDC_Process+0x122>
      break;
 8005064:	bf00      	nop

  }

  return status;
 8005066:	7bfb      	ldrb	r3, [r7, #15]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	bc80      	pop	{r7}
 8005082:	4770      	bx	lr

08005084 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	22a1      	movs	r2, #161	; 0xa1
 8005092:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2221      	movs	r2, #33	; 0x21
 8005098:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2207      	movs	r2, #7
 80050aa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2207      	movs	r2, #7
 80050b0:	4619      	mov	r1, r3
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f001 f8b8 	bl	8006228 <USBH_CtlReq>
 80050b8:	4603      	mov	r3, r0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b082      	sub	sp, #8
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2221      	movs	r2, #33	; 0x21
 80050d0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2220      	movs	r2, #32
 80050d6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2207      	movs	r2, #7
 80050e8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2207      	movs	r2, #7
 80050ee:	4619      	mov	r1, r3
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f001 f899 	bl	8006228 <USBH_CtlReq>
 80050f6:	4603      	mov	r3, r0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef  USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800510c:	2301      	movs	r3, #1
 800510e:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005120:	2b00      	cmp	r3, #0
 8005122:	d004      	beq.n	800512e <USBH_CDC_Transmit+0x2e>
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800512a:	2b03      	cmp	r3, #3
 800512c:	d10f      	bne.n	800514e <USBH_CDC_Transmit+0x4e>
  {
    CDC_Handle->pTxData = pbuff;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	625a      	str	r2, [r3, #36]	; 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	2203      	movs	r2, #3
 800513e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    Status = USBH_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 800514e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005150:	4618      	mov	r0, r3
 8005152:	371c      	adds	r7, #28
 8005154:	46bd      	mov	sp, r7
 8005156:	bc80      	pop	{r7}
 8005158:	4770      	bx	lr

0800515a <USBH_CDC_Receive>:
* @brief  This function prepares the state before issuing the class specific commands
* @param  None
* @retval None
*/
USBH_StatusTypeDef  USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 800515a:	b480      	push	{r7}
 800515c:	b087      	sub	sp, #28
 800515e:	af00      	add	r7, sp, #0
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005166:	2301      	movs	r3, #1
 8005168:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d004      	beq.n	8005188 <USBH_CDC_Receive+0x2e>
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005184:	2b03      	cmp	r3, #3
 8005186:	d10f      	bne.n	80051a8 <USBH_CDC_Receive+0x4e>
  {
    CDC_Handle->pRxData = pbuff;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	629a      	str	r2, [r3, #40]	; 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2203      	movs	r2, #3
 8005198:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	2203      	movs	r2, #3
 80051a0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    Status = USBH_OK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }
  return Status;
 80051a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	371c      	adds	r7, #28
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bc80      	pop	{r7}
 80051b2:	4770      	bx	lr

080051b4 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80051c6:	2300      	movs	r3, #0
 80051c8:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d002      	beq.n	80051da <CDC_ProcessTransmission+0x26>
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d025      	beq.n	8005224 <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 80051d8:	e060      	b.n	800529c <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	8b12      	ldrh	r2, [r2, #24]
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d90c      	bls.n	8005200 <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	69d9      	ldr	r1, [r3, #28]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8b1a      	ldrh	r2, [r3, #24]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	7b58      	ldrb	r0, [r3, #13]
 80051f2:	2301      	movs	r3, #1
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	4603      	mov	r3, r0
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f001 fa26 	bl	800664a <USBH_BulkSendData>
 80051fe:	e00c      	b.n	800521a <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	7b58      	ldrb	r0, [r3, #13]
 800520e:	2301      	movs	r3, #1
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	4603      	mov	r3, r0
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f001 fa18 	bl	800664a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2202      	movs	r2, #2
 800521e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005222:	e03b      	b.n	800529c <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	7b5b      	ldrb	r3, [r3, #13]
 8005228:	4619      	mov	r1, r3
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f001 fd2e 	bl	8006c8c <USBH_LL_GetURBState>
 8005230:	4603      	mov	r3, r0
 8005232:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005234:	7afb      	ldrb	r3, [r7, #11]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d128      	bne.n	800528c <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523e:	68fa      	ldr	r2, [r7, #12]
 8005240:	8b12      	ldrh	r2, [r2, #24]
 8005242:	4293      	cmp	r3, r2
 8005244:	d90e      	bls.n	8005264 <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	8b12      	ldrh	r2, [r2, #24]
 800524e:	1a9a      	subs	r2, r3, r2
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	8b12      	ldrh	r2, [r2, #24]
 800525c:	441a      	add	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	61da      	str	r2, [r3, #28]
 8005262:	e002      	b.n	800526a <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	2b00      	cmp	r3, #0
 8005270:	d004      	beq.n	800527c <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800527a:	e00e      	b.n	800529a <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f001 fab3 	bl	80067f0 <USBH_CDC_TransmitCallback>
      break;
 800528a:	e006      	b.n	800529a <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 800528c:	7afb      	ldrb	r3, [r7, #11]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d103      	bne.n	800529a <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800529a:	bf00      	nop
  }
}
 800529c:	bf00      	nop
 800529e:	3710      	adds	r7, #16
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80052b6:	2300      	movs	r3, #0
 80052b8:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80052c0:	2b03      	cmp	r3, #3
 80052c2:	d002      	beq.n	80052ca <CDC_ProcessReception+0x26>
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d00e      	beq.n	80052e6 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80052c8:	e043      	b.n	8005352 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	6a19      	ldr	r1, [r3, #32]
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	8b5a      	ldrh	r2, [r3, #26]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	7b1b      	ldrb	r3, [r3, #12]
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f001 f9dc 	bl	8006694 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	2204      	movs	r2, #4
 80052e0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80052e4:	e035      	b.n	8005352 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	7b1b      	ldrb	r3, [r3, #12]
 80052ea:	4619      	mov	r1, r3
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f001 fccd 	bl	8006c8c <USBH_LL_GetURBState>
 80052f2:	4603      	mov	r3, r0
 80052f4:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80052f6:	7cfb      	ldrb	r3, [r7, #19]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d129      	bne.n	8005350 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	7b1b      	ldrb	r3, [r3, #12]
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f001 fc30 	bl	8006b68 <USBH_LL_GetLastXferSize>
 8005308:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	429a      	cmp	r2, r3
 8005312:	d016      	beq.n	8005342 <CDC_ProcessReception+0x9e>
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	8b5b      	ldrh	r3, [r3, #26]
 8005318:	461a      	mov	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4293      	cmp	r3, r2
 800531e:	d910      	bls.n	8005342 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	1ad2      	subs	r2, r2, r3
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	6a1a      	ldr	r2, [r3, #32]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	441a      	add	r2, r3
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	2203      	movs	r2, #3
 800533c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8005340:	e006      	b.n	8005350 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f001 fa60 	bl	8006810 <USBH_CDC_ReceiveCallback>
      break;
 8005350:	bf00      	nop
  }
}
 8005352:	bf00      	nop
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	bc80      	pop	{r7}
 800536a:	4770      	bx	lr

0800536c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	4613      	mov	r3, r2
 8005378:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005380:	2302      	movs	r3, #2
 8005382:	e029      	b.n	80053d8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	79fa      	ldrb	r2, [r7, #7]
 8005388:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f81f 	bl	80053e0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

  /* Assign User process */
  if (pUsrFunc != NULL)
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f001 fb1d 	bl	8006a10 <USBH_LL_Init>

  return USBH_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80053e8:	2300      	movs	r3, #0
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	e009      	b.n	8005406 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	33e0      	adds	r3, #224	; 0xe0
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	2200      	movs	r2, #0
 80053fe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3301      	adds	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b0e      	cmp	r3, #14
 800540a:	d9f2      	bls.n	80053f2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800540c:	2300      	movs	r3, #0
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	e009      	b.n	8005426 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800541c:	2200      	movs	r2, #0
 800541e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3301      	adds	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800542c:	d3f1      	bcc.n	8005412 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2240      	movs	r2, #64	; 0x40
 8005452:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	bc80      	pop	{r7}
 8005474:	4770      	bx	lr

08005476 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005476:	b480      	push	{r7}
 8005478:	b085      	sub	sp, #20
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8005480:	2300      	movs	r3, #0
 8005482:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d017      	beq.n	80054ba <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8005490:	2b01      	cmp	r3, #1
 8005492:	d80f      	bhi.n	80054b4 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800549a:	1c59      	adds	r1, r3, #1
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	33dc      	adds	r3, #220	; 0xdc
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 80054ae:	2300      	movs	r3, #0
 80054b0:	73fb      	strb	r3, [r7, #15]
 80054b2:	e004      	b.n	80054be <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80054b4:	2302      	movs	r3, #2
 80054b6:	73fb      	strb	r3, [r7, #15]
 80054b8:	e001      	b.n	80054be <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80054ba:	2302      	movs	r3, #2
 80054bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80054be:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bc80      	pop	{r7}
 80054c8:	4770      	bx	lr

080054ca <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b085      	sub	sp, #20
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	460b      	mov	r3, r1
 80054d4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 333a 	ldrb.w	r3, [r3, #826]	; 0x33a
 80054e0:	78fa      	ldrb	r2, [r7, #3]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d204      	bcs.n	80054f0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	78fa      	ldrb	r2, [r7, #3]
 80054ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
 80054ee:	e001      	b.n	80054f4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80054f0:	2302      	movs	r3, #2
 80054f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr

08005500 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	4608      	mov	r0, r1
 800550a:	4611      	mov	r1, r2
 800550c:	461a      	mov	r2, r3
 800550e:	4603      	mov	r3, r0
 8005510:	70fb      	strb	r3, [r7, #3]
 8005512:	460b      	mov	r3, r1
 8005514:	70bb      	strb	r3, [r7, #2]
 8005516:	4613      	mov	r3, r2
 8005518:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800551e:	2300      	movs	r3, #0
 8005520:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f203 3336 	addw	r3, r3, #822	; 0x336
 8005528:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800552a:	e025      	b.n	8005578 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800552c:	7dfb      	ldrb	r3, [r7, #23]
 800552e:	221a      	movs	r2, #26
 8005530:	fb02 f303 	mul.w	r3, r2, r3
 8005534:	3308      	adds	r3, #8
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	4413      	add	r3, r2
 800553a:	3302      	adds	r3, #2
 800553c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	795b      	ldrb	r3, [r3, #5]
 8005542:	78fa      	ldrb	r2, [r7, #3]
 8005544:	429a      	cmp	r2, r3
 8005546:	d002      	beq.n	800554e <USBH_FindInterface+0x4e>
 8005548:	78fb      	ldrb	r3, [r7, #3]
 800554a:	2bff      	cmp	r3, #255	; 0xff
 800554c:	d111      	bne.n	8005572 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8005552:	78ba      	ldrb	r2, [r7, #2]
 8005554:	429a      	cmp	r2, r3
 8005556:	d002      	beq.n	800555e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005558:	78bb      	ldrb	r3, [r7, #2]
 800555a:	2bff      	cmp	r3, #255	; 0xff
 800555c:	d109      	bne.n	8005572 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8005562:	787a      	ldrb	r2, [r7, #1]
 8005564:	429a      	cmp	r2, r3
 8005566:	d002      	beq.n	800556e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005568:	787b      	ldrb	r3, [r7, #1]
 800556a:	2bff      	cmp	r3, #255	; 0xff
 800556c:	d101      	bne.n	8005572 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	e006      	b.n	8005580 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005572:	7dfb      	ldrb	r3, [r7, #23]
 8005574:	3301      	adds	r3, #1
 8005576:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005578:	7dfb      	ldrb	r3, [r7, #23]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d9d6      	bls.n	800552c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800557e:	23ff      	movs	r3, #255	; 0xff
}
 8005580:	4618      	mov	r0, r3
 8005582:	371c      	adds	r7, #28
 8005584:	46bd      	mov	sp, r7
 8005586:	bc80      	pop	{r7}
 8005588:	4770      	bx	lr

0800558a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f001 fa72 	bl	8006a7c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8005598:	2101      	movs	r1, #1
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f001 fb89 	bl	8006cb2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af04      	add	r7, sp, #16
 80055b2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80055b4:	2302      	movs	r3, #2
 80055b6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d102      	bne.n	80055ce <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2203      	movs	r2, #3
 80055cc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b0b      	cmp	r3, #11
 80055d6:	f200 8177 	bhi.w	80058c8 <USBH_Process+0x31c>
 80055da:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <USBH_Process+0x34>)
 80055dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e0:	08005611 	.word	0x08005611
 80055e4:	08005633 	.word	0x08005633
 80055e8:	08005647 	.word	0x08005647
 80055ec:	08005863 	.word	0x08005863
 80055f0:	080058c9 	.word	0x080058c9
 80055f4:	080056eb 	.word	0x080056eb
 80055f8:	08005819 	.word	0x08005819
 80055fc:	0800571b 	.word	0x0800571b
 8005600:	0800573b 	.word	0x0800573b
 8005604:	0800575b 	.word	0x0800575b
 8005608:	08005789 	.word	0x08005789
 800560c:	0800584b 	.word	0x0800584b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005616:	b2db      	uxtb	r3, r3
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 8157 	beq.w	80058cc <USBH_Process+0x320>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8005624:	20c8      	movs	r0, #200	; 0xc8
 8005626:	f001 fb8d 	bl	8006d44 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f001 fa81 	bl	8006b32 <USBH_LL_ResetPort>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005630:	e14c      	b.n	80058cc <USBH_Process+0x320>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8005638:	2b01      	cmp	r3, #1
 800563a:	f040 8149 	bne.w	80058d0 <USBH_Process+0x324>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->gState = HOST_DEV_ATTACHED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2202      	movs	r2, #2
 8005642:	701a      	strb	r2, [r3, #0]
      }
      break;
 8005644:	e144      	b.n	80058d0 <USBH_Process+0x324>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d005      	beq.n	800565c <USBH_Process+0xb0>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005656:	2104      	movs	r1, #4
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800565c:	2064      	movs	r0, #100	; 0x64
 800565e:	f001 fb71 	bl	8006d44 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f001 fa40 	bl	8006ae8 <USBH_LL_GetSpeed>
 8005668:	4603      	mov	r3, r0
 800566a:	461a      	mov	r2, r3
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2205      	movs	r2, #5
 8005676:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8005678:	2100      	movs	r1, #0
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f001 f857 	bl	800672e <USBH_AllocPipe>
 8005680:	4603      	mov	r3, r0
 8005682:	461a      	mov	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8005688:	2180      	movs	r1, #128	; 0x80
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f001 f84f 	bl	800672e <USBH_AllocPipe>
 8005690:	4603      	mov	r3, r0
 8005692:	461a      	mov	r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	711a      	strb	r2, [r3, #4]


      /* Open Control pipes */
      USBH_OpenPipe(phost,
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	7919      	ldrb	r1, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_in,
                    0x80U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 80056ac:	b292      	uxth	r2, r2
 80056ae:	9202      	str	r2, [sp, #8]
 80056b0:	2200      	movs	r2, #0
 80056b2:	9201      	str	r2, [sp, #4]
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	4603      	mov	r3, r0
 80056b8:	2280      	movs	r2, #128	; 0x80
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f001 f808 	bl	80066d0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost,
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	7959      	ldrb	r1, [r3, #5]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->Control.pipe_out,
                    0x00U,
                    phost->device.address,
                    phost->device.speed,
                    USBH_EP_CONTROL,
                    (uint16_t)phost->Control.pipe_size);
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost,
 80056d4:	b292      	uxth	r2, r2
 80056d6:	9202      	str	r2, [sp, #8]
 80056d8:	2200      	movs	r2, #0
 80056da:	9201      	str	r2, [sp, #4]
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	4603      	mov	r3, r0
 80056e0:	2200      	movs	r2, #0
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fff4 	bl	80066d0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80056e8:	e101      	b.n	80058ee <USBH_Process+0x342>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      if (USBH_HandleEnum(phost) == USBH_OK)
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f904 	bl	80058f8 <USBH_HandleEnum>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f040 80ee 	bne.w	80058d4 <USBH_Process+0x328>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8005706:	2b01      	cmp	r3, #1
 8005708:	d103      	bne.n	8005712 <USBH_Process+0x166>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2208      	movs	r2, #8
 800570e:	701a      	strb	r2, [r3, #0]
        {
          phost->gState = HOST_INPUT;
        }

      }
      break;
 8005710:	e0e0      	b.n	80058d4 <USBH_Process+0x328>
          phost->gState = HOST_INPUT;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2207      	movs	r2, #7
 8005716:	701a      	strb	r2, [r3, #0]
      break;
 8005718:	e0dc      	b.n	80058d4 <USBH_Process+0x328>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 80d9 	beq.w	80058d8 <USBH_Process+0x32c>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800572c:	2101      	movs	r1, #1
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2208      	movs	r2, #8
 8005736:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005738:	e0ce      	b.n	80058d8 <USBH_Process+0x32c>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8005740:	b29b      	uxth	r3, r3
 8005742:	4619      	mov	r1, r3
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fb4d 	bl	8005de4 <USBH_SetCfg>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	f040 80c5 	bne.w	80058dc <USBH_Process+0x330>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2209      	movs	r2, #9
 8005756:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005758:	e0c0      	b.n	80058dc <USBH_Process+0x330>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8005760:	f003 0320 	and.w	r3, r3, #32
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00b      	beq.n	8005780 <USBH_Process+0x1d4>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8005768:	2101      	movs	r1, #1
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fb5d 	bl	8005e2a <USBH_SetFeature>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	f040 80b4 	bne.w	80058e0 <USBH_Process+0x334>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	220a      	movs	r2, #10
 800577c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800577e:	e0af      	b.n	80058e0 <USBH_Process+0x334>
        phost->gState = HOST_CHECK_CLASS;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	220a      	movs	r2, #10
 8005784:	701a      	strb	r2, [r3, #0]
      break;
 8005786:	e0ab      	b.n	80058e0 <USBH_Process+0x334>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 80a8 	beq.w	80058e4 <USBH_Process+0x338>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800579c:	2300      	movs	r3, #0
 800579e:	73fb      	strb	r3, [r7, #15]
 80057a0:	e017      	b.n	80057d2 <USBH_Process+0x226>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	33dc      	adds	r3, #220	; 0xdc
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	791a      	ldrb	r2, [r3, #4]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f893 3345 	ldrb.w	r3, [r3, #837]	; 0x345
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d108      	bne.n	80057cc <USBH_Process+0x220>
          {
            phost->pActiveClass = phost->pClass[idx];
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	33dc      	adds	r3, #220	; 0xdc
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
 80057ce:	3301      	adds	r3, #1
 80057d0:	73fb      	strb	r3, [r7, #15]
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d9e4      	bls.n	80057a2 <USBH_Process+0x1f6>
          }
        }

        if (phost->pActiveClass != NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d016      	beq.n	8005810 <USBH_Process+0x264>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	4798      	blx	r3
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d109      	bne.n	8005808 <USBH_Process+0x25c>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2206      	movs	r2, #6
 80057f8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005800:	2103      	movs	r1, #3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005806:	e06d      	b.n	80058e4 <USBH_Process+0x338>
            phost->gState = HOST_ABORT_STATE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	220d      	movs	r2, #13
 800580c:	701a      	strb	r2, [r3, #0]
      break;
 800580e:	e069      	b.n	80058e4 <USBH_Process+0x338>
          phost->gState = HOST_ABORT_STATE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	220d      	movs	r2, #13
 8005814:	701a      	strb	r2, [r3, #0]
      break;
 8005816:	e065      	b.n	80058e4 <USBH_Process+0x338>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00f      	beq.n	8005842 <USBH_Process+0x296>
      {
        status = phost->pActiveClass->Requests(phost);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	4798      	blx	r3
 800582e:	4603      	mov	r3, r0
 8005830:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005832:	7bbb      	ldrb	r3, [r7, #14]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d156      	bne.n	80058e8 <USBH_Process+0x33c>
        {
          phost->gState = HOST_CLASS;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	220b      	movs	r2, #11
 800583e:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005840:	e052      	b.n	80058e8 <USBH_Process+0x33c>
        phost->gState = HOST_ABORT_STATE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	220d      	movs	r2, #13
 8005846:	701a      	strb	r2, [r3, #0]
      break;
 8005848:	e04e      	b.n	80058e8 <USBH_Process+0x33c>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005850:	2b00      	cmp	r3, #0
 8005852:	d04b      	beq.n	80058ec <USBH_Process+0x340>
      {
        phost->pActiveClass->BgndProcess(phost);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	4798      	blx	r3
      }
      break;
 8005860:	e044      	b.n	80058ec <USBH_Process+0x340>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

      DeInitStateMachine(phost);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff fdb8 	bl	80053e0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005876:	2b00      	cmp	r3, #0
 8005878:	d009      	beq.n	800588e <USBH_Process+0x2e2>
      {
        phost->pActiveClass->DeInit(phost);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <USBH_Process+0x2f8>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800589e:	2105      	movs	r1, #5
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d107      	bne.n	80058c0 <USBH_Process+0x314>
      {
        phost->device.is_ReEnumerated = 0U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f7ff fe66 	bl	800558a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80058be:	e016      	b.n	80058ee <USBH_Process+0x342>
        USBH_LL_Start(phost);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f001 f8db 	bl	8006a7c <USBH_LL_Start>
      break;
 80058c6:	e012      	b.n	80058ee <USBH_Process+0x342>

    case HOST_ABORT_STATE:
    default :
      break;
 80058c8:	bf00      	nop
 80058ca:	e010      	b.n	80058ee <USBH_Process+0x342>
      break;
 80058cc:	bf00      	nop
 80058ce:	e00e      	b.n	80058ee <USBH_Process+0x342>
      break;
 80058d0:	bf00      	nop
 80058d2:	e00c      	b.n	80058ee <USBH_Process+0x342>
      break;
 80058d4:	bf00      	nop
 80058d6:	e00a      	b.n	80058ee <USBH_Process+0x342>
    break;
 80058d8:	bf00      	nop
 80058da:	e008      	b.n	80058ee <USBH_Process+0x342>
      break;
 80058dc:	bf00      	nop
 80058de:	e006      	b.n	80058ee <USBH_Process+0x342>
      break;
 80058e0:	bf00      	nop
 80058e2:	e004      	b.n	80058ee <USBH_Process+0x342>
      break;
 80058e4:	bf00      	nop
 80058e6:	e002      	b.n	80058ee <USBH_Process+0x342>
      break;
 80058e8:	bf00      	nop
 80058ea:	e000      	b.n	80058ee <USBH_Process+0x342>
      break;
 80058ec:	bf00      	nop
  }
  return USBH_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b088      	sub	sp, #32
 80058fc:	af04      	add	r7, sp, #16
 80058fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	785b      	ldrb	r3, [r3, #1]
 8005908:	2b07      	cmp	r3, #7
 800590a:	f200 80f8 	bhi.w	8005afe <USBH_HandleEnum+0x206>
 800590e:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <USBH_HandleEnum+0x1c>)
 8005910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005914:	08005935 	.word	0x08005935
 8005918:	080059a7 	.word	0x080059a7
 800591c:	080059bf 	.word	0x080059bf
 8005920:	08005a35 	.word	0x08005a35
 8005924:	08005a4b 	.word	0x08005a4b
 8005928:	08005a67 	.word	0x08005a67
 800592c:	08005a9b 	.word	0x08005a9b
 8005930:	08005acf 	.word	0x08005acf
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      if (USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8005934:	2108      	movs	r1, #8
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f984 	bl	8005c44 <USBH_Get_DevDesc>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	f040 80df 	bne.w	8005b02 <USBH_HandleEnum+0x20a>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 232b 	ldrb.w	r2, [r3, #811]	; 0x32b
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost,
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	7919      	ldrb	r1, [r3, #4]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8005968:	b292      	uxth	r2, r2
 800596a:	9202      	str	r2, [sp, #8]
 800596c:	2200      	movs	r2, #0
 800596e:	9201      	str	r2, [sp, #4]
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	4603      	mov	r3, r0
 8005974:	2280      	movs	r2, #128	; 0x80
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 feaa 	bl	80066d0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	7959      	ldrb	r1, [r3, #5]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8005990:	b292      	uxth	r2, r2
 8005992:	9202      	str	r2, [sp, #8]
 8005994:	2200      	movs	r2, #0
 8005996:	9201      	str	r2, [sp, #4]
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	4603      	mov	r3, r0
 800599c:	2200      	movs	r2, #0
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fe96 	bl	80066d0 <USBH_OpenPipe>
      }
      break;
 80059a4:	e0ad      	b.n	8005b02 <USBH_HandleEnum+0x20a>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      if (USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE) == USBH_OK)
 80059a6:	2112      	movs	r1, #18
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f94b 	bl	8005c44 <USBH_Get_DevDesc>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	f040 80a8 	bne.w	8005b06 <USBH_HandleEnum+0x20e>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	705a      	strb	r2, [r3, #1]

      }
      break;
 80059bc:	e0a3      	b.n	8005b06 <USBH_HandleEnum+0x20e>

    case ENUM_SET_ADDR:
      /* set address */
      if (USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80059be:	2101      	movs	r1, #1
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f9eb 	bl	8005d9c <USBH_SetAddress>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f040 809e 	bne.w	8005b0a <USBH_HandleEnum+0x212>
      {
        USBH_Delay(2U);
 80059ce:	2002      	movs	r0, #2
 80059d0:	f001 f9b8 	bl	8006d44 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2203      	movs	r2, #3
 80059e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost,
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	7919      	ldrb	r1, [r3, #4]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_in,
                      0x80U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 80059f6:	b292      	uxth	r2, r2
 80059f8:	9202      	str	r2, [sp, #8]
 80059fa:	2200      	movs	r2, #0
 80059fc:	9201      	str	r2, [sp, #4]
 80059fe:	9300      	str	r3, [sp, #0]
 8005a00:	4603      	mov	r3, r0
 8005a02:	2280      	movs	r2, #128	; 0x80
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fe63 	bl	80066d0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost,
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	7959      	ldrb	r1, [r3, #5]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->Control.pipe_out,
                      0x00U,
                      phost->device.address,
                      phost->device.speed,
                      USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost,
 8005a1e:	b292      	uxth	r2, r2
 8005a20:	9202      	str	r2, [sp, #8]
 8005a22:	2200      	movs	r2, #0
 8005a24:	9201      	str	r2, [sp, #4]
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fe4f 	bl	80066d0 <USBH_OpenPipe>
      }
      break;
 8005a32:	e06a      	b.n	8005b0a <USBH_HandleEnum+0x212>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      if (USBH_Get_CfgDesc(phost,
 8005a34:	2109      	movs	r1, #9
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f92c 	bl	8005c94 <USBH_Get_CfgDesc>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d165      	bne.n	8005b0e <USBH_HandleEnum+0x216>
                           USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2204      	movs	r2, #4
 8005a46:	705a      	strb	r2, [r3, #1]
      }
      break;
 8005a48:	e061      	b.n	8005b0e <USBH_HandleEnum+0x216>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      if (USBH_Get_CfgDesc(phost,
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8b3 3338 	ldrh.w	r3, [r3, #824]	; 0x338
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f91e 	bl	8005c94 <USBH_Get_CfgDesc>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d159      	bne.n	8005b12 <USBH_HandleEnum+0x21a>
                           phost->device.CfgDesc.wTotalLength) == USBH_OK)
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2205      	movs	r2, #5
 8005a62:	705a      	strb	r2, [r3, #1]
      }
      break;
 8005a64:	e055      	b.n	8005b12 <USBH_HandleEnum+0x21a>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d010      	beq.n	8005a92 <USBH_HandleEnum+0x19a>
      {
        /* Check that Manufacturer String is available */

        if (USBH_Get_StringDesc(phost,
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                                phost->device.DevDesc.iManufacturer,
                                phost->device.Data,
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8005a7c:	23ff      	movs	r3, #255	; 0xff
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f92c 	bl	8005cdc <USBH_Get_StringDesc>
 8005a84:	4603      	mov	r3, r0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d145      	bne.n	8005b16 <USBH_HandleEnum+0x21e>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2206      	movs	r2, #6
 8005a8e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005a90:	e041      	b.n	8005b16 <USBH_HandleEnum+0x21e>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2206      	movs	r2, #6
 8005a96:	705a      	strb	r2, [r3, #1]
      break;
 8005a98:	e03d      	b.n	8005b16 <USBH_HandleEnum+0x21e>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d010      	beq.n	8005ac6 <USBH_HandleEnum+0x1ce>
      {
        /* Check that Product string is available */
        if (USBH_Get_StringDesc(phost,
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 1333 	ldrb.w	r1, [r3, #819]	; 0x333
                                phost->device.DevDesc.iProduct,
                                phost->device.Data,
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8005ab0:	23ff      	movs	r3, #255	; 0xff
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f912 	bl	8005cdc <USBH_Get_StringDesc>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d12d      	bne.n	8005b1a <USBH_HandleEnum+0x222>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2207      	movs	r2, #7
 8005ac2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005ac4:	e029      	b.n	8005b1a <USBH_HandleEnum+0x222>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2207      	movs	r2, #7
 8005aca:	705a      	strb	r2, [r3, #1]
      break;
 8005acc:	e025      	b.n	8005b1a <USBH_HandleEnum+0x222>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00f      	beq.n	8005af8 <USBH_HandleEnum+0x200>
      {
        /* Check that Serial number string is available */
        if (USBH_Get_StringDesc(phost,
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                phost->device.DevDesc.iSerialNumber,
                                phost->device.Data,
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        if (USBH_Get_StringDesc(phost,
 8005ae4:	23ff      	movs	r3, #255	; 0xff
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f8f8 	bl	8005cdc <USBH_Get_StringDesc>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d115      	bne.n	8005b1e <USBH_HandleEnum+0x226>
                                0xFFU) == USBH_OK)
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8005af2:	2300      	movs	r3, #0
 8005af4:	73fb      	strb	r3, [r7, #15]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005af6:	e012      	b.n	8005b1e <USBH_HandleEnum+0x226>
        Status = USBH_OK;
 8005af8:	2300      	movs	r3, #0
 8005afa:	73fb      	strb	r3, [r7, #15]
      break;
 8005afc:	e00f      	b.n	8005b1e <USBH_HandleEnum+0x226>

    default:
      break;
 8005afe:	bf00      	nop
 8005b00:	e00e      	b.n	8005b20 <USBH_HandleEnum+0x228>
      break;
 8005b02:	bf00      	nop
 8005b04:	e00c      	b.n	8005b20 <USBH_HandleEnum+0x228>
      break;
 8005b06:	bf00      	nop
 8005b08:	e00a      	b.n	8005b20 <USBH_HandleEnum+0x228>
      break;
 8005b0a:	bf00      	nop
 8005b0c:	e008      	b.n	8005b20 <USBH_HandleEnum+0x228>
      break;
 8005b0e:	bf00      	nop
 8005b10:	e006      	b.n	8005b20 <USBH_HandleEnum+0x228>
      break;
 8005b12:	bf00      	nop
 8005b14:	e004      	b.n	8005b20 <USBH_HandleEnum+0x228>
      break;
 8005b16:	bf00      	nop
 8005b18:	e002      	b.n	8005b20 <USBH_HandleEnum+0x228>
      break;
 8005b1a:	bf00      	nop
 8005b1c:	e000      	b.n	8005b20 <USBH_HandleEnum+0x228>
      break;
 8005b1e:	bf00      	nop
  }
  return Status;
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop

08005b2c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8005b3e:	bf00      	nop
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr

08005b48 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f804 	bl	8005b6c <USBH_HandleSof>
}
 8005b64:	bf00      	nop
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b0b      	cmp	r3, #11
 8005b7c:	d10a      	bne.n	8005b94 <USBH_HandleSof+0x28>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d005      	beq.n	8005b94 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	4798      	blx	r3
  }
}
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8005bac:	bf00      	nop
}
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bc80      	pop	{r7}
 8005bb4:	4770      	bx	lr

08005bb6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b083      	sub	sp, #12
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  return;
 8005bc6:	bf00      	nop
}
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr

08005bd0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.is_disconnected = 0U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_ReEnumerated = 0U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr

08005bfc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.is_connected = 0U;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
  phost->device.PortEnabled = 0U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

  /* Stop Host */
  USBH_LL_Stop(phost);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 ff48 	bl	8006ab2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	791b      	ldrb	r3, [r3, #4]
 8005c26:	4619      	mov	r1, r3
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fda1 	bl	8006770 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	795b      	ldrb	r3, [r3, #5]
 8005c32:	4619      	mov	r1, r3
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fd9b 	bl	8006770 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8005c56:	78fb      	ldrb	r3, [r7, #3]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c62:	2100      	movs	r1, #0
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 f864 	bl	8005d32 <USBH_GetDescriptor>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	73fb      	strb	r3, [r7, #15]
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f503 7049 	add.w	r0, r3, #804	; 0x324
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005c80:	78fa      	ldrb	r2, [r7, #3]
 8005c82:	b292      	uxth	r2, r2
 8005c84:	4619      	mov	r1, r3
 8005c86:	f000 f918 	bl	8005eba <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;

#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	331c      	adds	r3, #28
 8005ca4:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8005ca6:	887b      	ldrh	r3, [r7, #2]
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f83d 	bl	8005d32 <USBH_GetDescriptor>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	72fb      	strb	r3, [r7, #11]
 8005cbc:	7afb      	ldrb	r3, [r7, #11]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d107      	bne.n	8005cd2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f203 3336 	addw	r3, r3, #822	; 0x336
 8005cc8:	887a      	ldrh	r2, [r7, #2]
 8005cca:	68f9      	ldr	r1, [r7, #12]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 f963 	bl	8005f98 <USBH_ParseCfgDesc>
  }

  return status;
 8005cd2:	7afb      	ldrb	r3, [r7, #11]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af02      	add	r7, sp, #8
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	607a      	str	r2, [r7, #4]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	460b      	mov	r3, r1
 8005cea:	72fb      	strb	r3, [r7, #11]
 8005cec:	4613      	mov	r3, r2
 8005cee:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8005cf0:	7afb      	ldrb	r3, [r7, #11]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005cf8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8005d00:	893b      	ldrh	r3, [r7, #8]
 8005d02:	9300      	str	r3, [sp, #0]
 8005d04:	460b      	mov	r3, r1
 8005d06:	2100      	movs	r1, #0
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f000 f812 	bl	8005d32 <USBH_GetDescriptor>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	75fb      	strb	r3, [r7, #23]
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d107      	bne.n	8005d28 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005d1e:	893a      	ldrh	r2, [r7, #8]
 8005d20:	6879      	ldr	r1, [r7, #4]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fa34 	bl	8006190 <USBH_ParseStringDesc>
  }

  return status;
 8005d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	607b      	str	r3, [r7, #4]
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	72fb      	strb	r3, [r7, #11]
 8005d40:	4613      	mov	r3, r2
 8005d42:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	789b      	ldrb	r3, [r3, #2]
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d11c      	bne.n	8005d86 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8005d4c:	7afb      	ldrb	r3, [r7, #11]
 8005d4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2206      	movs	r2, #6
 8005d5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	893a      	ldrh	r2, [r7, #8]
 8005d62:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8005d64:	893b      	ldrh	r3, [r7, #8]
 8005d66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d6e:	d104      	bne.n	8005d7a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f240 4209 	movw	r2, #1033	; 0x409
 8005d76:	829a      	strh	r2, [r3, #20]
 8005d78:	e002      	b.n	8005d80 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	8b3a      	ldrh	r2, [r7, #24]
 8005d84:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8005d86:	8b3b      	ldrh	r3, [r7, #24]
 8005d88:	461a      	mov	r2, r3
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 fa4b 	bl	8006228 <USBH_CtlReq>
 8005d92:	4603      	mov	r3, r0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	460b      	mov	r3, r1
 8005da6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	789b      	ldrb	r3, [r3, #2]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d10f      	bne.n	8005dd0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2205      	movs	r2, #5
 8005dba:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fa27 	bl	8006228 <USBH_CtlReq>
 8005dda:	4603      	mov	r3, r0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	789b      	ldrb	r3, [r3, #2]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d10e      	bne.n	8005e16 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2209      	movs	r2, #9
 8005e02:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	887a      	ldrh	r2, [r7, #2]
 8005e08:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8005e16:	2200      	movs	r2, #0
 8005e18:	2100      	movs	r1, #0
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fa04 	bl	8006228 <USBH_CtlReq>
 8005e20:	4603      	mov	r3, r0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
 8005e32:	460b      	mov	r3, r1
 8005e34:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	789b      	ldrb	r3, [r3, #2]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d10f      	bne.n	8005e5e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2203      	movs	r2, #3
 8005e48:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8005e4a:	78fb      	ldrb	r3, [r7, #3]
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8005e5e:	2200      	movs	r2, #0
 8005e60:	2100      	movs	r1, #0
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f9e0 	bl	8006228 <USBH_CtlReq>
 8005e68:	4603      	mov	r3, r0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b082      	sub	sp, #8
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	789b      	ldrb	r3, [r3, #2]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d10f      	bne.n	8005ea6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2202      	movs	r2, #2
 8005e8a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f9bc 	bl	8006228 <USBH_CtlReq>
 8005eb0:	4603      	mov	r3, r0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b085      	sub	sp, #20
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	60b9      	str	r1, [r7, #8]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	785a      	ldrb	r2, [r3, #1]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	3302      	adds	r3, #2
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	3303      	adds	r3, #3
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	021b      	lsls	r3, r3, #8
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	4313      	orrs	r3, r2
 8005eee:	b29a      	uxth	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	791a      	ldrb	r2, [r3, #4]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	795a      	ldrb	r2, [r3, #5]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	799a      	ldrb	r2, [r3, #6]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	79da      	ldrb	r2, [r3, #7]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8005f14:	88fb      	ldrh	r3, [r7, #6]
 8005f16:	2b08      	cmp	r3, #8
 8005f18:	d939      	bls.n	8005f8e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	3309      	adds	r3, #9
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	021b      	lsls	r3, r3, #8
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	330a      	adds	r3, #10
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	330b      	adds	r3, #11
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	021b      	lsls	r3, r3, #8
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	330c      	adds	r3, #12
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	330d      	adds	r3, #13
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	021b      	lsls	r3, r3, #8
 8005f64:	b29b      	uxth	r3, r3
 8005f66:	4313      	orrs	r3, r2
 8005f68:	b29a      	uxth	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	7b9a      	ldrb	r2, [r3, #14]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	7bda      	ldrb	r2, [r3, #15]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	7c1a      	ldrb	r2, [r3, #16]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	7c5a      	ldrb	r2, [r3, #17]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	745a      	strb	r2, [r3, #17]
  }
}
 8005f8e:	bf00      	nop
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bc80      	pop	{r7}
 8005f96:	4770      	bx	lr

08005f98 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08a      	sub	sp, #40	; 0x28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	781a      	ldrb	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	785a      	ldrb	r2, [r3, #1]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	3302      	adds	r3, #2
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	3303      	adds	r3, #3
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	021b      	lsls	r3, r3, #8
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	791a      	ldrb	r2, [r3, #4]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	795a      	ldrb	r2, [r3, #5]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	799a      	ldrb	r2, [r3, #6]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	79da      	ldrb	r2, [r3, #7]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	7a1a      	ldrb	r2, [r3, #8]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800600e:	88fb      	ldrh	r3, [r7, #6]
 8006010:	2b09      	cmp	r3, #9
 8006012:	d95f      	bls.n	80060d4 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006014:	2309      	movs	r3, #9
 8006016:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006018:	2300      	movs	r3, #0
 800601a:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800601c:	e051      	b.n	80060c2 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800601e:	f107 0316 	add.w	r3, r7, #22
 8006022:	4619      	mov	r1, r3
 8006024:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006026:	f000 f8e5 	bl	80061f4 <USBH_GetNextDesc>
 800602a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	785b      	ldrb	r3, [r3, #1]
 8006030:	2b04      	cmp	r3, #4
 8006032:	d146      	bne.n	80060c2 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006034:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006038:	221a      	movs	r2, #26
 800603a:	fb02 f303 	mul.w	r3, r2, r3
 800603e:	3308      	adds	r3, #8
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	4413      	add	r3, r2
 8006044:	3302      	adds	r3, #2
 8006046:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8006048:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800604a:	69f8      	ldr	r0, [r7, #28]
 800604c:	f000 f846 	bl	80060dc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006056:	2300      	movs	r3, #0
 8006058:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800605a:	e022      	b.n	80060a2 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800605c:	f107 0316 	add.w	r3, r7, #22
 8006060:	4619      	mov	r1, r3
 8006062:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006064:	f000 f8c6 	bl	80061f4 <USBH_GetNextDesc>
 8006068:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	785b      	ldrb	r3, [r3, #1]
 800606e:	2b05      	cmp	r3, #5
 8006070:	d117      	bne.n	80060a2 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006072:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006076:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800607a:	3201      	adds	r2, #1
 800607c:	00d2      	lsls	r2, r2, #3
 800607e:	211a      	movs	r1, #26
 8006080:	fb01 f303 	mul.w	r3, r1, r3
 8006084:	4413      	add	r3, r2
 8006086:	3308      	adds	r3, #8
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4413      	add	r3, r2
 800608c:	3304      	adds	r3, #4
 800608e:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8006090:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006092:	69b8      	ldr	r0, [r7, #24]
 8006094:	f000 f850 	bl	8006138 <USBH_ParseEPDesc>
            ep_ix++;
 8006098:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800609c:	3301      	adds	r3, #1
 800609e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	791b      	ldrb	r3, [r3, #4]
 80060a6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d204      	bcs.n	80060b8 <USBH_ParseCfgDesc+0x120>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	885a      	ldrh	r2, [r3, #2]
 80060b2:	8afb      	ldrh	r3, [r7, #22]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d8d1      	bhi.n	800605c <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80060b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060bc:	3301      	adds	r3, #1
 80060be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80060c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d804      	bhi.n	80060d4 <USBH_ParseCfgDesc+0x13c>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	885a      	ldrh	r2, [r3, #2]
 80060ce:	8afb      	ldrh	r3, [r7, #22]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d8a4      	bhi.n	800601e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80060d4:	bf00      	nop
 80060d6:	3728      	adds	r7, #40	; 0x28
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	781a      	ldrb	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	785a      	ldrb	r2, [r3, #1]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	789a      	ldrb	r2, [r3, #2]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	78da      	ldrb	r2, [r3, #3]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	791a      	ldrb	r2, [r3, #4]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	795a      	ldrb	r2, [r3, #5]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	799a      	ldrb	r2, [r3, #6]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	79da      	ldrb	r2, [r3, #7]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	7a1a      	ldrb	r2, [r3, #8]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	721a      	strb	r2, [r3, #8]
}
 800612e:	bf00      	nop
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	bc80      	pop	{r7}
 8006136:	4770      	bx	lr

08006138 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	781a      	ldrb	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	785a      	ldrb	r2, [r3, #1]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	789a      	ldrb	r2, [r3, #2]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	78da      	ldrb	r2, [r3, #3]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	3304      	adds	r3, #4
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	b29a      	uxth	r2, r3
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	3305      	adds	r3, #5
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	b29b      	uxth	r3, r3
 8006172:	021b      	lsls	r3, r3, #8
 8006174:	b29b      	uxth	r3, r3
 8006176:	4313      	orrs	r3, r2
 8006178:	b29a      	uxth	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	799a      	ldrb	r2, [r3, #6]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	719a      	strb	r2, [r3, #6]
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr

08006190 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3301      	adds	r3, #1
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d120      	bne.n	80061ea <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	1e9a      	subs	r2, r3, #2
 80061ae:	88fb      	ldrh	r3, [r7, #6]
 80061b0:	4293      	cmp	r3, r2
 80061b2:	bf28      	it	cs
 80061b4:	4613      	movcs	r3, r2
 80061b6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	3302      	adds	r3, #2
 80061bc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80061be:	2300      	movs	r3, #0
 80061c0:	82fb      	strh	r3, [r7, #22]
 80061c2:	e00b      	b.n	80061dc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80061c4:	8afb      	ldrh	r3, [r7, #22]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	4413      	add	r3, r2
 80061ca:	781a      	ldrb	r2, [r3, #0]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	701a      	strb	r2, [r3, #0]
      pdest++;
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	3301      	adds	r3, #1
 80061d4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80061d6:	8afb      	ldrh	r3, [r7, #22]
 80061d8:	3302      	adds	r3, #2
 80061da:	82fb      	strh	r3, [r7, #22]
 80061dc:	8afa      	ldrh	r2, [r7, #22]
 80061de:	8abb      	ldrh	r3, [r7, #20]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d3ef      	bcc.n	80061c4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2200      	movs	r2, #0
 80061e8:	701a      	strb	r2, [r3, #0]
  }
}
 80061ea:	bf00      	nop
 80061ec:	371c      	adds	r7, #28
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bc80      	pop	{r7}
 80061f2:	4770      	bx	lr

080061f4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	881a      	ldrh	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	4413      	add	r3, r2
 800620a:	b29a      	uxth	r2, r3
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4413      	add	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800621c:	68fb      	ldr	r3, [r7, #12]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	bc80      	pop	{r7}
 8006226:	4770      	bx	lr

08006228 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af00      	add	r7, sp, #0
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	4613      	mov	r3, r2
 8006234:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006236:	2301      	movs	r3, #1
 8006238:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	789b      	ldrb	r3, [r3, #2]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d002      	beq.n	8006248 <USBH_CtlReq+0x20>
 8006242:	2b02      	cmp	r3, #2
 8006244:	d00f      	beq.n	8006266 <USBH_CtlReq+0x3e>
        }
      }
      break;

    default:
      break;
 8006246:	e034      	b.n	80062b2 <USBH_CtlReq+0x8a>
      phost->Control.buff = buff;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	88fa      	ldrh	r2, [r7, #6]
 8006252:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2202      	movs	r2, #2
 800625e:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006260:	2301      	movs	r3, #1
 8006262:	75fb      	strb	r3, [r7, #23]
      break;
 8006264:	e025      	b.n	80062b2 <USBH_CtlReq+0x8a>
      status = USBH_HandleControl(phost);
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 f828 	bl	80062bc <USBH_HandleControl>
 800626c:	4603      	mov	r3, r0
 800626e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8006270:	7dfb      	ldrb	r3, [r7, #23]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d108      	bne.n	8006288 <USBH_CtlReq+0x60>
        phost->RequestState = CMD_SEND;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2201      	movs	r2, #1
 800627a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	75fb      	strb	r3, [r7, #23]
      break;
 8006286:	e013      	b.n	80062b0 <USBH_CtlReq+0x88>
      else if (status == USBH_NOT_SUPPORTED)
 8006288:	7dfb      	ldrb	r3, [r7, #23]
 800628a:	2b03      	cmp	r3, #3
 800628c:	d108      	bne.n	80062a0 <USBH_CtlReq+0x78>
        phost->RequestState = CMD_SEND;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2201      	movs	r2, #1
 8006292:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800629a:	2303      	movs	r3, #3
 800629c:	75fb      	strb	r3, [r7, #23]
      break;
 800629e:	e007      	b.n	80062b0 <USBH_CtlReq+0x88>
        if (status == USBH_FAIL)
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d104      	bne.n	80062b0 <USBH_CtlReq+0x88>
          phost->RequestState = CMD_SEND;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	709a      	strb	r2, [r3, #2]
          status = USBH_FAIL;
 80062ac:	2302      	movs	r3, #2
 80062ae:	75fb      	strb	r3, [r7, #23]
      break;
 80062b0:	bf00      	nop
  }
  return status;
 80062b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3718      	adds	r7, #24
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af02      	add	r7, sp, #8
 80062c2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80062c4:	2301      	movs	r3, #1
 80062c6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80062c8:	2300      	movs	r3, #0
 80062ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	7e1b      	ldrb	r3, [r3, #24]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	2b0a      	cmp	r3, #10
 80062d4:	f200 814c 	bhi.w	8006570 <USBH_HandleControl+0x2b4>
 80062d8:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <USBH_HandleControl+0x24>)
 80062da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062de:	bf00      	nop
 80062e0:	0800630d 	.word	0x0800630d
 80062e4:	08006327 	.word	0x08006327
 80062e8:	08006391 	.word	0x08006391
 80062ec:	080063b7 	.word	0x080063b7
 80062f0:	080063ef 	.word	0x080063ef
 80062f4:	0800641b 	.word	0x0800641b
 80062f8:	0800646d 	.word	0x0800646d
 80062fc:	0800648f 	.word	0x0800648f
 8006300:	080064cb 	.word	0x080064cb
 8006304:	080064f3 	.word	0x080064f3
 8006308:	08006531 	.word	0x08006531
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f103 0110 	add.w	r1, r3, #16
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	795b      	ldrb	r3, [r3, #5]
 8006316:	461a      	mov	r2, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 f939 	bl	8006590 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2202      	movs	r2, #2
 8006322:	761a      	strb	r2, [r3, #24]
      break;
 8006324:	e12f      	b.n	8006586 <USBH_HandleControl+0x2ca>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	795b      	ldrb	r3, [r3, #5]
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fcad 	bl	8006c8c <USBH_LL_GetURBState>
 8006332:	4603      	mov	r3, r0
 8006334:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006336:	7bbb      	ldrb	r3, [r7, #14]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d11e      	bne.n	800637a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	7c1b      	ldrb	r3, [r3, #16]
 8006340:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006344:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	8adb      	ldrh	r3, [r3, #22]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800634e:	7b7b      	ldrb	r3, [r7, #13]
 8006350:	2b80      	cmp	r3, #128	; 0x80
 8006352:	d103      	bne.n	800635c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2203      	movs	r2, #3
 8006358:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800635a:	e10b      	b.n	8006574 <USBH_HandleControl+0x2b8>
            phost->Control.state = CTRL_DATA_OUT;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2205      	movs	r2, #5
 8006360:	761a      	strb	r2, [r3, #24]
      break;
 8006362:	e107      	b.n	8006574 <USBH_HandleControl+0x2b8>
          if (direction == USB_D2H)
 8006364:	7b7b      	ldrb	r3, [r7, #13]
 8006366:	2b80      	cmp	r3, #128	; 0x80
 8006368:	d103      	bne.n	8006372 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2209      	movs	r2, #9
 800636e:	761a      	strb	r2, [r3, #24]
      break;
 8006370:	e100      	b.n	8006574 <USBH_HandleControl+0x2b8>
            phost->Control.state = CTRL_STATUS_IN;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2207      	movs	r2, #7
 8006376:	761a      	strb	r2, [r3, #24]
      break;
 8006378:	e0fc      	b.n	8006574 <USBH_HandleControl+0x2b8>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800637a:	7bbb      	ldrb	r3, [r7, #14]
 800637c:	2b04      	cmp	r3, #4
 800637e:	d003      	beq.n	8006388 <USBH_HandleControl+0xcc>
 8006380:	7bbb      	ldrb	r3, [r7, #14]
 8006382:	2b02      	cmp	r3, #2
 8006384:	f040 80f6 	bne.w	8006574 <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_ERROR;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	220b      	movs	r2, #11
 800638c:	761a      	strb	r2, [r3, #24]
      break;
 800638e:	e0f1      	b.n	8006574 <USBH_HandleControl+0x2b8>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006396:	b29a      	uxth	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6899      	ldr	r1, [r3, #8]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	899a      	ldrh	r2, [r3, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	791b      	ldrb	r3, [r3, #4]
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f930 	bl	800660e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2204      	movs	r2, #4
 80063b2:	761a      	strb	r2, [r3, #24]
      break;
 80063b4:	e0e7      	b.n	8006586 <USBH_HandleControl+0x2ca>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	791b      	ldrb	r3, [r3, #4]
 80063ba:	4619      	mov	r1, r3
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fc65 	bl	8006c8c <USBH_LL_GetURBState>
 80063c2:	4603      	mov	r3, r0
 80063c4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80063c6:	7bbb      	ldrb	r3, [r7, #14]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d102      	bne.n	80063d2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2209      	movs	r2, #9
 80063d0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80063d2:	7bbb      	ldrb	r3, [r7, #14]
 80063d4:	2b05      	cmp	r3, #5
 80063d6:	d102      	bne.n	80063de <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80063d8:	2303      	movs	r3, #3
 80063da:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80063dc:	e0cc      	b.n	8006578 <USBH_HandleControl+0x2bc>
        if (URB_Status == USBH_URB_ERROR)
 80063de:	7bbb      	ldrb	r3, [r7, #14]
 80063e0:	2b04      	cmp	r3, #4
 80063e2:	f040 80c9 	bne.w	8006578 <USBH_HandleControl+0x2bc>
          phost->Control.state = CTRL_ERROR;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	220b      	movs	r2, #11
 80063ea:	761a      	strb	r2, [r3, #24]
      break;
 80063ec:	e0c4      	b.n	8006578 <USBH_HandleControl+0x2bc>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6899      	ldr	r1, [r3, #8]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	899a      	ldrh	r2, [r3, #12]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	7958      	ldrb	r0, [r3, #5]
 80063fa:	2301      	movs	r3, #1
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	4603      	mov	r3, r0
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f8df 	bl	80065c4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800640c:	b29a      	uxth	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2206      	movs	r2, #6
 8006416:	761a      	strb	r2, [r3, #24]
      break;
 8006418:	e0b5      	b.n	8006586 <USBH_HandleControl+0x2ca>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	795b      	ldrb	r3, [r3, #5]
 800641e:	4619      	mov	r1, r3
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fc33 	bl	8006c8c <USBH_LL_GetURBState>
 8006426:	4603      	mov	r3, r0
 8006428:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800642a:	7bbb      	ldrb	r3, [r7, #14]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d103      	bne.n	8006438 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2207      	movs	r2, #7
 8006434:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006436:	e0a1      	b.n	800657c <USBH_HandleControl+0x2c0>
      else if (URB_Status == USBH_URB_STALL)
 8006438:	7bbb      	ldrb	r3, [r7, #14]
 800643a:	2b05      	cmp	r3, #5
 800643c:	d105      	bne.n	800644a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	220c      	movs	r2, #12
 8006442:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006444:	2303      	movs	r3, #3
 8006446:	73fb      	strb	r3, [r7, #15]
      break;
 8006448:	e098      	b.n	800657c <USBH_HandleControl+0x2c0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800644a:	7bbb      	ldrb	r3, [r7, #14]
 800644c:	2b02      	cmp	r3, #2
 800644e:	d103      	bne.n	8006458 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2205      	movs	r2, #5
 8006454:	761a      	strb	r2, [r3, #24]
      break;
 8006456:	e091      	b.n	800657c <USBH_HandleControl+0x2c0>
        if (URB_Status == USBH_URB_ERROR)
 8006458:	7bbb      	ldrb	r3, [r7, #14]
 800645a:	2b04      	cmp	r3, #4
 800645c:	f040 808e 	bne.w	800657c <USBH_HandleControl+0x2c0>
          phost->Control.state = CTRL_ERROR;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	220b      	movs	r2, #11
 8006464:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006466:	2302      	movs	r3, #2
 8006468:	73fb      	strb	r3, [r7, #15]
      break;
 800646a:	e087      	b.n	800657c <USBH_HandleControl+0x2c0>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	791b      	ldrb	r3, [r3, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	2100      	movs	r1, #0
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f8ca 	bl	800660e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006480:	b29a      	uxth	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2208      	movs	r2, #8
 800648a:	761a      	strb	r2, [r3, #24]

      break;
 800648c:	e07b      	b.n	8006586 <USBH_HandleControl+0x2ca>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	791b      	ldrb	r3, [r3, #4]
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fbf9 	bl	8006c8c <USBH_LL_GetURBState>
 800649a:	4603      	mov	r3, r0
 800649c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800649e:	7bbb      	ldrb	r3, [r7, #14]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d105      	bne.n	80064b0 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	220d      	movs	r2, #13
 80064a8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80064ae:	e067      	b.n	8006580 <USBH_HandleControl+0x2c4>
      else if (URB_Status == USBH_URB_ERROR)
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d103      	bne.n	80064be <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	220b      	movs	r2, #11
 80064ba:	761a      	strb	r2, [r3, #24]
      break;
 80064bc:	e060      	b.n	8006580 <USBH_HandleControl+0x2c4>
        if (URB_Status == USBH_URB_STALL)
 80064be:	7bbb      	ldrb	r3, [r7, #14]
 80064c0:	2b05      	cmp	r3, #5
 80064c2:	d15d      	bne.n	8006580 <USBH_HandleControl+0x2c4>
          status = USBH_NOT_SUPPORTED;
 80064c4:	2303      	movs	r3, #3
 80064c6:	73fb      	strb	r3, [r7, #15]
      break;
 80064c8:	e05a      	b.n	8006580 <USBH_HandleControl+0x2c4>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	795a      	ldrb	r2, [r3, #5]
 80064ce:	2301      	movs	r3, #1
 80064d0:	9300      	str	r3, [sp, #0]
 80064d2:	4613      	mov	r3, r2
 80064d4:	2200      	movs	r2, #0
 80064d6:	2100      	movs	r1, #0
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f873 	bl	80065c4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	220a      	movs	r2, #10
 80064ee:	761a      	strb	r2, [r3, #24]
      break;
 80064f0:	e049      	b.n	8006586 <USBH_HandleControl+0x2ca>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	795b      	ldrb	r3, [r3, #5]
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fbc7 	bl	8006c8c <USBH_LL_GetURBState>
 80064fe:	4603      	mov	r3, r0
 8006500:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006502:	7bbb      	ldrb	r3, [r7, #14]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d105      	bne.n	8006514 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	220d      	movs	r2, #13
 8006510:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006512:	e037      	b.n	8006584 <USBH_HandleControl+0x2c8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006514:	7bbb      	ldrb	r3, [r7, #14]
 8006516:	2b02      	cmp	r3, #2
 8006518:	d103      	bne.n	8006522 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2209      	movs	r2, #9
 800651e:	761a      	strb	r2, [r3, #24]
      break;
 8006520:	e030      	b.n	8006584 <USBH_HandleControl+0x2c8>
        if (URB_Status == USBH_URB_ERROR)
 8006522:	7bbb      	ldrb	r3, [r7, #14]
 8006524:	2b04      	cmp	r3, #4
 8006526:	d12d      	bne.n	8006584 <USBH_HandleControl+0x2c8>
          phost->Control.state = CTRL_ERROR;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	220b      	movs	r2, #11
 800652c:	761a      	strb	r2, [r3, #24]
      break;
 800652e:	e029      	b.n	8006584 <USBH_HandleControl+0x2c8>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	7e5b      	ldrb	r3, [r3, #25]
 8006534:	3301      	adds	r3, #1
 8006536:	b2da      	uxtb	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	765a      	strb	r2, [r3, #25]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	7e5b      	ldrb	r3, [r3, #25]
 8006540:	2b02      	cmp	r3, #2
 8006542:	d806      	bhi.n	8006552 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	709a      	strb	r2, [r3, #2]
        phost->Control.errorcount = 0U;
        USBH_ErrLog("Control error: Device not responding");
        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006550:	e019      	b.n	8006586 <USBH_HandleControl+0x2ca>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006558:	2106      	movs	r1, #6
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	765a      	strb	r2, [r3, #25]
        phost->gState = HOST_IDLE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800656a:	2302      	movs	r3, #2
 800656c:	73fb      	strb	r3, [r7, #15]
      break;
 800656e:	e00a      	b.n	8006586 <USBH_HandleControl+0x2ca>

    default:
      break;
 8006570:	bf00      	nop
 8006572:	e008      	b.n	8006586 <USBH_HandleControl+0x2ca>
      break;
 8006574:	bf00      	nop
 8006576:	e006      	b.n	8006586 <USBH_HandleControl+0x2ca>
      break;
 8006578:	bf00      	nop
 800657a:	e004      	b.n	8006586 <USBH_HandleControl+0x2ca>
      break;
 800657c:	bf00      	nop
 800657e:	e002      	b.n	8006586 <USBH_HandleControl+0x2ca>
      break;
 8006580:	bf00      	nop
 8006582:	e000      	b.n	8006586 <USBH_HandleControl+0x2ca>
      break;
 8006584:	bf00      	nop
  }

  return status;
 8006586:	7bfb      	ldrb	r3, [r7, #15]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b088      	sub	sp, #32
 8006594:	af04      	add	r7, sp, #16
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	4613      	mov	r3, r2
 800659c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800659e:	79f9      	ldrb	r1, [r7, #7]
 80065a0:	2300      	movs	r3, #0
 80065a2:	9303      	str	r3, [sp, #12]
 80065a4:	2308      	movs	r3, #8
 80065a6:	9302      	str	r3, [sp, #8]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	9301      	str	r3, [sp, #4]
 80065ac:	2300      	movs	r3, #0
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	2300      	movs	r3, #0
 80065b2:	2200      	movs	r2, #0
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 fb38 	bl	8006c2a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af04      	add	r7, sp, #16
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	4611      	mov	r1, r2
 80065d0:	461a      	mov	r2, r3
 80065d2:	460b      	mov	r3, r1
 80065d4:	80fb      	strh	r3, [r7, #6]
 80065d6:	4613      	mov	r3, r2
 80065d8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d001      	beq.n	80065e8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80065e4:	2300      	movs	r3, #0
 80065e6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80065e8:	7979      	ldrb	r1, [r7, #5]
 80065ea:	7e3b      	ldrb	r3, [r7, #24]
 80065ec:	9303      	str	r3, [sp, #12]
 80065ee:	88fb      	ldrh	r3, [r7, #6]
 80065f0:	9302      	str	r3, [sp, #8]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	9301      	str	r3, [sp, #4]
 80065f6:	2301      	movs	r3, #1
 80065f8:	9300      	str	r3, [sp, #0]
 80065fa:	2300      	movs	r3, #0
 80065fc:	2200      	movs	r2, #0
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f000 fb13 	bl	8006c2a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b088      	sub	sp, #32
 8006612:	af04      	add	r7, sp, #16
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	4611      	mov	r1, r2
 800661a:	461a      	mov	r2, r3
 800661c:	460b      	mov	r3, r1
 800661e:	80fb      	strh	r3, [r7, #6]
 8006620:	4613      	mov	r3, r2
 8006622:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006624:	7979      	ldrb	r1, [r7, #5]
 8006626:	2300      	movs	r3, #0
 8006628:	9303      	str	r3, [sp, #12]
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	9302      	str	r3, [sp, #8]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	9301      	str	r3, [sp, #4]
 8006632:	2301      	movs	r3, #1
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	2300      	movs	r3, #0
 8006638:	2201      	movs	r2, #1
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 faf5 	bl	8006c2a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006640:	2300      	movs	r3, #0

}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b088      	sub	sp, #32
 800664e:	af04      	add	r7, sp, #16
 8006650:	60f8      	str	r0, [r7, #12]
 8006652:	60b9      	str	r1, [r7, #8]
 8006654:	4611      	mov	r1, r2
 8006656:	461a      	mov	r2, r3
 8006658:	460b      	mov	r3, r1
 800665a:	80fb      	strh	r3, [r7, #6]
 800665c:	4613      	mov	r3, r2
 800665e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800666a:	2300      	movs	r3, #0
 800666c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800666e:	7979      	ldrb	r1, [r7, #5]
 8006670:	7e3b      	ldrb	r3, [r7, #24]
 8006672:	9303      	str	r3, [sp, #12]
 8006674:	88fb      	ldrh	r3, [r7, #6]
 8006676:	9302      	str	r3, [sp, #8]
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	9301      	str	r3, [sp, #4]
 800667c:	2301      	movs	r3, #1
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	2302      	movs	r3, #2
 8006682:	2200      	movs	r2, #0
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 fad0 	bl	8006c2a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800668a:	2300      	movs	r3, #0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af04      	add	r7, sp, #16
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	4611      	mov	r1, r2
 80066a0:	461a      	mov	r2, r3
 80066a2:	460b      	mov	r3, r1
 80066a4:	80fb      	strh	r3, [r7, #6]
 80066a6:	4613      	mov	r3, r2
 80066a8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80066aa:	7979      	ldrb	r1, [r7, #5]
 80066ac:	2300      	movs	r3, #0
 80066ae:	9303      	str	r3, [sp, #12]
 80066b0:	88fb      	ldrh	r3, [r7, #6]
 80066b2:	9302      	str	r3, [sp, #8]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	9301      	str	r3, [sp, #4]
 80066b8:	2301      	movs	r3, #1
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	2302      	movs	r3, #2
 80066be:	2201      	movs	r2, #1
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f000 fab2 	bl	8006c2a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af04      	add	r7, sp, #16
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	4608      	mov	r0, r1
 80066da:	4611      	mov	r1, r2
 80066dc:	461a      	mov	r2, r3
 80066de:	4603      	mov	r3, r0
 80066e0:	70fb      	strb	r3, [r7, #3]
 80066e2:	460b      	mov	r3, r1
 80066e4:	70bb      	strb	r3, [r7, #2]
 80066e6:	4613      	mov	r3, r2
 80066e8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80066ea:	7878      	ldrb	r0, [r7, #1]
 80066ec:	78ba      	ldrb	r2, [r7, #2]
 80066ee:	78f9      	ldrb	r1, [r7, #3]
 80066f0:	8b3b      	ldrh	r3, [r7, #24]
 80066f2:	9302      	str	r3, [sp, #8]
 80066f4:	7d3b      	ldrb	r3, [r7, #20]
 80066f6:	9301      	str	r3, [sp, #4]
 80066f8:	7c3b      	ldrb	r3, [r7, #16]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	4603      	mov	r3, r0
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 fa45 	bl	8006b8e <USBH_LL_OpenPipe>

  return USBH_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b082      	sub	sp, #8
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	460b      	mov	r3, r1
 8006718:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800671a:	78fb      	ldrb	r3, [r7, #3]
 800671c:	4619      	mov	r1, r3
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fa64 	bl	8006bec <USBH_LL_ClosePipe>

  return USBH_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b084      	sub	sp, #16
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	460b      	mov	r3, r1
 8006738:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f835 	bl	80067aa <USBH_GetFreePipe>
 8006740:	4603      	mov	r3, r0
 8006742:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006744:	89fb      	ldrh	r3, [r7, #14]
 8006746:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800674a:	4293      	cmp	r3, r2
 800674c:	d00a      	beq.n	8006764 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800674e:	78fa      	ldrb	r2, [r7, #3]
 8006750:	89fb      	ldrh	r3, [r7, #14]
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800675a:	6879      	ldr	r1, [r7, #4]
 800675c:	33e0      	adds	r3, #224	; 0xe0
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	440b      	add	r3, r1
 8006762:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006764:	89fb      	ldrh	r3, [r7, #14]
 8006766:	b2db      	uxtb	r3, r3
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	460b      	mov	r3, r1
 800677a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800677c:	78fb      	ldrb	r3, [r7, #3]
 800677e:	2b0a      	cmp	r3, #10
 8006780:	d80d      	bhi.n	800679e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006782:	78fb      	ldrb	r3, [r7, #3]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	33e0      	adds	r3, #224	; 0xe0
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4413      	add	r3, r2
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	78fb      	ldrb	r3, [r7, #3]
 8006790:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006794:	6879      	ldr	r1, [r7, #4]
 8006796:	33e0      	adds	r3, #224	; 0xe0
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	440b      	add	r3, r1
 800679c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr

080067aa <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b085      	sub	sp, #20
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80067b6:	2300      	movs	r3, #0
 80067b8:	73fb      	strb	r3, [r7, #15]
 80067ba:	e00f      	b.n	80067dc <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	33e0      	adds	r3, #224	; 0xe0
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d102      	bne.n	80067d6 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80067d0:	7bfb      	ldrb	r3, [r7, #15]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	e007      	b.n	80067e6 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80067d6:	7bfb      	ldrb	r3, [r7, #15]
 80067d8:	3301      	adds	r3, #1
 80067da:	73fb      	strb	r3, [r7, #15]
 80067dc:	7bfb      	ldrb	r3, [r7, #15]
 80067de:	2b0a      	cmp	r3, #10
 80067e0:	d9ec      	bls.n	80067bc <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80067e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bc80      	pop	{r7}
 80067ee:	4770      	bx	lr

080067f0 <USBH_CDC_TransmitCallback>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
	USBH_CDC_Receive(phost,usb_rx_buf,5);
 80067f8:	2205      	movs	r2, #5
 80067fa:	4904      	ldr	r1, [pc, #16]	; (800680c <USBH_CDC_TransmitCallback+0x1c>)
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f7fe fcac 	bl	800515a <USBH_CDC_Receive>
}
 8006802:	bf00      	nop
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	200004f4 	.word	0x200004f4

08006810 <USBH_CDC_ReceiveCallback>:

void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart1,usb_rx_buf,5,100);
 8006818:	2364      	movs	r3, #100	; 0x64
 800681a:	2205      	movs	r2, #5
 800681c:	4903      	ldr	r1, [pc, #12]	; (800682c <USBH_CDC_ReceiveCallback+0x1c>)
 800681e:	4804      	ldr	r0, [pc, #16]	; (8006830 <USBH_CDC_ReceiveCallback+0x20>)
 8006820:	f7fc ffdb 	bl	80037da <HAL_UART_Transmit>
}
 8006824:	bf00      	nop
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	200004f4 	.word	0x200004f4
 8006830:	200000c8 	.word	0x200000c8

08006834 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006838:	2201      	movs	r2, #1
 800683a:	490e      	ldr	r1, [pc, #56]	; (8006874 <MX_USB_HOST_Init+0x40>)
 800683c:	480e      	ldr	r0, [pc, #56]	; (8006878 <MX_USB_HOST_Init+0x44>)
 800683e:	f7fe fd95 	bl	800536c <USBH_Init>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d001      	beq.n	800684c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006848:	f7f9 ff5c 	bl	8000704 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800684c:	490b      	ldr	r1, [pc, #44]	; (800687c <MX_USB_HOST_Init+0x48>)
 800684e:	480a      	ldr	r0, [pc, #40]	; (8006878 <MX_USB_HOST_Init+0x44>)
 8006850:	f7fe fe11 	bl	8005476 <USBH_RegisterClass>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800685a:	f7f9 ff53 	bl	8000704 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800685e:	4806      	ldr	r0, [pc, #24]	; (8006878 <MX_USB_HOST_Init+0x44>)
 8006860:	f7fe fe93 	bl	800558a <USBH_Start>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800686a:	f7f9 ff4b 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800686e:	bf00      	nop
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	08006895 	.word	0x08006895
 8006878:	2000010c 	.word	0x2000010c
 800687c:	2000000c 	.word	0x2000000c

08006880 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006884:	4802      	ldr	r0, [pc, #8]	; (8006890 <MX_USB_HOST_Process+0x10>)
 8006886:	f7fe fe91 	bl	80055ac <USBH_Process>
}
 800688a:	bf00      	nop
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	2000010c 	.word	0x2000010c

08006894 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d82a      	bhi.n	80068fe <USBH_UserProcess+0x6a>
 80068a8:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <USBH_UserProcess+0x1c>)
 80068aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ae:	bf00      	nop
 80068b0:	080068ff 	.word	0x080068ff
 80068b4:	080068cd 	.word	0x080068cd
 80068b8:	080068ff 	.word	0x080068ff
 80068bc:	080068eb 	.word	0x080068eb
 80068c0:	080068c5 	.word	0x080068c5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80068c4:	4b10      	ldr	r3, [pc, #64]	; (8006908 <USBH_UserProcess+0x74>)
 80068c6:	2203      	movs	r2, #3
 80068c8:	701a      	strb	r2, [r3, #0]
  break;
 80068ca:	e019      	b.n	8006900 <USBH_UserProcess+0x6c>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80068cc:	4b0e      	ldr	r3, [pc, #56]	; (8006908 <USBH_UserProcess+0x74>)
 80068ce:	2202      	movs	r2, #2
 80068d0:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,"rd",2,1);
 80068d2:	2301      	movs	r3, #1
 80068d4:	2202      	movs	r2, #2
 80068d6:	490d      	ldr	r1, [pc, #52]	; (800690c <USBH_UserProcess+0x78>)
 80068d8:	480d      	ldr	r0, [pc, #52]	; (8006910 <USBH_UserProcess+0x7c>)
 80068da:	f7fc ff7e 	bl	80037da <HAL_UART_Transmit>
  USBH_CDC_Transmit(&hUsbHostFS,uart_tx_msg,5);
 80068de:	2205      	movs	r2, #5
 80068e0:	490c      	ldr	r1, [pc, #48]	; (8006914 <USBH_UserProcess+0x80>)
 80068e2:	480d      	ldr	r0, [pc, #52]	; (8006918 <USBH_UserProcess+0x84>)
 80068e4:	f7fe fc0c 	bl	8005100 <USBH_CDC_Transmit>
  break;
 80068e8:	e00a      	b.n	8006900 <USBH_UserProcess+0x6c>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80068ea:	4b07      	ldr	r3, [pc, #28]	; (8006908 <USBH_UserProcess+0x74>)
 80068ec:	2201      	movs	r2, #1
 80068ee:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1,"st",2,1);
 80068f0:	2301      	movs	r3, #1
 80068f2:	2202      	movs	r2, #2
 80068f4:	4909      	ldr	r1, [pc, #36]	; (800691c <USBH_UserProcess+0x88>)
 80068f6:	4806      	ldr	r0, [pc, #24]	; (8006910 <USBH_UserProcess+0x7c>)
 80068f8:	f7fc ff6f 	bl	80037da <HAL_UART_Transmit>
  break;
 80068fc:	e000      	b.n	8006900 <USBH_UserProcess+0x6c>

  default:
  break;
 80068fe:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006900:	bf00      	nop
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	200000bc 	.word	0x200000bc
 800690c:	0800701c 	.word	0x0800701c
 8006910:	200000c8 	.word	0x200000c8
 8006914:	2000002c 	.word	0x2000002c
 8006918:	2000010c 	.word	0x2000010c
 800691c:	08007020 	.word	0x08007020

08006920 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006930:	d113      	bne.n	800695a <HAL_HCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006932:	4b0c      	ldr	r3, [pc, #48]	; (8006964 <HAL_HCD_MspInit+0x44>)
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	4a0b      	ldr	r2, [pc, #44]	; (8006964 <HAL_HCD_MspInit+0x44>)
 8006938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800693c:	6153      	str	r3, [r2, #20]
 800693e:	4b09      	ldr	r3, [pc, #36]	; (8006964 <HAL_HCD_MspInit+0x44>)
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800694a:	2200      	movs	r2, #0
 800694c:	2100      	movs	r1, #0
 800694e:	2043      	movs	r0, #67	; 0x43
 8006950:	f7fa f95f 	bl	8000c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006954:	2043      	movs	r0, #67	; 0x43
 8006956:	f7fa f978 	bl	8000c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800695a:	bf00      	nop
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	40021000 	.word	0x40021000

08006968 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff f8e6 	bl	8005b48 <USBH_LL_IncTimer>
}
 800697c:	bf00      	nop
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006992:	4618      	mov	r0, r3
 8006994:	f7ff f91c 	bl	8005bd0 <USBH_LL_Connect>
}
 8006998:	bf00      	nop
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7ff f924 	bl	8005bfc <USBH_LL_Disconnect>
}
 80069b4:	bf00      	nop
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	460b      	mov	r3, r1
 80069c6:	70fb      	strb	r3, [r7, #3]
 80069c8:	4613      	mov	r3, r2
 80069ca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bc80      	pop	{r7}
 80069d4:	4770      	bx	lr

080069d6 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069e4:	4618      	mov	r0, r3
 80069e6:	f7ff f8d9 	bl	8005b9c <USBH_LL_PortEnabled>
}
 80069ea:	bf00      	nop
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b082      	sub	sp, #8
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff f8d8 	bl	8005bb6 <USBH_LL_PortDisabled>
}
 8006a06:	bf00      	nop
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d124      	bne.n	8006a6c <USBH_LL_Init+0x5c>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006a22:	4a15      	ldr	r2, [pc, #84]	; (8006a78 <USBH_LL_Init+0x68>)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a12      	ldr	r2, [pc, #72]	; (8006a78 <USBH_LL_Init+0x68>)
 8006a2e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006a32:	4b11      	ldr	r3, [pc, #68]	; (8006a78 <USBH_LL_Init+0x68>)
 8006a34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006a38:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006a3a:	4b0f      	ldr	r3, [pc, #60]	; (8006a78 <USBH_LL_Init+0x68>)
 8006a3c:	2208      	movs	r2, #8
 8006a3e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006a40:	4b0d      	ldr	r3, [pc, #52]	; (8006a78 <USBH_LL_Init+0x68>)
 8006a42:	2201      	movs	r2, #1
 8006a44:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8006a46:	4b0c      	ldr	r3, [pc, #48]	; (8006a78 <USBH_LL_Init+0x68>)
 8006a48:	2201      	movs	r2, #1
 8006a4a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006a4c:	480a      	ldr	r0, [pc, #40]	; (8006a78 <USBH_LL_Init+0x68>)
 8006a4e:	f7fa fb91 	bl	8001174 <HAL_HCD_Init>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <USBH_LL_Init+0x4c>
  {
    Error_Handler( );
 8006a58:	f7f9 fe54 	bl	8000704 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006a5c:	4806      	ldr	r0, [pc, #24]	; (8006a78 <USBH_LL_Init+0x68>)
 8006a5e:	f7fa ff8f 	bl	8001980 <HAL_HCD_GetCurrentFrame>
 8006a62:	4603      	mov	r3, r0
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff f860 	bl	8005b2c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20000508 	.word	0x20000508

08006a7c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fa fefe 	bl	8001894 <HAL_HCD_Start>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f000 f95c 	bl	8006d5c <USBH_Get_USB_Status>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006aa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b084      	sub	sp, #16
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7fa ff06 	bl	80018da <HAL_HCD_Stop>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 f941 	bl	8006d5c <USBH_Get_USB_Status>
 8006ada:	4603      	mov	r3, r0
 8006adc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ade:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8006af0:	2301      	movs	r3, #1
 8006af2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fa ff4e 	bl	800199c <HAL_HCD_GetCurrentSpeed>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d007      	beq.n	8006b16 <USBH_LL_GetSpeed+0x2e>
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d302      	bcc.n	8006b10 <USBH_LL_GetSpeed+0x28>
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d006      	beq.n	8006b1c <USBH_LL_GetSpeed+0x34>
 8006b0e:	e008      	b.n	8006b22 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8006b10:	2300      	movs	r3, #0
 8006b12:	73fb      	strb	r3, [r7, #15]
    break;
 8006b14:	e008      	b.n	8006b28 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8006b16:	2301      	movs	r3, #1
 8006b18:	73fb      	strb	r3, [r7, #15]
    break;
 8006b1a:	e005      	b.n	8006b28 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	73fb      	strb	r3, [r7, #15]
    break;
 8006b20:	e002      	b.n	8006b28 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8006b22:	2301      	movs	r3, #1
 8006b24:	73fb      	strb	r3, [r7, #15]
    break;
 8006b26:	bf00      	nop
  }
  return  speed;
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f7fa fee3 	bl	8001914 <HAL_HCD_ResetPort>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f000 f901 	bl	8006d5c <USBH_Get_USB_Status>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006b7a:	78fa      	ldrb	r2, [r7, #3]
 8006b7c:	4611      	mov	r1, r2
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fa feea 	bl	8001958 <HAL_HCD_HC_GetXferCount>
 8006b84:	4603      	mov	r3, r0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006b8e:	b590      	push	{r4, r7, lr}
 8006b90:	b089      	sub	sp, #36	; 0x24
 8006b92:	af04      	add	r7, sp, #16
 8006b94:	6078      	str	r0, [r7, #4]
 8006b96:	4608      	mov	r0, r1
 8006b98:	4611      	mov	r1, r2
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	70fb      	strb	r3, [r7, #3]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	70bb      	strb	r3, [r7, #2]
 8006ba4:	4613      	mov	r3, r2
 8006ba6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006bb6:	787c      	ldrb	r4, [r7, #1]
 8006bb8:	78ba      	ldrb	r2, [r7, #2]
 8006bba:	78f9      	ldrb	r1, [r7, #3]
 8006bbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006bbe:	9302      	str	r3, [sp, #8]
 8006bc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006bc4:	9301      	str	r3, [sp, #4]
 8006bc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	4623      	mov	r3, r4
 8006bce:	f7fa fb33 	bl	8001238 <HAL_HCD_HC_Init>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 f8bf 	bl	8006d5c <USBH_Get_USB_Status>
 8006bde:	4603      	mov	r3, r0
 8006be0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006be2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3714      	adds	r7, #20
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd90      	pop	{r4, r7, pc}

08006bec <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006c06:	78fa      	ldrb	r2, [r7, #3]
 8006c08:	4611      	mov	r1, r2
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fa fbac 	bl	8001368 <HAL_HCD_HC_Halt>
 8006c10:	4603      	mov	r3, r0
 8006c12:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f000 f8a0 	bl	8006d5c <USBH_Get_USB_Status>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006c2a:	b590      	push	{r4, r7, lr}
 8006c2c:	b089      	sub	sp, #36	; 0x24
 8006c2e:	af04      	add	r7, sp, #16
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	4608      	mov	r0, r1
 8006c34:	4611      	mov	r1, r2
 8006c36:	461a      	mov	r2, r3
 8006c38:	4603      	mov	r3, r0
 8006c3a:	70fb      	strb	r3, [r7, #3]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	70bb      	strb	r3, [r7, #2]
 8006c40:	4613      	mov	r3, r2
 8006c42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006c52:	787c      	ldrb	r4, [r7, #1]
 8006c54:	78ba      	ldrb	r2, [r7, #2]
 8006c56:	78f9      	ldrb	r1, [r7, #3]
 8006c58:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006c5c:	9303      	str	r3, [sp, #12]
 8006c5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c60:	9302      	str	r3, [sp, #8]
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	9301      	str	r3, [sp, #4]
 8006c66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	4623      	mov	r3, r4
 8006c6e:	f7fa fb9f 	bl	80013b0 <HAL_HCD_HC_SubmitRequest>
 8006c72:	4603      	mov	r3, r0
 8006c74:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f000 f86f 	bl	8006d5c <USBH_Get_USB_Status>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c82:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd90      	pop	{r4, r7, pc}

08006c8c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	460b      	mov	r3, r1
 8006c96:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006c9e:	78fa      	ldrb	r2, [r7, #3]
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7fa fe44 	bl	8001930 <HAL_HCD_HC_GetURBState>
 8006ca8:	4603      	mov	r3, r0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b082      	sub	sp, #8
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	460b      	mov	r3, r1
 8006cbc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d103      	bne.n	8006cd0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006cc8:	78fb      	ldrb	r3, [r7, #3]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 f872 	bl	8006db4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006cd0:	20c8      	movs	r0, #200	; 0xc8
 8006cd2:	f7f9 fea5 	bl	8000a20 <HAL_Delay>
  return USBH_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	70fb      	strb	r3, [r7, #3]
 8006cec:	4613      	mov	r3, r2
 8006cee:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 33cc 	ldr.w	r3, [r3, #972]	; 0x3cc
 8006cf6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006cf8:	78fa      	ldrb	r2, [r7, #3]
 8006cfa:	68f9      	ldr	r1, [r7, #12]
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	4413      	add	r3, r2
 8006d02:	00db      	lsls	r3, r3, #3
 8006d04:	440b      	add	r3, r1
 8006d06:	333b      	adds	r3, #59	; 0x3b
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00a      	beq.n	8006d24 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006d0e:	78fa      	ldrb	r2, [r7, #3]
 8006d10:	68f9      	ldr	r1, [r7, #12]
 8006d12:	4613      	mov	r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	4413      	add	r3, r2
 8006d18:	00db      	lsls	r3, r3, #3
 8006d1a:	440b      	add	r3, r1
 8006d1c:	3350      	adds	r3, #80	; 0x50
 8006d1e:	78ba      	ldrb	r2, [r7, #2]
 8006d20:	701a      	strb	r2, [r3, #0]
 8006d22:	e009      	b.n	8006d38 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006d24:	78fa      	ldrb	r2, [r7, #3]
 8006d26:	68f9      	ldr	r1, [r7, #12]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	440b      	add	r3, r1
 8006d32:	3351      	adds	r3, #81	; 0x51
 8006d34:	78ba      	ldrb	r2, [r7, #2]
 8006d36:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bc80      	pop	{r7}
 8006d42:	4770      	bx	lr

08006d44 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f7f9 fe67 	bl	8000a20 <HAL_Delay>
}
 8006d52:	bf00      	nop
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
	...

08006d5c <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	4603      	mov	r3, r0
 8006d64:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006d66:	2300      	movs	r3, #0
 8006d68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006d6a:	79fb      	ldrb	r3, [r7, #7]
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d817      	bhi.n	8006da0 <USBH_Get_USB_Status+0x44>
 8006d70:	a201      	add	r2, pc, #4	; (adr r2, 8006d78 <USBH_Get_USB_Status+0x1c>)
 8006d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d76:	bf00      	nop
 8006d78:	08006d89 	.word	0x08006d89
 8006d7c:	08006d8f 	.word	0x08006d8f
 8006d80:	08006d95 	.word	0x08006d95
 8006d84:	08006d9b 	.word	0x08006d9b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d8c:	e00b      	b.n	8006da6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006d8e:	2302      	movs	r3, #2
 8006d90:	73fb      	strb	r3, [r7, #15]
    break;
 8006d92:	e008      	b.n	8006da6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006d94:	2301      	movs	r3, #1
 8006d96:	73fb      	strb	r3, [r7, #15]
    break;
 8006d98:	e005      	b.n	8006da6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	73fb      	strb	r3, [r7, #15]
    break;
 8006d9e:	e002      	b.n	8006da6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006da0:	2302      	movs	r3, #2
 8006da2:	73fb      	strb	r3, [r7, #15]
    break;
 8006da4:	bf00      	nop
  }
  return usb_status;
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bc80      	pop	{r7}
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop

08006db4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	4603      	mov	r3, r0
 8006dbc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8006dbe:	79fb      	ldrb	r3, [r7, #7]
 8006dc0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006dc2:	79fb      	ldrb	r3, [r7, #7]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d102      	bne.n	8006dce <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	73fb      	strb	r3, [r7, #15]
 8006dcc:	e001      	b.n	8006dd2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,(GPIO_PinState)data);
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	4803      	ldr	r0, [pc, #12]	; (8006de8 <MX_DriverVbusFS+0x34>)
 8006dda:	f7fa f9b3 	bl	8001144 <HAL_GPIO_WritePin>
}
 8006dde:	bf00      	nop
 8006de0:	3710      	adds	r7, #16
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	40010c00 	.word	0x40010c00

08006dec <__errno>:
 8006dec:	4b01      	ldr	r3, [pc, #4]	; (8006df4 <__errno+0x8>)
 8006dee:	6818      	ldr	r0, [r3, #0]
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	20000034 	.word	0x20000034

08006df8 <__libc_init_array>:
 8006df8:	b570      	push	{r4, r5, r6, lr}
 8006dfa:	2500      	movs	r5, #0
 8006dfc:	4e0c      	ldr	r6, [pc, #48]	; (8006e30 <__libc_init_array+0x38>)
 8006dfe:	4c0d      	ldr	r4, [pc, #52]	; (8006e34 <__libc_init_array+0x3c>)
 8006e00:	1ba4      	subs	r4, r4, r6
 8006e02:	10a4      	asrs	r4, r4, #2
 8006e04:	42a5      	cmp	r5, r4
 8006e06:	d109      	bne.n	8006e1c <__libc_init_array+0x24>
 8006e08:	f000 f8ea 	bl	8006fe0 <_init>
 8006e0c:	2500      	movs	r5, #0
 8006e0e:	4e0a      	ldr	r6, [pc, #40]	; (8006e38 <__libc_init_array+0x40>)
 8006e10:	4c0a      	ldr	r4, [pc, #40]	; (8006e3c <__libc_init_array+0x44>)
 8006e12:	1ba4      	subs	r4, r4, r6
 8006e14:	10a4      	asrs	r4, r4, #2
 8006e16:	42a5      	cmp	r5, r4
 8006e18:	d105      	bne.n	8006e26 <__libc_init_array+0x2e>
 8006e1a:	bd70      	pop	{r4, r5, r6, pc}
 8006e1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e20:	4798      	blx	r3
 8006e22:	3501      	adds	r5, #1
 8006e24:	e7ee      	b.n	8006e04 <__libc_init_array+0xc>
 8006e26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e2a:	4798      	blx	r3
 8006e2c:	3501      	adds	r5, #1
 8006e2e:	e7f2      	b.n	8006e16 <__libc_init_array+0x1e>
 8006e30:	08007044 	.word	0x08007044
 8006e34:	08007044 	.word	0x08007044
 8006e38:	08007044 	.word	0x08007044
 8006e3c:	08007048 	.word	0x08007048

08006e40 <malloc>:
 8006e40:	4b02      	ldr	r3, [pc, #8]	; (8006e4c <malloc+0xc>)
 8006e42:	4601      	mov	r1, r0
 8006e44:	6818      	ldr	r0, [r3, #0]
 8006e46:	f000 b85f 	b.w	8006f08 <_malloc_r>
 8006e4a:	bf00      	nop
 8006e4c:	20000034 	.word	0x20000034

08006e50 <free>:
 8006e50:	4b02      	ldr	r3, [pc, #8]	; (8006e5c <free+0xc>)
 8006e52:	4601      	mov	r1, r0
 8006e54:	6818      	ldr	r0, [r3, #0]
 8006e56:	f000 b80b 	b.w	8006e70 <_free_r>
 8006e5a:	bf00      	nop
 8006e5c:	20000034 	.word	0x20000034

08006e60 <memset>:
 8006e60:	4603      	mov	r3, r0
 8006e62:	4402      	add	r2, r0
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d100      	bne.n	8006e6a <memset+0xa>
 8006e68:	4770      	bx	lr
 8006e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e6e:	e7f9      	b.n	8006e64 <memset+0x4>

08006e70 <_free_r>:
 8006e70:	b538      	push	{r3, r4, r5, lr}
 8006e72:	4605      	mov	r5, r0
 8006e74:	2900      	cmp	r1, #0
 8006e76:	d043      	beq.n	8006f00 <_free_r+0x90>
 8006e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e7c:	1f0c      	subs	r4, r1, #4
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	bfb8      	it	lt
 8006e82:	18e4      	addlt	r4, r4, r3
 8006e84:	f000 f8aa 	bl	8006fdc <__malloc_lock>
 8006e88:	4a1e      	ldr	r2, [pc, #120]	; (8006f04 <_free_r+0x94>)
 8006e8a:	6813      	ldr	r3, [r2, #0]
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	b933      	cbnz	r3, 8006e9e <_free_r+0x2e>
 8006e90:	6063      	str	r3, [r4, #4]
 8006e92:	6014      	str	r4, [r2, #0]
 8006e94:	4628      	mov	r0, r5
 8006e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e9a:	f000 b8a0 	b.w	8006fde <__malloc_unlock>
 8006e9e:	42a3      	cmp	r3, r4
 8006ea0:	d90b      	bls.n	8006eba <_free_r+0x4a>
 8006ea2:	6821      	ldr	r1, [r4, #0]
 8006ea4:	1862      	adds	r2, r4, r1
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	bf01      	itttt	eq
 8006eaa:	681a      	ldreq	r2, [r3, #0]
 8006eac:	685b      	ldreq	r3, [r3, #4]
 8006eae:	1852      	addeq	r2, r2, r1
 8006eb0:	6022      	streq	r2, [r4, #0]
 8006eb2:	6063      	str	r3, [r4, #4]
 8006eb4:	6004      	str	r4, [r0, #0]
 8006eb6:	e7ed      	b.n	8006e94 <_free_r+0x24>
 8006eb8:	4613      	mov	r3, r2
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	b10a      	cbz	r2, 8006ec2 <_free_r+0x52>
 8006ebe:	42a2      	cmp	r2, r4
 8006ec0:	d9fa      	bls.n	8006eb8 <_free_r+0x48>
 8006ec2:	6819      	ldr	r1, [r3, #0]
 8006ec4:	1858      	adds	r0, r3, r1
 8006ec6:	42a0      	cmp	r0, r4
 8006ec8:	d10b      	bne.n	8006ee2 <_free_r+0x72>
 8006eca:	6820      	ldr	r0, [r4, #0]
 8006ecc:	4401      	add	r1, r0
 8006ece:	1858      	adds	r0, r3, r1
 8006ed0:	4282      	cmp	r2, r0
 8006ed2:	6019      	str	r1, [r3, #0]
 8006ed4:	d1de      	bne.n	8006e94 <_free_r+0x24>
 8006ed6:	6810      	ldr	r0, [r2, #0]
 8006ed8:	6852      	ldr	r2, [r2, #4]
 8006eda:	4401      	add	r1, r0
 8006edc:	6019      	str	r1, [r3, #0]
 8006ede:	605a      	str	r2, [r3, #4]
 8006ee0:	e7d8      	b.n	8006e94 <_free_r+0x24>
 8006ee2:	d902      	bls.n	8006eea <_free_r+0x7a>
 8006ee4:	230c      	movs	r3, #12
 8006ee6:	602b      	str	r3, [r5, #0]
 8006ee8:	e7d4      	b.n	8006e94 <_free_r+0x24>
 8006eea:	6820      	ldr	r0, [r4, #0]
 8006eec:	1821      	adds	r1, r4, r0
 8006eee:	428a      	cmp	r2, r1
 8006ef0:	bf01      	itttt	eq
 8006ef2:	6811      	ldreq	r1, [r2, #0]
 8006ef4:	6852      	ldreq	r2, [r2, #4]
 8006ef6:	1809      	addeq	r1, r1, r0
 8006ef8:	6021      	streq	r1, [r4, #0]
 8006efa:	6062      	str	r2, [r4, #4]
 8006efc:	605c      	str	r4, [r3, #4]
 8006efe:	e7c9      	b.n	8006e94 <_free_r+0x24>
 8006f00:	bd38      	pop	{r3, r4, r5, pc}
 8006f02:	bf00      	nop
 8006f04:	200000c0 	.word	0x200000c0

08006f08 <_malloc_r>:
 8006f08:	b570      	push	{r4, r5, r6, lr}
 8006f0a:	1ccd      	adds	r5, r1, #3
 8006f0c:	f025 0503 	bic.w	r5, r5, #3
 8006f10:	3508      	adds	r5, #8
 8006f12:	2d0c      	cmp	r5, #12
 8006f14:	bf38      	it	cc
 8006f16:	250c      	movcc	r5, #12
 8006f18:	2d00      	cmp	r5, #0
 8006f1a:	4606      	mov	r6, r0
 8006f1c:	db01      	blt.n	8006f22 <_malloc_r+0x1a>
 8006f1e:	42a9      	cmp	r1, r5
 8006f20:	d903      	bls.n	8006f2a <_malloc_r+0x22>
 8006f22:	230c      	movs	r3, #12
 8006f24:	6033      	str	r3, [r6, #0]
 8006f26:	2000      	movs	r0, #0
 8006f28:	bd70      	pop	{r4, r5, r6, pc}
 8006f2a:	f000 f857 	bl	8006fdc <__malloc_lock>
 8006f2e:	4a21      	ldr	r2, [pc, #132]	; (8006fb4 <_malloc_r+0xac>)
 8006f30:	6814      	ldr	r4, [r2, #0]
 8006f32:	4621      	mov	r1, r4
 8006f34:	b991      	cbnz	r1, 8006f5c <_malloc_r+0x54>
 8006f36:	4c20      	ldr	r4, [pc, #128]	; (8006fb8 <_malloc_r+0xb0>)
 8006f38:	6823      	ldr	r3, [r4, #0]
 8006f3a:	b91b      	cbnz	r3, 8006f44 <_malloc_r+0x3c>
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	f000 f83d 	bl	8006fbc <_sbrk_r>
 8006f42:	6020      	str	r0, [r4, #0]
 8006f44:	4629      	mov	r1, r5
 8006f46:	4630      	mov	r0, r6
 8006f48:	f000 f838 	bl	8006fbc <_sbrk_r>
 8006f4c:	1c43      	adds	r3, r0, #1
 8006f4e:	d124      	bne.n	8006f9a <_malloc_r+0x92>
 8006f50:	230c      	movs	r3, #12
 8006f52:	4630      	mov	r0, r6
 8006f54:	6033      	str	r3, [r6, #0]
 8006f56:	f000 f842 	bl	8006fde <__malloc_unlock>
 8006f5a:	e7e4      	b.n	8006f26 <_malloc_r+0x1e>
 8006f5c:	680b      	ldr	r3, [r1, #0]
 8006f5e:	1b5b      	subs	r3, r3, r5
 8006f60:	d418      	bmi.n	8006f94 <_malloc_r+0x8c>
 8006f62:	2b0b      	cmp	r3, #11
 8006f64:	d90f      	bls.n	8006f86 <_malloc_r+0x7e>
 8006f66:	600b      	str	r3, [r1, #0]
 8006f68:	18cc      	adds	r4, r1, r3
 8006f6a:	50cd      	str	r5, [r1, r3]
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	f000 f836 	bl	8006fde <__malloc_unlock>
 8006f72:	f104 000b 	add.w	r0, r4, #11
 8006f76:	1d23      	adds	r3, r4, #4
 8006f78:	f020 0007 	bic.w	r0, r0, #7
 8006f7c:	1ac3      	subs	r3, r0, r3
 8006f7e:	d0d3      	beq.n	8006f28 <_malloc_r+0x20>
 8006f80:	425a      	negs	r2, r3
 8006f82:	50e2      	str	r2, [r4, r3]
 8006f84:	e7d0      	b.n	8006f28 <_malloc_r+0x20>
 8006f86:	684b      	ldr	r3, [r1, #4]
 8006f88:	428c      	cmp	r4, r1
 8006f8a:	bf16      	itet	ne
 8006f8c:	6063      	strne	r3, [r4, #4]
 8006f8e:	6013      	streq	r3, [r2, #0]
 8006f90:	460c      	movne	r4, r1
 8006f92:	e7eb      	b.n	8006f6c <_malloc_r+0x64>
 8006f94:	460c      	mov	r4, r1
 8006f96:	6849      	ldr	r1, [r1, #4]
 8006f98:	e7cc      	b.n	8006f34 <_malloc_r+0x2c>
 8006f9a:	1cc4      	adds	r4, r0, #3
 8006f9c:	f024 0403 	bic.w	r4, r4, #3
 8006fa0:	42a0      	cmp	r0, r4
 8006fa2:	d005      	beq.n	8006fb0 <_malloc_r+0xa8>
 8006fa4:	1a21      	subs	r1, r4, r0
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	f000 f808 	bl	8006fbc <_sbrk_r>
 8006fac:	3001      	adds	r0, #1
 8006fae:	d0cf      	beq.n	8006f50 <_malloc_r+0x48>
 8006fb0:	6025      	str	r5, [r4, #0]
 8006fb2:	e7db      	b.n	8006f6c <_malloc_r+0x64>
 8006fb4:	200000c0 	.word	0x200000c0
 8006fb8:	200000c4 	.word	0x200000c4

08006fbc <_sbrk_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	4c05      	ldr	r4, [pc, #20]	; (8006fd8 <_sbrk_r+0x1c>)
 8006fc2:	4605      	mov	r5, r0
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	6023      	str	r3, [r4, #0]
 8006fc8:	f7f9 fc66 	bl	8000898 <_sbrk>
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	d102      	bne.n	8006fd6 <_sbrk_r+0x1a>
 8006fd0:	6823      	ldr	r3, [r4, #0]
 8006fd2:	b103      	cbz	r3, 8006fd6 <_sbrk_r+0x1a>
 8006fd4:	602b      	str	r3, [r5, #0]
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	200007cc 	.word	0x200007cc

08006fdc <__malloc_lock>:
 8006fdc:	4770      	bx	lr

08006fde <__malloc_unlock>:
 8006fde:	4770      	bx	lr

08006fe0 <_init>:
 8006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe2:	bf00      	nop
 8006fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe6:	bc08      	pop	{r3}
 8006fe8:	469e      	mov	lr, r3
 8006fea:	4770      	bx	lr

08006fec <_fini>:
 8006fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fee:	bf00      	nop
 8006ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ff2:	bc08      	pop	{r3}
 8006ff4:	469e      	mov	lr, r3
 8006ff6:	4770      	bx	lr
