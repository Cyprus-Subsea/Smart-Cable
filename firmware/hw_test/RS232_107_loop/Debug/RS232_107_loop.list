
RS232_107_loop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023d4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080025b8  080025b8  000125b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002600  08002600  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002600  08002600  00012600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002608  08002608  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002608  08002608  00012608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800260c  0800260c  0001260c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002610  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  0800261c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  0800261c  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005e22  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001466  00000000  00000000  00025e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000650  00000000  00000000  000272c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  00027910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001df3e  00000000  00000000  00027eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000718b  00000000  00000000  00045df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ade14  00000000  00000000  0004cf81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fad95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001890  00000000  00000000  000fade8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080025a0 	.word	0x080025a0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080025a0 	.word	0x080025a0

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b96e 	b.w	8000518 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9e08      	ldr	r6, [sp, #32]
 800025a:	460d      	mov	r5, r1
 800025c:	4604      	mov	r4, r0
 800025e:	468e      	mov	lr, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	f040 8083 	bne.w	800036c <__udivmoddi4+0x118>
 8000266:	428a      	cmp	r2, r1
 8000268:	4617      	mov	r7, r2
 800026a:	d947      	bls.n	80002fc <__udivmoddi4+0xa8>
 800026c:	fab2 f382 	clz	r3, r2
 8000270:	b14b      	cbz	r3, 8000286 <__udivmoddi4+0x32>
 8000272:	f1c3 0120 	rsb	r1, r3, #32
 8000276:	fa05 fe03 	lsl.w	lr, r5, r3
 800027a:	fa20 f101 	lsr.w	r1, r0, r1
 800027e:	409f      	lsls	r7, r3
 8000280:	ea41 0e0e 	orr.w	lr, r1, lr
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800028a:	fbbe fcf8 	udiv	ip, lr, r8
 800028e:	fa1f f987 	uxth.w	r9, r7
 8000292:	fb08 e21c 	mls	r2, r8, ip, lr
 8000296:	fb0c f009 	mul.w	r0, ip, r9
 800029a:	0c21      	lsrs	r1, r4, #16
 800029c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x66>
 80002a4:	18ba      	adds	r2, r7, r2
 80002a6:	f10c 31ff 	add.w	r1, ip, #4294967295
 80002aa:	f080 8118 	bcs.w	80004de <__udivmoddi4+0x28a>
 80002ae:	4290      	cmp	r0, r2
 80002b0:	f240 8115 	bls.w	80004de <__udivmoddi4+0x28a>
 80002b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80002b8:	443a      	add	r2, r7
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	fbb2 f0f8 	udiv	r0, r2, r8
 80002c0:	fb08 2210 	mls	r2, r8, r0, r2
 80002c4:	fb00 f109 	mul.w	r1, r0, r9
 80002c8:	b2a4      	uxth	r4, r4
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	42a1      	cmp	r1, r4
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0x92>
 80002d2:	193c      	adds	r4, r7, r4
 80002d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d8:	f080 8103 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002dc:	42a1      	cmp	r1, r4
 80002de:	f240 8100 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002e2:	3802      	subs	r0, #2
 80002e4:	443c      	add	r4, r7
 80002e6:	1a64      	subs	r4, r4, r1
 80002e8:	2100      	movs	r1, #0
 80002ea:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002ee:	b11e      	cbz	r6, 80002f8 <__udivmoddi4+0xa4>
 80002f0:	2200      	movs	r2, #0
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	e9c6 4200 	strd	r4, r2, [r6]
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xac>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f382 	clz	r3, r2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d14f      	bne.n	80003a8 <__udivmoddi4+0x154>
 8000308:	1a8d      	subs	r5, r1, r2
 800030a:	2101      	movs	r1, #1
 800030c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000310:	fa1f f882 	uxth.w	r8, r2
 8000314:	fbb5 fcfe 	udiv	ip, r5, lr
 8000318:	fb0e 551c 	mls	r5, lr, ip, r5
 800031c:	fb08 f00c 	mul.w	r0, r8, ip
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000326:	42a8      	cmp	r0, r5
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0xe6>
 800032a:	197d      	adds	r5, r7, r5
 800032c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0xe4>
 8000332:	42a8      	cmp	r0, r5
 8000334:	f200 80e9 	bhi.w	800050a <__udivmoddi4+0x2b6>
 8000338:	4694      	mov	ip, r2
 800033a:	1a2d      	subs	r5, r5, r0
 800033c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000340:	fb0e 5510 	mls	r5, lr, r0, r5
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	b2a4      	uxth	r4, r4
 800034a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800034e:	45a0      	cmp	r8, r4
 8000350:	d907      	bls.n	8000362 <__udivmoddi4+0x10e>
 8000352:	193c      	adds	r4, r7, r4
 8000354:	f100 32ff 	add.w	r2, r0, #4294967295
 8000358:	d202      	bcs.n	8000360 <__udivmoddi4+0x10c>
 800035a:	45a0      	cmp	r8, r4
 800035c:	f200 80d9 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000360:	4610      	mov	r0, r2
 8000362:	eba4 0408 	sub.w	r4, r4, r8
 8000366:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036a:	e7c0      	b.n	80002ee <__udivmoddi4+0x9a>
 800036c:	428b      	cmp	r3, r1
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x12e>
 8000370:	2e00      	cmp	r6, #0
 8000372:	f000 80b1 	beq.w	80004d8 <__udivmoddi4+0x284>
 8000376:	2100      	movs	r1, #0
 8000378:	e9c6 0500 	strd	r0, r5, [r6]
 800037c:	4608      	mov	r0, r1
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f183 	clz	r1, r3
 8000386:	2900      	cmp	r1, #0
 8000388:	d14b      	bne.n	8000422 <__udivmoddi4+0x1ce>
 800038a:	42ab      	cmp	r3, r5
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0x140>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80b9 	bhi.w	8000506 <__udivmoddi4+0x2b2>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb65 0303 	sbc.w	r3, r5, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d0aa      	beq.n	80002f8 <__udivmoddi4+0xa4>
 80003a2:	e9c6 4e00 	strd	r4, lr, [r6]
 80003a6:	e7a7      	b.n	80002f8 <__udivmoddi4+0xa4>
 80003a8:	409f      	lsls	r7, r3
 80003aa:	f1c3 0220 	rsb	r2, r3, #32
 80003ae:	40d1      	lsrs	r1, r2
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80003b8:	fa1f f887 	uxth.w	r8, r7
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	fa24 f202 	lsr.w	r2, r4, r2
 80003c4:	409d      	lsls	r5, r3
 80003c6:	fb00 fc08 	mul.w	ip, r0, r8
 80003ca:	432a      	orrs	r2, r5
 80003cc:	0c15      	lsrs	r5, r2, #16
 80003ce:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 80003d2:	45ac      	cmp	ip, r5
 80003d4:	fa04 f403 	lsl.w	r4, r4, r3
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x19a>
 80003da:	197d      	adds	r5, r7, r5
 80003dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003e0:	f080 808f 	bcs.w	8000502 <__udivmoddi4+0x2ae>
 80003e4:	45ac      	cmp	ip, r5
 80003e6:	f240 808c 	bls.w	8000502 <__udivmoddi4+0x2ae>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	eba5 050c 	sub.w	r5, r5, ip
 80003f2:	fbb5 f1fe 	udiv	r1, r5, lr
 80003f6:	fb0e 5c11 	mls	ip, lr, r1, r5
 80003fa:	fb01 f908 	mul.w	r9, r1, r8
 80003fe:	b295      	uxth	r5, r2
 8000400:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000404:	45a9      	cmp	r9, r5
 8000406:	d907      	bls.n	8000418 <__udivmoddi4+0x1c4>
 8000408:	197d      	adds	r5, r7, r5
 800040a:	f101 32ff 	add.w	r2, r1, #4294967295
 800040e:	d274      	bcs.n	80004fa <__udivmoddi4+0x2a6>
 8000410:	45a9      	cmp	r9, r5
 8000412:	d972      	bls.n	80004fa <__udivmoddi4+0x2a6>
 8000414:	3902      	subs	r1, #2
 8000416:	443d      	add	r5, r7
 8000418:	eba5 0509 	sub.w	r5, r5, r9
 800041c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000420:	e778      	b.n	8000314 <__udivmoddi4+0xc0>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	408b      	lsls	r3, r1
 8000428:	fa22 fc07 	lsr.w	ip, r2, r7
 800042c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000430:	fa25 f407 	lsr.w	r4, r5, r7
 8000434:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000438:	fbb4 f9fe 	udiv	r9, r4, lr
 800043c:	fa1f f88c 	uxth.w	r8, ip
 8000440:	fb0e 4419 	mls	r4, lr, r9, r4
 8000444:	fa20 f307 	lsr.w	r3, r0, r7
 8000448:	fb09 fa08 	mul.w	sl, r9, r8
 800044c:	408d      	lsls	r5, r1
 800044e:	431d      	orrs	r5, r3
 8000450:	0c2b      	lsrs	r3, r5, #16
 8000452:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000456:	45a2      	cmp	sl, r4
 8000458:	fa02 f201 	lsl.w	r2, r2, r1
 800045c:	fa00 f301 	lsl.w	r3, r0, r1
 8000460:	d909      	bls.n	8000476 <__udivmoddi4+0x222>
 8000462:	eb1c 0404 	adds.w	r4, ip, r4
 8000466:	f109 30ff 	add.w	r0, r9, #4294967295
 800046a:	d248      	bcs.n	80004fe <__udivmoddi4+0x2aa>
 800046c:	45a2      	cmp	sl, r4
 800046e:	d946      	bls.n	80004fe <__udivmoddi4+0x2aa>
 8000470:	f1a9 0902 	sub.w	r9, r9, #2
 8000474:	4464      	add	r4, ip
 8000476:	eba4 040a 	sub.w	r4, r4, sl
 800047a:	fbb4 f0fe 	udiv	r0, r4, lr
 800047e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000482:	fb00 fa08 	mul.w	sl, r0, r8
 8000486:	b2ad      	uxth	r5, r5
 8000488:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800048c:	45a2      	cmp	sl, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x24e>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d22d      	bcs.n	80004f6 <__udivmoddi4+0x2a2>
 800049a:	45a2      	cmp	sl, r4
 800049c:	d92b      	bls.n	80004f6 <__udivmoddi4+0x2a2>
 800049e:	3802      	subs	r0, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	fba0 8902 	umull	r8, r9, r0, r2
 80004aa:	eba4 040a 	sub.w	r4, r4, sl
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d319      	bcc.n	80004ea <__udivmoddi4+0x296>
 80004b6:	d016      	beq.n	80004e6 <__udivmoddi4+0x292>
 80004b8:	b15e      	cbz	r6, 80004d2 <__udivmoddi4+0x27e>
 80004ba:	ebb3 020e 	subs.w	r2, r3, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ca:	431f      	orrs	r7, r3
 80004cc:	40cc      	lsrs	r4, r1
 80004ce:	e9c6 7400 	strd	r7, r4, [r6]
 80004d2:	2100      	movs	r1, #0
 80004d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d8:	4631      	mov	r1, r6
 80004da:	4630      	mov	r0, r6
 80004dc:	e70c      	b.n	80002f8 <__udivmoddi4+0xa4>
 80004de:	468c      	mov	ip, r1
 80004e0:	e6eb      	b.n	80002ba <__udivmoddi4+0x66>
 80004e2:	4610      	mov	r0, r2
 80004e4:	e6ff      	b.n	80002e6 <__udivmoddi4+0x92>
 80004e6:	4543      	cmp	r3, r8
 80004e8:	d2e6      	bcs.n	80004b8 <__udivmoddi4+0x264>
 80004ea:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ee:	eb69 050c 	sbc.w	r5, r9, ip
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7e0      	b.n	80004b8 <__udivmoddi4+0x264>
 80004f6:	4628      	mov	r0, r5
 80004f8:	e7d3      	b.n	80004a2 <__udivmoddi4+0x24e>
 80004fa:	4611      	mov	r1, r2
 80004fc:	e78c      	b.n	8000418 <__udivmoddi4+0x1c4>
 80004fe:	4681      	mov	r9, r0
 8000500:	e7b9      	b.n	8000476 <__udivmoddi4+0x222>
 8000502:	4608      	mov	r0, r1
 8000504:	e773      	b.n	80003ee <__udivmoddi4+0x19a>
 8000506:	4608      	mov	r0, r1
 8000508:	e749      	b.n	800039e <__udivmoddi4+0x14a>
 800050a:	f1ac 0c02 	sub.w	ip, ip, #2
 800050e:	443d      	add	r5, r7
 8000510:	e713      	b.n	800033a <__udivmoddi4+0xe6>
 8000512:	3802      	subs	r0, #2
 8000514:	443c      	add	r4, r7
 8000516:	e724      	b.n	8000362 <__udivmoddi4+0x10e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x28>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x28>)
 8000526:	f043 0310 	orr.w	r3, r3, #16
 800052a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 f947 	bl	80007c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f001 fec6 	bl	80022c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40022000 	.word	0x40022000

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f95f 	bl	800082a <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 f927 	bl	80007d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <HAL_IncTick+0x1c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <HAL_IncTick+0x20>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a03      	ldr	r2, [pc, #12]	; (80005c8 <HAL_IncTick+0x20>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	20000004 	.word	0x20000004
 80005c8:	20000028 	.word	0x20000028

080005cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  return uwTick;
 80005d0:	4b02      	ldr	r3, [pc, #8]	; (80005dc <HAL_GetTick+0x10>)
 80005d2:	681b      	ldr	r3, [r3, #0]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	20000028 	.word	0x20000028

080005e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e8:	f7ff fff0 	bl	80005cc <HAL_GetTick>
 80005ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f8:	d005      	beq.n	8000606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <HAL_Delay+0x44>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000606:	bf00      	nop
 8000608:	f7ff ffe0 	bl	80005cc <HAL_GetTick>
 800060c:	4602      	mov	r2, r0
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	68fa      	ldr	r2, [r7, #12]
 8000614:	429a      	cmp	r2, r3
 8000616:	d8f7      	bhi.n	8000608 <HAL_Delay+0x28>
  {
  }
}
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000004 	.word	0x20000004

08000628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f003 0307 	and.w	r3, r3, #7
 8000636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <__NVIC_SetPriorityGrouping+0x44>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063e:	68ba      	ldr	r2, [r7, #8]
 8000640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065a:	4a04      	ldr	r2, [pc, #16]	; (800066c <__NVIC_SetPriorityGrouping+0x44>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	60d3      	str	r3, [r2, #12]
}
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <__NVIC_GetPriorityGrouping+0x18>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	0a1b      	lsrs	r3, r3, #8
 800067a:	f003 0307 	and.w	r3, r3, #7
}
 800067e:	4618      	mov	r0, r3
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069a:	2b00      	cmp	r3, #0
 800069c:	db0b      	blt.n	80006b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	f003 021f 	and.w	r2, r3, #31
 80006a4:	4906      	ldr	r1, [pc, #24]	; (80006c0 <__NVIC_EnableIRQ+0x34>)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	095b      	lsrs	r3, r3, #5
 80006ac:	2001      	movs	r0, #1
 80006ae:	fa00 f202 	lsl.w	r2, r0, r2
 80006b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr
 80006c0:	e000e100 	.word	0xe000e100

080006c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	6039      	str	r1, [r7, #0]
 80006ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	db0a      	blt.n	80006ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	490c      	ldr	r1, [pc, #48]	; (8000710 <__NVIC_SetPriority+0x4c>)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	0112      	lsls	r2, r2, #4
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	440b      	add	r3, r1
 80006e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ec:	e00a      	b.n	8000704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4908      	ldr	r1, [pc, #32]	; (8000714 <__NVIC_SetPriority+0x50>)
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	f003 030f 	and.w	r3, r3, #15
 80006fa:	3b04      	subs	r3, #4
 80006fc:	0112      	lsls	r2, r2, #4
 80006fe:	b2d2      	uxtb	r2, r2
 8000700:	440b      	add	r3, r1
 8000702:	761a      	strb	r2, [r3, #24]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000e100 	.word	0xe000e100
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000718:	b480      	push	{r7}
 800071a:	b089      	sub	sp, #36	; 0x24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	f1c3 0307 	rsb	r3, r3, #7
 8000732:	2b04      	cmp	r3, #4
 8000734:	bf28      	it	cs
 8000736:	2304      	movcs	r3, #4
 8000738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	3304      	adds	r3, #4
 800073e:	2b06      	cmp	r3, #6
 8000740:	d902      	bls.n	8000748 <NVIC_EncodePriority+0x30>
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3b03      	subs	r3, #3
 8000746:	e000      	b.n	800074a <NVIC_EncodePriority+0x32>
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	f04f 32ff 	mov.w	r2, #4294967295
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	43da      	mvns	r2, r3
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	401a      	ands	r2, r3
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000760:	f04f 31ff 	mov.w	r1, #4294967295
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	43d9      	mvns	r1, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	4313      	orrs	r3, r2
         );
}
 8000772:	4618      	mov	r0, r3
 8000774:	3724      	adds	r7, #36	; 0x24
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3b01      	subs	r3, #1
 8000788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800078c:	d301      	bcc.n	8000792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800078e:	2301      	movs	r3, #1
 8000790:	e00f      	b.n	80007b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000792:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <SysTick_Config+0x40>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3b01      	subs	r3, #1
 8000798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800079a:	210f      	movs	r1, #15
 800079c:	f04f 30ff 	mov.w	r0, #4294967295
 80007a0:	f7ff ff90 	bl	80006c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <SysTick_Config+0x40>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007aa:	4b04      	ldr	r3, [pc, #16]	; (80007bc <SysTick_Config+0x40>)
 80007ac:	2207      	movs	r2, #7
 80007ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	e000e010 	.word	0xe000e010

080007c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f7ff ff2d 	bl	8000628 <__NVIC_SetPriorityGrouping>
}
 80007ce:	bf00      	nop
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b086      	sub	sp, #24
 80007da:	af00      	add	r7, sp, #0
 80007dc:	4603      	mov	r3, r0
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607a      	str	r2, [r7, #4]
 80007e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e8:	f7ff ff42 	bl	8000670 <__NVIC_GetPriorityGrouping>
 80007ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	68b9      	ldr	r1, [r7, #8]
 80007f2:	6978      	ldr	r0, [r7, #20]
 80007f4:	f7ff ff90 	bl	8000718 <NVIC_EncodePriority>
 80007f8:	4602      	mov	r2, r0
 80007fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fe:	4611      	mov	r1, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff5f 	bl	80006c4 <__NVIC_SetPriority>
}
 8000806:	bf00      	nop
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b082      	sub	sp, #8
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff35 	bl	800068c <__NVIC_EnableIRQ>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ffa2 	bl	800077c <SysTick_Config>
 8000838:	4603      	mov	r3, r0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800084c:	2300      	movs	r3, #0
 800084e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000856:	2b02      	cmp	r3, #2
 8000858:	d005      	beq.n	8000866 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2204      	movs	r2, #4
 800085e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	e0d6      	b.n	8000a14 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f022 020e 	bic.w	r2, r2, #14
 8000874:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f022 0201 	bic.w	r2, r2, #1
 8000884:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	4b64      	ldr	r3, [pc, #400]	; (8000a20 <HAL_DMA_Abort_IT+0x1dc>)
 800088e:	429a      	cmp	r2, r3
 8000890:	d958      	bls.n	8000944 <HAL_DMA_Abort_IT+0x100>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a63      	ldr	r2, [pc, #396]	; (8000a24 <HAL_DMA_Abort_IT+0x1e0>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d04f      	beq.n	800093c <HAL_DMA_Abort_IT+0xf8>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a61      	ldr	r2, [pc, #388]	; (8000a28 <HAL_DMA_Abort_IT+0x1e4>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d048      	beq.n	8000938 <HAL_DMA_Abort_IT+0xf4>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a60      	ldr	r2, [pc, #384]	; (8000a2c <HAL_DMA_Abort_IT+0x1e8>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d040      	beq.n	8000932 <HAL_DMA_Abort_IT+0xee>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a5e      	ldr	r2, [pc, #376]	; (8000a30 <HAL_DMA_Abort_IT+0x1ec>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d038      	beq.n	800092c <HAL_DMA_Abort_IT+0xe8>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a5d      	ldr	r2, [pc, #372]	; (8000a34 <HAL_DMA_Abort_IT+0x1f0>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d030      	beq.n	8000926 <HAL_DMA_Abort_IT+0xe2>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a5b      	ldr	r2, [pc, #364]	; (8000a38 <HAL_DMA_Abort_IT+0x1f4>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d028      	beq.n	8000920 <HAL_DMA_Abort_IT+0xdc>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a53      	ldr	r2, [pc, #332]	; (8000a20 <HAL_DMA_Abort_IT+0x1dc>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d020      	beq.n	800091a <HAL_DMA_Abort_IT+0xd6>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a57      	ldr	r2, [pc, #348]	; (8000a3c <HAL_DMA_Abort_IT+0x1f8>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d019      	beq.n	8000916 <HAL_DMA_Abort_IT+0xd2>
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4a56      	ldr	r2, [pc, #344]	; (8000a40 <HAL_DMA_Abort_IT+0x1fc>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d012      	beq.n	8000912 <HAL_DMA_Abort_IT+0xce>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a54      	ldr	r2, [pc, #336]	; (8000a44 <HAL_DMA_Abort_IT+0x200>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d00a      	beq.n	800090c <HAL_DMA_Abort_IT+0xc8>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4a53      	ldr	r2, [pc, #332]	; (8000a48 <HAL_DMA_Abort_IT+0x204>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d102      	bne.n	8000906 <HAL_DMA_Abort_IT+0xc2>
 8000900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000904:	e01b      	b.n	800093e <HAL_DMA_Abort_IT+0xfa>
 8000906:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800090a:	e018      	b.n	800093e <HAL_DMA_Abort_IT+0xfa>
 800090c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000910:	e015      	b.n	800093e <HAL_DMA_Abort_IT+0xfa>
 8000912:	2310      	movs	r3, #16
 8000914:	e013      	b.n	800093e <HAL_DMA_Abort_IT+0xfa>
 8000916:	2301      	movs	r3, #1
 8000918:	e011      	b.n	800093e <HAL_DMA_Abort_IT+0xfa>
 800091a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800091e:	e00e      	b.n	800093e <HAL_DMA_Abort_IT+0xfa>
 8000920:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000924:	e00b      	b.n	800093e <HAL_DMA_Abort_IT+0xfa>
 8000926:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092a:	e008      	b.n	800093e <HAL_DMA_Abort_IT+0xfa>
 800092c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000930:	e005      	b.n	800093e <HAL_DMA_Abort_IT+0xfa>
 8000932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000936:	e002      	b.n	800093e <HAL_DMA_Abort_IT+0xfa>
 8000938:	2310      	movs	r3, #16
 800093a:	e000      	b.n	800093e <HAL_DMA_Abort_IT+0xfa>
 800093c:	2301      	movs	r3, #1
 800093e:	4a43      	ldr	r2, [pc, #268]	; (8000a4c <HAL_DMA_Abort_IT+0x208>)
 8000940:	6053      	str	r3, [r2, #4]
 8000942:	e057      	b.n	80009f4 <HAL_DMA_Abort_IT+0x1b0>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a36      	ldr	r2, [pc, #216]	; (8000a24 <HAL_DMA_Abort_IT+0x1e0>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d04f      	beq.n	80009ee <HAL_DMA_Abort_IT+0x1aa>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a35      	ldr	r2, [pc, #212]	; (8000a28 <HAL_DMA_Abort_IT+0x1e4>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d048      	beq.n	80009ea <HAL_DMA_Abort_IT+0x1a6>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a33      	ldr	r2, [pc, #204]	; (8000a2c <HAL_DMA_Abort_IT+0x1e8>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d040      	beq.n	80009e4 <HAL_DMA_Abort_IT+0x1a0>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a32      	ldr	r2, [pc, #200]	; (8000a30 <HAL_DMA_Abort_IT+0x1ec>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d038      	beq.n	80009de <HAL_DMA_Abort_IT+0x19a>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a30      	ldr	r2, [pc, #192]	; (8000a34 <HAL_DMA_Abort_IT+0x1f0>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d030      	beq.n	80009d8 <HAL_DMA_Abort_IT+0x194>
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a2f      	ldr	r2, [pc, #188]	; (8000a38 <HAL_DMA_Abort_IT+0x1f4>)
 800097c:	4293      	cmp	r3, r2
 800097e:	d028      	beq.n	80009d2 <HAL_DMA_Abort_IT+0x18e>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a26      	ldr	r2, [pc, #152]	; (8000a20 <HAL_DMA_Abort_IT+0x1dc>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d020      	beq.n	80009cc <HAL_DMA_Abort_IT+0x188>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a2b      	ldr	r2, [pc, #172]	; (8000a3c <HAL_DMA_Abort_IT+0x1f8>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d019      	beq.n	80009c8 <HAL_DMA_Abort_IT+0x184>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a29      	ldr	r2, [pc, #164]	; (8000a40 <HAL_DMA_Abort_IT+0x1fc>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d012      	beq.n	80009c4 <HAL_DMA_Abort_IT+0x180>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a28      	ldr	r2, [pc, #160]	; (8000a44 <HAL_DMA_Abort_IT+0x200>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d00a      	beq.n	80009be <HAL_DMA_Abort_IT+0x17a>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a26      	ldr	r2, [pc, #152]	; (8000a48 <HAL_DMA_Abort_IT+0x204>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d102      	bne.n	80009b8 <HAL_DMA_Abort_IT+0x174>
 80009b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b6:	e01b      	b.n	80009f0 <HAL_DMA_Abort_IT+0x1ac>
 80009b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009bc:	e018      	b.n	80009f0 <HAL_DMA_Abort_IT+0x1ac>
 80009be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009c2:	e015      	b.n	80009f0 <HAL_DMA_Abort_IT+0x1ac>
 80009c4:	2310      	movs	r3, #16
 80009c6:	e013      	b.n	80009f0 <HAL_DMA_Abort_IT+0x1ac>
 80009c8:	2301      	movs	r3, #1
 80009ca:	e011      	b.n	80009f0 <HAL_DMA_Abort_IT+0x1ac>
 80009cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009d0:	e00e      	b.n	80009f0 <HAL_DMA_Abort_IT+0x1ac>
 80009d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80009d6:	e00b      	b.n	80009f0 <HAL_DMA_Abort_IT+0x1ac>
 80009d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009dc:	e008      	b.n	80009f0 <HAL_DMA_Abort_IT+0x1ac>
 80009de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e2:	e005      	b.n	80009f0 <HAL_DMA_Abort_IT+0x1ac>
 80009e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009e8:	e002      	b.n	80009f0 <HAL_DMA_Abort_IT+0x1ac>
 80009ea:	2310      	movs	r3, #16
 80009ec:	e000      	b.n	80009f0 <HAL_DMA_Abort_IT+0x1ac>
 80009ee:	2301      	movs	r3, #1
 80009f0:	4a17      	ldr	r2, [pc, #92]	; (8000a50 <HAL_DMA_Abort_IT+0x20c>)
 80009f2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2201      	movs	r2, #1
 80009f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2200      	movs	r2, #0
 8000a00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d003      	beq.n	8000a14 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	4798      	blx	r3
    } 
  }
  return status;
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40020080 	.word	0x40020080
 8000a24:	40020008 	.word	0x40020008
 8000a28:	4002001c 	.word	0x4002001c
 8000a2c:	40020030 	.word	0x40020030
 8000a30:	40020044 	.word	0x40020044
 8000a34:	40020058 	.word	0x40020058
 8000a38:	4002006c 	.word	0x4002006c
 8000a3c:	40020408 	.word	0x40020408
 8000a40:	4002041c 	.word	0x4002041c
 8000a44:	40020430 	.word	0x40020430
 8000a48:	40020444 	.word	0x40020444
 8000a4c:	40020400 	.word	0x40020400
 8000a50:	40020000 	.word	0x40020000

08000a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b08b      	sub	sp, #44	; 0x2c
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a66:	e169      	b.n	8000d3c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	69fa      	ldr	r2, [r7, #28]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	f040 8158 	bne.w	8000d36 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	4a9a      	ldr	r2, [pc, #616]	; (8000cf4 <HAL_GPIO_Init+0x2a0>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d05e      	beq.n	8000b4e <HAL_GPIO_Init+0xfa>
 8000a90:	4a98      	ldr	r2, [pc, #608]	; (8000cf4 <HAL_GPIO_Init+0x2a0>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d875      	bhi.n	8000b82 <HAL_GPIO_Init+0x12e>
 8000a96:	4a98      	ldr	r2, [pc, #608]	; (8000cf8 <HAL_GPIO_Init+0x2a4>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d058      	beq.n	8000b4e <HAL_GPIO_Init+0xfa>
 8000a9c:	4a96      	ldr	r2, [pc, #600]	; (8000cf8 <HAL_GPIO_Init+0x2a4>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d86f      	bhi.n	8000b82 <HAL_GPIO_Init+0x12e>
 8000aa2:	4a96      	ldr	r2, [pc, #600]	; (8000cfc <HAL_GPIO_Init+0x2a8>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d052      	beq.n	8000b4e <HAL_GPIO_Init+0xfa>
 8000aa8:	4a94      	ldr	r2, [pc, #592]	; (8000cfc <HAL_GPIO_Init+0x2a8>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d869      	bhi.n	8000b82 <HAL_GPIO_Init+0x12e>
 8000aae:	4a94      	ldr	r2, [pc, #592]	; (8000d00 <HAL_GPIO_Init+0x2ac>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d04c      	beq.n	8000b4e <HAL_GPIO_Init+0xfa>
 8000ab4:	4a92      	ldr	r2, [pc, #584]	; (8000d00 <HAL_GPIO_Init+0x2ac>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d863      	bhi.n	8000b82 <HAL_GPIO_Init+0x12e>
 8000aba:	4a92      	ldr	r2, [pc, #584]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d046      	beq.n	8000b4e <HAL_GPIO_Init+0xfa>
 8000ac0:	4a90      	ldr	r2, [pc, #576]	; (8000d04 <HAL_GPIO_Init+0x2b0>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d85d      	bhi.n	8000b82 <HAL_GPIO_Init+0x12e>
 8000ac6:	2b12      	cmp	r3, #18
 8000ac8:	d82a      	bhi.n	8000b20 <HAL_GPIO_Init+0xcc>
 8000aca:	2b12      	cmp	r3, #18
 8000acc:	d859      	bhi.n	8000b82 <HAL_GPIO_Init+0x12e>
 8000ace:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <HAL_GPIO_Init+0x80>)
 8000ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad4:	08000b4f 	.word	0x08000b4f
 8000ad8:	08000b29 	.word	0x08000b29
 8000adc:	08000b3b 	.word	0x08000b3b
 8000ae0:	08000b7d 	.word	0x08000b7d
 8000ae4:	08000b83 	.word	0x08000b83
 8000ae8:	08000b83 	.word	0x08000b83
 8000aec:	08000b83 	.word	0x08000b83
 8000af0:	08000b83 	.word	0x08000b83
 8000af4:	08000b83 	.word	0x08000b83
 8000af8:	08000b83 	.word	0x08000b83
 8000afc:	08000b83 	.word	0x08000b83
 8000b00:	08000b83 	.word	0x08000b83
 8000b04:	08000b83 	.word	0x08000b83
 8000b08:	08000b83 	.word	0x08000b83
 8000b0c:	08000b83 	.word	0x08000b83
 8000b10:	08000b83 	.word	0x08000b83
 8000b14:	08000b83 	.word	0x08000b83
 8000b18:	08000b31 	.word	0x08000b31
 8000b1c:	08000b45 	.word	0x08000b45
 8000b20:	4a79      	ldr	r2, [pc, #484]	; (8000d08 <HAL_GPIO_Init+0x2b4>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d013      	beq.n	8000b4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b26:	e02c      	b.n	8000b82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	623b      	str	r3, [r7, #32]
          break;
 8000b2e:	e029      	b.n	8000b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	3304      	adds	r3, #4
 8000b36:	623b      	str	r3, [r7, #32]
          break;
 8000b38:	e024      	b.n	8000b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	3308      	adds	r3, #8
 8000b40:	623b      	str	r3, [r7, #32]
          break;
 8000b42:	e01f      	b.n	8000b84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	330c      	adds	r3, #12
 8000b4a:	623b      	str	r3, [r7, #32]
          break;
 8000b4c:	e01a      	b.n	8000b84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d102      	bne.n	8000b5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b56:	2304      	movs	r3, #4
 8000b58:	623b      	str	r3, [r7, #32]
          break;
 8000b5a:	e013      	b.n	8000b84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d105      	bne.n	8000b70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b64:	2308      	movs	r3, #8
 8000b66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	69fa      	ldr	r2, [r7, #28]
 8000b6c:	611a      	str	r2, [r3, #16]
          break;
 8000b6e:	e009      	b.n	8000b84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b70:	2308      	movs	r3, #8
 8000b72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	69fa      	ldr	r2, [r7, #28]
 8000b78:	615a      	str	r2, [r3, #20]
          break;
 8000b7a:	e003      	b.n	8000b84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
          break;
 8000b80:	e000      	b.n	8000b84 <HAL_GPIO_Init+0x130>
          break;
 8000b82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b84:	69bb      	ldr	r3, [r7, #24]
 8000b86:	2bff      	cmp	r3, #255	; 0xff
 8000b88:	d801      	bhi.n	8000b8e <HAL_GPIO_Init+0x13a>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	e001      	b.n	8000b92 <HAL_GPIO_Init+0x13e>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3304      	adds	r3, #4
 8000b92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	2bff      	cmp	r3, #255	; 0xff
 8000b98:	d802      	bhi.n	8000ba0 <HAL_GPIO_Init+0x14c>
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	e002      	b.n	8000ba6 <HAL_GPIO_Init+0x152>
 8000ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba2:	3b08      	subs	r3, #8
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	210f      	movs	r1, #15
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	6a39      	ldr	r1, [r7, #32]
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 80b1 	beq.w	8000d36 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bd4:	4b4d      	ldr	r3, [pc, #308]	; (8000d0c <HAL_GPIO_Init+0x2b8>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4a4c      	ldr	r2, [pc, #304]	; (8000d0c <HAL_GPIO_Init+0x2b8>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6193      	str	r3, [r2, #24]
 8000be0:	4b4a      	ldr	r3, [pc, #296]	; (8000d0c <HAL_GPIO_Init+0x2b8>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bec:	4a48      	ldr	r2, [pc, #288]	; (8000d10 <HAL_GPIO_Init+0x2bc>)
 8000bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf0:	089b      	lsrs	r3, r3, #2
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	009b      	lsls	r3, r3, #2
 8000c02:	220f      	movs	r2, #15
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	4a40      	ldr	r2, [pc, #256]	; (8000d14 <HAL_GPIO_Init+0x2c0>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d013      	beq.n	8000c40 <HAL_GPIO_Init+0x1ec>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a3f      	ldr	r2, [pc, #252]	; (8000d18 <HAL_GPIO_Init+0x2c4>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d00d      	beq.n	8000c3c <HAL_GPIO_Init+0x1e8>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a3e      	ldr	r2, [pc, #248]	; (8000d1c <HAL_GPIO_Init+0x2c8>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d007      	beq.n	8000c38 <HAL_GPIO_Init+0x1e4>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a3d      	ldr	r2, [pc, #244]	; (8000d20 <HAL_GPIO_Init+0x2cc>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d101      	bne.n	8000c34 <HAL_GPIO_Init+0x1e0>
 8000c30:	2303      	movs	r3, #3
 8000c32:	e006      	b.n	8000c42 <HAL_GPIO_Init+0x1ee>
 8000c34:	2304      	movs	r3, #4
 8000c36:	e004      	b.n	8000c42 <HAL_GPIO_Init+0x1ee>
 8000c38:	2302      	movs	r3, #2
 8000c3a:	e002      	b.n	8000c42 <HAL_GPIO_Init+0x1ee>
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e000      	b.n	8000c42 <HAL_GPIO_Init+0x1ee>
 8000c40:	2300      	movs	r3, #0
 8000c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c44:	f002 0203 	and.w	r2, r2, #3
 8000c48:	0092      	lsls	r2, r2, #2
 8000c4a:	4093      	lsls	r3, r2
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c52:	492f      	ldr	r1, [pc, #188]	; (8000d10 <HAL_GPIO_Init+0x2bc>)
 8000c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	3302      	adds	r3, #2
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d006      	beq.n	8000c7a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c6c:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	492c      	ldr	r1, [pc, #176]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	600b      	str	r3, [r1, #0]
 8000c78:	e006      	b.n	8000c88 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	43db      	mvns	r3, r3
 8000c82:	4928      	ldr	r1, [pc, #160]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000c84:	4013      	ands	r3, r2
 8000c86:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d006      	beq.n	8000ca2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c94:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000c96:	685a      	ldr	r2, [r3, #4]
 8000c98:	4922      	ldr	r1, [pc, #136]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	604b      	str	r3, [r1, #4]
 8000ca0:	e006      	b.n	8000cb0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ca2:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	69bb      	ldr	r3, [r7, #24]
 8000ca8:	43db      	mvns	r3, r3
 8000caa:	491e      	ldr	r1, [pc, #120]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000cac:	4013      	ands	r3, r2
 8000cae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d006      	beq.n	8000cca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cbc:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	4918      	ldr	r1, [pc, #96]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	608b      	str	r3, [r1, #8]
 8000cc8:	e006      	b.n	8000cd8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	4914      	ldr	r1, [pc, #80]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d021      	beq.n	8000d28 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	490e      	ldr	r1, [pc, #56]	; (8000d24 <HAL_GPIO_Init+0x2d0>)
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	60cb      	str	r3, [r1, #12]
 8000cf0:	e021      	b.n	8000d36 <HAL_GPIO_Init+0x2e2>
 8000cf2:	bf00      	nop
 8000cf4:	10320000 	.word	0x10320000
 8000cf8:	10310000 	.word	0x10310000
 8000cfc:	10220000 	.word	0x10220000
 8000d00:	10210000 	.word	0x10210000
 8000d04:	10120000 	.word	0x10120000
 8000d08:	10110000 	.word	0x10110000
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010000 	.word	0x40010000
 8000d14:	40010800 	.word	0x40010800
 8000d18:	40010c00 	.word	0x40010c00
 8000d1c:	40011000 	.word	0x40011000
 8000d20:	40011400 	.word	0x40011400
 8000d24:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_GPIO_Init+0x304>)
 8000d2a:	68da      	ldr	r2, [r3, #12]
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	4909      	ldr	r1, [pc, #36]	; (8000d58 <HAL_GPIO_Init+0x304>)
 8000d32:	4013      	ands	r3, r2
 8000d34:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	3301      	adds	r3, #1
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d42:	fa22 f303 	lsr.w	r3, r2, r3
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f47f ae8e 	bne.w	8000a68 <HAL_GPIO_Init+0x14>
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	372c      	adds	r7, #44	; 0x2c
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	40010400 	.word	0x40010400

08000d5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d101      	bne.n	8000d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e304      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	f000 8087 	beq.w	8000e8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d7c:	4b92      	ldr	r3, [pc, #584]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 030c 	and.w	r3, r3, #12
 8000d84:	2b04      	cmp	r3, #4
 8000d86:	d00c      	beq.n	8000da2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d88:	4b8f      	ldr	r3, [pc, #572]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 030c 	and.w	r3, r3, #12
 8000d90:	2b08      	cmp	r3, #8
 8000d92:	d112      	bne.n	8000dba <HAL_RCC_OscConfig+0x5e>
 8000d94:	4b8c      	ldr	r3, [pc, #560]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da0:	d10b      	bne.n	8000dba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000da2:	4b89      	ldr	r3, [pc, #548]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d06c      	beq.n	8000e88 <HAL_RCC_OscConfig+0x12c>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d168      	bne.n	8000e88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e2de      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc2:	d106      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x76>
 8000dc4:	4b80      	ldr	r3, [pc, #512]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a7f      	ldr	r2, [pc, #508]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dce:	6013      	str	r3, [r2, #0]
 8000dd0:	e02e      	b.n	8000e30 <HAL_RCC_OscConfig+0xd4>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d10c      	bne.n	8000df4 <HAL_RCC_OscConfig+0x98>
 8000dda:	4b7b      	ldr	r3, [pc, #492]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a7a      	ldr	r2, [pc, #488]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	4b78      	ldr	r3, [pc, #480]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a77      	ldr	r2, [pc, #476]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	e01d      	b.n	8000e30 <HAL_RCC_OscConfig+0xd4>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000dfc:	d10c      	bne.n	8000e18 <HAL_RCC_OscConfig+0xbc>
 8000dfe:	4b72      	ldr	r3, [pc, #456]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a71      	ldr	r2, [pc, #452]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	4b6f      	ldr	r3, [pc, #444]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a6e      	ldr	r2, [pc, #440]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	e00b      	b.n	8000e30 <HAL_RCC_OscConfig+0xd4>
 8000e18:	4b6b      	ldr	r3, [pc, #428]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a6a      	ldr	r2, [pc, #424]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b68      	ldr	r3, [pc, #416]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a67      	ldr	r2, [pc, #412]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d013      	beq.n	8000e60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e38:	f7ff fbc8 	bl	80005cc <HAL_GetTick>
 8000e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3e:	e008      	b.n	8000e52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e40:	f7ff fbc4 	bl	80005cc <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	2b64      	cmp	r3, #100	; 0x64
 8000e4c:	d901      	bls.n	8000e52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e292      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e52:	4b5d      	ldr	r3, [pc, #372]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d0f0      	beq.n	8000e40 <HAL_RCC_OscConfig+0xe4>
 8000e5e:	e014      	b.n	8000e8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e60:	f7ff fbb4 	bl	80005cc <HAL_GetTick>
 8000e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e66:	e008      	b.n	8000e7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e68:	f7ff fbb0 	bl	80005cc <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b64      	cmp	r3, #100	; 0x64
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e27e      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e7a:	4b53      	ldr	r3, [pc, #332]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f0      	bne.n	8000e68 <HAL_RCC_OscConfig+0x10c>
 8000e86:	e000      	b.n	8000e8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d063      	beq.n	8000f5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e96:	4b4c      	ldr	r3, [pc, #304]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d00b      	beq.n	8000eba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ea2:	4b49      	ldr	r3, [pc, #292]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 030c 	and.w	r3, r3, #12
 8000eaa:	2b08      	cmp	r3, #8
 8000eac:	d11c      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x18c>
 8000eae:	4b46      	ldr	r3, [pc, #280]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d116      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eba:	4b43      	ldr	r3, [pc, #268]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d005      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x176>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d001      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e252      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed2:	4b3d      	ldr	r3, [pc, #244]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	4939      	ldr	r1, [pc, #228]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee6:	e03a      	b.n	8000f5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d020      	beq.n	8000f32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ef0:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef6:	f7ff fb69 	bl	80005cc <HAL_GetTick>
 8000efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000efc:	e008      	b.n	8000f10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000efe:	f7ff fb65 	bl	80005cc <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d901      	bls.n	8000f10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e233      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f10:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0f0      	beq.n	8000efe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	4927      	ldr	r1, [pc, #156]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	600b      	str	r3, [r1, #0]
 8000f30:	e015      	b.n	8000f5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <HAL_RCC_OscConfig+0x270>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f38:	f7ff fb48 	bl	80005cc <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f40:	f7ff fb44 	bl	80005cc <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e212      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f52:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0308 	and.w	r3, r3, #8
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d03a      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d019      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_RCC_OscConfig+0x274>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f78:	f7ff fb28 	bl	80005cc <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f80:	f7ff fb24 	bl	80005cc <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e1f2      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f0      	beq.n	8000f80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	f000 fbca 	bl	8001738 <RCC_Delay>
 8000fa4:	e01c      	b.n	8000fe0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <HAL_RCC_OscConfig+0x274>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fac:	f7ff fb0e 	bl	80005cc <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fb2:	e00f      	b.n	8000fd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fb4:	f7ff fb0a 	bl	80005cc <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d908      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e1d8      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	42420000 	.word	0x42420000
 8000fd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd4:	4b9b      	ldr	r3, [pc, #620]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	f003 0302 	and.w	r3, r3, #2
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d1e9      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 80a6 	beq.w	800113a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ff2:	4b94      	ldr	r3, [pc, #592]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10d      	bne.n	800101a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b91      	ldr	r3, [pc, #580]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a90      	ldr	r2, [pc, #576]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001008:	61d3      	str	r3, [r2, #28]
 800100a:	4b8e      	ldr	r3, [pc, #568]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001016:	2301      	movs	r3, #1
 8001018:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800101a:	4b8b      	ldr	r3, [pc, #556]	; (8001248 <HAL_RCC_OscConfig+0x4ec>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001022:	2b00      	cmp	r3, #0
 8001024:	d118      	bne.n	8001058 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001026:	4b88      	ldr	r3, [pc, #544]	; (8001248 <HAL_RCC_OscConfig+0x4ec>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a87      	ldr	r2, [pc, #540]	; (8001248 <HAL_RCC_OscConfig+0x4ec>)
 800102c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001032:	f7ff facb 	bl	80005cc <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800103a:	f7ff fac7 	bl	80005cc <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b64      	cmp	r3, #100	; 0x64
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e195      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800104c:	4b7e      	ldr	r3, [pc, #504]	; (8001248 <HAL_RCC_OscConfig+0x4ec>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d106      	bne.n	800106e <HAL_RCC_OscConfig+0x312>
 8001060:	4b78      	ldr	r3, [pc, #480]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	4a77      	ldr	r2, [pc, #476]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6213      	str	r3, [r2, #32]
 800106c:	e02d      	b.n	80010ca <HAL_RCC_OscConfig+0x36e>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d10c      	bne.n	8001090 <HAL_RCC_OscConfig+0x334>
 8001076:	4b73      	ldr	r3, [pc, #460]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	4a72      	ldr	r2, [pc, #456]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 800107c:	f023 0301 	bic.w	r3, r3, #1
 8001080:	6213      	str	r3, [r2, #32]
 8001082:	4b70      	ldr	r3, [pc, #448]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001084:	6a1b      	ldr	r3, [r3, #32]
 8001086:	4a6f      	ldr	r2, [pc, #444]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001088:	f023 0304 	bic.w	r3, r3, #4
 800108c:	6213      	str	r3, [r2, #32]
 800108e:	e01c      	b.n	80010ca <HAL_RCC_OscConfig+0x36e>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	2b05      	cmp	r3, #5
 8001096:	d10c      	bne.n	80010b2 <HAL_RCC_OscConfig+0x356>
 8001098:	4b6a      	ldr	r3, [pc, #424]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	4a69      	ldr	r2, [pc, #420]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6213      	str	r3, [r2, #32]
 80010a4:	4b67      	ldr	r3, [pc, #412]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	4a66      	ldr	r2, [pc, #408]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6213      	str	r3, [r2, #32]
 80010b0:	e00b      	b.n	80010ca <HAL_RCC_OscConfig+0x36e>
 80010b2:	4b64      	ldr	r3, [pc, #400]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4a63      	ldr	r2, [pc, #396]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80010b8:	f023 0301 	bic.w	r3, r3, #1
 80010bc:	6213      	str	r3, [r2, #32]
 80010be:	4b61      	ldr	r3, [pc, #388]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	4a60      	ldr	r2, [pc, #384]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80010c4:	f023 0304 	bic.w	r3, r3, #4
 80010c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d015      	beq.n	80010fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d2:	f7ff fa7b 	bl	80005cc <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d8:	e00a      	b.n	80010f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010da:	f7ff fa77 	bl	80005cc <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e143      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f0:	4b54      	ldr	r3, [pc, #336]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0ee      	beq.n	80010da <HAL_RCC_OscConfig+0x37e>
 80010fc:	e014      	b.n	8001128 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fe:	f7ff fa65 	bl	80005cc <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001104:	e00a      	b.n	800111c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001106:	f7ff fa61 	bl	80005cc <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	f241 3288 	movw	r2, #5000	; 0x1388
 8001114:	4293      	cmp	r3, r2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e12d      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800111c:	4b49      	ldr	r3, [pc, #292]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1ee      	bne.n	8001106 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001128:	7dfb      	ldrb	r3, [r7, #23]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d105      	bne.n	800113a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800112e:	4b45      	ldr	r3, [pc, #276]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	4a44      	ldr	r2, [pc, #272]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001138:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 808c 	beq.w	800125c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001144:	4b3f      	ldr	r3, [pc, #252]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001150:	d10e      	bne.n	8001170 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001152:	4b3c      	ldr	r3, [pc, #240]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800115a:	2b08      	cmp	r3, #8
 800115c:	d108      	bne.n	8001170 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800115e:	4b39      	ldr	r3, [pc, #228]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800116a:	d101      	bne.n	8001170 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e103      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001174:	2b02      	cmp	r3, #2
 8001176:	d14e      	bne.n	8001216 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001178:	4b32      	ldr	r3, [pc, #200]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d009      	beq.n	8001198 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001184:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001188:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001190:	429a      	cmp	r2, r3
 8001192:	d001      	beq.n	8001198 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e0ef      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001198:	4b2c      	ldr	r3, [pc, #176]	; (800124c <HAL_RCC_OscConfig+0x4f0>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119e:	f7ff fa15 	bl	80005cc <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80011a6:	f7ff fa11 	bl	80005cc <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b64      	cmp	r3, #100	; 0x64
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e0df      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f0      	bne.n	80011a6 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80011c4:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80011c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d0:	491c      	ldr	r1, [pc, #112]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80011d6:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80011d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4918      	ldr	r1, [pc, #96]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80011e8:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_RCC_OscConfig+0x4f0>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ee:	f7ff f9ed 	bl	80005cc <HAL_GetTick>
 80011f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80011f4:	e008      	b.n	8001208 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80011f6:	f7ff f9e9 	bl	80005cc <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	2b64      	cmp	r3, #100	; 0x64
 8001202:	d901      	bls.n	8001208 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e0b7      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001208:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d0f0      	beq.n	80011f6 <HAL_RCC_OscConfig+0x49a>
 8001214:	e022      	b.n	800125c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 8001218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <HAL_RCC_OscConfig+0x4e8>)
 800121c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001220:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_RCC_OscConfig+0x4f0>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff f9d0 	bl	80005cc <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800122e:	e00f      	b.n	8001250 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001230:	f7ff f9cc 	bl	80005cc <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b64      	cmp	r3, #100	; 0x64
 800123c:	d908      	bls.n	8001250 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e09a      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
 8001242:	bf00      	nop
 8001244:	40021000 	.word	0x40021000
 8001248:	40007000 	.word	0x40007000
 800124c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001250:	4b4b      	ldr	r3, [pc, #300]	; (8001380 <HAL_RCC_OscConfig+0x624>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1e9      	bne.n	8001230 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1b      	ldr	r3, [r3, #32]
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 8088 	beq.w	8001376 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001266:	4b46      	ldr	r3, [pc, #280]	; (8001380 <HAL_RCC_OscConfig+0x624>)
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b08      	cmp	r3, #8
 8001270:	d068      	beq.n	8001344 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6a1b      	ldr	r3, [r3, #32]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d14d      	bne.n	8001316 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800127a:	4b42      	ldr	r3, [pc, #264]	; (8001384 <HAL_RCC_OscConfig+0x628>)
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff f9a4 	bl	80005cc <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001288:	f7ff f9a0 	bl	80005cc <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e06e      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129a:	4b39      	ldr	r3, [pc, #228]	; (8001380 <HAL_RCC_OscConfig+0x624>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012ae:	d10f      	bne.n	80012d0 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80012b0:	4b33      	ldr	r3, [pc, #204]	; (8001380 <HAL_RCC_OscConfig+0x624>)
 80012b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	4931      	ldr	r1, [pc, #196]	; (8001380 <HAL_RCC_OscConfig+0x624>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012be:	4b30      	ldr	r3, [pc, #192]	; (8001380 <HAL_RCC_OscConfig+0x624>)
 80012c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c2:	f023 020f 	bic.w	r2, r3, #15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	492d      	ldr	r1, [pc, #180]	; (8001380 <HAL_RCC_OscConfig+0x624>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012d0:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <HAL_RCC_OscConfig+0x624>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e0:	430b      	orrs	r3, r1
 80012e2:	4927      	ldr	r1, [pc, #156]	; (8001380 <HAL_RCC_OscConfig+0x624>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e8:	4b26      	ldr	r3, [pc, #152]	; (8001384 <HAL_RCC_OscConfig+0x628>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ee:	f7ff f96d 	bl	80005cc <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f6:	f7ff f969 	bl	80005cc <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e037      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001308:	4b1d      	ldr	r3, [pc, #116]	; (8001380 <HAL_RCC_OscConfig+0x624>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x59a>
 8001314:	e02f      	b.n	8001376 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <HAL_RCC_OscConfig+0x628>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff f956 	bl	80005cc <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff f952 	bl	80005cc <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e020      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_RCC_OscConfig+0x624>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x5c8>
 8001342:	e018      	b.n	8001376 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e013      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001350:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <HAL_RCC_OscConfig+0x624>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001360:	429a      	cmp	r2, r3
 8001362:	d106      	bne.n	8001372 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136e:	429a      	cmp	r2, r3
 8001370:	d001      	beq.n	8001376 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40021000 	.word	0x40021000
 8001384:	42420060 	.word	0x42420060

08001388 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e0d0      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800139c:	4b6a      	ldr	r3, [pc, #424]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d910      	bls.n	80013cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013aa:	4b67      	ldr	r3, [pc, #412]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 0207 	bic.w	r2, r3, #7
 80013b2:	4965      	ldr	r1, [pc, #404]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ba:	4b63      	ldr	r3, [pc, #396]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d001      	beq.n	80013cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0b8      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d020      	beq.n	800141a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013e4:	4b59      	ldr	r3, [pc, #356]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4a58      	ldr	r2, [pc, #352]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013fc:	4b53      	ldr	r3, [pc, #332]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4a52      	ldr	r2, [pc, #328]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001406:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001408:	4b50      	ldr	r3, [pc, #320]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	494d      	ldr	r1, [pc, #308]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	4313      	orrs	r3, r2
 8001418:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d040      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d107      	bne.n	800143e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	4b47      	ldr	r3, [pc, #284]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d115      	bne.n	8001466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e07f      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d107      	bne.n	8001456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001446:	4b41      	ldr	r3, [pc, #260]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d109      	bne.n	8001466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e073      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e06b      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001466:	4b39      	ldr	r3, [pc, #228]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f023 0203 	bic.w	r2, r3, #3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4936      	ldr	r1, [pc, #216]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001478:	f7ff f8a8 	bl	80005cc <HAL_GetTick>
 800147c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147e:	e00a      	b.n	8001496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001480:	f7ff f8a4 	bl	80005cc <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f241 3288 	movw	r2, #5000	; 0x1388
 800148e:	4293      	cmp	r3, r2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e053      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 020c 	and.w	r2, r3, #12
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d1eb      	bne.n	8001480 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014a8:	4b27      	ldr	r3, [pc, #156]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d210      	bcs.n	80014d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 0207 	bic.w	r2, r3, #7
 80014be:	4922      	ldr	r1, [pc, #136]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c6:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e032      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d008      	beq.n	80014f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4916      	ldr	r1, [pc, #88]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d009      	beq.n	8001516 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	490e      	ldr	r1, [pc, #56]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	4313      	orrs	r3, r2
 8001514:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001516:	f000 f821 	bl	800155c <HAL_RCC_GetSysClockFreq>
 800151a:	4602      	mov	r2, r0
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	490a      	ldr	r1, [pc, #40]	; (8001550 <HAL_RCC_ClockConfig+0x1c8>)
 8001528:	5ccb      	ldrb	r3, [r1, r3]
 800152a:	fa22 f303 	lsr.w	r3, r2, r3
 800152e:	4a09      	ldr	r2, [pc, #36]	; (8001554 <HAL_RCC_ClockConfig+0x1cc>)
 8001530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_RCC_ClockConfig+0x1d0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff f806 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40022000 	.word	0x40022000
 800154c:	40021000 	.word	0x40021000
 8001550:	080025e8 	.word	0x080025e8
 8001554:	20000008 	.word	0x20000008
 8001558:	20000000 	.word	0x20000000

0800155c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800155c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800155e:	b091      	sub	sp, #68	; 0x44
 8001560:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8001562:	4b56      	ldr	r3, [pc, #344]	; (80016bc <HAL_RCC_GetSysClockFreq+0x160>)
 8001564:	f107 0414 	add.w	r4, r7, #20
 8001568:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800156a:	c407      	stmia	r4!, {r0, r1, r2}
 800156c:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800156e:	4b54      	ldr	r3, [pc, #336]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x164>)
 8001570:	1d3c      	adds	r4, r7, #4
 8001572:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001574:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	637b      	str	r3, [r7, #52]	; 0x34
 800157c:	2300      	movs	r3, #0
 800157e:	633b      	str	r3, [r7, #48]	; 0x30
 8001580:	2300      	movs	r3, #0
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001594:	4b4b      	ldr	r3, [pc, #300]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800159a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800159c:	f003 030c 	and.w	r3, r3, #12
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d002      	beq.n	80015aa <HAL_RCC_GetSysClockFreq+0x4e>
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d003      	beq.n	80015b0 <HAL_RCC_GetSysClockFreq+0x54>
 80015a8:	e080      	b.n	80016ac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015aa:	4b47      	ldr	r3, [pc, #284]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x16c>)
 80015ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80015ae:	e080      	b.n	80016b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015b2:	0c9b      	lsrs	r3, r3, #18
 80015b4:	f003 030f 	and.w	r3, r3, #15
 80015b8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80015bc:	4413      	add	r3, r2
 80015be:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d066      	beq.n	800169c <HAL_RCC_GetSysClockFreq+0x140>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80015ce:	4b3d      	ldr	r3, [pc, #244]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80015d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80015da:	4413      	add	r3, r2
 80015dc:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80015e0:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80015e2:	4b38      	ldr	r3, [pc, #224]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80015e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d044      	beq.n	8001678 <HAL_RCC_GetSysClockFreq+0x11c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80015ee:	4b35      	ldr	r3, [pc, #212]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	f003 030f 	and.w	r3, r3, #15
 80015f8:	3301      	adds	r3, #1
 80015fa:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80015fc:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	3302      	adds	r3, #2
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	4618      	mov	r0, r3
 800160e:	f04f 0100 	mov.w	r1, #0
 8001612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001614:	461a      	mov	r2, r3
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	fb02 f501 	mul.w	r5, r2, r1
 800161e:	fb00 f403 	mul.w	r4, r0, r3
 8001622:	442c      	add	r4, r5
 8001624:	fba0 2302 	umull	r2, r3, r0, r2
 8001628:	18e1      	adds	r1, r4, r3
 800162a:	460b      	mov	r3, r1
 800162c:	4926      	ldr	r1, [pc, #152]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x16c>)
 800162e:	fb01 f003 	mul.w	r0, r1, r3
 8001632:	2100      	movs	r1, #0
 8001634:	fb01 f102 	mul.w	r1, r1, r2
 8001638:	4401      	add	r1, r0
 800163a:	4823      	ldr	r0, [pc, #140]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x16c>)
 800163c:	fba2 4500 	umull	r4, r5, r2, r0
 8001640:	194b      	adds	r3, r1, r5
 8001642:	461d      	mov	r5, r3
 8001644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001646:	4618      	mov	r0, r3
 8001648:	f04f 0100 	mov.w	r1, #0
 800164c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800164e:	461a      	mov	r2, r3
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	fb02 fc01 	mul.w	ip, r2, r1
 8001658:	fb00 f603 	mul.w	r6, r0, r3
 800165c:	4466      	add	r6, ip
 800165e:	fba0 2302 	umull	r2, r3, r0, r2
 8001662:	18f1      	adds	r1, r6, r3
 8001664:	460b      	mov	r3, r1
 8001666:	4620      	mov	r0, r4
 8001668:	4629      	mov	r1, r5
 800166a:	f7fe fddb 	bl	8000224 <__aeabi_uldivmod>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4613      	mov	r3, r2
 8001674:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001676:	e007      	b.n	8001688 <HAL_RCC_GetSysClockFreq+0x12c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8001678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800167a:	4a13      	ldr	r2, [pc, #76]	; (80016c8 <HAL_RCC_GetSysClockFreq+0x16c>)
 800167c:	fb02 f203 	mul.w	r2, r2, r3
 8001680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001682:	fbb2 f3f3 	udiv	r3, r2, r3
 8001686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001688:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800168c:	461a      	mov	r2, r3
 800168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001690:	4293      	cmp	r3, r2
 8001692:	d108      	bne.n	80016a6 <HAL_RCC_GetSysClockFreq+0x14a>
        {
          pllclk = pllclk / 2;
 8001694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001696:	085b      	lsrs	r3, r3, #1
 8001698:	63fb      	str	r3, [r7, #60]	; 0x3c
 800169a:	e004      	b.n	80016a6 <HAL_RCC_GetSysClockFreq+0x14a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800169c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <HAL_RCC_GetSysClockFreq+0x170>)
 80016a0:	fb02 f303 	mul.w	r3, r2, r3
 80016a4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 80016a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016aa:	e002      	b.n	80016b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x174>)
 80016ae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3744      	adds	r7, #68	; 0x44
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016bc:	080025b8 	.word	0x080025b8
 80016c0:	080025c8 	.word	0x080025c8
 80016c4:	40021000 	.word	0x40021000
 80016c8:	017d7840 	.word	0x017d7840
 80016cc:	003d0900 	.word	0x003d0900
 80016d0:	007a1200 	.word	0x007a1200

080016d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016d8:	4b02      	ldr	r3, [pc, #8]	; (80016e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	20000008 	.word	0x20000008

080016e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016ec:	f7ff fff2 	bl	80016d4 <HAL_RCC_GetHCLKFreq>
 80016f0:	4602      	mov	r2, r0
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	0a1b      	lsrs	r3, r3, #8
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	4903      	ldr	r1, [pc, #12]	; (800170c <HAL_RCC_GetPCLK1Freq+0x24>)
 80016fe:	5ccb      	ldrb	r3, [r1, r3]
 8001700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001704:	4618      	mov	r0, r3
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000
 800170c:	080025f8 	.word	0x080025f8

08001710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001714:	f7ff ffde 	bl	80016d4 <HAL_RCC_GetHCLKFreq>
 8001718:	4602      	mov	r2, r0
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	0adb      	lsrs	r3, r3, #11
 8001720:	f003 0307 	and.w	r3, r3, #7
 8001724:	4903      	ldr	r1, [pc, #12]	; (8001734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001726:	5ccb      	ldrb	r3, [r1, r3]
 8001728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800172c:	4618      	mov	r0, r3
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40021000 	.word	0x40021000
 8001734:	080025f8 	.word	0x080025f8

08001738 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <RCC_Delay+0x34>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <RCC_Delay+0x38>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	0a5b      	lsrs	r3, r3, #9
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	fb02 f303 	mul.w	r3, r2, r3
 8001752:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001754:	bf00      	nop
  }
  while (Delay --);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1e5a      	subs	r2, r3, #1
 800175a:	60fa      	str	r2, [r7, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1f9      	bne.n	8001754 <RCC_Delay+0x1c>
}
 8001760:	bf00      	nop
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr
 800176c:	20000008 	.word	0x20000008
 8001770:	10624dd3 	.word	0x10624dd3

08001774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e03f      	b.n	8001806 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d106      	bne.n	80017a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 fdc6 	bl	800232c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2224      	movs	r2, #36	; 0x24
 80017a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 fbd7 	bl	8001f6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	691a      	ldr	r2, [r3, #16]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80017cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2220      	movs	r2, #32
 80017f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2220      	movs	r2, #32
 8001800:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b08a      	sub	sp, #40	; 0x28
 8001812:	af02      	add	r7, sp, #8
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	4613      	mov	r3, r2
 800181c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b20      	cmp	r3, #32
 800182c:	d17c      	bne.n	8001928 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d002      	beq.n	800183a <HAL_UART_Transmit+0x2c>
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e075      	b.n	800192a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_UART_Transmit+0x3e>
 8001848:	2302      	movs	r3, #2
 800184a:	e06e      	b.n	800192a <HAL_UART_Transmit+0x11c>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2221      	movs	r2, #33	; 0x21
 800185e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001862:	f7fe feb3 	bl	80005cc <HAL_GetTick>
 8001866:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	88fa      	ldrh	r2, [r7, #6]
 800186c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	88fa      	ldrh	r2, [r7, #6]
 8001872:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800187c:	d108      	bne.n	8001890 <HAL_UART_Transmit+0x82>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d104      	bne.n	8001890 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	61bb      	str	r3, [r7, #24]
 800188e:	e003      	b.n	8001898 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80018a0:	e02a      	b.n	80018f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	2200      	movs	r2, #0
 80018aa:	2180      	movs	r1, #128	; 0x80
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f000 f9fa 	bl	8001ca6 <UART_WaitOnFlagUntilTimeout>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e036      	b.n	800192a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10b      	bne.n	80018da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80018d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	3302      	adds	r3, #2
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	e007      	b.n	80018ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	781a      	ldrb	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	3301      	adds	r3, #1
 80018e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	3b01      	subs	r3, #1
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1cf      	bne.n	80018a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2200      	movs	r2, #0
 800190a:	2140      	movs	r1, #64	; 0x40
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 f9ca 	bl	8001ca6 <UART_WaitOnFlagUntilTimeout>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e006      	b.n	800192a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2220      	movs	r2, #32
 8001920:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001924:	2300      	movs	r3, #0
 8001926:	e000      	b.n	800192a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001928:	2302      	movs	r3, #2
  }
}
 800192a:	4618      	mov	r0, r3
 800192c:	3720      	adds	r7, #32
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b08a      	sub	sp, #40	; 0x28
 8001936:	af02      	add	r7, sp, #8
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	4613      	mov	r3, r2
 8001940:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b20      	cmp	r3, #32
 8001950:	f040 8089 	bne.w	8001a66 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d002      	beq.n	8001960 <HAL_UART_Receive+0x2e>
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e081      	b.n	8001a68 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_UART_Receive+0x40>
 800196e:	2302      	movs	r3, #2
 8001970:	e07a      	b.n	8001a68 <HAL_UART_Receive+0x136>
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2222      	movs	r2, #34	; 0x22
 8001984:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001988:	f7fe fe20 	bl	80005cc <HAL_GetTick>
 800198c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	88fa      	ldrh	r2, [r7, #6]
 8001992:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	88fa      	ldrh	r2, [r7, #6]
 8001998:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019a2:	d108      	bne.n	80019b6 <HAL_UART_Receive+0x84>
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d104      	bne.n	80019b6 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	e003      	b.n	80019be <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80019c6:	e043      	b.n	8001a50 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	2200      	movs	r2, #0
 80019d0:	2120      	movs	r1, #32
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 f967 	bl	8001ca6 <UART_WaitOnFlagUntilTimeout>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e042      	b.n	8001a68 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10c      	bne.n	8001a02 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	3302      	adds	r3, #2
 80019fe:	61bb      	str	r3, [r7, #24]
 8001a00:	e01f      	b.n	8001a42 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a0a:	d007      	beq.n	8001a1c <HAL_UART_Receive+0xea>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10a      	bne.n	8001a2a <HAL_UART_Receive+0xf8>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d106      	bne.n	8001a2a <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	b2da      	uxtb	r2, r3
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	e008      	b.n	8001a3c <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1b6      	bne.n	80019c8 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	e000      	b.n	8001a68 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8001a66:	2302      	movs	r3, #2
  }
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3720      	adds	r7, #32
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	695b      	ldr	r3, [r3, #20]
 8001a8e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10d      	bne.n	8001ac2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f003 0320 	and.w	r3, r3, #32
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d008      	beq.n	8001ac2 <HAL_UART_IRQHandler+0x52>
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	f003 0320 	and.w	r3, r3, #32
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f9d5 	bl	8001e6a <UART_Receive_IT>
      return;
 8001ac0:	e0d0      	b.n	8001c64 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 80b0 	beq.w	8001c2a <HAL_UART_IRQHandler+0x1ba>
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d105      	bne.n	8001ae0 <HAL_UART_IRQHandler+0x70>
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 80a5 	beq.w	8001c2a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00a      	beq.n	8001b00 <HAL_UART_IRQHandler+0x90>
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	f043 0201 	orr.w	r2, r3, #1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00a      	beq.n	8001b20 <HAL_UART_IRQHandler+0xb0>
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b18:	f043 0202 	orr.w	r2, r3, #2
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00a      	beq.n	8001b40 <HAL_UART_IRQHandler+0xd0>
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b38:	f043 0204 	orr.w	r2, r3, #4
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d00f      	beq.n	8001b6a <HAL_UART_IRQHandler+0xfa>
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	f003 0320 	and.w	r3, r3, #32
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d104      	bne.n	8001b5e <HAL_UART_IRQHandler+0xee>
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d005      	beq.n	8001b6a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b62:	f043 0208 	orr.w	r2, r3, #8
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d077      	beq.n	8001c62 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f003 0320 	and.w	r3, r3, #32
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d007      	beq.n	8001b8c <HAL_UART_IRQHandler+0x11c>
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	f003 0320 	and.w	r3, r3, #32
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d002      	beq.n	8001b8c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f96f 	bl	8001e6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	bf14      	ite	ne
 8001b9a:	2301      	movne	r3, #1
 8001b9c:	2300      	moveq	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d102      	bne.n	8001bb4 <HAL_UART_IRQHandler+0x144>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d031      	beq.n	8001c18 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f8c0 	bl	8001d3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	695b      	ldr	r3, [r3, #20]
 8001bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d023      	beq.n	8001c10 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	695a      	ldr	r2, [r3, #20]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bd6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d013      	beq.n	8001c08 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be4:	4a21      	ldr	r2, [pc, #132]	; (8001c6c <HAL_UART_IRQHandler+0x1fc>)
 8001be6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fe29 	bl	8000844 <HAL_DMA_Abort_IT>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d016      	beq.n	8001c26 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c02:	4610      	mov	r0, r2
 8001c04:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c06:	e00e      	b.n	8001c26 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f843 	bl	8001c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c0e:	e00a      	b.n	8001c26 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f83f 	bl	8001c94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c16:	e006      	b.n	8001c26 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f83b 	bl	8001c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001c24:	e01d      	b.n	8001c62 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001c26:	bf00      	nop
    return;
 8001c28:	e01b      	b.n	8001c62 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_UART_IRQHandler+0x1d6>
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f8ac 	bl	8001d9c <UART_Transmit_IT>
    return;
 8001c44:	e00e      	b.n	8001c64 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d009      	beq.n	8001c64 <HAL_UART_IRQHandler+0x1f4>
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d004      	beq.n	8001c64 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f8ed 	bl	8001e3a <UART_EndTransmit_IT>
    return;
 8001c60:	e000      	b.n	8001c64 <HAL_UART_IRQHandler+0x1f4>
    return;
 8001c62:	bf00      	nop
  }
}
 8001c64:	3720      	adds	r7, #32
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	08001d75 	.word	0x08001d75

08001c70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr

08001c82 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bc80      	pop	{r7}
 8001ca4:	4770      	bx	lr

08001ca6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	603b      	str	r3, [r7, #0]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cb6:	e02c      	b.n	8001d12 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbe:	d028      	beq.n	8001d12 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d007      	beq.n	8001cd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001cc6:	f7fe fc81 	bl	80005cc <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d21d      	bcs.n	8001d12 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ce4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	695a      	ldr	r2, [r3, #20]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0201 	bic.w	r2, r2, #1
 8001cf4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2220      	movs	r2, #32
 8001d02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e00f      	b.n	8001d32 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	bf0c      	ite	eq
 8001d22:	2301      	moveq	r3, #1
 8001d24:	2300      	movne	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d0c3      	beq.n	8001cb8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001d50:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695a      	ldr	r2, [r3, #20]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0201 	bic.w	r2, r2, #1
 8001d60:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2220      	movs	r2, #32
 8001d66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f7ff ff80 	bl	8001c94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b21      	cmp	r3, #33	; 0x21
 8001dae:	d13e      	bne.n	8001e2e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001db8:	d114      	bne.n	8001de4 <UART_Transmit_IT+0x48>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d110      	bne.n	8001de4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dd6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	1c9a      	adds	r2, r3, #2
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	621a      	str	r2, [r3, #32]
 8001de2:	e008      	b.n	8001df6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	1c59      	adds	r1, r3, #1
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6211      	str	r1, [r2, #32]
 8001dee:	781a      	ldrb	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4619      	mov	r1, r3
 8001e04:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d10f      	bne.n	8001e2a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e18:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e28:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e000      	b.n	8001e30 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001e2e:	2302      	movs	r3, #2
  }
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3714      	adds	r7, #20
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr

08001e3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ff08 	bl	8001c70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b084      	sub	sp, #16
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b22      	cmp	r3, #34	; 0x22
 8001e7c:	d170      	bne.n	8001f60 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e86:	d117      	bne.n	8001eb8 <UART_Receive_IT+0x4e>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d113      	bne.n	8001eb8 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e98:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	1c9a      	adds	r2, r3, #2
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	629a      	str	r2, [r3, #40]	; 0x28
 8001eb6:	e026      	b.n	8001f06 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eca:	d007      	beq.n	8001edc <UART_Receive_IT+0x72>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10a      	bne.n	8001eea <UART_Receive_IT+0x80>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d106      	bne.n	8001eea <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	701a      	strb	r2, [r3, #0]
 8001ee8:	e008      	b.n	8001efc <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ef6:	b2da      	uxtb	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	4619      	mov	r1, r3
 8001f14:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d120      	bne.n	8001f5c <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0220 	bic.w	r2, r2, #32
 8001f28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	695a      	ldr	r2, [r3, #20]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0201 	bic.w	r2, r2, #1
 8001f48:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff fe95 	bl	8001c82 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	e002      	b.n	8001f62 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e000      	b.n	8001f62 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8001f60:	2302      	movs	r3, #2
  }
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001fa6:	f023 030c 	bic.w	r3, r3, #12
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	68b9      	ldr	r1, [r7, #8]
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a2c      	ldr	r2, [pc, #176]	; (8002080 <UART_SetConfig+0x114>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d103      	bne.n	8001fdc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001fd4:	f7ff fb9c 	bl	8001710 <HAL_RCC_GetPCLK2Freq>
 8001fd8:	60f8      	str	r0, [r7, #12]
 8001fda:	e002      	b.n	8001fe2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001fdc:	f7ff fb84 	bl	80016e8 <HAL_RCC_GetPCLK1Freq>
 8001fe0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	009a      	lsls	r2, r3, #2
 8001fec:	441a      	add	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff8:	4a22      	ldr	r2, [pc, #136]	; (8002084 <UART_SetConfig+0x118>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	0119      	lsls	r1, r3, #4
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	009a      	lsls	r2, r3, #2
 800200c:	441a      	add	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	fbb2 f2f3 	udiv	r2, r2, r3
 8002018:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <UART_SetConfig+0x118>)
 800201a:	fba3 0302 	umull	r0, r3, r3, r2
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	2064      	movs	r0, #100	; 0x64
 8002022:	fb00 f303 	mul.w	r3, r0, r3
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	3332      	adds	r3, #50	; 0x32
 800202c:	4a15      	ldr	r2, [pc, #84]	; (8002084 <UART_SetConfig+0x118>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	095b      	lsrs	r3, r3, #5
 8002034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002038:	4419      	add	r1, r3
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	009a      	lsls	r2, r3, #2
 8002044:	441a      	add	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <UART_SetConfig+0x118>)
 8002052:	fba3 0302 	umull	r0, r3, r3, r2
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	2064      	movs	r0, #100	; 0x64
 800205a:	fb00 f303 	mul.w	r3, r0, r3
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	3332      	adds	r3, #50	; 0x32
 8002064:	4a07      	ldr	r2, [pc, #28]	; (8002084 <UART_SetConfig+0x118>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	f003 020f 	and.w	r2, r3, #15
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	440a      	add	r2, r1
 8002076:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002078:	bf00      	nop
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40013800 	.word	0x40013800
 8002084:	51eb851f 	.word	0x51eb851f

08002088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800208e:	f7fe fa45 	bl	800051c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002092:	f000 f83d 	bl	8002110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002096:	f000 f8e3 	bl	8002260 <MX_GPIO_Init>
  MX_UART5_Init();
 800209a:	f000 f88d 	bl	80021b8 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800209e:	f000 f8b5 	bl	800220c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
   HAL_Delay(5000);
 80020a2:	f241 3088 	movw	r0, #5000	; 0x1388
 80020a6:	f7fe fa9b 	bl	80005e0 <HAL_Delay>
  HAL_UART_Transmit(&huart5,"UART5",5,100);
 80020aa:	2364      	movs	r3, #100	; 0x64
 80020ac:	2205      	movs	r2, #5
 80020ae:	4914      	ldr	r1, [pc, #80]	; (8002100 <main+0x78>)
 80020b0:	4814      	ldr	r0, [pc, #80]	; (8002104 <main+0x7c>)
 80020b2:	f7ff fbac 	bl	800180e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,"UART1",5,100);
 80020b6:	2364      	movs	r3, #100	; 0x64
 80020b8:	2205      	movs	r2, #5
 80020ba:	4913      	ldr	r1, [pc, #76]	; (8002108 <main+0x80>)
 80020bc:	4813      	ldr	r0, [pc, #76]	; (800210c <main+0x84>)
 80020be:	f7ff fba6 	bl	800180e <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t tmp;
  while (1)
  {
	if(HAL_UART_Receive(&huart1,&tmp,1,100)==HAL_OK)
 80020c2:	1df9      	adds	r1, r7, #7
 80020c4:	2364      	movs	r3, #100	; 0x64
 80020c6:	2201      	movs	r2, #1
 80020c8:	4810      	ldr	r0, [pc, #64]	; (800210c <main+0x84>)
 80020ca:	f7ff fc32 	bl	8001932 <HAL_UART_Receive>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d105      	bne.n	80020e0 <main+0x58>
	{
		HAL_UART_Transmit(&huart5,&tmp,1,100);
 80020d4:	1df9      	adds	r1, r7, #7
 80020d6:	2364      	movs	r3, #100	; 0x64
 80020d8:	2201      	movs	r2, #1
 80020da:	480a      	ldr	r0, [pc, #40]	; (8002104 <main+0x7c>)
 80020dc:	f7ff fb97 	bl	800180e <HAL_UART_Transmit>
	}
	if(HAL_UART_Receive(&huart5,&tmp,1,100)==HAL_OK)
 80020e0:	1df9      	adds	r1, r7, #7
 80020e2:	2364      	movs	r3, #100	; 0x64
 80020e4:	2201      	movs	r2, #1
 80020e6:	4807      	ldr	r0, [pc, #28]	; (8002104 <main+0x7c>)
 80020e8:	f7ff fc23 	bl	8001932 <HAL_UART_Receive>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1e7      	bne.n	80020c2 <main+0x3a>
	{
		HAL_UART_Transmit(&huart1,&tmp,1,100);
 80020f2:	1df9      	adds	r1, r7, #7
 80020f4:	2364      	movs	r3, #100	; 0x64
 80020f6:	2201      	movs	r2, #1
 80020f8:	4804      	ldr	r0, [pc, #16]	; (800210c <main+0x84>)
 80020fa:	f7ff fb88 	bl	800180e <HAL_UART_Transmit>
	if(HAL_UART_Receive(&huart1,&tmp,1,100)==HAL_OK)
 80020fe:	e7e0      	b.n	80020c2 <main+0x3a>
 8002100:	080025d8 	.word	0x080025d8
 8002104:	2000002c 	.word	0x2000002c
 8002108:	080025e0 	.word	0x080025e0
 800210c:	2000006c 	.word	0x2000006c

08002110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b094      	sub	sp, #80	; 0x50
 8002114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002116:	f107 0318 	add.w	r3, r7, #24
 800211a:	2238      	movs	r2, #56	; 0x38
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f000 fa36 	bl	8002590 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
 8002130:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002132:	2301      	movs	r3, #1
 8002134:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002136:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800213a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800213c:	2304      	movs	r3, #4
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002140:	2301      	movs	r3, #1
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8002144:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002148:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800214a:	2302      	movs	r3, #2
 800214c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800214e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002152:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002154:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002158:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 800215a:	2302      	movs	r3, #2
 800215c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 800215e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002162:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8002164:	2340      	movs	r3, #64	; 0x40
 8002166:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002168:	f107 0318 	add.w	r3, r7, #24
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe fdf5 	bl	8000d5c <HAL_RCC_OscConfig>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8002178:	f000 f8a0 	bl	80022bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800217c:	230f      	movs	r3, #15
 800217e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002180:	2302      	movs	r3, #2
 8002182:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002184:	2300      	movs	r3, #0
 8002186:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800218c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	2102      	movs	r1, #2
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff f8f6 	bl	8001388 <HAL_RCC_ClockConfig>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80021a2:	f000 f88b 	bl	80022bc <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80021a6:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <SystemClock_Config+0xa4>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
}
 80021ac:	bf00      	nop
 80021ae:	3750      	adds	r7, #80	; 0x50
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	42420070 	.word	0x42420070

080021b8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <MX_UART5_Init+0x4c>)
 80021be:	4a12      	ldr	r2, [pc, #72]	; (8002208 <MX_UART5_Init+0x50>)
 80021c0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <MX_UART5_Init+0x4c>)
 80021c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021c8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80021ca:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <MX_UART5_Init+0x4c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <MX_UART5_Init+0x4c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <MX_UART5_Init+0x4c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <MX_UART5_Init+0x4c>)
 80021de:	220c      	movs	r2, #12
 80021e0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e2:	4b08      	ldr	r3, [pc, #32]	; (8002204 <MX_UART5_Init+0x4c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <MX_UART5_Init+0x4c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80021ee:	4805      	ldr	r0, [pc, #20]	; (8002204 <MX_UART5_Init+0x4c>)
 80021f0:	f7ff fac0 	bl	8001774 <HAL_UART_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80021fa:	f000 f85f 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	2000002c 	.word	0x2000002c
 8002208:	40005000 	.word	0x40005000

0800220c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002210:	4b11      	ldr	r3, [pc, #68]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002212:	4a12      	ldr	r2, [pc, #72]	; (800225c <MX_USART1_UART_Init+0x50>)
 8002214:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800221c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800222a:	4b0b      	ldr	r3, [pc, #44]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 800222c:	2200      	movs	r2, #0
 800222e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002232:	220c      	movs	r2, #12
 8002234:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002238:	2200      	movs	r2, #0
 800223a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 800223e:	2200      	movs	r2, #0
 8002240:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002242:	4805      	ldr	r0, [pc, #20]	; (8002258 <MX_USART1_UART_Init+0x4c>)
 8002244:	f7ff fa96 	bl	8001774 <HAL_UART_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800224e:	f000 f835 	bl	80022bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	2000006c 	.word	0x2000006c
 800225c:	40013800 	.word	0x40013800

08002260 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002266:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <MX_GPIO_Init+0x58>)
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	4a13      	ldr	r2, [pc, #76]	; (80022b8 <MX_GPIO_Init+0x58>)
 800226c:	f043 0310 	orr.w	r3, r3, #16
 8002270:	6193      	str	r3, [r2, #24]
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <MX_GPIO_Init+0x58>)
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <MX_GPIO_Init+0x58>)
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	4a0d      	ldr	r2, [pc, #52]	; (80022b8 <MX_GPIO_Init+0x58>)
 8002284:	f043 0320 	orr.w	r3, r3, #32
 8002288:	6193      	str	r3, [r2, #24]
 800228a:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <MX_GPIO_Init+0x58>)
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	f003 0320 	and.w	r3, r3, #32
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	4b08      	ldr	r3, [pc, #32]	; (80022b8 <MX_GPIO_Init+0x58>)
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	4a07      	ldr	r2, [pc, #28]	; (80022b8 <MX_GPIO_Init+0x58>)
 800229c:	f043 0304 	orr.w	r3, r3, #4
 80022a0:	6193      	str	r3, [r2, #24]
 80022a2:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <MX_GPIO_Init+0x58>)
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]

}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	40021000 	.word	0x40021000

080022bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022c0:	b672      	cpsid	i
}
 80022c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <Error_Handler+0x8>
	...

080022c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <HAL_MspInit+0x5c>)
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	4a14      	ldr	r2, [pc, #80]	; (8002324 <HAL_MspInit+0x5c>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6193      	str	r3, [r2, #24]
 80022da:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_MspInit+0x5c>)
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022e6:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <HAL_MspInit+0x5c>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	4a0e      	ldr	r2, [pc, #56]	; (8002324 <HAL_MspInit+0x5c>)
 80022ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f0:	61d3      	str	r3, [r2, #28]
 80022f2:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_MspInit+0x5c>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_MspInit+0x60>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	4a04      	ldr	r2, [pc, #16]	; (8002328 <HAL_MspInit+0x60>)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800231a:	bf00      	nop
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	40021000 	.word	0x40021000
 8002328:	40010000 	.word	0x40010000

0800232c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08c      	sub	sp, #48	; 0x30
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 0320 	add.w	r3, r7, #32
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART5)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a46      	ldr	r2, [pc, #280]	; (8002460 <HAL_UART_MspInit+0x134>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d145      	bne.n	80023d8 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800234c:	4b45      	ldr	r3, [pc, #276]	; (8002464 <HAL_UART_MspInit+0x138>)
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	4a44      	ldr	r2, [pc, #272]	; (8002464 <HAL_UART_MspInit+0x138>)
 8002352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002356:	61d3      	str	r3, [r2, #28]
 8002358:	4b42      	ldr	r3, [pc, #264]	; (8002464 <HAL_UART_MspInit+0x138>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002364:	4b3f      	ldr	r3, [pc, #252]	; (8002464 <HAL_UART_MspInit+0x138>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	4a3e      	ldr	r2, [pc, #248]	; (8002464 <HAL_UART_MspInit+0x138>)
 800236a:	f043 0310 	orr.w	r3, r3, #16
 800236e:	6193      	str	r3, [r2, #24]
 8002370:	4b3c      	ldr	r3, [pc, #240]	; (8002464 <HAL_UART_MspInit+0x138>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	61bb      	str	r3, [r7, #24]
 800237a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800237c:	4b39      	ldr	r3, [pc, #228]	; (8002464 <HAL_UART_MspInit+0x138>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	4a38      	ldr	r2, [pc, #224]	; (8002464 <HAL_UART_MspInit+0x138>)
 8002382:	f043 0320 	orr.w	r3, r3, #32
 8002386:	6193      	str	r3, [r2, #24]
 8002388:	4b36      	ldr	r3, [pc, #216]	; (8002464 <HAL_UART_MspInit+0x138>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	f003 0320 	and.w	r3, r3, #32
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239a:	2302      	movs	r3, #2
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800239e:	2303      	movs	r3, #3
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a2:	f107 0320 	add.w	r3, r7, #32
 80023a6:	4619      	mov	r1, r3
 80023a8:	482f      	ldr	r0, [pc, #188]	; (8002468 <HAL_UART_MspInit+0x13c>)
 80023aa:	f7fe fb53 	bl	8000a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023ae:	2304      	movs	r3, #4
 80023b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023ba:	f107 0320 	add.w	r3, r7, #32
 80023be:	4619      	mov	r1, r3
 80023c0:	482a      	ldr	r0, [pc, #168]	; (800246c <HAL_UART_MspInit+0x140>)
 80023c2:	f7fe fb47 	bl	8000a54 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2100      	movs	r1, #0
 80023ca:	2035      	movs	r0, #53	; 0x35
 80023cc:	f7fe fa03 	bl	80007d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80023d0:	2035      	movs	r0, #53	; 0x35
 80023d2:	f7fe fa1c 	bl	800080e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023d6:	e03e      	b.n	8002456 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a24      	ldr	r2, [pc, #144]	; (8002470 <HAL_UART_MspInit+0x144>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d139      	bne.n	8002456 <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART1_CLK_ENABLE();
 80023e2:	4b20      	ldr	r3, [pc, #128]	; (8002464 <HAL_UART_MspInit+0x138>)
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	4a1f      	ldr	r2, [pc, #124]	; (8002464 <HAL_UART_MspInit+0x138>)
 80023e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ec:	6193      	str	r3, [r2, #24]
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_UART_MspInit+0x138>)
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fa:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <HAL_UART_MspInit+0x138>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	4a19      	ldr	r2, [pc, #100]	; (8002464 <HAL_UART_MspInit+0x138>)
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	6193      	str	r3, [r2, #24]
 8002406:	4b17      	ldr	r3, [pc, #92]	; (8002464 <HAL_UART_MspInit+0x138>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002412:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	2302      	movs	r3, #2
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800241c:	2303      	movs	r3, #3
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002420:	f107 0320 	add.w	r3, r7, #32
 8002424:	4619      	mov	r1, r3
 8002426:	4813      	ldr	r0, [pc, #76]	; (8002474 <HAL_UART_MspInit+0x148>)
 8002428:	f7fe fb14 	bl	8000a54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800242c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002432:	2300      	movs	r3, #0
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243a:	f107 0320 	add.w	r3, r7, #32
 800243e:	4619      	mov	r1, r3
 8002440:	480c      	ldr	r0, [pc, #48]	; (8002474 <HAL_UART_MspInit+0x148>)
 8002442:	f7fe fb07 	bl	8000a54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	2025      	movs	r0, #37	; 0x25
 800244c:	f7fe f9c3 	bl	80007d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002450:	2025      	movs	r0, #37	; 0x25
 8002452:	f7fe f9dc 	bl	800080e <HAL_NVIC_EnableIRQ>
}
 8002456:	bf00      	nop
 8002458:	3730      	adds	r7, #48	; 0x30
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40005000 	.word	0x40005000
 8002464:	40021000 	.word	0x40021000
 8002468:	40011000 	.word	0x40011000
 800246c:	40011400 	.word	0x40011400
 8002470:	40013800 	.word	0x40013800
 8002474:	40010800 	.word	0x40010800

08002478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800247c:	e7fe      	b.n	800247c <NMI_Handler+0x4>

0800247e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002482:	e7fe      	b.n	8002482 <HardFault_Handler+0x4>

08002484 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002488:	e7fe      	b.n	8002488 <MemManage_Handler+0x4>

0800248a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800248e:	e7fe      	b.n	800248e <BusFault_Handler+0x4>

08002490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <UsageFault_Handler+0x4>

08002496 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002496:	b480      	push	{r7}
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024a2:	b480      	push	{r7}
 80024a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr

080024ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024b2:	bf00      	nop
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024be:	f7fe f873 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <USART1_IRQHandler+0x10>)
 80024ce:	f7ff facf 	bl	8001a70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	2000006c 	.word	0x2000006c

080024dc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80024e0:	4802      	ldr	r0, [pc, #8]	; (80024ec <UART5_IRQHandler+0x10>)
 80024e2:	f7ff fac5 	bl	8001a70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	2000002c 	.word	0x2000002c

080024f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80024fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80024fe:	e003      	b.n	8002508 <LoopCopyDataInit>

08002500 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002502:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002504:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002506:	3104      	adds	r1, #4

08002508 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002508:	480a      	ldr	r0, [pc, #40]	; (8002534 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800250a:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800250c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800250e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002510:	d3f6      	bcc.n	8002500 <CopyDataInit>
  ldr r2, =_sbss
 8002512:	4a0a      	ldr	r2, [pc, #40]	; (800253c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002514:	e002      	b.n	800251c <LoopFillZerobss>

08002516 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002516:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002518:	f842 3b04 	str.w	r3, [r2], #4

0800251c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800251e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002520:	d3f9      	bcc.n	8002516 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002522:	f7ff ffe5 	bl	80024f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002526:	f000 f80f 	bl	8002548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800252a:	f7ff fdad 	bl	8002088 <main>
  bx lr
 800252e:	4770      	bx	lr
  ldr r3, =_sidata
 8002530:	08002610 	.word	0x08002610
  ldr r0, =_sdata
 8002534:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002538:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800253c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8002540:	200000ac 	.word	0x200000ac

08002544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002544:	e7fe      	b.n	8002544 <ADC1_2_IRQHandler>
	...

08002548 <__libc_init_array>:
 8002548:	b570      	push	{r4, r5, r6, lr}
 800254a:	2600      	movs	r6, #0
 800254c:	4d0c      	ldr	r5, [pc, #48]	; (8002580 <__libc_init_array+0x38>)
 800254e:	4c0d      	ldr	r4, [pc, #52]	; (8002584 <__libc_init_array+0x3c>)
 8002550:	1b64      	subs	r4, r4, r5
 8002552:	10a4      	asrs	r4, r4, #2
 8002554:	42a6      	cmp	r6, r4
 8002556:	d109      	bne.n	800256c <__libc_init_array+0x24>
 8002558:	f000 f822 	bl	80025a0 <_init>
 800255c:	2600      	movs	r6, #0
 800255e:	4d0a      	ldr	r5, [pc, #40]	; (8002588 <__libc_init_array+0x40>)
 8002560:	4c0a      	ldr	r4, [pc, #40]	; (800258c <__libc_init_array+0x44>)
 8002562:	1b64      	subs	r4, r4, r5
 8002564:	10a4      	asrs	r4, r4, #2
 8002566:	42a6      	cmp	r6, r4
 8002568:	d105      	bne.n	8002576 <__libc_init_array+0x2e>
 800256a:	bd70      	pop	{r4, r5, r6, pc}
 800256c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002570:	4798      	blx	r3
 8002572:	3601      	adds	r6, #1
 8002574:	e7ee      	b.n	8002554 <__libc_init_array+0xc>
 8002576:	f855 3b04 	ldr.w	r3, [r5], #4
 800257a:	4798      	blx	r3
 800257c:	3601      	adds	r6, #1
 800257e:	e7f2      	b.n	8002566 <__libc_init_array+0x1e>
 8002580:	08002608 	.word	0x08002608
 8002584:	08002608 	.word	0x08002608
 8002588:	08002608 	.word	0x08002608
 800258c:	0800260c 	.word	0x0800260c

08002590 <memset>:
 8002590:	4603      	mov	r3, r0
 8002592:	4402      	add	r2, r0
 8002594:	4293      	cmp	r3, r2
 8002596:	d100      	bne.n	800259a <memset+0xa>
 8002598:	4770      	bx	lr
 800259a:	f803 1b01 	strb.w	r1, [r3], #1
 800259e:	e7f9      	b.n	8002594 <memset+0x4>

080025a0 <_init>:
 80025a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a2:	bf00      	nop
 80025a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025a6:	bc08      	pop	{r3}
 80025a8:	469e      	mov	lr, r3
 80025aa:	4770      	bx	lr

080025ac <_fini>:
 80025ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ae:	bf00      	nop
 80025b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025b2:	bc08      	pop	{r3}
 80025b4:	469e      	mov	lr, r3
 80025b6:	4770      	bx	lr
