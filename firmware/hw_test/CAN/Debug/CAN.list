
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000307c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003260  08003260  00013260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032e8  080032e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080032e8  080032e8  000132e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032f0  080032f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032f0  080032f0  000132f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032f4  080032f4  000132f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080032f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  08003368  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003368  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c76  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015da  00000000  00000000  00027d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000758  00000000  00000000  000292f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a0  00000000  00000000  00029a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001eedb  00000000  00000000  0002a0e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000061e0  00000000  00000000  00048fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b3a67  00000000  00000000  0004f1a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00102c0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020a4  00000000  00000000  00102c88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	08003248 	.word	0x08003248

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	08003248 	.word	0x08003248

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b974 	b.w	8000534 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	468c      	mov	ip, r1
 800026a:	4604      	mov	r4, r0
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d14b      	bne.n	800030a <__udivmoddi4+0xa6>
 8000272:	428a      	cmp	r2, r1
 8000274:	4615      	mov	r5, r2
 8000276:	d967      	bls.n	8000348 <__udivmoddi4+0xe4>
 8000278:	fab2 f282 	clz	r2, r2
 800027c:	b14a      	cbz	r2, 8000292 <__udivmoddi4+0x2e>
 800027e:	f1c2 0720 	rsb	r7, r2, #32
 8000282:	fa01 f302 	lsl.w	r3, r1, r2
 8000286:	fa20 f707 	lsr.w	r7, r0, r7
 800028a:	4095      	lsls	r5, r2
 800028c:	ea47 0c03 	orr.w	ip, r7, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000296:	fbbc f7fe 	udiv	r7, ip, lr
 800029a:	fa1f f885 	uxth.w	r8, r5
 800029e:	fb0e c317 	mls	r3, lr, r7, ip
 80002a2:	fb07 f908 	mul.w	r9, r7, r8
 80002a6:	0c21      	lsrs	r1, r4, #16
 80002a8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ac:	4599      	cmp	r9, r3
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x60>
 80002b0:	18eb      	adds	r3, r5, r3
 80002b2:	f107 31ff 	add.w	r1, r7, #4294967295
 80002b6:	f080 811c 	bcs.w	80004f2 <__udivmoddi4+0x28e>
 80002ba:	4599      	cmp	r9, r3
 80002bc:	f240 8119 	bls.w	80004f2 <__udivmoddi4+0x28e>
 80002c0:	3f02      	subs	r7, #2
 80002c2:	442b      	add	r3, r5
 80002c4:	eba3 0309 	sub.w	r3, r3, r9
 80002c8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002cc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d0:	fb00 f108 	mul.w	r1, r0, r8
 80002d4:	b2a4      	uxth	r4, r4
 80002d6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002da:	42a1      	cmp	r1, r4
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0x8e>
 80002de:	192c      	adds	r4, r5, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 8107 	bcs.w	80004f6 <__udivmoddi4+0x292>
 80002e8:	42a1      	cmp	r1, r4
 80002ea:	f240 8104 	bls.w	80004f6 <__udivmoddi4+0x292>
 80002ee:	3802      	subs	r0, #2
 80002f0:	442c      	add	r4, r5
 80002f2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f6:	2700      	movs	r7, #0
 80002f8:	1a64      	subs	r4, r4, r1
 80002fa:	b11e      	cbz	r6, 8000304 <__udivmoddi4+0xa0>
 80002fc:	2300      	movs	r3, #0
 80002fe:	40d4      	lsrs	r4, r2
 8000300:	e9c6 4300 	strd	r4, r3, [r6]
 8000304:	4639      	mov	r1, r7
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xbe>
 800030e:	2e00      	cmp	r6, #0
 8000310:	f000 80ec 	beq.w	80004ec <__udivmoddi4+0x288>
 8000314:	2700      	movs	r7, #0
 8000316:	e9c6 0100 	strd	r0, r1, [r6]
 800031a:	4638      	mov	r0, r7
 800031c:	4639      	mov	r1, r7
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f783 	clz	r7, r3
 8000326:	2f00      	cmp	r7, #0
 8000328:	d148      	bne.n	80003bc <__udivmoddi4+0x158>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd0>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80fb 	bhi.w	800052a <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469c      	mov	ip, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa0>
 8000342:	e9c6 4c00 	strd	r4, ip, [r6]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa0>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xe8>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 808f 	bne.w	8000474 <__udivmoddi4+0x210>
 8000356:	2701      	movs	r7, #1
 8000358:	1b49      	subs	r1, r1, r5
 800035a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800035e:	fa1f f985 	uxth.w	r9, r5
 8000362:	fbb1 fef8 	udiv	lr, r1, r8
 8000366:	fb08 111e 	mls	r1, r8, lr, r1
 800036a:	fb09 f00e 	mul.w	r0, r9, lr
 800036e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000372:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000376:	4298      	cmp	r0, r3
 8000378:	d907      	bls.n	800038a <__udivmoddi4+0x126>
 800037a:	18eb      	adds	r3, r5, r3
 800037c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000380:	d202      	bcs.n	8000388 <__udivmoddi4+0x124>
 8000382:	4298      	cmp	r0, r3
 8000384:	f200 80cd 	bhi.w	8000522 <__udivmoddi4+0x2be>
 8000388:	468e      	mov	lr, r1
 800038a:	1a1b      	subs	r3, r3, r0
 800038c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000390:	fb08 3310 	mls	r3, r8, r0, r3
 8000394:	fb09 f900 	mul.w	r9, r9, r0
 8000398:	b2a4      	uxth	r4, r4
 800039a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800039e:	45a1      	cmp	r9, r4
 80003a0:	d907      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a2:	192c      	adds	r4, r5, r4
 80003a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f200 80b6 	bhi.w	800051c <__udivmoddi4+0x2b8>
 80003b0:	4618      	mov	r0, r3
 80003b2:	eba4 0409 	sub.w	r4, r4, r9
 80003b6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003ba:	e79e      	b.n	80002fa <__udivmoddi4+0x96>
 80003bc:	f1c7 0520 	rsb	r5, r7, #32
 80003c0:	40bb      	lsls	r3, r7
 80003c2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ca:	fa21 f405 	lsr.w	r4, r1, r5
 80003ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003d2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003d6:	fa1f f88c 	uxth.w	r8, ip
 80003da:	fb0e 4419 	mls	r4, lr, r9, r4
 80003de:	fa20 f305 	lsr.w	r3, r0, r5
 80003e2:	40b9      	lsls	r1, r7
 80003e4:	fb09 fa08 	mul.w	sl, r9, r8
 80003e8:	4319      	orrs	r1, r3
 80003ea:	0c0b      	lsrs	r3, r1, #16
 80003ec:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f0:	45a2      	cmp	sl, r4
 80003f2:	fa02 f207 	lsl.w	r2, r2, r7
 80003f6:	fa00 f307 	lsl.w	r3, r0, r7
 80003fa:	d90b      	bls.n	8000414 <__udivmoddi4+0x1b0>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f109 30ff 	add.w	r0, r9, #4294967295
 8000404:	f080 8088 	bcs.w	8000518 <__udivmoddi4+0x2b4>
 8000408:	45a2      	cmp	sl, r4
 800040a:	f240 8085 	bls.w	8000518 <__udivmoddi4+0x2b4>
 800040e:	f1a9 0902 	sub.w	r9, r9, #2
 8000412:	4464      	add	r4, ip
 8000414:	eba4 040a 	sub.w	r4, r4, sl
 8000418:	fbb4 f0fe 	udiv	r0, r4, lr
 800041c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000420:	fb00 fa08 	mul.w	sl, r0, r8
 8000424:	b289      	uxth	r1, r1
 8000426:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800042a:	45a2      	cmp	sl, r4
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x1dc>
 800042e:	eb1c 0404 	adds.w	r4, ip, r4
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	d26b      	bcs.n	8000510 <__udivmoddi4+0x2ac>
 8000438:	45a2      	cmp	sl, r4
 800043a:	d969      	bls.n	8000510 <__udivmoddi4+0x2ac>
 800043c:	3802      	subs	r0, #2
 800043e:	4464      	add	r4, ip
 8000440:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000444:	fba0 8902 	umull	r8, r9, r0, r2
 8000448:	eba4 040a 	sub.w	r4, r4, sl
 800044c:	454c      	cmp	r4, r9
 800044e:	4641      	mov	r1, r8
 8000450:	46ce      	mov	lr, r9
 8000452:	d354      	bcc.n	80004fe <__udivmoddi4+0x29a>
 8000454:	d051      	beq.n	80004fa <__udivmoddi4+0x296>
 8000456:	2e00      	cmp	r6, #0
 8000458:	d069      	beq.n	800052e <__udivmoddi4+0x2ca>
 800045a:	1a5a      	subs	r2, r3, r1
 800045c:	eb64 040e 	sbc.w	r4, r4, lr
 8000460:	fa04 f505 	lsl.w	r5, r4, r5
 8000464:	fa22 f307 	lsr.w	r3, r2, r7
 8000468:	40fc      	lsrs	r4, r7
 800046a:	431d      	orrs	r5, r3
 800046c:	e9c6 5400 	strd	r5, r4, [r6]
 8000470:	2700      	movs	r7, #0
 8000472:	e747      	b.n	8000304 <__udivmoddi4+0xa0>
 8000474:	4095      	lsls	r5, r2
 8000476:	f1c2 0320 	rsb	r3, r2, #32
 800047a:	fa21 f003 	lsr.w	r0, r1, r3
 800047e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000482:	fbb0 f7f8 	udiv	r7, r0, r8
 8000486:	fa1f f985 	uxth.w	r9, r5
 800048a:	fb08 0017 	mls	r0, r8, r7, r0
 800048e:	fa24 f303 	lsr.w	r3, r4, r3
 8000492:	4091      	lsls	r1, r2
 8000494:	fb07 fc09 	mul.w	ip, r7, r9
 8000498:	430b      	orrs	r3, r1
 800049a:	0c19      	lsrs	r1, r3, #16
 800049c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a0:	458c      	cmp	ip, r1
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d907      	bls.n	80004b8 <__udivmoddi4+0x254>
 80004a8:	1869      	adds	r1, r5, r1
 80004aa:	f107 30ff 	add.w	r0, r7, #4294967295
 80004ae:	d231      	bcs.n	8000514 <__udivmoddi4+0x2b0>
 80004b0:	458c      	cmp	ip, r1
 80004b2:	d92f      	bls.n	8000514 <__udivmoddi4+0x2b0>
 80004b4:	3f02      	subs	r7, #2
 80004b6:	4429      	add	r1, r5
 80004b8:	eba1 010c 	sub.w	r1, r1, ip
 80004bc:	fbb1 f0f8 	udiv	r0, r1, r8
 80004c0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004c4:	fb00 fe09 	mul.w	lr, r0, r9
 80004c8:	b299      	uxth	r1, r3
 80004ca:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ce:	458e      	cmp	lr, r1
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x27e>
 80004d2:	1869      	adds	r1, r5, r1
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d218      	bcs.n	800050c <__udivmoddi4+0x2a8>
 80004da:	458e      	cmp	lr, r1
 80004dc:	d916      	bls.n	800050c <__udivmoddi4+0x2a8>
 80004de:	3802      	subs	r0, #2
 80004e0:	4429      	add	r1, r5
 80004e2:	eba1 010e 	sub.w	r1, r1, lr
 80004e6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ea:	e73a      	b.n	8000362 <__udivmoddi4+0xfe>
 80004ec:	4637      	mov	r7, r6
 80004ee:	4630      	mov	r0, r6
 80004f0:	e708      	b.n	8000304 <__udivmoddi4+0xa0>
 80004f2:	460f      	mov	r7, r1
 80004f4:	e6e6      	b.n	80002c4 <__udivmoddi4+0x60>
 80004f6:	4618      	mov	r0, r3
 80004f8:	e6fb      	b.n	80002f2 <__udivmoddi4+0x8e>
 80004fa:	4543      	cmp	r3, r8
 80004fc:	d2ab      	bcs.n	8000456 <__udivmoddi4+0x1f2>
 80004fe:	ebb8 0102 	subs.w	r1, r8, r2
 8000502:	eb69 020c 	sbc.w	r2, r9, ip
 8000506:	3801      	subs	r0, #1
 8000508:	4696      	mov	lr, r2
 800050a:	e7a4      	b.n	8000456 <__udivmoddi4+0x1f2>
 800050c:	4618      	mov	r0, r3
 800050e:	e7e8      	b.n	80004e2 <__udivmoddi4+0x27e>
 8000510:	4608      	mov	r0, r1
 8000512:	e795      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000514:	4607      	mov	r7, r0
 8000516:	e7cf      	b.n	80004b8 <__udivmoddi4+0x254>
 8000518:	4681      	mov	r9, r0
 800051a:	e77b      	b.n	8000414 <__udivmoddi4+0x1b0>
 800051c:	3802      	subs	r0, #2
 800051e:	442c      	add	r4, r5
 8000520:	e747      	b.n	80003b2 <__udivmoddi4+0x14e>
 8000522:	f1ae 0e02 	sub.w	lr, lr, #2
 8000526:	442b      	add	r3, r5
 8000528:	e72f      	b.n	800038a <__udivmoddi4+0x126>
 800052a:	4638      	mov	r0, r7
 800052c:	e707      	b.n	800033e <__udivmoddi4+0xda>
 800052e:	4637      	mov	r7, r6
 8000530:	e6e8      	b.n	8000304 <__udivmoddi4+0xa0>
 8000532:	bf00      	nop

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b0b4      	sub	sp, #208	; 0xd0
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fb11 	bl	8000b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f84b 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 f8f9 	bl	800073c <MX_GPIO_Init>
  MX_CAN1_Init();
 800054a:	f000 f895 	bl	8000678 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 800054e:	f000 f8cb 	bl	80006e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CAN_Filter_Init();
 8000552:	f000 f915 	bl	8000780 <CAN_Filter_Init>
  HAL_CAN_Start(&hcan1);
 8000556:	481d      	ldr	r0, [pc, #116]	; (80005cc <main+0x94>)
 8000558:	f000 fd64 	bl	8001024 <HAL_CAN_Start>
  HAL_Delay(2000);
 800055c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000560:	f000 fb62 	bl	8000c28 <HAL_Delay>
  HAL_UART_Transmit(&huart1,"CAN_MODULE\n",12,100);
 8000564:	2364      	movs	r3, #100	; 0x64
 8000566:	220c      	movs	r2, #12
 8000568:	4919      	ldr	r1, [pc, #100]	; (80005d0 <main+0x98>)
 800056a:	481a      	ldr	r0, [pc, #104]	; (80005d4 <main+0x9c>)
 800056c:	f002 f8bd 	bl	80026ea <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(CANGetFrame(&id, &len, buf))
 8000570:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8000574:	f107 01cb 	add.w	r1, r7, #203	; 0xcb
 8000578:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f91f 	bl	80007c0 <CANGetFrame>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d01b      	beq.n	80005c0 <main+0x88>
	  {
		  sprintf(tt,"ID:%d,LEN:%d",id, len);
 8000588:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800058c:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8000590:	4638      	mov	r0, r7
 8000592:	4911      	ldr	r1, [pc, #68]	; (80005d8 <main+0xa0>)
 8000594:	f002 fa46 	bl	8002a24 <siprintf>
		  HAL_UART_Transmit(&huart1,tt,strlen(tt),100);
 8000598:	463b      	mov	r3, r7
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fe42 	bl	8000224 <strlen>
 80005a0:	4603      	mov	r3, r0
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	4639      	mov	r1, r7
 80005a6:	2364      	movs	r3, #100	; 0x64
 80005a8:	480a      	ldr	r0, [pc, #40]	; (80005d4 <main+0x9c>)
 80005aa:	f002 f89e 	bl	80026ea <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1,buf,len,100);
 80005ae:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80005b8:	2364      	movs	r3, #100	; 0x64
 80005ba:	4806      	ldr	r0, [pc, #24]	; (80005d4 <main+0x9c>)
 80005bc:	f002 f895 	bl	80026ea <HAL_UART_Transmit>
	  }

	  HAL_Delay(1000);
 80005c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c4:	f000 fb30 	bl	8000c28 <HAL_Delay>
	  if(CANGetFrame(&id, &len, buf))
 80005c8:	e7d2      	b.n	8000570 <main+0x38>
 80005ca:	bf00      	nop
 80005cc:	200000dc 	.word	0x200000dc
 80005d0:	08003260 	.word	0x08003260
 80005d4:	20000098 	.word	0x20000098
 80005d8:	0800326c 	.word	0x0800326c

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	; 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0318 	add.w	r3, r7, #24
 80005e6:	2238      	movs	r2, #56	; 0x38
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fa12 	bl	8002a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005fe:	2301      	movs	r3, #1
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000608:	2301      	movs	r3, #1
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
 8000610:	2300      	movs	r3, #0
 8000612:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800061e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 8000624:	2300      	movs	r3, #0
 8000626:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0318 	add.w	r3, r7, #24
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fb03 	bl	8001c38 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000638:	f000 f902 	bl	8000840 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f001 fe05 	bl	8002264 <HAL_RCC_ClockConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000660:	f000 f8ee 	bl	8000840 <Error_Handler>
  }
  /** Configure the Systick interrupt time
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8000664:	4b03      	ldr	r3, [pc, #12]	; (8000674 <SystemClock_Config+0x98>)
 8000666:	2201      	movs	r2, #1
 8000668:	601a      	str	r2, [r3, #0]
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	; 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	42420070 	.word	0x42420070

08000678 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_CAN1_Init+0x68>)
 800067e:	4a19      	ldr	r2, [pc, #100]	; (80006e4 <MX_CAN1_Init+0x6c>)
 8000680:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <MX_CAN1_Init+0x68>)
 8000684:	2205      	movs	r2, #5
 8000686:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_CAN1_Init+0x68>)
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_CAN1_Init+0x68>)
 8000690:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000694:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000696:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <MX_CAN1_Init+0x68>)
 8000698:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800069c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_CAN1_Init+0x68>)
 80006a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80006a4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_CAN1_Init+0x68>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	; (80006e0 <MX_CAN1_Init+0x68>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <MX_CAN1_Init+0x68>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006b8:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_CAN1_Init+0x68>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <MX_CAN1_Init+0x68>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_CAN1_Init+0x68>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_CAN1_Init+0x68>)
 80006cc:	f000 face 	bl	8000c6c <HAL_CAN_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80006d6:	f000 f8b3 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200000dc 	.word	0x200000dc
 80006e4:	40006400 	.word	0x40006400

080006e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_USART1_UART_Init+0x4c>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_USART1_UART_Init+0x50>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_USART1_UART_Init+0x4c>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_USART1_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_USART1_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_USART1_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_USART1_UART_Init+0x4c>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_USART1_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_USART1_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_USART1_UART_Init+0x4c>)
 8000720:	f001 ff96 	bl	8002650 <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800072a:	f000 f889 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000098 	.word	0x20000098
 8000738:	40013800 	.word	0x40013800

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_GPIO_Init+0x40>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4a0d      	ldr	r2, [pc, #52]	; (800077c <MX_GPIO_Init+0x40>)
 8000748:	f043 0320 	orr.w	r3, r3, #32
 800074c:	6193      	str	r3, [r2, #24]
 800074e:	4b0b      	ldr	r3, [pc, #44]	; (800077c <MX_GPIO_Init+0x40>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f003 0320 	and.w	r3, r3, #32
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <MX_GPIO_Init+0x40>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	4a07      	ldr	r2, [pc, #28]	; (800077c <MX_GPIO_Init+0x40>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6193      	str	r3, [r2, #24]
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <MX_GPIO_Init+0x40>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	40021000 	.word	0x40021000

08000780 <CAN_Filter_Init>:

/* USER CODE BEGIN 4 */
void CAN_Filter_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0

  CAN_FilterTypeDef canFilterConfig;
	canFilterConfig.FilterBank=1;
 8000786:	2301      	movs	r3, #1
 8000788:	617b      	str	r3, [r7, #20]
	canFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
	canFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800078e:	2301      	movs	r3, #1
 8000790:	61fb      	str	r3, [r7, #28]
	canFilterConfig.FilterIdHigh = 0x0000;
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
	canFilterConfig.FilterIdLow = 0x0000;
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
	canFilterConfig.FilterMaskIdHigh = 0x0000 << 5;
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
	canFilterConfig.FilterMaskIdLow = 0x0000;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
	canFilterConfig.FilterFIFOAssignment = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
	canFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 80007a6:	2301      	movs	r3, #1
 80007a8:	623b      	str	r3, [r7, #32]

	HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig);
 80007aa:	463b      	mov	r3, r7
 80007ac:	4619      	mov	r1, r3
 80007ae:	4803      	ldr	r0, [pc, #12]	; (80007bc <CAN_Filter_Init+0x3c>)
 80007b0:	f000 fb58 	bl	8000e64 <HAL_CAN_ConfigFilter>

}
 80007b4:	bf00      	nop
 80007b6:	3728      	adds	r7, #40	; 0x28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000dc 	.word	0x200000dc

080007c0 <CANGetFrame>:
	return false;
}


bool CANGetFrame(unsigned long* id, unsigned char* len, unsigned char *buf)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	60b9      	str	r1, [r7, #8]
 80007ca:	607a      	str	r2, [r7, #4]
	 if(HAL_CAN_GetRxFifoFillLevel(&hcan1,CAN_RX_FIFO0)>0)
 80007cc:	2100      	movs	r1, #0
 80007ce:	481a      	ldr	r0, [pc, #104]	; (8000838 <CANGetFrame+0x78>)
 80007d0:	f000 fd7d 	bl	80012ce <HAL_CAN_GetRxFifoFillLevel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d010      	beq.n	80007fc <CANGetFrame+0x3c>
	 {
		 HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, buf);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a17      	ldr	r2, [pc, #92]	; (800083c <CANGetFrame+0x7c>)
 80007de:	2100      	movs	r1, #0
 80007e0:	4815      	ldr	r0, [pc, #84]	; (8000838 <CANGetFrame+0x78>)
 80007e2:	f000 fc63 	bl	80010ac <HAL_CAN_GetRxMessage>
		 *len=RxHeader.DLC;
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <CANGetFrame+0x7c>)
 80007e8:	691b      	ldr	r3, [r3, #16]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	701a      	strb	r2, [r3, #0]
		 *id=RxHeader.ExtId;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <CANGetFrame+0x7c>)
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	601a      	str	r2, [r3, #0]
		 return true;
 80007f8:	2301      	movs	r3, #1
 80007fa:	e018      	b.n	800082e <CANGetFrame+0x6e>
	 }
	 else if(HAL_CAN_GetRxFifoFillLevel(&hcan1,CAN_RX_FIFO1)>0)
 80007fc:	2101      	movs	r1, #1
 80007fe:	480e      	ldr	r0, [pc, #56]	; (8000838 <CANGetFrame+0x78>)
 8000800:	f000 fd65 	bl	80012ce <HAL_CAN_GetRxFifoFillLevel>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d010      	beq.n	800082c <CANGetFrame+0x6c>
	 {
		 HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, buf);
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4a0b      	ldr	r2, [pc, #44]	; (800083c <CANGetFrame+0x7c>)
 800080e:	2100      	movs	r1, #0
 8000810:	4809      	ldr	r0, [pc, #36]	; (8000838 <CANGetFrame+0x78>)
 8000812:	f000 fc4b 	bl	80010ac <HAL_CAN_GetRxMessage>
		 *len=RxHeader.DLC;
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <CANGetFrame+0x7c>)
 8000818:	691b      	ldr	r3, [r3, #16]
 800081a:	b2da      	uxtb	r2, r3
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	701a      	strb	r2, [r3, #0]
		 *id=RxHeader.ExtId;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <CANGetFrame+0x7c>)
 8000822:	685a      	ldr	r2, [r3, #4]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	601a      	str	r2, [r3, #0]
		 return true;
 8000828:	2301      	movs	r3, #1
 800082a:	e000      	b.n	800082e <CANGetFrame+0x6e>
	 }

	 return false;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	200000dc 	.word	0x200000dc
 800083c:	2000011c 	.word	0x2000011c

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <HAL_MspInit+0x5c>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <HAL_MspInit+0x5c>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6193      	str	r3, [r2, #24]
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_MspInit+0x5c>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_MspInit+0x5c>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <HAL_MspInit+0x5c>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	61d3      	str	r3, [r2, #28]
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <HAL_MspInit+0x5c>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <HAL_MspInit+0x60>)
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <HAL_MspInit+0x60>)
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	40021000 	.word	0x40021000
 80008ac:	40010000 	.word	0x40010000

080008b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a28      	ldr	r2, [pc, #160]	; (800096c <HAL_CAN_MspInit+0xbc>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d149      	bne.n	8000964 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008d0:	4b27      	ldr	r3, [pc, #156]	; (8000970 <HAL_CAN_MspInit+0xc0>)
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	4a26      	ldr	r2, [pc, #152]	; (8000970 <HAL_CAN_MspInit+0xc0>)
 80008d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008da:	61d3      	str	r3, [r2, #28]
 80008dc:	4b24      	ldr	r3, [pc, #144]	; (8000970 <HAL_CAN_MspInit+0xc0>)
 80008de:	69db      	ldr	r3, [r3, #28]
 80008e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b21      	ldr	r3, [pc, #132]	; (8000970 <HAL_CAN_MspInit+0xc0>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a20      	ldr	r2, [pc, #128]	; (8000970 <HAL_CAN_MspInit+0xc0>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <HAL_CAN_MspInit+0xc0>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000900:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000904:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 0310 	add.w	r3, r7, #16
 8000912:	4619      	mov	r1, r3
 8000914:	4817      	ldr	r0, [pc, #92]	; (8000974 <HAL_CAN_MspInit+0xc4>)
 8000916:	f001 f835 	bl	8001984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800091a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800091e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4619      	mov	r1, r3
 800092e:	4811      	ldr	r0, [pc, #68]	; (8000974 <HAL_CAN_MspInit+0xc4>)
 8000930:	f001 f828 	bl	8001984 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2100      	movs	r1, #0
 8000938:	2013      	movs	r0, #19
 800093a:	f000 ffec 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800093e:	2013      	movs	r0, #19
 8000940:	f001 f805 	bl	800194e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	2014      	movs	r0, #20
 800094a:	f000 ffe4 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800094e:	2014      	movs	r0, #20
 8000950:	f000 fffd 	bl	800194e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2100      	movs	r1, #0
 8000958:	2015      	movs	r0, #21
 800095a:	f000 ffdc 	bl	8001916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800095e:	2015      	movs	r0, #21
 8000960:	f000 fff5 	bl	800194e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000964:	bf00      	nop
 8000966:	3720      	adds	r7, #32
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40006400 	.word	0x40006400
 8000970:	40021000 	.word	0x40021000
 8000974:	40010800 	.word	0x40010800

08000978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a1c      	ldr	r2, [pc, #112]	; (8000a04 <HAL_UART_MspInit+0x8c>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d131      	bne.n	80009fc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <HAL_UART_MspInit+0x90>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	4a1a      	ldr	r2, [pc, #104]	; (8000a08 <HAL_UART_MspInit+0x90>)
 800099e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a2:	6193      	str	r3, [r2, #24]
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_UART_MspInit+0x90>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_UART_MspInit+0x90>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a14      	ldr	r2, [pc, #80]	; (8000a08 <HAL_UART_MspInit+0x90>)
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_UART_MspInit+0x90>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ce:	2302      	movs	r3, #2
 80009d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d6:	f107 0310 	add.w	r3, r7, #16
 80009da:	4619      	mov	r1, r3
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <HAL_UART_MspInit+0x94>)
 80009de:	f000 ffd1 	bl	8001984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	4619      	mov	r1, r3
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <HAL_UART_MspInit+0x94>)
 80009f8:	f000 ffc4 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009fc:	bf00      	nop
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40013800 	.word	0x40013800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40010800 	.word	0x40010800

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <HardFault_Handler+0x4>

08000a22 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <MemManage_Handler+0x4>

08000a28 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <BusFault_Handler+0x4>

08000a2e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <UsageFault_Handler+0x4>

08000a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr

08000a40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr

08000a4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5c:	f000 f8c8 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <CAN1_TX_IRQHandler+0x10>)
 8000a6a:	f000 fc57 	bl	800131c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200000dc 	.word	0x200000dc

08000a78 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a7c:	4802      	ldr	r0, [pc, #8]	; (8000a88 <CAN1_RX0_IRQHandler+0x10>)
 8000a7e:	f000 fc4d 	bl	800131c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000dc 	.word	0x200000dc

08000a8c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <CAN1_RX1_IRQHandler+0x10>)
 8000a92:	f000 fc43 	bl	800131c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000dc 	.word	0x200000dc

08000aa0 <_sbrk>:
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b086      	sub	sp, #24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
 8000aa8:	4a14      	ldr	r2, [pc, #80]	; (8000afc <_sbrk+0x5c>)
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <_sbrk+0x60>)
 8000aac:	1ad3      	subs	r3, r2, r3
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <_sbrk+0x64>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d102      	bne.n	8000ac2 <_sbrk+0x22>
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <_sbrk+0x64>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <_sbrk+0x68>)
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <_sbrk+0x64>)
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d207      	bcs.n	8000ae0 <_sbrk+0x40>
 8000ad0:	f001 ff76 	bl	80029c0 <__errno>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	6013      	str	r3, [r2, #0]
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
 8000ade:	e009      	b.n	8000af4 <_sbrk+0x54>
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <_sbrk+0x64>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <_sbrk+0x64>)
 8000af0:	6013      	str	r3, [r2, #0]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	4618      	mov	r0, r3
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20010000 	.word	0x20010000
 8000b00:	00000400 	.word	0x00000400
 8000b04:	2000008c 	.word	0x2000008c
 8000b08:	20000140 	.word	0x20000140

08000b0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr

08000b18 <Reset_Handler>:
 8000b18:	2100      	movs	r1, #0
 8000b1a:	e003      	b.n	8000b24 <LoopCopyDataInit>

08000b1c <CopyDataInit>:
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <LoopFillZerobss+0x14>)
 8000b1e:	585b      	ldr	r3, [r3, r1]
 8000b20:	5043      	str	r3, [r0, r1]
 8000b22:	3104      	adds	r1, #4

08000b24 <LoopCopyDataInit>:
 8000b24:	480a      	ldr	r0, [pc, #40]	; (8000b50 <LoopFillZerobss+0x18>)
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <LoopFillZerobss+0x1c>)
 8000b28:	1842      	adds	r2, r0, r1
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d3f6      	bcc.n	8000b1c <CopyDataInit>
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <LoopFillZerobss+0x20>)
 8000b30:	e002      	b.n	8000b38 <LoopFillZerobss>

08000b32 <FillZerobss>:
 8000b32:	2300      	movs	r3, #0
 8000b34:	f842 3b04 	str.w	r3, [r2], #4

08000b38 <LoopFillZerobss>:
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <LoopFillZerobss+0x24>)
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d3f9      	bcc.n	8000b32 <FillZerobss>
 8000b3e:	f7ff ffe5 	bl	8000b0c <SystemInit>
 8000b42:	f001 ff43 	bl	80029cc <__libc_init_array>
 8000b46:	f7ff fcf7 	bl	8000538 <main>
 8000b4a:	4770      	bx	lr
 8000b4c:	080032f8 	.word	0x080032f8
 8000b50:	20000000 	.word	0x20000000
 8000b54:	20000070 	.word	0x20000070
 8000b58:	20000070 	.word	0x20000070
 8000b5c:	20000140 	.word	0x20000140

08000b60 <ADC1_2_IRQHandler>:
 8000b60:	e7fe      	b.n	8000b60 <ADC1_2_IRQHandler>
	...

08000b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_Init+0x28>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_Init+0x28>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 fec3 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 f808 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fe64 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40022000 	.word	0x40022000

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fedb 	bl	800196a <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 fea3 	bl	8001916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <HAL_IncTick+0x1c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_IncTick+0x20>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a03      	ldr	r2, [pc, #12]	; (8000c10 <HAL_IncTick+0x20>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000138 	.word	0x20000138

08000c14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b02      	ldr	r3, [pc, #8]	; (8000c24 <HAL_GetTick+0x10>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	20000138 	.word	0x20000138

08000c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c30:	f7ff fff0 	bl	8000c14 <HAL_GetTick>
 8000c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c40:	d005      	beq.n	8000c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_Delay+0x40>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c4e:	bf00      	nop
 8000c50:	f7ff ffe0 	bl	8000c14 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d8f7      	bhi.n	8000c50 <HAL_Delay+0x28>
  {
  }
}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20000008 	.word	0x20000008

08000c6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e0ed      	b.n	8000e5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d102      	bne.n	8000c90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff fe10 	bl	80008b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f022 0202 	bic.w	r2, r2, #2
 8000c9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ca0:	f7ff ffb8 	bl	8000c14 <HAL_GetTick>
 8000ca4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ca6:	e012      	b.n	8000cce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ca8:	f7ff ffb4 	bl	8000c14 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	2b0a      	cmp	r3, #10
 8000cb4:	d90b      	bls.n	8000cce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2205      	movs	r2, #5
 8000cc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e0c5      	b.n	8000e5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f003 0302 	and.w	r3, r3, #2
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1e5      	bne.n	8000ca8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f042 0201 	orr.w	r2, r2, #1
 8000cea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cec:	f7ff ff92 	bl	8000c14 <HAL_GetTick>
 8000cf0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cf2:	e012      	b.n	8000d1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cf4:	f7ff ff8e 	bl	8000c14 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b0a      	cmp	r3, #10
 8000d00:	d90b      	bls.n	8000d1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2205      	movs	r2, #5
 8000d12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e09f      	b.n	8000e5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d0e5      	beq.n	8000cf4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	7e1b      	ldrb	r3, [r3, #24]
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d108      	bne.n	8000d42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	e007      	b.n	8000d52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	7e5b      	ldrb	r3, [r3, #25]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d108      	bne.n	8000d6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	e007      	b.n	8000d7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	7e9b      	ldrb	r3, [r3, #26]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d108      	bne.n	8000d96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 0220 	orr.w	r2, r2, #32
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	e007      	b.n	8000da6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 0220 	bic.w	r2, r2, #32
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7edb      	ldrb	r3, [r3, #27]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d108      	bne.n	8000dc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f022 0210 	bic.w	r2, r2, #16
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	e007      	b.n	8000dd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f042 0210 	orr.w	r2, r2, #16
 8000dce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7f1b      	ldrb	r3, [r3, #28]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d108      	bne.n	8000dea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0208 	orr.w	r2, r2, #8
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	e007      	b.n	8000dfa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f022 0208 	bic.w	r2, r2, #8
 8000df8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7f5b      	ldrb	r3, [r3, #29]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d108      	bne.n	8000e14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f042 0204 	orr.w	r2, r2, #4
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	e007      	b.n	8000e24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 0204 	bic.w	r2, r2, #4
 8000e22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689a      	ldr	r2, [r3, #8]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	691b      	ldr	r3, [r3, #16]
 8000e32:	431a      	orrs	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	ea42 0103 	orr.w	r1, r2, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	1e5a      	subs	r2, r3, #1
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	430a      	orrs	r2, r1
 8000e48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2201      	movs	r2, #1
 8000e54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e7a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e7c:	7cfb      	ldrb	r3, [r7, #19]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d003      	beq.n	8000e8a <HAL_CAN_ConfigFilter+0x26>
 8000e82:	7cfb      	ldrb	r3, [r7, #19]
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	f040 80be 	bne.w	8001006 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000e8a:	4b65      	ldr	r3, [pc, #404]	; (8001020 <HAL_CAN_ConfigFilter+0x1bc>)
 8000e8c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e94:	f043 0201 	orr.w	r2, r3, #1
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ea4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	f003 031f 	and.w	r3, r3, #31
 8000eca:	2201      	movs	r2, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	401a      	ands	r2, r3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	69db      	ldr	r3, [r3, #28]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d123      	bne.n	8000f34 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f0a:	683a      	ldr	r2, [r7, #0]
 8000f0c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f0e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	3248      	adds	r2, #72	; 0x48
 8000f14:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f28:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f2a:	6979      	ldr	r1, [r7, #20]
 8000f2c:	3348      	adds	r3, #72	; 0x48
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	440b      	add	r3, r1
 8000f32:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	69db      	ldr	r3, [r3, #28]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d122      	bne.n	8000f82 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	431a      	orrs	r2, r3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f5c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3248      	adds	r2, #72	; 0x48
 8000f62:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f76:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f78:	6979      	ldr	r1, [r7, #20]
 8000f7a:	3348      	adds	r3, #72	; 0x48
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	440b      	add	r3, r1
 8000f80:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	699b      	ldr	r3, [r3, #24]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d109      	bne.n	8000f9e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	401a      	ands	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f9c:	e007      	b.n	8000fae <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d109      	bne.n	8000fca <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000fc8:	e007      	b.n	8000fda <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d107      	bne.n	8000ff2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	431a      	orrs	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ff8:	f023 0201 	bic.w	r2, r3, #1
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001002:	2300      	movs	r3, #0
 8001004:	e006      	b.n	8001014 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
  }
}
 8001014:	4618      	mov	r0, r3
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	40006400 	.word	0x40006400

08001024 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b01      	cmp	r3, #1
 8001036:	d12e      	bne.n	8001096 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2202      	movs	r2, #2
 800103c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f022 0201 	bic.w	r2, r2, #1
 800104e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001050:	f7ff fde0 	bl	8000c14 <HAL_GetTick>
 8001054:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001056:	e012      	b.n	800107e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001058:	f7ff fddc 	bl	8000c14 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	2b0a      	cmp	r3, #10
 8001064:	d90b      	bls.n	800107e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2205      	movs	r2, #5
 8001076:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e012      	b.n	80010a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1e5      	bne.n	8001058 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001092:	2300      	movs	r3, #0
 8001094:	e006      	b.n	80010a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
  }
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80010ac:	b480      	push	{r7}
 80010ae:	b087      	sub	sp, #28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010c2:	7dfb      	ldrb	r3, [r7, #23]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d003      	beq.n	80010d0 <HAL_CAN_GetRxMessage+0x24>
 80010c8:	7dfb      	ldrb	r3, [r7, #23]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	f040 80f3 	bne.w	80012b6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10e      	bne.n	80010f4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d116      	bne.n	8001112 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010f0:	2301      	movs	r3, #1
 80010f2:	e0e7      	b.n	80012c4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d107      	bne.n	8001112 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e0d8      	b.n	80012c4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	331b      	adds	r3, #27
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	4413      	add	r3, r2
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f003 0204 	and.w	r2, r3, #4
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d10c      	bne.n	800114a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	331b      	adds	r3, #27
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	4413      	add	r3, r2
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	0d5b      	lsrs	r3, r3, #21
 8001140:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	e00b      	b.n	8001162 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	331b      	adds	r3, #27
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	4413      	add	r3, r2
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	08db      	lsrs	r3, r3, #3
 800115a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	331b      	adds	r3, #27
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	4413      	add	r3, r2
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0202 	and.w	r2, r3, #2
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	331b      	adds	r3, #27
 8001180:	011b      	lsls	r3, r3, #4
 8001182:	4413      	add	r3, r2
 8001184:	3304      	adds	r3, #4
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 020f 	and.w	r2, r3, #15
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	331b      	adds	r3, #27
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	4413      	add	r3, r2
 800119c:	3304      	adds	r3, #4
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	331b      	adds	r3, #27
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	4413      	add	r3, r2
 80011b4:	3304      	adds	r3, #4
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	0c1b      	lsrs	r3, r3, #16
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	011b      	lsls	r3, r3, #4
 80011c8:	4413      	add	r3, r2
 80011ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	4413      	add	r3, r2
 80011e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	0a1a      	lsrs	r2, r3, #8
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	3301      	adds	r3, #1
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	4413      	add	r3, r2
 80011fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	0c1a      	lsrs	r2, r3, #16
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	3302      	adds	r3, #2
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	4413      	add	r3, r2
 8001214:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	0e1a      	lsrs	r2, r3, #24
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	3303      	adds	r3, #3
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	4413      	add	r3, r2
 800122e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	3304      	adds	r3, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	011b      	lsls	r3, r3, #4
 8001244:	4413      	add	r3, r2
 8001246:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	0a1a      	lsrs	r2, r3, #8
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	3305      	adds	r3, #5
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	4413      	add	r3, r2
 8001260:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	0c1a      	lsrs	r2, r3, #16
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	3306      	adds	r3, #6
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	4413      	add	r3, r2
 800127a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	0e1a      	lsrs	r2, r3, #24
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	3307      	adds	r3, #7
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d108      	bne.n	80012a2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f042 0220 	orr.w	r2, r2, #32
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	e007      	b.n	80012b2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	691a      	ldr	r2, [r3, #16]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 0220 	orr.w	r2, r2, #32
 80012b0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e006      	b.n	80012c4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
  }
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	371c      	adds	r7, #28
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b085      	sub	sp, #20
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012e2:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012e4:	7afb      	ldrb	r3, [r7, #11]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d002      	beq.n	80012f0 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80012ea:	7afb      	ldrb	r3, [r7, #11]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d10f      	bne.n	8001310 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d106      	bne.n	8001304 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	e005      	b.n	8001310 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	691b      	ldr	r3, [r3, #16]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001310:	68fb      	ldr	r3, [r7, #12]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d07c      	beq.n	800145c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d023      	beq.n	80013b4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2201      	movs	r2, #1
 8001372:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f97d 	bl	800167e <HAL_CAN_TxMailbox0CompleteCallback>
 8001384:	e016      	b.n	80013b4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	f003 0304 	and.w	r3, r3, #4
 800138c:	2b00      	cmp	r3, #0
 800138e:	d004      	beq.n	800139a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
 8001398:	e00c      	b.n	80013b4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d004      	beq.n	80013ae <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013aa:	627b      	str	r3, [r7, #36]	; 0x24
 80013ac:	e002      	b.n	80013b4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f000 f980 	bl	80016b4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d024      	beq.n	8001408 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f000 f95c 	bl	8001690 <HAL_CAN_TxMailbox1CompleteCallback>
 80013d8:	e016      	b.n	8001408 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
 80013ec:	e00c      	b.n	8001408 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d004      	beq.n	8001402 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001400:	e002      	b.n	8001408 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f95f 	bl	80016c6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d024      	beq.n	800145c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800141a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 f93b 	bl	80016a2 <HAL_CAN_TxMailbox2CompleteCallback>
 800142c:	e016      	b.n	800145c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d004      	beq.n	8001442 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
 8001440:	e00c      	b.n	800145c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d004      	beq.n	8001456 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800144c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
 8001454:	e002      	b.n	800145c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f93e 	bl	80016d8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00c      	beq.n	8001480 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	2b00      	cmp	r3, #0
 800146e:	d007      	beq.n	8001480 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001476:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2210      	movs	r2, #16
 800147e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00b      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	2b00      	cmp	r3, #0
 8001492:	d006      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2208      	movs	r2, #8
 800149a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 f92d 	bl	80016fc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d009      	beq.n	80014c0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f915 	bl	80016ea <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00c      	beq.n	80014e4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	f003 0310 	and.w	r3, r3, #16
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d007      	beq.n	80014e4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014da:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2210      	movs	r2, #16
 80014e2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014e4:	6a3b      	ldr	r3, [r7, #32]
 80014e6:	f003 0320 	and.w	r3, r3, #32
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00b      	beq.n	8001506 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	f003 0308 	and.w	r3, r3, #8
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d006      	beq.n	8001506 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2208      	movs	r2, #8
 80014fe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f90d 	bl	8001720 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001506:	6a3b      	ldr	r3, [r7, #32]
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	2b00      	cmp	r3, #0
 800150e:	d009      	beq.n	8001524 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f8f5 	bl	800170e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00b      	beq.n	8001546 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	f003 0310 	and.w	r3, r3, #16
 8001534:	2b00      	cmp	r3, #0
 8001536:	d006      	beq.n	8001546 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2210      	movs	r2, #16
 800153e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f8f6 	bl	8001732 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001546:	6a3b      	ldr	r3, [r7, #32]
 8001548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00b      	beq.n	8001568 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	f003 0308 	and.w	r3, r3, #8
 8001556:	2b00      	cmp	r3, #0
 8001558:	d006      	beq.n	8001568 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2208      	movs	r2, #8
 8001560:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f000 f8ee 	bl	8001744 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001568:	6a3b      	ldr	r3, [r7, #32]
 800156a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d075      	beq.n	800165e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d06c      	beq.n	8001656 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001582:	2b00      	cmp	r3, #0
 8001584:	d008      	beq.n	8001598 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d008      	beq.n	80015b4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	f043 0302 	orr.w	r3, r3, #2
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d008      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	f043 0304 	orr.w	r3, r3, #4
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015d0:	6a3b      	ldr	r3, [r7, #32]
 80015d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d03d      	beq.n	8001656 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d038      	beq.n	8001656 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015ea:	2b30      	cmp	r3, #48	; 0x30
 80015ec:	d017      	beq.n	800161e <HAL_CAN_IRQHandler+0x302>
 80015ee:	2b30      	cmp	r3, #48	; 0x30
 80015f0:	d804      	bhi.n	80015fc <HAL_CAN_IRQHandler+0x2e0>
 80015f2:	2b10      	cmp	r3, #16
 80015f4:	d009      	beq.n	800160a <HAL_CAN_IRQHandler+0x2ee>
 80015f6:	2b20      	cmp	r3, #32
 80015f8:	d00c      	beq.n	8001614 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80015fa:	e024      	b.n	8001646 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80015fc:	2b50      	cmp	r3, #80	; 0x50
 80015fe:	d018      	beq.n	8001632 <HAL_CAN_IRQHandler+0x316>
 8001600:	2b60      	cmp	r3, #96	; 0x60
 8001602:	d01b      	beq.n	800163c <HAL_CAN_IRQHandler+0x320>
 8001604:	2b40      	cmp	r3, #64	; 0x40
 8001606:	d00f      	beq.n	8001628 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001608:	e01d      	b.n	8001646 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	f043 0308 	orr.w	r3, r3, #8
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001612:	e018      	b.n	8001646 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	f043 0310 	orr.w	r3, r3, #16
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800161c:	e013      	b.n	8001646 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	f043 0320 	orr.w	r3, r3, #32
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001626:	e00e      	b.n	8001646 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001630:	e009      	b.n	8001646 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800163a:	e004      	b.n	8001646 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001644:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	699a      	ldr	r2, [r3, #24]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001654:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2204      	movs	r2, #4
 800165c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	2b00      	cmp	r3, #0
 8001662:	d008      	beq.n	8001676 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 f870 	bl	8001756 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001676:	bf00      	nop
 8001678:	3728      	adds	r7, #40	; 0x28
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr

080016c6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr

080016ea <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr

0800170e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800170e:	b480      	push	{r7}
 8001710:	b083      	sub	sp, #12
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr

08001732 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr

08001744 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001784:	4013      	ands	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179a:	4a04      	ldr	r2, [pc, #16]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <__NVIC_GetPriorityGrouping+0x18>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	f003 0307 	and.w	r3, r3, #7
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db0b      	blt.n	80017f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	4906      	ldr	r1, [pc, #24]	; (8001800 <__NVIC_EnableIRQ+0x34>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2001      	movs	r0, #1
 80017ee:	fa00 f202 	lsl.w	r2, r0, r2
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db0a      	blt.n	800182e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <__NVIC_SetPriority+0x4c>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	440b      	add	r3, r1
 8001828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800182c:	e00a      	b.n	8001844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <__NVIC_SetPriority+0x50>)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3b04      	subs	r3, #4
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	440b      	add	r3, r1
 8001842:	761a      	strb	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f1c3 0307 	rsb	r3, r3, #7
 8001872:	2b04      	cmp	r3, #4
 8001874:	bf28      	it	cs
 8001876:	2304      	movcs	r3, #4
 8001878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3304      	adds	r3, #4
 800187e:	2b06      	cmp	r3, #6
 8001880:	d902      	bls.n	8001888 <NVIC_EncodePriority+0x30>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3b03      	subs	r3, #3
 8001886:	e000      	b.n	800188a <NVIC_EncodePriority+0x32>
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43da      	mvns	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43d9      	mvns	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	4313      	orrs	r3, r2
         );
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018cc:	d301      	bcc.n	80018d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00f      	b.n	80018f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <SysTick_Config+0x40>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018da:	210f      	movs	r1, #15
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f7ff ff90 	bl	8001804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <SysTick_Config+0x40>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ea:	4b04      	ldr	r3, [pc, #16]	; (80018fc <SysTick_Config+0x40>)
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010

08001900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff2d 	bl	8001768 <__NVIC_SetPriorityGrouping>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001928:	f7ff ff42 	bl	80017b0 <__NVIC_GetPriorityGrouping>
 800192c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f7ff ff90 	bl	8001858 <NVIC_EncodePriority>
 8001938:	4602      	mov	r2, r0
 800193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff5f 	bl	8001804 <__NVIC_SetPriority>
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff35 	bl	80017cc <__NVIC_EnableIRQ>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffa2 	bl	80018bc <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b08b      	sub	sp, #44	; 0x2c
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001996:	e127      	b.n	8001be8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001998:	2201      	movs	r2, #1
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	f040 8116 	bne.w	8001be2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b12      	cmp	r3, #18
 80019bc:	d034      	beq.n	8001a28 <HAL_GPIO_Init+0xa4>
 80019be:	2b12      	cmp	r3, #18
 80019c0:	d80d      	bhi.n	80019de <HAL_GPIO_Init+0x5a>
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d02b      	beq.n	8001a1e <HAL_GPIO_Init+0x9a>
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d804      	bhi.n	80019d4 <HAL_GPIO_Init+0x50>
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d031      	beq.n	8001a32 <HAL_GPIO_Init+0xae>
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d01c      	beq.n	8001a0c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019d2:	e048      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d043      	beq.n	8001a60 <HAL_GPIO_Init+0xdc>
 80019d8:	2b11      	cmp	r3, #17
 80019da:	d01b      	beq.n	8001a14 <HAL_GPIO_Init+0x90>
          break;
 80019dc:	e043      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019de:	4a89      	ldr	r2, [pc, #548]	; (8001c04 <HAL_GPIO_Init+0x280>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d026      	beq.n	8001a32 <HAL_GPIO_Init+0xae>
 80019e4:	4a87      	ldr	r2, [pc, #540]	; (8001c04 <HAL_GPIO_Init+0x280>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d806      	bhi.n	80019f8 <HAL_GPIO_Init+0x74>
 80019ea:	4a87      	ldr	r2, [pc, #540]	; (8001c08 <HAL_GPIO_Init+0x284>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d020      	beq.n	8001a32 <HAL_GPIO_Init+0xae>
 80019f0:	4a86      	ldr	r2, [pc, #536]	; (8001c0c <HAL_GPIO_Init+0x288>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d01d      	beq.n	8001a32 <HAL_GPIO_Init+0xae>
          break;
 80019f6:	e036      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019f8:	4a85      	ldr	r2, [pc, #532]	; (8001c10 <HAL_GPIO_Init+0x28c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d019      	beq.n	8001a32 <HAL_GPIO_Init+0xae>
 80019fe:	4a85      	ldr	r2, [pc, #532]	; (8001c14 <HAL_GPIO_Init+0x290>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d016      	beq.n	8001a32 <HAL_GPIO_Init+0xae>
 8001a04:	4a84      	ldr	r2, [pc, #528]	; (8001c18 <HAL_GPIO_Init+0x294>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d013      	beq.n	8001a32 <HAL_GPIO_Init+0xae>
          break;
 8001a0a:	e02c      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	623b      	str	r3, [r7, #32]
          break;
 8001a12:	e028      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	623b      	str	r3, [r7, #32]
          break;
 8001a1c:	e023      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	3308      	adds	r3, #8
 8001a24:	623b      	str	r3, [r7, #32]
          break;
 8001a26:	e01e      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	330c      	adds	r3, #12
 8001a2e:	623b      	str	r3, [r7, #32]
          break;
 8001a30:	e019      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d102      	bne.n	8001a40 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	623b      	str	r3, [r7, #32]
          break;
 8001a3e:	e012      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d105      	bne.n	8001a54 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a48:	2308      	movs	r3, #8
 8001a4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	611a      	str	r2, [r3, #16]
          break;
 8001a52:	e008      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a54:	2308      	movs	r3, #8
 8001a56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69fa      	ldr	r2, [r7, #28]
 8001a5c:	615a      	str	r2, [r3, #20]
          break;
 8001a5e:	e002      	b.n	8001a66 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a60:	2300      	movs	r3, #0
 8001a62:	623b      	str	r3, [r7, #32]
          break;
 8001a64:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	2bff      	cmp	r3, #255	; 0xff
 8001a6a:	d801      	bhi.n	8001a70 <HAL_GPIO_Init+0xec>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	e001      	b.n	8001a74 <HAL_GPIO_Init+0xf0>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3304      	adds	r3, #4
 8001a74:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	2bff      	cmp	r3, #255	; 0xff
 8001a7a:	d802      	bhi.n	8001a82 <HAL_GPIO_Init+0xfe>
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_Init+0x104>
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	3b08      	subs	r3, #8
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	210f      	movs	r1, #15
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	401a      	ands	r2, r3
 8001a9a:	6a39      	ldr	r1, [r7, #32]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 8096 	beq.w	8001be2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ab6:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <HAL_GPIO_Init+0x298>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <HAL_GPIO_Init+0x298>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6193      	str	r3, [r2, #24]
 8001ac2:	4b56      	ldr	r3, [pc, #344]	; (8001c1c <HAL_GPIO_Init+0x298>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ace:	4a54      	ldr	r2, [pc, #336]	; (8001c20 <HAL_GPIO_Init+0x29c>)
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	089b      	lsrs	r3, r3, #2
 8001ad4:	3302      	adds	r3, #2
 8001ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ada:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	68fa      	ldr	r2, [r7, #12]
 8001aee:	4013      	ands	r3, r2
 8001af0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4b      	ldr	r2, [pc, #300]	; (8001c24 <HAL_GPIO_Init+0x2a0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d013      	beq.n	8001b22 <HAL_GPIO_Init+0x19e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a4a      	ldr	r2, [pc, #296]	; (8001c28 <HAL_GPIO_Init+0x2a4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00d      	beq.n	8001b1e <HAL_GPIO_Init+0x19a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a49      	ldr	r2, [pc, #292]	; (8001c2c <HAL_GPIO_Init+0x2a8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d007      	beq.n	8001b1a <HAL_GPIO_Init+0x196>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a48      	ldr	r2, [pc, #288]	; (8001c30 <HAL_GPIO_Init+0x2ac>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d101      	bne.n	8001b16 <HAL_GPIO_Init+0x192>
 8001b12:	2303      	movs	r3, #3
 8001b14:	e006      	b.n	8001b24 <HAL_GPIO_Init+0x1a0>
 8001b16:	2304      	movs	r3, #4
 8001b18:	e004      	b.n	8001b24 <HAL_GPIO_Init+0x1a0>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e002      	b.n	8001b24 <HAL_GPIO_Init+0x1a0>
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e000      	b.n	8001b24 <HAL_GPIO_Init+0x1a0>
 8001b22:	2300      	movs	r3, #0
 8001b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b26:	f002 0203 	and.w	r2, r2, #3
 8001b2a:	0092      	lsls	r2, r2, #2
 8001b2c:	4093      	lsls	r3, r2
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b34:	493a      	ldr	r1, [pc, #232]	; (8001c20 <HAL_GPIO_Init+0x29c>)
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b4e:	4b39      	ldr	r3, [pc, #228]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4938      	ldr	r1, [pc, #224]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
 8001b5a:	e006      	b.n	8001b6a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b5c:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	4933      	ldr	r1, [pc, #204]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d006      	beq.n	8001b84 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b76:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	492e      	ldr	r1, [pc, #184]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	604b      	str	r3, [r1, #4]
 8001b82:	e006      	b.n	8001b92 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b84:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	4929      	ldr	r1, [pc, #164]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d006      	beq.n	8001bac <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b9e:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001ba0:	689a      	ldr	r2, [r3, #8]
 8001ba2:	4924      	ldr	r1, [pc, #144]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	608b      	str	r3, [r1, #8]
 8001baa:	e006      	b.n	8001bba <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bac:	4b21      	ldr	r3, [pc, #132]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	491f      	ldr	r1, [pc, #124]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d006      	beq.n	8001bd4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	491a      	ldr	r1, [pc, #104]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	60cb      	str	r3, [r1, #12]
 8001bd2:	e006      	b.n	8001be2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bd4:	4b17      	ldr	r3, [pc, #92]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	4915      	ldr	r1, [pc, #84]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	3301      	adds	r3, #1
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f47f aed0 	bne.w	8001998 <HAL_GPIO_Init+0x14>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	372c      	adds	r7, #44	; 0x2c
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	10210000 	.word	0x10210000
 8001c08:	10110000 	.word	0x10110000
 8001c0c:	10120000 	.word	0x10120000
 8001c10:	10310000 	.word	0x10310000
 8001c14:	10320000 	.word	0x10320000
 8001c18:	10220000 	.word	0x10220000
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40010800 	.word	0x40010800
 8001c28:	40010c00 	.word	0x40010c00
 8001c2c:	40011000 	.word	0x40011000
 8001c30:	40011400 	.word	0x40011400
 8001c34:	40010400 	.word	0x40010400

08001c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e304      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8087 	beq.w	8001d66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c58:	4b92      	ldr	r3, [pc, #584]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d00c      	beq.n	8001c7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c64:	4b8f      	ldr	r3, [pc, #572]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d112      	bne.n	8001c96 <HAL_RCC_OscConfig+0x5e>
 8001c70:	4b8c      	ldr	r3, [pc, #560]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7c:	d10b      	bne.n	8001c96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7e:	4b89      	ldr	r3, [pc, #548]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d06c      	beq.n	8001d64 <HAL_RCC_OscConfig+0x12c>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d168      	bne.n	8001d64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e2de      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c9e:	d106      	bne.n	8001cae <HAL_RCC_OscConfig+0x76>
 8001ca0:	4b80      	ldr	r3, [pc, #512]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a7f      	ldr	r2, [pc, #508]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	e02e      	b.n	8001d0c <HAL_RCC_OscConfig+0xd4>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10c      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x98>
 8001cb6:	4b7b      	ldr	r3, [pc, #492]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a7a      	ldr	r2, [pc, #488]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	4b78      	ldr	r3, [pc, #480]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a77      	ldr	r2, [pc, #476]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e01d      	b.n	8001d0c <HAL_RCC_OscConfig+0xd4>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0xbc>
 8001cda:	4b72      	ldr	r3, [pc, #456]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a71      	ldr	r2, [pc, #452]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b6f      	ldr	r3, [pc, #444]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a6e      	ldr	r2, [pc, #440]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_OscConfig+0xd4>
 8001cf4:	4b6b      	ldr	r3, [pc, #428]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a6a      	ldr	r2, [pc, #424]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b68      	ldr	r3, [pc, #416]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a67      	ldr	r2, [pc, #412]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d013      	beq.n	8001d3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7fe ff7e 	bl	8000c14 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7fe ff7a 	bl	8000c14 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	; 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e292      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b5d      	ldr	r3, [pc, #372]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0xe4>
 8001d3a:	e014      	b.n	8001d66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7fe ff6a 	bl	8000c14 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d44:	f7fe ff66 	bl	8000c14 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	; 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e27e      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	4b53      	ldr	r3, [pc, #332]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x10c>
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d063      	beq.n	8001e3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d72:	4b4c      	ldr	r3, [pc, #304]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00b      	beq.n	8001d96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d7e:	4b49      	ldr	r3, [pc, #292]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d11c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x18c>
 8001d8a:	4b46      	ldr	r3, [pc, #280]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d116      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d96:	4b43      	ldr	r3, [pc, #268]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_RCC_OscConfig+0x176>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e252      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dae:	4b3d      	ldr	r3, [pc, #244]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4939      	ldr	r1, [pc, #228]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc2:	e03a      	b.n	8001e3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dcc:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd2:	f7fe ff1f 	bl	8000c14 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dda:	f7fe ff1b 	bl	8000c14 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e233      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dec:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df8:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4927      	ldr	r1, [pc, #156]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	600b      	str	r3, [r1, #0]
 8001e0c:	e015      	b.n	8001e3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0e:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7fe fefe 	bl	8000c14 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1c:	f7fe fefa 	bl	8000c14 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e212      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d03a      	beq.n	8001ebc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d019      	beq.n	8001e82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e54:	f7fe fede 	bl	8000c14 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7fe feda 	bl	8000c14 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e1f2      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f000 fbca 	bl	8002614 <RCC_Delay>
 8001e80:	e01c      	b.n	8001ebc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e82:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e88:	f7fe fec4 	bl	8000c14 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e8e:	e00f      	b.n	8001eb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e90:	f7fe fec0 	bl	8000c14 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d908      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e1d8      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	42420000 	.word	0x42420000
 8001eac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb0:	4b9b      	ldr	r3, [pc, #620]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1e9      	bne.n	8001e90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80a6 	beq.w	8002016 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ece:	4b94      	ldr	r3, [pc, #592]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10d      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	4b91      	ldr	r3, [pc, #580]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	4a90      	ldr	r2, [pc, #576]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	61d3      	str	r3, [r2, #28]
 8001ee6:	4b8e      	ldr	r3, [pc, #568]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef6:	4b8b      	ldr	r3, [pc, #556]	; (8002124 <HAL_RCC_OscConfig+0x4ec>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d118      	bne.n	8001f34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f02:	4b88      	ldr	r3, [pc, #544]	; (8002124 <HAL_RCC_OscConfig+0x4ec>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a87      	ldr	r2, [pc, #540]	; (8002124 <HAL_RCC_OscConfig+0x4ec>)
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0e:	f7fe fe81 	bl	8000c14 <HAL_GetTick>
 8001f12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f14:	e008      	b.n	8001f28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f16:	f7fe fe7d 	bl	8000c14 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	2b64      	cmp	r3, #100	; 0x64
 8001f22:	d901      	bls.n	8001f28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f24:	2303      	movs	r3, #3
 8001f26:	e195      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f28:	4b7e      	ldr	r3, [pc, #504]	; (8002124 <HAL_RCC_OscConfig+0x4ec>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d0f0      	beq.n	8001f16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x312>
 8001f3c:	4b78      	ldr	r3, [pc, #480]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4a77      	ldr	r2, [pc, #476]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6213      	str	r3, [r2, #32]
 8001f48:	e02d      	b.n	8001fa6 <HAL_RCC_OscConfig+0x36e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x334>
 8001f52:	4b73      	ldr	r3, [pc, #460]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	4a72      	ldr	r2, [pc, #456]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001f58:	f023 0301 	bic.w	r3, r3, #1
 8001f5c:	6213      	str	r3, [r2, #32]
 8001f5e:	4b70      	ldr	r3, [pc, #448]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a6f      	ldr	r2, [pc, #444]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	6213      	str	r3, [r2, #32]
 8001f6a:	e01c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x36e>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	2b05      	cmp	r3, #5
 8001f72:	d10c      	bne.n	8001f8e <HAL_RCC_OscConfig+0x356>
 8001f74:	4b6a      	ldr	r3, [pc, #424]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	4a69      	ldr	r2, [pc, #420]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	6213      	str	r3, [r2, #32]
 8001f80:	4b67      	ldr	r3, [pc, #412]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	4a66      	ldr	r2, [pc, #408]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6213      	str	r3, [r2, #32]
 8001f8c:	e00b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x36e>
 8001f8e:	4b64      	ldr	r3, [pc, #400]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001f90:	6a1b      	ldr	r3, [r3, #32]
 8001f92:	4a63      	ldr	r2, [pc, #396]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	6213      	str	r3, [r2, #32]
 8001f9a:	4b61      	ldr	r3, [pc, #388]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	4a60      	ldr	r2, [pc, #384]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001fa0:	f023 0304 	bic.w	r3, r3, #4
 8001fa4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d015      	beq.n	8001fda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fae:	f7fe fe31 	bl	8000c14 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	e00a      	b.n	8001fcc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb6:	f7fe fe2d 	bl	8000c14 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e143      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fcc:	4b54      	ldr	r3, [pc, #336]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0ee      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x37e>
 8001fd8:	e014      	b.n	8002004 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fda:	f7fe fe1b 	bl	8000c14 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe0:	e00a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe2:	f7fe fe17 	bl	8000c14 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e12d      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff8:	4b49      	ldr	r3, [pc, #292]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1ee      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002004:	7dfb      	ldrb	r3, [r7, #23]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d105      	bne.n	8002016 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200a:	4b45      	ldr	r3, [pc, #276]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	4a44      	ldr	r2, [pc, #272]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8002010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002014:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 808c 	beq.w	8002138 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002020:	4b3f      	ldr	r3, [pc, #252]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202c:	d10e      	bne.n	800204c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800202e:	4b3c      	ldr	r3, [pc, #240]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002036:	2b08      	cmp	r3, #8
 8002038:	d108      	bne.n	800204c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800203a:	4b39      	ldr	r3, [pc, #228]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 800203c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002046:	d101      	bne.n	800204c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e103      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	2b02      	cmp	r3, #2
 8002052:	d14e      	bne.n	80020f2 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002054:	4b32      	ldr	r3, [pc, #200]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d009      	beq.n	8002074 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002060:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800206c:	429a      	cmp	r2, r3
 800206e:	d001      	beq.n	8002074 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0ef      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002074:	4b2c      	ldr	r3, [pc, #176]	; (8002128 <HAL_RCC_OscConfig+0x4f0>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7fe fdcb 	bl	8000c14 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002082:	f7fe fdc7 	bl	8000c14 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b64      	cmp	r3, #100	; 0x64
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e0df      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002094:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f0      	bne.n	8002082 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80020a0:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 80020a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ac:	491c      	ldr	r1, [pc, #112]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80020b2:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4918      	ldr	r1, [pc, #96]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80020c4:	4b18      	ldr	r3, [pc, #96]	; (8002128 <HAL_RCC_OscConfig+0x4f0>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7fe fda3 	bl	8000c14 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80020d2:	f7fe fd9f 	bl	8000c14 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b64      	cmp	r3, #100	; 0x64
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e0b7      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x49a>
 80020f0:	e022      	b.n	8002138 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f6:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <HAL_RCC_OscConfig+0x4e8>)
 80020f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_RCC_OscConfig+0x4f0>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7fe fd86 	bl	8000c14 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800210a:	e00f      	b.n	800212c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800210c:	f7fe fd82 	bl	8000c14 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b64      	cmp	r3, #100	; 0x64
 8002118:	d908      	bls.n	800212c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e09a      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	40007000 	.word	0x40007000
 8002128:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800212c:	4b4b      	ldr	r3, [pc, #300]	; (800225c <HAL_RCC_OscConfig+0x624>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1e9      	bne.n	800210c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 8088 	beq.w	8002252 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002142:	4b46      	ldr	r3, [pc, #280]	; (800225c <HAL_RCC_OscConfig+0x624>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b08      	cmp	r3, #8
 800214c:	d068      	beq.n	8002220 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	2b02      	cmp	r3, #2
 8002154:	d14d      	bne.n	80021f2 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002156:	4b42      	ldr	r3, [pc, #264]	; (8002260 <HAL_RCC_OscConfig+0x628>)
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7fe fd5a 	bl	8000c14 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002164:	f7fe fd56 	bl	8000c14 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e06e      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002176:	4b39      	ldr	r3, [pc, #228]	; (800225c <HAL_RCC_OscConfig+0x624>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f0      	bne.n	8002164 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800218a:	d10f      	bne.n	80021ac <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800218c:	4b33      	ldr	r3, [pc, #204]	; (800225c <HAL_RCC_OscConfig+0x624>)
 800218e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4931      	ldr	r1, [pc, #196]	; (800225c <HAL_RCC_OscConfig+0x624>)
 8002196:	4313      	orrs	r3, r2
 8002198:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800219a:	4b30      	ldr	r3, [pc, #192]	; (800225c <HAL_RCC_OscConfig+0x624>)
 800219c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219e:	f023 020f 	bic.w	r2, r3, #15
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	492d      	ldr	r1, [pc, #180]	; (800225c <HAL_RCC_OscConfig+0x624>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ac:	4b2b      	ldr	r3, [pc, #172]	; (800225c <HAL_RCC_OscConfig+0x624>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	430b      	orrs	r3, r1
 80021be:	4927      	ldr	r1, [pc, #156]	; (800225c <HAL_RCC_OscConfig+0x624>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c4:	4b26      	ldr	r3, [pc, #152]	; (8002260 <HAL_RCC_OscConfig+0x628>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ca:	f7fe fd23 	bl	8000c14 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d2:	f7fe fd1f 	bl	8000c14 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e037      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e4:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_RCC_OscConfig+0x624>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x59a>
 80021f0:	e02f      	b.n	8002252 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f2:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <HAL_RCC_OscConfig+0x628>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7fe fd0c 	bl	8000c14 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002200:	f7fe fd08 	bl	8000c14 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e020      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_RCC_OscConfig+0x624>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x5c8>
 800221e:	e018      	b.n	8002252 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e013      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800222c:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_RCC_OscConfig+0x624>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	429a      	cmp	r2, r3
 800223e:	d106      	bne.n	800224e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224a:	429a      	cmp	r2, r3
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e000      	b.n	8002254 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021000 	.word	0x40021000
 8002260:	42420060 	.word	0x42420060

08002264 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0d0      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002278:	4b6a      	ldr	r3, [pc, #424]	; (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d910      	bls.n	80022a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002286:	4b67      	ldr	r3, [pc, #412]	; (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 0207 	bic.w	r2, r3, #7
 800228e:	4965      	ldr	r1, [pc, #404]	; (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	4b63      	ldr	r3, [pc, #396]	; (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0b8      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d020      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c0:	4b59      	ldr	r3, [pc, #356]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	4a58      	ldr	r2, [pc, #352]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80022c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022d8:	4b53      	ldr	r3, [pc, #332]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a52      	ldr	r2, [pc, #328]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80022de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e4:	4b50      	ldr	r3, [pc, #320]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	494d      	ldr	r1, [pc, #308]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d040      	beq.n	8002384 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	4b47      	ldr	r3, [pc, #284]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d115      	bne.n	8002342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e07f      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002322:	4b41      	ldr	r3, [pc, #260]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d109      	bne.n	8002342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e073      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002332:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e06b      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002342:	4b39      	ldr	r3, [pc, #228]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f023 0203 	bic.w	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	4936      	ldr	r1, [pc, #216]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 8002350:	4313      	orrs	r3, r2
 8002352:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002354:	f7fe fc5e 	bl	8000c14 <HAL_GetTick>
 8002358:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	e00a      	b.n	8002372 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800235c:	f7fe fc5a 	bl	8000c14 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	; 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e053      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002372:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 020c 	and.w	r2, r3, #12
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	429a      	cmp	r2, r3
 8002382:	d1eb      	bne.n	800235c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002384:	4b27      	ldr	r3, [pc, #156]	; (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d210      	bcs.n	80023b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b24      	ldr	r3, [pc, #144]	; (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f023 0207 	bic.w	r2, r3, #7
 800239a:	4922      	ldr	r1, [pc, #136]	; (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	4313      	orrs	r3, r2
 80023a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a2:	4b20      	ldr	r3, [pc, #128]	; (8002424 <HAL_RCC_ClockConfig+0x1c0>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e032      	b.n	800241a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c0:	4b19      	ldr	r3, [pc, #100]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4916      	ldr	r1, [pc, #88]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d009      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023de:	4b12      	ldr	r3, [pc, #72]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	490e      	ldr	r1, [pc, #56]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023f2:	f000 f821 	bl	8002438 <HAL_RCC_GetSysClockFreq>
 80023f6:	4601      	mov	r1, r0
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_RCC_ClockConfig+0x1c4>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <HAL_RCC_ClockConfig+0x1c8>)
 8002404:	5cd3      	ldrb	r3, [r2, r3]
 8002406:	fa21 f303 	lsr.w	r3, r1, r3
 800240a:	4a09      	ldr	r2, [pc, #36]	; (8002430 <HAL_RCC_ClockConfig+0x1cc>)
 800240c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_RCC_ClockConfig+0x1d0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe fbbc 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40022000 	.word	0x40022000
 8002428:	40021000 	.word	0x40021000
 800242c:	0800329c 	.word	0x0800329c
 8002430:	20000000 	.word	0x20000000
 8002434:	20000004 	.word	0x20000004

08002438 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800243a:	b091      	sub	sp, #68	; 0x44
 800243c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 800243e:	4b56      	ldr	r3, [pc, #344]	; (8002598 <HAL_RCC_GetSysClockFreq+0x160>)
 8002440:	f107 0414 	add.w	r4, r7, #20
 8002444:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002446:	c407      	stmia	r4!, {r0, r1, r2}
 8002448:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800244a:	4b54      	ldr	r3, [pc, #336]	; (800259c <HAL_RCC_GetSysClockFreq+0x164>)
 800244c:	1d3c      	adds	r4, r7, #4
 800244e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002450:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	637b      	str	r3, [r7, #52]	; 0x34
 8002458:	2300      	movs	r3, #0
 800245a:	633b      	str	r3, [r7, #48]	; 0x30
 800245c:	2300      	movs	r3, #0
 800245e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002460:	2300      	movs	r3, #0
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8002464:	2300      	movs	r3, #0
 8002466:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	62bb      	str	r3, [r7, #40]	; 0x28
 800246c:	2300      	movs	r3, #0
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002470:	4b4b      	ldr	r3, [pc, #300]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b04      	cmp	r3, #4
 800247e:	d002      	beq.n	8002486 <HAL_RCC_GetSysClockFreq+0x4e>
 8002480:	2b08      	cmp	r3, #8
 8002482:	d003      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x54>
 8002484:	e07f      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002486:	4b47      	ldr	r3, [pc, #284]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002488:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800248a:	e07f      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800248c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248e:	0c9b      	lsrs	r3, r3, #18
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002498:	4413      	add	r3, r2
 800249a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d065      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80024aa:	4b3d      	ldr	r3, [pc, #244]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80024b6:	4413      	add	r3, r2
 80024b8:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80024bc:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80024be:	4b38      	ldr	r3, [pc, #224]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d043      	beq.n	8002552 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80024ca:	4b35      	ldr	r3, [pc, #212]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80024cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ce:	091b      	lsrs	r3, r3, #4
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	3301      	adds	r3, #1
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80024d8:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_RCC_GetSysClockFreq+0x168>)
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	3302      	adds	r3, #2
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	4619      	mov	r1, r3
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f0:	f04f 0400 	mov.w	r4, #0
 80024f4:	fb03 f502 	mul.w	r5, r3, r2
 80024f8:	fb01 f004 	mul.w	r0, r1, r4
 80024fc:	4428      	add	r0, r5
 80024fe:	fba1 3403 	umull	r3, r4, r1, r3
 8002502:	1902      	adds	r2, r0, r4
 8002504:	4614      	mov	r4, r2
 8002506:	4a27      	ldr	r2, [pc, #156]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002508:	fb02 f104 	mul.w	r1, r2, r4
 800250c:	2200      	movs	r2, #0
 800250e:	fb02 f203 	mul.w	r2, r2, r3
 8002512:	440a      	add	r2, r1
 8002514:	4923      	ldr	r1, [pc, #140]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002516:	fba3 5601 	umull	r5, r6, r3, r1
 800251a:	1993      	adds	r3, r2, r6
 800251c:	461e      	mov	r6, r3
 800251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002520:	4619      	mov	r1, r3
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002528:	f04f 0400 	mov.w	r4, #0
 800252c:	fb03 fc02 	mul.w	ip, r3, r2
 8002530:	fb01 f004 	mul.w	r0, r1, r4
 8002534:	4460      	add	r0, ip
 8002536:	fba1 3403 	umull	r3, r4, r1, r3
 800253a:	1902      	adds	r2, r0, r4
 800253c:	4614      	mov	r4, r2
 800253e:	461a      	mov	r2, r3
 8002540:	4623      	mov	r3, r4
 8002542:	4628      	mov	r0, r5
 8002544:	4631      	mov	r1, r6
 8002546:	f7fd fe75 	bl	8000234 <__aeabi_uldivmod>
 800254a:	4603      	mov	r3, r0
 800254c:	460c      	mov	r4, r1
 800254e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002550:	e007      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002554:	4a13      	ldr	r2, [pc, #76]	; (80025a4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002556:	fb02 f203 	mul.w	r2, r2, r3
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002560:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002562:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002566:	461a      	mov	r2, r3
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	4293      	cmp	r3, r2
 800256c:	d108      	bne.n	8002580 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 800256e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002570:	085b      	lsrs	r3, r3, #1
 8002572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002574:	e004      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002578:	4a0b      	ldr	r2, [pc, #44]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x170>)
 800257a:	fb02 f303 	mul.w	r3, r2, r3
 800257e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8002580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002582:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002584:	e002      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_RCC_GetSysClockFreq+0x174>)
 8002588:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800258a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800258e:	4618      	mov	r0, r3
 8002590:	3744      	adds	r7, #68	; 0x44
 8002592:	46bd      	mov	sp, r7
 8002594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002596:	bf00      	nop
 8002598:	0800327c 	.word	0x0800327c
 800259c:	0800328c 	.word	0x0800328c
 80025a0:	40021000 	.word	0x40021000
 80025a4:	00989680 	.word	0x00989680
 80025a8:	003d0900 	.word	0x003d0900
 80025ac:	007a1200 	.word	0x007a1200

080025b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b4:	4b02      	ldr	r3, [pc, #8]	; (80025c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80025b6:	681b      	ldr	r3, [r3, #0]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	20000000 	.word	0x20000000

080025c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025c8:	f7ff fff2 	bl	80025b0 <HAL_RCC_GetHCLKFreq>
 80025cc:	4601      	mov	r1, r0
 80025ce:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	0a1b      	lsrs	r3, r3, #8
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	4a03      	ldr	r2, [pc, #12]	; (80025e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025da:	5cd3      	ldrb	r3, [r2, r3]
 80025dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000
 80025e8:	080032ac 	.word	0x080032ac

080025ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025f0:	f7ff ffde 	bl	80025b0 <HAL_RCC_GetHCLKFreq>
 80025f4:	4601      	mov	r1, r0
 80025f6:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_RCC_GetPCLK2Freq+0x20>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	0adb      	lsrs	r3, r3, #11
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	4a03      	ldr	r2, [pc, #12]	; (8002610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002602:	5cd3      	ldrb	r3, [r2, r3]
 8002604:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40021000 	.word	0x40021000
 8002610:	080032ac 	.word	0x080032ac

08002614 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <RCC_Delay+0x34>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0a      	ldr	r2, [pc, #40]	; (800264c <RCC_Delay+0x38>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	0a5b      	lsrs	r3, r3, #9
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	fb02 f303 	mul.w	r3, r2, r3
 800262e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002630:	bf00      	nop
  }
  while (Delay --);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	1e5a      	subs	r2, r3, #1
 8002636:	60fa      	str	r2, [r7, #12]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f9      	bne.n	8002630 <RCC_Delay+0x1c>
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20000000 	.word	0x20000000
 800264c:	10624dd3 	.word	0x10624dd3

08002650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e03f      	b.n	80026e2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe f97e 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2224      	movs	r2, #36	; 0x24
 8002680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f905 	bl	80028a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	695a      	ldr	r2, [r3, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b08a      	sub	sp, #40	; 0x28
 80026ee:	af02      	add	r7, sp, #8
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	4613      	mov	r3, r2
 80026f8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b20      	cmp	r3, #32
 8002708:	d17c      	bne.n	8002804 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <HAL_UART_Transmit+0x2c>
 8002710:	88fb      	ldrh	r3, [r7, #6]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e075      	b.n	8002806 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_UART_Transmit+0x3e>
 8002724:	2302      	movs	r3, #2
 8002726:	e06e      	b.n	8002806 <HAL_UART_Transmit+0x11c>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2221      	movs	r2, #33	; 0x21
 800273a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800273e:	f7fe fa69 	bl	8000c14 <HAL_GetTick>
 8002742:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	88fa      	ldrh	r2, [r7, #6]
 8002748:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	88fa      	ldrh	r2, [r7, #6]
 800274e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002758:	d108      	bne.n	800276c <HAL_UART_Transmit+0x82>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d104      	bne.n	800276c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	61bb      	str	r3, [r7, #24]
 800276a:	e003      	b.n	8002774 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002770:	2300      	movs	r3, #0
 8002772:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800277c:	e02a      	b.n	80027d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2200      	movs	r2, #0
 8002786:	2180      	movs	r1, #128	; 0x80
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f840 	bl	800280e <UART_WaitOnFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e036      	b.n	8002806 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10b      	bne.n	80027b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	461a      	mov	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	3302      	adds	r3, #2
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	e007      	b.n	80027c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	3301      	adds	r3, #1
 80027c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	3b01      	subs	r3, #1
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1cf      	bne.n	800277e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2200      	movs	r2, #0
 80027e6:	2140      	movs	r1, #64	; 0x40
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 f810 	bl	800280e <UART_WaitOnFlagUntilTimeout>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e006      	b.n	8002806 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	e000      	b.n	8002806 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002804:	2302      	movs	r3, #2
  }
}
 8002806:	4618      	mov	r0, r3
 8002808:	3720      	adds	r7, #32
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}

0800280e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	b084      	sub	sp, #16
 8002812:	af00      	add	r7, sp, #0
 8002814:	60f8      	str	r0, [r7, #12]
 8002816:	60b9      	str	r1, [r7, #8]
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	4613      	mov	r3, r2
 800281c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800281e:	e02c      	b.n	800287a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002826:	d028      	beq.n	800287a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <UART_WaitOnFlagUntilTimeout+0x30>
 800282e:	f7fe f9f1 	bl	8000c14 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	429a      	cmp	r2, r3
 800283c:	d21d      	bcs.n	800287a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800284c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	695a      	ldr	r2, [r3, #20]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0201 	bic.w	r2, r2, #1
 800285c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e00f      	b.n	800289a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4013      	ands	r3, r2
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	429a      	cmp	r2, r3
 8002888:	bf0c      	ite	eq
 800288a:	2301      	moveq	r3, #1
 800288c:	2300      	movne	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	429a      	cmp	r2, r3
 8002896:	d0c3      	beq.n	8002820 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028de:	f023 030c 	bic.w	r3, r3, #12
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6812      	ldr	r2, [r2, #0]
 80028e6:	68b9      	ldr	r1, [r7, #8]
 80028e8:	430b      	orrs	r3, r1
 80028ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	430a      	orrs	r2, r1
 8002900:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a2c      	ldr	r2, [pc, #176]	; (80029b8 <UART_SetConfig+0x114>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d103      	bne.n	8002914 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800290c:	f7ff fe6e 	bl	80025ec <HAL_RCC_GetPCLK2Freq>
 8002910:	60f8      	str	r0, [r7, #12]
 8002912:	e002      	b.n	800291a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002914:	f7ff fe56 	bl	80025c4 <HAL_RCC_GetPCLK1Freq>
 8002918:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	009a      	lsls	r2, r3, #2
 8002924:	441a      	add	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002930:	4a22      	ldr	r2, [pc, #136]	; (80029bc <UART_SetConfig+0x118>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	095b      	lsrs	r3, r3, #5
 8002938:	0119      	lsls	r1, r3, #4
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	009a      	lsls	r2, r3, #2
 8002944:	441a      	add	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002950:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <UART_SetConfig+0x118>)
 8002952:	fba3 0302 	umull	r0, r3, r3, r2
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2064      	movs	r0, #100	; 0x64
 800295a:	fb00 f303 	mul.w	r3, r0, r3
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	3332      	adds	r3, #50	; 0x32
 8002964:	4a15      	ldr	r2, [pc, #84]	; (80029bc <UART_SetConfig+0x118>)
 8002966:	fba2 2303 	umull	r2, r3, r2, r3
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002970:	4419      	add	r1, r3
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	009a      	lsls	r2, r3, #2
 800297c:	441a      	add	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	fbb2 f2f3 	udiv	r2, r2, r3
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <UART_SetConfig+0x118>)
 800298a:	fba3 0302 	umull	r0, r3, r3, r2
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2064      	movs	r0, #100	; 0x64
 8002992:	fb00 f303 	mul.w	r3, r0, r3
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	3332      	adds	r3, #50	; 0x32
 800299c:	4a07      	ldr	r2, [pc, #28]	; (80029bc <UART_SetConfig+0x118>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	f003 020f 	and.w	r2, r3, #15
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	440a      	add	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80029b0:	bf00      	nop
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40013800 	.word	0x40013800
 80029bc:	51eb851f 	.word	0x51eb851f

080029c0 <__errno>:
 80029c0:	4b01      	ldr	r3, [pc, #4]	; (80029c8 <__errno+0x8>)
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	2000000c 	.word	0x2000000c

080029cc <__libc_init_array>:
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	2500      	movs	r5, #0
 80029d0:	4e0c      	ldr	r6, [pc, #48]	; (8002a04 <__libc_init_array+0x38>)
 80029d2:	4c0d      	ldr	r4, [pc, #52]	; (8002a08 <__libc_init_array+0x3c>)
 80029d4:	1ba4      	subs	r4, r4, r6
 80029d6:	10a4      	asrs	r4, r4, #2
 80029d8:	42a5      	cmp	r5, r4
 80029da:	d109      	bne.n	80029f0 <__libc_init_array+0x24>
 80029dc:	f000 fc34 	bl	8003248 <_init>
 80029e0:	2500      	movs	r5, #0
 80029e2:	4e0a      	ldr	r6, [pc, #40]	; (8002a0c <__libc_init_array+0x40>)
 80029e4:	4c0a      	ldr	r4, [pc, #40]	; (8002a10 <__libc_init_array+0x44>)
 80029e6:	1ba4      	subs	r4, r4, r6
 80029e8:	10a4      	asrs	r4, r4, #2
 80029ea:	42a5      	cmp	r5, r4
 80029ec:	d105      	bne.n	80029fa <__libc_init_array+0x2e>
 80029ee:	bd70      	pop	{r4, r5, r6, pc}
 80029f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029f4:	4798      	blx	r3
 80029f6:	3501      	adds	r5, #1
 80029f8:	e7ee      	b.n	80029d8 <__libc_init_array+0xc>
 80029fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029fe:	4798      	blx	r3
 8002a00:	3501      	adds	r5, #1
 8002a02:	e7f2      	b.n	80029ea <__libc_init_array+0x1e>
 8002a04:	080032f0 	.word	0x080032f0
 8002a08:	080032f0 	.word	0x080032f0
 8002a0c:	080032f0 	.word	0x080032f0
 8002a10:	080032f4 	.word	0x080032f4

08002a14 <memset>:
 8002a14:	4603      	mov	r3, r0
 8002a16:	4402      	add	r2, r0
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d100      	bne.n	8002a1e <memset+0xa>
 8002a1c:	4770      	bx	lr
 8002a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a22:	e7f9      	b.n	8002a18 <memset+0x4>

08002a24 <siprintf>:
 8002a24:	b40e      	push	{r1, r2, r3}
 8002a26:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002a2a:	b500      	push	{lr}
 8002a2c:	b09c      	sub	sp, #112	; 0x70
 8002a2e:	ab1d      	add	r3, sp, #116	; 0x74
 8002a30:	9002      	str	r0, [sp, #8]
 8002a32:	9006      	str	r0, [sp, #24]
 8002a34:	9107      	str	r1, [sp, #28]
 8002a36:	9104      	str	r1, [sp, #16]
 8002a38:	4808      	ldr	r0, [pc, #32]	; (8002a5c <siprintf+0x38>)
 8002a3a:	4909      	ldr	r1, [pc, #36]	; (8002a60 <siprintf+0x3c>)
 8002a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a40:	9105      	str	r1, [sp, #20]
 8002a42:	6800      	ldr	r0, [r0, #0]
 8002a44:	a902      	add	r1, sp, #8
 8002a46:	9301      	str	r3, [sp, #4]
 8002a48:	f000 f866 	bl	8002b18 <_svfiprintf_r>
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	9b02      	ldr	r3, [sp, #8]
 8002a50:	701a      	strb	r2, [r3, #0]
 8002a52:	b01c      	add	sp, #112	; 0x70
 8002a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8002a58:	b003      	add	sp, #12
 8002a5a:	4770      	bx	lr
 8002a5c:	2000000c 	.word	0x2000000c
 8002a60:	ffff0208 	.word	0xffff0208

08002a64 <__ssputs_r>:
 8002a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a68:	688e      	ldr	r6, [r1, #8]
 8002a6a:	4682      	mov	sl, r0
 8002a6c:	429e      	cmp	r6, r3
 8002a6e:	460c      	mov	r4, r1
 8002a70:	4690      	mov	r8, r2
 8002a72:	4699      	mov	r9, r3
 8002a74:	d837      	bhi.n	8002ae6 <__ssputs_r+0x82>
 8002a76:	898a      	ldrh	r2, [r1, #12]
 8002a78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a7c:	d031      	beq.n	8002ae2 <__ssputs_r+0x7e>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	6825      	ldr	r5, [r4, #0]
 8002a82:	6909      	ldr	r1, [r1, #16]
 8002a84:	1a6f      	subs	r7, r5, r1
 8002a86:	6965      	ldr	r5, [r4, #20]
 8002a88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002a90:	f109 0301 	add.w	r3, r9, #1
 8002a94:	443b      	add	r3, r7
 8002a96:	429d      	cmp	r5, r3
 8002a98:	bf38      	it	cc
 8002a9a:	461d      	movcc	r5, r3
 8002a9c:	0553      	lsls	r3, r2, #21
 8002a9e:	d530      	bpl.n	8002b02 <__ssputs_r+0x9e>
 8002aa0:	4629      	mov	r1, r5
 8002aa2:	f000 fb37 	bl	8003114 <_malloc_r>
 8002aa6:	4606      	mov	r6, r0
 8002aa8:	b950      	cbnz	r0, 8002ac0 <__ssputs_r+0x5c>
 8002aaa:	230c      	movs	r3, #12
 8002aac:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab0:	f8ca 3000 	str.w	r3, [sl]
 8002ab4:	89a3      	ldrh	r3, [r4, #12]
 8002ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aba:	81a3      	strh	r3, [r4, #12]
 8002abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ac0:	463a      	mov	r2, r7
 8002ac2:	6921      	ldr	r1, [r4, #16]
 8002ac4:	f000 fab6 	bl	8003034 <memcpy>
 8002ac8:	89a3      	ldrh	r3, [r4, #12]
 8002aca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ace:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ad2:	81a3      	strh	r3, [r4, #12]
 8002ad4:	6126      	str	r6, [r4, #16]
 8002ad6:	443e      	add	r6, r7
 8002ad8:	6026      	str	r6, [r4, #0]
 8002ada:	464e      	mov	r6, r9
 8002adc:	6165      	str	r5, [r4, #20]
 8002ade:	1bed      	subs	r5, r5, r7
 8002ae0:	60a5      	str	r5, [r4, #8]
 8002ae2:	454e      	cmp	r6, r9
 8002ae4:	d900      	bls.n	8002ae8 <__ssputs_r+0x84>
 8002ae6:	464e      	mov	r6, r9
 8002ae8:	4632      	mov	r2, r6
 8002aea:	4641      	mov	r1, r8
 8002aec:	6820      	ldr	r0, [r4, #0]
 8002aee:	f000 faac 	bl	800304a <memmove>
 8002af2:	68a3      	ldr	r3, [r4, #8]
 8002af4:	2000      	movs	r0, #0
 8002af6:	1b9b      	subs	r3, r3, r6
 8002af8:	60a3      	str	r3, [r4, #8]
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	441e      	add	r6, r3
 8002afe:	6026      	str	r6, [r4, #0]
 8002b00:	e7dc      	b.n	8002abc <__ssputs_r+0x58>
 8002b02:	462a      	mov	r2, r5
 8002b04:	f000 fb60 	bl	80031c8 <_realloc_r>
 8002b08:	4606      	mov	r6, r0
 8002b0a:	2800      	cmp	r0, #0
 8002b0c:	d1e2      	bne.n	8002ad4 <__ssputs_r+0x70>
 8002b0e:	6921      	ldr	r1, [r4, #16]
 8002b10:	4650      	mov	r0, sl
 8002b12:	f000 fab3 	bl	800307c <_free_r>
 8002b16:	e7c8      	b.n	8002aaa <__ssputs_r+0x46>

08002b18 <_svfiprintf_r>:
 8002b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b1c:	461d      	mov	r5, r3
 8002b1e:	898b      	ldrh	r3, [r1, #12]
 8002b20:	b09d      	sub	sp, #116	; 0x74
 8002b22:	061f      	lsls	r7, r3, #24
 8002b24:	4680      	mov	r8, r0
 8002b26:	460c      	mov	r4, r1
 8002b28:	4616      	mov	r6, r2
 8002b2a:	d50f      	bpl.n	8002b4c <_svfiprintf_r+0x34>
 8002b2c:	690b      	ldr	r3, [r1, #16]
 8002b2e:	b96b      	cbnz	r3, 8002b4c <_svfiprintf_r+0x34>
 8002b30:	2140      	movs	r1, #64	; 0x40
 8002b32:	f000 faef 	bl	8003114 <_malloc_r>
 8002b36:	6020      	str	r0, [r4, #0]
 8002b38:	6120      	str	r0, [r4, #16]
 8002b3a:	b928      	cbnz	r0, 8002b48 <_svfiprintf_r+0x30>
 8002b3c:	230c      	movs	r3, #12
 8002b3e:	f8c8 3000 	str.w	r3, [r8]
 8002b42:	f04f 30ff 	mov.w	r0, #4294967295
 8002b46:	e0c8      	b.n	8002cda <_svfiprintf_r+0x1c2>
 8002b48:	2340      	movs	r3, #64	; 0x40
 8002b4a:	6163      	str	r3, [r4, #20]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8002b50:	2320      	movs	r3, #32
 8002b52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b56:	2330      	movs	r3, #48	; 0x30
 8002b58:	f04f 0b01 	mov.w	fp, #1
 8002b5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b60:	9503      	str	r5, [sp, #12]
 8002b62:	4637      	mov	r7, r6
 8002b64:	463d      	mov	r5, r7
 8002b66:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002b6a:	b10b      	cbz	r3, 8002b70 <_svfiprintf_r+0x58>
 8002b6c:	2b25      	cmp	r3, #37	; 0x25
 8002b6e:	d13e      	bne.n	8002bee <_svfiprintf_r+0xd6>
 8002b70:	ebb7 0a06 	subs.w	sl, r7, r6
 8002b74:	d00b      	beq.n	8002b8e <_svfiprintf_r+0x76>
 8002b76:	4653      	mov	r3, sl
 8002b78:	4632      	mov	r2, r6
 8002b7a:	4621      	mov	r1, r4
 8002b7c:	4640      	mov	r0, r8
 8002b7e:	f7ff ff71 	bl	8002a64 <__ssputs_r>
 8002b82:	3001      	adds	r0, #1
 8002b84:	f000 80a4 	beq.w	8002cd0 <_svfiprintf_r+0x1b8>
 8002b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b8a:	4453      	add	r3, sl
 8002b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8002b8e:	783b      	ldrb	r3, [r7, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 809d 	beq.w	8002cd0 <_svfiprintf_r+0x1b8>
 8002b96:	2300      	movs	r3, #0
 8002b98:	f04f 32ff 	mov.w	r2, #4294967295
 8002b9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ba0:	9304      	str	r3, [sp, #16]
 8002ba2:	9307      	str	r3, [sp, #28]
 8002ba4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002ba8:	931a      	str	r3, [sp, #104]	; 0x68
 8002baa:	462f      	mov	r7, r5
 8002bac:	2205      	movs	r2, #5
 8002bae:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002bb2:	4850      	ldr	r0, [pc, #320]	; (8002cf4 <_svfiprintf_r+0x1dc>)
 8002bb4:	f000 fa30 	bl	8003018 <memchr>
 8002bb8:	9b04      	ldr	r3, [sp, #16]
 8002bba:	b9d0      	cbnz	r0, 8002bf2 <_svfiprintf_r+0xda>
 8002bbc:	06d9      	lsls	r1, r3, #27
 8002bbe:	bf44      	itt	mi
 8002bc0:	2220      	movmi	r2, #32
 8002bc2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002bc6:	071a      	lsls	r2, r3, #28
 8002bc8:	bf44      	itt	mi
 8002bca:	222b      	movmi	r2, #43	; 0x2b
 8002bcc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002bd0:	782a      	ldrb	r2, [r5, #0]
 8002bd2:	2a2a      	cmp	r2, #42	; 0x2a
 8002bd4:	d015      	beq.n	8002c02 <_svfiprintf_r+0xea>
 8002bd6:	462f      	mov	r7, r5
 8002bd8:	2000      	movs	r0, #0
 8002bda:	250a      	movs	r5, #10
 8002bdc:	9a07      	ldr	r2, [sp, #28]
 8002bde:	4639      	mov	r1, r7
 8002be0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002be4:	3b30      	subs	r3, #48	; 0x30
 8002be6:	2b09      	cmp	r3, #9
 8002be8:	d94d      	bls.n	8002c86 <_svfiprintf_r+0x16e>
 8002bea:	b1b8      	cbz	r0, 8002c1c <_svfiprintf_r+0x104>
 8002bec:	e00f      	b.n	8002c0e <_svfiprintf_r+0xf6>
 8002bee:	462f      	mov	r7, r5
 8002bf0:	e7b8      	b.n	8002b64 <_svfiprintf_r+0x4c>
 8002bf2:	4a40      	ldr	r2, [pc, #256]	; (8002cf4 <_svfiprintf_r+0x1dc>)
 8002bf4:	463d      	mov	r5, r7
 8002bf6:	1a80      	subs	r0, r0, r2
 8002bf8:	fa0b f000 	lsl.w	r0, fp, r0
 8002bfc:	4318      	orrs	r0, r3
 8002bfe:	9004      	str	r0, [sp, #16]
 8002c00:	e7d3      	b.n	8002baa <_svfiprintf_r+0x92>
 8002c02:	9a03      	ldr	r2, [sp, #12]
 8002c04:	1d11      	adds	r1, r2, #4
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	9103      	str	r1, [sp, #12]
 8002c0a:	2a00      	cmp	r2, #0
 8002c0c:	db01      	blt.n	8002c12 <_svfiprintf_r+0xfa>
 8002c0e:	9207      	str	r2, [sp, #28]
 8002c10:	e004      	b.n	8002c1c <_svfiprintf_r+0x104>
 8002c12:	4252      	negs	r2, r2
 8002c14:	f043 0302 	orr.w	r3, r3, #2
 8002c18:	9207      	str	r2, [sp, #28]
 8002c1a:	9304      	str	r3, [sp, #16]
 8002c1c:	783b      	ldrb	r3, [r7, #0]
 8002c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8002c20:	d10c      	bne.n	8002c3c <_svfiprintf_r+0x124>
 8002c22:	787b      	ldrb	r3, [r7, #1]
 8002c24:	2b2a      	cmp	r3, #42	; 0x2a
 8002c26:	d133      	bne.n	8002c90 <_svfiprintf_r+0x178>
 8002c28:	9b03      	ldr	r3, [sp, #12]
 8002c2a:	3702      	adds	r7, #2
 8002c2c:	1d1a      	adds	r2, r3, #4
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	9203      	str	r2, [sp, #12]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bfb8      	it	lt
 8002c36:	f04f 33ff 	movlt.w	r3, #4294967295
 8002c3a:	9305      	str	r3, [sp, #20]
 8002c3c:	4d2e      	ldr	r5, [pc, #184]	; (8002cf8 <_svfiprintf_r+0x1e0>)
 8002c3e:	2203      	movs	r2, #3
 8002c40:	7839      	ldrb	r1, [r7, #0]
 8002c42:	4628      	mov	r0, r5
 8002c44:	f000 f9e8 	bl	8003018 <memchr>
 8002c48:	b138      	cbz	r0, 8002c5a <_svfiprintf_r+0x142>
 8002c4a:	2340      	movs	r3, #64	; 0x40
 8002c4c:	1b40      	subs	r0, r0, r5
 8002c4e:	fa03 f000 	lsl.w	r0, r3, r0
 8002c52:	9b04      	ldr	r3, [sp, #16]
 8002c54:	3701      	adds	r7, #1
 8002c56:	4303      	orrs	r3, r0
 8002c58:	9304      	str	r3, [sp, #16]
 8002c5a:	7839      	ldrb	r1, [r7, #0]
 8002c5c:	2206      	movs	r2, #6
 8002c5e:	4827      	ldr	r0, [pc, #156]	; (8002cfc <_svfiprintf_r+0x1e4>)
 8002c60:	1c7e      	adds	r6, r7, #1
 8002c62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c66:	f000 f9d7 	bl	8003018 <memchr>
 8002c6a:	2800      	cmp	r0, #0
 8002c6c:	d038      	beq.n	8002ce0 <_svfiprintf_r+0x1c8>
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <_svfiprintf_r+0x1e8>)
 8002c70:	bb13      	cbnz	r3, 8002cb8 <_svfiprintf_r+0x1a0>
 8002c72:	9b03      	ldr	r3, [sp, #12]
 8002c74:	3307      	adds	r3, #7
 8002c76:	f023 0307 	bic.w	r3, r3, #7
 8002c7a:	3308      	adds	r3, #8
 8002c7c:	9303      	str	r3, [sp, #12]
 8002c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c80:	444b      	add	r3, r9
 8002c82:	9309      	str	r3, [sp, #36]	; 0x24
 8002c84:	e76d      	b.n	8002b62 <_svfiprintf_r+0x4a>
 8002c86:	fb05 3202 	mla	r2, r5, r2, r3
 8002c8a:	2001      	movs	r0, #1
 8002c8c:	460f      	mov	r7, r1
 8002c8e:	e7a6      	b.n	8002bde <_svfiprintf_r+0xc6>
 8002c90:	2300      	movs	r3, #0
 8002c92:	250a      	movs	r5, #10
 8002c94:	4619      	mov	r1, r3
 8002c96:	3701      	adds	r7, #1
 8002c98:	9305      	str	r3, [sp, #20]
 8002c9a:	4638      	mov	r0, r7
 8002c9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ca0:	3a30      	subs	r2, #48	; 0x30
 8002ca2:	2a09      	cmp	r2, #9
 8002ca4:	d903      	bls.n	8002cae <_svfiprintf_r+0x196>
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0c8      	beq.n	8002c3c <_svfiprintf_r+0x124>
 8002caa:	9105      	str	r1, [sp, #20]
 8002cac:	e7c6      	b.n	8002c3c <_svfiprintf_r+0x124>
 8002cae:	fb05 2101 	mla	r1, r5, r1, r2
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	4607      	mov	r7, r0
 8002cb6:	e7f0      	b.n	8002c9a <_svfiprintf_r+0x182>
 8002cb8:	ab03      	add	r3, sp, #12
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	4622      	mov	r2, r4
 8002cbe:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <_svfiprintf_r+0x1ec>)
 8002cc0:	a904      	add	r1, sp, #16
 8002cc2:	4640      	mov	r0, r8
 8002cc4:	f3af 8000 	nop.w
 8002cc8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002ccc:	4681      	mov	r9, r0
 8002cce:	d1d6      	bne.n	8002c7e <_svfiprintf_r+0x166>
 8002cd0:	89a3      	ldrh	r3, [r4, #12]
 8002cd2:	065b      	lsls	r3, r3, #25
 8002cd4:	f53f af35 	bmi.w	8002b42 <_svfiprintf_r+0x2a>
 8002cd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002cda:	b01d      	add	sp, #116	; 0x74
 8002cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ce0:	ab03      	add	r3, sp, #12
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	4622      	mov	r2, r4
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <_svfiprintf_r+0x1ec>)
 8002ce8:	a904      	add	r1, sp, #16
 8002cea:	4640      	mov	r0, r8
 8002cec:	f000 f882 	bl	8002df4 <_printf_i>
 8002cf0:	e7ea      	b.n	8002cc8 <_svfiprintf_r+0x1b0>
 8002cf2:	bf00      	nop
 8002cf4:	080032b4 	.word	0x080032b4
 8002cf8:	080032ba 	.word	0x080032ba
 8002cfc:	080032be 	.word	0x080032be
 8002d00:	00000000 	.word	0x00000000
 8002d04:	08002a65 	.word	0x08002a65

08002d08 <_printf_common>:
 8002d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d0c:	4691      	mov	r9, r2
 8002d0e:	461f      	mov	r7, r3
 8002d10:	688a      	ldr	r2, [r1, #8]
 8002d12:	690b      	ldr	r3, [r1, #16]
 8002d14:	4606      	mov	r6, r0
 8002d16:	4293      	cmp	r3, r2
 8002d18:	bfb8      	it	lt
 8002d1a:	4613      	movlt	r3, r2
 8002d1c:	f8c9 3000 	str.w	r3, [r9]
 8002d20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d24:	460c      	mov	r4, r1
 8002d26:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d2a:	b112      	cbz	r2, 8002d32 <_printf_common+0x2a>
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	f8c9 3000 	str.w	r3, [r9]
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	0699      	lsls	r1, r3, #26
 8002d36:	bf42      	ittt	mi
 8002d38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002d3c:	3302      	addmi	r3, #2
 8002d3e:	f8c9 3000 	strmi.w	r3, [r9]
 8002d42:	6825      	ldr	r5, [r4, #0]
 8002d44:	f015 0506 	ands.w	r5, r5, #6
 8002d48:	d107      	bne.n	8002d5a <_printf_common+0x52>
 8002d4a:	f104 0a19 	add.w	sl, r4, #25
 8002d4e:	68e3      	ldr	r3, [r4, #12]
 8002d50:	f8d9 2000 	ldr.w	r2, [r9]
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	42ab      	cmp	r3, r5
 8002d58:	dc29      	bgt.n	8002dae <_printf_common+0xa6>
 8002d5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002d5e:	6822      	ldr	r2, [r4, #0]
 8002d60:	3300      	adds	r3, #0
 8002d62:	bf18      	it	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	0692      	lsls	r2, r2, #26
 8002d68:	d42e      	bmi.n	8002dc8 <_printf_common+0xc0>
 8002d6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d6e:	4639      	mov	r1, r7
 8002d70:	4630      	mov	r0, r6
 8002d72:	47c0      	blx	r8
 8002d74:	3001      	adds	r0, #1
 8002d76:	d021      	beq.n	8002dbc <_printf_common+0xb4>
 8002d78:	6823      	ldr	r3, [r4, #0]
 8002d7a:	68e5      	ldr	r5, [r4, #12]
 8002d7c:	f003 0306 	and.w	r3, r3, #6
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	bf18      	it	ne
 8002d84:	2500      	movne	r5, #0
 8002d86:	f8d9 2000 	ldr.w	r2, [r9]
 8002d8a:	f04f 0900 	mov.w	r9, #0
 8002d8e:	bf08      	it	eq
 8002d90:	1aad      	subeq	r5, r5, r2
 8002d92:	68a3      	ldr	r3, [r4, #8]
 8002d94:	6922      	ldr	r2, [r4, #16]
 8002d96:	bf08      	it	eq
 8002d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	bfc4      	itt	gt
 8002da0:	1a9b      	subgt	r3, r3, r2
 8002da2:	18ed      	addgt	r5, r5, r3
 8002da4:	341a      	adds	r4, #26
 8002da6:	454d      	cmp	r5, r9
 8002da8:	d11a      	bne.n	8002de0 <_printf_common+0xd8>
 8002daa:	2000      	movs	r0, #0
 8002dac:	e008      	b.n	8002dc0 <_printf_common+0xb8>
 8002dae:	2301      	movs	r3, #1
 8002db0:	4652      	mov	r2, sl
 8002db2:	4639      	mov	r1, r7
 8002db4:	4630      	mov	r0, r6
 8002db6:	47c0      	blx	r8
 8002db8:	3001      	adds	r0, #1
 8002dba:	d103      	bne.n	8002dc4 <_printf_common+0xbc>
 8002dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002dc4:	3501      	adds	r5, #1
 8002dc6:	e7c2      	b.n	8002d4e <_printf_common+0x46>
 8002dc8:	2030      	movs	r0, #48	; 0x30
 8002dca:	18e1      	adds	r1, r4, r3
 8002dcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002dd6:	4422      	add	r2, r4
 8002dd8:	3302      	adds	r3, #2
 8002dda:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002dde:	e7c4      	b.n	8002d6a <_printf_common+0x62>
 8002de0:	2301      	movs	r3, #1
 8002de2:	4622      	mov	r2, r4
 8002de4:	4639      	mov	r1, r7
 8002de6:	4630      	mov	r0, r6
 8002de8:	47c0      	blx	r8
 8002dea:	3001      	adds	r0, #1
 8002dec:	d0e6      	beq.n	8002dbc <_printf_common+0xb4>
 8002dee:	f109 0901 	add.w	r9, r9, #1
 8002df2:	e7d8      	b.n	8002da6 <_printf_common+0x9e>

08002df4 <_printf_i>:
 8002df4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002df8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002dfc:	460c      	mov	r4, r1
 8002dfe:	7e09      	ldrb	r1, [r1, #24]
 8002e00:	b085      	sub	sp, #20
 8002e02:	296e      	cmp	r1, #110	; 0x6e
 8002e04:	4617      	mov	r7, r2
 8002e06:	4606      	mov	r6, r0
 8002e08:	4698      	mov	r8, r3
 8002e0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002e0c:	f000 80b3 	beq.w	8002f76 <_printf_i+0x182>
 8002e10:	d822      	bhi.n	8002e58 <_printf_i+0x64>
 8002e12:	2963      	cmp	r1, #99	; 0x63
 8002e14:	d036      	beq.n	8002e84 <_printf_i+0x90>
 8002e16:	d80a      	bhi.n	8002e2e <_printf_i+0x3a>
 8002e18:	2900      	cmp	r1, #0
 8002e1a:	f000 80b9 	beq.w	8002f90 <_printf_i+0x19c>
 8002e1e:	2958      	cmp	r1, #88	; 0x58
 8002e20:	f000 8083 	beq.w	8002f2a <_printf_i+0x136>
 8002e24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002e2c:	e032      	b.n	8002e94 <_printf_i+0xa0>
 8002e2e:	2964      	cmp	r1, #100	; 0x64
 8002e30:	d001      	beq.n	8002e36 <_printf_i+0x42>
 8002e32:	2969      	cmp	r1, #105	; 0x69
 8002e34:	d1f6      	bne.n	8002e24 <_printf_i+0x30>
 8002e36:	6820      	ldr	r0, [r4, #0]
 8002e38:	6813      	ldr	r3, [r2, #0]
 8002e3a:	0605      	lsls	r5, r0, #24
 8002e3c:	f103 0104 	add.w	r1, r3, #4
 8002e40:	d52a      	bpl.n	8002e98 <_printf_i+0xa4>
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6011      	str	r1, [r2, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	da03      	bge.n	8002e52 <_printf_i+0x5e>
 8002e4a:	222d      	movs	r2, #45	; 0x2d
 8002e4c:	425b      	negs	r3, r3
 8002e4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002e52:	486f      	ldr	r0, [pc, #444]	; (8003010 <_printf_i+0x21c>)
 8002e54:	220a      	movs	r2, #10
 8002e56:	e039      	b.n	8002ecc <_printf_i+0xd8>
 8002e58:	2973      	cmp	r1, #115	; 0x73
 8002e5a:	f000 809d 	beq.w	8002f98 <_printf_i+0x1a4>
 8002e5e:	d808      	bhi.n	8002e72 <_printf_i+0x7e>
 8002e60:	296f      	cmp	r1, #111	; 0x6f
 8002e62:	d020      	beq.n	8002ea6 <_printf_i+0xb2>
 8002e64:	2970      	cmp	r1, #112	; 0x70
 8002e66:	d1dd      	bne.n	8002e24 <_printf_i+0x30>
 8002e68:	6823      	ldr	r3, [r4, #0]
 8002e6a:	f043 0320 	orr.w	r3, r3, #32
 8002e6e:	6023      	str	r3, [r4, #0]
 8002e70:	e003      	b.n	8002e7a <_printf_i+0x86>
 8002e72:	2975      	cmp	r1, #117	; 0x75
 8002e74:	d017      	beq.n	8002ea6 <_printf_i+0xb2>
 8002e76:	2978      	cmp	r1, #120	; 0x78
 8002e78:	d1d4      	bne.n	8002e24 <_printf_i+0x30>
 8002e7a:	2378      	movs	r3, #120	; 0x78
 8002e7c:	4865      	ldr	r0, [pc, #404]	; (8003014 <_printf_i+0x220>)
 8002e7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e82:	e055      	b.n	8002f30 <_printf_i+0x13c>
 8002e84:	6813      	ldr	r3, [r2, #0]
 8002e86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e8a:	1d19      	adds	r1, r3, #4
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6011      	str	r1, [r2, #0]
 8002e90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e94:	2301      	movs	r3, #1
 8002e96:	e08c      	b.n	8002fb2 <_printf_i+0x1be>
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e9e:	6011      	str	r1, [r2, #0]
 8002ea0:	bf18      	it	ne
 8002ea2:	b21b      	sxthne	r3, r3
 8002ea4:	e7cf      	b.n	8002e46 <_printf_i+0x52>
 8002ea6:	6813      	ldr	r3, [r2, #0]
 8002ea8:	6825      	ldr	r5, [r4, #0]
 8002eaa:	1d18      	adds	r0, r3, #4
 8002eac:	6010      	str	r0, [r2, #0]
 8002eae:	0628      	lsls	r0, r5, #24
 8002eb0:	d501      	bpl.n	8002eb6 <_printf_i+0xc2>
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	e002      	b.n	8002ebc <_printf_i+0xc8>
 8002eb6:	0668      	lsls	r0, r5, #25
 8002eb8:	d5fb      	bpl.n	8002eb2 <_printf_i+0xbe>
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	296f      	cmp	r1, #111	; 0x6f
 8002ebe:	bf14      	ite	ne
 8002ec0:	220a      	movne	r2, #10
 8002ec2:	2208      	moveq	r2, #8
 8002ec4:	4852      	ldr	r0, [pc, #328]	; (8003010 <_printf_i+0x21c>)
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ecc:	6865      	ldr	r5, [r4, #4]
 8002ece:	2d00      	cmp	r5, #0
 8002ed0:	60a5      	str	r5, [r4, #8]
 8002ed2:	f2c0 8095 	blt.w	8003000 <_printf_i+0x20c>
 8002ed6:	6821      	ldr	r1, [r4, #0]
 8002ed8:	f021 0104 	bic.w	r1, r1, #4
 8002edc:	6021      	str	r1, [r4, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d13d      	bne.n	8002f5e <_printf_i+0x16a>
 8002ee2:	2d00      	cmp	r5, #0
 8002ee4:	f040 808e 	bne.w	8003004 <_printf_i+0x210>
 8002ee8:	4665      	mov	r5, ip
 8002eea:	2a08      	cmp	r2, #8
 8002eec:	d10b      	bne.n	8002f06 <_printf_i+0x112>
 8002eee:	6823      	ldr	r3, [r4, #0]
 8002ef0:	07db      	lsls	r3, r3, #31
 8002ef2:	d508      	bpl.n	8002f06 <_printf_i+0x112>
 8002ef4:	6923      	ldr	r3, [r4, #16]
 8002ef6:	6862      	ldr	r2, [r4, #4]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	bfde      	ittt	le
 8002efc:	2330      	movle	r3, #48	; 0x30
 8002efe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f02:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002f06:	ebac 0305 	sub.w	r3, ip, r5
 8002f0a:	6123      	str	r3, [r4, #16]
 8002f0c:	f8cd 8000 	str.w	r8, [sp]
 8002f10:	463b      	mov	r3, r7
 8002f12:	aa03      	add	r2, sp, #12
 8002f14:	4621      	mov	r1, r4
 8002f16:	4630      	mov	r0, r6
 8002f18:	f7ff fef6 	bl	8002d08 <_printf_common>
 8002f1c:	3001      	adds	r0, #1
 8002f1e:	d14d      	bne.n	8002fbc <_printf_i+0x1c8>
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	b005      	add	sp, #20
 8002f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002f2a:	4839      	ldr	r0, [pc, #228]	; (8003010 <_printf_i+0x21c>)
 8002f2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002f30:	6813      	ldr	r3, [r2, #0]
 8002f32:	6821      	ldr	r1, [r4, #0]
 8002f34:	1d1d      	adds	r5, r3, #4
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6015      	str	r5, [r2, #0]
 8002f3a:	060a      	lsls	r2, r1, #24
 8002f3c:	d50b      	bpl.n	8002f56 <_printf_i+0x162>
 8002f3e:	07ca      	lsls	r2, r1, #31
 8002f40:	bf44      	itt	mi
 8002f42:	f041 0120 	orrmi.w	r1, r1, #32
 8002f46:	6021      	strmi	r1, [r4, #0]
 8002f48:	b91b      	cbnz	r3, 8002f52 <_printf_i+0x15e>
 8002f4a:	6822      	ldr	r2, [r4, #0]
 8002f4c:	f022 0220 	bic.w	r2, r2, #32
 8002f50:	6022      	str	r2, [r4, #0]
 8002f52:	2210      	movs	r2, #16
 8002f54:	e7b7      	b.n	8002ec6 <_printf_i+0xd2>
 8002f56:	064d      	lsls	r5, r1, #25
 8002f58:	bf48      	it	mi
 8002f5a:	b29b      	uxthmi	r3, r3
 8002f5c:	e7ef      	b.n	8002f3e <_printf_i+0x14a>
 8002f5e:	4665      	mov	r5, ip
 8002f60:	fbb3 f1f2 	udiv	r1, r3, r2
 8002f64:	fb02 3311 	mls	r3, r2, r1, r3
 8002f68:	5cc3      	ldrb	r3, [r0, r3]
 8002f6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002f6e:	460b      	mov	r3, r1
 8002f70:	2900      	cmp	r1, #0
 8002f72:	d1f5      	bne.n	8002f60 <_printf_i+0x16c>
 8002f74:	e7b9      	b.n	8002eea <_printf_i+0xf6>
 8002f76:	6813      	ldr	r3, [r2, #0]
 8002f78:	6825      	ldr	r5, [r4, #0]
 8002f7a:	1d18      	adds	r0, r3, #4
 8002f7c:	6961      	ldr	r1, [r4, #20]
 8002f7e:	6010      	str	r0, [r2, #0]
 8002f80:	0628      	lsls	r0, r5, #24
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	d501      	bpl.n	8002f8a <_printf_i+0x196>
 8002f86:	6019      	str	r1, [r3, #0]
 8002f88:	e002      	b.n	8002f90 <_printf_i+0x19c>
 8002f8a:	066a      	lsls	r2, r5, #25
 8002f8c:	d5fb      	bpl.n	8002f86 <_printf_i+0x192>
 8002f8e:	8019      	strh	r1, [r3, #0]
 8002f90:	2300      	movs	r3, #0
 8002f92:	4665      	mov	r5, ip
 8002f94:	6123      	str	r3, [r4, #16]
 8002f96:	e7b9      	b.n	8002f0c <_printf_i+0x118>
 8002f98:	6813      	ldr	r3, [r2, #0]
 8002f9a:	1d19      	adds	r1, r3, #4
 8002f9c:	6011      	str	r1, [r2, #0]
 8002f9e:	681d      	ldr	r5, [r3, #0]
 8002fa0:	6862      	ldr	r2, [r4, #4]
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	f000 f837 	bl	8003018 <memchr>
 8002faa:	b108      	cbz	r0, 8002fb0 <_printf_i+0x1bc>
 8002fac:	1b40      	subs	r0, r0, r5
 8002fae:	6060      	str	r0, [r4, #4]
 8002fb0:	6863      	ldr	r3, [r4, #4]
 8002fb2:	6123      	str	r3, [r4, #16]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fba:	e7a7      	b.n	8002f0c <_printf_i+0x118>
 8002fbc:	6923      	ldr	r3, [r4, #16]
 8002fbe:	462a      	mov	r2, r5
 8002fc0:	4639      	mov	r1, r7
 8002fc2:	4630      	mov	r0, r6
 8002fc4:	47c0      	blx	r8
 8002fc6:	3001      	adds	r0, #1
 8002fc8:	d0aa      	beq.n	8002f20 <_printf_i+0x12c>
 8002fca:	6823      	ldr	r3, [r4, #0]
 8002fcc:	079b      	lsls	r3, r3, #30
 8002fce:	d413      	bmi.n	8002ff8 <_printf_i+0x204>
 8002fd0:	68e0      	ldr	r0, [r4, #12]
 8002fd2:	9b03      	ldr	r3, [sp, #12]
 8002fd4:	4298      	cmp	r0, r3
 8002fd6:	bfb8      	it	lt
 8002fd8:	4618      	movlt	r0, r3
 8002fda:	e7a3      	b.n	8002f24 <_printf_i+0x130>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	464a      	mov	r2, r9
 8002fe0:	4639      	mov	r1, r7
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	47c0      	blx	r8
 8002fe6:	3001      	adds	r0, #1
 8002fe8:	d09a      	beq.n	8002f20 <_printf_i+0x12c>
 8002fea:	3501      	adds	r5, #1
 8002fec:	68e3      	ldr	r3, [r4, #12]
 8002fee:	9a03      	ldr	r2, [sp, #12]
 8002ff0:	1a9b      	subs	r3, r3, r2
 8002ff2:	42ab      	cmp	r3, r5
 8002ff4:	dcf2      	bgt.n	8002fdc <_printf_i+0x1e8>
 8002ff6:	e7eb      	b.n	8002fd0 <_printf_i+0x1dc>
 8002ff8:	2500      	movs	r5, #0
 8002ffa:	f104 0919 	add.w	r9, r4, #25
 8002ffe:	e7f5      	b.n	8002fec <_printf_i+0x1f8>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1ac      	bne.n	8002f5e <_printf_i+0x16a>
 8003004:	7803      	ldrb	r3, [r0, #0]
 8003006:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800300a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800300e:	e76c      	b.n	8002eea <_printf_i+0xf6>
 8003010:	080032c5 	.word	0x080032c5
 8003014:	080032d6 	.word	0x080032d6

08003018 <memchr>:
 8003018:	b510      	push	{r4, lr}
 800301a:	b2c9      	uxtb	r1, r1
 800301c:	4402      	add	r2, r0
 800301e:	4290      	cmp	r0, r2
 8003020:	4603      	mov	r3, r0
 8003022:	d101      	bne.n	8003028 <memchr+0x10>
 8003024:	2300      	movs	r3, #0
 8003026:	e003      	b.n	8003030 <memchr+0x18>
 8003028:	781c      	ldrb	r4, [r3, #0]
 800302a:	3001      	adds	r0, #1
 800302c:	428c      	cmp	r4, r1
 800302e:	d1f6      	bne.n	800301e <memchr+0x6>
 8003030:	4618      	mov	r0, r3
 8003032:	bd10      	pop	{r4, pc}

08003034 <memcpy>:
 8003034:	b510      	push	{r4, lr}
 8003036:	1e43      	subs	r3, r0, #1
 8003038:	440a      	add	r2, r1
 800303a:	4291      	cmp	r1, r2
 800303c:	d100      	bne.n	8003040 <memcpy+0xc>
 800303e:	bd10      	pop	{r4, pc}
 8003040:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003044:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003048:	e7f7      	b.n	800303a <memcpy+0x6>

0800304a <memmove>:
 800304a:	4288      	cmp	r0, r1
 800304c:	b510      	push	{r4, lr}
 800304e:	eb01 0302 	add.w	r3, r1, r2
 8003052:	d807      	bhi.n	8003064 <memmove+0x1a>
 8003054:	1e42      	subs	r2, r0, #1
 8003056:	4299      	cmp	r1, r3
 8003058:	d00a      	beq.n	8003070 <memmove+0x26>
 800305a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800305e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003062:	e7f8      	b.n	8003056 <memmove+0xc>
 8003064:	4283      	cmp	r3, r0
 8003066:	d9f5      	bls.n	8003054 <memmove+0xa>
 8003068:	1881      	adds	r1, r0, r2
 800306a:	1ad2      	subs	r2, r2, r3
 800306c:	42d3      	cmn	r3, r2
 800306e:	d100      	bne.n	8003072 <memmove+0x28>
 8003070:	bd10      	pop	{r4, pc}
 8003072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003076:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800307a:	e7f7      	b.n	800306c <memmove+0x22>

0800307c <_free_r>:
 800307c:	b538      	push	{r3, r4, r5, lr}
 800307e:	4605      	mov	r5, r0
 8003080:	2900      	cmp	r1, #0
 8003082:	d043      	beq.n	800310c <_free_r+0x90>
 8003084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003088:	1f0c      	subs	r4, r1, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	bfb8      	it	lt
 800308e:	18e4      	addlt	r4, r4, r3
 8003090:	f000 f8d0 	bl	8003234 <__malloc_lock>
 8003094:	4a1e      	ldr	r2, [pc, #120]	; (8003110 <_free_r+0x94>)
 8003096:	6813      	ldr	r3, [r2, #0]
 8003098:	4610      	mov	r0, r2
 800309a:	b933      	cbnz	r3, 80030aa <_free_r+0x2e>
 800309c:	6063      	str	r3, [r4, #4]
 800309e:	6014      	str	r4, [r2, #0]
 80030a0:	4628      	mov	r0, r5
 80030a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030a6:	f000 b8c6 	b.w	8003236 <__malloc_unlock>
 80030aa:	42a3      	cmp	r3, r4
 80030ac:	d90b      	bls.n	80030c6 <_free_r+0x4a>
 80030ae:	6821      	ldr	r1, [r4, #0]
 80030b0:	1862      	adds	r2, r4, r1
 80030b2:	4293      	cmp	r3, r2
 80030b4:	bf01      	itttt	eq
 80030b6:	681a      	ldreq	r2, [r3, #0]
 80030b8:	685b      	ldreq	r3, [r3, #4]
 80030ba:	1852      	addeq	r2, r2, r1
 80030bc:	6022      	streq	r2, [r4, #0]
 80030be:	6063      	str	r3, [r4, #4]
 80030c0:	6004      	str	r4, [r0, #0]
 80030c2:	e7ed      	b.n	80030a0 <_free_r+0x24>
 80030c4:	4613      	mov	r3, r2
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	b10a      	cbz	r2, 80030ce <_free_r+0x52>
 80030ca:	42a2      	cmp	r2, r4
 80030cc:	d9fa      	bls.n	80030c4 <_free_r+0x48>
 80030ce:	6819      	ldr	r1, [r3, #0]
 80030d0:	1858      	adds	r0, r3, r1
 80030d2:	42a0      	cmp	r0, r4
 80030d4:	d10b      	bne.n	80030ee <_free_r+0x72>
 80030d6:	6820      	ldr	r0, [r4, #0]
 80030d8:	4401      	add	r1, r0
 80030da:	1858      	adds	r0, r3, r1
 80030dc:	4282      	cmp	r2, r0
 80030de:	6019      	str	r1, [r3, #0]
 80030e0:	d1de      	bne.n	80030a0 <_free_r+0x24>
 80030e2:	6810      	ldr	r0, [r2, #0]
 80030e4:	6852      	ldr	r2, [r2, #4]
 80030e6:	4401      	add	r1, r0
 80030e8:	6019      	str	r1, [r3, #0]
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	e7d8      	b.n	80030a0 <_free_r+0x24>
 80030ee:	d902      	bls.n	80030f6 <_free_r+0x7a>
 80030f0:	230c      	movs	r3, #12
 80030f2:	602b      	str	r3, [r5, #0]
 80030f4:	e7d4      	b.n	80030a0 <_free_r+0x24>
 80030f6:	6820      	ldr	r0, [r4, #0]
 80030f8:	1821      	adds	r1, r4, r0
 80030fa:	428a      	cmp	r2, r1
 80030fc:	bf01      	itttt	eq
 80030fe:	6811      	ldreq	r1, [r2, #0]
 8003100:	6852      	ldreq	r2, [r2, #4]
 8003102:	1809      	addeq	r1, r1, r0
 8003104:	6021      	streq	r1, [r4, #0]
 8003106:	6062      	str	r2, [r4, #4]
 8003108:	605c      	str	r4, [r3, #4]
 800310a:	e7c9      	b.n	80030a0 <_free_r+0x24>
 800310c:	bd38      	pop	{r3, r4, r5, pc}
 800310e:	bf00      	nop
 8003110:	20000090 	.word	0x20000090

08003114 <_malloc_r>:
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	1ccd      	adds	r5, r1, #3
 8003118:	f025 0503 	bic.w	r5, r5, #3
 800311c:	3508      	adds	r5, #8
 800311e:	2d0c      	cmp	r5, #12
 8003120:	bf38      	it	cc
 8003122:	250c      	movcc	r5, #12
 8003124:	2d00      	cmp	r5, #0
 8003126:	4606      	mov	r6, r0
 8003128:	db01      	blt.n	800312e <_malloc_r+0x1a>
 800312a:	42a9      	cmp	r1, r5
 800312c:	d903      	bls.n	8003136 <_malloc_r+0x22>
 800312e:	230c      	movs	r3, #12
 8003130:	6033      	str	r3, [r6, #0]
 8003132:	2000      	movs	r0, #0
 8003134:	bd70      	pop	{r4, r5, r6, pc}
 8003136:	f000 f87d 	bl	8003234 <__malloc_lock>
 800313a:	4a21      	ldr	r2, [pc, #132]	; (80031c0 <_malloc_r+0xac>)
 800313c:	6814      	ldr	r4, [r2, #0]
 800313e:	4621      	mov	r1, r4
 8003140:	b991      	cbnz	r1, 8003168 <_malloc_r+0x54>
 8003142:	4c20      	ldr	r4, [pc, #128]	; (80031c4 <_malloc_r+0xb0>)
 8003144:	6823      	ldr	r3, [r4, #0]
 8003146:	b91b      	cbnz	r3, 8003150 <_malloc_r+0x3c>
 8003148:	4630      	mov	r0, r6
 800314a:	f000 f863 	bl	8003214 <_sbrk_r>
 800314e:	6020      	str	r0, [r4, #0]
 8003150:	4629      	mov	r1, r5
 8003152:	4630      	mov	r0, r6
 8003154:	f000 f85e 	bl	8003214 <_sbrk_r>
 8003158:	1c43      	adds	r3, r0, #1
 800315a:	d124      	bne.n	80031a6 <_malloc_r+0x92>
 800315c:	230c      	movs	r3, #12
 800315e:	4630      	mov	r0, r6
 8003160:	6033      	str	r3, [r6, #0]
 8003162:	f000 f868 	bl	8003236 <__malloc_unlock>
 8003166:	e7e4      	b.n	8003132 <_malloc_r+0x1e>
 8003168:	680b      	ldr	r3, [r1, #0]
 800316a:	1b5b      	subs	r3, r3, r5
 800316c:	d418      	bmi.n	80031a0 <_malloc_r+0x8c>
 800316e:	2b0b      	cmp	r3, #11
 8003170:	d90f      	bls.n	8003192 <_malloc_r+0x7e>
 8003172:	600b      	str	r3, [r1, #0]
 8003174:	18cc      	adds	r4, r1, r3
 8003176:	50cd      	str	r5, [r1, r3]
 8003178:	4630      	mov	r0, r6
 800317a:	f000 f85c 	bl	8003236 <__malloc_unlock>
 800317e:	f104 000b 	add.w	r0, r4, #11
 8003182:	1d23      	adds	r3, r4, #4
 8003184:	f020 0007 	bic.w	r0, r0, #7
 8003188:	1ac3      	subs	r3, r0, r3
 800318a:	d0d3      	beq.n	8003134 <_malloc_r+0x20>
 800318c:	425a      	negs	r2, r3
 800318e:	50e2      	str	r2, [r4, r3]
 8003190:	e7d0      	b.n	8003134 <_malloc_r+0x20>
 8003192:	684b      	ldr	r3, [r1, #4]
 8003194:	428c      	cmp	r4, r1
 8003196:	bf16      	itet	ne
 8003198:	6063      	strne	r3, [r4, #4]
 800319a:	6013      	streq	r3, [r2, #0]
 800319c:	460c      	movne	r4, r1
 800319e:	e7eb      	b.n	8003178 <_malloc_r+0x64>
 80031a0:	460c      	mov	r4, r1
 80031a2:	6849      	ldr	r1, [r1, #4]
 80031a4:	e7cc      	b.n	8003140 <_malloc_r+0x2c>
 80031a6:	1cc4      	adds	r4, r0, #3
 80031a8:	f024 0403 	bic.w	r4, r4, #3
 80031ac:	42a0      	cmp	r0, r4
 80031ae:	d005      	beq.n	80031bc <_malloc_r+0xa8>
 80031b0:	1a21      	subs	r1, r4, r0
 80031b2:	4630      	mov	r0, r6
 80031b4:	f000 f82e 	bl	8003214 <_sbrk_r>
 80031b8:	3001      	adds	r0, #1
 80031ba:	d0cf      	beq.n	800315c <_malloc_r+0x48>
 80031bc:	6025      	str	r5, [r4, #0]
 80031be:	e7db      	b.n	8003178 <_malloc_r+0x64>
 80031c0:	20000090 	.word	0x20000090
 80031c4:	20000094 	.word	0x20000094

080031c8 <_realloc_r>:
 80031c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ca:	4607      	mov	r7, r0
 80031cc:	4614      	mov	r4, r2
 80031ce:	460e      	mov	r6, r1
 80031d0:	b921      	cbnz	r1, 80031dc <_realloc_r+0x14>
 80031d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80031d6:	4611      	mov	r1, r2
 80031d8:	f7ff bf9c 	b.w	8003114 <_malloc_r>
 80031dc:	b922      	cbnz	r2, 80031e8 <_realloc_r+0x20>
 80031de:	f7ff ff4d 	bl	800307c <_free_r>
 80031e2:	4625      	mov	r5, r4
 80031e4:	4628      	mov	r0, r5
 80031e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031e8:	f000 f826 	bl	8003238 <_malloc_usable_size_r>
 80031ec:	42a0      	cmp	r0, r4
 80031ee:	d20f      	bcs.n	8003210 <_realloc_r+0x48>
 80031f0:	4621      	mov	r1, r4
 80031f2:	4638      	mov	r0, r7
 80031f4:	f7ff ff8e 	bl	8003114 <_malloc_r>
 80031f8:	4605      	mov	r5, r0
 80031fa:	2800      	cmp	r0, #0
 80031fc:	d0f2      	beq.n	80031e4 <_realloc_r+0x1c>
 80031fe:	4631      	mov	r1, r6
 8003200:	4622      	mov	r2, r4
 8003202:	f7ff ff17 	bl	8003034 <memcpy>
 8003206:	4631      	mov	r1, r6
 8003208:	4638      	mov	r0, r7
 800320a:	f7ff ff37 	bl	800307c <_free_r>
 800320e:	e7e9      	b.n	80031e4 <_realloc_r+0x1c>
 8003210:	4635      	mov	r5, r6
 8003212:	e7e7      	b.n	80031e4 <_realloc_r+0x1c>

08003214 <_sbrk_r>:
 8003214:	b538      	push	{r3, r4, r5, lr}
 8003216:	2300      	movs	r3, #0
 8003218:	4c05      	ldr	r4, [pc, #20]	; (8003230 <_sbrk_r+0x1c>)
 800321a:	4605      	mov	r5, r0
 800321c:	4608      	mov	r0, r1
 800321e:	6023      	str	r3, [r4, #0]
 8003220:	f7fd fc3e 	bl	8000aa0 <_sbrk>
 8003224:	1c43      	adds	r3, r0, #1
 8003226:	d102      	bne.n	800322e <_sbrk_r+0x1a>
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	b103      	cbz	r3, 800322e <_sbrk_r+0x1a>
 800322c:	602b      	str	r3, [r5, #0]
 800322e:	bd38      	pop	{r3, r4, r5, pc}
 8003230:	2000013c 	.word	0x2000013c

08003234 <__malloc_lock>:
 8003234:	4770      	bx	lr

08003236 <__malloc_unlock>:
 8003236:	4770      	bx	lr

08003238 <_malloc_usable_size_r>:
 8003238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800323c:	1f18      	subs	r0, r3, #4
 800323e:	2b00      	cmp	r3, #0
 8003240:	bfbc      	itt	lt
 8003242:	580b      	ldrlt	r3, [r1, r0]
 8003244:	18c0      	addlt	r0, r0, r3
 8003246:	4770      	bx	lr

08003248 <_init>:
 8003248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324a:	bf00      	nop
 800324c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800324e:	bc08      	pop	{r3}
 8003250:	469e      	mov	lr, r3
 8003252:	4770      	bx	lr

08003254 <_fini>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	bf00      	nop
 8003258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325a:	bc08      	pop	{r3}
 800325c:	469e      	mov	lr, r3
 800325e:	4770      	bx	lr
